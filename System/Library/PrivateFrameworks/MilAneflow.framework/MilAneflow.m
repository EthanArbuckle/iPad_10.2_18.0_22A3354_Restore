void MIL::ANEMachineIR::Interpreter::PeMulCpu::Run(ANEMachineIR::Validators *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  uint64_t (**v21)();
  uint64_t InterpretedTensorValue;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  MIL::IRValueType *OutputType;
  uint64_t v29;
  int v30;
  ANEMachineIR::Utils *v31;
  const MIL::IRTensorValueType *v32;
  ANEMachineIR::Utils *v33;
  const MIL::IRTensorValueType *v34;
  MIL::IRValueType *v35;
  ANEMachineIR::Utils *v36;
  const MIL::IRTensorValueType *v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t Data;
  float v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  float v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float v106;
  float v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  float v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  float v121;
  float v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  float v131;
  float v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float v136;
  float v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  float v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  float v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float v151;
  float v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float v156;
  float v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  float v161;
  float v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  float v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  float v171;
  float v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  unsigned __int8 *v176;
  MIL::IRValueType *v177;
  void **v178;
  _QWORD *v179;
  uint64_t v180;
  unsigned __int8 *v181;
  MIL::IRValueType *v182;
  void **v183;
  _QWORD *v184;
  uint64_t v185;
  unsigned __int8 *v186;
  MIL::IRValueType *v187;
  void **v188;
  _QWORD *v189;
  uint64_t v190;
  unsigned __int8 *v191;
  MIL::IRValueType *v192;
  void **v193;
  _QWORD *v194;
  uint64_t v195;
  unsigned __int8 *v196;
  MIL::IRValueType *v197;
  void **v198;
  _QWORD *v199;
  uint64_t v200;
  unsigned __int8 *v201;
  MIL::IRValueType *v202;
  void **v203;
  _QWORD *v204;
  uint64_t v205;
  unsigned __int8 *v206;
  MIL::IRValueType *v207;
  void **v208;
  _QWORD *v209;
  uint64_t v210;
  unsigned __int8 *v211;
  MIL::IRValueType *v212;
  void **v213;
  _QWORD *v214;
  uint64_t v215;
  unsigned __int8 *v216;
  MIL::IRValueType *v217;
  void **v218;
  _QWORD *v219;
  uint64_t v220;
  unsigned __int8 *v221;
  MIL::IRValueType *v222;
  void **v223;
  _QWORD *v224;
  uint64_t v225;
  unsigned __int8 *v226;
  MIL::IRValueType *v227;
  void **v228;
  _QWORD *v229;
  uint64_t v230;
  unsigned __int8 *v231;
  MIL::IRValueType *v232;
  void **v233;
  _QWORD *v234;
  uint64_t v235;
  unsigned __int8 *v236;
  MIL::IRValueType *v237;
  void **v238;
  _QWORD *v239;
  uint64_t v240;
  unsigned __int8 *v241;
  MIL::IRValueType *v242;
  void **v243;
  _QWORD *v244;
  uint64_t v245;
  unsigned __int8 *v246;
  MIL::IRValueType *v247;
  void **v248;
  _QWORD *v249;
  uint64_t v250;
  unsigned __int8 *v251;
  MIL::IRValueType *v252;
  void **v253;
  _QWORD *v254;
  uint64_t v255;
  unsigned __int8 *v256;
  MIL::IRValueType *v257;
  void **v258;
  _QWORD *v259;
  uint64_t v260;
  unsigned __int8 *v261;
  MIL::IRValueType *v262;
  void **v263;
  _QWORD *v264;
  uint64_t v265;
  unsigned __int8 *v266;
  MIL::IRValueType *v267;
  void **v268;
  _QWORD *v269;
  uint64_t v270;
  unsigned __int8 *v271;
  MIL::IRValueType *v272;
  void **v273;
  _QWORD *v274;
  uint64_t v275;
  unsigned __int8 *v276;
  MIL::IRValueType *v277;
  void **v278;
  _QWORD *v279;
  uint64_t v280;
  unsigned __int8 *v281;
  MIL::IRValueType *v282;
  void **v283;
  _QWORD *v284;
  uint64_t v285;
  unsigned __int8 *v286;
  MIL::IRValueType *v287;
  void **v288;
  _QWORD *v289;
  uint64_t v290;
  unsigned __int8 *v291;
  MIL::IRValueType *v292;
  void **v293;
  _QWORD *v294;
  uint64_t v295;
  unsigned __int8 *v296;
  MIL::IRValueType *v297;
  void **v298;
  _QWORD *v299;
  uint64_t v300;
  unsigned __int8 *v301;
  MIL::IRValueType *v302;
  void **v303;
  _QWORD *v304;
  uint64_t v305;
  unsigned __int8 *v306;
  MIL::IRValueType *v307;
  void **v308;
  uint64_t (***v309)();
  uint64_t v310;
  unsigned __int8 *v311;
  unsigned __int8 *v312;
  uint64_t v313;
  void *v314[3];
  void *v315[3];
  void *v316[3];
  void *v317[3];
  std::string v318;
  uint64_t v319;
  std::string v320;
  uint64_t (**v321)();
  char v322;
  char v323;
  void *v324;
  void *v325;
  char v326;
  char v327;
  char v328;
  char v329;
  char v330;
  void *__p;
  char v332;
  char v333;
  void **v334;
  _BYTE v335[24];
  _BYTE *v336;
  _BYTE v337[24];
  _BYTE *v338;
  _BYTE v339[24];
  _BYTE *v340;
  _BYTE v341[24];
  _BYTE *v342;
  _BYTE v343[24];
  _BYTE *v344;
  _BYTE v345[24];
  _BYTE *v346;
  _BYTE v347[24];
  _BYTE *v348;
  _BYTE v349[24];
  _BYTE *v350;
  _BYTE v351[24];
  _BYTE *v352;
  _BYTE v353[24];
  _BYTE *v354;
  _BYTE v355[24];
  _BYTE *v356;
  _BYTE v357[24];
  _BYTE *v358;
  _BYTE v359[24];
  _BYTE *v360;
  _BYTE v361[24];
  _BYTE *v362;
  _BYTE v363[24];
  _BYTE *v364;
  _BYTE v365[24];
  _BYTE *v366;
  _BYTE v367[24];
  _BYTE *v368;
  _BYTE v369[24];
  _BYTE *v370;
  _BYTE v371[24];
  _BYTE *v372;
  _BYTE v373[24];
  _BYTE *v374;
  _BYTE v375[24];
  _BYTE *v376;
  _BYTE v377[24];
  _BYTE *v378;
  _BYTE v379[24];
  _BYTE *v380;
  _BYTE v381[24];
  _BYTE *v382;
  _BYTE v383[24];
  _BYTE *v384;
  _BYTE v385[24];
  _BYTE *v386;
  _BYTE v387[24];
  _BYTE *v388;
  uint64_t (**v389[2])();
  char v390;
  uint64_t (***v391)();
  uint64_t v392;

  v392 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(_QWORD *)a1 + 56))(a1);
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(v6 + 8) != 6)
      goto LABEL_10;
    v6 = *(_QWORD *)v6;
  }
  else if (v7 != 6)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v6 != 1834968432 || *(_WORD *)(v6 + 4) != 27765)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    v9 = a3 + 8;
    v10 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v389, "pe_mul");
    v11 = std::string::insert(v10, 0, "Expected ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v318.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v318.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v318, " op. Got ");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v320.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(_QWORD *)a1 + 56))(a1);
    v16 = *(char *)(v15 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)v15;
    else
      v17 = *(const std::string::value_type **)v15;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(v15 + 23);
    else
      v18 = *(_QWORD *)(v15 + 8);
    v19 = std::string::append(&v320, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)v9 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v320.__r_.__value_.__l.__data_);
    if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v318.__r_.__value_.__l.__data_);
    if (v390 < 0)
    {
      v21 = v389[0];
LABEL_22:
      operator delete(v21);
      return;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v320, "x");
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v320);
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v320.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v320, "y");
  v23 = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v320);
  if ((SHIBYTE(v320.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue)
      goto LABEL_28;
LABEL_33:
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "No value for x");
    return;
  }
  operator delete(v320.__r_.__value_.__l.__data_);
  if (!InterpretedTensorValue)
    goto LABEL_33;
LABEL_28:
  if (!v23)
  {
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "No value for y");
    return;
  }
  v320.__r_.__value_.__s.__data_[0] = 0;
  v320.__r_.__value_.__s.__data_[4] = 0;
  v320.__r_.__value_.__s.__data_[8] = 0;
  v320.__r_.__value_.__s.__data_[12] = 0;
  v320.__r_.__value_.__s.__data_[16] = 0;
  v320.__r_.__value_.__s.__data_[18] = 0;
  LOBYTE(v321) = 0;
  v323 = 0;
  LOBYTE(v324) = 0;
  v326 = 0;
  v327 = 0;
  v328 = 0;
  v329 = 0;
  v330 = 0;
  LOBYTE(__p) = 0;
  v333 = 0;
  ANEMachineIR::Validators::ParsePeElementWiseBinaryParamValues(a1, (const MIL::IROperation *)&v320, (MIL::ValidationResult *)&v318);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v318) & 1) == 0)
  {
    *(_DWORD *)a3 = 3;
    MIL::MILResult::GetMessageWithLocation((MIL::MILResult *)&v318);
    MEMORY[0x20BCFEAEC](&v318);
    goto LABEL_36;
  }
  MEMORY[0x20BCFEAEC](&v318);
  if (v323)
  {
    *(_DWORD *)a3 = 5;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Unimplemented 'reduction': rdar://86732114");
    goto LABEL_36;
  }
  *(_OWORD *)&v318.__r_.__value_.__r.__words[1] = 0uLL;
  v319 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v318, v389);
  if (LODWORD(v318.__r_.__value_.__l.__data_))
  {
    *(_DWORD *)a3 = v318.__r_.__value_.__l.__data_;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)&v318.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v319;
    *(_OWORD *)&v318.__r_.__value_.__r.__words[1] = 0uLL;
    v319 = 0;
    goto LABEL_475;
  }
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 88))(v24);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v29 = MIL::IRValueType::AsTensorType(OutputType);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 88))(v29);
  v31 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  ANEMachineIR::Utils::GetStaticTensorShape(v31, v32, (uint64_t)v317);
  v33 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
  ANEMachineIR::Utils::GetStaticTensorShape(v33, v34, (uint64_t)v316);
  v35 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v36 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v35);
  ANEMachineIR::Utils::GetStaticTensorShape(v36, v37, (uint64_t)v315);
  switch(v25)
  {
    case 4:
      if (v27 != 14)
      {
        if (v27 != 9)
        {
          if (v27 != 4)
            goto LABEL_81;
          if (v30 != 14)
          {
            if (v30 != 9)
            {
              if (v30 != 4)
                goto LABEL_124;
              v48 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              v49 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              v311 = 0;
              v312 = 0;
              v313 = 0;
              v50 = *(float *)&v320.__r_.__value_.__l.__data_;
              v51 = *(float *)&v320.__r_.__value_.__r.__words[1];
              v52 = (uint64_t)v391;
              if (v391)
              {
                if (v391 == v389)
                {
                  v388 = v387;
                  (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v387);
LABEL_429:
                  v289 = v388;
                  if (v388 == v387)
                  {
                    v290 = 4;
                    v289 = v387;
                  }
                  else
                  {
                    if (!v388)
                    {
LABEL_434:
                      (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                      v291 = v311;
                      if (v312 == v311)
                        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                      v292 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                      MIL::IRValueType::AsTensorType(v292);
                      MIL::IRTensorValueType::MakeFloat16Value();
                      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v291, (uint64_t *)&v334);
                      v293 = v334;
                      v334 = 0;
                      if (v293)
                        (*((void (**)(void **))*v293 + 1))(v293);
                      goto LABEL_467;
                    }
                    v290 = 5;
                  }
                  (*(void (**)(void))(*v289 + 8 * v290))();
                  goto LABEL_434;
                }
                v52 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
              }
              v388 = (_BYTE *)v52;
              goto LABEL_429;
            }
            v134 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            v135 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            v311 = 0;
            v312 = 0;
            v313 = 0;
            v136 = *(float *)&v320.__r_.__value_.__l.__data_;
            v137 = *(float *)&v320.__r_.__value_.__r.__words[1];
            v138 = (uint64_t)v391;
            if (v391)
            {
              if (v391 == v389)
              {
                v384 = v383;
                (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v383);
LABEL_329:
                v239 = v384;
                if (v384 == v383)
                {
                  v240 = 4;
                  v239 = v383;
                }
                else
                {
                  if (!v384)
                  {
LABEL_334:
                    (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                    v241 = v311;
                    if (v312 == v311)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v242 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v242);
                    MIL::IRTensorValueType::MakeInt8Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v241, (uint64_t *)&v334);
                    v243 = v334;
                    v334 = 0;
                    if (v243)
                      (*((void (**)(void **))*v243 + 1))(v243);
                    goto LABEL_467;
                  }
                  v240 = 5;
                }
                (*(void (**)(void))(*v239 + 8 * v240))();
                goto LABEL_334;
              }
              v138 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
            }
            v384 = (_BYTE *)v138;
            goto LABEL_329;
          }
          v159 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v160 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v161 = *(float *)&v320.__r_.__value_.__l.__data_;
          v162 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v163 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v386 = v385;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v385);
LABEL_409:
              v279 = v386;
              if (v386 == v385)
              {
                v280 = 4;
                v279 = v385;
              }
              else
              {
                if (!v386)
                {
LABEL_414:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v281 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v282 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v282);
                  MIL::IRTensorValueType::MakeUInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v281, (uint64_t *)&v334);
                  v283 = v334;
                  v334 = 0;
                  if (v283)
                    (*((void (**)(void **))*v283 + 1))(v283);
                  goto LABEL_467;
                }
                v280 = 5;
              }
              (*(void (**)(void))(*v279 + 8 * v280))();
              goto LABEL_414;
            }
            v163 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v386 = (_BYTE *)v163;
          goto LABEL_409;
        }
        if (v30 != 14)
        {
          if (v30 != 9)
          {
            if (v30 != 4)
              goto LABEL_124;
            v64 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            Data = MIL::IRTensorValue::GetDataView<signed char>();
            v311 = 0;
            v312 = 0;
            v313 = 0;
            v66 = *(float *)&v320.__r_.__value_.__l.__data_;
            v67 = *(float *)&v320.__r_.__value_.__r.__words[1];
            v68 = (uint64_t)v391;
            if (v391)
            {
              if (v391 == v389)
              {
                v376 = v375;
                (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v375);
LABEL_309:
                v229 = v376;
                if (v376 == v375)
                {
                  v230 = 4;
                  v229 = v375;
                }
                else
                {
                  if (!v376)
                  {
LABEL_314:
                    (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                    v231 = v311;
                    if (v312 == v311)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v232 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v232);
                    MIL::IRTensorValueType::MakeFloat16Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v231, (uint64_t *)&v334);
                    v233 = v334;
                    v334 = 0;
                    if (v233)
                      (*((void (**)(void **))*v233 + 1))(v233);
                    goto LABEL_467;
                  }
                  v230 = 5;
                }
                (*(void (**)(void))(*v229 + 8 * v230))();
                goto LABEL_314;
              }
              v68 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
            }
            v376 = (_BYTE *)v68;
            goto LABEL_309;
          }
          v99 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v100 = MIL::IRTensorValue::GetDataView<signed char>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v101 = *(float *)&v320.__r_.__value_.__l.__data_;
          v102 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v103 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v372 = v371;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v371);
LABEL_229:
              v189 = v372;
              if (v372 == v371)
              {
                v190 = 4;
                v189 = v371;
              }
              else
              {
                if (!v372)
                {
LABEL_234:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v191 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v192 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v192);
                  MIL::IRTensorValueType::MakeInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v191, (uint64_t *)&v334);
                  v193 = v334;
                  v334 = 0;
                  if (v193)
                    (*((void (**)(void **))*v193 + 1))(v193);
                  goto LABEL_467;
                }
                v190 = 5;
              }
              (*(void (**)(void))(*v189 + 8 * v190))();
              goto LABEL_234;
            }
            v103 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v372 = (_BYTE *)v103;
          goto LABEL_229;
        }
        v119 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v120 = MIL::IRTensorValue::GetDataView<signed char>();
        v311 = 0;
        v312 = 0;
        v313 = 0;
        v121 = *(float *)&v320.__r_.__value_.__l.__data_;
        v122 = *(float *)&v320.__r_.__value_.__r.__words[1];
        v123 = (uint64_t)v391;
        if (v391)
        {
          if (v391 == v389)
          {
            v374 = v373;
            (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v373);
LABEL_279:
            v214 = v374;
            if (v374 == v373)
            {
              v215 = 4;
              v214 = v373;
            }
            else
            {
              if (!v374)
              {
LABEL_284:
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                v216 = v311;
                if (v312 == v311)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v217 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v217);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v216, (uint64_t *)&v334);
                v218 = v334;
                v334 = 0;
                if (v218)
                  (*((void (**)(void **))*v218 + 1))(v218);
                goto LABEL_467;
              }
              v215 = 5;
            }
            (*(void (**)(void))(*v214 + 8 * v215))();
            goto LABEL_284;
          }
          v123 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
        }
        v374 = (_BYTE *)v123;
        goto LABEL_279;
      }
      if (v30 != 14)
      {
        if (v30 != 9)
        {
          if (v30 != 4)
            goto LABEL_124;
          v74 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v75 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v76 = *(float *)&v320.__r_.__value_.__l.__data_;
          v77 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v78 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v382 = v381;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v381);
LABEL_399:
              v274 = v382;
              if (v382 == v381)
              {
                v275 = 4;
                v274 = v381;
              }
              else
              {
                if (!v382)
                {
LABEL_404:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v276 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v277 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v277);
                  MIL::IRTensorValueType::MakeFloat16Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v276, (uint64_t *)&v334);
                  v278 = v334;
                  v334 = 0;
                  if (v278)
                    (*((void (**)(void **))*v278 + 1))(v278);
                  goto LABEL_467;
                }
                v275 = 5;
              }
              (*(void (**)(void))(*v274 + 8 * v275))();
              goto LABEL_404;
            }
            v78 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v382 = (_BYTE *)v78;
          goto LABEL_399;
        }
        v124 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v125 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v311 = 0;
        v312 = 0;
        v313 = 0;
        v126 = *(float *)&v320.__r_.__value_.__l.__data_;
        v127 = *(float *)&v320.__r_.__value_.__r.__words[1];
        v128 = (uint64_t)v391;
        if (v391)
        {
          if (v391 == v389)
          {
            v378 = v377;
            (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v377);
LABEL_289:
            v219 = v378;
            if (v378 == v377)
            {
              v220 = 4;
              v219 = v377;
            }
            else
            {
              if (!v378)
              {
LABEL_294:
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                v221 = v311;
                if (v312 == v311)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v222 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v222);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v221, (uint64_t *)&v334);
                v223 = v334;
                v334 = 0;
                if (v223)
                  (*((void (**)(void **))*v223 + 1))(v223);
                goto LABEL_467;
              }
              v220 = 5;
            }
            (*(void (**)(void))(*v219 + 8 * v220))();
            goto LABEL_294;
          }
          v128 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
        }
        v378 = (_BYTE *)v128;
        goto LABEL_289;
      }
      v154 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v155 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v311 = 0;
      v312 = 0;
      v313 = 0;
      v156 = *(float *)&v320.__r_.__value_.__l.__data_;
      v157 = *(float *)&v320.__r_.__value_.__r.__words[1];
      v158 = (uint64_t)v391;
      if (v391)
      {
        if (v391 == v389)
        {
          v380 = v379;
          (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v379);
LABEL_389:
          v269 = v380;
          if (v380 == v379)
          {
            v270 = 4;
            v269 = v379;
          }
          else
          {
            if (!v380)
            {
LABEL_394:
              (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
              v271 = v311;
              if (v312 == v311)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v272 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v272);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v271, (uint64_t *)&v334);
              v273 = v334;
              v334 = 0;
              if (v273)
                (*((void (**)(void **))*v273 + 1))(v273);
              goto LABEL_467;
            }
            v270 = 5;
          }
          (*(void (**)(void))(*v269 + 8 * v270))();
          goto LABEL_394;
        }
        v158 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
      }
      v380 = (_BYTE *)v158;
      goto LABEL_389;
    case 9:
      if (v27 != 14)
      {
        if (v27 != 9)
        {
          if (v27 == 4)
          {
            if (v30 != 14)
            {
              if (v30 != 9)
              {
                if (v30 != 4)
                  goto LABEL_124;
                v43 = MIL::IRTensorValue::GetDataView<signed char>();
                v44 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v311 = 0;
                v312 = 0;
                v313 = 0;
                v45 = *(float *)&v320.__r_.__value_.__l.__data_;
                v46 = *(float *)&v320.__r_.__value_.__r.__words[1];
                v47 = (uint64_t)v391;
                if (v391)
                {
                  if (v391 == v389)
                  {
                    v352 = v351;
                    (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v351);
LABEL_359:
                    v254 = v352;
                    if (v352 == v351)
                    {
                      v255 = 4;
                      v254 = v351;
                    }
                    else
                    {
                      if (!v352)
                      {
LABEL_364:
                        (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                        v256 = v311;
                        if (v312 == v311)
                          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                        v257 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                        MIL::IRValueType::AsTensorType(v257);
                        MIL::IRTensorValueType::MakeFloat16Value();
                        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v256, (uint64_t *)&v334);
                        v258 = v334;
                        v334 = 0;
                        if (v258)
                          (*((void (**)(void **))*v258 + 1))(v258);
                        goto LABEL_467;
                      }
                      v255 = 5;
                    }
                    (*(void (**)(void))(*v254 + 8 * v255))();
                    goto LABEL_364;
                  }
                  v47 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
                }
                v352 = (_BYTE *)v47;
                goto LABEL_359;
              }
              v104 = MIL::IRTensorValue::GetDataView<signed char>();
              v105 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              v311 = 0;
              v312 = 0;
              v313 = 0;
              v106 = *(float *)&v320.__r_.__value_.__l.__data_;
              v107 = *(float *)&v320.__r_.__value_.__r.__words[1];
              v108 = (uint64_t)v391;
              if (v391)
              {
                if (v391 == v389)
                {
                  v348 = v347;
                  (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v347);
LABEL_249:
                  v199 = v348;
                  if (v348 == v347)
                  {
                    v200 = 4;
                    v199 = v347;
                  }
                  else
                  {
                    if (!v348)
                    {
LABEL_254:
                      (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                      v201 = v311;
                      if (v312 == v311)
                        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                      v202 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                      MIL::IRValueType::AsTensorType(v202);
                      MIL::IRTensorValueType::MakeInt8Value();
                      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v201, (uint64_t *)&v334);
                      v203 = v334;
                      v334 = 0;
                      if (v203)
                        (*((void (**)(void **))*v203 + 1))(v203);
                      goto LABEL_467;
                    }
                    v200 = 5;
                  }
                  (*(void (**)(void))(*v199 + 8 * v200))();
                  goto LABEL_254;
                }
                v108 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
              }
              v348 = (_BYTE *)v108;
              goto LABEL_249;
            }
            v129 = MIL::IRTensorValue::GetDataView<signed char>();
            v130 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            v311 = 0;
            v312 = 0;
            v313 = 0;
            v131 = *(float *)&v320.__r_.__value_.__l.__data_;
            v132 = *(float *)&v320.__r_.__value_.__r.__words[1];
            v133 = (uint64_t)v391;
            if (v391)
            {
              if (v391 == v389)
              {
                v350 = v349;
                (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v349);
LABEL_319:
                v234 = v350;
                if (v350 == v349)
                {
                  v235 = 4;
                  v234 = v349;
                }
                else
                {
                  if (!v350)
                  {
LABEL_324:
                    (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                    v236 = v311;
                    if (v312 == v311)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v237 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v237);
                    MIL::IRTensorValueType::MakeUInt8Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v236, (uint64_t *)&v334);
                    v238 = v334;
                    v334 = 0;
                    if (v238)
                      (*((void (**)(void **))*v238 + 1))(v238);
                    goto LABEL_467;
                  }
                  v235 = 5;
                }
                (*(void (**)(void))(*v234 + 8 * v235))();
                goto LABEL_324;
              }
              v133 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
            }
            v350 = (_BYTE *)v133;
            goto LABEL_319;
          }
LABEL_81:
          v53 = "Unimplemented y dtype";
          goto LABEL_125;
        }
        if (v30 != 14)
        {
          if (v30 != 9)
          {
            if (v30 != 4)
              goto LABEL_124;
            v54 = MIL::IRTensorValue::GetDataView<signed char>();
            v55 = MIL::IRTensorValue::GetDataView<signed char>();
            v311 = 0;
            v312 = 0;
            v313 = 0;
            v56 = *(float *)&v320.__r_.__value_.__l.__data_;
            v57 = *(float *)&v320.__r_.__value_.__r.__words[1];
            v58 = (uint64_t)v391;
            if (v391)
            {
              if (v391 == v389)
              {
                v340 = v339;
                (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v339);
LABEL_239:
                v194 = v340;
                if (v340 == v339)
                {
                  v195 = 4;
                  v194 = v339;
                }
                else
                {
                  if (!v340)
                  {
LABEL_244:
                    (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                    v196 = v311;
                    if (v312 == v311)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v197 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v197);
                    MIL::IRTensorValueType::MakeFloat16Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v196, (uint64_t *)&v334);
                    v198 = v334;
                    v334 = 0;
                    if (v198)
                      (*((void (**)(void **))*v198 + 1))(v198);
                    goto LABEL_467;
                  }
                  v195 = 5;
                }
                (*(void (**)(void))(*v194 + 8 * v195))();
                goto LABEL_244;
              }
              v58 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
            }
            v340 = (_BYTE *)v58;
            goto LABEL_239;
          }
          v84 = MIL::IRTensorValue::GetDataView<signed char>();
          v85 = MIL::IRTensorValue::GetDataView<signed char>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v86 = *(float *)&v320.__r_.__value_.__l.__data_;
          v87 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v88 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v336 = v335;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v335);
LABEL_199:
              v174 = v336;
              if (v336 == v335)
              {
                v175 = 4;
                v174 = v335;
              }
              else
              {
                if (!v336)
                {
LABEL_204:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v176 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v177 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v177);
                  MIL::IRTensorValueType::MakeInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v176, (uint64_t *)&v334);
                  v178 = v334;
                  v334 = 0;
                  if (v178)
                    (*((void (**)(void **))*v178 + 1))(v178);
                  goto LABEL_467;
                }
                v175 = 5;
              }
              (*(void (**)(void))(*v174 + 8 * v175))();
              goto LABEL_204;
            }
            v88 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v336 = (_BYTE *)v88;
          goto LABEL_199;
        }
        v89 = MIL::IRTensorValue::GetDataView<signed char>();
        v90 = MIL::IRTensorValue::GetDataView<signed char>();
        v311 = 0;
        v312 = 0;
        v313 = 0;
        v91 = *(float *)&v320.__r_.__value_.__l.__data_;
        v92 = *(float *)&v320.__r_.__value_.__r.__words[1];
        v93 = (uint64_t)v391;
        if (v391)
        {
          if (v391 == v389)
          {
            v338 = v337;
            (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v337);
LABEL_209:
            v179 = v338;
            if (v338 == v337)
            {
              v180 = 4;
              v179 = v337;
            }
            else
            {
              if (!v338)
              {
LABEL_214:
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                v181 = v311;
                if (v312 == v311)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v182 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v182);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v181, (uint64_t *)&v334);
                v183 = v334;
                v334 = 0;
                if (v183)
                  (*((void (**)(void **))*v183 + 1))(v183);
                goto LABEL_467;
              }
              v180 = 5;
            }
            (*(void (**)(void))(*v179 + 8 * v180))();
            goto LABEL_214;
          }
          v93 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
        }
        v338 = (_BYTE *)v93;
        goto LABEL_209;
      }
      if (v30 != 14)
      {
        if (v30 != 9)
        {
          if (v30 != 4)
            goto LABEL_124;
          v59 = MIL::IRTensorValue::GetDataView<signed char>();
          v60 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v61 = *(float *)&v320.__r_.__value_.__l.__data_;
          v62 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v63 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v346 = v345;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v345);
LABEL_299:
              v224 = v346;
              if (v346 == v345)
              {
                v225 = 4;
                v224 = v345;
              }
              else
              {
                if (!v346)
                {
LABEL_304:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v226 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v227 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v227);
                  MIL::IRTensorValueType::MakeFloat16Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v226, (uint64_t *)&v334);
                  v228 = v334;
                  v334 = 0;
                  if (v228)
                    (*((void (**)(void **))*v228 + 1))(v228);
                  goto LABEL_467;
                }
                v225 = 5;
              }
              (*(void (**)(void))(*v224 + 8 * v225))();
              goto LABEL_304;
            }
            v63 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v346 = (_BYTE *)v63;
          goto LABEL_299;
        }
        v94 = MIL::IRTensorValue::GetDataView<signed char>();
        v95 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v311 = 0;
        v312 = 0;
        v313 = 0;
        v96 = *(float *)&v320.__r_.__value_.__l.__data_;
        v97 = *(float *)&v320.__r_.__value_.__r.__words[1];
        v98 = (uint64_t)v391;
        if (v391)
        {
          if (v391 == v389)
          {
            v342 = v341;
            (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v341);
LABEL_219:
            v184 = v342;
            if (v342 == v341)
            {
              v185 = 4;
              v184 = v341;
            }
            else
            {
              if (!v342)
              {
LABEL_224:
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                v186 = v311;
                if (v312 == v311)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v187 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v187);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v186, (uint64_t *)&v334);
                v188 = v334;
                v334 = 0;
                if (v188)
                  (*((void (**)(void **))*v188 + 1))(v188);
                goto LABEL_467;
              }
              v185 = 5;
            }
            (*(void (**)(void))(*v184 + 8 * v185))();
            goto LABEL_224;
          }
          v98 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
        }
        v342 = (_BYTE *)v98;
        goto LABEL_219;
      }
      v114 = MIL::IRTensorValue::GetDataView<signed char>();
      v115 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v311 = 0;
      v312 = 0;
      v313 = 0;
      v116 = *(float *)&v320.__r_.__value_.__l.__data_;
      v117 = *(float *)&v320.__r_.__value_.__r.__words[1];
      v118 = (uint64_t)v391;
      if (v391)
      {
        if (v391 == v389)
        {
          v344 = v343;
          (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v343);
LABEL_269:
          v209 = v344;
          if (v344 == v343)
          {
            v210 = 4;
            v209 = v343;
          }
          else
          {
            if (!v344)
            {
LABEL_274:
              (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
              v211 = v311;
              if (v312 == v311)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v212 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v212);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v211, (uint64_t *)&v334);
              v213 = v334;
              v334 = 0;
              if (v213)
                (*((void (**)(void **))*v213 + 1))(v213);
              goto LABEL_467;
            }
            v210 = 5;
          }
          (*(void (**)(void))(*v209 + 8 * v210))();
          goto LABEL_274;
        }
        v118 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
      }
      v344 = (_BYTE *)v118;
      goto LABEL_269;
    case 14:
      if (v27 != 14)
      {
        if (v27 != 9)
        {
          if (v27 == 4)
          {
            if (v30 != 14)
            {
              if (v30 != 9)
              {
                if (v30 == 4)
                {
                  v38 = MIL::IRTensorValue::GetDataView<unsigned char>();
                  v39 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                  v311 = 0;
                  v312 = 0;
                  v313 = 0;
                  v40 = *(float *)&v320.__r_.__value_.__l.__data_;
                  v41 = *(float *)&v320.__r_.__value_.__r.__words[1];
                  v42 = (uint64_t)v391;
                  if (v391)
                  {
                    if (v391 == v389)
                    {
                      v370 = v369;
                      (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v369);
LABEL_459:
                      v304 = v370;
                      if (v370 == v369)
                      {
                        v305 = 4;
                        v304 = v369;
                      }
                      else
                      {
                        if (!v370)
                        {
LABEL_464:
                          (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                          v306 = v311;
                          if (v312 == v311)
                            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                          v307 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                          MIL::IRValueType::AsTensorType(v307);
                          MIL::IRTensorValueType::MakeFloat16Value();
                          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v306, (uint64_t *)&v334);
                          v308 = v334;
                          v334 = 0;
                          if (v308)
                            (*((void (**)(void **))*v308 + 1))(v308);
LABEL_467:
                          v334 = (void **)&v311;
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v334);
                          *(_DWORD *)a3 = 0;
                          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
                          if (v314[0])
                          {
                            v314[1] = v314[0];
                            operator delete(v314[0]);
                          }
                          goto LABEL_469;
                        }
                        v305 = 5;
                      }
                      (*(void (**)(void))(*v304 + 8 * v305))();
                      goto LABEL_464;
                    }
                    v42 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
                  }
                  v370 = (_BYTE *)v42;
                  goto LABEL_459;
                }
                goto LABEL_124;
              }
              v149 = MIL::IRTensorValue::GetDataView<unsigned char>();
              v150 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              v311 = 0;
              v312 = 0;
              v313 = 0;
              v151 = *(float *)&v320.__r_.__value_.__l.__data_;
              v152 = *(float *)&v320.__r_.__value_.__r.__words[1];
              v153 = (uint64_t)v391;
              if (v391)
              {
                if (v391 == v389)
                {
                  v366 = v365;
                  (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v365);
LABEL_379:
                  v264 = v366;
                  if (v366 == v365)
                  {
                    v265 = 4;
                    v264 = v365;
                  }
                  else
                  {
                    if (!v366)
                    {
LABEL_384:
                      (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                      v266 = v311;
                      if (v312 == v311)
                        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                      v267 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                      MIL::IRValueType::AsTensorType(v267);
                      MIL::IRTensorValueType::MakeInt8Value();
                      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v266, (uint64_t *)&v334);
                      v268 = v334;
                      v334 = 0;
                      if (v268)
                        (*((void (**)(void **))*v268 + 1))(v268);
                      goto LABEL_467;
                    }
                    v265 = 5;
                  }
                  (*(void (**)(void))(*v264 + 8 * v265))();
                  goto LABEL_384;
                }
                v153 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
              }
              v366 = (_BYTE *)v153;
              goto LABEL_379;
            }
            v169 = MIL::IRTensorValue::GetDataView<unsigned char>();
            v170 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            v311 = 0;
            v312 = 0;
            v313 = 0;
            v171 = *(float *)&v320.__r_.__value_.__l.__data_;
            v172 = *(float *)&v320.__r_.__value_.__r.__words[1];
            v173 = (uint64_t)v391;
            if (v391)
            {
              if (v391 == v389)
              {
                v368 = v367;
                (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v367);
LABEL_449:
                v299 = v368;
                if (v368 == v367)
                {
                  v300 = 4;
                  v299 = v367;
                }
                else
                {
                  if (!v368)
                  {
LABEL_454:
                    (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                    v301 = v311;
                    if (v312 == v311)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v302 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v302);
                    MIL::IRTensorValueType::MakeUInt8Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v301, (uint64_t *)&v334);
                    v303 = v334;
                    v334 = 0;
                    if (v303)
                      (*((void (**)(void **))*v303 + 1))(v303);
                    goto LABEL_467;
                  }
                  v300 = 5;
                }
                (*(void (**)(void))(*v299 + 8 * v300))();
                goto LABEL_454;
              }
              v173 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
            }
            v368 = (_BYTE *)v173;
            goto LABEL_449;
          }
          goto LABEL_81;
        }
        if (v30 != 14)
        {
          if (v30 != 9)
          {
            if (v30 == 4)
            {
              v69 = MIL::IRTensorValue::GetDataView<unsigned char>();
              v70 = MIL::IRTensorValue::GetDataView<signed char>();
              v311 = 0;
              v312 = 0;
              v313 = 0;
              v71 = *(float *)&v320.__r_.__value_.__l.__data_;
              v72 = *(float *)&v320.__r_.__value_.__r.__words[1];
              v73 = (uint64_t)v391;
              if (v391)
              {
                if (v391 == v389)
                {
                  v358 = v357;
                  (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v357);
LABEL_369:
                  v259 = v358;
                  if (v358 == v357)
                  {
                    v260 = 4;
                    v259 = v357;
                  }
                  else
                  {
                    if (!v358)
                    {
LABEL_374:
                      (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                      v261 = v311;
                      if (v312 == v311)
                        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                      v262 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                      MIL::IRValueType::AsTensorType(v262);
                      MIL::IRTensorValueType::MakeFloat16Value();
                      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v261, (uint64_t *)&v334);
                      v263 = v334;
                      v334 = 0;
                      if (v263)
                        (*((void (**)(void **))*v263 + 1))(v263);
                      goto LABEL_467;
                    }
                    v260 = 5;
                  }
                  (*(void (**)(void))(*v259 + 8 * v260))();
                  goto LABEL_374;
                }
                v73 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
              }
              v358 = (_BYTE *)v73;
              goto LABEL_369;
            }
LABEL_124:
            v53 = "Unimplemented output dtype";
            goto LABEL_125;
          }
          v109 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v110 = MIL::IRTensorValue::GetDataView<signed char>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v111 = *(float *)&v320.__r_.__value_.__l.__data_;
          v112 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v113 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v354 = v353;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v353);
LABEL_259:
              v204 = v354;
              if (v354 == v353)
              {
                v205 = 4;
                v204 = v353;
              }
              else
              {
                if (!v354)
                {
LABEL_264:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v206 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v207 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v207);
                  MIL::IRTensorValueType::MakeInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v206, (uint64_t *)&v334);
                  v208 = v334;
                  v334 = 0;
                  if (v208)
                    (*((void (**)(void **))*v208 + 1))(v208);
                  goto LABEL_467;
                }
                v205 = 5;
              }
              (*(void (**)(void))(*v204 + 8 * v205))();
              goto LABEL_264;
            }
            v113 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v354 = (_BYTE *)v113;
          goto LABEL_259;
        }
        v139 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v140 = MIL::IRTensorValue::GetDataView<signed char>();
        v311 = 0;
        v312 = 0;
        v313 = 0;
        v141 = *(float *)&v320.__r_.__value_.__l.__data_;
        v142 = *(float *)&v320.__r_.__value_.__r.__words[1];
        v143 = (uint64_t)v391;
        if (v391)
        {
          if (v391 == v389)
          {
            v356 = v355;
            (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v355);
LABEL_339:
            v244 = v356;
            if (v356 == v355)
            {
              v245 = 4;
              v244 = v355;
            }
            else
            {
              if (!v356)
              {
LABEL_344:
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                v246 = v311;
                if (v312 == v311)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v247 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v247);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v246, (uint64_t *)&v334);
                v248 = v334;
                v334 = 0;
                if (v248)
                  (*((void (**)(void **))*v248 + 1))(v248);
                goto LABEL_467;
              }
              v245 = 5;
            }
            (*(void (**)(void))(*v244 + 8 * v245))();
            goto LABEL_344;
          }
          v143 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
        }
        v356 = (_BYTE *)v143;
        goto LABEL_339;
      }
      if (v30 != 14)
      {
        if (v30 != 9)
        {
          if (v30 != 4)
            goto LABEL_124;
          v79 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v80 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v81 = *(float *)&v320.__r_.__value_.__l.__data_;
          v82 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v83 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v364 = v363;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v363);
LABEL_439:
              v294 = v364;
              if (v364 == v363)
              {
                v295 = 4;
                v294 = v363;
              }
              else
              {
                if (!v364)
                {
LABEL_444:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v296 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v297 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v297);
                  MIL::IRTensorValueType::MakeFloat16Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v296, (uint64_t *)&v334);
                  v298 = v334;
                  v334 = 0;
                  if (v298)
                    (*((void (**)(void **))*v298 + 1))(v298);
                  goto LABEL_467;
                }
                v295 = 5;
              }
              (*(void (**)(void))(*v294 + 8 * v295))();
              goto LABEL_444;
            }
            v83 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v364 = (_BYTE *)v83;
          goto LABEL_439;
        }
        v144 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v145 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v311 = 0;
        v312 = 0;
        v313 = 0;
        v146 = *(float *)&v320.__r_.__value_.__l.__data_;
        v147 = *(float *)&v320.__r_.__value_.__r.__words[1];
        v148 = (uint64_t)v391;
        if (v391)
        {
          if (v391 == v389)
          {
            v360 = v359;
            (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v359);
LABEL_349:
            v249 = v360;
            if (v360 == v359)
            {
              v250 = 4;
              v249 = v359;
            }
            else
            {
              if (!v360)
              {
LABEL_354:
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                v251 = v311;
                if (v312 == v311)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v252 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v252);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v251, (uint64_t *)&v334);
                v253 = v334;
                v334 = 0;
                if (v253)
                  (*((void (**)(void **))*v253 + 1))(v253);
                goto LABEL_467;
              }
              v250 = 5;
            }
            (*(void (**)(void))(*v249 + 8 * v250))();
            goto LABEL_354;
          }
          v148 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
        }
        v360 = (_BYTE *)v148;
        goto LABEL_349;
      }
      v164 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v165 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v311 = 0;
      v312 = 0;
      v313 = 0;
      v166 = *(float *)&v320.__r_.__value_.__l.__data_;
      v167 = *(float *)&v320.__r_.__value_.__r.__words[1];
      v168 = (uint64_t)v391;
      if (v391)
      {
        if (v391 == v389)
        {
          v362 = v361;
          (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v361);
LABEL_419:
          v284 = v362;
          if (v362 == v361)
          {
            v285 = 4;
            v284 = v361;
          }
          else
          {
            if (!v362)
            {
LABEL_424:
              (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
              v286 = v311;
              if (v312 == v311)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v287 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v287);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v286, (uint64_t *)&v334);
              v288 = v334;
              v334 = 0;
              if (v288)
                (*((void (**)(void **))*v288 + 1))(v288);
              goto LABEL_467;
            }
            v285 = 5;
          }
          (*(void (**)(void))(*v284 + 8 * v285))();
          goto LABEL_424;
        }
        v168 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
      }
      v362 = (_BYTE *)v168;
      goto LABEL_419;
  }
  v53 = "Unimplemented x dtype";
LABEL_125:
  *(_DWORD *)a3 = 3;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v53);
LABEL_469:
  if (v315[0])
  {
    v315[1] = v315[0];
    operator delete(v315[0]);
  }
  if (v316[0])
  {
    v316[1] = v316[0];
    operator delete(v316[0]);
  }
  if (v317[0])
  {
    v317[1] = v317[0];
    operator delete(v317[0]);
  }
LABEL_475:
  v309 = v391;
  if (v391 == v389)
  {
    v310 = 4;
    v309 = v389;
  }
  else
  {
    if (!v391)
      goto LABEL_480;
    v310 = 5;
  }
  (*v309)[v310]();
LABEL_480:
  if (SHIBYTE(v319) < 0)
    operator delete((void *)v318.__r_.__value_.__l.__size_);
LABEL_36:
  if (v333 && v332 < 0)
    operator delete(__p);
  if (v326 && v324)
  {
    v325 = v324;
    operator delete(v324);
  }
  if (v323 && v322 < 0)
  {
    v21 = v321;
    goto LABEL_22;
  }
}

void sub_2068546E0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  uint64_t v36;
  uint64_t v37;
  void *v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;

  if (a2 == 1)
  {
    v39 = __cxa_begin_catch(a1);
    *(_DWORD *)v36 = 4;
    v40 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v39 + 16))(v39);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v36 + 8), v40);
    __cxa_end_catch();
    JUMPOUT(0x206854524);
  }
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  v41 = *(_QWORD **)(v37 - 112);
  if (v41 == (_QWORD *)(v37 - 136))
  {
    v42 = 4;
    v41 = (_QWORD *)(v37 - 136);
  }
  else
  {
    if (!v41)
      goto LABEL_14;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_14:
  if (a31 < 0)
    operator delete(a26);
  ANEMachineIR::Validators::PeElementWiseBinaryParamValues::~PeElementWiseBinaryParamValues(&a36);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,MIL::Fp16,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  long double v48;
  double v49;
  float v50;
  long double v51;
  double v52;
  float v53;
  long double v54;
  double v55;
  uint64_t v56;
  MIL::Fp16 *v57;
  float v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v81;
  void *__p;
  _BYTE *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v85 - (_BYTE *)__p;
  if (v85 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v91 - v90;
  if (v91 == v90)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v60 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_84;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v81 = *((_QWORD *)__p + 4);
  v66 = *(_QWORD *)v90;
  v67 = *((_QWORD *)__p + 3);
  v64 = *((_QWORD *)v90 + 2);
  v65 = *((_QWORD *)v90 + 1);
  v32 = *((_QWORD *)v90 + 4);
  v62 = *((_QWORD *)__p + 2);
  v63 = *((_QWORD *)v90 + 3);
  v77 = *(_QWORD *)v88;
  v76 = *((_QWORD *)v88 + 1);
  v75 = *((_QWORD *)v88 + 2);
  v74 = *((_QWORD *)v88 + 3);
  v73 = *((_QWORD *)v88 + 4);
  v71 = *((_QWORD *)v86 + 1);
  v72 = *(_QWORD *)v86;
  v69 = *((_QWORD *)v86 + 3);
  v70 = *((_QWORD *)v86 + 2);
  v68 = *((_QWORD *)v86 + 4);
  v61 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v62)
        {
          for (i = 0; i != v62; ++i)
          {
            if (v67)
            {
              for (j = 0; j != v67; ++j)
              {
                if (v81)
                {
                  for (k = 0; k != v81; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    v38 = v37;
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      v40 = v39;
                    }
                    else
                    {
                      v40 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      v41 = 1.0;
                    }
                    if (v38 <= 65536.0)
                      v42 = v38;
                    else
                      v42 = 65536.0;
                    if (v42 < -65536.0)
                      v42 = -65536.0;
                    if (v40 <= 65536.0)
                      v43 = v40;
                    else
                      v43 = 65536.0;
                    if (v43 >= -65536.0)
                      v44 = v43;
                    else
                      v44 = -65536.0;
                    if (v41 > 65536.0)
                      v41 = 65536.0;
                    if (v41 >= -65536.0)
                      v45 = v41;
                    else
                      v45 = -65536.0;
                    v46 = 0.0;
                    v47 = 0.0;
                    if ((float)(v29 * v42) != 0.0)
                    {
                      __e[0] = 0;
                      v48 = frexp((float)(v29 * v42), __e);
                      v49 = ldexp(v48, 11);
                      v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    v50 = (float)(v44 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      v51 = frexp(v50, __e);
                      v52 = ldexp(v51, 11);
                      v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    v53 = 0.0;
                    if ((float)(v45 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      v54 = frexp((float)(v45 * v46), __e);
                      v55 = ldexp(v54, 11);
                      v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    *(float *)__e = v53;
                    v56 = *(_QWORD *)(a8 + 24);
                    if (!v56)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v57 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v56 + 48))(v56, __e);
                    v59 = MIL::Fp16::FromFloat(v57, v58);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v61;
      }
      while (v33 != v61);
    }
    ++v30;
  }
  while (v30 != v60);
  v23 = __p;
  if (__p)
  {
LABEL_84:
    v85 = v23;
    operator delete(v23);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
}

void sub_2068568AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,MIL::Fp16,unsigned char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  long double v49;
  double v50;
  float v51;
  long double v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  uint64_t v57;
  float v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v81;
  void *__p;
  _BYTE *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v85 - (_BYTE *)__p;
  if (v85 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v91 - v90;
  if (v91 == v90)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v61 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_91;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v81 = *((_QWORD *)__p + 4);
  v67 = *(_QWORD *)v90;
  v68 = *((_QWORD *)__p + 3);
  v65 = *((_QWORD *)v90 + 2);
  v66 = *((_QWORD *)v90 + 1);
  v32 = *((_QWORD *)v90 + 4);
  v63 = *((_QWORD *)__p + 2);
  v64 = *((_QWORD *)v90 + 3);
  v77 = *(_QWORD *)v88;
  v76 = *((_QWORD *)v88 + 1);
  v75 = *((_QWORD *)v88 + 2);
  v74 = *((_QWORD *)v88 + 3);
  v73 = *((_QWORD *)v88 + 4);
  v71 = *((_QWORD *)v86 + 1);
  v72 = *(_QWORD *)v86;
  v33 = *((_QWORD *)v86 + 4);
  v69 = *((_QWORD *)v86 + 3);
  v70 = *((_QWORD *)v86 + 2);
  v62 = v31;
  do
  {
    if (v31)
    {
      v34 = 0;
      do
      {
        if (v63)
        {
          for (i = 0; i != v63; ++i)
          {
            if (v68)
            {
              for (j = 0; j != v68; ++j)
              {
                if (v81)
                {
                  for (k = 0; k != v81; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    v39 = v38;
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      v41 = v40;
                    }
                    else
                    {
                      v41 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      v42 = 1.0;
                    }
                    if (v39 <= 65536.0)
                      v43 = v39;
                    else
                      v43 = 65536.0;
                    if (v43 < -65536.0)
                      v43 = -65536.0;
                    if (v41 <= 65536.0)
                      v44 = v41;
                    else
                      v44 = 65536.0;
                    if (v44 >= -65536.0)
                      v45 = v44;
                    else
                      v45 = -65536.0;
                    if (v42 > 65536.0)
                      v42 = 65536.0;
                    if (v42 >= -65536.0)
                      v46 = v42;
                    else
                      v46 = -65536.0;
                    v47 = 0.0;
                    v48 = 0.0;
                    if ((float)(v29 * v43) != 0.0)
                    {
                      __e[0] = 0;
                      v49 = frexp((float)(v29 * v43), __e);
                      v50 = ldexp(v49, 11);
                      v48 = ldexp(round(v50), __e[0] - 11);
                    }
                    v51 = (float)(v45 * a11) + v48;
                    if (v51 != 0.0)
                    {
                      __e[0] = 0;
                      v52 = frexp(v51, __e);
                      v53 = ldexp(v52, 11);
                      v47 = ldexp(round(v53), __e[0] - 11);
                    }
                    v54 = 0.0;
                    if ((float)(v46 * v47) != 0.0)
                    {
                      __e[0] = 0;
                      v55 = frexp((float)(v46 * v47), __e);
                      v56 = ldexp(v55, 11);
                      v54 = ldexp(round(v56), __e[0] - 11);
                    }
                    *(float *)__e = v54;
                    v57 = *(_QWORD *)(a8 + 24);
                    if (!v57)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v58 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v57 + 48))(v57, __e);
                    if (v58 == INFINITY)
                    {
                      LOBYTE(v59) = -1;
                    }
                    else if (v58 == -INFINITY)
                    {
                      LOBYTE(v59) = 0;
                    }
                    else
                    {
                      v60 = llroundf(v58);
                      if (v60 >= 255)
                        v60 = 255;
                      v59 = v60 & ~(v60 >> 31);
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v34;
        v31 = v62;
      }
      while (v34 != v62);
    }
    ++v30;
  }
  while (v30 != v61);
  v23 = __p;
  if (__p)
  {
LABEL_91:
    v85 = v23;
    operator delete(v23);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
}

void sub_2068570A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a29;
  if (*(_QWORD *)a29)
  {
    *(_QWORD *)(a29 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,MIL::Fp16,signed char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  long double v49;
  double v50;
  float v51;
  long double v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  uint64_t v57;
  float v58;
  char v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v81;
  void *__p;
  _BYTE *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v85 - (_BYTE *)__p;
  if (v85 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v91 - v90;
  if (v91 == v90)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v61 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_93;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v81 = *((_QWORD *)__p + 4);
  v67 = *(_QWORD *)v90;
  v68 = *((_QWORD *)__p + 3);
  v65 = *((_QWORD *)v90 + 2);
  v66 = *((_QWORD *)v90 + 1);
  v32 = *((_QWORD *)v90 + 4);
  v63 = *((_QWORD *)__p + 2);
  v64 = *((_QWORD *)v90 + 3);
  v77 = *(_QWORD *)v88;
  v76 = *((_QWORD *)v88 + 1);
  v75 = *((_QWORD *)v88 + 2);
  v74 = *((_QWORD *)v88 + 3);
  v73 = *((_QWORD *)v88 + 4);
  v71 = *((_QWORD *)v86 + 1);
  v72 = *(_QWORD *)v86;
  v33 = *((_QWORD *)v86 + 4);
  v69 = *((_QWORD *)v86 + 3);
  v70 = *((_QWORD *)v86 + 2);
  v62 = v31;
  do
  {
    if (v31)
    {
      v34 = 0;
      do
      {
        if (v63)
        {
          for (i = 0; i != v63; ++i)
          {
            if (v68)
            {
              for (j = 0; j != v68; ++j)
              {
                if (v81)
                {
                  for (k = 0; k != v81; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    v39 = v38;
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      v41 = v40;
                    }
                    else
                    {
                      v41 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      v42 = 1.0;
                    }
                    if (v39 <= 65536.0)
                      v43 = v39;
                    else
                      v43 = 65536.0;
                    if (v43 < -65536.0)
                      v43 = -65536.0;
                    if (v41 <= 65536.0)
                      v44 = v41;
                    else
                      v44 = 65536.0;
                    if (v44 >= -65536.0)
                      v45 = v44;
                    else
                      v45 = -65536.0;
                    if (v42 > 65536.0)
                      v42 = 65536.0;
                    if (v42 >= -65536.0)
                      v46 = v42;
                    else
                      v46 = -65536.0;
                    v47 = 0.0;
                    v48 = 0.0;
                    if ((float)(v29 * v43) != 0.0)
                    {
                      __e[0] = 0;
                      v49 = frexp((float)(v29 * v43), __e);
                      v50 = ldexp(v49, 11);
                      v48 = ldexp(round(v50), __e[0] - 11);
                    }
                    v51 = (float)(v45 * a11) + v48;
                    if (v51 != 0.0)
                    {
                      __e[0] = 0;
                      v52 = frexp(v51, __e);
                      v53 = ldexp(v52, 11);
                      v47 = ldexp(round(v53), __e[0] - 11);
                    }
                    v54 = 0.0;
                    if ((float)(v46 * v47) != 0.0)
                    {
                      __e[0] = 0;
                      v55 = frexp((float)(v46 * v47), __e);
                      v56 = ldexp(v55, 11);
                      v54 = ldexp(round(v56), __e[0] - 11);
                    }
                    *(float *)__e = v54;
                    v57 = *(_QWORD *)(a8 + 24);
                    if (!v57)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v58 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v57 + 48))(v57, __e);
                    if (v58 == INFINITY)
                    {
                      v59 = 127;
                    }
                    else if (v58 == -INFINITY)
                    {
                      v59 = 0x80;
                    }
                    else
                    {
                      v60 = llroundf(v58);
                      if (v60 >= 127)
                        v60 = 127;
                      if (v60 <= -128)
                        v59 = 0x80;
                      else
                        v59 = v60;
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v34;
        v31 = v62;
      }
      while (v34 != v62);
    }
    ++v30;
  }
  while (v30 != v61);
  v23 = __p;
  if (__p)
  {
LABEL_93:
    v85 = v23;
    operator delete(v23);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
}

void sub_206857888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a29;
  if (*(_QWORD *)a29)
  {
    *(_QWORD *)(a29 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char,unsigned char,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v37;
  float v38;
  unsigned int v39;
  float v40;
  unsigned int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  long double v48;
  double v49;
  float v50;
  long double v51;
  double v52;
  float v53;
  long double v54;
  double v55;
  uint64_t v56;
  MIL::Fp16 *v57;
  float v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v81;
  void *__p;
  _BYTE *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v85 - (_BYTE *)__p;
  if (v85 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v91 - v90;
  if (v91 == v90)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v60 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_79;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v81 = *((_QWORD *)__p + 4);
  v66 = *(_QWORD *)v90;
  v67 = *((_QWORD *)__p + 3);
  v64 = *((_QWORD *)v90 + 2);
  v65 = *((_QWORD *)v90 + 1);
  v32 = *((_QWORD *)v90 + 4);
  v62 = *((_QWORD *)__p + 2);
  v63 = *((_QWORD *)v90 + 3);
  v77 = *(_QWORD *)v88;
  v76 = *((_QWORD *)v88 + 1);
  v75 = *((_QWORD *)v88 + 2);
  v74 = *((_QWORD *)v88 + 3);
  v73 = *((_QWORD *)v88 + 4);
  v71 = *((_QWORD *)v86 + 1);
  v72 = *(_QWORD *)v86;
  v69 = *((_QWORD *)v86 + 3);
  v70 = *((_QWORD *)v86 + 2);
  v68 = *((_QWORD *)v86 + 4);
  v61 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v62)
        {
          for (i = 0; i != v62; ++i)
          {
            if (v67)
            {
              for (j = 0; j != v67; ++j)
              {
                if (v81)
                {
                  for (k = 0; k != v81; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    v38 = v37;
                    if (a2)
                    {
                      LOBYTE(v39) = *(_BYTE *)(a2
                      v40 = (float)v39;
                    }
                    else
                    {
                      v40 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v41) = *(_BYTE *)(a3
                      v42 = (float)v41;
                    }
                    else
                    {
                      v42 = 1.0;
                    }
                    if (v38 <= 65536.0)
                      v43 = v38;
                    else
                      v43 = 65536.0;
                    if (v43 < -65536.0)
                      v43 = -65536.0;
                    if (v40 <= 65536.0)
                      v44 = v40;
                    else
                      v44 = 65536.0;
                    if (v42 <= 65536.0)
                      v45 = v42;
                    else
                      v45 = 65536.0;
                    v46 = 0.0;
                    v47 = 0.0;
                    if ((float)(v29 * v43) != 0.0)
                    {
                      __e[0] = 0;
                      v48 = frexp((float)(v29 * v43), __e);
                      v49 = ldexp(v48, 11);
                      v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    v50 = (float)(v44 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      v51 = frexp(v50, __e);
                      v52 = ldexp(v51, 11);
                      v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    v53 = 0.0;
                    if ((float)(v45 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      v54 = frexp((float)(v45 * v46), __e);
                      v55 = ldexp(v54, 11);
                      v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    *(float *)__e = v53;
                    v56 = *(_QWORD *)(a8 + 24);
                    if (!v56)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v57 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v56 + 48))(v56, __e);
                    v59 = MIL::Fp16::FromFloat(v57, v58);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v61;
      }
      while (v33 != v61);
    }
    ++v30;
  }
  while (v30 != v60);
  v23 = __p;
  if (__p)
  {
LABEL_79:
    v85 = v23;
    operator delete(v23);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
}

void sub_206858018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char,unsigned char,unsigned char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v37;
  float v38;
  unsigned int v39;
  float v40;
  unsigned int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  long double v48;
  double v49;
  float v50;
  long double v51;
  double v52;
  float v53;
  long double v54;
  double v55;
  uint64_t v56;
  float v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v81;
  void *__p;
  _BYTE *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v85 - (_BYTE *)__p;
  if (v85 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v91 - v90;
  if (v91 == v90)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v60 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_86;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v81 = *((_QWORD *)__p + 4);
  v66 = *(_QWORD *)v90;
  v67 = *((_QWORD *)__p + 3);
  v64 = *((_QWORD *)v90 + 2);
  v65 = *((_QWORD *)v90 + 1);
  v32 = *((_QWORD *)v90 + 4);
  v62 = *((_QWORD *)__p + 2);
  v63 = *((_QWORD *)v90 + 3);
  v77 = *(_QWORD *)v88;
  v76 = *((_QWORD *)v88 + 1);
  v75 = *((_QWORD *)v88 + 2);
  v74 = *((_QWORD *)v88 + 3);
  v73 = *((_QWORD *)v88 + 4);
  v71 = *((_QWORD *)v86 + 1);
  v72 = *(_QWORD *)v86;
  v69 = *((_QWORD *)v86 + 3);
  v70 = *((_QWORD *)v86 + 2);
  v68 = *((_QWORD *)v86 + 4);
  v61 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v62)
        {
          for (i = 0; i != v62; ++i)
          {
            if (v67)
            {
              for (j = 0; j != v67; ++j)
              {
                if (v81)
                {
                  for (k = 0; k != v81; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    v38 = v37;
                    if (a2)
                    {
                      LOBYTE(v39) = *(_BYTE *)(a2
                      v40 = (float)v39;
                    }
                    else
                    {
                      v40 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v41) = *(_BYTE *)(a3
                      v42 = (float)v41;
                    }
                    else
                    {
                      v42 = 1.0;
                    }
                    if (v38 <= 65536.0)
                      v43 = v38;
                    else
                      v43 = 65536.0;
                    if (v43 < -65536.0)
                      v43 = -65536.0;
                    if (v40 <= 65536.0)
                      v44 = v40;
                    else
                      v44 = 65536.0;
                    if (v42 <= 65536.0)
                      v45 = v42;
                    else
                      v45 = 65536.0;
                    v46 = 0.0;
                    v47 = 0.0;
                    if ((float)(v29 * v43) != 0.0)
                    {
                      __e[0] = 0;
                      v48 = frexp((float)(v29 * v43), __e);
                      v49 = ldexp(v48, 11);
                      v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    v50 = (float)(v44 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      v51 = frexp(v50, __e);
                      v52 = ldexp(v51, 11);
                      v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    v53 = 0.0;
                    if ((float)(v45 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      v54 = frexp((float)(v45 * v46), __e);
                      v55 = ldexp(v54, 11);
                      v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    *(float *)__e = v53;
                    v56 = *(_QWORD *)(a8 + 24);
                    if (!v56)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v57 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v56 + 48))(v56, __e);
                    if (v57 == INFINITY)
                    {
                      LOBYTE(v58) = -1;
                    }
                    else if (v57 == -INFINITY)
                    {
                      LOBYTE(v58) = 0;
                    }
                    else
                    {
                      v59 = llroundf(v57);
                      if (v59 >= 255)
                        v59 = 255;
                      v58 = v59 & ~(v59 >> 31);
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v61;
      }
      while (v33 != v61);
    }
    ++v30;
  }
  while (v30 != v60);
  v23 = __p;
  if (__p)
  {
LABEL_86:
    v85 = v23;
    operator delete(v23);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
}

void sub_2068587E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char,unsigned char,signed char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v37;
  float v38;
  unsigned int v39;
  float v40;
  unsigned int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  long double v48;
  double v49;
  float v50;
  long double v51;
  double v52;
  float v53;
  long double v54;
  double v55;
  uint64_t v56;
  float v57;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v81;
  void *__p;
  _BYTE *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v85 - (_BYTE *)__p;
  if (v85 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v91 - v90;
  if (v91 == v90)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v60 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_88;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v81 = *((_QWORD *)__p + 4);
  v66 = *(_QWORD *)v90;
  v67 = *((_QWORD *)__p + 3);
  v64 = *((_QWORD *)v90 + 2);
  v65 = *((_QWORD *)v90 + 1);
  v32 = *((_QWORD *)v90 + 4);
  v62 = *((_QWORD *)__p + 2);
  v63 = *((_QWORD *)v90 + 3);
  v77 = *(_QWORD *)v88;
  v76 = *((_QWORD *)v88 + 1);
  v75 = *((_QWORD *)v88 + 2);
  v74 = *((_QWORD *)v88 + 3);
  v73 = *((_QWORD *)v88 + 4);
  v71 = *((_QWORD *)v86 + 1);
  v72 = *(_QWORD *)v86;
  v69 = *((_QWORD *)v86 + 3);
  v70 = *((_QWORD *)v86 + 2);
  v68 = *((_QWORD *)v86 + 4);
  v61 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v62)
        {
          for (i = 0; i != v62; ++i)
          {
            if (v67)
            {
              for (j = 0; j != v67; ++j)
              {
                if (v81)
                {
                  for (k = 0; k != v81; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    v38 = v37;
                    if (a2)
                    {
                      LOBYTE(v39) = *(_BYTE *)(a2
                      v40 = (float)v39;
                    }
                    else
                    {
                      v40 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v41) = *(_BYTE *)(a3
                      v42 = (float)v41;
                    }
                    else
                    {
                      v42 = 1.0;
                    }
                    if (v38 <= 65536.0)
                      v43 = v38;
                    else
                      v43 = 65536.0;
                    if (v43 < -65536.0)
                      v43 = -65536.0;
                    if (v40 <= 65536.0)
                      v44 = v40;
                    else
                      v44 = 65536.0;
                    if (v42 <= 65536.0)
                      v45 = v42;
                    else
                      v45 = 65536.0;
                    v46 = 0.0;
                    v47 = 0.0;
                    if ((float)(v29 * v43) != 0.0)
                    {
                      __e[0] = 0;
                      v48 = frexp((float)(v29 * v43), __e);
                      v49 = ldexp(v48, 11);
                      v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    v50 = (float)(v44 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      v51 = frexp(v50, __e);
                      v52 = ldexp(v51, 11);
                      v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    v53 = 0.0;
                    if ((float)(v45 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      v54 = frexp((float)(v45 * v46), __e);
                      v55 = ldexp(v54, 11);
                      v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    *(float *)__e = v53;
                    v56 = *(_QWORD *)(a8 + 24);
                    if (!v56)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v57 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v56 + 48))(v56, __e);
                    if (v57 == INFINITY)
                    {
                      v58 = 127;
                    }
                    else if (v57 == -INFINITY)
                    {
                      v58 = 0x80;
                    }
                    else
                    {
                      v59 = llroundf(v57);
                      if (v59 >= 127)
                        v59 = 127;
                      if (v59 <= -128)
                        v58 = 0x80;
                      else
                        v58 = v59;
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v61;
      }
      while (v33 != v61);
    }
    ++v30;
  }
  while (v30 != v60);
  v23 = __p;
  if (__p)
  {
LABEL_88:
    v85 = v23;
    operator delete(v23);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
}

void sub_206858FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,signed char,signed char,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  long double v47;
  double v48;
  float v49;
  long double v50;
  double v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  MIL::Fp16 *v56;
  float v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v80;
  void *__p;
  _BYTE *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v84 - (_BYTE *)__p;
  if (v84 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v90 - v89;
  if (v90 == v89)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v88 - v87;
  if (v88 == v87)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v86 - v85;
  if (v86 == v85)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v59 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_84;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v80 = *((_QWORD *)__p + 4);
  v65 = *(_QWORD *)v89;
  v66 = *((_QWORD *)__p + 3);
  v63 = *((_QWORD *)v89 + 2);
  v64 = *((_QWORD *)v89 + 1);
  v32 = *((_QWORD *)v89 + 4);
  v61 = *((_QWORD *)__p + 2);
  v62 = *((_QWORD *)v89 + 3);
  v76 = *(_QWORD *)v87;
  v75 = *((_QWORD *)v87 + 1);
  v74 = *((_QWORD *)v87 + 2);
  v73 = *((_QWORD *)v87 + 3);
  v72 = *((_QWORD *)v87 + 4);
  v70 = *((_QWORD *)v85 + 1);
  v71 = *(_QWORD *)v85;
  v68 = *((_QWORD *)v85 + 3);
  v69 = *((_QWORD *)v85 + 2);
  v67 = *((_QWORD *)v85 + 4);
  v60 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v61)
        {
          for (i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (k = 0; k != v80; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    v38 = v37;
                    if (a2)
                      v39 = (float)*(char *)(a2
                    else
                      v39 = 0.0;
                    if (a3)
                      v40 = (float)*(char *)(a3
                    else
                      v40 = 1.0;
                    if (v38 <= 65536.0)
                      v41 = v38;
                    else
                      v41 = 65536.0;
                    if (v41 < -65536.0)
                      v41 = -65536.0;
                    if (v39 <= 65536.0)
                      v42 = v39;
                    else
                      v42 = 65536.0;
                    if (v42 >= -65536.0)
                      v43 = v42;
                    else
                      v43 = -65536.0;
                    if (v40 > 65536.0)
                      v40 = 65536.0;
                    if (v40 >= -65536.0)
                      v44 = v40;
                    else
                      v44 = -65536.0;
                    v45 = 0.0;
                    v46 = 0.0;
                    if ((float)(v29 * v41) != 0.0)
                    {
                      __e[0] = 0;
                      v47 = frexp((float)(v29 * v41), __e);
                      v48 = ldexp(v47, 11);
                      v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      v50 = frexp(v49, __e);
                      v51 = ldexp(v50, 11);
                      v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    v52 = 0.0;
                    if ((float)(v44 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      v53 = frexp((float)(v44 * v45), __e);
                      v54 = ldexp(v53, 11);
                      v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    *(float *)__e = v52;
                    v55 = *(_QWORD *)(a8 + 24);
                    if (!v55)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v56 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, __e);
                    v58 = MIL::Fp16::FromFloat(v56, v57);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_84:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_20685975C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,signed char,signed char,unsigned char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  long double v47;
  double v48;
  float v49;
  long double v50;
  double v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  float v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v80;
  void *__p;
  _BYTE *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v84 - (_BYTE *)__p;
  if (v84 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v90 - v89;
  if (v90 == v89)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v88 - v87;
  if (v88 == v87)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v86 - v85;
  if (v86 == v85)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v59 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_91;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v80 = *((_QWORD *)__p + 4);
  v65 = *(_QWORD *)v89;
  v66 = *((_QWORD *)__p + 3);
  v63 = *((_QWORD *)v89 + 2);
  v64 = *((_QWORD *)v89 + 1);
  v32 = *((_QWORD *)v89 + 4);
  v61 = *((_QWORD *)__p + 2);
  v62 = *((_QWORD *)v89 + 3);
  v76 = *(_QWORD *)v87;
  v75 = *((_QWORD *)v87 + 1);
  v74 = *((_QWORD *)v87 + 2);
  v73 = *((_QWORD *)v87 + 3);
  v72 = *((_QWORD *)v87 + 4);
  v70 = *((_QWORD *)v85 + 1);
  v71 = *(_QWORD *)v85;
  v68 = *((_QWORD *)v85 + 3);
  v69 = *((_QWORD *)v85 + 2);
  v67 = *((_QWORD *)v85 + 4);
  v60 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v61)
        {
          for (i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (k = 0; k != v80; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    v38 = v37;
                    if (a2)
                      v39 = (float)*(char *)(a2
                    else
                      v39 = 0.0;
                    if (a3)
                      v40 = (float)*(char *)(a3
                    else
                      v40 = 1.0;
                    if (v38 <= 65536.0)
                      v41 = v38;
                    else
                      v41 = 65536.0;
                    if (v41 < -65536.0)
                      v41 = -65536.0;
                    if (v39 <= 65536.0)
                      v42 = v39;
                    else
                      v42 = 65536.0;
                    if (v42 >= -65536.0)
                      v43 = v42;
                    else
                      v43 = -65536.0;
                    if (v40 > 65536.0)
                      v40 = 65536.0;
                    if (v40 >= -65536.0)
                      v44 = v40;
                    else
                      v44 = -65536.0;
                    v45 = 0.0;
                    v46 = 0.0;
                    if ((float)(v29 * v41) != 0.0)
                    {
                      __e[0] = 0;
                      v47 = frexp((float)(v29 * v41), __e);
                      v48 = ldexp(v47, 11);
                      v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      v50 = frexp(v49, __e);
                      v51 = ldexp(v50, 11);
                      v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    v52 = 0.0;
                    if ((float)(v44 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      v53 = frexp((float)(v44 * v45), __e);
                      v54 = ldexp(v53, 11);
                      v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    *(float *)__e = v52;
                    v55 = *(_QWORD *)(a8 + 24);
                    if (!v55)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v56 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, __e);
                    if (v56 == INFINITY)
                    {
                      LOBYTE(v57) = -1;
                    }
                    else if (v56 == -INFINITY)
                    {
                      LOBYTE(v57) = 0;
                    }
                    else
                    {
                      v58 = llroundf(v56);
                      if (v58 >= 255)
                        v58 = 255;
                      v57 = v58 & ~(v58 >> 31);
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_91:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_206859F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,signed char,signed char,signed char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  long double v47;
  double v48;
  float v49;
  long double v50;
  double v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  float v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v80;
  void *__p;
  _BYTE *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v84 - (_BYTE *)__p;
  if (v84 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v90 - v89;
  if (v90 == v89)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v88 - v87;
  if (v88 == v87)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v86 - v85;
  if (v86 == v85)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v59 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_93;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v80 = *((_QWORD *)__p + 4);
  v65 = *(_QWORD *)v89;
  v66 = *((_QWORD *)__p + 3);
  v63 = *((_QWORD *)v89 + 2);
  v64 = *((_QWORD *)v89 + 1);
  v32 = *((_QWORD *)v89 + 4);
  v61 = *((_QWORD *)__p + 2);
  v62 = *((_QWORD *)v89 + 3);
  v76 = *(_QWORD *)v87;
  v75 = *((_QWORD *)v87 + 1);
  v74 = *((_QWORD *)v87 + 2);
  v73 = *((_QWORD *)v87 + 3);
  v72 = *((_QWORD *)v87 + 4);
  v70 = *((_QWORD *)v85 + 1);
  v71 = *(_QWORD *)v85;
  v68 = *((_QWORD *)v85 + 3);
  v69 = *((_QWORD *)v85 + 2);
  v67 = *((_QWORD *)v85 + 4);
  v60 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v61)
        {
          for (i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (k = 0; k != v80; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    v38 = v37;
                    if (a2)
                      v39 = (float)*(char *)(a2
                    else
                      v39 = 0.0;
                    if (a3)
                      v40 = (float)*(char *)(a3
                    else
                      v40 = 1.0;
                    if (v38 <= 65536.0)
                      v41 = v38;
                    else
                      v41 = 65536.0;
                    if (v41 < -65536.0)
                      v41 = -65536.0;
                    if (v39 <= 65536.0)
                      v42 = v39;
                    else
                      v42 = 65536.0;
                    if (v42 >= -65536.0)
                      v43 = v42;
                    else
                      v43 = -65536.0;
                    if (v40 > 65536.0)
                      v40 = 65536.0;
                    if (v40 >= -65536.0)
                      v44 = v40;
                    else
                      v44 = -65536.0;
                    v45 = 0.0;
                    v46 = 0.0;
                    if ((float)(v29 * v41) != 0.0)
                    {
                      __e[0] = 0;
                      v47 = frexp((float)(v29 * v41), __e);
                      v48 = ldexp(v47, 11);
                      v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      v50 = frexp(v49, __e);
                      v51 = ldexp(v50, 11);
                      v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    v52 = 0.0;
                    if ((float)(v44 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      v53 = frexp((float)(v44 * v45), __e);
                      v54 = ldexp(v53, 11);
                      v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    *(float *)__e = v52;
                    v55 = *(_QWORD *)(a8 + 24);
                    if (!v55)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v56 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, __e);
                    if (v56 == INFINITY)
                    {
                      v57 = 127;
                    }
                    else if (v56 == -INFINITY)
                    {
                      v57 = 0x80;
                    }
                    else
                    {
                      v58 = llroundf(v56);
                      if (v58 >= 127)
                        v58 = 127;
                      if (v58 <= -128)
                        v57 = 0x80;
                      else
                        v57 = v58;
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_93:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_20685A720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16,MIL::Fp16,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  float v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  long double v47;
  double v48;
  float v49;
  long double v50;
  double v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  MIL::Fp16 *v56;
  float v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v80;
  void *__p;
  _BYTE *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v19 = a5[1];
    if (*a5 != v19)
    {
      v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5)
    }
  }
  if (a3)
  {
    v21 = a6[1];
    if (*a6 != v21)
    {
      v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v24 = __p;
  v25 = v84 - (_BYTE *)__p;
  if (v84 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v90 - v89;
  if (v90 == v89)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v88 - v87;
  if (v88 == v87)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = v86 - v85;
  if (v86 == v85)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v29 = 65536.0;
  if (a10 <= 65536.0)
    v29 = a10;
  if (v29 >= -65536.0)
    v30 = v29;
  else
    v30 = -65536.0;
  v59 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_81;
  v31 = 0;
  v32 = *((_QWORD *)__p + 1);
  v80 = *((_QWORD *)__p + 4);
  v65 = *(_QWORD *)v89;
  v66 = *((_QWORD *)__p + 3);
  v63 = *((_QWORD *)v89 + 2);
  v64 = *((_QWORD *)v89 + 1);
  v33 = *((_QWORD *)v89 + 4);
  v61 = *((_QWORD *)__p + 2);
  v62 = *((_QWORD *)v89 + 3);
  v76 = *(_QWORD *)v87;
  v75 = *((_QWORD *)v87 + 1);
  v74 = *((_QWORD *)v87 + 2);
  v73 = *((_QWORD *)v87 + 3);
  v72 = *((_QWORD *)v87 + 4);
  v70 = *((_QWORD *)v85 + 1);
  v71 = *(_QWORD *)v85;
  v68 = *((_QWORD *)v85 + 3);
  v69 = *((_QWORD *)v85 + 2);
  v67 = *((_QWORD *)v85 + 4);
  v60 = v32;
  do
  {
    if (v32)
    {
      v34 = 0;
      do
      {
        if (v61)
        {
          for (i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (k = 0; k != v80; ++k)
                  {
                    LOBYTE(v11) = *(_BYTE *)(a1
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      v39 = v38;
                    }
                    else
                    {
                      v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      v40 = 1.0;
                    }
                    v41 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0)
                      v41 = 65536.0;
                    if (v39 <= 65536.0)
                      v42 = v39;
                    else
                      v42 = 65536.0;
                    if (v42 >= -65536.0)
                      v43 = v42;
                    else
                      v43 = -65536.0;
                    if (v40 > 65536.0)
                      v40 = 65536.0;
                    if (v40 >= -65536.0)
                      v44 = v40;
                    else
                      v44 = -65536.0;
                    v45 = v30 * v41;
                    v11 = 0.0;
                    v46 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      v47 = frexp(v45, __e);
                      v48 = ldexp(v47, 11);
                      v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      v50 = frexp(v49, __e);
                      v51 = ldexp(v50, 11);
                      v11 = ldexp(round(v51), __e[0] - 11);
                    }
                    v52 = 0.0;
                    if ((float)(v44 * v11) != 0.0)
                    {
                      __e[0] = 0;
                      v53 = frexp((float)(v44 * v11), __e);
                      v54 = ldexp(v53, 11);
                      v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    *(float *)__e = v52;
                    v55 = *(_QWORD *)(a8 + 24);
                    if (!v55)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v56 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, __e);
                    v58 = MIL::Fp16::FromFloat(v56, v57);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v34;
        v32 = v60;
      }
      while (v34 != v60);
    }
    ++v31;
  }
  while (v31 != v59);
  v24 = __p;
  if (__p)
  {
LABEL_81:
    v84 = v24;
    operator delete(v24);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_20685AEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16,MIL::Fp16,unsigned char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  float v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  long double v47;
  double v48;
  float v49;
  long double v50;
  double v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  float v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v80;
  void *__p;
  _BYTE *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v19 = a5[1];
    if (*a5 != v19)
    {
      v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5)
    }
  }
  if (a3)
  {
    v21 = a6[1];
    if (*a6 != v21)
    {
      v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v24 = __p;
  v25 = v84 - (_BYTE *)__p;
  if (v84 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v90 - v89;
  if (v90 == v89)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v88 - v87;
  if (v88 == v87)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = v86 - v85;
  if (v86 == v85)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v29 = 65536.0;
  if (a10 <= 65536.0)
    v29 = a10;
  if (v29 >= -65536.0)
    v30 = v29;
  else
    v30 = -65536.0;
  v59 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_88;
  v31 = 0;
  v32 = *((_QWORD *)__p + 1);
  v80 = *((_QWORD *)__p + 4);
  v65 = *(_QWORD *)v89;
  v66 = *((_QWORD *)__p + 3);
  v63 = *((_QWORD *)v89 + 2);
  v64 = *((_QWORD *)v89 + 1);
  v33 = *((_QWORD *)v89 + 4);
  v61 = *((_QWORD *)__p + 2);
  v62 = *((_QWORD *)v89 + 3);
  v76 = *(_QWORD *)v87;
  v75 = *((_QWORD *)v87 + 1);
  v74 = *((_QWORD *)v87 + 2);
  v73 = *((_QWORD *)v87 + 3);
  v72 = *((_QWORD *)v87 + 4);
  v70 = *((_QWORD *)v85 + 1);
  v71 = *(_QWORD *)v85;
  v68 = *((_QWORD *)v85 + 3);
  v69 = *((_QWORD *)v85 + 2);
  v67 = *((_QWORD *)v85 + 4);
  v60 = v32;
  do
  {
    if (v32)
    {
      v34 = 0;
      do
      {
        if (v61)
        {
          for (i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (k = 0; k != v80; ++k)
                  {
                    LOBYTE(v11) = *(_BYTE *)(a1
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      v39 = v38;
                    }
                    else
                    {
                      v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      v40 = 1.0;
                    }
                    v41 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0)
                      v41 = 65536.0;
                    if (v39 <= 65536.0)
                      v42 = v39;
                    else
                      v42 = 65536.0;
                    if (v42 >= -65536.0)
                      v43 = v42;
                    else
                      v43 = -65536.0;
                    if (v40 > 65536.0)
                      v40 = 65536.0;
                    if (v40 >= -65536.0)
                      v44 = v40;
                    else
                      v44 = -65536.0;
                    v45 = v30 * v41;
                    v11 = 0.0;
                    v46 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      v47 = frexp(v45, __e);
                      v48 = ldexp(v47, 11);
                      v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      v50 = frexp(v49, __e);
                      v51 = ldexp(v50, 11);
                      v11 = ldexp(round(v51), __e[0] - 11);
                    }
                    v52 = 0.0;
                    if ((float)(v44 * v11) != 0.0)
                    {
                      __e[0] = 0;
                      v53 = frexp((float)(v44 * v11), __e);
                      v54 = ldexp(v53, 11);
                      v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    *(float *)__e = v52;
                    v55 = *(_QWORD *)(a8 + 24);
                    if (!v55)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v56 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, __e);
                    if (v56 == INFINITY)
                    {
                      LOBYTE(v57) = -1;
                    }
                    else if (v56 == -INFINITY)
                    {
                      LOBYTE(v57) = 0;
                    }
                    else
                    {
                      v58 = llroundf(v56);
                      if (v58 >= 255)
                        v58 = 255;
                      v57 = v58 & ~(v58 >> 31);
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v34;
        v32 = v60;
      }
      while (v34 != v60);
    }
    ++v31;
  }
  while (v31 != v59);
  v24 = __p;
  if (__p)
  {
LABEL_88:
    v84 = v24;
    operator delete(v24);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_20685B6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16,MIL::Fp16,signed char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  float v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  long double v47;
  double v48;
  float v49;
  long double v50;
  double v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  float v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v80;
  void *__p;
  _BYTE *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v19 = a5[1];
    if (*a5 != v19)
    {
      v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5)
    }
  }
  if (a3)
  {
    v21 = a6[1];
    if (*a6 != v21)
    {
      v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v24 = __p;
  v25 = v84 - (_BYTE *)__p;
  if (v84 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v90 - v89;
  if (v90 == v89)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v88 - v87;
  if (v88 == v87)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = v86 - v85;
  if (v86 == v85)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v29 = 65536.0;
  if (a10 <= 65536.0)
    v29 = a10;
  if (v29 >= -65536.0)
    v30 = v29;
  else
    v30 = -65536.0;
  v59 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_90;
  v31 = 0;
  v32 = *((_QWORD *)__p + 1);
  v80 = *((_QWORD *)__p + 4);
  v65 = *(_QWORD *)v89;
  v66 = *((_QWORD *)__p + 3);
  v63 = *((_QWORD *)v89 + 2);
  v64 = *((_QWORD *)v89 + 1);
  v33 = *((_QWORD *)v89 + 4);
  v61 = *((_QWORD *)__p + 2);
  v62 = *((_QWORD *)v89 + 3);
  v76 = *(_QWORD *)v87;
  v75 = *((_QWORD *)v87 + 1);
  v74 = *((_QWORD *)v87 + 2);
  v73 = *((_QWORD *)v87 + 3);
  v72 = *((_QWORD *)v87 + 4);
  v70 = *((_QWORD *)v85 + 1);
  v71 = *(_QWORD *)v85;
  v68 = *((_QWORD *)v85 + 3);
  v69 = *((_QWORD *)v85 + 2);
  v67 = *((_QWORD *)v85 + 4);
  v60 = v32;
  do
  {
    if (v32)
    {
      v34 = 0;
      do
      {
        if (v61)
        {
          for (i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (k = 0; k != v80; ++k)
                  {
                    LOBYTE(v11) = *(_BYTE *)(a1
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      v39 = v38;
                    }
                    else
                    {
                      v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      v40 = 1.0;
                    }
                    v41 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0)
                      v41 = 65536.0;
                    if (v39 <= 65536.0)
                      v42 = v39;
                    else
                      v42 = 65536.0;
                    if (v42 >= -65536.0)
                      v43 = v42;
                    else
                      v43 = -65536.0;
                    if (v40 > 65536.0)
                      v40 = 65536.0;
                    if (v40 >= -65536.0)
                      v44 = v40;
                    else
                      v44 = -65536.0;
                    v45 = v30 * v41;
                    v11 = 0.0;
                    v46 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      v47 = frexp(v45, __e);
                      v48 = ldexp(v47, 11);
                      v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      v50 = frexp(v49, __e);
                      v51 = ldexp(v50, 11);
                      v11 = ldexp(round(v51), __e[0] - 11);
                    }
                    v52 = 0.0;
                    if ((float)(v44 * v11) != 0.0)
                    {
                      __e[0] = 0;
                      v53 = frexp((float)(v44 * v11), __e);
                      v54 = ldexp(v53, 11);
                      v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    *(float *)__e = v52;
                    v55 = *(_QWORD *)(a8 + 24);
                    if (!v55)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v56 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, __e);
                    if (v56 == INFINITY)
                    {
                      v57 = 127;
                    }
                    else if (v56 == -INFINITY)
                    {
                      v57 = 0x80;
                    }
                    else
                    {
                      v58 = llroundf(v56);
                      if (v58 >= 127)
                        v58 = 127;
                      if (v58 <= -128)
                        v57 = 0x80;
                      else
                        v57 = v58;
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v34;
        v32 = v60;
      }
      while (v34 != v60);
    }
    ++v31;
  }
  while (v31 != v59);
  v24 = __p;
  if (__p)
  {
LABEL_90:
    v84 = v24;
    operator delete(v24);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_20685BE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,unsigned char,unsigned char,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  float v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  unsigned int v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  long double v47;
  double v48;
  float v49;
  long double v50;
  double v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  MIL::Fp16 *v56;
  float v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v80;
  void *__p;
  _BYTE *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v19 = a5[1];
    if (*a5 != v19)
    {
      v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5)
    }
  }
  if (a3)
  {
    v21 = a6[1];
    if (*a6 != v21)
    {
      v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v24 = __p;
  v25 = v84 - (_BYTE *)__p;
  if (v84 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v90 - v89;
  if (v90 == v89)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v88 - v87;
  if (v88 == v87)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = v86 - v85;
  if (v86 == v85)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v29 = 65536.0;
  if (a10 <= 65536.0)
    v29 = a10;
  if (v29 >= -65536.0)
    v30 = v29;
  else
    v30 = -65536.0;
  v59 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_76;
  v31 = 0;
  v32 = *((_QWORD *)__p + 1);
  v80 = *((_QWORD *)__p + 4);
  v65 = *(_QWORD *)v89;
  v66 = *((_QWORD *)__p + 3);
  v63 = *((_QWORD *)v89 + 2);
  v64 = *((_QWORD *)v89 + 1);
  v33 = *((_QWORD *)v89 + 4);
  v61 = *((_QWORD *)__p + 2);
  v62 = *((_QWORD *)v89 + 3);
  v76 = *(_QWORD *)v87;
  v75 = *((_QWORD *)v87 + 1);
  v74 = *((_QWORD *)v87 + 2);
  v73 = *((_QWORD *)v87 + 3);
  v72 = *((_QWORD *)v87 + 4);
  v70 = *((_QWORD *)v85 + 1);
  v71 = *(_QWORD *)v85;
  v68 = *((_QWORD *)v85 + 3);
  v69 = *((_QWORD *)v85 + 2);
  v67 = *((_QWORD *)v85 + 4);
  v60 = v32;
  do
  {
    if (v32)
    {
      v34 = 0;
      do
      {
        if (v61)
        {
          for (i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (k = 0; k != v80; ++k)
                  {
                    LOBYTE(v11) = *(_BYTE *)(a1
                    if (a2)
                    {
                      LOBYTE(v38) = *(_BYTE *)(a2
                      v39 = (float)v38;
                    }
                    else
                    {
                      v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v40) = *(_BYTE *)(a3
                      v41 = (float)v40;
                    }
                    else
                    {
                      v41 = 1.0;
                    }
                    v42 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0)
                      v42 = 65536.0;
                    if (v39 <= 65536.0)
                      v43 = v39;
                    else
                      v43 = 65536.0;
                    if (v41 <= 65536.0)
                      v11 = v41;
                    else
                      v11 = 65536.0;
                    v44 = v30 * v42;
                    v45 = 0.0;
                    v46 = 0.0;
                    if (v44 != 0.0)
                    {
                      __e[0] = 0;
                      v47 = frexp(v44, __e);
                      v48 = ldexp(v47, 11);
                      v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      v50 = frexp(v49, __e);
                      v51 = ldexp(v50, 11);
                      v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    v52 = 0.0;
                    if ((float)(v11 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      v53 = frexp((float)(v11 * v45), __e);
                      v54 = ldexp(v53, 11);
                      v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    *(float *)__e = v52;
                    v55 = *(_QWORD *)(a8 + 24);
                    if (!v55)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v56 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, __e);
                    v58 = MIL::Fp16::FromFloat(v56, v57);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v34;
        v32 = v60;
      }
      while (v34 != v60);
    }
    ++v31;
  }
  while (v31 != v59);
  v24 = __p;
  if (__p)
  {
LABEL_76:
    v84 = v24;
    operator delete(v24);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_20685C5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,unsigned char,unsigned char,unsigned char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  float v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  unsigned int v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  long double v47;
  double v48;
  float v49;
  long double v50;
  double v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  float v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v80;
  void *__p;
  _BYTE *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v19 = a5[1];
    if (*a5 != v19)
    {
      v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5)
    }
  }
  if (a3)
  {
    v21 = a6[1];
    if (*a6 != v21)
    {
      v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v24 = __p;
  v25 = v84 - (_BYTE *)__p;
  if (v84 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v90 - v89;
  if (v90 == v89)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v88 - v87;
  if (v88 == v87)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = v86 - v85;
  if (v86 == v85)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v29 = 65536.0;
  if (a10 <= 65536.0)
    v29 = a10;
  if (v29 >= -65536.0)
    v30 = v29;
  else
    v30 = -65536.0;
  v59 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_83;
  v31 = 0;
  v32 = *((_QWORD *)__p + 1);
  v80 = *((_QWORD *)__p + 4);
  v65 = *(_QWORD *)v89;
  v66 = *((_QWORD *)__p + 3);
  v63 = *((_QWORD *)v89 + 2);
  v64 = *((_QWORD *)v89 + 1);
  v33 = *((_QWORD *)v89 + 4);
  v61 = *((_QWORD *)__p + 2);
  v62 = *((_QWORD *)v89 + 3);
  v76 = *(_QWORD *)v87;
  v75 = *((_QWORD *)v87 + 1);
  v74 = *((_QWORD *)v87 + 2);
  v73 = *((_QWORD *)v87 + 3);
  v72 = *((_QWORD *)v87 + 4);
  v70 = *((_QWORD *)v85 + 1);
  v71 = *(_QWORD *)v85;
  v68 = *((_QWORD *)v85 + 3);
  v69 = *((_QWORD *)v85 + 2);
  v67 = *((_QWORD *)v85 + 4);
  v60 = v32;
  do
  {
    if (v32)
    {
      v34 = 0;
      do
      {
        if (v61)
        {
          for (i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (k = 0; k != v80; ++k)
                  {
                    LOBYTE(v11) = *(_BYTE *)(a1
                    if (a2)
                    {
                      LOBYTE(v38) = *(_BYTE *)(a2
                      v39 = (float)v38;
                    }
                    else
                    {
                      v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v40) = *(_BYTE *)(a3
                      v41 = (float)v40;
                    }
                    else
                    {
                      v41 = 1.0;
                    }
                    v42 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0)
                      v42 = 65536.0;
                    if (v39 <= 65536.0)
                      v43 = v39;
                    else
                      v43 = 65536.0;
                    if (v41 <= 65536.0)
                      v11 = v41;
                    else
                      v11 = 65536.0;
                    v44 = v30 * v42;
                    v45 = 0.0;
                    v46 = 0.0;
                    if (v44 != 0.0)
                    {
                      __e[0] = 0;
                      v47 = frexp(v44, __e);
                      v48 = ldexp(v47, 11);
                      v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      v50 = frexp(v49, __e);
                      v51 = ldexp(v50, 11);
                      v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    v52 = 0.0;
                    if ((float)(v11 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      v53 = frexp((float)(v11 * v45), __e);
                      v54 = ldexp(v53, 11);
                      v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    *(float *)__e = v52;
                    v55 = *(_QWORD *)(a8 + 24);
                    if (!v55)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v56 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, __e);
                    if (v56 == INFINITY)
                    {
                      LOBYTE(v57) = -1;
                    }
                    else if (v56 == -INFINITY)
                    {
                      LOBYTE(v57) = 0;
                    }
                    else
                    {
                      v58 = llroundf(v56);
                      if (v58 >= 255)
                        v58 = 255;
                      v57 = v58 & ~(v58 >> 31);
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v34;
        v32 = v60;
      }
      while (v34 != v60);
    }
    ++v31;
  }
  while (v31 != v59);
  v24 = __p;
  if (__p)
  {
LABEL_83:
    v84 = v24;
    operator delete(v24);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_20685CDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,unsigned char,unsigned char,signed char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  float v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  unsigned int v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  long double v47;
  double v48;
  float v49;
  long double v50;
  double v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  float v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v80;
  void *__p;
  _BYTE *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v19 = a5[1];
    if (*a5 != v19)
    {
      v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5)
    }
  }
  if (a3)
  {
    v21 = a6[1];
    if (*a6 != v21)
    {
      v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v24 = __p;
  v25 = v84 - (_BYTE *)__p;
  if (v84 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v90 - v89;
  if (v90 == v89)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v88 - v87;
  if (v88 == v87)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = v86 - v85;
  if (v86 == v85)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v29 = 65536.0;
  if (a10 <= 65536.0)
    v29 = a10;
  if (v29 >= -65536.0)
    v30 = v29;
  else
    v30 = -65536.0;
  v59 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_85;
  v31 = 0;
  v32 = *((_QWORD *)__p + 1);
  v80 = *((_QWORD *)__p + 4);
  v65 = *(_QWORD *)v89;
  v66 = *((_QWORD *)__p + 3);
  v63 = *((_QWORD *)v89 + 2);
  v64 = *((_QWORD *)v89 + 1);
  v33 = *((_QWORD *)v89 + 4);
  v61 = *((_QWORD *)__p + 2);
  v62 = *((_QWORD *)v89 + 3);
  v76 = *(_QWORD *)v87;
  v75 = *((_QWORD *)v87 + 1);
  v74 = *((_QWORD *)v87 + 2);
  v73 = *((_QWORD *)v87 + 3);
  v72 = *((_QWORD *)v87 + 4);
  v70 = *((_QWORD *)v85 + 1);
  v71 = *(_QWORD *)v85;
  v68 = *((_QWORD *)v85 + 3);
  v69 = *((_QWORD *)v85 + 2);
  v67 = *((_QWORD *)v85 + 4);
  v60 = v32;
  do
  {
    if (v32)
    {
      v34 = 0;
      do
      {
        if (v61)
        {
          for (i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (k = 0; k != v80; ++k)
                  {
                    LOBYTE(v11) = *(_BYTE *)(a1
                    if (a2)
                    {
                      LOBYTE(v38) = *(_BYTE *)(a2
                      v39 = (float)v38;
                    }
                    else
                    {
                      v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v40) = *(_BYTE *)(a3
                      v41 = (float)v40;
                    }
                    else
                    {
                      v41 = 1.0;
                    }
                    v42 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0)
                      v42 = 65536.0;
                    if (v39 <= 65536.0)
                      v43 = v39;
                    else
                      v43 = 65536.0;
                    if (v41 <= 65536.0)
                      v11 = v41;
                    else
                      v11 = 65536.0;
                    v44 = v30 * v42;
                    v45 = 0.0;
                    v46 = 0.0;
                    if (v44 != 0.0)
                    {
                      __e[0] = 0;
                      v47 = frexp(v44, __e);
                      v48 = ldexp(v47, 11);
                      v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      v50 = frexp(v49, __e);
                      v51 = ldexp(v50, 11);
                      v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    v52 = 0.0;
                    if ((float)(v11 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      v53 = frexp((float)(v11 * v45), __e);
                      v54 = ldexp(v53, 11);
                      v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    *(float *)__e = v52;
                    v55 = *(_QWORD *)(a8 + 24);
                    if (!v55)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v56 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, __e);
                    if (v56 == INFINITY)
                    {
                      v57 = 127;
                    }
                    else if (v56 == -INFINITY)
                    {
                      v57 = 0x80;
                    }
                    else
                    {
                      v58 = llroundf(v56);
                      if (v58 >= 127)
                        v58 = 127;
                      if (v58 <= -128)
                        v57 = 0x80;
                      else
                        v57 = v58;
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v34;
        v32 = v60;
      }
      while (v34 != v60);
    }
    ++v31;
  }
  while (v31 != v59);
  v24 = __p;
  if (__p)
  {
LABEL_85:
    v84 = v24;
    operator delete(v24);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_20685D564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,signed char,signed char,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  float v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  long double v46;
  double v47;
  float v48;
  long double v49;
  double v50;
  float v51;
  long double v52;
  double v53;
  uint64_t v54;
  MIL::Fp16 *v55;
  float v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v79;
  void *__p;
  _BYTE *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v19 = a5[1];
    if (*a5 != v19)
    {
      v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5)
    }
  }
  if (a3)
  {
    v21 = a6[1];
    if (*a6 != v21)
    {
      v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v24 = __p;
  v25 = v83 - (_BYTE *)__p;
  if (v83 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = v85 - v84;
  if (v85 == v84)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v29 = 65536.0;
  if (a10 <= 65536.0)
    v29 = a10;
  if (v29 >= -65536.0)
    v30 = v29;
  else
    v30 = -65536.0;
  v58 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_81;
  v31 = 0;
  v32 = *((_QWORD *)__p + 1);
  v79 = *((_QWORD *)__p + 4);
  v64 = *(_QWORD *)v88;
  v65 = *((_QWORD *)__p + 3);
  v62 = *((_QWORD *)v88 + 2);
  v63 = *((_QWORD *)v88 + 1);
  v33 = *((_QWORD *)v88 + 4);
  v60 = *((_QWORD *)__p + 2);
  v61 = *((_QWORD *)v88 + 3);
  v75 = *(_QWORD *)v86;
  v74 = *((_QWORD *)v86 + 1);
  v73 = *((_QWORD *)v86 + 2);
  v72 = *((_QWORD *)v86 + 3);
  v71 = *((_QWORD *)v86 + 4);
  v69 = *((_QWORD *)v84 + 1);
  v70 = *(_QWORD *)v84;
  v67 = *((_QWORD *)v84 + 3);
  v68 = *((_QWORD *)v84 + 2);
  v66 = *((_QWORD *)v84 + 4);
  v59 = v32;
  do
  {
    if (v32)
    {
      v34 = 0;
      do
      {
        if (v60)
        {
          for (i = 0; i != v60; ++i)
          {
            if (v65)
            {
              for (j = 0; j != v65; ++j)
              {
                if (v79)
                {
                  for (k = 0; k != v79; ++k)
                  {
                    LOBYTE(v11) = *(_BYTE *)(a1
                    if (a2)
                      v38 = (float)*(char *)(a2
                    else
                      v38 = 0.0;
                    if (a3)
                      v39 = (float)*(char *)(a3
                    else
                      v39 = 1.0;
                    v40 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0)
                      v40 = 65536.0;
                    if (v38 <= 65536.0)
                      v41 = v38;
                    else
                      v41 = 65536.0;
                    if (v41 >= -65536.0)
                      v42 = v41;
                    else
                      v42 = -65536.0;
                    if (v39 > 65536.0)
                      v39 = 65536.0;
                    if (v39 >= -65536.0)
                      v11 = v39;
                    else
                      v11 = -65536.0;
                    v43 = v30 * v40;
                    v44 = 0.0;
                    v45 = 0.0;
                    if (v43 != 0.0)
                    {
                      __e[0] = 0;
                      v46 = frexp(v43, __e);
                      v47 = ldexp(v46, 11);
                      v45 = ldexp(round(v47), __e[0] - 11);
                    }
                    v48 = (float)(v42 * a11) + v45;
                    if (v48 != 0.0)
                    {
                      __e[0] = 0;
                      v49 = frexp(v48, __e);
                      v50 = ldexp(v49, 11);
                      v44 = ldexp(round(v50), __e[0] - 11);
                    }
                    v51 = 0.0;
                    if ((float)(v11 * v44) != 0.0)
                    {
                      __e[0] = 0;
                      v52 = frexp((float)(v11 * v44), __e);
                      v53 = ldexp(v52, 11);
                      v51 = ldexp(round(v53), __e[0] - 11);
                    }
                    *(float *)__e = v51;
                    v54 = *(_QWORD *)(a8 + 24);
                    if (!v54)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v55 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v54 + 48))(v54, __e);
                    v57 = MIL::Fp16::FromFloat(v55, v56);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v34;
        v32 = v59;
      }
      while (v34 != v59);
    }
    ++v31;
  }
  while (v31 != v58);
  v24 = __p;
  if (__p)
  {
LABEL_81:
    v83 = v24;
    operator delete(v24);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_20685DCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,signed char,signed char,unsigned char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  float v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  long double v46;
  double v47;
  float v48;
  long double v49;
  double v50;
  float v51;
  long double v52;
  double v53;
  uint64_t v54;
  float v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v79;
  void *__p;
  _BYTE *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v19 = a5[1];
    if (*a5 != v19)
    {
      v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5)
    }
  }
  if (a3)
  {
    v21 = a6[1];
    if (*a6 != v21)
    {
      v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v24 = __p;
  v25 = v83 - (_BYTE *)__p;
  if (v83 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = v85 - v84;
  if (v85 == v84)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v29 = 65536.0;
  if (a10 <= 65536.0)
    v29 = a10;
  if (v29 >= -65536.0)
    v30 = v29;
  else
    v30 = -65536.0;
  v58 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_88;
  v31 = 0;
  v32 = *((_QWORD *)__p + 1);
  v79 = *((_QWORD *)__p + 4);
  v64 = *(_QWORD *)v88;
  v65 = *((_QWORD *)__p + 3);
  v62 = *((_QWORD *)v88 + 2);
  v63 = *((_QWORD *)v88 + 1);
  v33 = *((_QWORD *)v88 + 4);
  v60 = *((_QWORD *)__p + 2);
  v61 = *((_QWORD *)v88 + 3);
  v75 = *(_QWORD *)v86;
  v74 = *((_QWORD *)v86 + 1);
  v73 = *((_QWORD *)v86 + 2);
  v72 = *((_QWORD *)v86 + 3);
  v71 = *((_QWORD *)v86 + 4);
  v69 = *((_QWORD *)v84 + 1);
  v70 = *(_QWORD *)v84;
  v67 = *((_QWORD *)v84 + 3);
  v68 = *((_QWORD *)v84 + 2);
  v66 = *((_QWORD *)v84 + 4);
  v59 = v32;
  do
  {
    if (v32)
    {
      v34 = 0;
      do
      {
        if (v60)
        {
          for (i = 0; i != v60; ++i)
          {
            if (v65)
            {
              for (j = 0; j != v65; ++j)
              {
                if (v79)
                {
                  for (k = 0; k != v79; ++k)
                  {
                    LOBYTE(v11) = *(_BYTE *)(a1
                    if (a2)
                      v38 = (float)*(char *)(a2
                    else
                      v38 = 0.0;
                    if (a3)
                      v39 = (float)*(char *)(a3
                    else
                      v39 = 1.0;
                    v40 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0)
                      v40 = 65536.0;
                    if (v38 <= 65536.0)
                      v41 = v38;
                    else
                      v41 = 65536.0;
                    if (v41 >= -65536.0)
                      v42 = v41;
                    else
                      v42 = -65536.0;
                    if (v39 > 65536.0)
                      v39 = 65536.0;
                    if (v39 >= -65536.0)
                      v11 = v39;
                    else
                      v11 = -65536.0;
                    v43 = v30 * v40;
                    v44 = 0.0;
                    v45 = 0.0;
                    if (v43 != 0.0)
                    {
                      __e[0] = 0;
                      v46 = frexp(v43, __e);
                      v47 = ldexp(v46, 11);
                      v45 = ldexp(round(v47), __e[0] - 11);
                    }
                    v48 = (float)(v42 * a11) + v45;
                    if (v48 != 0.0)
                    {
                      __e[0] = 0;
                      v49 = frexp(v48, __e);
                      v50 = ldexp(v49, 11);
                      v44 = ldexp(round(v50), __e[0] - 11);
                    }
                    v51 = 0.0;
                    if ((float)(v11 * v44) != 0.0)
                    {
                      __e[0] = 0;
                      v52 = frexp((float)(v11 * v44), __e);
                      v53 = ldexp(v52, 11);
                      v51 = ldexp(round(v53), __e[0] - 11);
                    }
                    *(float *)__e = v51;
                    v54 = *(_QWORD *)(a8 + 24);
                    if (!v54)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v55 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v54 + 48))(v54, __e);
                    if (v55 == INFINITY)
                    {
                      LOBYTE(v56) = -1;
                    }
                    else if (v55 == -INFINITY)
                    {
                      LOBYTE(v56) = 0;
                    }
                    else
                    {
                      v57 = llroundf(v55);
                      if (v57 >= 255)
                        v57 = 255;
                      v56 = v57 & ~(v57 >> 31);
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v34;
        v32 = v59;
      }
      while (v34 != v59);
    }
    ++v31;
  }
  while (v31 != v58);
  v24 = __p;
  if (__p)
  {
LABEL_88:
    v83 = v24;
    operator delete(v24);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_20685E4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,signed char,signed char,signed char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  float v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  long double v46;
  double v47;
  float v48;
  long double v49;
  double v50;
  float v51;
  long double v52;
  double v53;
  uint64_t v54;
  float v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v79;
  void *__p;
  _BYTE *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v19 = a5[1];
    if (*a5 != v19)
    {
      v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5)
    }
  }
  if (a3)
  {
    v21 = a6[1];
    if (*a6 != v21)
    {
      v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v24 = __p;
  v25 = v83 - (_BYTE *)__p;
  if (v83 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = v85 - v84;
  if (v85 == v84)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v28 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v29 = 65536.0;
  if (a10 <= 65536.0)
    v29 = a10;
  if (v29 >= -65536.0)
    v30 = v29;
  else
    v30 = -65536.0;
  v58 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_90;
  v31 = 0;
  v32 = *((_QWORD *)__p + 1);
  v79 = *((_QWORD *)__p + 4);
  v64 = *(_QWORD *)v88;
  v65 = *((_QWORD *)__p + 3);
  v62 = *((_QWORD *)v88 + 2);
  v63 = *((_QWORD *)v88 + 1);
  v33 = *((_QWORD *)v88 + 4);
  v60 = *((_QWORD *)__p + 2);
  v61 = *((_QWORD *)v88 + 3);
  v75 = *(_QWORD *)v86;
  v74 = *((_QWORD *)v86 + 1);
  v73 = *((_QWORD *)v86 + 2);
  v72 = *((_QWORD *)v86 + 3);
  v71 = *((_QWORD *)v86 + 4);
  v69 = *((_QWORD *)v84 + 1);
  v70 = *(_QWORD *)v84;
  v67 = *((_QWORD *)v84 + 3);
  v68 = *((_QWORD *)v84 + 2);
  v66 = *((_QWORD *)v84 + 4);
  v59 = v32;
  do
  {
    if (v32)
    {
      v34 = 0;
      do
      {
        if (v60)
        {
          for (i = 0; i != v60; ++i)
          {
            if (v65)
            {
              for (j = 0; j != v65; ++j)
              {
                if (v79)
                {
                  for (k = 0; k != v79; ++k)
                  {
                    LOBYTE(v11) = *(_BYTE *)(a1
                    if (a2)
                      v38 = (float)*(char *)(a2
                    else
                      v38 = 0.0;
                    if (a3)
                      v39 = (float)*(char *)(a3
                    else
                      v39 = 1.0;
                    v40 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0)
                      v40 = 65536.0;
                    if (v38 <= 65536.0)
                      v41 = v38;
                    else
                      v41 = 65536.0;
                    if (v41 >= -65536.0)
                      v42 = v41;
                    else
                      v42 = -65536.0;
                    if (v39 > 65536.0)
                      v39 = 65536.0;
                    if (v39 >= -65536.0)
                      v11 = v39;
                    else
                      v11 = -65536.0;
                    v43 = v30 * v40;
                    v44 = 0.0;
                    v45 = 0.0;
                    if (v43 != 0.0)
                    {
                      __e[0] = 0;
                      v46 = frexp(v43, __e);
                      v47 = ldexp(v46, 11);
                      v45 = ldexp(round(v47), __e[0] - 11);
                    }
                    v48 = (float)(v42 * a11) + v45;
                    if (v48 != 0.0)
                    {
                      __e[0] = 0;
                      v49 = frexp(v48, __e);
                      v50 = ldexp(v49, 11);
                      v44 = ldexp(round(v50), __e[0] - 11);
                    }
                    v51 = 0.0;
                    if ((float)(v11 * v44) != 0.0)
                    {
                      __e[0] = 0;
                      v52 = frexp((float)(v11 * v44), __e);
                      v53 = ldexp(v52, 11);
                      v51 = ldexp(round(v53), __e[0] - 11);
                    }
                    *(float *)__e = v51;
                    v54 = *(_QWORD *)(a8 + 24);
                    if (!v54)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v55 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v54 + 48))(v54, __e);
                    if (v55 == INFINITY)
                    {
                      v56 = 127;
                    }
                    else if (v55 == -INFINITY)
                    {
                      v56 = 0x80;
                    }
                    else
                    {
                      v57 = llroundf(v55);
                      if (v57 >= 127)
                        v57 = 127;
                      if (v57 <= -128)
                        v56 = 0x80;
                      else
                        v56 = v57;
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v34;
        v32 = v59;
      }
      while (v34 != v59);
    }
    ++v31;
  }
  while (v31 != v58);
  v24 = __p;
  if (__p)
  {
LABEL_90:
    v83 = v24;
    operator delete(v24);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_20685EC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,MIL::Fp16,MIL::Fp16,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  long double v48;
  double v49;
  float v50;
  long double v51;
  double v52;
  float v53;
  long double v54;
  double v55;
  uint64_t v56;
  MIL::Fp16 *v57;
  float v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v81;
  void *__p;
  _BYTE *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v85 - (_BYTE *)__p;
  if (v85 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v91 - v90;
  if (v91 == v90)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v60 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_83;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v81 = *((_QWORD *)__p + 4);
  v66 = *(_QWORD *)v90;
  v67 = *((_QWORD *)__p + 3);
  v64 = *((_QWORD *)v90 + 2);
  v65 = *((_QWORD *)v90 + 1);
  v32 = *((_QWORD *)v90 + 4);
  v62 = *((_QWORD *)__p + 2);
  v63 = *((_QWORD *)v90 + 3);
  v77 = *(_QWORD *)v88;
  v76 = *((_QWORD *)v88 + 1);
  v75 = *((_QWORD *)v88 + 2);
  v74 = *((_QWORD *)v88 + 3);
  v73 = *((_QWORD *)v88 + 4);
  v71 = *((_QWORD *)v86 + 1);
  v72 = *(_QWORD *)v86;
  v69 = *((_QWORD *)v86 + 3);
  v70 = *((_QWORD *)v86 + 2);
  v68 = *((_QWORD *)v86 + 4);
  v61 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v62)
        {
          for (i = 0; i != v62; ++i)
          {
            if (v67)
            {
              for (j = 0; j != v67; ++j)
              {
                if (v81)
                {
                  for (k = 0; k != v81; ++k)
                  {
                    v37 = *(char *)(a1
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      v39 = v38;
                    }
                    else
                    {
                      v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      v40 = 1.0;
                    }
                    v41 = (float)v37;
                    if ((float)v37 > 65536.0)
                      v41 = 65536.0;
                    if (v41 < -65536.0)
                      v41 = -65536.0;
                    if (v39 <= 65536.0)
                      v42 = v39;
                    else
                      v42 = 65536.0;
                    if (v42 >= -65536.0)
                      v43 = v42;
                    else
                      v43 = -65536.0;
                    if (v40 > 65536.0)
                      v40 = 65536.0;
                    if (v40 >= -65536.0)
                      v44 = v40;
                    else
                      v44 = -65536.0;
                    v45 = v29 * v41;
                    v46 = 0.0;
                    v47 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      v48 = frexp(v45, __e);
                      v49 = ldexp(v48, 11);
                      v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    v50 = (float)(v43 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      v51 = frexp(v50, __e);
                      v52 = ldexp(v51, 11);
                      v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    v53 = 0.0;
                    if ((float)(v44 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      v54 = frexp((float)(v44 * v46), __e);
                      v55 = ldexp(v54, 11);
                      v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    *(float *)__e = v53;
                    v56 = *(_QWORD *)(a8 + 24);
                    if (!v56)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v57 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v56 + 48))(v56, __e);
                    v59 = MIL::Fp16::FromFloat(v57, v58);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v61;
      }
      while (v33 != v61);
    }
    ++v30;
  }
  while (v30 != v60);
  v23 = __p;
  if (__p)
  {
LABEL_83:
    v85 = v23;
    operator delete(v23);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
}

void sub_20685F434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,MIL::Fp16,MIL::Fp16,unsigned char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  long double v48;
  double v49;
  float v50;
  long double v51;
  double v52;
  float v53;
  long double v54;
  double v55;
  uint64_t v56;
  float v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v81;
  void *__p;
  _BYTE *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v85 - (_BYTE *)__p;
  if (v85 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v91 - v90;
  if (v91 == v90)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v60 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_90;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v81 = *((_QWORD *)__p + 4);
  v66 = *(_QWORD *)v90;
  v67 = *((_QWORD *)__p + 3);
  v64 = *((_QWORD *)v90 + 2);
  v65 = *((_QWORD *)v90 + 1);
  v32 = *((_QWORD *)v90 + 4);
  v62 = *((_QWORD *)__p + 2);
  v63 = *((_QWORD *)v90 + 3);
  v77 = *(_QWORD *)v88;
  v76 = *((_QWORD *)v88 + 1);
  v75 = *((_QWORD *)v88 + 2);
  v74 = *((_QWORD *)v88 + 3);
  v73 = *((_QWORD *)v88 + 4);
  v71 = *((_QWORD *)v86 + 1);
  v72 = *(_QWORD *)v86;
  v69 = *((_QWORD *)v86 + 3);
  v70 = *((_QWORD *)v86 + 2);
  v68 = *((_QWORD *)v86 + 4);
  v61 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v62)
        {
          for (i = 0; i != v62; ++i)
          {
            if (v67)
            {
              for (j = 0; j != v67; ++j)
              {
                if (v81)
                {
                  for (k = 0; k != v81; ++k)
                  {
                    v37 = *(char *)(a1
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      v39 = v38;
                    }
                    else
                    {
                      v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      v40 = 1.0;
                    }
                    v41 = (float)v37;
                    if ((float)v37 > 65536.0)
                      v41 = 65536.0;
                    if (v41 < -65536.0)
                      v41 = -65536.0;
                    if (v39 <= 65536.0)
                      v42 = v39;
                    else
                      v42 = 65536.0;
                    if (v42 >= -65536.0)
                      v43 = v42;
                    else
                      v43 = -65536.0;
                    if (v40 > 65536.0)
                      v40 = 65536.0;
                    if (v40 >= -65536.0)
                      v44 = v40;
                    else
                      v44 = -65536.0;
                    v45 = v29 * v41;
                    v46 = 0.0;
                    v47 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      v48 = frexp(v45, __e);
                      v49 = ldexp(v48, 11);
                      v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    v50 = (float)(v43 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      v51 = frexp(v50, __e);
                      v52 = ldexp(v51, 11);
                      v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    v53 = 0.0;
                    if ((float)(v44 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      v54 = frexp((float)(v44 * v46), __e);
                      v55 = ldexp(v54, 11);
                      v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    *(float *)__e = v53;
                    v56 = *(_QWORD *)(a8 + 24);
                    if (!v56)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v57 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v56 + 48))(v56, __e);
                    if (v57 == INFINITY)
                    {
                      LOBYTE(v58) = -1;
                    }
                    else if (v57 == -INFINITY)
                    {
                      LOBYTE(v58) = 0;
                    }
                    else
                    {
                      v59 = llroundf(v57);
                      if (v59 >= 255)
                        v59 = 255;
                      v58 = v59 & ~(v59 >> 31);
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v61;
      }
      while (v33 != v61);
    }
    ++v30;
  }
  while (v30 != v60);
  v23 = __p;
  if (__p)
  {
LABEL_90:
    v85 = v23;
    operator delete(v23);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
}

void sub_20685FC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,MIL::Fp16,MIL::Fp16,signed char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  long double v48;
  double v49;
  float v50;
  long double v51;
  double v52;
  float v53;
  long double v54;
  double v55;
  uint64_t v56;
  float v57;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v81;
  void *__p;
  _BYTE *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v85 - (_BYTE *)__p;
  if (v85 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v91 - v90;
  if (v91 == v90)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v60 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_92;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v81 = *((_QWORD *)__p + 4);
  v66 = *(_QWORD *)v90;
  v67 = *((_QWORD *)__p + 3);
  v64 = *((_QWORD *)v90 + 2);
  v65 = *((_QWORD *)v90 + 1);
  v32 = *((_QWORD *)v90 + 4);
  v62 = *((_QWORD *)__p + 2);
  v63 = *((_QWORD *)v90 + 3);
  v77 = *(_QWORD *)v88;
  v76 = *((_QWORD *)v88 + 1);
  v75 = *((_QWORD *)v88 + 2);
  v74 = *((_QWORD *)v88 + 3);
  v73 = *((_QWORD *)v88 + 4);
  v71 = *((_QWORD *)v86 + 1);
  v72 = *(_QWORD *)v86;
  v69 = *((_QWORD *)v86 + 3);
  v70 = *((_QWORD *)v86 + 2);
  v68 = *((_QWORD *)v86 + 4);
  v61 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v62)
        {
          for (i = 0; i != v62; ++i)
          {
            if (v67)
            {
              for (j = 0; j != v67; ++j)
              {
                if (v81)
                {
                  for (k = 0; k != v81; ++k)
                  {
                    v37 = *(char *)(a1
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      v39 = v38;
                    }
                    else
                    {
                      v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      v40 = 1.0;
                    }
                    v41 = (float)v37;
                    if ((float)v37 > 65536.0)
                      v41 = 65536.0;
                    if (v41 < -65536.0)
                      v41 = -65536.0;
                    if (v39 <= 65536.0)
                      v42 = v39;
                    else
                      v42 = 65536.0;
                    if (v42 >= -65536.0)
                      v43 = v42;
                    else
                      v43 = -65536.0;
                    if (v40 > 65536.0)
                      v40 = 65536.0;
                    if (v40 >= -65536.0)
                      v44 = v40;
                    else
                      v44 = -65536.0;
                    v45 = v29 * v41;
                    v46 = 0.0;
                    v47 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      v48 = frexp(v45, __e);
                      v49 = ldexp(v48, 11);
                      v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    v50 = (float)(v43 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      v51 = frexp(v50, __e);
                      v52 = ldexp(v51, 11);
                      v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    v53 = 0.0;
                    if ((float)(v44 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      v54 = frexp((float)(v44 * v46), __e);
                      v55 = ldexp(v54, 11);
                      v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    *(float *)__e = v53;
                    v56 = *(_QWORD *)(a8 + 24);
                    if (!v56)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v57 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v56 + 48))(v56, __e);
                    if (v57 == INFINITY)
                    {
                      v58 = 127;
                    }
                    else if (v57 == -INFINITY)
                    {
                      v58 = 0x80;
                    }
                    else
                    {
                      v59 = llroundf(v57);
                      if (v59 >= 127)
                        v59 = 127;
                      if (v59 <= -128)
                        v58 = 0x80;
                      else
                        v58 = v59;
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v61;
      }
      while (v33 != v61);
    }
    ++v30;
  }
  while (v30 != v60);
  v23 = __p;
  if (__p)
  {
LABEL_92:
    v85 = v23;
    operator delete(v23);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
}

void sub_206860408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,unsigned char,unsigned char,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  int v37;
  unsigned int v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  long double v48;
  double v49;
  float v50;
  long double v51;
  double v52;
  float v53;
  long double v54;
  double v55;
  uint64_t v56;
  MIL::Fp16 *v57;
  float v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v81;
  void *__p;
  _BYTE *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v85 - (_BYTE *)__p;
  if (v85 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v91 - v90;
  if (v91 == v90)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v60 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_78;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v81 = *((_QWORD *)__p + 4);
  v66 = *(_QWORD *)v90;
  v67 = *((_QWORD *)__p + 3);
  v64 = *((_QWORD *)v90 + 2);
  v65 = *((_QWORD *)v90 + 1);
  v32 = *((_QWORD *)v90 + 4);
  v62 = *((_QWORD *)__p + 2);
  v63 = *((_QWORD *)v90 + 3);
  v77 = *(_QWORD *)v88;
  v76 = *((_QWORD *)v88 + 1);
  v75 = *((_QWORD *)v88 + 2);
  v74 = *((_QWORD *)v88 + 3);
  v73 = *((_QWORD *)v88 + 4);
  v71 = *((_QWORD *)v86 + 1);
  v72 = *(_QWORD *)v86;
  v69 = *((_QWORD *)v86 + 3);
  v70 = *((_QWORD *)v86 + 2);
  v68 = *((_QWORD *)v86 + 4);
  v61 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v62)
        {
          for (i = 0; i != v62; ++i)
          {
            if (v67)
            {
              for (j = 0; j != v67; ++j)
              {
                if (v81)
                {
                  for (k = 0; k != v81; ++k)
                  {
                    v37 = *(char *)(a1
                    if (a2)
                    {
                      LOBYTE(v38) = *(_BYTE *)(a2
                      v39 = (float)v38;
                    }
                    else
                    {
                      v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v40) = *(_BYTE *)(a3
                      v41 = (float)v40;
                    }
                    else
                    {
                      v41 = 1.0;
                    }
                    v42 = (float)v37;
                    if ((float)v37 > 65536.0)
                      v42 = 65536.0;
                    if (v42 < -65536.0)
                      v42 = -65536.0;
                    if (v39 <= 65536.0)
                      v43 = v39;
                    else
                      v43 = 65536.0;
                    if (v41 <= 65536.0)
                      v44 = v41;
                    else
                      v44 = 65536.0;
                    v45 = v29 * v42;
                    v46 = 0.0;
                    v47 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      v48 = frexp(v45, __e);
                      v49 = ldexp(v48, 11);
                      v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    v50 = (float)(v43 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      v51 = frexp(v50, __e);
                      v52 = ldexp(v51, 11);
                      v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    v53 = 0.0;
                    if ((float)(v44 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      v54 = frexp((float)(v44 * v46), __e);
                      v55 = ldexp(v54, 11);
                      v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    *(float *)__e = v53;
                    v56 = *(_QWORD *)(a8 + 24);
                    if (!v56)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v57 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v56 + 48))(v56, __e);
                    v59 = MIL::Fp16::FromFloat(v57, v58);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v61;
      }
      while (v33 != v61);
    }
    ++v30;
  }
  while (v30 != v60);
  v23 = __p;
  if (__p)
  {
LABEL_78:
    v85 = v23;
    operator delete(v23);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
}

void sub_206860B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,unsigned char,unsigned char,unsigned char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  int v37;
  unsigned int v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  long double v48;
  double v49;
  float v50;
  long double v51;
  double v52;
  float v53;
  long double v54;
  double v55;
  uint64_t v56;
  float v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v81;
  void *__p;
  _BYTE *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v85 - (_BYTE *)__p;
  if (v85 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v91 - v90;
  if (v91 == v90)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v60 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_85;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v81 = *((_QWORD *)__p + 4);
  v66 = *(_QWORD *)v90;
  v67 = *((_QWORD *)__p + 3);
  v64 = *((_QWORD *)v90 + 2);
  v65 = *((_QWORD *)v90 + 1);
  v32 = *((_QWORD *)v90 + 4);
  v62 = *((_QWORD *)__p + 2);
  v63 = *((_QWORD *)v90 + 3);
  v77 = *(_QWORD *)v88;
  v76 = *((_QWORD *)v88 + 1);
  v75 = *((_QWORD *)v88 + 2);
  v74 = *((_QWORD *)v88 + 3);
  v73 = *((_QWORD *)v88 + 4);
  v71 = *((_QWORD *)v86 + 1);
  v72 = *(_QWORD *)v86;
  v69 = *((_QWORD *)v86 + 3);
  v70 = *((_QWORD *)v86 + 2);
  v68 = *((_QWORD *)v86 + 4);
  v61 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v62)
        {
          for (i = 0; i != v62; ++i)
          {
            if (v67)
            {
              for (j = 0; j != v67; ++j)
              {
                if (v81)
                {
                  for (k = 0; k != v81; ++k)
                  {
                    v37 = *(char *)(a1
                    if (a2)
                    {
                      LOBYTE(v38) = *(_BYTE *)(a2
                      v39 = (float)v38;
                    }
                    else
                    {
                      v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v40) = *(_BYTE *)(a3
                      v41 = (float)v40;
                    }
                    else
                    {
                      v41 = 1.0;
                    }
                    v42 = (float)v37;
                    if ((float)v37 > 65536.0)
                      v42 = 65536.0;
                    if (v42 < -65536.0)
                      v42 = -65536.0;
                    if (v39 <= 65536.0)
                      v43 = v39;
                    else
                      v43 = 65536.0;
                    if (v41 <= 65536.0)
                      v44 = v41;
                    else
                      v44 = 65536.0;
                    v45 = v29 * v42;
                    v46 = 0.0;
                    v47 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      v48 = frexp(v45, __e);
                      v49 = ldexp(v48, 11);
                      v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    v50 = (float)(v43 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      v51 = frexp(v50, __e);
                      v52 = ldexp(v51, 11);
                      v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    v53 = 0.0;
                    if ((float)(v44 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      v54 = frexp((float)(v44 * v46), __e);
                      v55 = ldexp(v54, 11);
                      v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    *(float *)__e = v53;
                    v56 = *(_QWORD *)(a8 + 24);
                    if (!v56)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v57 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v56 + 48))(v56, __e);
                    if (v57 == INFINITY)
                    {
                      LOBYTE(v58) = -1;
                    }
                    else if (v57 == -INFINITY)
                    {
                      LOBYTE(v58) = 0;
                    }
                    else
                    {
                      v59 = llroundf(v57);
                      if (v59 >= 255)
                        v59 = 255;
                      v58 = v59 & ~(v59 >> 31);
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v61;
      }
      while (v33 != v61);
    }
    ++v30;
  }
  while (v30 != v60);
  v23 = __p;
  if (__p)
  {
LABEL_85:
    v85 = v23;
    operator delete(v23);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
}

void sub_206861350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,unsigned char,unsigned char,signed char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  int v37;
  unsigned int v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  long double v48;
  double v49;
  float v50;
  long double v51;
  double v52;
  float v53;
  long double v54;
  double v55;
  uint64_t v56;
  float v57;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v81;
  void *__p;
  _BYTE *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v85 - (_BYTE *)__p;
  if (v85 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v91 - v90;
  if (v91 == v90)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v89 - v88;
  if (v89 == v88)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v87 - v86;
  if (v87 == v86)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v60 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_87;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v81 = *((_QWORD *)__p + 4);
  v66 = *(_QWORD *)v90;
  v67 = *((_QWORD *)__p + 3);
  v64 = *((_QWORD *)v90 + 2);
  v65 = *((_QWORD *)v90 + 1);
  v32 = *((_QWORD *)v90 + 4);
  v62 = *((_QWORD *)__p + 2);
  v63 = *((_QWORD *)v90 + 3);
  v77 = *(_QWORD *)v88;
  v76 = *((_QWORD *)v88 + 1);
  v75 = *((_QWORD *)v88 + 2);
  v74 = *((_QWORD *)v88 + 3);
  v73 = *((_QWORD *)v88 + 4);
  v71 = *((_QWORD *)v86 + 1);
  v72 = *(_QWORD *)v86;
  v69 = *((_QWORD *)v86 + 3);
  v70 = *((_QWORD *)v86 + 2);
  v68 = *((_QWORD *)v86 + 4);
  v61 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v62)
        {
          for (i = 0; i != v62; ++i)
          {
            if (v67)
            {
              for (j = 0; j != v67; ++j)
              {
                if (v81)
                {
                  for (k = 0; k != v81; ++k)
                  {
                    v37 = *(char *)(a1
                    if (a2)
                    {
                      LOBYTE(v38) = *(_BYTE *)(a2
                      v39 = (float)v38;
                    }
                    else
                    {
                      v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v40) = *(_BYTE *)(a3
                      v41 = (float)v40;
                    }
                    else
                    {
                      v41 = 1.0;
                    }
                    v42 = (float)v37;
                    if ((float)v37 > 65536.0)
                      v42 = 65536.0;
                    if (v42 < -65536.0)
                      v42 = -65536.0;
                    if (v39 <= 65536.0)
                      v43 = v39;
                    else
                      v43 = 65536.0;
                    if (v41 <= 65536.0)
                      v44 = v41;
                    else
                      v44 = 65536.0;
                    v45 = v29 * v42;
                    v46 = 0.0;
                    v47 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      v48 = frexp(v45, __e);
                      v49 = ldexp(v48, 11);
                      v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    v50 = (float)(v43 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      v51 = frexp(v50, __e);
                      v52 = ldexp(v51, 11);
                      v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    v53 = 0.0;
                    if ((float)(v44 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      v54 = frexp((float)(v44 * v46), __e);
                      v55 = ldexp(v54, 11);
                      v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    *(float *)__e = v53;
                    v56 = *(_QWORD *)(a8 + 24);
                    if (!v56)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v57 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v56 + 48))(v56, __e);
                    if (v57 == INFINITY)
                    {
                      v58 = 127;
                    }
                    else if (v57 == -INFINITY)
                    {
                      v58 = 0x80;
                    }
                    else
                    {
                      v59 = llroundf(v57);
                      if (v59 >= 127)
                        v59 = 127;
                      if (v59 <= -128)
                        v58 = 0x80;
                      else
                        v58 = v59;
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v61;
      }
      while (v33 != v61);
    }
    ++v30;
  }
  while (v30 != v60);
  v23 = __p;
  if (__p)
  {
LABEL_87:
    v85 = v23;
    operator delete(v23);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
}

void sub_206861B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,signed char,signed char,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  long double v47;
  double v48;
  float v49;
  long double v50;
  double v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  MIL::Fp16 *v56;
  float v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v80;
  void *__p;
  _BYTE *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v84 - (_BYTE *)__p;
  if (v84 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v90 - v89;
  if (v90 == v89)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v88 - v87;
  if (v88 == v87)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v86 - v85;
  if (v86 == v85)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v59 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_83;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v80 = *((_QWORD *)__p + 4);
  v65 = *(_QWORD *)v89;
  v66 = *((_QWORD *)__p + 3);
  v63 = *((_QWORD *)v89 + 2);
  v64 = *((_QWORD *)v89 + 1);
  v32 = *((_QWORD *)v89 + 4);
  v61 = *((_QWORD *)__p + 2);
  v62 = *((_QWORD *)v89 + 3);
  v76 = *(_QWORD *)v87;
  v75 = *((_QWORD *)v87 + 1);
  v74 = *((_QWORD *)v87 + 2);
  v73 = *((_QWORD *)v87 + 3);
  v72 = *((_QWORD *)v87 + 4);
  v70 = *((_QWORD *)v85 + 1);
  v71 = *(_QWORD *)v85;
  v68 = *((_QWORD *)v85 + 3);
  v69 = *((_QWORD *)v85 + 2);
  v67 = *((_QWORD *)v85 + 4);
  v60 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v61)
        {
          for (i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (k = 0; k != v80; ++k)
                  {
                    v37 = *(char *)(a1
                    if (a2)
                      v38 = (float)*(char *)(a2
                    else
                      v38 = 0.0;
                    if (a3)
                      v39 = (float)*(char *)(a3
                    else
                      v39 = 1.0;
                    v40 = (float)v37;
                    if ((float)v37 > 65536.0)
                      v40 = 65536.0;
                    if (v40 < -65536.0)
                      v40 = -65536.0;
                    if (v38 <= 65536.0)
                      v41 = v38;
                    else
                      v41 = 65536.0;
                    if (v41 >= -65536.0)
                      v42 = v41;
                    else
                      v42 = -65536.0;
                    if (v39 > 65536.0)
                      v39 = 65536.0;
                    if (v39 >= -65536.0)
                      v43 = v39;
                    else
                      v43 = -65536.0;
                    v44 = v29 * v40;
                    v45 = 0.0;
                    v46 = 0.0;
                    if (v44 != 0.0)
                    {
                      __e[0] = 0;
                      v47 = frexp(v44, __e);
                      v48 = ldexp(v47, 11);
                      v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    v49 = (float)(v42 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      v50 = frexp(v49, __e);
                      v51 = ldexp(v50, 11);
                      v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    v52 = 0.0;
                    if ((float)(v43 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      v53 = frexp((float)(v43 * v45), __e);
                      v54 = ldexp(v53, 11);
                      v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    *(float *)__e = v52;
                    v55 = *(_QWORD *)(a8 + 24);
                    if (!v55)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v56 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, __e);
                    v58 = MIL::Fp16::FromFloat(v56, v57);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_83:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_2068622AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,signed char,signed char,unsigned char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  long double v47;
  double v48;
  float v49;
  long double v50;
  double v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  float v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v80;
  void *__p;
  _BYTE *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v84 - (_BYTE *)__p;
  if (v84 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v90 - v89;
  if (v90 == v89)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v88 - v87;
  if (v88 == v87)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v86 - v85;
  if (v86 == v85)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v59 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_90;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v80 = *((_QWORD *)__p + 4);
  v65 = *(_QWORD *)v89;
  v66 = *((_QWORD *)__p + 3);
  v63 = *((_QWORD *)v89 + 2);
  v64 = *((_QWORD *)v89 + 1);
  v32 = *((_QWORD *)v89 + 4);
  v61 = *((_QWORD *)__p + 2);
  v62 = *((_QWORD *)v89 + 3);
  v76 = *(_QWORD *)v87;
  v75 = *((_QWORD *)v87 + 1);
  v74 = *((_QWORD *)v87 + 2);
  v73 = *((_QWORD *)v87 + 3);
  v72 = *((_QWORD *)v87 + 4);
  v70 = *((_QWORD *)v85 + 1);
  v71 = *(_QWORD *)v85;
  v68 = *((_QWORD *)v85 + 3);
  v69 = *((_QWORD *)v85 + 2);
  v67 = *((_QWORD *)v85 + 4);
  v60 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v61)
        {
          for (i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (k = 0; k != v80; ++k)
                  {
                    v37 = *(char *)(a1
                    if (a2)
                      v38 = (float)*(char *)(a2
                    else
                      v38 = 0.0;
                    if (a3)
                      v39 = (float)*(char *)(a3
                    else
                      v39 = 1.0;
                    v40 = (float)v37;
                    if ((float)v37 > 65536.0)
                      v40 = 65536.0;
                    if (v40 < -65536.0)
                      v40 = -65536.0;
                    if (v38 <= 65536.0)
                      v41 = v38;
                    else
                      v41 = 65536.0;
                    if (v41 >= -65536.0)
                      v42 = v41;
                    else
                      v42 = -65536.0;
                    if (v39 > 65536.0)
                      v39 = 65536.0;
                    if (v39 >= -65536.0)
                      v43 = v39;
                    else
                      v43 = -65536.0;
                    v44 = v29 * v40;
                    v45 = 0.0;
                    v46 = 0.0;
                    if (v44 != 0.0)
                    {
                      __e[0] = 0;
                      v47 = frexp(v44, __e);
                      v48 = ldexp(v47, 11);
                      v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    v49 = (float)(v42 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      v50 = frexp(v49, __e);
                      v51 = ldexp(v50, 11);
                      v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    v52 = 0.0;
                    if ((float)(v43 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      v53 = frexp((float)(v43 * v45), __e);
                      v54 = ldexp(v53, 11);
                      v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    *(float *)__e = v52;
                    v55 = *(_QWORD *)(a8 + 24);
                    if (!v55)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v56 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, __e);
                    if (v56 == INFINITY)
                    {
                      LOBYTE(v57) = -1;
                    }
                    else if (v56 == -INFINITY)
                    {
                      LOBYTE(v57) = 0;
                    }
                    else
                    {
                      v58 = llroundf(v56);
                      if (v58 >= 255)
                        v58 = 255;
                      v57 = v58 & ~(v58 >> 31);
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_90:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_206862A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,signed char,signed char,signed char,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t NumberOfElementsFromStaticTensorShape;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  long double v47;
  double v48;
  float v49;
  long double v50;
  double v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  float v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v80;
  void *__p;
  _BYTE *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  int __e[3];

  if (a11 != 1.0 && a11 != -1.0)
  if (a2)
  {
    v18 = a5[1];
    if (*a5 != v18)
    {
      v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5)
    }
  }
  if (a3)
  {
    v20 = a6[1];
    if (*a6 != v20)
    {
      v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6)
    }
  }
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  v24 = v84 - (_BYTE *)__p;
  if (v84 == __p)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v24 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v25 = v90 - v89;
  if (v90 == v89)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v25 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v26 = v88 - v87;
  if (v88 == v87)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v26 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v86 - v85;
  if (v86 == v85)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x18)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v27 <= 0x20)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = 65536.0;
  if (a10 <= 65536.0)
    v28 = a10;
  if (v28 >= -65536.0)
    v29 = v28;
  else
    v29 = -65536.0;
  v59 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_92;
  v30 = 0;
  v31 = *((_QWORD *)__p + 1);
  v80 = *((_QWORD *)__p + 4);
  v65 = *(_QWORD *)v89;
  v66 = *((_QWORD *)__p + 3);
  v63 = *((_QWORD *)v89 + 2);
  v64 = *((_QWORD *)v89 + 1);
  v32 = *((_QWORD *)v89 + 4);
  v61 = *((_QWORD *)__p + 2);
  v62 = *((_QWORD *)v89 + 3);
  v76 = *(_QWORD *)v87;
  v75 = *((_QWORD *)v87 + 1);
  v74 = *((_QWORD *)v87 + 2);
  v73 = *((_QWORD *)v87 + 3);
  v72 = *((_QWORD *)v87 + 4);
  v70 = *((_QWORD *)v85 + 1);
  v71 = *(_QWORD *)v85;
  v68 = *((_QWORD *)v85 + 3);
  v69 = *((_QWORD *)v85 + 2);
  v67 = *((_QWORD *)v85 + 4);
  v60 = v31;
  do
  {
    if (v31)
    {
      v33 = 0;
      do
      {
        if (v61)
        {
          for (i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (k = 0; k != v80; ++k)
                  {
                    v37 = *(char *)(a1
                    if (a2)
                      v38 = (float)*(char *)(a2
                    else
                      v38 = 0.0;
                    if (a3)
                      v39 = (float)*(char *)(a3
                    else
                      v39 = 1.0;
                    v40 = (float)v37;
                    if ((float)v37 > 65536.0)
                      v40 = 65536.0;
                    if (v40 < -65536.0)
                      v40 = -65536.0;
                    if (v38 <= 65536.0)
                      v41 = v38;
                    else
                      v41 = 65536.0;
                    if (v41 >= -65536.0)
                      v42 = v41;
                    else
                      v42 = -65536.0;
                    if (v39 > 65536.0)
                      v39 = 65536.0;
                    if (v39 >= -65536.0)
                      v43 = v39;
                    else
                      v43 = -65536.0;
                    v44 = v29 * v40;
                    v45 = 0.0;
                    v46 = 0.0;
                    if (v44 != 0.0)
                    {
                      __e[0] = 0;
                      v47 = frexp(v44, __e);
                      v48 = ldexp(v47, 11);
                      v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    v49 = (float)(v42 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      v50 = frexp(v49, __e);
                      v51 = ldexp(v50, 11);
                      v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    v52 = 0.0;
                    if ((float)(v43 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      v53 = frexp((float)(v43 * v45), __e);
                      v54 = ldexp(v53, 11);
                      v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    *(float *)__e = v52;
                    v55 = *(_QWORD *)(a8 + 24);
                    if (!v55)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v56 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, __e);
                    if (v56 == INFINITY)
                    {
                      v57 = 127;
                    }
                    else if (v56 == -INFINITY)
                    {
                      v57 = 0x80;
                    }
                    else
                    {
                      v58 = llroundf(v56);
                      if (v58 >= 127)
                        v58 = 127;
                      if (v58 <= -128)
                        v57 = 0x80;
                      else
                        v57 = v58;
                    }
                    *(_BYTE *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_92:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_206863258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(void **)a30;
  if (*(_QWORD *)a30)
  {
    *(_QWORD *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::PeElementWiseBinaryParamValues::~PeElementWiseBinaryParamValues(void **this)
{
  void *v2;

  if (*((_BYTE *)this + 128) && *((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((_BYTE *)this + 80))
  {
    v2 = this[7];
    if (v2)
    {
      this[8] = v2;
      operator delete(v2);
    }
  }
  if (*((_BYTE *)this + 48))
  {
    if (*((char *)this + 47) < 0)
      operator delete(this[3]);
  }
}

void MIL::ANEMachineIR::Interpreter::PeAddCpu::Run(ANEMachineIR::Validators *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  uint64_t (**v21)();
  uint64_t InterpretedTensorValue;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  MIL::IRValueType *OutputType;
  uint64_t v29;
  int v30;
  ANEMachineIR::Utils *v31;
  const MIL::IRTensorValueType *v32;
  ANEMachineIR::Utils *v33;
  const MIL::IRTensorValueType *v34;
  MIL::IRValueType *v35;
  ANEMachineIR::Utils *v36;
  const MIL::IRTensorValueType *v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t Data;
  float v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  float v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float v106;
  float v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  float v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  float v121;
  float v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  float v131;
  float v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float v136;
  float v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  float v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  float v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float v151;
  float v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float v156;
  float v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  float v161;
  float v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  float v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  float v171;
  float v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  unsigned __int8 *v176;
  MIL::IRValueType *v177;
  void **v178;
  _QWORD *v179;
  uint64_t v180;
  unsigned __int8 *v181;
  MIL::IRValueType *v182;
  void **v183;
  _QWORD *v184;
  uint64_t v185;
  unsigned __int8 *v186;
  MIL::IRValueType *v187;
  void **v188;
  _QWORD *v189;
  uint64_t v190;
  unsigned __int8 *v191;
  MIL::IRValueType *v192;
  void **v193;
  _QWORD *v194;
  uint64_t v195;
  unsigned __int8 *v196;
  MIL::IRValueType *v197;
  void **v198;
  _QWORD *v199;
  uint64_t v200;
  unsigned __int8 *v201;
  MIL::IRValueType *v202;
  void **v203;
  _QWORD *v204;
  uint64_t v205;
  unsigned __int8 *v206;
  MIL::IRValueType *v207;
  void **v208;
  _QWORD *v209;
  uint64_t v210;
  unsigned __int8 *v211;
  MIL::IRValueType *v212;
  void **v213;
  _QWORD *v214;
  uint64_t v215;
  unsigned __int8 *v216;
  MIL::IRValueType *v217;
  void **v218;
  _QWORD *v219;
  uint64_t v220;
  unsigned __int8 *v221;
  MIL::IRValueType *v222;
  void **v223;
  _QWORD *v224;
  uint64_t v225;
  unsigned __int8 *v226;
  MIL::IRValueType *v227;
  void **v228;
  _QWORD *v229;
  uint64_t v230;
  unsigned __int8 *v231;
  MIL::IRValueType *v232;
  void **v233;
  _QWORD *v234;
  uint64_t v235;
  unsigned __int8 *v236;
  MIL::IRValueType *v237;
  void **v238;
  _QWORD *v239;
  uint64_t v240;
  unsigned __int8 *v241;
  MIL::IRValueType *v242;
  void **v243;
  _QWORD *v244;
  uint64_t v245;
  unsigned __int8 *v246;
  MIL::IRValueType *v247;
  void **v248;
  _QWORD *v249;
  uint64_t v250;
  unsigned __int8 *v251;
  MIL::IRValueType *v252;
  void **v253;
  _QWORD *v254;
  uint64_t v255;
  unsigned __int8 *v256;
  MIL::IRValueType *v257;
  void **v258;
  _QWORD *v259;
  uint64_t v260;
  unsigned __int8 *v261;
  MIL::IRValueType *v262;
  void **v263;
  _QWORD *v264;
  uint64_t v265;
  unsigned __int8 *v266;
  MIL::IRValueType *v267;
  void **v268;
  _QWORD *v269;
  uint64_t v270;
  unsigned __int8 *v271;
  MIL::IRValueType *v272;
  void **v273;
  _QWORD *v274;
  uint64_t v275;
  unsigned __int8 *v276;
  MIL::IRValueType *v277;
  void **v278;
  _QWORD *v279;
  uint64_t v280;
  unsigned __int8 *v281;
  MIL::IRValueType *v282;
  void **v283;
  _QWORD *v284;
  uint64_t v285;
  unsigned __int8 *v286;
  MIL::IRValueType *v287;
  void **v288;
  _QWORD *v289;
  uint64_t v290;
  unsigned __int8 *v291;
  MIL::IRValueType *v292;
  void **v293;
  _QWORD *v294;
  uint64_t v295;
  unsigned __int8 *v296;
  MIL::IRValueType *v297;
  void **v298;
  _QWORD *v299;
  uint64_t v300;
  unsigned __int8 *v301;
  MIL::IRValueType *v302;
  void **v303;
  _QWORD *v304;
  uint64_t v305;
  unsigned __int8 *v306;
  MIL::IRValueType *v307;
  void **v308;
  uint64_t (***v309)();
  uint64_t v310;
  unsigned __int8 *v311;
  unsigned __int8 *v312;
  uint64_t v313;
  void *v314[3];
  void *v315[3];
  void *v316[3];
  void *v317[3];
  std::string v318;
  uint64_t v319;
  std::string v320;
  uint64_t (**v321)();
  char v322;
  char v323;
  void *v324;
  void *v325;
  char v326;
  char v327;
  char v328;
  char v329;
  char v330;
  void *__p;
  char v332;
  char v333;
  void **v334;
  _BYTE v335[24];
  _BYTE *v336;
  _BYTE v337[24];
  _BYTE *v338;
  _BYTE v339[24];
  _BYTE *v340;
  _BYTE v341[24];
  _BYTE *v342;
  _BYTE v343[24];
  _BYTE *v344;
  _BYTE v345[24];
  _BYTE *v346;
  _BYTE v347[24];
  _BYTE *v348;
  _BYTE v349[24];
  _BYTE *v350;
  _BYTE v351[24];
  _BYTE *v352;
  _BYTE v353[24];
  _BYTE *v354;
  _BYTE v355[24];
  _BYTE *v356;
  _BYTE v357[24];
  _BYTE *v358;
  _BYTE v359[24];
  _BYTE *v360;
  _BYTE v361[24];
  _BYTE *v362;
  _BYTE v363[24];
  _BYTE *v364;
  _BYTE v365[24];
  _BYTE *v366;
  _BYTE v367[24];
  _BYTE *v368;
  _BYTE v369[24];
  _BYTE *v370;
  _BYTE v371[24];
  _BYTE *v372;
  _BYTE v373[24];
  _BYTE *v374;
  _BYTE v375[24];
  _BYTE *v376;
  _BYTE v377[24];
  _BYTE *v378;
  _BYTE v379[24];
  _BYTE *v380;
  _BYTE v381[24];
  _BYTE *v382;
  _BYTE v383[24];
  _BYTE *v384;
  _BYTE v385[24];
  _BYTE *v386;
  _BYTE v387[24];
  _BYTE *v388;
  uint64_t (**v389[2])();
  char v390;
  uint64_t (***v391)();
  uint64_t v392;

  v392 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(_QWORD *)a1 + 56))(a1);
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(v6 + 8) != 6)
      goto LABEL_10;
    v6 = *(_QWORD *)v6;
  }
  else if (v7 != 6)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v6 != 1633641840 || *(_WORD *)(v6 + 4) != 25700)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    v9 = a3 + 8;
    v10 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v389, "pe_add");
    v11 = std::string::insert(v10, 0, "Expected ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v318.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v318.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v318, " op. Got ");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v320.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(_QWORD *)a1 + 56))(a1);
    v16 = *(char *)(v15 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)v15;
    else
      v17 = *(const std::string::value_type **)v15;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(v15 + 23);
    else
      v18 = *(_QWORD *)(v15 + 8);
    v19 = std::string::append(&v320, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)v9 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v320.__r_.__value_.__l.__data_);
    if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v318.__r_.__value_.__l.__data_);
    if (v390 < 0)
    {
      v21 = v389[0];
LABEL_22:
      operator delete(v21);
      return;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v320, "x");
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v320);
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v320.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v320, "y");
  v23 = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v320);
  if ((SHIBYTE(v320.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue)
      goto LABEL_28;
LABEL_33:
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "No value for x");
    return;
  }
  operator delete(v320.__r_.__value_.__l.__data_);
  if (!InterpretedTensorValue)
    goto LABEL_33;
LABEL_28:
  if (!v23)
  {
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "No value for y");
    return;
  }
  v320.__r_.__value_.__s.__data_[0] = 0;
  v320.__r_.__value_.__s.__data_[4] = 0;
  v320.__r_.__value_.__s.__data_[8] = 0;
  v320.__r_.__value_.__s.__data_[12] = 0;
  v320.__r_.__value_.__s.__data_[16] = 0;
  v320.__r_.__value_.__s.__data_[18] = 0;
  LOBYTE(v321) = 0;
  v323 = 0;
  LOBYTE(v324) = 0;
  v326 = 0;
  v327 = 0;
  v328 = 0;
  v329 = 0;
  v330 = 0;
  LOBYTE(__p) = 0;
  v333 = 0;
  ANEMachineIR::Validators::ParsePeElementWiseBinaryParamValues(a1, (const MIL::IROperation *)&v320, (MIL::ValidationResult *)&v318);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v318) & 1) == 0)
  {
    *(_DWORD *)a3 = 3;
    MIL::MILResult::GetMessageWithLocation((MIL::MILResult *)&v318);
    MEMORY[0x20BCFEAEC](&v318);
    goto LABEL_36;
  }
  MEMORY[0x20BCFEAEC](&v318);
  if (v323)
  {
    *(_DWORD *)a3 = 5;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Unimplemented 'reduction': rdar://86732114");
    goto LABEL_36;
  }
  *(_OWORD *)&v318.__r_.__value_.__r.__words[1] = 0uLL;
  v319 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v318, v389);
  if (LODWORD(v318.__r_.__value_.__l.__data_))
  {
    *(_DWORD *)a3 = v318.__r_.__value_.__l.__data_;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)&v318.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v319;
    *(_OWORD *)&v318.__r_.__value_.__r.__words[1] = 0uLL;
    v319 = 0;
    goto LABEL_475;
  }
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 88))(v24);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v29 = MIL::IRValueType::AsTensorType(OutputType);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 88))(v29);
  v31 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  ANEMachineIR::Utils::GetStaticTensorShape(v31, v32, (uint64_t)v317);
  v33 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
  ANEMachineIR::Utils::GetStaticTensorShape(v33, v34, (uint64_t)v316);
  v35 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v36 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v35);
  ANEMachineIR::Utils::GetStaticTensorShape(v36, v37, (uint64_t)v315);
  switch(v25)
  {
    case 4:
      if (v27 != 14)
      {
        if (v27 != 9)
        {
          if (v27 != 4)
            goto LABEL_81;
          if (v30 != 14)
          {
            if (v30 != 9)
            {
              if (v30 != 4)
                goto LABEL_124;
              v48 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              v49 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              v311 = 0;
              v312 = 0;
              v313 = 0;
              v50 = *(float *)&v320.__r_.__value_.__l.__data_;
              v51 = *(float *)&v320.__r_.__value_.__r.__words[1];
              v52 = (uint64_t)v391;
              if (v391)
              {
                if (v391 == v389)
                {
                  v388 = v387;
                  (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v387);
LABEL_429:
                  v289 = v388;
                  if (v388 == v387)
                  {
                    v290 = 4;
                    v289 = v387;
                  }
                  else
                  {
                    if (!v388)
                    {
LABEL_434:
                      (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                      v291 = v311;
                      if (v312 == v311)
                        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                      v292 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                      MIL::IRValueType::AsTensorType(v292);
                      MIL::IRTensorValueType::MakeFloat16Value();
                      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v291, (uint64_t *)&v334);
                      v293 = v334;
                      v334 = 0;
                      if (v293)
                        (*((void (**)(void **))*v293 + 1))(v293);
                      goto LABEL_467;
                    }
                    v290 = 5;
                  }
                  (*(void (**)(void))(*v289 + 8 * v290))();
                  goto LABEL_434;
                }
                v52 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
              }
              v388 = (_BYTE *)v52;
              goto LABEL_429;
            }
            v134 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            v135 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            v311 = 0;
            v312 = 0;
            v313 = 0;
            v136 = *(float *)&v320.__r_.__value_.__l.__data_;
            v137 = *(float *)&v320.__r_.__value_.__r.__words[1];
            v138 = (uint64_t)v391;
            if (v391)
            {
              if (v391 == v389)
              {
                v384 = v383;
                (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v383);
LABEL_329:
                v239 = v384;
                if (v384 == v383)
                {
                  v240 = 4;
                  v239 = v383;
                }
                else
                {
                  if (!v384)
                  {
LABEL_334:
                    (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                    v241 = v311;
                    if (v312 == v311)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v242 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v242);
                    MIL::IRTensorValueType::MakeInt8Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v241, (uint64_t *)&v334);
                    v243 = v334;
                    v334 = 0;
                    if (v243)
                      (*((void (**)(void **))*v243 + 1))(v243);
                    goto LABEL_467;
                  }
                  v240 = 5;
                }
                (*(void (**)(void))(*v239 + 8 * v240))();
                goto LABEL_334;
              }
              v138 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
            }
            v384 = (_BYTE *)v138;
            goto LABEL_329;
          }
          v159 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v160 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v161 = *(float *)&v320.__r_.__value_.__l.__data_;
          v162 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v163 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v386 = v385;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v385);
LABEL_409:
              v279 = v386;
              if (v386 == v385)
              {
                v280 = 4;
                v279 = v385;
              }
              else
              {
                if (!v386)
                {
LABEL_414:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v281 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v282 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v282);
                  MIL::IRTensorValueType::MakeUInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v281, (uint64_t *)&v334);
                  v283 = v334;
                  v334 = 0;
                  if (v283)
                    (*((void (**)(void **))*v283 + 1))(v283);
                  goto LABEL_467;
                }
                v280 = 5;
              }
              (*(void (**)(void))(*v279 + 8 * v280))();
              goto LABEL_414;
            }
            v163 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v386 = (_BYTE *)v163;
          goto LABEL_409;
        }
        if (v30 != 14)
        {
          if (v30 != 9)
          {
            if (v30 != 4)
              goto LABEL_124;
            v64 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            Data = MIL::IRTensorValue::GetDataView<signed char>();
            v311 = 0;
            v312 = 0;
            v313 = 0;
            v66 = *(float *)&v320.__r_.__value_.__l.__data_;
            v67 = *(float *)&v320.__r_.__value_.__r.__words[1];
            v68 = (uint64_t)v391;
            if (v391)
            {
              if (v391 == v389)
              {
                v376 = v375;
                (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v375);
LABEL_309:
                v229 = v376;
                if (v376 == v375)
                {
                  v230 = 4;
                  v229 = v375;
                }
                else
                {
                  if (!v376)
                  {
LABEL_314:
                    (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                    v231 = v311;
                    if (v312 == v311)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v232 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v232);
                    MIL::IRTensorValueType::MakeFloat16Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v231, (uint64_t *)&v334);
                    v233 = v334;
                    v334 = 0;
                    if (v233)
                      (*((void (**)(void **))*v233 + 1))(v233);
                    goto LABEL_467;
                  }
                  v230 = 5;
                }
                (*(void (**)(void))(*v229 + 8 * v230))();
                goto LABEL_314;
              }
              v68 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
            }
            v376 = (_BYTE *)v68;
            goto LABEL_309;
          }
          v99 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v100 = MIL::IRTensorValue::GetDataView<signed char>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v101 = *(float *)&v320.__r_.__value_.__l.__data_;
          v102 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v103 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v372 = v371;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v371);
LABEL_229:
              v189 = v372;
              if (v372 == v371)
              {
                v190 = 4;
                v189 = v371;
              }
              else
              {
                if (!v372)
                {
LABEL_234:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v191 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v192 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v192);
                  MIL::IRTensorValueType::MakeInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v191, (uint64_t *)&v334);
                  v193 = v334;
                  v334 = 0;
                  if (v193)
                    (*((void (**)(void **))*v193 + 1))(v193);
                  goto LABEL_467;
                }
                v190 = 5;
              }
              (*(void (**)(void))(*v189 + 8 * v190))();
              goto LABEL_234;
            }
            v103 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v372 = (_BYTE *)v103;
          goto LABEL_229;
        }
        v119 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v120 = MIL::IRTensorValue::GetDataView<signed char>();
        v311 = 0;
        v312 = 0;
        v313 = 0;
        v121 = *(float *)&v320.__r_.__value_.__l.__data_;
        v122 = *(float *)&v320.__r_.__value_.__r.__words[1];
        v123 = (uint64_t)v391;
        if (v391)
        {
          if (v391 == v389)
          {
            v374 = v373;
            (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v373);
LABEL_279:
            v214 = v374;
            if (v374 == v373)
            {
              v215 = 4;
              v214 = v373;
            }
            else
            {
              if (!v374)
              {
LABEL_284:
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                v216 = v311;
                if (v312 == v311)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v217 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v217);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v216, (uint64_t *)&v334);
                v218 = v334;
                v334 = 0;
                if (v218)
                  (*((void (**)(void **))*v218 + 1))(v218);
                goto LABEL_467;
              }
              v215 = 5;
            }
            (*(void (**)(void))(*v214 + 8 * v215))();
            goto LABEL_284;
          }
          v123 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
        }
        v374 = (_BYTE *)v123;
        goto LABEL_279;
      }
      if (v30 != 14)
      {
        if (v30 != 9)
        {
          if (v30 != 4)
            goto LABEL_124;
          v74 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v75 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v76 = *(float *)&v320.__r_.__value_.__l.__data_;
          v77 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v78 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v382 = v381;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v381);
LABEL_399:
              v274 = v382;
              if (v382 == v381)
              {
                v275 = 4;
                v274 = v381;
              }
              else
              {
                if (!v382)
                {
LABEL_404:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v276 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v277 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v277);
                  MIL::IRTensorValueType::MakeFloat16Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v276, (uint64_t *)&v334);
                  v278 = v334;
                  v334 = 0;
                  if (v278)
                    (*((void (**)(void **))*v278 + 1))(v278);
                  goto LABEL_467;
                }
                v275 = 5;
              }
              (*(void (**)(void))(*v274 + 8 * v275))();
              goto LABEL_404;
            }
            v78 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v382 = (_BYTE *)v78;
          goto LABEL_399;
        }
        v124 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v125 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v311 = 0;
        v312 = 0;
        v313 = 0;
        v126 = *(float *)&v320.__r_.__value_.__l.__data_;
        v127 = *(float *)&v320.__r_.__value_.__r.__words[1];
        v128 = (uint64_t)v391;
        if (v391)
        {
          if (v391 == v389)
          {
            v378 = v377;
            (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v377);
LABEL_289:
            v219 = v378;
            if (v378 == v377)
            {
              v220 = 4;
              v219 = v377;
            }
            else
            {
              if (!v378)
              {
LABEL_294:
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                v221 = v311;
                if (v312 == v311)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v222 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v222);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v221, (uint64_t *)&v334);
                v223 = v334;
                v334 = 0;
                if (v223)
                  (*((void (**)(void **))*v223 + 1))(v223);
                goto LABEL_467;
              }
              v220 = 5;
            }
            (*(void (**)(void))(*v219 + 8 * v220))();
            goto LABEL_294;
          }
          v128 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
        }
        v378 = (_BYTE *)v128;
        goto LABEL_289;
      }
      v154 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v155 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v311 = 0;
      v312 = 0;
      v313 = 0;
      v156 = *(float *)&v320.__r_.__value_.__l.__data_;
      v157 = *(float *)&v320.__r_.__value_.__r.__words[1];
      v158 = (uint64_t)v391;
      if (v391)
      {
        if (v391 == v389)
        {
          v380 = v379;
          (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v379);
LABEL_389:
          v269 = v380;
          if (v380 == v379)
          {
            v270 = 4;
            v269 = v379;
          }
          else
          {
            if (!v380)
            {
LABEL_394:
              (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
              v271 = v311;
              if (v312 == v311)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v272 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v272);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v271, (uint64_t *)&v334);
              v273 = v334;
              v334 = 0;
              if (v273)
                (*((void (**)(void **))*v273 + 1))(v273);
              goto LABEL_467;
            }
            v270 = 5;
          }
          (*(void (**)(void))(*v269 + 8 * v270))();
          goto LABEL_394;
        }
        v158 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
      }
      v380 = (_BYTE *)v158;
      goto LABEL_389;
    case 9:
      if (v27 != 14)
      {
        if (v27 != 9)
        {
          if (v27 == 4)
          {
            if (v30 != 14)
            {
              if (v30 != 9)
              {
                if (v30 != 4)
                  goto LABEL_124;
                v43 = MIL::IRTensorValue::GetDataView<signed char>();
                v44 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v311 = 0;
                v312 = 0;
                v313 = 0;
                v45 = *(float *)&v320.__r_.__value_.__l.__data_;
                v46 = *(float *)&v320.__r_.__value_.__r.__words[1];
                v47 = (uint64_t)v391;
                if (v391)
                {
                  if (v391 == v389)
                  {
                    v352 = v351;
                    (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v351);
LABEL_359:
                    v254 = v352;
                    if (v352 == v351)
                    {
                      v255 = 4;
                      v254 = v351;
                    }
                    else
                    {
                      if (!v352)
                      {
LABEL_364:
                        (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                        v256 = v311;
                        if (v312 == v311)
                          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                        v257 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                        MIL::IRValueType::AsTensorType(v257);
                        MIL::IRTensorValueType::MakeFloat16Value();
                        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v256, (uint64_t *)&v334);
                        v258 = v334;
                        v334 = 0;
                        if (v258)
                          (*((void (**)(void **))*v258 + 1))(v258);
                        goto LABEL_467;
                      }
                      v255 = 5;
                    }
                    (*(void (**)(void))(*v254 + 8 * v255))();
                    goto LABEL_364;
                  }
                  v47 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
                }
                v352 = (_BYTE *)v47;
                goto LABEL_359;
              }
              v104 = MIL::IRTensorValue::GetDataView<signed char>();
              v105 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              v311 = 0;
              v312 = 0;
              v313 = 0;
              v106 = *(float *)&v320.__r_.__value_.__l.__data_;
              v107 = *(float *)&v320.__r_.__value_.__r.__words[1];
              v108 = (uint64_t)v391;
              if (v391)
              {
                if (v391 == v389)
                {
                  v348 = v347;
                  (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v347);
LABEL_249:
                  v199 = v348;
                  if (v348 == v347)
                  {
                    v200 = 4;
                    v199 = v347;
                  }
                  else
                  {
                    if (!v348)
                    {
LABEL_254:
                      (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                      v201 = v311;
                      if (v312 == v311)
                        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                      v202 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                      MIL::IRValueType::AsTensorType(v202);
                      MIL::IRTensorValueType::MakeInt8Value();
                      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v201, (uint64_t *)&v334);
                      v203 = v334;
                      v334 = 0;
                      if (v203)
                        (*((void (**)(void **))*v203 + 1))(v203);
                      goto LABEL_467;
                    }
                    v200 = 5;
                  }
                  (*(void (**)(void))(*v199 + 8 * v200))();
                  goto LABEL_254;
                }
                v108 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
              }
              v348 = (_BYTE *)v108;
              goto LABEL_249;
            }
            v129 = MIL::IRTensorValue::GetDataView<signed char>();
            v130 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            v311 = 0;
            v312 = 0;
            v313 = 0;
            v131 = *(float *)&v320.__r_.__value_.__l.__data_;
            v132 = *(float *)&v320.__r_.__value_.__r.__words[1];
            v133 = (uint64_t)v391;
            if (v391)
            {
              if (v391 == v389)
              {
                v350 = v349;
                (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v349);
LABEL_319:
                v234 = v350;
                if (v350 == v349)
                {
                  v235 = 4;
                  v234 = v349;
                }
                else
                {
                  if (!v350)
                  {
LABEL_324:
                    (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                    v236 = v311;
                    if (v312 == v311)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v237 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v237);
                    MIL::IRTensorValueType::MakeUInt8Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v236, (uint64_t *)&v334);
                    v238 = v334;
                    v334 = 0;
                    if (v238)
                      (*((void (**)(void **))*v238 + 1))(v238);
                    goto LABEL_467;
                  }
                  v235 = 5;
                }
                (*(void (**)(void))(*v234 + 8 * v235))();
                goto LABEL_324;
              }
              v133 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
            }
            v350 = (_BYTE *)v133;
            goto LABEL_319;
          }
LABEL_81:
          v53 = "Unimplemented y dtype";
          goto LABEL_125;
        }
        if (v30 != 14)
        {
          if (v30 != 9)
          {
            if (v30 != 4)
              goto LABEL_124;
            v54 = MIL::IRTensorValue::GetDataView<signed char>();
            v55 = MIL::IRTensorValue::GetDataView<signed char>();
            v311 = 0;
            v312 = 0;
            v313 = 0;
            v56 = *(float *)&v320.__r_.__value_.__l.__data_;
            v57 = *(float *)&v320.__r_.__value_.__r.__words[1];
            v58 = (uint64_t)v391;
            if (v391)
            {
              if (v391 == v389)
              {
                v340 = v339;
                (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v339);
LABEL_239:
                v194 = v340;
                if (v340 == v339)
                {
                  v195 = 4;
                  v194 = v339;
                }
                else
                {
                  if (!v340)
                  {
LABEL_244:
                    (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                    v196 = v311;
                    if (v312 == v311)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v197 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v197);
                    MIL::IRTensorValueType::MakeFloat16Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v196, (uint64_t *)&v334);
                    v198 = v334;
                    v334 = 0;
                    if (v198)
                      (*((void (**)(void **))*v198 + 1))(v198);
                    goto LABEL_467;
                  }
                  v195 = 5;
                }
                (*(void (**)(void))(*v194 + 8 * v195))();
                goto LABEL_244;
              }
              v58 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
            }
            v340 = (_BYTE *)v58;
            goto LABEL_239;
          }
          v84 = MIL::IRTensorValue::GetDataView<signed char>();
          v85 = MIL::IRTensorValue::GetDataView<signed char>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v86 = *(float *)&v320.__r_.__value_.__l.__data_;
          v87 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v88 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v336 = v335;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v335);
LABEL_199:
              v174 = v336;
              if (v336 == v335)
              {
                v175 = 4;
                v174 = v335;
              }
              else
              {
                if (!v336)
                {
LABEL_204:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v176 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v177 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v177);
                  MIL::IRTensorValueType::MakeInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v176, (uint64_t *)&v334);
                  v178 = v334;
                  v334 = 0;
                  if (v178)
                    (*((void (**)(void **))*v178 + 1))(v178);
                  goto LABEL_467;
                }
                v175 = 5;
              }
              (*(void (**)(void))(*v174 + 8 * v175))();
              goto LABEL_204;
            }
            v88 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v336 = (_BYTE *)v88;
          goto LABEL_199;
        }
        v89 = MIL::IRTensorValue::GetDataView<signed char>();
        v90 = MIL::IRTensorValue::GetDataView<signed char>();
        v311 = 0;
        v312 = 0;
        v313 = 0;
        v91 = *(float *)&v320.__r_.__value_.__l.__data_;
        v92 = *(float *)&v320.__r_.__value_.__r.__words[1];
        v93 = (uint64_t)v391;
        if (v391)
        {
          if (v391 == v389)
          {
            v338 = v337;
            (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v337);
LABEL_209:
            v179 = v338;
            if (v338 == v337)
            {
              v180 = 4;
              v179 = v337;
            }
            else
            {
              if (!v338)
              {
LABEL_214:
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                v181 = v311;
                if (v312 == v311)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v182 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v182);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v181, (uint64_t *)&v334);
                v183 = v334;
                v334 = 0;
                if (v183)
                  (*((void (**)(void **))*v183 + 1))(v183);
                goto LABEL_467;
              }
              v180 = 5;
            }
            (*(void (**)(void))(*v179 + 8 * v180))();
            goto LABEL_214;
          }
          v93 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
        }
        v338 = (_BYTE *)v93;
        goto LABEL_209;
      }
      if (v30 != 14)
      {
        if (v30 != 9)
        {
          if (v30 != 4)
            goto LABEL_124;
          v59 = MIL::IRTensorValue::GetDataView<signed char>();
          v60 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v61 = *(float *)&v320.__r_.__value_.__l.__data_;
          v62 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v63 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v346 = v345;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v345);
LABEL_299:
              v224 = v346;
              if (v346 == v345)
              {
                v225 = 4;
                v224 = v345;
              }
              else
              {
                if (!v346)
                {
LABEL_304:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v226 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v227 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v227);
                  MIL::IRTensorValueType::MakeFloat16Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v226, (uint64_t *)&v334);
                  v228 = v334;
                  v334 = 0;
                  if (v228)
                    (*((void (**)(void **))*v228 + 1))(v228);
                  goto LABEL_467;
                }
                v225 = 5;
              }
              (*(void (**)(void))(*v224 + 8 * v225))();
              goto LABEL_304;
            }
            v63 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v346 = (_BYTE *)v63;
          goto LABEL_299;
        }
        v94 = MIL::IRTensorValue::GetDataView<signed char>();
        v95 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v311 = 0;
        v312 = 0;
        v313 = 0;
        v96 = *(float *)&v320.__r_.__value_.__l.__data_;
        v97 = *(float *)&v320.__r_.__value_.__r.__words[1];
        v98 = (uint64_t)v391;
        if (v391)
        {
          if (v391 == v389)
          {
            v342 = v341;
            (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v341);
LABEL_219:
            v184 = v342;
            if (v342 == v341)
            {
              v185 = 4;
              v184 = v341;
            }
            else
            {
              if (!v342)
              {
LABEL_224:
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                v186 = v311;
                if (v312 == v311)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v187 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v187);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v186, (uint64_t *)&v334);
                v188 = v334;
                v334 = 0;
                if (v188)
                  (*((void (**)(void **))*v188 + 1))(v188);
                goto LABEL_467;
              }
              v185 = 5;
            }
            (*(void (**)(void))(*v184 + 8 * v185))();
            goto LABEL_224;
          }
          v98 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
        }
        v342 = (_BYTE *)v98;
        goto LABEL_219;
      }
      v114 = MIL::IRTensorValue::GetDataView<signed char>();
      v115 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v311 = 0;
      v312 = 0;
      v313 = 0;
      v116 = *(float *)&v320.__r_.__value_.__l.__data_;
      v117 = *(float *)&v320.__r_.__value_.__r.__words[1];
      v118 = (uint64_t)v391;
      if (v391)
      {
        if (v391 == v389)
        {
          v344 = v343;
          (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v343);
LABEL_269:
          v209 = v344;
          if (v344 == v343)
          {
            v210 = 4;
            v209 = v343;
          }
          else
          {
            if (!v344)
            {
LABEL_274:
              (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
              v211 = v311;
              if (v312 == v311)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v212 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v212);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v211, (uint64_t *)&v334);
              v213 = v334;
              v334 = 0;
              if (v213)
                (*((void (**)(void **))*v213 + 1))(v213);
              goto LABEL_467;
            }
            v210 = 5;
          }
          (*(void (**)(void))(*v209 + 8 * v210))();
          goto LABEL_274;
        }
        v118 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
      }
      v344 = (_BYTE *)v118;
      goto LABEL_269;
    case 14:
      if (v27 != 14)
      {
        if (v27 != 9)
        {
          if (v27 == 4)
          {
            if (v30 != 14)
            {
              if (v30 != 9)
              {
                if (v30 == 4)
                {
                  v38 = MIL::IRTensorValue::GetDataView<unsigned char>();
                  v39 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                  v311 = 0;
                  v312 = 0;
                  v313 = 0;
                  v40 = *(float *)&v320.__r_.__value_.__l.__data_;
                  v41 = *(float *)&v320.__r_.__value_.__r.__words[1];
                  v42 = (uint64_t)v391;
                  if (v391)
                  {
                    if (v391 == v389)
                    {
                      v370 = v369;
                      (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v369);
LABEL_459:
                      v304 = v370;
                      if (v370 == v369)
                      {
                        v305 = 4;
                        v304 = v369;
                      }
                      else
                      {
                        if (!v370)
                        {
LABEL_464:
                          (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                          v306 = v311;
                          if (v312 == v311)
                            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                          v307 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                          MIL::IRValueType::AsTensorType(v307);
                          MIL::IRTensorValueType::MakeFloat16Value();
                          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v306, (uint64_t *)&v334);
                          v308 = v334;
                          v334 = 0;
                          if (v308)
                            (*((void (**)(void **))*v308 + 1))(v308);
LABEL_467:
                          v334 = (void **)&v311;
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v334);
                          *(_DWORD *)a3 = 0;
                          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
                          if (v314[0])
                          {
                            v314[1] = v314[0];
                            operator delete(v314[0]);
                          }
                          goto LABEL_469;
                        }
                        v305 = 5;
                      }
                      (*(void (**)(void))(*v304 + 8 * v305))();
                      goto LABEL_464;
                    }
                    v42 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
                  }
                  v370 = (_BYTE *)v42;
                  goto LABEL_459;
                }
                goto LABEL_124;
              }
              v149 = MIL::IRTensorValue::GetDataView<unsigned char>();
              v150 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              v311 = 0;
              v312 = 0;
              v313 = 0;
              v151 = *(float *)&v320.__r_.__value_.__l.__data_;
              v152 = *(float *)&v320.__r_.__value_.__r.__words[1];
              v153 = (uint64_t)v391;
              if (v391)
              {
                if (v391 == v389)
                {
                  v366 = v365;
                  (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v365);
LABEL_379:
                  v264 = v366;
                  if (v366 == v365)
                  {
                    v265 = 4;
                    v264 = v365;
                  }
                  else
                  {
                    if (!v366)
                    {
LABEL_384:
                      (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                      v266 = v311;
                      if (v312 == v311)
                        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                      v267 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                      MIL::IRValueType::AsTensorType(v267);
                      MIL::IRTensorValueType::MakeInt8Value();
                      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v266, (uint64_t *)&v334);
                      v268 = v334;
                      v334 = 0;
                      if (v268)
                        (*((void (**)(void **))*v268 + 1))(v268);
                      goto LABEL_467;
                    }
                    v265 = 5;
                  }
                  (*(void (**)(void))(*v264 + 8 * v265))();
                  goto LABEL_384;
                }
                v153 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
              }
              v366 = (_BYTE *)v153;
              goto LABEL_379;
            }
            v169 = MIL::IRTensorValue::GetDataView<unsigned char>();
            v170 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            v311 = 0;
            v312 = 0;
            v313 = 0;
            v171 = *(float *)&v320.__r_.__value_.__l.__data_;
            v172 = *(float *)&v320.__r_.__value_.__r.__words[1];
            v173 = (uint64_t)v391;
            if (v391)
            {
              if (v391 == v389)
              {
                v368 = v367;
                (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v367);
LABEL_449:
                v299 = v368;
                if (v368 == v367)
                {
                  v300 = 4;
                  v299 = v367;
                }
                else
                {
                  if (!v368)
                  {
LABEL_454:
                    (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                    v301 = v311;
                    if (v312 == v311)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v302 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v302);
                    MIL::IRTensorValueType::MakeUInt8Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v301, (uint64_t *)&v334);
                    v303 = v334;
                    v334 = 0;
                    if (v303)
                      (*((void (**)(void **))*v303 + 1))(v303);
                    goto LABEL_467;
                  }
                  v300 = 5;
                }
                (*(void (**)(void))(*v299 + 8 * v300))();
                goto LABEL_454;
              }
              v173 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
            }
            v368 = (_BYTE *)v173;
            goto LABEL_449;
          }
          goto LABEL_81;
        }
        if (v30 != 14)
        {
          if (v30 != 9)
          {
            if (v30 == 4)
            {
              v69 = MIL::IRTensorValue::GetDataView<unsigned char>();
              v70 = MIL::IRTensorValue::GetDataView<signed char>();
              v311 = 0;
              v312 = 0;
              v313 = 0;
              v71 = *(float *)&v320.__r_.__value_.__l.__data_;
              v72 = *(float *)&v320.__r_.__value_.__r.__words[1];
              v73 = (uint64_t)v391;
              if (v391)
              {
                if (v391 == v389)
                {
                  v358 = v357;
                  (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v357);
LABEL_369:
                  v259 = v358;
                  if (v358 == v357)
                  {
                    v260 = 4;
                    v259 = v357;
                  }
                  else
                  {
                    if (!v358)
                    {
LABEL_374:
                      (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                      v261 = v311;
                      if (v312 == v311)
                        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                      v262 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                      MIL::IRValueType::AsTensorType(v262);
                      MIL::IRTensorValueType::MakeFloat16Value();
                      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v261, (uint64_t *)&v334);
                      v263 = v334;
                      v334 = 0;
                      if (v263)
                        (*((void (**)(void **))*v263 + 1))(v263);
                      goto LABEL_467;
                    }
                    v260 = 5;
                  }
                  (*(void (**)(void))(*v259 + 8 * v260))();
                  goto LABEL_374;
                }
                v73 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
              }
              v358 = (_BYTE *)v73;
              goto LABEL_369;
            }
LABEL_124:
            v53 = "Unimplemented output dtype";
            goto LABEL_125;
          }
          v109 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v110 = MIL::IRTensorValue::GetDataView<signed char>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v111 = *(float *)&v320.__r_.__value_.__l.__data_;
          v112 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v113 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v354 = v353;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v353);
LABEL_259:
              v204 = v354;
              if (v354 == v353)
              {
                v205 = 4;
                v204 = v353;
              }
              else
              {
                if (!v354)
                {
LABEL_264:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v206 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v207 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v207);
                  MIL::IRTensorValueType::MakeInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v206, (uint64_t *)&v334);
                  v208 = v334;
                  v334 = 0;
                  if (v208)
                    (*((void (**)(void **))*v208 + 1))(v208);
                  goto LABEL_467;
                }
                v205 = 5;
              }
              (*(void (**)(void))(*v204 + 8 * v205))();
              goto LABEL_264;
            }
            v113 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v354 = (_BYTE *)v113;
          goto LABEL_259;
        }
        v139 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v140 = MIL::IRTensorValue::GetDataView<signed char>();
        v311 = 0;
        v312 = 0;
        v313 = 0;
        v141 = *(float *)&v320.__r_.__value_.__l.__data_;
        v142 = *(float *)&v320.__r_.__value_.__r.__words[1];
        v143 = (uint64_t)v391;
        if (v391)
        {
          if (v391 == v389)
          {
            v356 = v355;
            (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v355);
LABEL_339:
            v244 = v356;
            if (v356 == v355)
            {
              v245 = 4;
              v244 = v355;
            }
            else
            {
              if (!v356)
              {
LABEL_344:
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                v246 = v311;
                if (v312 == v311)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v247 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v247);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v246, (uint64_t *)&v334);
                v248 = v334;
                v334 = 0;
                if (v248)
                  (*((void (**)(void **))*v248 + 1))(v248);
                goto LABEL_467;
              }
              v245 = 5;
            }
            (*(void (**)(void))(*v244 + 8 * v245))();
            goto LABEL_344;
          }
          v143 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
        }
        v356 = (_BYTE *)v143;
        goto LABEL_339;
      }
      if (v30 != 14)
      {
        if (v30 != 9)
        {
          if (v30 != 4)
            goto LABEL_124;
          v79 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v80 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v311 = 0;
          v312 = 0;
          v313 = 0;
          v81 = *(float *)&v320.__r_.__value_.__l.__data_;
          v82 = *(float *)&v320.__r_.__value_.__r.__words[1];
          v83 = (uint64_t)v391;
          if (v391)
          {
            if (v391 == v389)
            {
              v364 = v363;
              (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v363);
LABEL_439:
              v294 = v364;
              if (v364 == v363)
              {
                v295 = 4;
                v294 = v363;
              }
              else
              {
                if (!v364)
                {
LABEL_444:
                  (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                  v296 = v311;
                  if (v312 == v311)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v297 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v297);
                  MIL::IRTensorValueType::MakeFloat16Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v296, (uint64_t *)&v334);
                  v298 = v334;
                  v334 = 0;
                  if (v298)
                    (*((void (**)(void **))*v298 + 1))(v298);
                  goto LABEL_467;
                }
                v295 = 5;
              }
              (*(void (**)(void))(*v294 + 8 * v295))();
              goto LABEL_444;
            }
            v83 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
          }
          v364 = (_BYTE *)v83;
          goto LABEL_439;
        }
        v144 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v145 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v311 = 0;
        v312 = 0;
        v313 = 0;
        v146 = *(float *)&v320.__r_.__value_.__l.__data_;
        v147 = *(float *)&v320.__r_.__value_.__r.__words[1];
        v148 = (uint64_t)v391;
        if (v391)
        {
          if (v391 == v389)
          {
            v360 = v359;
            (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v359);
LABEL_349:
            v249 = v360;
            if (v360 == v359)
            {
              v250 = 4;
              v249 = v359;
            }
            else
            {
              if (!v360)
              {
LABEL_354:
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
                v251 = v311;
                if (v312 == v311)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v252 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v252);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v251, (uint64_t *)&v334);
                v253 = v334;
                v334 = 0;
                if (v253)
                  (*((void (**)(void **))*v253 + 1))(v253);
                goto LABEL_467;
              }
              v250 = 5;
            }
            (*(void (**)(void))(*v249 + 8 * v250))();
            goto LABEL_354;
          }
          v148 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
        }
        v360 = (_BYTE *)v148;
        goto LABEL_349;
      }
      v164 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v165 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v311 = 0;
      v312 = 0;
      v313 = 0;
      v166 = *(float *)&v320.__r_.__value_.__l.__data_;
      v167 = *(float *)&v320.__r_.__value_.__r.__words[1];
      v168 = (uint64_t)v391;
      if (v391)
      {
        if (v391 == v389)
        {
          v362 = v361;
          (*((void (**)(uint64_t (***)(), _BYTE *))v389[0] + 3))(v389, v361);
LABEL_419:
          v284 = v362;
          if (v362 == v361)
          {
            v285 = 4;
            v284 = v361;
          }
          else
          {
            if (!v362)
            {
LABEL_424:
              (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(&v311, a1);
              v286 = v311;
              if (v312 == v311)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v287 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v287);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v286, (uint64_t *)&v334);
              v288 = v334;
              v334 = 0;
              if (v288)
                (*((void (**)(void **))*v288 + 1))(v288);
              goto LABEL_467;
            }
            v285 = 5;
          }
          (*(void (**)(void))(*v284 + 8 * v285))();
          goto LABEL_424;
        }
        v168 = ((uint64_t (*)(uint64_t (***)()))(*v391)[2])(v391);
      }
      v362 = (_BYTE *)v168;
      goto LABEL_419;
  }
  v53 = "Unimplemented x dtype";
LABEL_125:
  *(_DWORD *)a3 = 3;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v53);
LABEL_469:
  if (v315[0])
  {
    v315[1] = v315[0];
    operator delete(v315[0]);
  }
  if (v316[0])
  {
    v316[1] = v316[0];
    operator delete(v316[0]);
  }
  if (v317[0])
  {
    v317[1] = v317[0];
    operator delete(v317[0]);
  }
LABEL_475:
  v309 = v391;
  if (v391 == v389)
  {
    v310 = 4;
    v309 = v389;
  }
  else
  {
    if (!v391)
      goto LABEL_480;
    v310 = 5;
  }
  (*v309)[v310]();
LABEL_480:
  if (SHIBYTE(v319) < 0)
    operator delete((void *)v318.__r_.__value_.__l.__size_);
LABEL_36:
  if (v333 && v332 < 0)
    operator delete(__p);
  if (v326 && v324)
  {
    v325 = v324;
    operator delete(v324);
  }
  if (v323 && v322 < 0)
  {
    v21 = v321;
    goto LABEL_22;
  }
}

void sub_206865F54(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  uint64_t v36;
  uint64_t v37;
  void *v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;

  if (a2 == 1)
  {
    v39 = __cxa_begin_catch(a1);
    *(_DWORD *)v36 = 4;
    v40 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v39 + 16))(v39);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v36 + 8), v40);
    __cxa_end_catch();
    JUMPOUT(0x206865D98);
  }
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  v41 = *(_QWORD **)(v37 - 112);
  if (v41 == (_QWORD *)(v37 - 136))
  {
    v42 = 4;
    v41 = (_QWORD *)(v37 - 136);
  }
  else
  {
    if (!v41)
      goto LABEL_14;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_14:
  if (a31 < 0)
    operator delete(a26);
  ANEMachineIR::Validators::PeElementWiseBinaryParamValues::~PeElementWiseBinaryParamValues(&a36);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::PeAddCpu::~PeAddCpu(MIL::ANEMachineIR::Interpreter::PeAddCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

void MIL::ANEMachineIR::Interpreter::PeMulCpu::~PeMulCpu(MIL::ANEMachineIR::Interpreter::PeMulCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24BFE70C0, MEMORY[0x24BEDAAF0]);
}

void sub_206867B7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24BFE70C8, MEMORY[0x24BEDAB00]);
}

void sub_206867C18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void *MIL::ANEMachineIR::Interpreter::`anonymous namespace'::promote_shape_to_5d@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  const void *v3;
  uint64_t v4;
  unint64_t v5;
  void *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t __src;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *(const void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 - *(_QWORD *)a1;
  if (v5 >= 0x29)
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(a2, v3, v4, v5 >> 3);
  switch((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3)
  {
    case 0:
      v8 = *a2;
      __src = (int64x2_t)xmmword_206990B08;
      v14 = unk_206990B18;
      v15 = 1;
      result = std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a2, v8, __src.i8, (char *)&v16, 5);
      break;
    case 1:
      v12 = *a2;
      __src = (int64x2_t)xmmword_206990AE8;
      v14 = unk_206990AF8;
      result = std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a2, v12, __src.i8, (char *)&v15, 4);
      break;
    case 2:
      v10 = *a2;
      __src = (int64x2_t)xmmword_206990AD0;
      *(_QWORD *)&v14 = 1;
      result = std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a2, v10, __src.i8, (char *)&v14 + 8, 3);
      break;
    case 3:
      v11 = *a2;
      __src = vdupq_n_s64(1uLL);
      result = std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a2, v11, __src.i8, (char *)&v14, 2);
      break;
    case 4:
      v9 = *a2;
      __src.i64[0] = 1;
      result = std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a2, v9, __src.i8, &__src.i8[8], 1);
      break;
    default:
      return result;
  }
  return result;
}

void sub_206867DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  uint64_t v10;
  void *v11;

  v11 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::ANEMachineIR::Interpreter::`anonymous namespace'::get_index(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1[1] - *a1 != 40)
  return a6
       + (a5
        + (a4 + *(_QWORD *)(*a1 + 16) * a3 + *(_QWORD *)(*a1 + 8) * a2 * *(_QWORD *)(*a1 + 16))
        * *(_QWORD *)(*a1 + 24))
       * *(_QWORD *)(*a1 + 32);
}

_QWORD *std::vector<MIL::Fp16>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_206867EB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::Fp16>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_206867FAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

char *std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<unsigned long long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_206868210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x20BCFF140);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_20686845C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *std::vector<signed char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_20686850C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 116, a4);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 109, a4);
}

void OUTLINED_FUNCTION_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 113, a4);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,MIL::Fp16,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1("ComputeValue", "PeElementWiseCpu.cpp", a3, "y_scale == 1.0 || y_scale == -1.0");
}

{
  OUTLINED_FUNCTION_0("ComputeValue", "PeElementWiseCpu.cpp", a3, "src_shape.size() == mul_shape.size()");
}

{
  OUTLINED_FUNCTION_2("ComputeValue", "PeElementWiseCpu.cpp", a3, "src_shape.size() == add_shape.size()");
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::promote_shape_to_5d()
{
  __assert_rtn("promote_shape_to_5d", "PeElementWiseCpu.cpp", 71, "shape.size() >= 0 && shape.size() <= 5");
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::get_index()
{
  __assert_rtn("get_index", "PeElementWiseCpu.cpp", 61, "shape5d.size() == 5");
}

void ANEMachineIR::H2020::Validators::ValidateConst(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateConst(this, a2);
}

void ANEMachineIR::Validators::ValidateConvParameters(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X3>, int a4@<W4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  BOOL v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  int *j;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  _DWORD *i;
  unint64_t v63;
  int *v64;
  int *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  std::string::size_type v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *size;
  unint64_t *v88;
  unint64_t v89;
  std::string::size_type v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  std::string::size_type v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  int *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  std::string::size_type v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  std::string v159;
  __int128 v160;
  uint64_t v161;
  int v162;
  void *v163[2];
  std::string::size_type v164;
  _QWORD v165[2];
  std::string v166;
  std::string v167;
  std::string v168;
  std::string v169;
  void *v170[2];
  std::string::size_type v171;
  _QWORD v172[2];
  void *v173;
  _BYTE *v174;
  void *v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  int v179;
  void *v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  int v184;
  void *__p;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  int v189;
  void *v190[2];
  char v191;
  void *v192;
  std::__shared_weak_count *v193;
  void *v194[2];
  char v195;
  void *v196;
  std::__shared_weak_count *v197;
  char v198[8];
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  int v202;
  void *v203[2];
  char v204;
  void *v205;
  std::__shared_weak_count *v206;
  void *v207[2];
  char v208;
  void *v209;
  std::__shared_weak_count *v210;

  if (*(_BYTE *)(a6 + 16) && (*(_QWORD *)(a6 + 96) <= 1uLL ? (v14 = *(_QWORD *)(a6 + 104) >= 2uLL) : (v14 = 1), v14))
  {
    v15 = *(std::__shared_weak_count **)(a1 + 8);
    v209 = *(void **)a1;
    v210 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v207, "PyANE does not reuse bias or post-scale in group data, so channel vector configurations are not supported at the moment.");
    MEMORY[0x20BCFEAD4](a7, &v209, 319, v207);
    if (v208 < 0)
      operator delete(v207[0]);
    v18 = v210;
    if (v210)
    {
      v19 = (unint64_t *)&v210->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_37:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    if (((a3[1] - *a3) >> 3) - 3 == *(_QWORD *)a6)
    {
      v21 = a2[1];
      if (v21 == *a2)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v22 = *(_QWORD *)(a6 + 8);
      if (v22)
      {
        if (!(*(_QWORD *)(v21 - 8) % v22))
        {
          MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v198);
          goto LABEL_50;
        }
        v23 = *(_QWORD *)(a1 + 8);
        v180 = *(void **)a1;
        *(_QWORD *)&v181 = v23;
        if (v23)
        {
          v24 = (unint64_t *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "num_groups must divide input_channel.");
        MEMORY[0x20BCFEAD4](v198, &v180, 315, &__p);
        if (SHIBYTE(v186) < 0)
          operator delete(__p);
        v26 = (std::__shared_weak_count *)v181;
        if ((_QWORD)v181)
        {
          v27 = (unint64_t *)(v181 + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          goto LABEL_47;
        }
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 8);
        v180 = *(void **)a1;
        *(_QWORD *)&v181 = v33;
        if (v33)
        {
          v34 = (unint64_t *)(v33 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "num_groups must be greater than 0.");
        MEMORY[0x20BCFEAD4](v198, &v180, 315, &__p);
        if (SHIBYTE(v186) < 0)
          operator delete(__p);
        v26 = (std::__shared_weak_count *)v181;
        if ((_QWORD)v181)
        {
          v36 = (unint64_t *)(v181 + 8);
          do
            v28 = __ldaxr(v36);
          while (__stlxr(v28 - 1, v36));
LABEL_47:
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
LABEL_50:
      if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)v198) & 1) != 0)
      {
        v37 = (_QWORD *)*a3;
        v38 = a3[1] - *a3;
        if ((unint64_t)v38 < 9 || (v40 = *a2, v39 = a2[1], v41 = v39 - *a2, v39 == *a2))
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        v42 = v38 >> 3;
        v43 = v41 >> 3;
        v44 = *(_QWORD *)(a6 + 8);
        if (v37[(v38 >> 3) - 2] != *(_QWORD *)(v40 + 8 * (v41 >> 3) - 8) / v44)
        {
          v52 = *(std::__shared_weak_count **)(a1 + 8);
          v196 = *(void **)a1;
          v197 = v52;
          if (v52)
          {
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldxr(v53);
            while (__stxr(v54 + 1, v53));
          }
          std::string::basic_string[abi:ne180100]<0>(v194, "Kernel must have input channels equivalent to x's input channels over num_groups");
          MEMORY[0x20BCFEAD4](a7, &v196, 315, v194);
          if (v195 < 0)
            operator delete(v194[0]);
          v55 = v197;
          if (!v197)
            goto LABEL_277;
          v56 = (unint64_t *)&v197->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          goto LABEL_92;
        }
        if (*(_BYTE *)(a6 + 16))
          v44 = 1;
        if (*v37 == v44)
        {
          if (*(_BYTE *)(a6 + 18))
          {
            v45 = *(_QWORD *)(a1 + 8);
            v175 = *(void **)a1;
            *(_QWORD *)&v176 = v45;
            if (v45)
            {
              v46 = (unint64_t *)(v45 + 8);
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
            }
            std::string::basic_string[abi:ne180100]<0>(&v180, "Padding validation for conv transpose not implemented.");
            MEMORY[0x20BCFEAD4](&__p, &v175, 315, &v180);
            if (SHIBYTE(v181) < 0)
              operator delete(v180);
            v48 = (std::__shared_weak_count *)v176;
            if ((_QWORD)v176)
            {
              v49 = (unint64_t *)(v176 + 8);
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
LABEL_66:
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            goto LABEL_68;
          }
          for (i = *(_DWORD **)(a6 + 48); i != *(_DWORD **)(a6 + 56); ++i)
          {
            if (*i != 1)
            {
              v80 = *(_QWORD *)(a1 + 8);
              v175 = *(void **)a1;
              *(_QWORD *)&v176 = v80;
              if (v80)
              {
                v81 = (unint64_t *)(v80 + 8);
                do
                  v82 = __ldxr(v81);
                while (__stxr(v82 + 1, v81));
              }
              std::string::basic_string[abi:ne180100]<0>(&v180, "Padding validation for dilated convs not yet implemented.");
              MEMORY[0x20BCFEAD4](&__p, &v175, 315, &v180);
              if (SHIBYTE(v181) < 0)
                operator delete(v180);
              v48 = (std::__shared_weak_count *)v176;
              if ((_QWORD)v176)
              {
                v83 = (unint64_t *)(v176 + 8);
                do
                  v50 = __ldaxr(v83);
                while (__stlxr(v50 - 1, v83));
                goto LABEL_66;
              }
              goto LABEL_68;
            }
          }
          v63 = *(_QWORD *)a6;
          if (*(_QWORD *)a6 == 3)
          {
            if ((unint64_t)v38 <= 0x20)
              goto LABEL_293;
            v65 = *(int **)(a6 + 72);
            v64 = *(int **)(a6 + 80);
            v66 = (char *)v64 - (char *)v65;
            if (v64 == v65 || (unint64_t)v66 < 5)
              goto LABEL_292;
            v67 = &v37[v42];
            v68 = *(v67 - 5);
            v69 = *(v67 - 4);
            v70 = *(v67 - 3);
            v71 = v65[1];
            v72 = *v65;
          }
          else
          {
            if (v63 < 2)
            {
              if ((unint64_t)v38 <= 0x10)
                goto LABEL_293;
              v65 = *(int **)(a6 + 72);
              v107 = *(_QWORD *)(a6 + 80) - (_QWORD)v65;
              if ((unint64_t)v107 < 5)
                goto LABEL_292;
              v77 = 0;
              v78 = 0;
              v79 = 0;
              v72 = 0;
              v74 = 0;
              v70 = v37[v42 - 3];
              v75 = v107 >> 2;
              v68 = 1;
              v69 = 1;
LABEL_168:
              if (v68 <= v72 || v68 <= v74)
              {
                v116 = *(_QWORD *)(a1 + 8);
                v175 = *(void **)a1;
                *(_QWORD *)&v176 = v116;
                if (v116)
                {
                  v117 = (unint64_t *)(v116 + 8);
                  do
                    v118 = __ldxr(v117);
                  while (__stxr(v118 + 1, v117));
                }
                std::string::basic_string[abi:ne180100]<0>(&v180, "Conv padding must be supported by kernel in depth dimension.");
                MEMORY[0x20BCFEAD4](&__p, &v175, 315, &v180);
                if (SHIBYTE(v181) < 0)
                  operator delete(v180);
                v48 = (std::__shared_weak_count *)v176;
                if ((_QWORD)v176)
                {
                  v119 = (unint64_t *)(v176 + 8);
                  do
                    v50 = __ldaxr(v119);
                  while (__stlxr(v50 - 1, v119));
                  goto LABEL_66;
                }
                goto LABEL_68;
              }
              if (v69 <= v78 || v69 <= v77)
              {
                v120 = *(_QWORD *)(a1 + 8);
                v175 = *(void **)a1;
                *(_QWORD *)&v176 = v120;
                if (v120)
                {
                  v121 = (unint64_t *)(v120 + 8);
                  do
                    v122 = __ldxr(v121);
                  while (__stxr(v122 + 1, v121));
                }
                std::string::basic_string[abi:ne180100]<0>(&v180, "Conv padding must be supported by kernel in height dimension.");
                MEMORY[0x20BCFEAD4](&__p, &v175, 315, &v180);
                if (SHIBYTE(v181) < 0)
                  operator delete(v180);
                v48 = (std::__shared_weak_count *)v176;
                if ((_QWORD)v176)
                {
                  v123 = (unint64_t *)(v176 + 8);
                  do
                    v50 = __ldaxr(v123);
                  while (__stlxr(v50 - 1, v123));
                  goto LABEL_66;
                }
                goto LABEL_68;
              }
              v108 = &v65[v75];
              v109 = *(v108 - 2);
              v110 = *(v108 - 1);
              if (v70 <= v109 || v70 <= v110)
              {
                v112 = *(_QWORD *)(a1 + 8);
                v175 = *(void **)a1;
                *(_QWORD *)&v176 = v112;
                if (v112)
                {
                  v113 = (unint64_t *)(v112 + 8);
                  do
                    v114 = __ldxr(v113);
                  while (__stxr(v114 + 1, v113));
                }
                std::string::basic_string[abi:ne180100]<0>(&v180, "Conv padding must be supported by kernel in width dimension.");
                MEMORY[0x20BCFEAD4](&__p, &v175, 315, &v180);
                if (SHIBYTE(v181) < 0)
                  operator delete(v180);
                v48 = (std::__shared_weak_count *)v176;
                if ((_QWORD)v176)
                {
                  v115 = (unint64_t *)(v176 + 8);
                  do
                    v50 = __ldaxr(v115);
                  while (__stlxr(v50 - 1, v115));
                  goto LABEL_66;
                }
                goto LABEL_68;
              }
              if (v63 == 3)
              {
                if ((unint64_t)v41 < 0x19)
                  goto LABEL_293;
                v137 = *(_QWORD *)(v40 + 8 * v43 - 32);
              }
              else
              {
                v137 = 1;
              }
              if (v79)
              {
                if ((unint64_t)v41 < 0x11)
                  goto LABEL_293;
                v138 = *(_QWORD *)(v40 + 8 * v43 - 24);
              }
              else
              {
                if ((unint64_t)v41 < 9)
                  goto LABEL_293;
                v138 = 1;
              }
              v139 = *(_QWORD *)(v40 + 8 * v43 - 16);
              v140 = *a5;
              v141 = a5[1] - *a5;
              if (v63 == 3)
              {
                if ((unint64_t)v141 < 0x19)
                  goto LABEL_293;
                v142 = *(_QWORD *)(v141 + v140 - 32);
              }
              else
              {
                v142 = 1;
              }
              if (v79)
              {
                if ((unint64_t)v141 >= 0x11)
                {
                  v143 = v141 >> 3;
                  v144 = *(_QWORD *)(v141 + v140 - 24);
LABEL_246:
                  v145 = *(_QWORD *)(v140 + 8 * v143 - 16);
                  if (v63 == 3)
                  {
                    v146 = *(_QWORD *)(a6 + 24);
                    if (*(_QWORD *)(a6 + 32) == v146)
                      goto LABEL_292;
                    LODWORD(v146) = *(_DWORD *)v146;
                    if ((int)v146 >= 0)
                      v146 = v146;
                    else
                      v146 = -(int)v146;
                  }
                  else
                  {
                    v146 = 1;
                  }
                  if ((v79 & 1) != 0)
                  {
                    v147 = *(_QWORD *)(a6 + 24);
                    v148 = *(_QWORD *)(a6 + 32);
                    if ((unint64_t)(v148 - v147) < 5)
                      goto LABEL_292;
                    LODWORD(v149) = *(_DWORD *)(v148 - 8);
                    if ((int)v149 >= 0)
                      v149 = v149;
                    else
                      v149 = -(int)v149;
                  }
                  else
                  {
                    v147 = *(_QWORD *)(a6 + 24);
                    v148 = *(_QWORD *)(a6 + 32);
                    v149 = 1;
                  }
                  if (v148 != v147)
                  {
                    LODWORD(v148) = *(_DWORD *)(v148 - 4);
                    if ((int)v148 >= 0)
                      v148 = v148;
                    else
                      v148 = -(int)v148;
                    if ((v145 - 1) * v148 >= v139 + v109)
                    {
                      v150 = *(_QWORD *)(a1 + 8);
                      v175 = *(void **)a1;
                      *(_QWORD *)&v176 = v150;
                      if (v150)
                      {
                        v151 = (unint64_t *)(v150 + 8);
                        do
                          v152 = __ldxr(v151);
                        while (__stxr(v152 + 1, v151));
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v180, "Conv padding support constraints violated for Px.");
                      MEMORY[0x20BCFEAD4](&__p, &v175, 315, &v180);
                    }
                    else if (v149 * (v144 - 1) >= v138 + v78)
                    {
                      v153 = *(_QWORD *)(a1 + 8);
                      v175 = *(void **)a1;
                      *(_QWORD *)&v176 = v153;
                      if (v153)
                      {
                        v154 = (unint64_t *)(v153 + 8);
                        do
                          v155 = __ldxr(v154);
                        while (__stxr(v155 + 1, v154));
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v180, "Conv padding support constraints violated for Py.");
                      MEMORY[0x20BCFEAD4](&__p, &v175, 315, &v180);
                    }
                    else
                    {
                      if (v146 * (v142 - 1) < v137 + v72)
                      {
                        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)&__p);
                        goto LABEL_68;
                      }
                      v156 = *(_QWORD *)(a1 + 8);
                      v175 = *(void **)a1;
                      *(_QWORD *)&v176 = v156;
                      if (v156)
                      {
                        v157 = (unint64_t *)(v156 + 8);
                        do
                          v158 = __ldxr(v157);
                        while (__stxr(v158 + 1, v157));
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v180, "Conv padding support constraints violated for Pz.");
                      MEMORY[0x20BCFEAD4](&__p, &v175, 315, &v180);
                    }
                    if (SHIBYTE(v181) < 0)
                      operator delete(v180);
                    std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&v175);
LABEL_68:
                    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p) & 1) != 0)
                    {
                      for (j = *(int **)(a6 + 48); ; ++j)
                      {
                        if (j == *(int **)(a6 + 56))
                        {
                          MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)&v180);
                          goto LABEL_138;
                        }
                        if (*j <= 0)
                          break;
                        if (*j != 1)
                        {
                          v90 = *(_QWORD *)(a1 + 8);
                          v159.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
                          v159.__r_.__value_.__l.__size_ = v90;
                          if (v90)
                          {
                            v91 = (unint64_t *)(v90 + 8);
                            do
                              v92 = __ldxr(v91);
                            while (__stxr(v92 + 1, v91));
                          }
                          std::string::basic_string[abi:ne180100]<0>(&v175, "MIL<aneflow> frontend has not yet implemented dilated conv.");
                          MEMORY[0x20BCFEAD4](&v180, &v159, 315, &v175);
                          if (SHIBYTE(v176) < 0)
                            operator delete(v175);
                          size = (std::__shared_weak_count *)v159.__r_.__value_.__l.__size_;
                          if (v159.__r_.__value_.__l.__size_)
                          {
                            v93 = (unint64_t *)(v159.__r_.__value_.__l.__size_ + 8);
                            do
                              v89 = __ldaxr(v93);
                            while (__stlxr(v89 - 1, v93));
                            goto LABEL_136;
                          }
                          goto LABEL_138;
                        }
                      }
                      v84 = *(_QWORD *)(a1 + 8);
                      v159.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
                      v159.__r_.__value_.__l.__size_ = v84;
                      if (v84)
                      {
                        v85 = (unint64_t *)(v84 + 8);
                        do
                          v86 = __ldxr(v85);
                        while (__stxr(v86 + 1, v85));
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v175, "Dilation must be greater than zero.");
                      MEMORY[0x20BCFEAD4](&v180, &v159, 315, &v175);
                      if (SHIBYTE(v176) < 0)
                        operator delete(v175);
                      size = (std::__shared_weak_count *)v159.__r_.__value_.__l.__size_;
                      if (v159.__r_.__value_.__l.__size_)
                      {
                        v88 = (unint64_t *)(v159.__r_.__value_.__l.__size_ + 8);
                        do
                          v89 = __ldaxr(v88);
                        while (__stlxr(v89 - 1, v88));
LABEL_136:
                        if (!v89)
                        {
                          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                          std::__shared_weak_count::__release_weak(size);
                        }
                      }
LABEL_138:
                      if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v180) & 1) != 0)
                      {
                        if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v175) & 1) != 0)
                        {
                          ANEMachineIR::Validators::InferOutputShape((uint64_t)a2, a3, a6, &v173);
                          v94 = a5[1] - *a5;
                          if (v174 - (_BYTE *)v173 == v94)
                          {
                            if (!memcmp(v173, (const void *)*a5, v174 - (_BYTE *)v173))
                            {
                              if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v159) & 1) != 0)
                              {
                                MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a7);
                              }
                              else
                              {
                                *(_OWORD *)(a7 + 8) = *(_OWORD *)&v159.__r_.__value_.__r.__words[1];
                                *(_OWORD *)&v159.__r_.__value_.__r.__words[1] = 0uLL;
                                *(_OWORD *)(a7 + 24) = v160;
                                *(_QWORD *)(a7 + 40) = v161;
                                v160 = 0uLL;
                                v161 = 0;
                                *(_QWORD *)a7 = MEMORY[0x24BE620D8] + 16;
                                *(_DWORD *)(a7 + 48) = v162;
                              }
                              MEMORY[0x20BCFEAEC](&v159);
                            }
                            else
                            {
                              ANEMachineIR::Utils::ShapeString(a5);
                              ANEMachineIR::Utils::ShapeString((uint64_t *)&v173);
                              v95 = *(_QWORD *)(a1 + 8);
                              v165[0] = *(_QWORD *)a1;
                              v165[1] = v95;
                              if (v95)
                              {
                                v96 = (unint64_t *)(v95 + 8);
                                do
                                  v97 = __ldxr(v96);
                                while (__stxr(v97 + 1, v96));
                              }
                              std::operator+<char>();
                              v98 = std::string::append(&v166, " does not match inferred shape ");
                              v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
                              v167.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
                              *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v99;
                              v98->__r_.__value_.__l.__size_ = 0;
                              v98->__r_.__value_.__r.__words[2] = 0;
                              v98->__r_.__value_.__r.__words[0] = 0;
                              if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v100 = &v169;
                              else
                                v100 = (std::string *)v169.__r_.__value_.__r.__words[0];
                              if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v101 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
                              else
                                v101 = v169.__r_.__value_.__l.__size_;
                              v102 = std::string::append(&v167, (const std::string::value_type *)v100, v101);
                              v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
                              v168.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
                              *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v103;
                              v102->__r_.__value_.__l.__size_ = 0;
                              v102->__r_.__value_.__r.__words[2] = 0;
                              v102->__r_.__value_.__r.__words[0] = 0;
                              v104 = std::string::append(&v168, ".");
                              v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
                              v164 = v104->__r_.__value_.__r.__words[2];
                              *(_OWORD *)v163 = v105;
                              v104->__r_.__value_.__l.__size_ = 0;
                              v104->__r_.__value_.__r.__words[2] = 0;
                              v104->__r_.__value_.__r.__words[0] = 0;
                              MEMORY[0x20BCFEAD4](a7, v165, 313, v163);
                              if (SHIBYTE(v164) < 0)
                                operator delete(v163[0]);
                              if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v168.__r_.__value_.__l.__data_);
                              if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v167.__r_.__value_.__l.__data_);
                              if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v166.__r_.__value_.__l.__data_);
                              std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)v165);
                              if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v169.__r_.__value_.__l.__data_);
                              if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v159.__r_.__value_.__l.__data_);
                            }
                          }
                          else
                          {
                            v124 = *(_QWORD *)(a1 + 8);
                            v172[0] = *(_QWORD *)a1;
                            v172[1] = v124;
                            if (v124)
                            {
                              v125 = (unint64_t *)(v124 + 8);
                              do
                                v126 = __ldxr(v125);
                              while (__stxr(v126 + 1, v125));
                              v94 = a5[1] - *a5;
                            }
                            std::to_string(&v167, v94 >> 3);
                            v127 = std::string::insert(&v167, 0, "Output rank ");
                            v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
                            v168.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
                            *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v128;
                            v127->__r_.__value_.__l.__size_ = 0;
                            v127->__r_.__value_.__r.__words[2] = 0;
                            v127->__r_.__value_.__r.__words[0] = 0;
                            v129 = std::string::append(&v168, " does not match rank of inferred shape ");
                            v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
                            v169.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
                            *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v130;
                            v129->__r_.__value_.__l.__size_ = 0;
                            v129->__r_.__value_.__r.__words[2] = 0;
                            v129->__r_.__value_.__r.__words[0] = 0;
                            std::to_string(&v166, (v174 - (_BYTE *)v173) >> 3);
                            if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v131 = &v166;
                            else
                              v131 = (std::string *)v166.__r_.__value_.__r.__words[0];
                            if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v132 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
                            else
                              v132 = v166.__r_.__value_.__l.__size_;
                            v133 = std::string::append(&v169, (const std::string::value_type *)v131, v132);
                            v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
                            v159.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
                            *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v134;
                            v133->__r_.__value_.__l.__size_ = 0;
                            v133->__r_.__value_.__r.__words[2] = 0;
                            v133->__r_.__value_.__r.__words[0] = 0;
                            v135 = std::string::append(&v159, ".");
                            v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
                            v171 = v135->__r_.__value_.__r.__words[2];
                            *(_OWORD *)v170 = v136;
                            v135->__r_.__value_.__l.__size_ = 0;
                            v135->__r_.__value_.__r.__words[2] = 0;
                            v135->__r_.__value_.__r.__words[0] = 0;
                            MEMORY[0x20BCFEAD4](a7, v172, 313, v170);
                            if (SHIBYTE(v171) < 0)
                              operator delete(v170[0]);
                            if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v159.__r_.__value_.__l.__data_);
                            if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v166.__r_.__value_.__l.__data_);
                            if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v169.__r_.__value_.__l.__data_);
                            if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v168.__r_.__value_.__l.__data_);
                            if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v167.__r_.__value_.__l.__data_);
                            std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)v172);
                          }
                          if (v173)
                          {
                            v174 = v173;
                            operator delete(v173);
                          }
                        }
                        else
                        {
                          *(_OWORD *)(a7 + 8) = v176;
                          v176 = 0uLL;
                          *(_OWORD *)(a7 + 24) = v177;
                          *(_QWORD *)(a7 + 40) = v178;
                          v177 = 0uLL;
                          v178 = 0;
                          *(_QWORD *)a7 = MEMORY[0x24BE620D8] + 16;
                          *(_DWORD *)(a7 + 48) = v179;
                        }
                        MEMORY[0x20BCFEAEC](&v175);
                      }
                      else
                      {
                        v106 = v182;
                        *(_OWORD *)(a7 + 8) = v181;
                        v181 = 0uLL;
                        *(_OWORD *)(a7 + 24) = v106;
                        *(_QWORD *)(a7 + 40) = v183;
                        v182 = 0uLL;
                        v183 = 0;
                        *(_QWORD *)a7 = MEMORY[0x24BE620D8] + 16;
                        *(_DWORD *)(a7 + 48) = v184;
                      }
                      MEMORY[0x20BCFEAEC](&v180);
                    }
                    else
                    {
                      *(_OWORD *)(a7 + 8) = v186;
                      v186 = 0uLL;
                      *(_OWORD *)(a7 + 24) = v187;
                      *(_QWORD *)(a7 + 40) = v188;
                      v187 = 0uLL;
                      v188 = 0;
                      *(_QWORD *)a7 = MEMORY[0x24BE620D8] + 16;
                      *(_DWORD *)(a7 + 48) = v189;
                    }
                    MEMORY[0x20BCFEAEC](&__p);
                    goto LABEL_277;
                  }
LABEL_292:
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
              }
              else if ((unint64_t)v141 >= 9)
              {
                v143 = v141 >> 3;
                v144 = 1;
                goto LABEL_246;
              }
LABEL_293:
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            if ((unint64_t)v38 <= 0x18)
              goto LABEL_293;
            v72 = 0;
            v71 = 0;
            v73 = &v37[v42];
            v69 = *(v73 - 4);
            v70 = *(v73 - 3);
            v65 = *(int **)(a6 + 72);
            v66 = *(_QWORD *)(a6 + 80) - (_QWORD)v65;
            v68 = 1;
          }
          if ((unint64_t)v66 <= 0xC)
            goto LABEL_292;
          v74 = v71;
          v75 = v66 >> 2;
          v76 = (char *)v65 + v66;
          v78 = *(int *)((char *)v65 + v66 - 16);
          v77 = *((int *)v76 - 3);
          v79 = 1;
          goto LABEL_168;
        }
        v58 = *(std::__shared_weak_count **)(a1 + 8);
        v192 = *(void **)a1;
        v193 = v58;
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        std::string::basic_string[abi:ne180100]<0>(v190, "Kernel must have group dimension equal to 'num_groups' or 1 if 'group_kernel_reuse' is set.");
        MEMORY[0x20BCFEAD4](a7, &v192, 315, v190);
        if (v191 < 0)
          operator delete(v190[0]);
        v55 = v193;
        if (v193)
        {
          v61 = (unint64_t *)&v193->__shared_owners_;
          do
            v57 = __ldaxr(v61);
          while (__stlxr(v57 - 1, v61));
LABEL_92:
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
      }
      else
      {
        *(_OWORD *)(a7 + 8) = v199;
        v199 = 0uLL;
        *(_OWORD *)(a7 + 24) = v200;
        *(_QWORD *)(a7 + 40) = v201;
        v200 = 0uLL;
        v201 = 0;
        *(_QWORD *)a7 = MEMORY[0x24BE620D8] + 16;
        *(_DWORD *)(a7 + 48) = v202;
      }
LABEL_277:
      MEMORY[0x20BCFEAEC](v198);
      return;
    }
    v29 = *(std::__shared_weak_count **)(a1 + 8);
    v205 = *(void **)a1;
    v206 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    std::string::basic_string[abi:ne180100]<0>(v203, "kernel dimension must have spatial dims equal to number of spatial dimensions of input.");
    MEMORY[0x20BCFEAD4](a7, &v205, 319, v203);
    if (v204 < 0)
      operator delete(v203[0]);
    v18 = v206;
    if (v206)
    {
      v32 = (unint64_t *)&v206->__shared_owners_;
      do
        v20 = __ldaxr(v32);
      while (__stlxr(v20 - 1, v32));
      goto LABEL_37;
    }
  }
}

void sub_206869688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  if (a57 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  MEMORY[0x20BCFEAEC](v57 - 232);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::`anonymous namespace'::ValidateStrides(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, unint64_t *a5@<X4>, MIL::ValidationResult *a6@<X8>)
{
  unint64_t v7;
  int *v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  void *v52[2];
  char v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *__p[2];
  char v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *v60[2];
  char v61;
  uint64_t v62;
  std::__shared_weak_count *v63;

  v7 = *a5;
  v8 = (int *)a5[4];
  if (*a5 == 3)
  {
    v9 = (int *)a5[3];
    if (v8 == v9)
      goto LABEL_93;
    v10 = *v9;
  }
  else
  {
    v9 = (int *)a5[3];
    v10 = 1;
    if (v7 < 2)
    {
      v12 = 0;
      v11 = 1;
      goto LABEL_8;
    }
  }
  if ((unint64_t)((char *)v8 - (char *)v9) <= 4)
    goto LABEL_92;
  v11 = *(v8 - 2);
  v12 = 1;
LABEL_8:
  if (v8 == v9)
LABEL_92:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v10 >= 0)
    v13 = v10;
  else
    v13 = -v10;
  if ((v13 - 1) > 1
    || (v11 >= 0 ? (v14 = v11) : (v14 = -v11),
        (v14 - 1) > 1
     || ((v15 = *(v8 - 1), v15 >= 0) ? (v16 = v15) : (v16 = -v15),
         (v16 - 1) >= 2)))
  {
    v18 = (std::__shared_weak_count *)a1[1];
    v62 = *a1;
    v63 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v60, "Strides on an individual conv must be positive 1 or 2. For larger strides, a decomposition must be used.");
    MEMORY[0x20BCFEAD4](a6, &v62, 315, v60);
    if (v61 < 0)
      operator delete(v60[0]);
    v21 = v63;
    if (v63)
    {
      v22 = (unint64_t *)&v63->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      goto LABEL_35;
    }
    return;
  }
  if ((v10 & 0x80000000) == 0 && (v11 & 0x80000000) == 0 && (v15 & 0x80000000) == 0)
  {
    if (v7 == 3)
    {
      if ((unint64_t)(a3[1] - *a3) <= 0x20)
        goto LABEL_94;
      v17 = *(_QWORD *)(a3[1] - 40);
    }
    else
    {
      v17 = 1;
    }
    v28 = *a3;
    v29 = a3[1] - *a3;
    if (v12)
    {
      if (v29 > 0x18)
      {
        v30 = *(_QWORD *)(v29 + v28 - 32);
        goto LABEL_53;
      }
    }
    else if (v29 > 0x10)
    {
      v30 = 1;
LABEL_53:
      v31 = *(_QWORD *)(v29 + v28 - 24);
      if (v7 == 3)
      {
        if ((unint64_t)(a2[1] - *a2) <= 0x18)
          goto LABEL_95;
        v32 = *(_QWORD *)(a2[1] - 32);
      }
      else
      {
        v32 = 1;
      }
      v33 = *a2;
      v34 = a2[1] - *a2;
      if (v12)
      {
        if (v34 > 0x10)
        {
          v35 = *(_QWORD *)(v34 + v33 - 24);
          goto LABEL_62;
        }
      }
      else if (v34 > 8)
      {
        v35 = 1;
LABEL_62:
        v36 = *(_QWORD *)(v34 + v33 - 16);
        if (v7 == 3)
        {
          if ((unint64_t)(a4[1] - *a4) <= 0x18)
            goto LABEL_96;
          v37 = *(_QWORD *)(a4[1] - 32) - 1;
        }
        else
        {
          v37 = 0;
        }
        v38 = *a4;
        v39 = a4[1] - *a4;
        if (v12)
        {
          if (v39 > 0x10)
          {
            v40 = *(_QWORD *)(v39 + v38 - 24) - 1;
LABEL_71:
            v41 = *(_QWORD *)(v39 + v38 - 16);
            if (v7 != 3)
            {
              v43 = 0;
              if (!v12)
              {
LABEL_74:
                v44 = a5[9];
                v45 = a5[10] - v44;
                if (v45 > 4)
                {
                  v46 = 0;
LABEL_79:
                  if (v36 <= ((v31 + v16 - 1) & (unint64_t)-(int)v16)
                            + (v41 - 1) * v16
                            - *(int *)(v45 + v44 - 8)
                    && v35 <= ((v30 + v14 - 1) & (unint64_t)-(int)v14) + v40 * v14 - v46
                    && v32 <= ((v17 + v13 - 1) & (unint64_t)-(int)v13) + v37 * v13 - v43)
                  {
                    MIL::ValidationResult::ValidationResult(a6);
                    return;
                  }
                  v48 = (std::__shared_weak_count *)a1[1];
                  v54 = *a1;
                  v55 = v48;
                  if (v48)
                  {
                    v49 = (unint64_t *)&v48->__shared_owners_;
                    do
                      v50 = __ldxr(v49);
                    while (__stxr(v50 + 1, v49));
                  }
                  std::string::basic_string[abi:ne180100]<0>(v52, "Stride programming constraint 6.1.6.1.1 violated.");
                  MEMORY[0x20BCFEAD4](a6, &v54, 315, v52);
                  if (v53 < 0)
                    operator delete(v52[0]);
                  v21 = v55;
                  if (v55)
                  {
                    v51 = (unint64_t *)&v55->__shared_owners_;
                    do
                      v23 = __ldaxr(v51);
                    while (__stlxr(v23 - 1, v51));
LABEL_35:
                    if (!v23)
                    {
                      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                      std::__shared_weak_count::__release_weak(v21);
                    }
                    return;
                  }
                  return;
                }
                goto LABEL_97;
              }
LABEL_77:
              v44 = a5[9];
              v47 = a5[10];
              v45 = v47 - v44;
              if (v47 - v44 > 0xC)
              {
                v46 = *(int *)(v47 - 16);
                goto LABEL_79;
              }
LABEL_97:
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            v42 = (int *)a5[9];
            if ((int *)a5[10] != v42)
            {
              v43 = *v42;
              if (!v12)
                goto LABEL_74;
              goto LABEL_77;
            }
LABEL_93:
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
        }
        else if (v39 > 8)
        {
          v40 = 0;
          goto LABEL_71;
        }
LABEL_96:
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
LABEL_95:
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
LABEL_94:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v24 = (std::__shared_weak_count *)a1[1];
  v58 = *a1;
  v59 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Negative strides are not implemented.");
  MEMORY[0x20BCFEAD4](a6, &v58, 315, __p);
  if (v57 < 0)
    operator delete(__p[0]);
  v21 = v59;
  if (v59)
  {
    v27 = (unint64_t *)&v59->__shared_owners_;
    do
      v23 = __ldaxr(v27);
    while (__stlxr(v23 - 1, v27));
    goto LABEL_35;
  }
}

void sub_206869E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::InferOutputShape(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char **v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  std::runtime_error *exception;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v6 = *(uint64_t **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = v5 - *(_QWORD *)a1;
  if (v5 == *(_QWORD *)a1)
    goto LABEL_119;
  v9 = (uint64_t)v7 >> 3;
  v10 = *v6;
  v11 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 == 3)
  {
    if (v7 > 0x18)
    {
      v12 = *a2;
      v13 = a2[1] - *a2;
      if (v13 > 0x20)
      {
        v14 = v6[v9 - 4];
        v15 = *(_QWORD *)(v13 + v12 - 40);
LABEL_10:
        v16 = v6[v9 - 3];
        v17 = *(_QWORD *)(v13 + v12 - 32);
        v18 = 1;
        goto LABEL_14;
      }
      goto LABEL_121;
    }
    goto LABEL_119;
  }
  if (v11 >= 2)
  {
    if (v7 > 0x10)
    {
      v12 = *a2;
      v13 = a2[1] - *a2;
      if (v13 > 0x18)
      {
        v15 = 1;
        v14 = 1;
        goto LABEL_10;
      }
LABEL_121:
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
LABEL_119:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 <= 8)
    goto LABEL_119;
  v12 = *a2;
  v13 = a2[1] - *a2;
  if (v13 <= 0x10)
    goto LABEL_121;
  v18 = 0;
  v17 = 1;
  v14 = 1;
  v16 = 1;
  v15 = 1;
LABEL_14:
  if (*(_BYTE *)(a3 + 18))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented. Shape inference for conv transpose.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v19 = v6[v9 - 2];
  v20 = *(_QWORD *)(v13 + v12 - 24);
  v21 = *(_QWORD *)(v13 + v12 - 8);
  if (v11 == 3)
  {
    v22 = *(int **)(a3 + 24);
    if (*(int **)(a3 + 32) == v22)
      goto LABEL_118;
    v23 = *v22;
    if (v23 >= 0)
      v24 = v23;
    else
      v24 = -v23;
    if ((v18 & 1) == 0)
      goto LABEL_21;
  }
  else
  {
    v24 = 1;
    if ((v18 & 1) == 0)
    {
LABEL_21:
      v26 = *(_QWORD *)(a3 + 24);
      v25 = *(_QWORD *)(a3 + 32);
      v27 = 1;
      goto LABEL_27;
    }
  }
  v26 = *(_QWORD *)(a3 + 24);
  v25 = *(_QWORD *)(a3 + 32);
  if ((unint64_t)(v25 - v26) <= 4)
    goto LABEL_118;
  LODWORD(v27) = *(_DWORD *)(v25 - 8);
  if ((int)v27 >= 0)
    v27 = v27;
  else
    v27 = -(int)v27;
LABEL_27:
  if (v25 == v26)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v28 = *(_DWORD *)(v25 - 4);
  if (v28 >= 0)
    v29 = v28;
  else
    v29 = -v28;
  if (v11 == 3)
  {
    v30 = *(int **)(a3 + 72);
    if (*(_QWORD *)(a3 + 80) - (_QWORD)v30 <= 4uLL)
      goto LABEL_118;
    v31 = v30[1] + (uint64_t)*v30;
  }
  else
  {
    v31 = 0;
  }
  v98 = v20;
  v99 = v19;
  v91 = v16;
  v92 = v17;
  v90 = v27;
  v97 = v29;
  if (!v18)
  {
    v32 = *(_QWORD *)(a3 + 72);
    v33 = *(_QWORD *)(a3 + 80) - v32;
    if (v33 > 4)
    {
      v89 = 0;
      goto LABEL_40;
    }
LABEL_118:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v32 = *(_QWORD *)(a3 + 72);
  v33 = *(_QWORD *)(a3 + 80) - v32;
  if (v33 <= 0xC)
    goto LABEL_118;
  v89 = *(int *)(*(_QWORD *)(a3 + 80) - 12) + (uint64_t)*(int *)(*(_QWORD *)(a3 + 80) - 16);
LABEL_40:
  v34 = v33 + v32;
  v96 = *(int *)(v34 - 8);
  v94 = v21;
  v95 = *(int *)(v34 - 4);
  v93 = *(_QWORD *)(a3 + 8);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v35 = (char **)(a4 + 2);
  v36 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), 1uLL);
  v37 = (char *)*a4;
  v38 = (char *)a4[1];
  v40 = (char *)&v36[v39];
  *v36 = v10;
  v41 = (char *)(v36 + 1);
  v42 = v36;
  while (v38 != v37)
  {
    v43 = *((_QWORD *)v38 - 1);
    v38 -= 8;
    *--v42 = v43;
  }
  *a4 = v42;
  a4[1] = v41;
  a4[2] = v40;
  if (v37)
  {
    operator delete(v37);
    v40 = *v35;
  }
  a4[1] = v41;
  v44 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 == 3)
  {
    v45 = (v14 - v15 + v24 + v31) / v24;
    if (v41 >= v40)
    {
      v47 = (char *)*a4;
      v48 = (uint64_t)&v41[-*a4] >> 3;
      v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 61)
        goto LABEL_120;
      v50 = v40 - v47;
      if (v50 >> 2 > v49)
        v49 = v50 >> 2;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
        v51 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v51 = v49;
      if (v51)
      {
        v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v51);
        v47 = (char *)*a4;
        v41 = (char *)a4[1];
      }
      else
      {
        v52 = 0;
      }
      v53 = (unint64_t *)&v52[8 * v48];
      v40 = &v52[8 * v51];
      *v53 = v45;
      v46 = (char *)(v53 + 1);
      while (v41 != v47)
      {
        v54 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *--v53 = v54;
      }
      *a4 = v53;
      a4[1] = v46;
      a4[2] = v40;
      if (v47)
      {
        operator delete(v47);
        v40 = *v35;
      }
    }
    else
    {
      v36[1] = v45;
      v46 = (char *)(v36 + 2);
    }
    a4[1] = v46;
    v44 = *(_QWORD *)a3;
    v41 = v46;
  }
  if (v44 < 2)
  {
    v58 = v95;
    v57 = v96;
  }
  else
  {
    v55 = (v91 - v92 + v90 + v89) / v90;
    if (v41 >= v40)
    {
      v59 = (char *)*a4;
      v60 = (uint64_t)&v41[-*a4] >> 3;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61)
        goto LABEL_120;
      v62 = v40 - v59;
      if (v62 >> 2 > v61)
        v61 = v62 >> 2;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v63 = v61;
      if (v63)
      {
        v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v63);
        v59 = (char *)*a4;
        v41 = (char *)a4[1];
      }
      else
      {
        v64 = 0;
      }
      v65 = (unint64_t *)&v64[8 * v60];
      v40 = &v64[8 * v63];
      *v65 = v55;
      v56 = (char *)(v65 + 1);
      if (v41 == v59)
      {
        v58 = v95;
      }
      else
      {
        v58 = v95;
        do
        {
          v66 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *--v65 = v66;
        }
        while (v41 != v59);
      }
      *a4 = v65;
      a4[1] = v56;
      a4[2] = v40;
      if (v59)
      {
        operator delete(v59);
        v40 = *v35;
      }
      v57 = v96;
    }
    else
    {
      *(_QWORD *)v41 = v55;
      v56 = v41 + 8;
      v58 = v95;
      v57 = v96;
    }
    a4[1] = v56;
    v41 = v56;
  }
  v67 = (v99 - v98 + v97 + v58 + v57) / v97;
  if (v41 >= v40)
  {
    v69 = (char *)*a4;
    v70 = (uint64_t)&v41[-*a4] >> 3;
    v71 = v70 + 1;
    if ((unint64_t)(v70 + 1) >> 61)
      goto LABEL_120;
    v72 = v40 - v69;
    if (v72 >> 2 > v71)
      v71 = v72 >> 2;
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
      v73 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v73 = v71;
    if (v73)
    {
      v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v73);
      v69 = (char *)*a4;
      v41 = (char *)a4[1];
    }
    else
    {
      v74 = 0;
    }
    v75 = &v74[8 * v70];
    v40 = &v74[8 * v73];
    *(_QWORD *)v75 = v67;
    v68 = v75 + 8;
    while (v41 != v69)
    {
      v76 = *((_QWORD *)v41 - 1);
      v41 -= 8;
      *((_QWORD *)v75 - 1) = v76;
      v75 -= 8;
    }
    *a4 = v75;
    a4[1] = v68;
    a4[2] = v40;
    if (v69)
    {
      operator delete(v69);
      v40 = *v35;
    }
  }
  else
  {
    *(_QWORD *)v41 = v67;
    v68 = v41 + 8;
  }
  v77 = v93 * v94;
  a4[1] = v68;
  if (v68 < v40)
  {
    *(_QWORD *)v68 = v77;
    v78 = v68 + 8;
    goto LABEL_117;
  }
  v79 = (char *)*a4;
  v80 = (uint64_t)&v68[-*a4] >> 3;
  v81 = v80 + 1;
  if ((unint64_t)(v80 + 1) >> 61)
LABEL_120:
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  v82 = v40 - v79;
  if (v82 >> 2 > v81)
    v81 = v82 >> 2;
  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
    v83 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v83 = v81;
  if (v83)
  {
    v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v83);
    v79 = (char *)*a4;
    v68 = (char *)a4[1];
  }
  else
  {
    v84 = 0;
  }
  v85 = &v84[8 * v80];
  v86 = &v84[8 * v83];
  *(_QWORD *)v85 = v77;
  v78 = v85 + 8;
  while (v68 != v79)
  {
    v87 = *((_QWORD *)v68 - 1);
    v68 -= 8;
    *((_QWORD *)v85 - 1) = v87;
    v85 -= 8;
  }
  *a4 = v85;
  a4[1] = v78;
  a4[2] = v86;
  if (v79)
    operator delete(v79);
LABEL_117:
  a4[1] = v78;
}

void sub_20686A46C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::`anonymous namespace'::CheckKernelSizeLimits(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  void *v37[2];
  char v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  void *v41[2];
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *__p[2];
  char v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void *v49[2];
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;

  if (*(_QWORD *)a4 == 3)
  {
    v7 = *a2;
    v8 = a2[1] - *a2;
    if (v8 > 0x20)
    {
      v9 = *(_QWORD *)(v8 + v7 - 40);
LABEL_7:
      v10 = *(_QWORD *)(v8 + v7 - 32);
      goto LABEL_10;
    }
    goto LABEL_67;
  }
  v7 = *a2;
  v8 = a2[1] - *a2;
  if (*(_QWORD *)a4 >= 2uLL)
  {
    if (v8 > 0x18)
    {
      v9 = 1;
      goto LABEL_7;
    }
LABEL_67:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 <= 0x10)
    goto LABEL_67;
  v10 = 1;
  v9 = 1;
LABEL_10:
  v11 = *(_QWORD *)(v8 + v7 - 24);
  v12 = 29;
  if (a3 == 4)
    v12 = 13;
  if (v11 <= v12)
  {
    if (v10 < 0x1E)
    {
      if (v9 < 0x11)
      {
        v27 = *(_QWORD *)(a4 + 96);
        v28 = *(_QWORD *)(a4 + 104);
        if (v27 == 1)
          v29 = 1;
        else
          v29 = 2;
        if (v27)
          v30 = v29;
        else
          v30 = 0;
        if (v28 == 1)
          v31 = 1;
        else
          v31 = 2;
        if (v28)
          v32 = v31;
        else
          v32 = 0;
        if (ANEMachineIR::Validators::KernelDataBytesPerNE(a2, a3, 0, 0, 1, v30, v32, *(unsigned __int8 *)(a4 + 17)) <= 0x10000)
        {
          MIL::ValidationResult::ValidationResult(a5);
          return;
        }
        v33 = (std::__shared_weak_count *)a1[1];
        v39 = *a1;
        v40 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldxr(p_shared_owners);
          while (__stxr(v35 + 1, p_shared_owners));
        }
        std::string::basic_string[abi:ne180100]<0>(v37, "KMEM limits exceeded by kernel data.");
        MEMORY[0x20BCFEAD4](a5, &v39, 318, v37);
        if (v38 < 0)
          operator delete(v37[0]);
        v16 = v40;
        if (v40)
        {
          v36 = (unint64_t *)&v40->__shared_owners_;
          do
            v18 = __ldaxr(v36);
          while (__stlxr(v18 - 1, v36));
          goto LABEL_63;
        }
      }
      else
      {
        v23 = (std::__shared_weak_count *)a1[1];
        v43 = *a1;
        v44 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        std::string::basic_string[abi:ne180100]<0>(v41, "Maximum kernel depth exceeded.");
        MEMORY[0x20BCFEAD4](a5, &v43, 315, v41);
        if (v42 < 0)
          operator delete(v41[0]);
        v16 = v44;
        if (v44)
        {
          v26 = (unint64_t *)&v44->__shared_owners_;
          do
            v18 = __ldaxr(v26);
          while (__stlxr(v18 - 1, v26));
          goto LABEL_63;
        }
      }
    }
    else
    {
      v19 = (std::__shared_weak_count *)a1[1];
      v47 = *a1;
      v48 = v19;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Maximum kernel height exceeded.");
      MEMORY[0x20BCFEAD4](a5, &v47, 315, __p);
      if (v46 < 0)
        operator delete(__p[0]);
      v16 = v48;
      if (v48)
      {
        v22 = (unint64_t *)&v48->__shared_owners_;
        do
          v18 = __ldaxr(v22);
        while (__stlxr(v18 - 1, v22));
        goto LABEL_63;
      }
    }
  }
  else
  {
    v13 = (std::__shared_weak_count *)a1[1];
    v51 = *a1;
    v52 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    std::string::basic_string[abi:ne180100]<0>(v49, "Maximum kernel width exceeded.");
    MEMORY[0x20BCFEAD4](a5, &v51, 315, v49);
    if (v50 < 0)
      operator delete(v49[0]);
    v16 = v52;
    if (v52)
    {
      v17 = (unint64_t *)&v52->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_63:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
}

void sub_20686A7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ValidateChannelVectorShape(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, MIL::ValidationResult *a6@<X8>)
{
  _QWORD **v11;
  uint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  void *v28[2];
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *v32[2];
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *__p[2];
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v11 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  if ((char *)v11[1] - (char *)*v11 == 8)
  {
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v11 + 16))(**v11);
    if (v12)
    {
      if (a5)
        v13 = a3 / a4;
      else
        v13 = a3;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12) == v13)
      {
        MIL::ValidationResult::ValidationResult(a6);
        return;
      }
      v24 = (std::__shared_weak_count *)a1[1];
      v30 = *a1;
      v31 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v28, "Channel does not match number of output filters.");
      MEMORY[0x20BCFEAD4](a6, &v30, 315, v28);
      if (v29 < 0)
        operator delete(v28[0]);
      v17 = v31;
      if (v31)
      {
        v27 = (unint64_t *)&v31->__shared_owners_;
        do
          v19 = __ldaxr(v27);
        while (__stlxr(v19 - 1, v27));
LABEL_34:
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    else
    {
      v20 = (std::__shared_weak_count *)a1[1];
      v34 = *a1;
      v35 = v20;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      std::string::basic_string[abi:ne180100]<0>(v32, "Channel vector shape must be static.");
      MEMORY[0x20BCFEAD4](a6, &v34, 315, v32);
      if (v33 < 0)
        operator delete(v32[0]);
      v17 = v35;
      if (v35)
      {
        v23 = (unint64_t *)&v35->__shared_owners_;
        do
          v19 = __ldaxr(v23);
        while (__stlxr(v19 - 1, v23));
        goto LABEL_34;
      }
    }
  }
  else
  {
    v14 = (std::__shared_weak_count *)a1[1];
    v38 = *a1;
    v39 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Expected a channel vector for parameter shape.");
    MEMORY[0x20BCFEAD4](a6, &v38, 315, __p);
    if (v37 < 0)
      operator delete(__p[0]);
    v17 = v39;
    if (v39)
    {
      v18 = (unint64_t *)&v39->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      goto LABEL_34;
    }
  }
}

void sub_20686AA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

unint64_t ANEMachineIR::Validators::KernelDataBytesPerNE(uint64_t *a1, int a2, unsigned int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *a1;
  v9 = a1[1] - *a1;
  v10 = v9 >> 3;
  v11 = (v9 >> 3) - 3;
  if (v9 >> 3 == 6)
  {
    v12 = *(_QWORD *)(v8 + 8);
    goto LABEL_5;
  }
  if (v11 >= 2)
  {
    v12 = 1;
LABEL_5:
    if ((unint64_t)v9 > 0x18)
    {
      v13 = *(_QWORD *)(v8 + 8 * v10 - 32);
      goto LABEL_9;
    }
LABEL_48:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if ((unint64_t)v9 <= 0x10)
    goto LABEL_48;
  v13 = 1;
  v12 = 1;
LABEL_9:
  v14 = *(_QWORD *)(v8 + 8 * v11);
  v15 = *(_QWORD *)(v8 + 8 * v10 - 16);
  v16 = 128;
  if (!a8)
    v16 = 0;
  v17 = v16 + vcvtd_n_u64_f64(ceil((double)(unint64_t)((uint64_t)(2 << (a3 - 1)) << (a2 == 4)) * 0.015625), 6uLL);
  if (a3)
    v16 = v17;
  if (a6 == 1)
  {
    if ((a4 & 1) != 0)
    {
      v18 = v16 + 2;
      if (a7 != 2)
      {
        v19 = a7 == 1;
        v16 += 4;
LABEL_24:
        if (!v19)
          v16 = v18;
        v20 = 0;
        goto LABEL_43;
      }
      v20 = 0;
      v16 += 2;
LABEL_40:
      v20 += 2 * a5;
      goto LABEL_43;
    }
    v18 = v16 + 64;
    if (a7 != 2)
    {
      v19 = a7 == 1;
      v16 += 128;
      goto LABEL_24;
    }
    v20 = 0;
    v16 += 64;
LABEL_42:
    v20 += vcvtd_n_u64_f64(ceil((double)(unint64_t)(2 * a5) * 0.015625), 6uLL);
    goto LABEL_43;
  }
  if (a7 != 1)
  {
    if (a6 == 2)
    {
      if ((a4 & 1) != 0)
      {
        v20 = 2 * a5;
        if (a7 != 2)
          goto LABEL_43;
        goto LABEL_40;
      }
      goto LABEL_33;
    }
    if (a7 == 2)
    {
      v20 = 0;
      if (a4)
        goto LABEL_40;
      goto LABEL_42;
    }
LABEL_38:
    v20 = 0;
    goto LABEL_43;
  }
  if ((a4 & 1) == 0)
  {
    v16 += 64;
    if (a6 == 2)
    {
LABEL_33:
      v20 = vcvtd_n_u64_f64(ceil((double)(unint64_t)(2 * a5) * 0.015625), 6uLL);
      if (a7 != 2)
        goto LABEL_43;
      goto LABEL_42;
    }
    goto LABEL_38;
  }
  v16 += 2;
  v20 = 2 * a5;
  if (a6 != 2)
    v20 = 0;
LABEL_43:
  v21 = 8;
  if (a2 == 4)
    v21 = 16;
  if (a3)
    v21 = a3;
  return v16 + v20 + vcvtpd_u64_f64((double)(unint64_t)(v21 * a5 * v12 * v13 * v14 * v15) * 0.125);
}

uint64_t ANEMachineIR::Validators::ParseConvParameterValues@<X0>(MIL::IRObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  MIL::IRValueType *ParameterType;
  ANEMachineIR::Utils *v11;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const MIL::IRTensorValueType *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  MIL::IRValueType *Type;
  ANEMachineIR::Utils *v24;
  const MIL::IRTensorValueType *v25;
  void *v26;
  _QWORD *v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t ParameterValue;
  _BYTE *v32;
  int v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  MIL::IRValueType *v48;
  uint64_t v49;
  MIL::IRValueType *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  MIL::IRValue *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  MIL::IRValueType *v59;
  uint64_t v60;
  MIL::IRValueType *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  BOOL v67;
  uint64_t v68;
  MIL::IRValueType *v69;
  uint64_t v70;
  _QWORD **v71;
  uint64_t v72;
  MIL::IRValue *v73;
  void *Data;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void **v78;
  _DWORD *v79;
  _DWORD *v80;
  unint64_t v81;
  char *v82;
  _DWORD *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  char *v105;
  void **v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  int v118;
  MIL::IRValueType *v119;
  uint64_t v120;
  _QWORD **v121;
  uint64_t v122;
  MIL::IRValue *v123;
  std::__shared_weak_count *v124;
  unint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  char *v138;
  void **v139;
  uint64_t v140;
  _QWORD *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  int v150;
  MIL::IRValueType *v151;
  uint64_t v152;
  _QWORD **v153;
  uint64_t v154;
  MIL::IRValue *v155;
  std::__shared_weak_count *v156;
  unint64_t i;
  uint64_t *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  int v177;
  void *__p;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  int v182;
  void *v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  int v187;
  void *v188[2];
  char v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  void *v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  void *v201;
  std::__shared_weak_count *v202;
  char v203;

  std::string::basic_string[abi:ne180100]<0>(&v194, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v11 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v195) < 0)
    operator delete(v194);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  v13 = (std::__shared_weak_count *)LocationPtr[1];
  v192 = *LocationPtr;
  v193 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&v183, "x");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ne_conv");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v192, (uint64_t)v11, (uint64_t)&v183, (uint64_t)&__p, (MIL::ValidationResult *)&v194);
  if (SHIBYTE(v179) < 0)
    operator delete(__p);
  if (SHIBYTE(v184) < 0)
    operator delete(v183);
  v16 = v193;
  if (v193)
  {
    v17 = (unint64_t *)&v193->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v194) & 1) == 0)
  {
    *(_OWORD *)(a5 + 8) = v195;
    v195 = 0uLL;
    *(_OWORD *)(a5 + 24) = v196;
    *(_QWORD *)(a5 + 40) = v197;
    v196 = 0uLL;
    v197 = 0;
    *(_QWORD *)a5 = MEMORY[0x24BE620D8] + 16;
    *(_DWORD *)(a5 + 48) = v198;
    return MEMORY[0x20BCFEAEC](&v194);
  }
  ANEMachineIR::Utils::GetStaticTensorShape(v11, v19, (uint64_t)&v183);
  v20 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v20;
    operator delete(v20);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  v21 = v183;
  *(_QWORD *)a2 = v183;
  v171 = v184;
  *(_OWORD *)(a2 + 8) = v184;
  v22 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 176))(a1);
  if (*(_QWORD *)(v22 + 8) == *(_QWORD *)v22)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v22);
  v24 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
  ANEMachineIR::Utils::GetStaticTensorShape(v24, v25, (uint64_t)&v183);
  v26 = *(void **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v26;
    operator delete(v26);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  v27 = v183;
  *(_QWORD *)a3 = v183;
  v28 = (_BYTE *)v184;
  *(_OWORD *)(a3 + 8) = v184;
  v29 = (v28 - (_BYTE *)v27) >> 3;
  if (v29 != (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)
  {
    v34 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v35 = (std::__shared_weak_count *)v34[1];
    v190 = *v34;
    v191 = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    std::string::basic_string[abi:ne180100]<0>(v188, "Output should have the same rank as x parameter");
    MEMORY[0x20BCFEAD4](a5, &v190, 315, v188);
    if (v189 < 0)
      operator delete(v188[0]);
    v38 = v191;
    if (v191)
    {
      v39 = (unint64_t *)&v191->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    return MEMORY[0x20BCFEAEC](&v194);
  }
  if (v28 == (_BYTE *)v27)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v30 = v27[v29 - 1];
  std::string::basic_string[abi:ne180100]<0>(&v183, "group_kernel_reuse");
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  v33 = ParameterValue
     && (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue)
     && (v32 = (_BYTE *)MEMORY[0x20BCFEEA0]()) != 0
     && *v32 != 0;
  if (SHIBYTE(v184) < 0)
    operator delete(v183);
  std::string::basic_string[abi:ne180100]<0>(&v183, "num_groups");
  v41 = MIL::IROperation::TryGetParameterValue();
  if (v41
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41)
    && (v42 = (int *)MEMORY[0x20BCFEEC4]()) != 0)
  {
    v43 = *v42;
  }
  else
  {
    v43 = 1;
  }
  if (SHIBYTE(v184) < 0)
    operator delete(v183);
  std::string::basic_string[abi:ne180100]<0>(&v183, "bias");
  v44 = MIL::IROperation::TryGetParameterValue();
  v45 = v44;
  if (SHIBYTE(v184) < 0)
  {
    operator delete(v183);
    if (!v45)
      goto LABEL_57;
  }
  else if (!v44)
  {
    goto LABEL_57;
  }
  v46 = MIL::IRValue::AsTensor((MIL::IRValue *)v45);
  if (MEMORY[0x20BCFEE7C](v46))
  {
    v45 = 1;
  }
  else
  {
    v47 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v48 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 32))(v45);
    v49 = MIL::IRValueType::AsTensorType(v48);
    ANEMachineIR::Validators::ValidateChannelVectorShape(v47, v49, v30, v43, v33, (MIL::ValidationResult *)a5);
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)a5) & 1) == 0)
      return MEMORY[0x20BCFEAEC](&v194);
    v50 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 32))(v45);
    v51 = MIL::IRValueType::AsTensorType(v50);
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 96))(v51);
    if (*(_QWORD *)(v52 + 8) == *(_QWORD *)v52)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v53 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v52);
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 48))(v53);
    MEMORY[0x20BCFEAEC](a5);
  }
LABEL_57:
  std::string::basic_string[abi:ne180100]<0>(&v183, "post_scale");
  v54 = MIL::IROperation::TryGetParameterValue();
  v55 = (MIL::IRValue *)v54;
  if (SHIBYTE(v184) < 0)
  {
    operator delete(v183);
    if (v55)
      goto LABEL_59;
LABEL_62:
    v57 = 0;
    goto LABEL_66;
  }
  if (!v54)
    goto LABEL_62;
LABEL_59:
  v56 = MIL::IRValue::AsTensor(v55);
  if (MEMORY[0x20BCFEE7C](v56))
  {
    v57 = 1;
    goto LABEL_66;
  }
  v58 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  v59 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v55 + 32))(v55);
  v60 = MIL::IRValueType::AsTensorType(v59);
  ANEMachineIR::Validators::ValidateChannelVectorShape(v58, v60, v30, v43, v33, (MIL::ValidationResult *)a5);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)a5) & 1) != 0)
  {
    v61 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v55 + 32))(v55);
    v62 = MIL::IRValueType::AsTensorType(v61);
    v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 96))(v62);
    if (*(_QWORD *)(v63 + 8) == *(_QWORD *)v63)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v64 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v63);
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 48))(v64);
    MEMORY[0x20BCFEAEC](a5);
LABEL_66:
    std::string::basic_string[abi:ne180100]<0>(&v183, "transposed");
    v65 = MIL::IROperation::TryGetParameterValue();
    v67 = v65
       && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 40))(v65)
       && (v66 = (_BYTE *)MEMORY[0x20BCFEEA0]()) != 0
       && *v66 != 0;
    v68 = ((v171 - (uint64_t)v21) >> 3) - 2;
    if (SHIBYTE(v184) < 0)
      operator delete(v183);
    v172 = ((v171 - (uint64_t)v21) >> 3) - 2;
    *(_QWORD *)a4 = v68;
    *(_QWORD *)(a4 + 8) = v43;
    *(_BYTE *)(a4 + 16) = v33;
    *(_BYTE *)(a4 + 17) = 0;
    *(_BYTE *)(a4 + 18) = v67;
    *(_QWORD *)(a4 + 96) = v45;
    *(_QWORD *)(a4 + 104) = v57;
    std::string::basic_string[abi:ne180100]<0>(&__p, "strides");
    v69 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    v70 = MIL::IRValueType::AsTensorType(v69);
    if (SHIBYTE(v179) < 0)
      operator delete(__p);
    v71 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 96))(v70);
    if (v71[1] == *v71)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v72 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v71 + 16))(**v71);
    if (v72)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 48))(v72) == v68)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "strides");
        v73 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
        MIL::IRValue::AsTensor(v73);
        Data = (void *)MIL::IRTensorValue::GetDataView<int>();
        v76 = v75;
        v173 = Data;
        *(_QWORD *)&v174 = v75;
        if (SHIBYTE(v179) < 0)
          operator delete(__p);
        *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
        if (v76)
        {
          v77 = 0;
          v78 = (void **)(a4 + 24);
          do
          {
            v79 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v173, v77);
            v80 = v79;
            v82 = *(char **)(a4 + 32);
            v81 = *(_QWORD *)(a4 + 40);
            if ((unint64_t)v82 >= v81)
            {
              v84 = (char *)*v78;
              v85 = (v82 - (_BYTE *)*v78) >> 2;
              v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62)
                std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
              v87 = v81 - (_QWORD)v84;
              if (v87 >> 1 > v86)
                v86 = v87 >> 1;
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                v88 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v88 = v86;
              if (v88)
              {
                v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 40, v88);
                v84 = *(char **)(a4 + 24);
                v82 = *(char **)(a4 + 32);
              }
              else
              {
                v89 = 0;
              }
              v90 = &v89[4 * v85];
              *(_DWORD *)v90 = *v80;
              v83 = v90 + 4;
              while (v82 != v84)
              {
                v91 = *((_DWORD *)v82 - 1);
                v82 -= 4;
                *((_DWORD *)v90 - 1) = v91;
                v90 -= 4;
              }
              *(_QWORD *)(a4 + 24) = v90;
              *(_QWORD *)(a4 + 32) = v83;
              *(_QWORD *)(a4 + 40) = &v89[4 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *(_DWORD *)v82 = *v79;
              v83 = v82 + 4;
            }
            *(_QWORD *)(a4 + 32) = v83;
            ++v77;
          }
          while ((unint64_t)v174 > v77);
        }
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)&v183);
        v92 = v172;
        goto LABEL_119;
      }
      v100 = MIL::IRObject::GetLocationPtr(a1);
      v101 = *(_QWORD *)(v100 + 8);
      v173 = *(void **)v100;
      *(_QWORD *)&v174 = v101;
      if (v101)
      {
        v102 = (unint64_t *)(v101 + 8);
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "'strides' vector must have equal length to the number of spatial dimensions.");
      v92 = v68;
      MEMORY[0x20BCFEAD4](&v183, &v173, 315, &__p);
      if (SHIBYTE(v179) < 0)
        operator delete(__p);
      v97 = (std::__shared_weak_count *)v174;
      if ((_QWORD)v174)
      {
        v104 = (unint64_t *)(v174 + 8);
        do
          v99 = __ldaxr(v104);
        while (__stlxr(v99 - 1, v104));
        goto LABEL_117;
      }
    }
    else
    {
      v93 = MIL::IRObject::GetLocationPtr(a1);
      v94 = *(_QWORD *)(v93 + 8);
      v173 = *(void **)v93;
      *(_QWORD *)&v174 = v94;
      if (v94)
      {
        v95 = (unint64_t *)(v94 + 8);
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "'strides' parameter must have static shape.");
      v92 = v68;
      MEMORY[0x20BCFEAD4](&v183, &v173, 302, &__p);
      if (SHIBYTE(v179) < 0)
        operator delete(__p);
      v97 = (std::__shared_weak_count *)v174;
      if ((_QWORD)v174)
      {
        v98 = (unint64_t *)(v174 + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
LABEL_117:
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
    }
LABEL_119:
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v183) & 1) == 0)
    {
      *(_OWORD *)(a5 + 8) = v184;
      v184 = 0uLL;
      *(_OWORD *)(a5 + 24) = v185;
      *(_QWORD *)(a5 + 40) = v186;
      v185 = 0uLL;
      v186 = 0;
      *(_QWORD *)a5 = MEMORY[0x24BE620D8] + 16;
      *(_DWORD *)(a5 + 48) = v187;
LABEL_230:
      MEMORY[0x20BCFEAEC](&v183);
      return MEMORY[0x20BCFEAEC](&v194);
    }
    v106 = (void **)(a4 + 72);
    v105 = *(char **)(a4 + 72);
    *(_QWORD *)(a4 + 80) = v105;
    v107 = 2 * v92;
    if (v92)
    {
      v108 = 0;
      v109 = (_QWORD *)(a4 + 88);
      do
      {
        if ((unint64_t)v105 >= *v109)
        {
          v111 = (char *)*v106;
          v112 = (v105 - (_BYTE *)*v106) >> 2;
          v113 = v112 + 1;
          if ((unint64_t)(v112 + 1) >> 62)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v114 = *v109 - (_QWORD)v111;
          if (v114 >> 1 > v113)
            v113 = v114 >> 1;
          if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
            v115 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v115 = v113;
          if (v115)
          {
            v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 88, v115);
            v111 = *(char **)(a4 + 72);
            v105 = *(char **)(a4 + 80);
          }
          else
          {
            v116 = 0;
          }
          v117 = &v116[4 * v112];
          *(_DWORD *)v117 = 0;
          v110 = v117 + 4;
          while (v105 != v111)
          {
            v118 = *((_DWORD *)v105 - 1);
            v105 -= 4;
            *((_DWORD *)v117 - 1) = v118;
            v117 -= 4;
          }
          *(_QWORD *)(a4 + 72) = v117;
          *(_QWORD *)(a4 + 80) = v110;
          *(_QWORD *)(a4 + 88) = &v116[4 * v115];
          if (v111)
            operator delete(v111);
        }
        else
        {
          *(_DWORD *)v105 = 0;
          v110 = v105 + 4;
        }
        *(_QWORD *)(a4 + 80) = v110;
        ++v108;
        v105 = v110;
      }
      while (v108 != v107);
    }
    std::string::basic_string[abi:ne180100]<0>(&v173, "pad");
    v119 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType();
    if (SHIBYTE(v174) < 0)
      operator delete(v173);
    if (!v119)
      goto LABEL_150;
    v120 = MIL::IRValueType::AsTensorType(v119);
    v121 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 96))(v120);
    if (v121[1] == *v121)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v122 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v121 + 16))(**v121);
    if (v122)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 48))(v122) == v107)
      {
        std::string::basic_string[abi:ne180100]<0>(&v173, "pad");
        v123 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
        MIL::IRValue::AsTensor(v123);
        v201 = (void *)MIL::IRTensorValue::GetDataView<int>();
        v202 = v124;
        if (SHIBYTE(v174) < 0)
          operator delete(v173);
        if (v172)
        {
          v125 = 0;
          do
          {
            *((_DWORD *)*v106 + v125) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v201, v125);
            ++v125;
          }
          while (v107 != v125);
        }
LABEL_150:
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)&__p);
        goto LABEL_172;
      }
      v133 = MIL::IRObject::GetLocationPtr(a1);
      v134 = *(std::__shared_weak_count **)(v133 + 8);
      v201 = *(void **)v133;
      v202 = v134;
      if (v134)
      {
        v135 = (unint64_t *)&v134->__shared_owners_;
        do
          v136 = __ldxr(v135);
        while (__stxr(v136 + 1, v135));
      }
      std::string::basic_string[abi:ne180100]<0>(&v173, "'pad' vector must have equal length to double the number of spatial dimensions.");
      MEMORY[0x20BCFEAD4](&__p, &v201, 315, &v173);
      if (SHIBYTE(v174) < 0)
        operator delete(v173);
      v130 = v202;
      if (v202)
      {
        v137 = (unint64_t *)&v202->__shared_owners_;
        do
          v132 = __ldaxr(v137);
        while (__stlxr(v132 - 1, v137));
        goto LABEL_170;
      }
    }
    else
    {
      v126 = MIL::IRObject::GetLocationPtr(a1);
      v127 = *(std::__shared_weak_count **)(v126 + 8);
      v201 = *(void **)v126;
      v202 = v127;
      if (v127)
      {
        v128 = (unint64_t *)&v127->__shared_owners_;
        do
          v129 = __ldxr(v128);
        while (__stxr(v129 + 1, v128));
      }
      std::string::basic_string[abi:ne180100]<0>(&v173, "'pad' parameter must have static shape.");
      MEMORY[0x20BCFEAD4](&__p, &v201, 302, &v173);
      if (SHIBYTE(v174) < 0)
        operator delete(v173);
      v130 = v202;
      if (v202)
      {
        v131 = (unint64_t *)&v202->__shared_owners_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
LABEL_170:
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
    }
LABEL_172:
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p) & 1) == 0)
    {
      *(_OWORD *)(a5 + 8) = v179;
      v179 = 0uLL;
      *(_OWORD *)(a5 + 24) = v180;
      *(_QWORD *)(a5 + 40) = v181;
      v180 = 0uLL;
      v181 = 0;
      *(_QWORD *)a5 = MEMORY[0x24BE620D8] + 16;
      *(_DWORD *)(a5 + 48) = v182;
LABEL_229:
      MEMORY[0x20BCFEAEC](&__p);
      goto LABEL_230;
    }
    v139 = (void **)(a4 + 48);
    v138 = *(char **)(a4 + 48);
    *(_QWORD *)(a4 + 56) = v138;
    if (v172)
    {
      v140 = 0;
      v141 = (_QWORD *)(a4 + 64);
      do
      {
        if ((unint64_t)v138 >= *v141)
        {
          v143 = (char *)*v139;
          v144 = (v138 - (_BYTE *)*v139) >> 2;
          v145 = v144 + 1;
          if ((unint64_t)(v144 + 1) >> 62)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v146 = *v141 - (_QWORD)v143;
          if (v146 >> 1 > v145)
            v145 = v146 >> 1;
          if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
            v147 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v147 = v145;
          if (v147)
          {
            v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v147);
            v143 = *(char **)(a4 + 48);
            v138 = *(char **)(a4 + 56);
          }
          else
          {
            v148 = 0;
          }
          v149 = &v148[4 * v144];
          *(_DWORD *)v149 = 1;
          v142 = v149 + 4;
          while (v138 != v143)
          {
            v150 = *((_DWORD *)v138 - 1);
            v138 -= 4;
            *((_DWORD *)v149 - 1) = v150;
            v149 -= 4;
          }
          *(_QWORD *)(a4 + 48) = v149;
          *(_QWORD *)(a4 + 56) = v142;
          *(_QWORD *)(a4 + 64) = &v148[4 * v147];
          if (v143)
            operator delete(v143);
        }
        else
        {
          *(_DWORD *)v138 = 1;
          v142 = v138 + 4;
        }
        *(_QWORD *)(a4 + 56) = v142;
        ++v140;
        v138 = v142;
      }
      while (v140 != v172);
    }
    std::string::basic_string[abi:ne180100]<0>(&v201, "dilations");
    v151 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType();
    if (v203 < 0)
      operator delete(v201);
    if (!v151)
      goto LABEL_203;
    v152 = MIL::IRValueType::AsTensorType(v151);
    v153 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 96))(v152);
    if (v153[1] == *v153)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v154 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v153 + 16))(**v153);
    if (v154)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v154 + 48))(v154) == v172)
      {
        std::string::basic_string[abi:ne180100]<0>(&v201, "dilations");
        v155 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
        MIL::IRValue::AsTensor(v155);
        v199 = MIL::IRTensorValue::GetDataView<int>();
        v200 = v156;
        if (v203 < 0)
          operator delete(v201);
        if (v172)
        {
          for (i = 0; i != v172; ++i)
            *((_DWORD *)*v139 + i) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v199, i);
        }
LABEL_203:
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)&v173);
LABEL_225:
        if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v173) & 1) != 0)
        {
          MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a5);
        }
        else
        {
          *(_OWORD *)(a5 + 8) = v174;
          v174 = 0uLL;
          *(_OWORD *)(a5 + 24) = v175;
          *(_QWORD *)(a5 + 40) = v176;
          v175 = 0uLL;
          v176 = 0;
          *(_QWORD *)a5 = MEMORY[0x24BE620D8] + 16;
          *(_DWORD *)(a5 + 48) = v177;
        }
        MEMORY[0x20BCFEAEC](&v173);
        goto LABEL_229;
      }
      v165 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      v166 = (std::__shared_weak_count *)v165[1];
      v199 = *v165;
      v200 = v166;
      if (v166)
      {
        v167 = (unint64_t *)&v166->__shared_owners_;
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
      }
      std::string::basic_string[abi:ne180100]<0>(&v201, "'dilations' vector must have equal length to the number of spatial dimensions.");
      MEMORY[0x20BCFEAD4](&v173, &v199, 315, &v201);
      if (v203 < 0)
        operator delete(v201);
      v162 = v200;
      if (!v200)
        goto LABEL_225;
      v169 = (unint64_t *)&v200->__shared_owners_;
      do
        v164 = __ldaxr(v169);
      while (__stlxr(v164 - 1, v169));
    }
    else
    {
      v158 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      v159 = (std::__shared_weak_count *)v158[1];
      v199 = *v158;
      v200 = v159;
      if (v159)
      {
        v160 = (unint64_t *)&v159->__shared_owners_;
        do
          v161 = __ldxr(v160);
        while (__stxr(v161 + 1, v160));
      }
      std::string::basic_string[abi:ne180100]<0>(&v201, "'dilations' parameter must have static shape.");
      MEMORY[0x20BCFEAD4](&v173, &v199, 302, &v201);
      if (v203 < 0)
        operator delete(v201);
      v162 = v200;
      if (!v200)
        goto LABEL_225;
      v163 = (unint64_t *)&v200->__shared_owners_;
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
    }
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
    goto LABEL_225;
  }
  return MEMORY[0x20BCFEAEC](&v194);
}

void sub_20686BD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  uint64_t v48;

  if (*(char *)(v48 - 89) < 0)
    operator delete(*(void **)(v48 - 112));
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v48 - 128);
  MEMORY[0x20BCFEAEC](&a22);
  MEMORY[0x20BCFEAEC](&a32);
  MEMORY[0x20BCFEAEC](v48 - 184);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::Validators::ValidateNeConv@<X0>(MIL::IRObject *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v5;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  MIL::IRValueType *Type;
  uint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t ParameterValue;
  uint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  MIL::IRValueType *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  MIL::IRValueType *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  _BOOL4 v80;
  __int16 v81;
  __int16 v82;
  MIL::IRValue *v83;
  uint64_t v84;
  __int16 *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  int v107;
  void *v108[2];
  char v109;
  _QWORD v110[2];
  void *v111[2];
  char v112;
  _QWORD v113[2];
  void *v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  int v118;
  void *__p[2];
  char v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  uint64_t v132;
  __int16 v133;
  __int16 v134;
  _QWORD v135[2];
  __int16 v136;
  void *v137[2];
  char v138;
  _QWORD v139[2];
  void *v140[2];
  char v141;
  _QWORD v142[2];
  void *v143[2];
  char v144;
  _QWORD v145[2];
  void *v146[2];
  char v147;
  _QWORD v148[2];
  void *v149[2];
  char v150;
  _QWORD v151[2];
  void *v152[2];
  char v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  void *v156;
  void *v157;
  uint64_t v158;
  void *v159[2];
  char v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  void *v163[2];
  char v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  void *v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  char v176[8];
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  int v180;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v5 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v120 < 0)
    operator delete(__p[0]);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  v7 = (std::__shared_weak_count *)LocationPtr[1];
  v174 = *LocationPtr;
  v175 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  std::string::basic_string[abi:ne180100]<0>(&v169, "ne_conv");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v174, v5, (uint64_t)__p, (uint64_t)&v169, (MIL::ValidationResult *)v176);
  if (SHIBYTE(v170) < 0)
    operator delete(v169);
  if (v120 < 0)
    operator delete(__p[0]);
  v10 = v175;
  if (v175)
  {
    v11 = (unint64_t *)&v175->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)v176) & 1) != 0)
  {
    v13 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 176))(a1);
    if (*(_QWORD *)(v13 + 8) == *(_QWORD *)v13)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v13);
    v15 = MIL::IRValueType::AsTensorType(Type);
    v16 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v17 = (std::__shared_weak_count *)v16[1];
    v167 = *v16;
    v168 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "output");
    std::string::basic_string[abi:ne180100]<0>(&v114, "ne_conv");
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v167, v15, (uint64_t)__p, (uint64_t)&v114, (MIL::ValidationResult *)&v169);
    if (SHIBYTE(v115) < 0)
      operator delete(v114);
    if (v120 < 0)
      operator delete(__p[0]);
    v20 = v168;
    if (v168)
    {
      v21 = (unint64_t *)&v168->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v169) & 1) == 0)
    {
      *(_OWORD *)(a2 + 8) = v170;
      v170 = 0uLL;
      *(_OWORD *)(a2 + 24) = v171;
      *(_QWORD *)(a2 + 40) = v172;
      v171 = 0uLL;
      v172 = 0;
      *(_QWORD *)a2 = MEMORY[0x24BE620D8] + 16;
      *(_DWORD *)(a2 + 48) = v173;
LABEL_109:
      MEMORY[0x20BCFEAEC](&v169);
      return MEMORY[0x20BCFEAEC](v176);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "dense_kernel");
    ParameterValue = MIL::IROperation::TryGetParameterValue();
    if (v120 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "alternative_format_kernel_coefficients");
    v24 = MIL::IROperation::TryGetParameterValue();
    if (v120 < 0)
      operator delete(__p[0]);
    if (!(ParameterValue | v24))
    {
      v25 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      v26 = (std::__shared_weak_count *)v25[1];
      v165 = *v25;
      v166 = v26;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      std::string::basic_string[abi:ne180100]<0>(v163, "Must specify one of 'dense_kernel' and 'alternative_format_kernel_coefficients'");
      MEMORY[0x20BCFEAD4](a2, &v165, 319, v163);
      if (v164 < 0)
        operator delete(v163[0]);
      v29 = v166;
      if (!v166)
        goto LABEL_109;
      v30 = (unint64_t *)&v166->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      goto LABEL_56;
    }
    if (ParameterValue && v24)
    {
      v33 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      v34 = (std::__shared_weak_count *)v33[1];
      v161 = *v33;
      v162 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      std::string::basic_string[abi:ne180100]<0>(v159, "Cannot specify both of 'dense_kernel' and 'alternative_format_kernel_coefficients'");
      MEMORY[0x20BCFEAD4](a2, &v161, 319, v159);
      if (v160 < 0)
        operator delete(v159[0]);
      v29 = v162;
      if (!v162)
        goto LABEL_109;
      v37 = (unint64_t *)&v162->__shared_owners_;
      do
        v31 = __ldaxr(v37);
      while (__stlxr(v31 - 1, v37));
LABEL_56:
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      goto LABEL_109;
    }
    v157 = 0;
    v156 = 0;
    v158 = 0;
    if (ParameterValue)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "sparse_mask");
      v38 = MIL::IROperation::TryGetParameterValue();
      if (v120 < 0)
        operator delete(__p[0]);
      if (v38)
      {
        v39 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
        v40 = (std::__shared_weak_count *)v39[1];
        v154 = *v39;
        v155 = v40;
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        std::string::basic_string[abi:ne180100]<0>(v152, "'sparse_mask' is incompatible with 'dense_kernel'");
        MEMORY[0x20BCFEAD4](a2, &v154, 319, v152);
        if (v153 < 0)
          operator delete(v152[0]);
        v43 = v155;
        if (v155)
        {
          v44 = (unint64_t *)&v155->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        goto LABEL_107;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "sparse_num_nonzero");
      v52 = MIL::IROperation::TryGetParameterValue();
      if (v120 < 0)
        operator delete(__p[0]);
      if (v52)
      {
        v53 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
        v54 = v53[1];
        v151[0] = *v53;
        v151[1] = v54;
        if (v54)
        {
          v55 = (unint64_t *)(v54 + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        std::string::basic_string[abi:ne180100]<0>(v149, "'sparse_num_nonzero' is incompatible with 'dense_kernel'");
        MEMORY[0x20BCFEAD4](a2, v151, 319, v149);
        if (v150 < 0)
          operator delete(v149[0]);
        v51 = v151;
LABEL_106:
        std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)v51);
LABEL_107:
        if (v156)
        {
          v157 = v156;
          operator delete(v156);
        }
        goto LABEL_109;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "sparse_num_nonzero_per_filter");
      v57 = MIL::IROperation::TryGetParameterValue();
      if (v120 < 0)
        operator delete(__p[0]);
      if (v57)
      {
        v58 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
        v59 = v58[1];
        v148[0] = *v58;
        v148[1] = v59;
        if (v59)
        {
          v60 = (unint64_t *)(v59 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        std::string::basic_string[abi:ne180100]<0>(v146, "'sparse_num_nonzero_per_filter' is incompatible with 'dense_kernel'");
        MEMORY[0x20BCFEAD4](a2, v148, 319, v146);
        if (v147 < 0)
          operator delete(v146[0]);
        v51 = v148;
        goto LABEL_106;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "palette_table");
      v62 = MIL::IROperation::TryGetParameterValue();
      if (v120 < 0)
        operator delete(__p[0]);
      if (v62)
      {
        v63 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
        v64 = v63[1];
        v145[0] = *v63;
        v145[1] = v64;
        if (v64)
        {
          v65 = (unint64_t *)(v64 + 8);
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        std::string::basic_string[abi:ne180100]<0>(v143, "'palette_table' is incompatible with 'dense_kernel'");
        MEMORY[0x20BCFEAD4](a2, v145, 319, v143);
        if (v144 < 0)
          operator delete(v143[0]);
        v51 = v145;
        goto LABEL_106;
      }
      v68 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 32))(ParameterValue);
      v69 = MIL::IRValueType::AsTensorType(v68);
      v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 96))(v69);
      v71 = *(_QWORD **)v70;
      v72 = *(_QWORD **)(v70 + 8);
      while (v71 != v72)
      {
        v73 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v71 + 16))(*v71);
        if (!v73)
        {
          v90 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
          v91 = v90[1];
          v142[0] = *v90;
          v142[1] = v91;
          if (v91)
          {
            v92 = (unint64_t *)(v91 + 8);
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
          std::string::basic_string[abi:ne180100]<0>(v140, "kernel shape must be static.");
          MEMORY[0x20BCFEAD4](a2, v142, 319, v140);
          if (v141 < 0)
            operator delete(v140[0]);
          v51 = v142;
          goto LABEL_106;
        }
        __p[0] = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 48))(v73);
        std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v156, __p);
        ++v71;
      }
      v74 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 32))(ParameterValue);
      v75 = MIL::IRValueType::AsTensorType(v74);
      v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 88))(v75);
      if (v24)
        goto LABEL_73;
    }
    else
    {
      v46 = 4;
      if (v24)
      {
LABEL_73:
        v47 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
        v48 = v47[1];
        v139[0] = *v47;
        v139[1] = v48;
        if (v48)
        {
          v49 = (unint64_t *)(v48 + 8);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        std::string::basic_string[abi:ne180100]<0>(v137, "Alternative kernel (to dense) representations not yet implemented in MIL<aneflow>.");
        MEMORY[0x20BCFEAD4](a2, v139, 309, v137);
        if (v138 < 0)
          operator delete(v137[0]);
        v51 = v139;
        goto LABEL_106;
      }
    }
    v136 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "post_right_shift");
    MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v136, (_BYTE *)&v136 + 1, (MIL::ValidationResult *)a2);
    if (v120 < 0)
      operator delete(__p[0]);
    if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2))
      goto LABEL_107;
    MEMORY[0x20BCFEAEC](a2);
    if ((_BYTE)v136)
    {
      v76 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
      v77 = v76[1];
      v135[0] = *v76;
      v135[1] = v77;
      if (v77)
      {
        v78 = (unint64_t *)(v77 + 8);
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      ANEMachineIR::Validators::ValidatePostRightShiftRange((MIL::ValidationResult *)a2);
      std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)v135);
      if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2))
        goto LABEL_107;
      MEMORY[0x20BCFEAEC](a2);
    }
    v134 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "acc_left_shift");
    MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v134, (_BYTE *)&v134 + 1, (MIL::ValidationResult *)a2);
    if (v120 < 0)
      operator delete(__p[0]);
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2))
    {
      MEMORY[0x20BCFEAEC](a2);
      v133 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "acc_bias_shift");
      MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v133, (_BYTE *)&v133 + 1, (MIL::ValidationResult *)a2);
      if (v120 < 0)
        operator delete(__p[0]);
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2))
      {
        MEMORY[0x20BCFEAEC](a2);
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v127 = 0;
        v128 = 0;
        v129 = 0;
        v125 = 0;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        ANEMachineIR::Validators::ParseConvParameterValues(a1, (uint64_t)&v127, (uint64_t)&v130, (uint64_t)__p, (uint64_t)&v114);
        if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v114) & 1) != 0)
        {
          v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5) == 4;
          v81 = ANEMachineIR::Validators::BinaryPointFormatOffsets((ANEMachineIR::Validators *)(v46 == 4), v80);
          if (!v126)
            goto LABEL_140;
          v82 = v81;
          std::string::basic_string[abi:ne180100]<0>(&v103, "bias");
          v83 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
          MIL::IRValue::AsTensor(v83);
          v85 = (__int16 *)MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          if (SHIBYTE(v104) < 0)
          {
            v86 = v84;
            operator delete(v103);
            v84 = v86;
          }
          if (v84)
          {
            v87 = 2 * v84;
            while (1)
            {
              v88 = (unsigned __int16)*v85;
              if (!ANEMachineIR::Validators::NeuralEngineAccumulatorInitLegal(*v85, SHIBYTE(v133), SHIBYTE(v134), v82))
                break;
              if (!ANEMachineIR::Validators::NeuralEngineBiasShifterExponentLegal(v88, SHIBYTE(v133), SHIBYTE(v134), SHIBYTE(v82)))
              {
                v99 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
                v100 = v99[1];
                v110[0] = *v99;
                v110[1] = v100;
                if (v100)
                {
                  v101 = (unint64_t *)(v100 + 8);
                  do
                    v102 = __ldxr(v101);
                  while (__stxr(v102 + 1, v101));
                }
                std::string::basic_string[abi:ne180100]<0>(v108, "Illegal bias shift exponent.");
                MEMORY[0x20BCFEAD4](a2, v110, 315, v108);
                if (v109 < 0)
                  operator delete(v108[0]);
                v98 = v110;
                goto LABEL_163;
              }
              ++v85;
              v87 -= 2;
              if (!v87)
                goto LABEL_140;
            }
            v94 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
            v95 = v94[1];
            v113[0] = *v94;
            v113[1] = v95;
            if (v95)
            {
              v96 = (unint64_t *)(v95 + 8);
              do
                v97 = __ldxr(v96);
              while (__stxr(v97 + 1, v96));
            }
            std::string::basic_string[abi:ne180100]<0>(v111, "Accumulator initialization out of range.");
            MEMORY[0x20BCFEAD4](a2, v113, 315, v111);
            if (v112 < 0)
              operator delete(v111[0]);
            v98 = v113;
LABEL_163:
            std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)v98);
          }
          else
          {
LABEL_140:
            v89 = MIL::IRObject::GetLocationPtr(a1);
            ANEMachineIR::Validators::ValidateConvParameters(v89, (uint64_t *)&v127, (uint64_t *)&v156, v46, (uint64_t *)&v130, (uint64_t)__p, (uint64_t)&v103);
            if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v103) & 1) != 0)
            {
              MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
            }
            else
            {
              *(_OWORD *)(a2 + 8) = v104;
              v104 = 0uLL;
              *(_OWORD *)(a2 + 24) = v105;
              *(_QWORD *)(a2 + 40) = v106;
              v105 = 0uLL;
              v106 = 0;
              *(_QWORD *)a2 = MEMORY[0x24BE620D8] + 16;
              *(_DWORD *)(a2 + 48) = v107;
            }
            MEMORY[0x20BCFEAEC](&v103);
          }
        }
        else
        {
          *(_OWORD *)(a2 + 8) = v115;
          v115 = 0uLL;
          *(_OWORD *)(a2 + 24) = v116;
          *(_QWORD *)(a2 + 40) = v117;
          v116 = 0uLL;
          v117 = 0;
          *(_QWORD *)a2 = MEMORY[0x24BE620D8] + 16;
          *(_DWORD *)(a2 + 48) = v118;
        }
        MEMORY[0x20BCFEAEC](&v114);
        ANEMachineIR::Validators::NeConvParameterValues::~NeConvParameterValues((ANEMachineIR::Validators::NeConvParameterValues *)__p);
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        if (v130)
        {
          v131 = v130;
          operator delete(v130);
        }
      }
    }
    goto LABEL_107;
  }
  v32 = v178;
  *(_OWORD *)(a2 + 8) = v177;
  v177 = 0uLL;
  *(_OWORD *)(a2 + 24) = v32;
  *(_QWORD *)(a2 + 40) = v179;
  v178 = 0uLL;
  v179 = 0;
  *(_QWORD *)a2 = MEMORY[0x24BE620D8] + 16;
  *(_DWORD *)(a2 + 48) = v180;
  return MEMORY[0x20BCFEAEC](v176);
}

void sub_20686CBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55)
{
  uint64_t v55;
  void *v57;

  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  MEMORY[0x20BCFEAEC](&a30);
  ANEMachineIR::Validators::NeConvParameterValues::~NeConvParameterValues((ANEMachineIR::Validators::NeConvParameterValues *)&a37);
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  v57 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v57;
    operator delete(v57);
  }
  MEMORY[0x20BCFEAEC](v55 - 208);
  MEMORY[0x20BCFEAEC](v55 - 136);
  _Unwind_Resume(a1);
}

void sub_20686CF3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    operator delete(__p);
  JUMPOUT(0x20686CF34);
}

void std::vector<unsigned long long>::push_back[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v12);
      v8 = *(_QWORD **)a1;
      v6 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(MIL::IRObject *a1@<X0>, _BYTE *a2@<X2>, _BYTE *a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t ParameterValue;
  _BYTE *v9;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;
  void *__p[2];
  std::string::size_type v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (!ParameterValue)
  {
    *a2 = 0;
    goto LABEL_29;
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue))
  {
    v9 = (_BYTE *)MEMORY[0x20BCFEE94]();
    if (v9)
    {
      *a3 = *v9;
      *a2 = 1;
LABEL_29:
      MIL::ValidationResult::ValidationResult(a4);
      return;
    }
  }
  *a2 = 0;
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  v11 = (std::__shared_weak_count *)LocationPtr[1];
  v32 = *LocationPtr;
  v33 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  std::operator+<char>();
  v14 = std::string::append(&v27, "\" in operation \"");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
  v17 = *(char *)(v16 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)v16;
  else
    v18 = *(const std::string::value_type **)v16;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(v16 + 23);
  else
    v19 = *(_QWORD *)(v16 + 8);
  v20 = std::string::append(&v28, v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v29, "\".");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v31 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x20BCFEAD4](a4, &v32, 304, __p);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v24 = v33;
  if (v33)
  {
    v25 = (unint64_t *)&v33->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_20686D238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v35 - 64);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::NeConvParameterValues::~NeConvParameterValues(ANEMachineIR::Validators::NeConvParameterValues *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

uint64_t MIL::Util::Span<int const,18446744073709551615ul>::operator[](_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_24BFE70B8, MEMORY[0x24BEDAAD0]);
  }
  return *a1 + 4 * a2;
}

void sub_20686D358(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8A0] + 16);
  return result;
}

uint64_t std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t ANEMachineIR::H2021::NeReduce::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char **v62;
  uint64_t v63;
  std::__shared_weak_count_vtbl *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  char *v86;
  char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  char **v95;
  _QWORD *v96;
  uint64_t v97;
  MIL::Validation::TensorDTypeConstraints *v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  void *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  void *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  MIL::Validation::TensorSymbolicShapeConstraints *v124;
  void *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  void *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  void *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  MIL::Validation::PossibleStringValuesConstraints *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  uint64_t i;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  uint64_t result;
  uint64_t v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  void *v172;
  char v173;
  void *v174;
  std::__shared_weak_count *v175;
  void *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  void *v184;
  char v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  void *v188[2];
  char v189;
  void *v190;
  char v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  void *v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202;
  char v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  char **v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  uint64_t v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char **v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count *v226;
  void *__p;
  void *v228;
  _QWORD *v229;
  std::__shared_weak_count *v230;
  _QWORD *v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD v235[3];
  uint64_t v236[3];
  _QWORD v237[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v239;
  uint64_t v240;
  _BYTE v241[24];
  _BYTE *v242;
  _QWORD v243[3];
  MIL::Validation::TensorDTypeConstraints *v244;
  std::__shared_weak_count_vtbl *v245;
  std::__shared_weak_count_vtbl *v246;
  void (__cdecl **v247)(std::__shared_weak_count *__hidden);
  uint64_t v248;

  v248 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v231 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v239 = (uint64_t)&v8->~__shared_weak_count_0;
  v240 = (uint64_t)&v8->~__shared_weak_count_0;
  v232 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v245 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v246 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v247 = &v10->~__shared_weak_count_0;
  v233 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v229 = v12 + 1;
  v228 = v12 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v212);
  v13 = v212;
  v212 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v230;
  if (v230)
  {
    p_shared_owners = (unint64_t *)&v230->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v228 = __p;
    operator delete(__p);
  }
  if (v245)
  {
    v246 = v245;
    operator delete(v245);
  }
  if (Scalar)
  {
    v239 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v17, "reduction", (uint64_t *)&v232);
  v19 = v232;
  v232 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v226;
  if (v226)
  {
    v21 = (unint64_t *)&v226->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v231;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = operator new(8uLL);
  v232 = v25;
  *v25 = v24;
  v234 = (uint64_t)(v25 + 1);
  v233 = (uint64_t)(v25 + 1);
  v245 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v23, "reduction_axes", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = v225;
  if (v225)
  {
    v29 = (unint64_t *)&v225->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v232)
  {
    v233 = (uint64_t)v232;
    operator delete(v232);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v31 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v31, "bias", (uint64_t *)&v232);
  v33 = v232;
  v232 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = v224;
  if (v224)
  {
    v35 = (unint64_t *)&v224->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 48))(*((_QWORD *)v32 + 5), 1);
  v37 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v37, "acc_left_shift", (uint64_t *)&v232);
  v39 = v232;
  v232 = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = v223;
  if (v223)
  {
    v41 = (unint64_t *)&v223->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 48))(*((_QWORD *)v38 + 5), 1);
  v43 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v43, "acc_bias_shift", (uint64_t *)&v232);
  v45 = v232;
  v232 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = v222;
  if (v222)
  {
    v47 = (unint64_t *)&v222->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v49, "post_right_shift", (uint64_t *)&v232);
  v51 = v232;
  v232 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = v221;
  if (v221)
  {
    v53 = (unint64_t *)&v221->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 48))(*((_QWORD *)v50 + 5), 1);
  v55 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v55, "post_scale", (uint64_t *)&v232);
  v57 = v232;
  v232 = 0;
  if (v57)
    (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = v220;
  if (v220)
  {
    v59 = (unint64_t *)&v220->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 48))(*((_QWORD *)v56 + 5), 1);
  v219 = 0;
  v61 = operator new();
  *(_QWORD *)v61 = 0;
  *(_QWORD *)(v61 + 8) = 0;
  *(_QWORD *)(v61 + 16) = 0;
  v232 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, (void **)v61);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v232, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v219, 1uLL);
  v62 = v219;
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v245 = v64;
  v64->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v63;
  v246 = (std::__shared_weak_count_vtbl *)&v64->~__shared_weak_count_0;
  v247 = &v64->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  __p = v66;
  *v66 = v65;
  v229 = v66 + 1;
  v228 = v66 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape();
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v212 = v68;
  *v68 = v67;
  v213 = v68 + 1;
  v214 = v68 + 1;
  v240 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v69 = v216;
  v217 = v216;
  if (v216)
  {
    v70 = (_QWORD *)operator new();
    v71 = v216;
    *v70 = &unk_24BFE7320;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  v218 = v70;
  v216 = 0;
  v72 = v62[2];
  v73 = v62[1];
  if (v73 >= v72)
  {
    v75 = (v73 - *v62) >> 4;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v77 = v72 - *v62;
    if (v77 >> 3 > v76)
      v76 = v77 >> 3;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
      v78 = 0xFFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    v235[1] = v62 + 2;
    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v62 + 2), v78);
    v81 = &v79[16 * v75];
    *(_QWORD *)v81 = v69;
    *((_QWORD *)v81 + 1) = v70;
    v217 = 0;
    v218 = 0;
    v83 = *v62;
    v82 = v62[1];
    if (v82 == *v62)
    {
      v86 = v62[1];
      v84 = &v79[16 * v75];
    }
    else
    {
      v84 = &v79[16 * v75];
      do
      {
        v85 = *((_OWORD *)v82 - 1);
        v82 -= 16;
        *((_OWORD *)v84 - 1) = v85;
        v84 -= 16;
        *(_QWORD *)v82 = 0;
        *((_QWORD *)v82 + 1) = 0;
      }
      while (v82 != v83);
      v86 = *v62;
      v82 = v62[1];
    }
    v74 = v81 + 16;
    *v62 = v84;
    v233 = (uint64_t)v86;
    v62[1] = v81 + 16;
    v234 = (uint64_t)v82;
    v87 = v62[2];
    v62[2] = &v79[16 * v80];
    v235[0] = v87;
    v232 = v86;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v232);
  }
  else
  {
    *(_QWORD *)v73 = v69;
    *((_QWORD *)v73 + 1) = v70;
    v74 = v73 + 16;
    v217 = 0;
    v218 = 0;
  }
  v62[1] = v74;
  v88 = v216;
  v216 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v215;
  if (v215)
  {
    v90 = (unint64_t *)&v215->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (__p)
  {
    v228 = __p;
    operator delete(__p);
  }
  if (v245)
  {
    v246 = v245;
    operator delete(v245);
  }
  *(_OWORD *)v210 = *(_OWORD *)a2;
  v211 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v92 = (uint64_t)v231;
  v208 = (uint64_t)v231;
  if (v231)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v93 = 0;
  }
  v209 = v93;
  v231 = 0;
  v206 = v219;
  if (v219)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = v219;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = (std::__shared_weak_count_vtbl *)v95;
  }
  else
  {
    v94 = 0;
  }
  v207 = v94;
  v219 = 0;
  v243[0] = &unk_24BFE7440;
  v243[1] = ANEMachineIR::H2021::Validators::ValidateNeReduce;
  v244 = (MIL::Validation::TensorDTypeConstraints *)v243;
  v242 = 0;
  MIL::IROperator::Make();
  v96 = v242;
  if (v242 == v241)
  {
    v97 = 4;
    v96 = v241;
  }
  else
  {
    if (!v242)
      goto LABEL_106;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_106:
  v98 = v244;
  if (v244 == (MIL::Validation::TensorDTypeConstraints *)v243)
  {
    v99 = 4;
    v98 = (MIL::Validation::TensorDTypeConstraints *)v243;
    goto LABEL_110;
  }
  if (v244)
  {
    v99 = 5;
LABEL_110:
    v98 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v98 + 8 * v99))();
  }
  if (v207)
  {
    v100 = &v207->__shared_owners_;
    do
      v101 = __ldaxr((unint64_t *)v100);
    while (__stlxr(v101 - 1, (unint64_t *)v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  if (v209)
  {
    v102 = &v209->__shared_owners_;
    do
      v103 = __ldaxr((unint64_t *)v102);
    while (__stlxr(v103 - 1, (unint64_t *)v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  if (SHIBYTE(v211) < 0)
    operator delete(v210[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v98);
  v104 = v232;
  std::string::basic_string[abi:ne180100]<0>(&v202, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v204 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v205 = v105;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v200, "XDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v104 + 24))(v104, &v204, v200);
  if (v201 < 0)
    operator delete(v200[0]);
  v107 = v205;
  if (v205)
  {
    v108 = (unint64_t *)&v205->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  if (v203 < 0)
    operator delete(v202);
  v111 = v232;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v198 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v199 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v111 + 24))(v111, &v198, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v114 = v199;
  if (v199)
  {
    v115 = (unint64_t *)&v199->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  v118 = *a3;
  v194 = v232;
  if (v232)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)v232;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v195 = v119;
  v232 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v118 + 56))(v118, &v194);
  v121 = v195;
  if (v195)
  {
    v122 = (unint64_t *)&v195->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (MIL::Validation::TensorSymbolicShapeConstraints *)v232;
  v232 = 0;
  if (v124)
    v124 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v124 + 8))(v124);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v124);
  v125 = v232;
  std::string::basic_string[abi:ne180100]<0>(&v190, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v192 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v193 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v188, "XShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v125 + 40))(v125, &v192, v188);
  if (v189 < 0)
    operator delete(v188[0]);
  v128 = v193;
  if (v193)
  {
    v129 = (unint64_t *)&v193->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  if (v191 < 0)
    operator delete(v190);
  v132 = v232;
  std::string::basic_string[abi:ne180100]<0>(&v184, "reduction_axes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v186 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v187 = v133;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "NUM_REDUCTION_AXES");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v132 + 24))(v132, &v186, 0, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v135 = v187;
  if (v187)
  {
    v136 = (unint64_t *)&v187->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*((void (**)(std::__shared_weak_count_vtbl *))v138->~__shared_weak_count + 1))(v138);
  if (v185 < 0)
    operator delete(v184);
  v139 = v232;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v180 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v181 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "XReducedShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v139 + 40))(v139, &v180, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v142 = v181;
  if (v181)
  {
    v143 = (unint64_t *)&v181->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  v146 = *a3;
  v176 = v232;
  if (v232)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = (std::__shared_weak_count_vtbl *)v232;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v177 = v147;
  v232 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v146 + 56))(v146, &v176);
  v149 = v177;
  if (v177)
  {
    v150 = (unint64_t *)&v177->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = (MIL::Validation::PossibleStringValuesConstraints *)v232;
  v232 = 0;
  if (v152)
    v152 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v152 + 8))(v152);
  MIL::Validation::PossibleStringValuesConstraints::Make(v152);
  v153 = v245;
  std::string::basic_string[abi:ne180100]<0>(&v172, "reduction");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v174 = __p;
  if (__p)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)__p;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v175 = v154;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v232, "max");
  std::string::basic_string[abi:ne180100]<0>(v235, "mean");
  std::string::basic_string[abi:ne180100]<0>(v236, "min");
  std::string::basic_string[abi:ne180100]<0>(v237, "sum");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v232, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v153->~__shared_weak_count
   + 3))(v153, &v174, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v237[i + 2]) < 0)
      operator delete((void *)v237[i]);
  }
  v157 = v175;
  if (v175)
  {
    v158 = (unint64_t *)&v175->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = __p;
  __p = 0;
  if (v160)
    (*(void (**)(void *))(*(_QWORD *)v160 + 8))(v160);
  if (v173 < 0)
    operator delete(v172);
  v161 = *a3;
  v170 = v245;
  if (v245)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = v245;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v171 = v162;
  v245 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v161 + 56))(v161, &v170);
  v164 = v171;
  if (v171)
  {
    v165 = (unint64_t *)&v171->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v245;
  v245 = 0;
  if (v167)
    (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, 0);
  result = (uint64_t)v231;
  if (v231)
  {
    v169 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v231);
    return MEMORY[0x20BCFF140](v169, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20686E8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void **a71;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;

  v74 = *(_QWORD *)(v72 - 96);
  *(_QWORD *)(v72 - 96) = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = *v71;
  *v71 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a71, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x290], 0);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[16 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

uint64_t ANEMachineIR::H2021::PeReduce::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  char *v74;
  char *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  char **v83;
  _QWORD *v84;
  uint64_t v85;
  MIL::Validation::TensorDTypeConstraints *v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  void *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  void *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  MIL::Validation::TensorSymbolicShapeConstraints *v112;
  void *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  void *v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count_vtbl *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  MIL::Validation::PossibleStringValuesConstraints *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  uint64_t i;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  uint64_t j;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  uint64_t result;
  uint64_t v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  void *v168;
  char v169;
  void *v170;
  std::__shared_weak_count *v171;
  void *v172;
  char v173;
  void *v174;
  std::__shared_weak_count *v175;
  void *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  void *v184;
  char v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  void *v188[2];
  char v189;
  void *v190;
  char v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  void *v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202;
  char v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  char **v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  uint64_t v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char **v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  void *__p;
  void *v226;
  _QWORD *v227;
  std::__shared_weak_count *v228;
  _QWORD *v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD v233[3];
  _QWORD v234[3];
  _QWORD v235[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v237;
  uint64_t v238;
  _BYTE v239[24];
  _BYTE *v240;
  _QWORD v241[3];
  MIL::Validation::TensorDTypeConstraints *v242;
  std::__shared_weak_count_vtbl *v243;
  std::__shared_weak_count_vtbl *v244;
  void (__cdecl **v245)(std::__shared_weak_count *__hidden);
  uint64_t v246;

  v246 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v229 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v237 = (uint64_t)&v8->~__shared_weak_count_0;
  v238 = (uint64_t)&v8->~__shared_weak_count_0;
  v230 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v243 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v244 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v245 = &v10->~__shared_weak_count_0;
  v231 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v227 = v12 + 1;
  v226 = v12 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v212);
  v13 = v212;
  v212 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v228;
  if (v228)
  {
    p_shared_owners = (unint64_t *)&v228->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v226 = __p;
    operator delete(__p);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (Scalar)
  {
    v237 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v229;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v17, "reduction", (uint64_t *)&v230);
  v19 = v230;
  v230 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v224;
  if (v224)
  {
    v21 = (unint64_t *)&v224->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v229;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = operator new(8uLL);
  v230 = v25;
  *v25 = v24;
  v232 = (uint64_t)(v25 + 1);
  v231 = (uint64_t)(v25 + 1);
  v243 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v23, "reduction_axes", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = v223;
  if (v223)
  {
    v29 = (unint64_t *)&v223->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v230)
  {
    v231 = (uint64_t)v230;
    operator delete(v230);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v31 = v229;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v31, "reduction_scale", (uint64_t *)&v230);
  v33 = v230;
  v230 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = v222;
  if (v222)
  {
    v35 = (unint64_t *)&v222->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 48))(*((_QWORD *)v32 + 5), 1);
  v37 = v229;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v37, "reduction_epsilon", (uint64_t *)&v230);
  v39 = v230;
  v230 = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = v221;
  if (v221)
  {
    v41 = (unint64_t *)&v221->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 48))(*((_QWORD *)v38 + 5), 1);
  v43 = v229;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[26],std::unique_ptr<MIL::IRParameter>>(v43, "reduction_post_processing", (uint64_t *)&v230);
  v45 = v230;
  v230 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = v220;
  if (v220)
  {
    v47 = (unint64_t *)&v220->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v219 = 0;
  v49 = operator new();
  *(_QWORD *)v49 = 0;
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 16) = 0;
  v230 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, (void **)v49);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v230, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v219, 1uLL);
  v50 = v219;
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v243 = v52;
  v52->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v51;
  v244 = (std::__shared_weak_count_vtbl *)&v52->~__shared_weak_count_0;
  v245 = &v52->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  __p = v54;
  *v54 = v53;
  v227 = v54 + 1;
  v226 = v54 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape();
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v212 = v56;
  *v56 = v55;
  v213 = v56 + 1;
  v214 = v56 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v57 = v216;
  v217 = v216;
  if (v216)
  {
    v58 = (_QWORD *)operator new();
    v59 = v216;
    *v58 = &unk_24BFE7320;
    v58[1] = 0;
    v58[2] = 0;
    v58[3] = v59;
  }
  else
  {
    v58 = 0;
  }
  v218 = v58;
  v216 = 0;
  v60 = v50[2];
  v61 = v50[1];
  if (v61 >= v60)
  {
    v63 = (v61 - *v50) >> 4;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v65 = v60 - *v50;
    if (v65 >> 3 > v64)
      v64 = v65 >> 3;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
      v66 = 0xFFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    v233[1] = v50 + 2;
    v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v50 + 2), v66);
    v69 = &v67[16 * v63];
    *(_QWORD *)v69 = v57;
    *((_QWORD *)v69 + 1) = v58;
    v218 = 0;
    v217 = 0;
    v71 = *v50;
    v70 = v50[1];
    if (v70 == *v50)
    {
      v74 = v50[1];
      v72 = &v67[16 * v63];
    }
    else
    {
      v72 = &v67[16 * v63];
      do
      {
        v73 = *((_OWORD *)v70 - 1);
        v70 -= 16;
        *((_OWORD *)v72 - 1) = v73;
        v72 -= 16;
        *(_QWORD *)v70 = 0;
        *((_QWORD *)v70 + 1) = 0;
      }
      while (v70 != v71);
      v74 = *v50;
      v70 = v50[1];
    }
    v62 = v69 + 16;
    *v50 = v72;
    v231 = (uint64_t)v74;
    v50[1] = v69 + 16;
    v232 = (uint64_t)v70;
    v75 = v50[2];
    v50[2] = &v67[16 * v68];
    v233[0] = v75;
    v230 = v74;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v230);
  }
  else
  {
    *(_QWORD *)v61 = v57;
    *((_QWORD *)v61 + 1) = v58;
    v62 = v61 + 16;
    v218 = 0;
    v217 = 0;
  }
  v50[1] = v62;
  v76 = v216;
  v216 = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v77 = v215;
  if (v215)
  {
    v78 = (unint64_t *)&v215->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (__p)
  {
    v226 = __p;
    operator delete(__p);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  *(_OWORD *)v210 = *(_OWORD *)a2;
  v211 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v80 = (uint64_t)v229;
  v208 = (uint64_t)v229;
  if (v229)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v80;
  }
  else
  {
    v81 = 0;
  }
  v209 = v81;
  v229 = 0;
  v206 = v219;
  if (v219)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = v219;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = (std::__shared_weak_count_vtbl *)v83;
  }
  else
  {
    v82 = 0;
  }
  v207 = v82;
  v219 = 0;
  v241[0] = &unk_24BFE7440;
  v241[1] = ANEMachineIR::H2021::Validators::ValidatePeReduce;
  v242 = (MIL::Validation::TensorDTypeConstraints *)v241;
  v240 = 0;
  MIL::IROperator::Make();
  v84 = v240;
  if (v240 == v239)
  {
    v85 = 4;
    v84 = v239;
  }
  else
  {
    if (!v240)
      goto LABEL_92;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_92:
  v86 = v242;
  if (v242 == (MIL::Validation::TensorDTypeConstraints *)v241)
  {
    v87 = 4;
    v86 = (MIL::Validation::TensorDTypeConstraints *)v241;
    goto LABEL_96;
  }
  if (v242)
  {
    v87 = 5;
LABEL_96:
    v86 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v86 + 8 * v87))();
  }
  if (v207)
  {
    v88 = &v207->__shared_owners_;
    do
      v89 = __ldaxr((unint64_t *)v88);
    while (__stlxr(v89 - 1, (unint64_t *)v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  if (v209)
  {
    v90 = &v209->__shared_owners_;
    do
      v91 = __ldaxr((unint64_t *)v90);
    while (__stlxr(v91 - 1, (unint64_t *)v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  if (SHIBYTE(v211) < 0)
    operator delete(v210[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v86);
  v92 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v202, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v204 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v205 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v200, "XDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v92 + 24))(v92, &v204, v200);
  if (v201 < 0)
    operator delete(v200[0]);
  v95 = v205;
  if (v205)
  {
    v96 = (unint64_t *)&v205->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  if (v203 < 0)
    operator delete(v202);
  v99 = v230;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v198 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v199 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v99 + 24))(v99, &v198, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v102 = v199;
  if (v199)
  {
    v103 = (unint64_t *)&v199->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*((void (**)(std::__shared_weak_count_vtbl *))v105->~__shared_weak_count + 1))(v105);
  v106 = *a3;
  v194 = v230;
  if (v230)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = (std::__shared_weak_count_vtbl *)v230;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v195 = v107;
  v230 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v106 + 56))(v106, &v194);
  v109 = v195;
  if (v195)
  {
    v110 = (unint64_t *)&v195->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = (MIL::Validation::TensorSymbolicShapeConstraints *)v230;
  v230 = 0;
  if (v112)
    v112 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v112 + 8))(v112);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v112);
  v113 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v190, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v192 = Scalar;
  if (Scalar)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = Scalar;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v193 = v114;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v188, "XShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v113 + 40))(v113, &v192, v188);
  if (v189 < 0)
    operator delete(v188[0]);
  v116 = v193;
  if (v193)
  {
    v117 = (unint64_t *)&v193->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = Scalar;
  Scalar = 0;
  if (v119)
    (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
  if (v191 < 0)
    operator delete(v190);
  v120 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v184, "reduction_axes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v186 = Scalar;
  if (Scalar)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = Scalar;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v187 = v121;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "NUM_REDUCTION_AXES");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v120 + 24))(v120, &v186, 0, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v123 = v187;
  if (v187)
  {
    v124 = (unint64_t *)&v187->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = Scalar;
  Scalar = 0;
  if (v126)
    (*((void (**)(std::__shared_weak_count_vtbl *))v126->~__shared_weak_count + 1))(v126);
  if (v185 < 0)
    operator delete(v184);
  v127 = v230;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v180 = Scalar;
  if (Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v181 = v128;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "XReducedShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v127 + 40))(v127, &v180, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v130 = v181;
  if (v181)
  {
    v131 = (unint64_t *)&v181->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = Scalar;
  Scalar = 0;
  if (v133)
    (*((void (**)(std::__shared_weak_count_vtbl *))v133->~__shared_weak_count + 1))(v133);
  v134 = *a3;
  v176 = v230;
  if (v230)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)v230;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v177 = v135;
  v230 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v176);
  v137 = v177;
  if (v177)
  {
    v138 = (unint64_t *)&v177->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (MIL::Validation::PossibleStringValuesConstraints *)v230;
  v230 = 0;
  if (v140)
    v140 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v140 + 8))(v140);
  MIL::Validation::PossibleStringValuesConstraints::Make(v140);
  v141 = v243;
  std::string::basic_string[abi:ne180100]<0>(&v172, "reduction");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v174 = __p;
  if (__p)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)__p;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v175 = v142;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v230, "max");
  std::string::basic_string[abi:ne180100]<0>(v233, "mean");
  std::string::basic_string[abi:ne180100]<0>(v234, "min");
  std::string::basic_string[abi:ne180100]<0>(v235, "sum");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v230, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v141->~__shared_weak_count
   + 3))(v141, &v174, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v235[i + 2]) < 0)
      operator delete((void *)v235[i]);
  }
  v145 = v175;
  if (v175)
  {
    v146 = (unint64_t *)&v175->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = __p;
  __p = 0;
  if (v148)
    (*(void (**)(void *))(*(_QWORD *)v148 + 8))(v148);
  if (v173 < 0)
    operator delete(v172);
  v149 = v243;
  std::string::basic_string[abi:ne180100]<0>(&v168, "reduction_post_processing");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v170 = __p;
  if (__p)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = (std::__shared_weak_count_vtbl *)__p;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v171 = v150;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v230, "inv");
  std::string::basic_string[abi:ne180100]<0>(v233, "linear");
  std::string::basic_string[abi:ne180100]<0>(v234, "rsqrt");
  std::string::basic_string[abi:ne180100]<0>(v235, "sqrt");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v230, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v149->~__shared_weak_count
   + 3))(v149, &v170, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v235[j + 2]) < 0)
      operator delete((void *)v235[j]);
  }
  v153 = v171;
  if (v171)
  {
    v154 = (unint64_t *)&v171->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = __p;
  __p = 0;
  if (v156)
    (*(void (**)(void *))(*(_QWORD *)v156 + 8))(v156);
  if (v169 < 0)
    operator delete(v168);
  v157 = *a3;
  v166 = v243;
  if (v243)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = v243;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v167 = v158;
  v243 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v157 + 56))(v157, &v166);
  v160 = v167;
  if (v167)
  {
    v161 = (unint64_t *)&v167->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = v243;
  v243 = 0;
  if (v163)
    (*((void (**)(std::__shared_weak_count_vtbl *))v163->~__shared_weak_count + 1))(v163);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, 0);
  result = (uint64_t)v229;
  if (v229)
  {
    v165 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v229);
    return MEMORY[0x20BCFF140](v165, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206870490(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x210], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x290], 0);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(result);
    JUMPOUT(0x20BCFF140);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>,0>(uint64_t a1)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_206870C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[2],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[2],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_206870CF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2 + 16);
  v2[1] = v5;
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[2],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_206870DAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
      v9 = v4 <= a2 ? a2 % v4 : a2;
    else
      v9 = (v4 - 1) & a2;
    v10 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = *(unsigned __int8 **)i)
      {
        v12 = *((_QWORD *)i + 1);
        if (v12 == a2)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a3) & 1) != 0)
            return i;
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4)
              v12 %= v4;
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    v15 = 1;
    if (v4 >= 3)
      v15 = (v4 & (v4 - 1)) != 0;
    v16 = v15 | (2 * v4);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique_perform[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[10],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068717F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[10],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[10],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20687188C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[10],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068718D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_206871950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[15],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[15],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068719E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[15],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_206871A34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_206871AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[5],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_206871B44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_206871B90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[17],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_206871C08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[17],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[17],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_206871CA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[17],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_206871CEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[11],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_206871D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[11],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[11],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_206871DFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[11],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_206871E48(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ***std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x20BCFF140](v2, 0x20C40960023A9);
  }
  return result;
}

uint64_t std::default_delete<std::vector<std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = a2;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x20BCFF140](a2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_24BFE7320;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = (uint64_t)v5;
  *a2 = 0;
  return a1;
}

void std::__shared_ptr_pointer<MIL::IRParameter  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(result);
    JUMPOUT(0x20BCFF140);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<std::vector<std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](a1 + 24, *(void ***)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24BFE7440;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24BFE7440;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target_type()
{
}

void std::__shared_ptr_pointer<MIL::Validation::OpParameterConstraintTarget  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpParameterConstraintTarget  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpParameterConstraintTarget  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_206872560(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_2068727CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_206872874(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__shared_ptr_pointer<MIL::Validation::PossibleStringValuesConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::PossibleStringValuesConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::PossibleStringValuesConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[16],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_206872AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[16],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[16],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_206872B58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[16],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_206872BA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[18],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_206872C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[18],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[18],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_206872CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[18],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_206872D00(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[26],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[26],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_206872D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[26],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[26],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_206872E10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[26],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_206872E5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t OUTLINED_FUNCTION_0_0@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8 * a2))(a1);
}

uint64_t ANEMachineIR::H2021::NeReduce::Make(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  if ((_QWORD *)*a1 == a2)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (*a1)
  {
    v4 = 5;
    a2 = (_QWORD *)*a1;
LABEL_5:
    OUTLINED_FUNCTION_0_0(a2, v4);
  }
  return std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](a3);
}

void MilTranslator::OpTranslator::TranslateAvgPool(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  MIL::IRValueType *v9;
  const MIL::IRTensorValueType *v10;
  ANEMachineIR::Utils *v11;
  char v12;
  int v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  void *v25;
  MIL::IRNamedValueType ***v26;
  MIL::IRNamedValueType *v27;
  MIL::IRNamedValueType *v28;
  unint64_t *v29;
  unint64_t v30;
  MIL::IRValueType *Type;
  ANEMachineIR::Utils *v32;
  const MIL::IRTensorValueType *v33;
  _QWORD *v34;
  uint64_t Name;
  char *v36;
  size_t v37;
  std::string *p_str;
  char *v39;
  uint64_t v40;
  __int128 v41;
  std::string::size_type v42;
  _QWORD *v43;
  std::string::size_type v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  std::string::size_type *v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  __int128 v57;
  int64x2_t v58;
  __int128 *v59;
  _QWORD *v60;
  std::string::size_type v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  _QWORD *v71;
  char *v72;
  __int128 v73;
  int64x2_t v74;
  void *v75;
  MIL::IRNamedValueType *v76;
  void *v77;
  _OWORD *v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  MIL::IRNamedValueType *v83;
  ANEMachineIR::Utils *v84;
  char v85;
  uint64_t LocationPtr;
  uint64_t v87;
  uint64_t v88;
  MIL::IRValueType *v89;
  ANEMachineIR::Utils *v90;
  std::string *v91;
  __int128 v92;
  std::string *p_p;
  std::string::size_type v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *size;
  unint64_t *v124;
  unint64_t v125;
  char *v126;
  char *v127;
  int v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  MIL::IRValueType *v143;
  ANEMachineIR::Utils *v144;
  std::string *v145;
  std::string::size_type v146;
  uint64_t v147;
  std::string *v148;
  __int128 v149;
  std::string *v150;
  std::string::size_type v151;
  std::string *v152;
  __int128 v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  __int128 v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::string v179;
  std::string v180;
  std::__shared_weak_count *v181;
  void *v182;
  char v183;
  std::__shared_weak_count *v184;
  std::string v185;
  void *v186;
  char v187;
  std::__shared_weak_count *v188;
  void *v189;
  char v190;
  std::__shared_weak_count *v191;
  void *v192;
  char v193;
  std::__shared_weak_count *v194;
  std::string v195;
  void *v196;
  char v197;
  std::__shared_weak_count *v198;
  void *v199;
  char v200;
  std::string __str;
  std::string __p;
  void *v203;
  _QWORD *v204;
  uint64_t v205;
  void *v206;
  void *v207;
  uint64_t v208;
  __int16 v209;
  char v210;
  char v211;
  char v212;
  char v213;
  int v214;
  char v215;
  __int16 v216;
  char v217;
  std::string v218;
  std::__shared_weak_count *v219;
  void *v220;
  char v221;
  std::__shared_weak_count *v222;
  void *v223;
  char v224;
  std::__shared_weak_count *v225;
  void *v226;
  char v227;
  std::__shared_weak_count *v228;
  void *v229;
  char v230;
  std::__shared_weak_count *v231;
  std::string v232;
  void *v233;
  char v234;
  std::__shared_weak_count *v235;
  void *v236;
  char v237;
  std::string v238;
  std::string v239;
  void *v240;
  void *v241;
  uint64_t v242;
  void *v243;
  void *v244;
  uint64_t v245;
  char v246;
  char v247;
  char v248;
  __int16 v249;
  char v250;
  std::string v251;
  __int128 v252;
  std::string v253;
  std::string v254;
  std::vector<int> v255;
  std::string __s;
  int v257;
  char v258;
  void *v259;
  _BYTE *v260;
  int64x2_t v261;
  _QWORD v262[2];
  std::__shared_weak_count *v263;
  std::string v264;
  std::vector<int> v265;
  char *v266;
  char *v267;
  unint64_t v268;
  char *v269;
  char *v270;
  unint64_t v271;
  void *v272[3];
  std::string v273;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  v6 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, _QWORD))(*(_QWORD *)a2 + 120))(a2, &__p, 0);
  v7 = v6;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6)
      goto LABEL_3;
LABEL_6:
    *(_DWORD *)a3 = 4;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Immediate value inputs not handled.");
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7)
    goto LABEL_6;
LABEL_3:
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v273, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v273.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
    *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  v9 = (MIL::IRValueType *)(*(uint64_t (**)(char *, std::string *, uint64_t))(*((_QWORD *)a2 + 8) + 16))((char *)a2 + 64, &__p, 1);
  v11 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ANEMachineIR::Utils::GetStaticTensorShape(v11, v10, (uint64_t)v272);
  std::string::basic_string[abi:ne180100]<0>(&__p, "kernel_sizes");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "strides");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "exclude_padding_from_average");
  MIL::IROperation::GetParameterValue();
  v12 = MIL::IRValue::GetScalar<BOOL>();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ceil_mode");
  MIL::IROperation::GetParameterValue();
  v13 = MIL::IRValue::GetScalar<BOOL>();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v13)
  {
    MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, (uint64_t)&v273, v11, &v264);
    v26 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 176))(a2);
    v28 = **v26;
    v27 = (*v26)[1];
    v262[1] = v28;
    v263 = (std::__shared_weak_count *)v27;
    if (v27)
    {
      v29 = (unint64_t *)((char *)v27 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v28);
    v32 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
    v261 = 0uLL;
    v262[0] = 0;
    ANEMachineIR::Utils::GetStaticTensorShape(v32, v33, (uint64_t)&v259);
    v34 = (_QWORD *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)v11 + 96))(v11);
    MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, (uint64_t)&v273, (uint64_t)(v34[1] - *v34) >> 3, (uint64_t)&__s);
    MilTranslator::OpTranslator::GetTransposeOpParamPerm((v260 - (_BYTE *)v259) >> 3, (uint64_t)&__s, &v255);
    if (MilTranslator::OpTranslator::IsTransposeRequired(&v255))
    {
      MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)&v259, (unsigned int **)&v255, &v238);
      (*(void (**)(ANEMachineIR::Utils *))(*(_QWORD *)v32 + 88))(v32);
      MIL::IRTensorValueType::Make();
      Name = MIL::IRNamedValueType::GetName(v28);
      v36 = (char *)Name;
      if (*(char *)(Name + 23) >= 0)
        v37 = *(unsigned __int8 *)(Name + 23);
      else
        v37 = *(_QWORD *)(Name + 8);
      p_str = &__str;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v37 + 13);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v37)
      {
        if (v36[23] >= 0)
          v39 = v36;
        else
          v39 = *(char **)v36;
        memmove(p_str, v39, v37);
      }
      strcpy((char *)p_str + v37, "_channel_last");
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v239, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        v239 = __s;
      LODWORD(v240) = v257;
      BYTE4(v240) = v258;
      std::string::operator=(&v239, &__str);
      v59 = (__int128 *)MIL::IRNamedValueType::GetName(v28);
      std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&__p, v59, (__int128 *)&v239);
      std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>((uint64_t)this + 296, (unsigned __int8 *)&__p, (__int128 *)&__p);
      if (SHIBYTE(v205) < 0)
        operator delete(v203);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v254, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v254 = __str;
      MIL::IRNamedValueType::Make();
      *(_QWORD *)&v252 = v251.__r_.__value_.__r.__words[0];
      if (v251.__r_.__value_.__r.__words[0])
      {
        v60 = (_QWORD *)operator new();
        v61 = v251.__r_.__value_.__r.__words[0];
        *v60 = &unk_24BFE76D0;
        v60[1] = 0;
        v60[2] = 0;
        v60[3] = v61;
      }
      else
      {
        v60 = 0;
      }
      *((_QWORD *)&v252 + 1) = v60;
      v251.__r_.__value_.__r.__words[0] = 0;
      v62 = v261.i64[1];
      if (v261.i64[1] >= v262[0])
      {
        v63 = (v261.i64[1] - v261.i64[0]) >> 4;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 60)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v65 = v262[0] - v261.i64[0];
        if ((v262[0] - v261.i64[0]) >> 3 > v64)
          v64 = v65 >> 3;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
          v66 = 0xFFFFFFFFFFFFFFFLL;
        else
          v66 = v64;
        v204 = v262;
        v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)v262, v66);
        v69 = &v67[16 * v63];
        *(_OWORD *)v69 = v252;
        v252 = 0uLL;
        v70 = (_QWORD *)v261.i64[1];
        v71 = (_QWORD *)v261.i64[0];
        if (v261.i64[1] == v261.i64[0])
        {
          v74 = vdupq_n_s64(v261.u64[1]);
          v72 = &v67[16 * v63];
        }
        else
        {
          v72 = &v67[16 * v63];
          do
          {
            v73 = *((_OWORD *)v70 - 1);
            v70 -= 2;
            *((_OWORD *)v72 - 1) = v73;
            v72 -= 16;
            *v70 = 0;
            v70[1] = 0;
          }
          while (v70 != v71);
          v74 = v261;
        }
        v78 = v69 + 16;
        v261.i64[0] = (uint64_t)v72;
        v261.i64[1] = (uint64_t)(v69 + 16);
        *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v74;
        v79 = (void *)v262[0];
        v262[0] = &v67[16 * v68];
        v203 = v79;
        __p.__r_.__value_.__r.__words[0] = v74.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
        v80 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
        v261.i64[1] = (uint64_t)v78;
        if (*((_QWORD *)&v252 + 1))
        {
          v81 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
      }
      else
      {
        *(_QWORD *)v261.i64[1] = v252;
        *(_QWORD *)(v62 + 8) = v60;
        v252 = 0uLL;
        v261.i64[1] = v62 + 16;
      }
      v83 = (MIL::IRNamedValueType *)v251.__r_.__value_.__r.__words[0];
      v251.__r_.__value_.__r.__words[0] = 0;
      if (v83)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v83);
        MEMORY[0x20BCFF140]();
      }
      if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v254.__r_.__value_.__l.__data_);
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v239.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v77 = (void *)v238.__r_.__value_.__r.__words[0];
      if (!v238.__r_.__value_.__r.__words[0])
        goto LABEL_111;
      v238.__r_.__value_.__l.__size_ = v238.__r_.__value_.__r.__words[0];
    }
    else
    {
      v40 = MIL::IRNamedValueType::GetName(v28);
      if (*(char *)(v40 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)v40, *(_QWORD *)(v40 + 8));
      }
      else
      {
        v41 = *(_OWORD *)v40;
        v253.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 + 16);
        *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v41;
      }
      MIL::IRNamedValueType::Make();
      v42 = v238.__r_.__value_.__r.__words[0];
      v239.__r_.__value_.__r.__words[0] = v238.__r_.__value_.__r.__words[0];
      if (v238.__r_.__value_.__r.__words[0])
      {
        v43 = (_QWORD *)operator new();
        v44 = v238.__r_.__value_.__r.__words[0];
        *v43 = &unk_24BFE76D0;
        v43[1] = 0;
        v43[2] = 0;
        v43[3] = v44;
      }
      else
      {
        v43 = 0;
      }
      v239.__r_.__value_.__l.__size_ = (std::string::size_type)v43;
      v238.__r_.__value_.__r.__words[0] = 0;
      v45 = v261.i64[1];
      if (v261.i64[1] >= v262[0])
      {
        v47 = (v261.i64[1] - v261.i64[0]) >> 4;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 60)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v49 = v262[0] - v261.i64[0];
        if ((v262[0] - v261.i64[0]) >> 3 > v48)
          v48 = v49 >> 3;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
          v50 = 0xFFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        v204 = v262;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)v262, v50);
        v53 = (std::string::size_type *)&v51[16 * v47];
        *v53 = v42;
        v53[1] = (std::string::size_type)v43;
        *(_OWORD *)&v239.__r_.__value_.__l.__data_ = 0uLL;
        v54 = (_QWORD *)v261.i64[1];
        v55 = (_QWORD *)v261.i64[0];
        if (v261.i64[1] == v261.i64[0])
        {
          v58 = vdupq_n_s64(v261.u64[1]);
          v56 = &v51[16 * v47];
        }
        else
        {
          v56 = &v51[16 * v47];
          do
          {
            v57 = *((_OWORD *)v54 - 1);
            v54 -= 2;
            *((_OWORD *)v56 - 1) = v57;
            v56 -= 16;
            *v54 = 0;
            v54[1] = 0;
          }
          while (v54 != v55);
          v58 = v261;
        }
        v46 = v53 + 2;
        v261.i64[0] = (uint64_t)v56;
        v261.i64[1] = (uint64_t)(v53 + 2);
        *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v58;
        v75 = (void *)v262[0];
        v262[0] = &v51[16 * v52];
        v203 = v75;
        __p.__r_.__value_.__r.__words[0] = v58.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        *(_QWORD *)v261.i64[1] = v42;
        *(_QWORD *)(v45 + 8) = v43;
        v46 = (_QWORD *)(v45 + 16);
      }
      v261.i64[1] = (uint64_t)v46;
      v76 = (MIL::IRNamedValueType *)v238.__r_.__value_.__r.__words[0];
      v238.__r_.__value_.__r.__words[0] = 0;
      if (v76)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v76);
        MEMORY[0x20BCFF140]();
      }
      if ((SHIBYTE(v253.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_111;
      v77 = (void *)v253.__r_.__value_.__r.__words[0];
    }
    operator delete(v77);
LABEL_111:
    MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v272, (unsigned int **)&v255, &v252);
    (*(void (**)(ANEMachineIR::Utils *))(*(_QWORD *)v11 + 88))(v11);
    memset(&__p, 0, sizeof(__p));
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, (const void *)v252, *((uint64_t *)&v252 + 1), (uint64_t)(*((_QWORD *)&v252 + 1) - v252) >> 3);
    v84 = (ANEMachineIR::Utils *)MIL::IRTensorValueType::Make();
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    memset(&v251, 0, sizeof(v251));
    memset(&v239, 0, sizeof(v239));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v239, v269, (uint64_t)v270, (v270 - v269) >> 2);
    v241 = 0;
    v240 = 0;
    v242 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v240, v266, (uint64_t)v267, (v267 - v266) >> 2);
    v244 = 0;
    v243 = 0;
    v245 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v243, v265.__begin_, (uint64_t)v265.__end_, v265.__end_ - v265.__begin_);
    v246 = 0;
    v247 = 0;
    v85 = v12 ^ 1;
    v248 = v12 ^ 1;
    v249 = 1;
    v250 = 0;
    LocationPtr = MIL::IRObject::GetLocationPtr(a2);
    v87 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
    if (v261.i64[1] == v261.i64[0])
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v88 = v87;
    v89 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v261.i64[0]);
    v90 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v89);
    ANEMachineIR::Validators::ValidatePePool(LocationPtr, v88, v84, v90, (uint64_t)&v239, (MIL::ValidationResult *)&v238);
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v238))
    {
      std::string::basic_string[abi:ne180100]<0>(&v236, "pe_avg_pool");
      MilTranslator::OpTranslator::AddOperation((uint64_t)this);
      if (v237 < 0)
        operator delete(v236);
      std::string::basic_string[abi:ne180100]<0>(&v233, "x");
      if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v232, v264.__r_.__value_.__l.__data_, v264.__r_.__value_.__l.__size_);
      else
        v232 = v264;
      MIL::Builder::OperationBuilder::AddInput();
      v103 = v235;
      if (v235)
      {
        p_shared_owners = (unint64_t *)&v235->__shared_owners_;
        do
          v105 = __ldaxr(p_shared_owners);
        while (__stlxr(v105 - 1, p_shared_owners));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v232.__r_.__value_.__l.__data_);
      if (v234 < 0)
        operator delete(v233);
      std::string::basic_string[abi:ne180100]<0>(&v229, "kernel_sizes");
      MIL::Builder::OperationBuilder::AddInputInt32();
      v106 = v231;
      if (v231)
      {
        v107 = (unint64_t *)&v231->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      if (v230 < 0)
        operator delete(v229);
      std::string::basic_string[abi:ne180100]<0>(&v226, "strides");
      MIL::Builder::OperationBuilder::AddInputInt32();
      v109 = v228;
      if (v228)
      {
        v110 = (unint64_t *)&v228->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      if (v227 < 0)
        operator delete(v226);
      std::string::basic_string[abi:ne180100]<0>(&v223, "custom_pads");
      memset(&__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v265.__begin_, (uint64_t)v265.__end_, v265.__end_ - v265.__begin_);
      MIL::Builder::OperationBuilder::AddInputInt32();
      v112 = v225;
      if (v225)
      {
        v113 = (unint64_t *)&v225->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v224 < 0)
        operator delete(v223);
      std::string::basic_string[abi:ne180100]<0>(&v220, "include_pads");
      MIL::Builder::OperationBuilder::AddInputBool();
      v115 = v222;
      if (v222)
      {
        v116 = (unint64_t *)&v222->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      if (v221 < 0)
        operator delete(v220);
      if (v261.i64[1] == v261.i64[0])
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v118 = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)v261.i64[0]);
      if (*(char *)(v118 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)v118, *(_QWORD *)(v118 + 8));
      }
      else
      {
        v119 = *(_OWORD *)v118;
        v218.__r_.__value_.__r.__words[2] = *(_QWORD *)(v118 + 16);
        *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v119;
      }
      if (v261.i64[1] == v261.i64[0])
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v261.i64[0]);
      MIL::Builder::OperationBuilder::AddOutput();
      v120 = v219;
      if (v219)
      {
        v121 = (unint64_t *)&v219->__shared_owners_;
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v218.__r_.__value_.__l.__data_);
      *(_DWORD *)a3 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v124 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
    else
    {
      MIL::MILResult::GetMessage((MIL::MILResult *)&v238);
      std::operator+<char>();
      v91 = std::string::append(&__str, "; ");
      v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v94 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v94 = __p.__r_.__value_.__l.__size_;
      std::string::append(&v251, (const std::string::value_type *)p_p, v94);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v95 = v270;
      if ((unint64_t)v270 >= v271)
      {
        v97 = v269;
        v98 = (v270 - v269) >> 2;
        v99 = v98 + 1;
        if ((unint64_t)(v98 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v100 = v271 - (_QWORD)v269;
        if ((uint64_t)(v271 - (_QWORD)v269) >> 1 > v99)
          v99 = v100 >> 1;
        if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
          v101 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v101 = v99;
        if (v101)
        {
          v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v271, v101);
          v97 = v269;
          v95 = v270;
        }
        else
        {
          v102 = 0;
        }
        v126 = &v102[4 * v98];
        v127 = &v102[4 * v101];
        *(_DWORD *)v126 = 1;
        v96 = v126 + 4;
        while (v95 != v97)
        {
          v128 = *((_DWORD *)v95 - 1);
          v95 -= 4;
          *((_DWORD *)v126 - 1) = v128;
          v126 -= 4;
        }
        v269 = v126;
        v270 = v96;
        v271 = (unint64_t)v127;
        if (v97)
          operator delete(v97);
      }
      else
      {
        *(_DWORD *)v270 = 1;
        v96 = v95 + 4;
      }
      v270 = v96;
      v129 = v267;
      if ((unint64_t)v267 >= v268)
      {
        v131 = v266;
        v132 = (v267 - v266) >> 2;
        v133 = v132 + 1;
        if ((unint64_t)(v132 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v134 = v268 - (_QWORD)v266;
        if ((uint64_t)(v268 - (_QWORD)v266) >> 1 > v133)
          v133 = v134 >> 1;
        if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
          v135 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v135 = v133;
        if (v135)
        {
          v136 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v268, v135);
          v131 = v266;
          v129 = v267;
        }
        else
        {
          v136 = 0;
        }
        v137 = &v136[4 * v132];
        v138 = &v136[4 * v135];
        *(_DWORD *)v137 = 1;
        v130 = v137 + 4;
        while (v129 != v131)
        {
          v139 = *((_DWORD *)v129 - 1);
          v129 -= 4;
          *((_DWORD *)v137 - 1) = v139;
          v137 -= 4;
        }
        v266 = v137;
        v267 = v130;
        v268 = (unint64_t)v138;
        if (v131)
          operator delete(v131);
      }
      else
      {
        *(_DWORD *)v267 = 1;
        v130 = v129 + 4;
      }
      v267 = v130;
      memset(&__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v269, (uint64_t)v270, (v270 - v269) >> 2);
      v203 = 0;
      v204 = 0;
      v205 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v203, v266, (uint64_t)v267, (v267 - v266) >> 2);
      v206 = 0;
      v207 = 0;
      v208 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v206, v265.__begin_, (uint64_t)v265.__end_, v265.__end_ - v265.__begin_);
      v209 = 0;
      v210 = 0;
      v211 = 0;
      v212 = 0;
      v213 = 0;
      v214 = 0;
      v215 = v85;
      v216 = 1;
      v217 = 0;
      v140 = MIL::IRObject::GetLocationPtr(a2);
      v141 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
      if (v261.i64[1] == v261.i64[0])
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v142 = v141;
      v143 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v261.i64[0]);
      v144 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v143);
      ANEMachineIR::Validators::ValidateNePool(v140, v142, v84, v144, (uint64_t)&__p, (MIL::ValidationResult *)&__str);
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__str))
      {
        std::string::basic_string[abi:ne180100]<0>(&v199, "ne_avg_pool");
        MilTranslator::OpTranslator::AddOperation((uint64_t)this);
        if (v200 < 0)
          operator delete(v199);
        std::string::basic_string[abi:ne180100]<0>(&v196, "x");
        if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v195, v264.__r_.__value_.__l.__data_, v264.__r_.__value_.__l.__size_);
        else
          v195 = v264;
        MIL::Builder::OperationBuilder::AddInput();
        v154 = v198;
        if (v198)
        {
          v155 = (unint64_t *)&v198->__shared_owners_;
          do
            v156 = __ldaxr(v155);
          while (__stlxr(v156 - 1, v155));
          if (!v156)
          {
            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
            std::__shared_weak_count::__release_weak(v154);
          }
        }
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v195.__r_.__value_.__l.__data_);
        if (v197 < 0)
          operator delete(v196);
        std::string::basic_string[abi:ne180100]<0>(&v192, "kernel_sizes");
        MIL::Builder::OperationBuilder::AddInputInt32();
        v157 = v194;
        if (v194)
        {
          v158 = (unint64_t *)&v194->__shared_owners_;
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
        }
        if (v193 < 0)
          operator delete(v192);
        std::string::basic_string[abi:ne180100]<0>(&v189, "strides");
        MIL::Builder::OperationBuilder::AddInputInt32();
        v160 = v191;
        if (v191)
        {
          v161 = (unint64_t *)&v191->__shared_owners_;
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 - 1, v161));
          if (!v162)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        if (v190 < 0)
          operator delete(v189);
        std::string::basic_string[abi:ne180100]<0>(&v186, "custom_pads");
        memset(&v185, 0, sizeof(v185));
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v185, v265.__begin_, (uint64_t)v265.__end_, v265.__end_ - v265.__begin_);
        MIL::Builder::OperationBuilder::AddInputInt32();
        v163 = v188;
        if (v188)
        {
          v164 = (unint64_t *)&v188->__shared_owners_;
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 - 1, v164));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        if (v185.__r_.__value_.__r.__words[0])
        {
          v185.__r_.__value_.__l.__size_ = v185.__r_.__value_.__r.__words[0];
          operator delete(v185.__r_.__value_.__l.__data_);
        }
        if (v187 < 0)
          operator delete(v186);
        std::string::basic_string[abi:ne180100]<0>(&v182, "include_pads");
        MIL::Builder::OperationBuilder::AddInputBool();
        v166 = v184;
        if (v184)
        {
          v167 = (unint64_t *)&v184->__shared_owners_;
          do
            v168 = __ldaxr(v167);
          while (__stlxr(v168 - 1, v167));
          if (!v168)
          {
            ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
            std::__shared_weak_count::__release_weak(v166);
          }
        }
        if (v183 < 0)
          operator delete(v182);
        if (v261.i64[1] == v261.i64[0])
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        v169 = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)v261.i64[0]);
        if (*(char *)(v169 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v180, *(const std::string::value_type **)v169, *(_QWORD *)(v169 + 8));
        }
        else
        {
          v170 = *(_OWORD *)v169;
          v180.__r_.__value_.__r.__words[2] = *(_QWORD *)(v169 + 16);
          *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v170;
        }
        if (v261.i64[1] == v261.i64[0])
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v261.i64[0]);
        MIL::Builder::OperationBuilder::AddOutput();
        v171 = v181;
        if (v181)
        {
          v172 = (unint64_t *)&v181->__shared_owners_;
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v180.__r_.__value_.__l.__data_);
        *(_DWORD *)a3 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
        if (v179.__r_.__value_.__l.__size_)
        {
          v174 = (unint64_t *)(v179.__r_.__value_.__l.__size_ + 8);
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            (*(void (**)(std::string::size_type))(*(_QWORD *)v179.__r_.__value_.__l.__size_ + 16))(v179.__r_.__value_.__l.__size_);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v179.__r_.__value_.__l.__size_);
          }
        }
      }
      else
      {
        MIL::MILResult::GetMessage((MIL::MILResult *)&__str);
        std::operator+<char>();
        if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v145 = &v185;
        else
          v145 = (std::string *)v185.__r_.__value_.__r.__words[0];
        if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v146 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
        else
          v146 = v185.__r_.__value_.__l.__size_;
        std::string::append(&v251, (const std::string::value_type *)v145, v146);
        if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v185.__r_.__value_.__l.__data_);
        *(_DWORD *)a3 = 6;
        v147 = a3 + 8;
        (*(void (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
        std::operator+<char>();
        v148 = std::string::append(&v179, "', violations: ");
        v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
        v185.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v149;
        v148->__r_.__value_.__l.__size_ = 0;
        v148->__r_.__value_.__r.__words[2] = 0;
        v148->__r_.__value_.__r.__words[0] = 0;
        if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v150 = &v251;
        else
          v150 = (std::string *)v251.__r_.__value_.__r.__words[0];
        if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v151 = HIBYTE(v251.__r_.__value_.__r.__words[2]);
        else
          v151 = v251.__r_.__value_.__l.__size_;
        v152 = std::string::append(&v185, (const std::string::value_type *)v150, v151);
        v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
        *(_QWORD *)(v147 + 16) = *((_QWORD *)&v152->__r_.__value_.__l + 2);
        *(_OWORD *)v147 = v153;
        v152->__r_.__value_.__l.__size_ = 0;
        v152->__r_.__value_.__r.__words[2] = 0;
        v152->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v185.__r_.__value_.__l.__data_);
        if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v179.__r_.__value_.__l.__data_);
      }
      MEMORY[0x20BCFEAEC](&__str);
      if (v206)
      {
        v207 = v206;
        operator delete(v206);
      }
      if (v203)
      {
        v204 = v203;
        operator delete(v203);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    MEMORY[0x20BCFEAEC](&v238);
    if (v243)
    {
      v244 = v243;
      operator delete(v243);
    }
    if (v240)
    {
      v241 = v240;
      operator delete(v240);
    }
    if (v239.__r_.__value_.__r.__words[0])
    {
      v239.__r_.__value_.__l.__size_ = v239.__r_.__value_.__r.__words[0];
      operator delete(v239.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v251.__r_.__value_.__l.__data_);
    if ((_QWORD)v252)
    {
      *((_QWORD *)&v252 + 1) = v252;
      operator delete((void *)v252);
    }
    if (v255.__begin_)
    {
      v255.__end_ = v255.__begin_;
      operator delete(v255.__begin_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (v259)
    {
      v260 = v259;
      operator delete(v259);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v261;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v176 = v263;
    if (v263)
    {
      v177 = (unint64_t *)&v263->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
    }
    if ((SHIBYTE(v264.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_329;
    v25 = (void *)v264.__r_.__value_.__r.__words[0];
    goto LABEL_328;
  }
  *(_DWORD *)a3 = 6;
  v14 = a3 + 8;
  std::string::basic_string[abi:ne180100]<0>(&v238, "ceil_mode");
  v15 = std::string::insert(&v238, 0, "Input '");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v239, "' is not supported for ");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = (const std::string::value_type *)v19;
  else
    v21 = *(const std::string::value_type **)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::string::append(&__p, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)v14 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v238.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_329;
  v25 = (void *)v238.__r_.__value_.__r.__words[0];
LABEL_328:
  operator delete(v25);
LABEL_329:
  if (v265.__begin_)
  {
    v265.__end_ = v265.__begin_;
    operator delete(v265.__begin_);
  }
  if (v266)
  {
    v267 = v266;
    operator delete(v266);
  }
  if (v269)
  {
    v270 = v269;
    operator delete(v269);
  }
  if (v272[0])
  {
    v272[1] = v272[0];
    operator delete(v272[0]);
  }
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
}

void sub_206874654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  uint64_t v62;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;

  if (a49 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BCFEAEC](&a55);
  ANEMachineIR::Validators::NePoolParamValues::~NePoolParamValues((ANEMachineIR::Validators::NePoolParamValues *)&a62);
  MEMORY[0x20BCFEAEC](&STACK[0x318]);
  ANEMachineIR::Validators::NePoolParamValues::~NePoolParamValues((ANEMachineIR::Validators::NePoolParamValues *)&STACK[0x350]);
  if (SLOBYTE(STACK[0x3BF]) < 0)
    operator delete((void *)STACK[0x3A8]);
  v64 = (void *)STACK[0x3C0];
  if (STACK[0x3C0])
  {
    STACK[0x3C8] = (unint64_t)v64;
    operator delete(v64);
  }
  v65 = (void *)STACK[0x420];
  if (STACK[0x420])
  {
    STACK[0x428] = (unint64_t)v65;
    operator delete(v65);
  }
  if (SLOBYTE(STACK[0x44F]) < 0)
    operator delete((void *)STACK[0x438]);
  v66 = (void *)STACK[0x458];
  if (STACK[0x458])
  {
    STACK[0x460] = (unint64_t)v66;
    operator delete(v66);
  }
  STACK[0x350] = (unint64_t)&STACK[0x470];
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x350]);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x488]);
  if (*(char *)(v62 - 225) < 0)
    operator delete(*(void **)(v62 - 248));
  v67 = *(void **)(v62 - 224);
  if (v67)
  {
    *(_QWORD *)(v62 - 216) = v67;
    operator delete(v67);
  }
  v68 = *(void **)(v62 - 200);
  if (v68)
  {
    *(_QWORD *)(v62 - 192) = v68;
    operator delete(v68);
  }
  v69 = *(void **)(v62 - 176);
  if (v69)
  {
    *(_QWORD *)(v62 - 168) = v69;
    operator delete(v69);
  }
  v70 = *(void **)(v62 - 152);
  if (v70)
  {
    *(_QWORD *)(v62 - 144) = v70;
    operator delete(v70);
  }
  if (*(char *)(v62 - 105) < 0)
    operator delete(*(void **)(v62 - 128));
  _Unwind_Resume(a1);
}

void sub_206874C04()
{
  JUMPOUT(0x206874B2CLL);
}

void MilTranslator::`anonymous namespace'::GetParamValuesOfInt32Vector(char **a1@<X8>)
{
  MIL::IRValue *ParameterValue;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t Data;
  unint64_t v19;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(ParameterValue);
  Data = MIL::IRTensorValue::GetDataView<int>();
  v19 = v3;
  if (v3)
  {
    v4 = 0;
    do
    {
      v5 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&Data, v4);
      v6 = v5;
      v8 = a1[1];
      v7 = (unint64_t)a1[2];
      if ((unint64_t)v8 >= v7)
      {
        v10 = *a1;
        v11 = (v8 - *a1) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v13 = v7 - (_QWORD)v10;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), v14);
          v10 = *a1;
          v8 = a1[1];
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[4 * v11];
        *(_DWORD *)v16 = *v6;
        v9 = v16 + 4;
        while (v8 != v10)
        {
          v17 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        *a1 = v16;
        a1[1] = v9;
        a1[2] = &v15[4 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_DWORD *)v8 = *v5;
        v9 = v8 + 4;
      }
      a1[1] = v9;
      ++v4;
    }
    while (v4 < v19);
  }
}

void sub_206874D48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::`anonymous namespace'::GetCustomPadValues(std::vector<int> *a1@<X8>)
{
  MIL::IRValueType *ParameterType;
  const MIL::IRTensorValueType *v5;
  ANEMachineIR::Utils *v6;
  MIL::IRValue *ParameterValue;
  uint64_t v8;
  MIL::IRValue *v9;
  uint64_t v10;
  MIL::IRValue *v11;
  std::vector<int>::size_type v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  int v28;
  unsigned int v30;
  int *v31;
  void *exception;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  uint64_t Data;
  std::vector<int>::size_type __n;
  _QWORD v43[2];
  _QWORD v44[2];
  void *__p;
  _BYTE *v46;
  void *v47;
  std::string::size_type v48;
  unsigned __int8 v49;
  std::string v50;
  std::string v51;
  std::string v52;
  __int128 v53;
  std::string::size_type v54;

  std::string::basic_string[abi:ne180100]<0>(&v53, "pad_type");
  MIL::IROperation::GetParameterValue();
  MIL::IRValue::GetScalar<std::string>();
  if (SHIBYTE(v54) < 0)
    operator delete((void *)v53);
  std::string::basic_string[abi:ne180100]<0>(&v53, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v6 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v54) < 0)
    operator delete((void *)v53);
  ANEMachineIR::Utils::GetStaticTensorShape(v6, v5, (uint64_t)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v53, "kernel_sizes");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(ParameterValue);
  v44[0] = MIL::IRTensorValue::GetDataView<int>();
  v44[1] = v8;
  if (SHIBYTE(v54) < 0)
    operator delete((void *)v53);
  std::string::basic_string[abi:ne180100]<0>(&v53, "strides");
  v9 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(v9);
  v43[0] = MIL::IRTensorValue::GetDataView<int>();
  v43[1] = v10;
  if (SHIBYTE(v54) < 0)
    operator delete((void *)v53);
  std::string::basic_string[abi:ne180100]<0>(&v53, "pad");
  v11 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(v11);
  Data = MIL::IRTensorValue::GetDataView<int>();
  __n = v12;
  if (SHIBYTE(v54) < 0)
  {
    operator delete((void *)v53);
    v12 = __n;
  }
  std::vector<int>::vector(a1, v12);
  v13 = __p;
  v14 = (v46 - (_BYTE *)__p) >> 3;
  v15 = v14 - 2;
  if (v14 != 2)
  {
    v16 = 0;
    v17 = 0;
    while (1)
    {
      v18 = *((_QWORD *)__p + v17);
      v19 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(v44, v17);
      v20 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(v43, v17);
      v21 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v16);
      v22 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v16 + 1);
      if ((char)v49 < 0)
      {
        if (v48 == 4)
        {
          v28 = *(_DWORD *)v47;
          goto LABEL_40;
        }
        if (v48 != 5)
        {
          if (v48 != 6)
            goto LABEL_49;
          v23 = (unsigned __int16 *)v47;
LABEL_22:
          v24 = *(_DWORD *)v23;
          v25 = v23[2];
          if (v24 != 1953723747 || v25 != 28015)
            goto LABEL_49;
          goto LABEL_42;
        }
        if (*(_DWORD *)v47 != 1768710518 || *((_BYTE *)v47 + 4) != 100)
        {
LABEL_49:
          exception = __cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v50, "pad_type");
          v33 = std::string::insert(&v50, 0, "Invalid ");
          v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
          v35 = std::string::append(&v51, ": ");
          v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v52.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          if ((v49 & 0x80u) == 0)
            v37 = (const std::string::value_type *)&v47;
          else
            v37 = (const std::string::value_type *)v47;
          if ((v49 & 0x80u) == 0)
            v38 = v49;
          else
            v38 = v48;
          v39 = std::string::append(&v52, v37, v38);
          v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v54 = v39->__r_.__value_.__r.__words[2];
          v53 = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x20BCFEF9C](exception, &v53);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
      }
      else
      {
        if (v49 == 4)
        {
          v28 = (int)v47;
LABEL_40:
          if (v28 != 1701667187)
            goto LABEL_49;
          v30 = (v19 + ~(_DWORD)v18 + v18 - (v18 + v20 - 1) % v20) & ~((int)(v19
                                                                           + ~(_DWORD)v18
                                                                           + v18
                                                                           - (v18 + v20 - 1) % v20) >> 31);
          v21 = v30 >> 1;
          v22 = (v30 + 1) >> 1;
          goto LABEL_42;
        }
        if (v49 != 5)
        {
          if (v49 != 6)
            goto LABEL_49;
          v23 = (unsigned __int16 *)&v47;
          goto LABEL_22;
        }
        if ((_DWORD)v47 != 1768710518 || BYTE4(v47) != 100)
          goto LABEL_49;
      }
      v21 = 0;
      v22 = 0;
LABEL_42:
      v31 = &a1->__begin_[v16];
      *v31 = v21;
      v31[1] = v22;
      ++v17;
      v16 += 2;
      if (v15 == v17)
      {
        v13 = __p;
        break;
      }
    }
  }
  if (v13)
  {
    v46 = v13;
    operator delete(v13);
  }
  if ((char)v49 < 0)
    operator delete(v47);
}

void sub_206875190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (__p)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void ANEMachineIR::Validators::NePoolParamValues::~NePoolParamValues(ANEMachineIR::Validators::NePoolParamValues *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void MilTranslator::OpTranslator::TranslateMaxPool(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  MIL::IRValueType *ParameterType;
  const MIL::IRTensorValueType *v10;
  ANEMachineIR::Utils *v11;
  int v12;
  int v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  void *v25;
  MIL::IRNamedValueType ***v26;
  MIL::IRNamedValueType *v27;
  MIL::IRNamedValueType *v28;
  unint64_t *v29;
  unint64_t v30;
  MIL::IRValueType *Type;
  ANEMachineIR::Utils *v32;
  const MIL::IRTensorValueType *v33;
  _QWORD *v34;
  uint64_t Name;
  char *v36;
  size_t v37;
  std::string *p_str;
  char *v39;
  uint64_t v40;
  __int128 v41;
  std::string::size_type v42;
  _QWORD *v43;
  std::string::size_type v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  std::string::size_type *v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  __int128 v57;
  int64x2_t v58;
  __int128 *v59;
  _QWORD *v60;
  std::string::size_type v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  _QWORD *v71;
  char *v72;
  __int128 v73;
  int64x2_t v74;
  void *v75;
  MIL::IRNamedValueType *v76;
  void *v77;
  _OWORD *v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  MIL::IRNamedValueType *v83;
  ANEMachineIR::Utils *v84;
  uint64_t LocationPtr;
  uint64_t v86;
  uint64_t v87;
  MIL::IRValueType *v88;
  ANEMachineIR::Utils *v89;
  std::string *v90;
  __int128 v91;
  std::string *p_p;
  std::string::size_type v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  __int128 v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *size;
  unint64_t *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  int v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  MIL::IRValueType *v139;
  ANEMachineIR::Utils *v140;
  std::string *v141;
  std::string::size_type v142;
  uint64_t v143;
  std::string *v144;
  __int128 v145;
  std::string *v146;
  std::string::size_type v147;
  std::string *v148;
  __int128 v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  __int128 v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::string v172;
  std::string v173;
  std::__shared_weak_count *v174;
  std::string v175;
  void *v176;
  char v177;
  std::__shared_weak_count *v178;
  void *v179;
  char v180;
  std::__shared_weak_count *v181;
  void *v182;
  char v183;
  std::__shared_weak_count *v184;
  std::string v185;
  void *v186;
  char v187;
  std::__shared_weak_count *v188;
  void *v189;
  char v190;
  std::string __str;
  std::string __p;
  void *v193;
  _QWORD *v194;
  uint64_t v195;
  void *v196;
  void *v197;
  uint64_t v198;
  __int16 v199;
  char v200;
  char v201;
  char v202;
  char v203;
  uint64_t v204;
  std::string v205;
  std::__shared_weak_count *v206;
  void *v207;
  char v208;
  std::__shared_weak_count *v209;
  void *v210;
  char v211;
  std::__shared_weak_count *v212;
  void *v213;
  char v214;
  std::__shared_weak_count *v215;
  std::string v216;
  void *v217;
  char v218;
  std::__shared_weak_count *v219;
  void *v220;
  char v221;
  std::string v222;
  std::string v223;
  void *v224;
  void *v225;
  uint64_t v226;
  void *v227;
  void *v228;
  uint64_t v229;
  char v230;
  char v231;
  int v232;
  std::string v233;
  __int128 v234;
  std::string v235;
  std::string v236;
  std::vector<int> v237;
  std::string __s;
  int v239;
  char v240;
  void *v241;
  _BYTE *v242;
  int64x2_t v243;
  _QWORD v244[2];
  std::__shared_weak_count *v245;
  std::string v246;
  std::vector<int> v247;
  char *v248;
  char *v249;
  unint64_t v250;
  char *v251;
  char *v252;
  unint64_t v253;
  void *v254[3];
  std::string v255;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  v6 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, _QWORD))(*(_QWORD *)a2 + 120))(a2, &__p, 0);
  v7 = v6;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6)
      goto LABEL_3;
LABEL_6:
    *(_DWORD *)a3 = 4;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Immediate value inputs not handled.");
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7)
    goto LABEL_6;
LABEL_3:
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v255, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v255.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
    *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v11 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ANEMachineIR::Utils::GetStaticTensorShape(v11, v10, (uint64_t)v254);
  std::string::basic_string[abi:ne180100]<0>(&__p, "kernel_sizes");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "strides");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ceil_mode");
  MIL::IROperation::GetParameterValue();
  v12 = MIL::IRValue::GetScalar<BOOL>();
  v13 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v13)
      goto LABEL_16;
LABEL_29:
    MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, (uint64_t)&v255, v11, &v246);
    v26 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 176))(a2);
    v28 = **v26;
    v27 = (*v26)[1];
    v244[1] = v28;
    v245 = (std::__shared_weak_count *)v27;
    if (v27)
    {
      v29 = (unint64_t *)((char *)v27 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v28);
    v32 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
    v243 = 0uLL;
    v244[0] = 0;
    ANEMachineIR::Utils::GetStaticTensorShape(v32, v33, (uint64_t)&v241);
    v34 = (_QWORD *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)v11 + 96))(v11);
    MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, (uint64_t)&v255, (uint64_t)(v34[1] - *v34) >> 3, (uint64_t)&__s);
    MilTranslator::OpTranslator::GetTransposeOpParamPerm((v242 - (_BYTE *)v241) >> 3, (uint64_t)&__s, &v237);
    if (MilTranslator::OpTranslator::IsTransposeRequired(&v237))
    {
      MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)&v241, (unsigned int **)&v237, &v222);
      (*(void (**)(ANEMachineIR::Utils *))(*(_QWORD *)v32 + 88))(v32);
      MIL::IRTensorValueType::Make();
      Name = MIL::IRNamedValueType::GetName(v28);
      v36 = (char *)Name;
      if (*(char *)(Name + 23) >= 0)
        v37 = *(unsigned __int8 *)(Name + 23);
      else
        v37 = *(_QWORD *)(Name + 8);
      p_str = &__str;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v37 + 13);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v37)
      {
        if (v36[23] >= 0)
          v39 = v36;
        else
          v39 = *(char **)v36;
        memmove(p_str, v39, v37);
      }
      strcpy((char *)p_str + v37, "_channel_last");
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v223, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        v223 = __s;
      LODWORD(v224) = v239;
      BYTE4(v224) = v240;
      std::string::operator=(&v223, &__str);
      v59 = (__int128 *)MIL::IRNamedValueType::GetName(v28);
      std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&__p, v59, (__int128 *)&v223);
      std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>((uint64_t)this + 296, (unsigned __int8 *)&__p, (__int128 *)&__p);
      if (SHIBYTE(v195) < 0)
        operator delete(v193);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v236, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v236 = __str;
      MIL::IRNamedValueType::Make();
      *(_QWORD *)&v234 = v233.__r_.__value_.__r.__words[0];
      if (v233.__r_.__value_.__r.__words[0])
      {
        v60 = (_QWORD *)operator new();
        v61 = v233.__r_.__value_.__r.__words[0];
        *v60 = &unk_24BFE76D0;
        v60[1] = 0;
        v60[2] = 0;
        v60[3] = v61;
      }
      else
      {
        v60 = 0;
      }
      *((_QWORD *)&v234 + 1) = v60;
      v233.__r_.__value_.__r.__words[0] = 0;
      v62 = v243.i64[1];
      if (v243.i64[1] >= v244[0])
      {
        v63 = (v243.i64[1] - v243.i64[0]) >> 4;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 60)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v65 = v244[0] - v243.i64[0];
        if ((v244[0] - v243.i64[0]) >> 3 > v64)
          v64 = v65 >> 3;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
          v66 = 0xFFFFFFFFFFFFFFFLL;
        else
          v66 = v64;
        v194 = v244;
        v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)v244, v66);
        v69 = &v67[16 * v63];
        *(_OWORD *)v69 = v234;
        v234 = 0uLL;
        v70 = (_QWORD *)v243.i64[1];
        v71 = (_QWORD *)v243.i64[0];
        if (v243.i64[1] == v243.i64[0])
        {
          v74 = vdupq_n_s64(v243.u64[1]);
          v72 = &v67[16 * v63];
        }
        else
        {
          v72 = &v67[16 * v63];
          do
          {
            v73 = *((_OWORD *)v70 - 1);
            v70 -= 2;
            *((_OWORD *)v72 - 1) = v73;
            v72 -= 16;
            *v70 = 0;
            v70[1] = 0;
          }
          while (v70 != v71);
          v74 = v243;
        }
        v78 = v69 + 16;
        v243.i64[0] = (uint64_t)v72;
        v243.i64[1] = (uint64_t)(v69 + 16);
        *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v74;
        v79 = (void *)v244[0];
        v244[0] = &v67[16 * v68];
        v193 = v79;
        __p.__r_.__value_.__r.__words[0] = v74.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
        v80 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
        v243.i64[1] = (uint64_t)v78;
        if (*((_QWORD *)&v234 + 1))
        {
          v81 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
      }
      else
      {
        *(_QWORD *)v243.i64[1] = v234;
        *(_QWORD *)(v62 + 8) = v60;
        v234 = 0uLL;
        v243.i64[1] = v62 + 16;
      }
      v83 = (MIL::IRNamedValueType *)v233.__r_.__value_.__r.__words[0];
      v233.__r_.__value_.__r.__words[0] = 0;
      if (v83)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v83);
        MEMORY[0x20BCFF140]();
      }
      if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v236.__r_.__value_.__l.__data_);
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v223.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v77 = (void *)v222.__r_.__value_.__r.__words[0];
      if (!v222.__r_.__value_.__r.__words[0])
        goto LABEL_109;
      v222.__r_.__value_.__l.__size_ = v222.__r_.__value_.__r.__words[0];
    }
    else
    {
      v40 = MIL::IRNamedValueType::GetName(v28);
      if (*(char *)(v40 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v235, *(const std::string::value_type **)v40, *(_QWORD *)(v40 + 8));
      }
      else
      {
        v41 = *(_OWORD *)v40;
        v235.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 + 16);
        *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v41;
      }
      MIL::IRNamedValueType::Make();
      v42 = v222.__r_.__value_.__r.__words[0];
      v223.__r_.__value_.__r.__words[0] = v222.__r_.__value_.__r.__words[0];
      if (v222.__r_.__value_.__r.__words[0])
      {
        v43 = (_QWORD *)operator new();
        v44 = v222.__r_.__value_.__r.__words[0];
        *v43 = &unk_24BFE76D0;
        v43[1] = 0;
        v43[2] = 0;
        v43[3] = v44;
      }
      else
      {
        v43 = 0;
      }
      v223.__r_.__value_.__l.__size_ = (std::string::size_type)v43;
      v222.__r_.__value_.__r.__words[0] = 0;
      v45 = v243.i64[1];
      if (v243.i64[1] >= v244[0])
      {
        v47 = (v243.i64[1] - v243.i64[0]) >> 4;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 60)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v49 = v244[0] - v243.i64[0];
        if ((v244[0] - v243.i64[0]) >> 3 > v48)
          v48 = v49 >> 3;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
          v50 = 0xFFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        v194 = v244;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)v244, v50);
        v53 = (std::string::size_type *)&v51[16 * v47];
        *v53 = v42;
        v53[1] = (std::string::size_type)v43;
        *(_OWORD *)&v223.__r_.__value_.__l.__data_ = 0uLL;
        v54 = (_QWORD *)v243.i64[1];
        v55 = (_QWORD *)v243.i64[0];
        if (v243.i64[1] == v243.i64[0])
        {
          v58 = vdupq_n_s64(v243.u64[1]);
          v56 = &v51[16 * v47];
        }
        else
        {
          v56 = &v51[16 * v47];
          do
          {
            v57 = *((_OWORD *)v54 - 1);
            v54 -= 2;
            *((_OWORD *)v56 - 1) = v57;
            v56 -= 16;
            *v54 = 0;
            v54[1] = 0;
          }
          while (v54 != v55);
          v58 = v243;
        }
        v46 = v53 + 2;
        v243.i64[0] = (uint64_t)v56;
        v243.i64[1] = (uint64_t)(v53 + 2);
        *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v58;
        v75 = (void *)v244[0];
        v244[0] = &v51[16 * v52];
        v193 = v75;
        __p.__r_.__value_.__r.__words[0] = v58.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        *(_QWORD *)v243.i64[1] = v42;
        *(_QWORD *)(v45 + 8) = v43;
        v46 = (_QWORD *)(v45 + 16);
      }
      v243.i64[1] = (uint64_t)v46;
      v76 = (MIL::IRNamedValueType *)v222.__r_.__value_.__r.__words[0];
      v222.__r_.__value_.__r.__words[0] = 0;
      if (v76)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v76);
        MEMORY[0x20BCFF140]();
      }
      if ((SHIBYTE(v235.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_109;
      v77 = (void *)v235.__r_.__value_.__r.__words[0];
    }
    operator delete(v77);
LABEL_109:
    MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v254, (unsigned int **)&v237, &v234);
    (*(void (**)(ANEMachineIR::Utils *))(*(_QWORD *)v11 + 88))(v11);
    memset(&__p, 0, sizeof(__p));
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, (const void *)v234, *((uint64_t *)&v234 + 1), (uint64_t)(*((_QWORD *)&v234 + 1) - v234) >> 3);
    v84 = (ANEMachineIR::Utils *)MIL::IRTensorValueType::Make();
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    memset(&v233, 0, sizeof(v233));
    memset(&v223, 0, sizeof(v223));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v223, v251, (uint64_t)v252, (v252 - v251) >> 2);
    v225 = 0;
    v224 = 0;
    v226 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v224, v248, (uint64_t)v249, (v249 - v248) >> 2);
    v228 = 0;
    v227 = 0;
    v229 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v227, v247.__begin_, (uint64_t)v247.__end_, v247.__end_ - v247.__begin_);
    v230 = 0;
    v231 = 0;
    v232 = 0;
    LocationPtr = MIL::IRObject::GetLocationPtr(a2);
    v86 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
    if (v243.i64[1] == v243.i64[0])
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v87 = v86;
    v88 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v243.i64[0]);
    v89 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v88);
    ANEMachineIR::Validators::ValidatePePool(LocationPtr, v87, v84, v89, (uint64_t)&v223, (MIL::ValidationResult *)&v222);
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v222))
    {
      std::string::basic_string[abi:ne180100]<0>(&v220, "pe_max_pool");
      MilTranslator::OpTranslator::AddOperation((uint64_t)this);
      if (v221 < 0)
        operator delete(v220);
      std::string::basic_string[abi:ne180100]<0>(&v217, "x");
      if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v216, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
      else
        v216 = v246;
      MIL::Builder::OperationBuilder::AddInput();
      v102 = v219;
      if (v219)
      {
        p_shared_owners = (unint64_t *)&v219->__shared_owners_;
        do
          v104 = __ldaxr(p_shared_owners);
        while (__stlxr(v104 - 1, p_shared_owners));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v216.__r_.__value_.__l.__data_);
      if (v218 < 0)
        operator delete(v217);
      std::string::basic_string[abi:ne180100]<0>(&v213, "kernel_sizes");
      MIL::Builder::OperationBuilder::AddInputInt32();
      v105 = v215;
      if (v215)
      {
        v106 = (unint64_t *)&v215->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      if (v214 < 0)
        operator delete(v213);
      std::string::basic_string[abi:ne180100]<0>(&v210, "strides");
      MIL::Builder::OperationBuilder::AddInputInt32();
      v108 = v212;
      if (v212)
      {
        v109 = (unint64_t *)&v212->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      if (v211 < 0)
        operator delete(v210);
      std::string::basic_string[abi:ne180100]<0>(&v207, "custom_pads");
      memset(&__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v247.__begin_, (uint64_t)v247.__end_, v247.__end_ - v247.__begin_);
      MIL::Builder::OperationBuilder::AddInputInt32();
      v111 = v209;
      if (v209)
      {
        v112 = (unint64_t *)&v209->__shared_owners_;
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v208 < 0)
        operator delete(v207);
      if (v243.i64[1] == v243.i64[0])
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v114 = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)v243.i64[0]);
      if (*(char *)(v114 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v205, *(const std::string::value_type **)v114, *(_QWORD *)(v114 + 8));
      }
      else
      {
        v115 = *(_OWORD *)v114;
        v205.__r_.__value_.__r.__words[2] = *(_QWORD *)(v114 + 16);
        *(_OWORD *)&v205.__r_.__value_.__l.__data_ = v115;
      }
      if (v243.i64[1] == v243.i64[0])
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v243.i64[0]);
      MIL::Builder::OperationBuilder::AddOutput();
      v116 = v206;
      if (v206)
      {
        v117 = (unint64_t *)&v206->__shared_owners_;
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v205.__r_.__value_.__l.__data_);
      *(_DWORD *)a3 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v120 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
    else
    {
      MIL::MILResult::GetMessage((MIL::MILResult *)&v222);
      std::operator+<char>();
      v90 = std::string::append(&__str, "; ");
      v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v93 = __p.__r_.__value_.__l.__size_;
      std::string::append(&v233, (const std::string::value_type *)p_p, v93);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v94 = v252;
      if ((unint64_t)v252 >= v253)
      {
        v96 = v251;
        v97 = (v252 - v251) >> 2;
        v98 = v97 + 1;
        if ((unint64_t)(v97 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v99 = v253 - (_QWORD)v251;
        if ((uint64_t)(v253 - (_QWORD)v251) >> 1 > v98)
          v98 = v99 >> 1;
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
          v100 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v100 = v98;
        if (v100)
        {
          v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v253, v100);
          v96 = v251;
          v94 = v252;
        }
        else
        {
          v101 = 0;
        }
        v122 = &v101[4 * v97];
        v123 = &v101[4 * v100];
        *(_DWORD *)v122 = 1;
        v95 = v122 + 4;
        while (v94 != v96)
        {
          v124 = *((_DWORD *)v94 - 1);
          v94 -= 4;
          *((_DWORD *)v122 - 1) = v124;
          v122 -= 4;
        }
        v251 = v122;
        v252 = v95;
        v253 = (unint64_t)v123;
        if (v96)
          operator delete(v96);
      }
      else
      {
        *(_DWORD *)v252 = 1;
        v95 = v94 + 4;
      }
      v252 = v95;
      v125 = v249;
      if ((unint64_t)v249 >= v250)
      {
        v127 = v248;
        v128 = (v249 - v248) >> 2;
        v129 = v128 + 1;
        if ((unint64_t)(v128 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v130 = v250 - (_QWORD)v248;
        if ((uint64_t)(v250 - (_QWORD)v248) >> 1 > v129)
          v129 = v130 >> 1;
        if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL)
          v131 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v131 = v129;
        if (v131)
        {
          v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v250, v131);
          v127 = v248;
          v125 = v249;
        }
        else
        {
          v132 = 0;
        }
        v133 = &v132[4 * v128];
        v134 = &v132[4 * v131];
        *(_DWORD *)v133 = 1;
        v126 = v133 + 4;
        while (v125 != v127)
        {
          v135 = *((_DWORD *)v125 - 1);
          v125 -= 4;
          *((_DWORD *)v133 - 1) = v135;
          v133 -= 4;
        }
        v248 = v133;
        v249 = v126;
        v250 = (unint64_t)v134;
        if (v127)
          operator delete(v127);
      }
      else
      {
        *(_DWORD *)v249 = 1;
        v126 = v125 + 4;
      }
      v249 = v126;
      memset(&__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v251, (uint64_t)v252, (v252 - v251) >> 2);
      v193 = 0;
      v194 = 0;
      v195 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v193, v248, (uint64_t)v249, (v249 - v248) >> 2);
      v196 = 0;
      v197 = 0;
      v198 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v196, v247.__begin_, (uint64_t)v247.__end_, v247.__end_ - v247.__begin_);
      v199 = 0;
      v200 = 0;
      v201 = 0;
      v202 = 0;
      v203 = 0;
      v204 = 0;
      v136 = MIL::IRObject::GetLocationPtr(a2);
      v137 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
      if (v243.i64[1] == v243.i64[0])
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v138 = v137;
      v139 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v243.i64[0]);
      v140 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v139);
      ANEMachineIR::Validators::ValidateNePool(v136, v138, v84, v140, (uint64_t)&__p, (MIL::ValidationResult *)&__str);
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__str))
      {
        std::string::basic_string[abi:ne180100]<0>(&v189, "ne_max_pool");
        MilTranslator::OpTranslator::AddOperation((uint64_t)this);
        if (v190 < 0)
          operator delete(v189);
        std::string::basic_string[abi:ne180100]<0>(&v186, "x");
        if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v185, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
        else
          v185 = v246;
        MIL::Builder::OperationBuilder::AddInput();
        v150 = v188;
        if (v188)
        {
          v151 = (unint64_t *)&v188->__shared_owners_;
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
        if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v185.__r_.__value_.__l.__data_);
        if (v187 < 0)
          operator delete(v186);
        std::string::basic_string[abi:ne180100]<0>(&v182, "kernel_sizes");
        MIL::Builder::OperationBuilder::AddInputInt32();
        v153 = v184;
        if (v184)
        {
          v154 = (unint64_t *)&v184->__shared_owners_;
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 - 1, v154));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
            std::__shared_weak_count::__release_weak(v153);
          }
        }
        if (v183 < 0)
          operator delete(v182);
        std::string::basic_string[abi:ne180100]<0>(&v179, "strides");
        MIL::Builder::OperationBuilder::AddInputInt32();
        v156 = v181;
        if (v181)
        {
          v157 = (unint64_t *)&v181->__shared_owners_;
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
        if (v180 < 0)
          operator delete(v179);
        std::string::basic_string[abi:ne180100]<0>(&v176, "custom_pads");
        memset(&v175, 0, sizeof(v175));
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v175, v247.__begin_, (uint64_t)v247.__end_, v247.__end_ - v247.__begin_);
        MIL::Builder::OperationBuilder::AddInputInt32();
        v159 = v178;
        if (v178)
        {
          v160 = (unint64_t *)&v178->__shared_owners_;
          do
            v161 = __ldaxr(v160);
          while (__stlxr(v161 - 1, v160));
          if (!v161)
          {
            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
            std::__shared_weak_count::__release_weak(v159);
          }
        }
        if (v175.__r_.__value_.__r.__words[0])
        {
          v175.__r_.__value_.__l.__size_ = v175.__r_.__value_.__r.__words[0];
          operator delete(v175.__r_.__value_.__l.__data_);
        }
        if (v177 < 0)
          operator delete(v176);
        if (v243.i64[1] == v243.i64[0])
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        v162 = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)v243.i64[0]);
        if (*(char *)(v162 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)v162, *(_QWORD *)(v162 + 8));
        }
        else
        {
          v163 = *(_OWORD *)v162;
          v173.__r_.__value_.__r.__words[2] = *(_QWORD *)(v162 + 16);
          *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v163;
        }
        if (v243.i64[1] == v243.i64[0])
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v243.i64[0]);
        MIL::Builder::OperationBuilder::AddOutput();
        v164 = v174;
        if (v174)
        {
          v165 = (unint64_t *)&v174->__shared_owners_;
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
        }
        if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v173.__r_.__value_.__l.__data_);
        *(_DWORD *)a3 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
        if (v172.__r_.__value_.__l.__size_)
        {
          v167 = (unint64_t *)(v172.__r_.__value_.__l.__size_ + 8);
          do
            v168 = __ldaxr(v167);
          while (__stlxr(v168 - 1, v167));
          if (!v168)
          {
            (*(void (**)(std::string::size_type))(*(_QWORD *)v172.__r_.__value_.__l.__size_ + 16))(v172.__r_.__value_.__l.__size_);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v172.__r_.__value_.__l.__size_);
          }
        }
      }
      else
      {
        MIL::MILResult::GetMessage((MIL::MILResult *)&__str);
        std::operator+<char>();
        if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v141 = &v175;
        else
          v141 = (std::string *)v175.__r_.__value_.__r.__words[0];
        if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v142 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
        else
          v142 = v175.__r_.__value_.__l.__size_;
        std::string::append(&v233, (const std::string::value_type *)v141, v142);
        if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v175.__r_.__value_.__l.__data_);
        *(_DWORD *)a3 = 6;
        v143 = a3 + 8;
        (*(void (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
        std::operator+<char>();
        v144 = std::string::append(&v172, "', violations: ");
        v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
        v175.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v145;
        v144->__r_.__value_.__l.__size_ = 0;
        v144->__r_.__value_.__r.__words[2] = 0;
        v144->__r_.__value_.__r.__words[0] = 0;
        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v146 = &v233;
        else
          v146 = (std::string *)v233.__r_.__value_.__r.__words[0];
        if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v147 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
        else
          v147 = v233.__r_.__value_.__l.__size_;
        v148 = std::string::append(&v175, (const std::string::value_type *)v146, v147);
        v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
        *(_QWORD *)(v143 + 16) = *((_QWORD *)&v148->__r_.__value_.__l + 2);
        *(_OWORD *)v143 = v149;
        v148->__r_.__value_.__l.__size_ = 0;
        v148->__r_.__value_.__r.__words[2] = 0;
        v148->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v175.__r_.__value_.__l.__data_);
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v172.__r_.__value_.__l.__data_);
      }
      MEMORY[0x20BCFEAEC](&__str);
      if (v196)
      {
        v197 = v196;
        operator delete(v196);
      }
      if (v193)
      {
        v194 = v193;
        operator delete(v193);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    MEMORY[0x20BCFEAEC](&v222);
    if (v227)
    {
      v228 = v227;
      operator delete(v227);
    }
    if (v224)
    {
      v225 = v224;
      operator delete(v224);
    }
    if (v223.__r_.__value_.__r.__words[0])
    {
      v223.__r_.__value_.__l.__size_ = v223.__r_.__value_.__r.__words[0];
      operator delete(v223.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v233.__r_.__value_.__l.__data_);
    if ((_QWORD)v234)
    {
      *((_QWORD *)&v234 + 1) = v234;
      operator delete((void *)v234);
    }
    if (v237.__begin_)
    {
      v237.__end_ = v237.__begin_;
      operator delete(v237.__begin_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (v241)
    {
      v242 = v241;
      operator delete(v241);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v243;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v169 = v245;
    if (v245)
    {
      v170 = (unint64_t *)&v245->__shared_owners_;
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    if ((SHIBYTE(v246.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_313;
    v25 = (void *)v246.__r_.__value_.__r.__words[0];
    goto LABEL_312;
  }
  if (!v12)
    goto LABEL_29;
LABEL_16:
  *(_DWORD *)a3 = 6;
  v14 = a3 + 8;
  std::string::basic_string[abi:ne180100]<0>(&v222, "ceil_mode");
  v15 = std::string::insert(&v222, 0, "Input '");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v223.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v223, "' is not supported for ");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
  v20 = *(char *)(v19 + 23);
  if (v20 >= 0)
    v21 = (const std::string::value_type *)v19;
  else
    v21 = *(const std::string::value_type **)v19;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v19 + 23);
  else
    v22 = *(_QWORD *)(v19 + 8);
  v23 = std::string::append(&__p, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)v14 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v222.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_313;
  v25 = (void *)v222.__r_.__value_.__r.__words[0];
LABEL_312:
  operator delete(v25);
LABEL_313:
  if (v247.__begin_)
  {
    v247.__end_ = v247.__begin_;
    operator delete(v247.__begin_);
  }
  if (v248)
  {
    v249 = v248;
    operator delete(v248);
  }
  if (v251)
  {
    v252 = v251;
    operator delete(v251);
  }
  if (v254[0])
  {
    v254[1] = v254[0];
    operator delete(v254[0]);
  }
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v255.__r_.__value_.__l.__data_);
}

void sub_206876988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  uint64_t v58;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;

  if (a45 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BCFEAEC](&a51);
  ANEMachineIR::Validators::NePoolParamValues::~NePoolParamValues((ANEMachineIR::Validators::NePoolParamValues *)&a58);
  MEMORY[0x20BCFEAEC](&STACK[0x2C8]);
  ANEMachineIR::Validators::NePoolParamValues::~NePoolParamValues((ANEMachineIR::Validators::NePoolParamValues *)&STACK[0x300]);
  if (SLOBYTE(STACK[0x36F]) < 0)
    operator delete((void *)STACK[0x358]);
  v60 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v60;
    operator delete(v60);
  }
  v61 = (void *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    STACK[0x3D8] = (unint64_t)v61;
    operator delete(v61);
  }
  if (SLOBYTE(STACK[0x3FF]) < 0)
    operator delete((void *)STACK[0x3E8]);
  v62 = (void *)STACK[0x408];
  if (STACK[0x408])
  {
    STACK[0x410] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x420];
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x438]);
  if (*(char *)(v58 - 225) < 0)
    operator delete(*(void **)(v58 - 248));
  v63 = *(void **)(v58 - 224);
  if (v63)
  {
    *(_QWORD *)(v58 - 216) = v63;
    operator delete(v63);
  }
  v64 = *(void **)(v58 - 200);
  if (v64)
  {
    *(_QWORD *)(v58 - 192) = v64;
    operator delete(v64);
  }
  v65 = *(void **)(v58 - 176);
  if (v65)
  {
    *(_QWORD *)(v58 - 168) = v65;
    operator delete(v65);
  }
  v66 = *(void **)(v58 - 152);
  if (v66)
  {
    *(_QWORD *)(v58 - 144) = v66;
    operator delete(v66);
  }
  if (*(char *)(v58 - 105) < 0)
    operator delete(*(void **)(v58 - 128));
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<int const,18446744073709551615ul>::At(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_24BFE70B8, MEMORY[0x24BEDAAD0]);
  }
  return *a1 + 4 * a2;
}

void sub_206876F6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_206876FD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

std::string *std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_DWORD *)a3 + 6);
  this[2].__r_.__value_.__s.__data_[4] = *((_BYTE *)a3 + 28);
  LODWORD(this[2].__r_.__value_.__l.__data_) = v8;
  return this;
}

void sub_2068770BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__construct_node_hash<std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_2068773C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__construct_node_hash<std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_206877438(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  int v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(__int128 *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v6 = *((_DWORD *)a2 + 12);
  this[2].__r_.__value_.__s.__data_[4] = *((_BYTE *)a2 + 52);
  LODWORD(this[2].__r_.__value_.__l.__data_) = v6;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

MIL::IRNamedValueType *std::unique_ptr<MIL::IRNamedValueType>::reset[abi:ne180100](MIL::IRNamedValueType **a1, MIL::IRNamedValueType *a2)
{
  MIL::IRNamedValueType *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::IRNamedValueType::~IRNamedValueType(result);
    JUMPOUT(0x20BCFF140);
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::IRNamedValueType  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

MIL::IRNamedValueType *std::__shared_ptr_pointer<MIL::IRNamedValueType  *>::__on_zero_shared(uint64_t a1)
{
  MIL::IRNamedValueType *result;

  result = *(MIL::IRNamedValueType **)(a1 + 24);
  if (result)
  {
    MIL::IRNamedValueType::~IRNamedValueType(result);
    JUMPOUT(0x20BCFF140);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRNamedValueType  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_206877680(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ANEMachineIR::H2022::NeReduce::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char **v62;
  uint64_t v63;
  std::__shared_weak_count_vtbl *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  char *v86;
  char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  char **v95;
  _QWORD *v96;
  uint64_t v97;
  MIL::Validation::TensorDTypeConstraints *v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  void *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  void *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  MIL::Validation::TensorSymbolicShapeConstraints *v124;
  void *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  void *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  void *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  MIL::Validation::PossibleStringValuesConstraints *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  uint64_t i;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  uint64_t result;
  uint64_t v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  void *v172;
  char v173;
  void *v174;
  std::__shared_weak_count *v175;
  void *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  void *v184;
  char v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  void *v188[2];
  char v189;
  void *v190;
  char v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  void *v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202;
  char v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  char **v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  uint64_t v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char **v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count *v226;
  void *__p;
  void *v228;
  _QWORD *v229;
  std::__shared_weak_count *v230;
  _QWORD *v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD v235[3];
  uint64_t v236[3];
  _QWORD v237[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v239;
  uint64_t v240;
  _BYTE v241[24];
  _BYTE *v242;
  _QWORD v243[3];
  MIL::Validation::TensorDTypeConstraints *v244;
  std::__shared_weak_count_vtbl *v245;
  std::__shared_weak_count_vtbl *v246;
  void (__cdecl **v247)(std::__shared_weak_count *__hidden);
  uint64_t v248;

  v248 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v231 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v239 = (uint64_t)&v8->~__shared_weak_count_0;
  v240 = (uint64_t)&v8->~__shared_weak_count_0;
  v232 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v245 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v246 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v247 = &v10->~__shared_weak_count_0;
  v233 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v229 = v12 + 1;
  v228 = v12 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v212);
  v13 = v212;
  v212 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v230;
  if (v230)
  {
    p_shared_owners = (unint64_t *)&v230->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v228 = __p;
    operator delete(__p);
  }
  if (v245)
  {
    v246 = v245;
    operator delete(v245);
  }
  if (Scalar)
  {
    v239 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v17, "reduction", (uint64_t *)&v232);
  v19 = v232;
  v232 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v226;
  if (v226)
  {
    v21 = (unint64_t *)&v226->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v231;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = operator new(8uLL);
  v232 = v25;
  *v25 = v24;
  v234 = (uint64_t)(v25 + 1);
  v233 = (uint64_t)(v25 + 1);
  v245 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v23, "reduction_axes", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = v225;
  if (v225)
  {
    v29 = (unint64_t *)&v225->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v232)
  {
    v233 = (uint64_t)v232;
    operator delete(v232);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v31 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v31, "bias", (uint64_t *)&v232);
  v33 = v232;
  v232 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = v224;
  if (v224)
  {
    v35 = (unint64_t *)&v224->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 48))(*((_QWORD *)v32 + 5), 1);
  v37 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v37, "acc_left_shift", (uint64_t *)&v232);
  v39 = v232;
  v232 = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = v223;
  if (v223)
  {
    v41 = (unint64_t *)&v223->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 48))(*((_QWORD *)v38 + 5), 1);
  v43 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v43, "acc_bias_shift", (uint64_t *)&v232);
  v45 = v232;
  v232 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = v222;
  if (v222)
  {
    v47 = (unint64_t *)&v222->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v49, "post_right_shift", (uint64_t *)&v232);
  v51 = v232;
  v232 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = v221;
  if (v221)
  {
    v53 = (unint64_t *)&v221->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 48))(*((_QWORD *)v50 + 5), 1);
  v55 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v55, "post_scale", (uint64_t *)&v232);
  v57 = v232;
  v232 = 0;
  if (v57)
    (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = v220;
  if (v220)
  {
    v59 = (unint64_t *)&v220->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 48))(*((_QWORD *)v56 + 5), 1);
  v219 = 0;
  v61 = operator new();
  *(_QWORD *)v61 = 0;
  *(_QWORD *)(v61 + 8) = 0;
  *(_QWORD *)(v61 + 16) = 0;
  v232 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, (void **)v61);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v232, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v219, 1uLL);
  v62 = v219;
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v245 = v64;
  v64->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v63;
  v246 = (std::__shared_weak_count_vtbl *)&v64->~__shared_weak_count_0;
  v247 = &v64->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  __p = v66;
  *v66 = v65;
  v229 = v66 + 1;
  v228 = v66 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape();
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v212 = v68;
  *v68 = v67;
  v213 = v68 + 1;
  v214 = v68 + 1;
  v240 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v69 = v216;
  v217 = v216;
  if (v216)
  {
    v70 = (_QWORD *)operator new();
    v71 = v216;
    *v70 = &unk_24BFE7320;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  v218 = v70;
  v216 = 0;
  v72 = v62[2];
  v73 = v62[1];
  if (v73 >= v72)
  {
    v75 = (v73 - *v62) >> 4;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v77 = v72 - *v62;
    if (v77 >> 3 > v76)
      v76 = v77 >> 3;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
      v78 = 0xFFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    v235[1] = v62 + 2;
    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v62 + 2), v78);
    v81 = &v79[16 * v75];
    *(_QWORD *)v81 = v69;
    *((_QWORD *)v81 + 1) = v70;
    v217 = 0;
    v218 = 0;
    v83 = *v62;
    v82 = v62[1];
    if (v82 == *v62)
    {
      v86 = v62[1];
      v84 = &v79[16 * v75];
    }
    else
    {
      v84 = &v79[16 * v75];
      do
      {
        v85 = *((_OWORD *)v82 - 1);
        v82 -= 16;
        *((_OWORD *)v84 - 1) = v85;
        v84 -= 16;
        *(_QWORD *)v82 = 0;
        *((_QWORD *)v82 + 1) = 0;
      }
      while (v82 != v83);
      v86 = *v62;
      v82 = v62[1];
    }
    v74 = v81 + 16;
    *v62 = v84;
    v233 = (uint64_t)v86;
    v62[1] = v81 + 16;
    v234 = (uint64_t)v82;
    v87 = v62[2];
    v62[2] = &v79[16 * v80];
    v235[0] = v87;
    v232 = v86;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v232);
  }
  else
  {
    *(_QWORD *)v73 = v69;
    *((_QWORD *)v73 + 1) = v70;
    v74 = v73 + 16;
    v217 = 0;
    v218 = 0;
  }
  v62[1] = v74;
  v88 = v216;
  v216 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v215;
  if (v215)
  {
    v90 = (unint64_t *)&v215->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (__p)
  {
    v228 = __p;
    operator delete(__p);
  }
  if (v245)
  {
    v246 = v245;
    operator delete(v245);
  }
  *(_OWORD *)v210 = *(_OWORD *)a2;
  v211 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v92 = (uint64_t)v231;
  v208 = (uint64_t)v231;
  if (v231)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v93 = 0;
  }
  v209 = v93;
  v231 = 0;
  v206 = v219;
  if (v219)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = v219;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = (std::__shared_weak_count_vtbl *)v95;
  }
  else
  {
    v94 = 0;
  }
  v207 = v94;
  v219 = 0;
  v243[0] = &unk_24BFE7440;
  v243[1] = ANEMachineIR::H2022::Validators::ValidateNeReduce;
  v244 = (MIL::Validation::TensorDTypeConstraints *)v243;
  v242 = 0;
  MIL::IROperator::Make();
  v96 = v242;
  if (v242 == v241)
  {
    v97 = 4;
    v96 = v241;
  }
  else
  {
    if (!v242)
      goto LABEL_106;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_106:
  v98 = v244;
  if (v244 == (MIL::Validation::TensorDTypeConstraints *)v243)
  {
    v99 = 4;
    v98 = (MIL::Validation::TensorDTypeConstraints *)v243;
    goto LABEL_110;
  }
  if (v244)
  {
    v99 = 5;
LABEL_110:
    v98 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v98 + 8 * v99))();
  }
  if (v207)
  {
    v100 = &v207->__shared_owners_;
    do
      v101 = __ldaxr((unint64_t *)v100);
    while (__stlxr(v101 - 1, (unint64_t *)v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  if (v209)
  {
    v102 = &v209->__shared_owners_;
    do
      v103 = __ldaxr((unint64_t *)v102);
    while (__stlxr(v103 - 1, (unint64_t *)v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  if (SHIBYTE(v211) < 0)
    operator delete(v210[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v98);
  v104 = v232;
  std::string::basic_string[abi:ne180100]<0>(&v202, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v204 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v205 = v105;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v200, "XDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v104 + 24))(v104, &v204, v200);
  if (v201 < 0)
    operator delete(v200[0]);
  v107 = v205;
  if (v205)
  {
    v108 = (unint64_t *)&v205->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  if (v203 < 0)
    operator delete(v202);
  v111 = v232;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v198 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v199 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v111 + 24))(v111, &v198, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v114 = v199;
  if (v199)
  {
    v115 = (unint64_t *)&v199->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  v118 = *a3;
  v194 = v232;
  if (v232)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)v232;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v195 = v119;
  v232 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v118 + 56))(v118, &v194);
  v121 = v195;
  if (v195)
  {
    v122 = (unint64_t *)&v195->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (MIL::Validation::TensorSymbolicShapeConstraints *)v232;
  v232 = 0;
  if (v124)
    v124 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v124 + 8))(v124);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v124);
  v125 = v232;
  std::string::basic_string[abi:ne180100]<0>(&v190, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v192 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v193 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v188, "XShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v125 + 40))(v125, &v192, v188);
  if (v189 < 0)
    operator delete(v188[0]);
  v128 = v193;
  if (v193)
  {
    v129 = (unint64_t *)&v193->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  if (v191 < 0)
    operator delete(v190);
  v132 = v232;
  std::string::basic_string[abi:ne180100]<0>(&v184, "reduction_axes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v186 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v187 = v133;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "NUM_REDUCTION_AXES");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v132 + 24))(v132, &v186, 0, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v135 = v187;
  if (v187)
  {
    v136 = (unint64_t *)&v187->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*((void (**)(std::__shared_weak_count_vtbl *))v138->~__shared_weak_count + 1))(v138);
  if (v185 < 0)
    operator delete(v184);
  v139 = v232;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v180 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v181 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "XReducedShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v139 + 40))(v139, &v180, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v142 = v181;
  if (v181)
  {
    v143 = (unint64_t *)&v181->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  v146 = *a3;
  v176 = v232;
  if (v232)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = (std::__shared_weak_count_vtbl *)v232;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v177 = v147;
  v232 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v146 + 56))(v146, &v176);
  v149 = v177;
  if (v177)
  {
    v150 = (unint64_t *)&v177->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = (MIL::Validation::PossibleStringValuesConstraints *)v232;
  v232 = 0;
  if (v152)
    v152 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v152 + 8))(v152);
  MIL::Validation::PossibleStringValuesConstraints::Make(v152);
  v153 = v245;
  std::string::basic_string[abi:ne180100]<0>(&v172, "reduction");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v174 = __p;
  if (__p)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)__p;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v175 = v154;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v232, "max");
  std::string::basic_string[abi:ne180100]<0>(v235, "mean");
  std::string::basic_string[abi:ne180100]<0>(v236, "min");
  std::string::basic_string[abi:ne180100]<0>(v237, "sum");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v232, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v153->~__shared_weak_count
   + 3))(v153, &v174, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v237[i + 2]) < 0)
      operator delete((void *)v237[i]);
  }
  v157 = v175;
  if (v175)
  {
    v158 = (unint64_t *)&v175->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = __p;
  __p = 0;
  if (v160)
    (*(void (**)(void *))(*(_QWORD *)v160 + 8))(v160);
  if (v173 < 0)
    operator delete(v172);
  v161 = *a3;
  v170 = v245;
  if (v245)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = v245;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v171 = v162;
  v245 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v161 + 56))(v161, &v170);
  v164 = v171;
  if (v171)
  {
    v165 = (unint64_t *)&v171->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v245;
  v245 = 0;
  if (v167)
    (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, 0);
  result = (uint64_t)v231;
  if (v231)
  {
    v169 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v231);
    return MEMORY[0x20BCFF140](v169, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206878B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void **a71;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;

  v74 = *(_QWORD *)(v72 - 96);
  *(_QWORD *)(v72 - 96) = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = *v71;
  *v71 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a71, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x290], 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::PeReduce::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  char *v74;
  char *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  char **v83;
  _QWORD *v84;
  uint64_t v85;
  MIL::Validation::TensorDTypeConstraints *v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  void *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  void *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  MIL::Validation::TensorSymbolicShapeConstraints *v112;
  void *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  void *v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count_vtbl *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  MIL::Validation::PossibleStringValuesConstraints *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  uint64_t i;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  uint64_t j;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  uint64_t result;
  uint64_t v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  void *v168;
  char v169;
  void *v170;
  std::__shared_weak_count *v171;
  void *v172;
  char v173;
  void *v174;
  std::__shared_weak_count *v175;
  void *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  void *v184;
  char v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  void *v188[2];
  char v189;
  void *v190;
  char v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  void *v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202;
  char v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  char **v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  uint64_t v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char **v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  void *__p;
  void *v226;
  _QWORD *v227;
  std::__shared_weak_count *v228;
  _QWORD *v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD v233[3];
  _QWORD v234[3];
  _QWORD v235[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v237;
  uint64_t v238;
  _BYTE v239[24];
  _BYTE *v240;
  _QWORD v241[3];
  MIL::Validation::TensorDTypeConstraints *v242;
  std::__shared_weak_count_vtbl *v243;
  std::__shared_weak_count_vtbl *v244;
  void (__cdecl **v245)(std::__shared_weak_count *__hidden);
  uint64_t v246;

  v246 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v229 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v237 = (uint64_t)&v8->~__shared_weak_count_0;
  v238 = (uint64_t)&v8->~__shared_weak_count_0;
  v230 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v243 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v244 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v245 = &v10->~__shared_weak_count_0;
  v231 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v227 = v12 + 1;
  v226 = v12 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v212);
  v13 = v212;
  v212 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v228;
  if (v228)
  {
    p_shared_owners = (unint64_t *)&v228->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v226 = __p;
    operator delete(__p);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (Scalar)
  {
    v237 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v229;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v17, "reduction", (uint64_t *)&v230);
  v19 = v230;
  v230 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v224;
  if (v224)
  {
    v21 = (unint64_t *)&v224->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v229;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = operator new(8uLL);
  v230 = v25;
  *v25 = v24;
  v232 = (uint64_t)(v25 + 1);
  v231 = (uint64_t)(v25 + 1);
  v243 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v23, "reduction_axes", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = v223;
  if (v223)
  {
    v29 = (unint64_t *)&v223->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v230)
  {
    v231 = (uint64_t)v230;
    operator delete(v230);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v31 = v229;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v31, "reduction_scale", (uint64_t *)&v230);
  v33 = v230;
  v230 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = v222;
  if (v222)
  {
    v35 = (unint64_t *)&v222->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 48))(*((_QWORD *)v32 + 5), 1);
  v37 = v229;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v37, "reduction_epsilon", (uint64_t *)&v230);
  v39 = v230;
  v230 = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = v221;
  if (v221)
  {
    v41 = (unint64_t *)&v221->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 48))(*((_QWORD *)v38 + 5), 1);
  v43 = v229;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[26],std::unique_ptr<MIL::IRParameter>>(v43, "reduction_post_processing", (uint64_t *)&v230);
  v45 = v230;
  v230 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = v220;
  if (v220)
  {
    v47 = (unint64_t *)&v220->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v219 = 0;
  v49 = operator new();
  *(_QWORD *)v49 = 0;
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 16) = 0;
  v230 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, (void **)v49);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v230, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v219, 1uLL);
  v50 = v219;
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v243 = v52;
  v52->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v51;
  v244 = (std::__shared_weak_count_vtbl *)&v52->~__shared_weak_count_0;
  v245 = &v52->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  __p = v54;
  *v54 = v53;
  v227 = v54 + 1;
  v226 = v54 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape();
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v212 = v56;
  *v56 = v55;
  v213 = v56 + 1;
  v214 = v56 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v57 = v216;
  v217 = v216;
  if (v216)
  {
    v58 = (_QWORD *)operator new();
    v59 = v216;
    *v58 = &unk_24BFE7320;
    v58[1] = 0;
    v58[2] = 0;
    v58[3] = v59;
  }
  else
  {
    v58 = 0;
  }
  v218 = v58;
  v216 = 0;
  v60 = v50[2];
  v61 = v50[1];
  if (v61 >= v60)
  {
    v63 = (v61 - *v50) >> 4;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v65 = v60 - *v50;
    if (v65 >> 3 > v64)
      v64 = v65 >> 3;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
      v66 = 0xFFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    v233[1] = v50 + 2;
    v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v50 + 2), v66);
    v69 = &v67[16 * v63];
    *(_QWORD *)v69 = v57;
    *((_QWORD *)v69 + 1) = v58;
    v218 = 0;
    v217 = 0;
    v71 = *v50;
    v70 = v50[1];
    if (v70 == *v50)
    {
      v74 = v50[1];
      v72 = &v67[16 * v63];
    }
    else
    {
      v72 = &v67[16 * v63];
      do
      {
        v73 = *((_OWORD *)v70 - 1);
        v70 -= 16;
        *((_OWORD *)v72 - 1) = v73;
        v72 -= 16;
        *(_QWORD *)v70 = 0;
        *((_QWORD *)v70 + 1) = 0;
      }
      while (v70 != v71);
      v74 = *v50;
      v70 = v50[1];
    }
    v62 = v69 + 16;
    *v50 = v72;
    v231 = (uint64_t)v74;
    v50[1] = v69 + 16;
    v232 = (uint64_t)v70;
    v75 = v50[2];
    v50[2] = &v67[16 * v68];
    v233[0] = v75;
    v230 = v74;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v230);
  }
  else
  {
    *(_QWORD *)v61 = v57;
    *((_QWORD *)v61 + 1) = v58;
    v62 = v61 + 16;
    v218 = 0;
    v217 = 0;
  }
  v50[1] = v62;
  v76 = v216;
  v216 = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v77 = v215;
  if (v215)
  {
    v78 = (unint64_t *)&v215->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (__p)
  {
    v226 = __p;
    operator delete(__p);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  *(_OWORD *)v210 = *(_OWORD *)a2;
  v211 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v80 = (uint64_t)v229;
  v208 = (uint64_t)v229;
  if (v229)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v80;
  }
  else
  {
    v81 = 0;
  }
  v209 = v81;
  v229 = 0;
  v206 = v219;
  if (v219)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = v219;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = (std::__shared_weak_count_vtbl *)v83;
  }
  else
  {
    v82 = 0;
  }
  v207 = v82;
  v219 = 0;
  v241[0] = &unk_24BFE7440;
  v241[1] = ANEMachineIR::H2022::Validators::ValidatePeReduce;
  v242 = (MIL::Validation::TensorDTypeConstraints *)v241;
  v240 = 0;
  MIL::IROperator::Make();
  v84 = v240;
  if (v240 == v239)
  {
    v85 = 4;
    v84 = v239;
  }
  else
  {
    if (!v240)
      goto LABEL_92;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_92:
  v86 = v242;
  if (v242 == (MIL::Validation::TensorDTypeConstraints *)v241)
  {
    v87 = 4;
    v86 = (MIL::Validation::TensorDTypeConstraints *)v241;
    goto LABEL_96;
  }
  if (v242)
  {
    v87 = 5;
LABEL_96:
    v86 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v86 + 8 * v87))();
  }
  if (v207)
  {
    v88 = &v207->__shared_owners_;
    do
      v89 = __ldaxr((unint64_t *)v88);
    while (__stlxr(v89 - 1, (unint64_t *)v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  if (v209)
  {
    v90 = &v209->__shared_owners_;
    do
      v91 = __ldaxr((unint64_t *)v90);
    while (__stlxr(v91 - 1, (unint64_t *)v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  if (SHIBYTE(v211) < 0)
    operator delete(v210[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v86);
  v92 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v202, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v204 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v205 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v200, "XDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v92 + 24))(v92, &v204, v200);
  if (v201 < 0)
    operator delete(v200[0]);
  v95 = v205;
  if (v205)
  {
    v96 = (unint64_t *)&v205->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  if (v203 < 0)
    operator delete(v202);
  v99 = v230;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v198 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v199 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v99 + 24))(v99, &v198, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v102 = v199;
  if (v199)
  {
    v103 = (unint64_t *)&v199->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*((void (**)(std::__shared_weak_count_vtbl *))v105->~__shared_weak_count + 1))(v105);
  v106 = *a3;
  v194 = v230;
  if (v230)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = (std::__shared_weak_count_vtbl *)v230;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v195 = v107;
  v230 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v106 + 56))(v106, &v194);
  v109 = v195;
  if (v195)
  {
    v110 = (unint64_t *)&v195->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = (MIL::Validation::TensorSymbolicShapeConstraints *)v230;
  v230 = 0;
  if (v112)
    v112 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v112 + 8))(v112);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v112);
  v113 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v190, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v192 = Scalar;
  if (Scalar)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = Scalar;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v193 = v114;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v188, "XShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v113 + 40))(v113, &v192, v188);
  if (v189 < 0)
    operator delete(v188[0]);
  v116 = v193;
  if (v193)
  {
    v117 = (unint64_t *)&v193->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = Scalar;
  Scalar = 0;
  if (v119)
    (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
  if (v191 < 0)
    operator delete(v190);
  v120 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v184, "reduction_axes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v186 = Scalar;
  if (Scalar)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = Scalar;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v187 = v121;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "NUM_REDUCTION_AXES");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v120 + 24))(v120, &v186, 0, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v123 = v187;
  if (v187)
  {
    v124 = (unint64_t *)&v187->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = Scalar;
  Scalar = 0;
  if (v126)
    (*((void (**)(std::__shared_weak_count_vtbl *))v126->~__shared_weak_count + 1))(v126);
  if (v185 < 0)
    operator delete(v184);
  v127 = v230;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v180 = Scalar;
  if (Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v181 = v128;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "XReducedShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v127 + 40))(v127, &v180, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v130 = v181;
  if (v181)
  {
    v131 = (unint64_t *)&v181->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = Scalar;
  Scalar = 0;
  if (v133)
    (*((void (**)(std::__shared_weak_count_vtbl *))v133->~__shared_weak_count + 1))(v133);
  v134 = *a3;
  v176 = v230;
  if (v230)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)v230;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v177 = v135;
  v230 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v176);
  v137 = v177;
  if (v177)
  {
    v138 = (unint64_t *)&v177->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (MIL::Validation::PossibleStringValuesConstraints *)v230;
  v230 = 0;
  if (v140)
    v140 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v140 + 8))(v140);
  MIL::Validation::PossibleStringValuesConstraints::Make(v140);
  v141 = v243;
  std::string::basic_string[abi:ne180100]<0>(&v172, "reduction");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v174 = __p;
  if (__p)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)__p;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v175 = v142;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v230, "max");
  std::string::basic_string[abi:ne180100]<0>(v233, "mean");
  std::string::basic_string[abi:ne180100]<0>(v234, "min");
  std::string::basic_string[abi:ne180100]<0>(v235, "sum");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v230, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v141->~__shared_weak_count
   + 3))(v141, &v174, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v235[i + 2]) < 0)
      operator delete((void *)v235[i]);
  }
  v145 = v175;
  if (v175)
  {
    v146 = (unint64_t *)&v175->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = __p;
  __p = 0;
  if (v148)
    (*(void (**)(void *))(*(_QWORD *)v148 + 8))(v148);
  if (v173 < 0)
    operator delete(v172);
  v149 = v243;
  std::string::basic_string[abi:ne180100]<0>(&v168, "reduction_post_processing");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v170 = __p;
  if (__p)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = (std::__shared_weak_count_vtbl *)__p;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v171 = v150;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v230, "inv");
  std::string::basic_string[abi:ne180100]<0>(v233, "linear");
  std::string::basic_string[abi:ne180100]<0>(v234, "rsqrt");
  std::string::basic_string[abi:ne180100]<0>(v235, "sqrt");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v230, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v149->~__shared_weak_count
   + 3))(v149, &v170, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v235[j + 2]) < 0)
      operator delete((void *)v235[j]);
  }
  v153 = v171;
  if (v171)
  {
    v154 = (unint64_t *)&v171->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = __p;
  __p = 0;
  if (v156)
    (*(void (**)(void *))(*(_QWORD *)v156 + 8))(v156);
  if (v169 < 0)
    operator delete(v168);
  v157 = *a3;
  v166 = v243;
  if (v243)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = v243;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v167 = v158;
  v243 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v157 + 56))(v157, &v166);
  v160 = v167;
  if (v167)
  {
    v161 = (unint64_t *)&v167->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = v243;
  v243 = 0;
  if (v163)
    (*((void (**)(std::__shared_weak_count_vtbl *))v163->~__shared_weak_count + 1))(v163);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, 0);
  result = (uint64_t)v229;
  if (v229)
  {
    v165 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v229);
    return MEMORY[0x20BCFF140](v165, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20687A65C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x210], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x290], 0);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::NeAvgPoolCpu::Run(MIL::IROperation *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void *v20;
  uint64_t InterpretedTensorValue;
  uint64_t v22;
  MIL::IRValue *ParameterValue;
  std::vector<int>::size_type v24;
  unint64_t v25;
  _DWORD *v26;
  std::string::size_type v27;
  MIL::IRValue *v28;
  std::vector<int>::size_type v29;
  unint64_t v30;
  int *v31;
  std::vector<int>::pointer begin;
  uint64_t v33;
  char *v34;
  MIL::Fp16 *v35;
  uint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  MIL::Fp16 *v39;
  uint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  MIL::IRValueType *OutputType;
  uint64_t v53;
  int v54;
  MIL::IRValueType *v55;
  uint64_t v56;
  ANEMachineIR::Utils *v57;
  const MIL::IRTensorValueType *v58;
  MIL::IRValueType *v59;
  ANEMachineIR::Utils *v60;
  const MIL::IRTensorValueType *v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  std::string::size_type v67;
  uint64_t v68;
  std::string *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unsigned __int8 *v97;
  MIL::IRValueType *v98;
  void **v99;
  _QWORD *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  MIL::IRValueType *v103;
  void **v104;
  _QWORD *v105;
  uint64_t v106;
  unsigned __int8 *v107;
  MIL::IRValueType *v108;
  void **v109;
  _QWORD *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  MIL::IRValueType *v113;
  void **v114;
  _QWORD *v115;
  uint64_t v116;
  unsigned __int8 *v117;
  MIL::IRValueType *v118;
  void **v119;
  _QWORD *v120;
  uint64_t v121;
  unsigned __int8 *v122;
  MIL::IRValueType *v123;
  void **v124;
  _QWORD *v125;
  uint64_t v126;
  unsigned __int8 *v127;
  MIL::IRValueType *v128;
  void **v129;
  _QWORD *v130;
  uint64_t v131;
  unsigned __int8 *v132;
  MIL::IRValueType *v133;
  void **v134;
  _QWORD *v135;
  uint64_t v136;
  unsigned __int8 *v137;
  MIL::IRValueType *v138;
  void **v139;
  std::string *v140;
  uint64_t v141;
  int v142;
  char v143;
  unint64_t v144;
  char v145;
  char v146;
  char v147;
  char v148;
  int v149;
  unsigned __int16 v150;
  unsigned __int16 v151;
  unsigned __int8 *v152;
  unsigned __int8 *v153;
  void *__p[3];
  std::string v155;
  uint64_t v156;
  int v157[6];
  void *v158[3];
  void *v159;
  _BYTE *v160;
  std::vector<int> v161;
  uint64_t v162;
  std::vector<int>::size_type v163;
  uint64_t Data;
  std::vector<int>::size_type __n;
  std::string v166;
  void **v167;
  _BYTE v168[24];
  _BYTE *v169;
  _BYTE v170[24];
  _BYTE *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _BYTE v176[24];
  _BYTE *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _BYTE v180[24];
  _BYTE *v181;
  _BYTE v182[24];
  _BYTE *v183;
  _BYTE v184[24];
  _BYTE *v185;
  std::string v186;
  std::string *v187;
  uint64_t v188;

  v188 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(v6 + 8) != 11)
      goto LABEL_10;
    v6 = *(_QWORD *)v6;
  }
  else if (v7 != 11)
  {
    goto LABEL_10;
  }
  if (*(_QWORD *)v6 != 0x705F6776615F656ELL || *(_QWORD *)(v6 + 3) != 0x6C6F6F705F677661)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    v9 = a3 + 8;
    std::string::basic_string[abi:ne180100]<0>(&v166, "ne_avg_pool");
    v10 = std::string::insert(&v166, 0, "Expected '");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v186.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v186, "' op. Got ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v155.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
    v15 = *(char *)(v14 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)v14;
    else
      v16 = *(const std::string::value_type **)v14;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v14 + 23);
    else
      v17 = *(_QWORD *)(v14 + 8);
    v18 = std::string::append(&v155, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)v9 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
    if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v186.__r_.__value_.__l.__data_);
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v166.__r_.__value_.__r.__words[0];
LABEL_22:
      operator delete(v20);
      return;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v155, "x");
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v155);
  v22 = InterpretedTensorValue;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v155.__r_.__value_.__l.__data_);
    if (v22)
    {
LABEL_26:
      std::string::basic_string[abi:ne180100]<0>(&v155, "kernel_sizes");
      ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(ParameterValue);
      Data = MIL::IRTensorValue::GetDataView<int>();
      __n = v24;
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v155.__r_.__value_.__l.__data_);
        v24 = __n;
      }
      std::vector<int>::vector((std::vector<int> *)&v166, v24);
      if (v166.__r_.__value_.__l.__size_ != v166.__r_.__value_.__r.__words[0])
      {
        v25 = 0;
        do
        {
          v26 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v25);
          v27 = v166.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v166.__r_.__value_.__r.__words[0] + 4 * v25++) = *v26;
        }
        while (v25 < (uint64_t)(v166.__r_.__value_.__l.__size_ - v27) >> 2);
      }
      std::string::basic_string[abi:ne180100]<0>(&v155, "strides");
      v28 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(v28);
      v162 = MIL::IRTensorValue::GetDataView<int>();
      v163 = v29;
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v155.__r_.__value_.__l.__data_);
        v29 = v163;
      }
      std::vector<int>::vector(&v161, v29);
      if (v161.__end_ != v161.__begin_)
      {
        v30 = 0;
        do
        {
          v31 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v162, v30);
          begin = v161.__begin_;
          v161.__begin_[v30++] = *v31;
        }
        while (v30 < v161.__end_ - begin);
      }
      std::string::basic_string[abi:ne180100]<0>(&v155, "post_right_shift");
      v33 = MIL::IROperation::TryGetParameterValue();
      if (v33
        && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33)
        && (v34 = (char *)MEMORY[0x20BCFEE94]()) != 0)
      {
        v148 = *v34;
      }
      else
      {
        v148 = 0;
      }
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      v35 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v155, "post_scale");
      v151 = MIL::Fp16::FromFloat(v35, 1.0);
      v36 = MIL::IROperation::TryGetParameterValue();
      if (v36)
      {
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36))
        {
          v37 = (unsigned __int16 *)MEMORY[0x20BCFEE7C]();
          if (v37)
            v151 = *v37;
        }
      }
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v155, "custom_pads");
      v38 = MIL::IROperation::TryGetParameterValue();
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      v39 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v155, "bias");
      v150 = MIL::Fp16::FromFloat(v39, 0.0);
      v40 = MIL::IROperation::TryGetParameterValue();
      if (v40)
      {
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40))
        {
          v41 = (unsigned __int16 *)MEMORY[0x20BCFEE7C]();
          if (v41)
            v150 = *v41;
        }
      }
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v155, "acc_left_shift");
      v42 = MIL::IROperation::TryGetParameterValue();
      if (v42
        && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42)
        && (v43 = (char *)MEMORY[0x20BCFEE94]()) != 0)
      {
        v147 = *v43;
      }
      else
      {
        v147 = 0;
      }
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v155, "acc_bias_shift");
      v44 = MIL::IROperation::TryGetParameterValue();
      if (v44
        && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44)
        && (v45 = (char *)MEMORY[0x20BCFEE94]()) != 0)
      {
        v146 = *v45;
      }
      else
      {
        v146 = 0;
      }
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v155, "include_pads");
      v46 = MIL::IROperation::TryGetParameterValue();
      v145 = v46
          && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46)
          && (v47 = (_BYTE *)MEMORY[0x20BCFEEA0]()) != 0
          && *v47 != 0;
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v155, "pre_relu");
      v48 = MIL::IROperation::TryGetParameterValue();
      v143 = v48
          && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48)
          && (v49 = (_BYTE *)MEMORY[0x20BCFEEA0]()) != 0
          && *v49 != 0;
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 88))(v50);
      OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      v53 = MIL::IRValueType::AsTensorType(OutputType);
      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 88))(v53);
      v55 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      v56 = MIL::IRValueType::AsTensorType(v55);
      v144 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
      v57 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
      ANEMachineIR::Utils::GetStaticTensorShape(v57, v58, (uint64_t)&v159);
      v149 = v54;
      v59 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      v60 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v59);
      ANEMachineIR::Utils::GetStaticTensorShape(v60, v61, (uint64_t)v158);
      if (!v38)
      {
        v71 = 0;
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v68 = 0;
LABEL_97:
        v157[0] = v38;
        v157[1] = v68;
        v157[2] = v74;
        v157[3] = v73;
        v157[4] = v72;
        v157[5] = v71;
        if (v38 || v68 || v74 || v73 || v72 || v71)
        {
          *(_DWORD *)a3 = 3;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Unimplemented pad: rdar://84906152");
          goto LABEL_255;
        }
        *(_OWORD *)&v155.__r_.__value_.__r.__words[1] = 0uLL;
        v156 = 0;
        MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v155, (uint64_t (***)())&v186);
        if (LODWORD(v155.__r_.__value_.__l.__data_))
        {
          *(_DWORD *)a3 = v155.__r_.__value_.__l.__data_;
          *(_OWORD *)(a3 + 8) = *(_OWORD *)&v155.__r_.__value_.__r.__words[1];
          *(_QWORD *)(a3 + 24) = v156;
          *(_OWORD *)&v155.__r_.__value_.__r.__words[1] = 0uLL;
          v156 = 0;
          goto LABEL_248;
        }
        if (v51 != 14)
        {
          if (v51 != 9)
          {
            if (v51 != 4)
            {
              v82 = "Unimplemented input dtype";
LABEL_132:
              *(_DWORD *)a3 = 3;
              std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v82);
              goto LABEL_248;
            }
            if (v149 != 14)
            {
              if (v149 != 9)
              {
                if (v149 == 4)
                {
                  v76 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                  v77 = (uint64_t)v187;
                  if (v187)
                  {
                    if (v187 == &v186)
                    {
                      v185 = v184;
                      (*(void (**)(std::string *, _BYTE *))(v186.__r_.__value_.__r.__words[0] + 24))(&v186, v184);
LABEL_238:
                      v135 = v185;
                      if (v185 == v184)
                      {
                        v136 = 4;
                        v135 = v184;
                      }
                      else
                      {
                        if (!v185)
                        {
LABEL_243:
                          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v152, a1);
                          v137 = v152;
                          if (v153 == v152)
                            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                          v138 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                          MIL::IRValueType::AsTensorType(v138);
                          MIL::IRTensorValueType::MakeFloat16Value();
                          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v137, (uint64_t *)&v167);
                          v139 = v167;
                          v167 = 0;
                          if (v139)
                            (*((void (**)(void **))*v139 + 1))(v139);
LABEL_246:
                          v167 = (void **)&v152;
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v167);
                          *(_DWORD *)a3 = 0;
                          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
                          if (__p[0])
                          {
                            __p[1] = __p[0];
                            operator delete(__p[0]);
                          }
LABEL_248:
                          v140 = v187;
                          if (v187 == &v186)
                          {
                            v141 = 4;
                            v140 = &v186;
                          }
                          else
                          {
                            if (!v187)
                              goto LABEL_253;
                            v141 = 5;
                          }
                          (*(void (**)(void))(v140->__r_.__value_.__r.__words[0] + 8 * v141))();
LABEL_253:
                          if (SHIBYTE(v156) < 0)
                            operator delete((void *)v155.__r_.__value_.__l.__size_);
LABEL_255:
                          if (v158[0])
                          {
                            v158[1] = v158[0];
                            operator delete(v158[0]);
                          }
                          if (v159)
                          {
                            v160 = v159;
                            operator delete(v159);
                          }
                          if (v161.__begin_)
                          {
                            v161.__end_ = v161.__begin_;
                            operator delete(v161.__begin_);
                          }
                          v20 = (void *)v166.__r_.__value_.__r.__words[0];
                          if (v166.__r_.__value_.__r.__words[0])
                          {
                            v166.__r_.__value_.__l.__size_ = v166.__r_.__value_.__r.__words[0];
                            goto LABEL_22;
                          }
                          return;
                        }
                        v136 = 5;
                      }
                      (*(void (**)(void))(*v135 + 8 * v136))();
                      goto LABEL_243;
                    }
                    v77 = (*(uint64_t (**)(std::string *))(v187->__r_.__value_.__r.__words[0] + 16))(v187);
                  }
                  v185 = (_BYTE *)v77;
                  goto LABEL_238;
                }
                goto LABEL_131;
              }
              v89 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              v90 = (uint64_t)v187;
              if (v187)
              {
                if (v187 == &v186)
                {
                  v181 = v180;
                  (*(void (**)(std::string *, _BYTE *))(v186.__r_.__value_.__r.__words[0] + 24))(&v186, v180);
LABEL_198:
                  v115 = v181;
                  if (v181 == v180)
                  {
                    v116 = 4;
                    v115 = v180;
                  }
                  else
                  {
                    if (!v181)
                    {
LABEL_203:
                      (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v152, a1);
                      v117 = v152;
                      if (v153 == v152)
                        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                      v118 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                      MIL::IRValueType::AsTensorType(v118);
                      MIL::IRTensorValueType::MakeInt8Value();
                      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v117, (uint64_t *)&v167);
                      v119 = v167;
                      v167 = 0;
                      if (v119)
                        (*((void (**)(void **))*v119 + 1))(v119);
                      goto LABEL_246;
                    }
                    v116 = 5;
                  }
                  (*(void (**)(void))(*v115 + 8 * v116))();
                  goto LABEL_203;
                }
                v90 = (*(uint64_t (**)(std::string *))(v187->__r_.__value_.__r.__words[0] + 16))(v187);
              }
              v181 = (_BYTE *)v90;
              goto LABEL_198;
            }
            v93 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            v94 = (uint64_t)v187;
            if (v187)
            {
              if (v187 == &v186)
              {
                v183 = v182;
                (*(void (**)(std::string *, _BYTE *))(v186.__r_.__value_.__r.__words[0] + 24))(&v186, v182);
LABEL_228:
                v130 = v183;
                if (v183 == v182)
                {
                  v131 = 4;
                  v130 = v182;
                }
                else
                {
                  if (!v183)
                  {
LABEL_233:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v152, a1);
                    v132 = v152;
                    if (v153 == v152)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v133 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v133);
                    MIL::IRTensorValueType::MakeUInt8Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v132, (uint64_t *)&v167);
                    v134 = v167;
                    v167 = 0;
                    if (v134)
                      (*((void (**)(void **))*v134 + 1))(v134);
                    goto LABEL_246;
                  }
                  v131 = 5;
                }
                (*(void (**)(void))(*v130 + 8 * v131))();
                goto LABEL_233;
              }
              v94 = (*(uint64_t (**)(std::string *))(v187->__r_.__value_.__r.__words[0] + 16))(v187);
            }
            v183 = (_BYTE *)v94;
            goto LABEL_228;
          }
          if (v149 != 14)
          {
            if (v149 != 9)
            {
              if (v149 == 4)
              {
                v78 = MIL::IRTensorValue::GetDataView<signed char>();
                v79 = (uint64_t)v187;
                if (v187)
                {
                  if (v187 == &v186)
                  {
                    v173 = v172;
                    (*(void (**)(std::string *, _BYTE *))(v186.__r_.__value_.__r.__words[0] + 24))(&v186, v172);
LABEL_188:
                    v110 = v173;
                    if (v173 == v172)
                    {
                      v111 = 4;
                      v110 = v172;
                    }
                    else
                    {
                      if (!v173)
                      {
LABEL_193:
                        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v152, a1);
                        v112 = v152;
                        if (v153 == v152)
                          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                        v113 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                        MIL::IRValueType::AsTensorType(v113);
                        MIL::IRTensorValueType::MakeFloat16Value();
                        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v112, (uint64_t *)&v167);
                        v114 = v167;
                        v167 = 0;
                        if (v114)
                          (*((void (**)(void **))*v114 + 1))(v114);
                        goto LABEL_246;
                      }
                      v111 = 5;
                    }
                    (*(void (**)(void))(*v110 + 8 * v111))();
                    goto LABEL_193;
                  }
                  v79 = (*(uint64_t (**)(std::string *))(v187->__r_.__value_.__r.__words[0] + 16))(v187);
                }
                v173 = (_BYTE *)v79;
                goto LABEL_188;
              }
LABEL_131:
              v82 = "Unimplemented output dtype";
              goto LABEL_132;
            }
            v83 = MIL::IRTensorValue::GetDataView<signed char>();
            v84 = (uint64_t)v187;
            if (v187)
            {
              if (v187 == &v186)
              {
                v169 = v168;
                (*(void (**)(std::string *, _BYTE *))(v186.__r_.__value_.__r.__words[0] + 24))(&v186, v168);
LABEL_158:
                v95 = v169;
                if (v169 == v168)
                {
                  v96 = 4;
                  v95 = v168;
                }
                else
                {
                  if (!v169)
                  {
LABEL_163:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v152, a1);
                    v97 = v152;
                    if (v153 == v152)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v98 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v98);
                    MIL::IRTensorValueType::MakeInt8Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v97, (uint64_t *)&v167);
                    v99 = v167;
                    v167 = 0;
                    if (v99)
                      (*((void (**)(void **))*v99 + 1))(v99);
                    goto LABEL_246;
                  }
                  v96 = 5;
                }
                (*(void (**)(void))(*v95 + 8 * v96))();
                goto LABEL_163;
              }
              v84 = (*(uint64_t (**)(std::string *))(v187->__r_.__value_.__r.__words[0] + 16))(v187);
            }
            v169 = (_BYTE *)v84;
            goto LABEL_158;
          }
          v85 = MIL::IRTensorValue::GetDataView<signed char>();
          v86 = (uint64_t)v187;
          if (v187)
          {
            if (v187 == &v186)
            {
              v171 = v170;
              (*(void (**)(std::string *, _BYTE *))(v186.__r_.__value_.__r.__words[0] + 24))(&v186, v170);
LABEL_168:
              v100 = v171;
              if (v171 == v170)
              {
                v101 = 4;
                v100 = v170;
              }
              else
              {
                if (!v171)
                {
LABEL_173:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v152, a1);
                  v102 = v152;
                  if (v153 == v152)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v103 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v103);
                  MIL::IRTensorValueType::MakeUInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v102, (uint64_t *)&v167);
                  v104 = v167;
                  v167 = 0;
                  if (v104)
                    (*((void (**)(void **))*v104 + 1))(v104);
                  goto LABEL_246;
                }
                v101 = 5;
              }
              (*(void (**)(void))(*v100 + 8 * v101))();
              goto LABEL_173;
            }
            v86 = (*(uint64_t (**)(std::string *))(v187->__r_.__value_.__r.__words[0] + 16))(v187);
          }
          v171 = (_BYTE *)v86;
          goto LABEL_168;
        }
        if (v149 != 14)
        {
          if (v149 != 9)
          {
            if (v149 != 4)
              goto LABEL_131;
            v80 = MIL::IRTensorValue::GetDataView<unsigned char>();
            v81 = (uint64_t)v187;
            if (v187)
            {
              if (v187 == &v186)
              {
                v179 = v178;
                (*(void (**)(std::string *, _BYTE *))(v186.__r_.__value_.__r.__words[0] + 24))(&v186, v178);
LABEL_218:
                v125 = v179;
                if (v179 == v178)
                {
                  v126 = 4;
                  v125 = v178;
                }
                else
                {
                  if (!v179)
                  {
LABEL_223:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v152, a1);
                    v127 = v152;
                    if (v153 == v152)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v128 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v128);
                    MIL::IRTensorValueType::MakeFloat16Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v127, (uint64_t *)&v167);
                    v129 = v167;
                    v167 = 0;
                    if (v129)
                      (*((void (**)(void **))*v129 + 1))(v129);
                    goto LABEL_246;
                  }
                  v126 = 5;
                }
                (*(void (**)(void))(*v125 + 8 * v126))();
                goto LABEL_223;
              }
              v81 = (*(uint64_t (**)(std::string *))(v187->__r_.__value_.__r.__words[0] + 16))(v187);
            }
            v179 = (_BYTE *)v81;
            goto LABEL_218;
          }
          v87 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v88 = (uint64_t)v187;
          if (v187)
          {
            if (v187 == &v186)
            {
              v175 = v174;
              (*(void (**)(std::string *, _BYTE *))(v186.__r_.__value_.__r.__words[0] + 24))(&v186, v174);
LABEL_178:
              v105 = v175;
              if (v175 == v174)
              {
                v106 = 4;
                v105 = v174;
              }
              else
              {
                if (!v175)
                {
LABEL_183:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v152, a1);
                  v107 = v152;
                  if (v153 == v152)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v108 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v108);
                  MIL::IRTensorValueType::MakeInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v107, (uint64_t *)&v167);
                  v109 = v167;
                  v167 = 0;
                  if (v109)
                    (*((void (**)(void **))*v109 + 1))(v109);
                  goto LABEL_246;
                }
                v106 = 5;
              }
              (*(void (**)(void))(*v105 + 8 * v106))();
              goto LABEL_183;
            }
            v88 = (*(uint64_t (**)(std::string *))(v187->__r_.__value_.__r.__words[0] + 16))(v187);
          }
          v175 = (_BYTE *)v88;
          goto LABEL_178;
        }
        v91 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v92 = (uint64_t)v187;
        if (v187)
        {
          if (v187 == &v186)
          {
            v177 = v176;
            (*(void (**)(std::string *, _BYTE *))(v186.__r_.__value_.__r.__words[0] + 24))(&v186, v176);
LABEL_208:
            v120 = v177;
            if (v177 == v176)
            {
              v121 = 4;
              v120 = v176;
            }
            else
            {
              if (!v177)
              {
LABEL_213:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v152, a1);
                v122 = v152;
                if (v153 == v152)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v123 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v123);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v122, (uint64_t *)&v167);
                v124 = v167;
                v167 = 0;
                if (v124)
                  (*((void (**)(void **))*v124 + 1))(v124);
                goto LABEL_246;
              }
              v121 = 5;
            }
            (*(void (**)(void))(*v120 + 8 * v121))();
            goto LABEL_213;
          }
          v92 = (*(uint64_t (**)(std::string *))(v187->__r_.__value_.__r.__words[0] + 16))(v187);
        }
        v177 = (_BYTE *)v92;
        goto LABEL_208;
      }
      v63 = v159;
      v62 = v160;
      MIL::IRValue::AsTensor((MIL::IRValue *)v38);
      v64 = MIL::IRTensorValue::GetDataView<int>();
      v65 = (v62 - v63) >> 3;
      v66 = v65 - 2;
      v155.__r_.__value_.__r.__words[0] = v64;
      v155.__r_.__value_.__l.__size_ = v67;
      if (v65 == 5)
      {
        v38 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v155, 0);
        v68 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v155, 1uLL);
      }
      else
      {
        if (v66 <= 1)
        {
          v38 = 0;
          v68 = 0;
          v73 = 0;
          v74 = 0;
          v75 = 2 * v66;
          goto LABEL_96;
        }
        v38 = 0;
        v68 = 0;
      }
      v75 = 2 * v66;
      v74 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v155, 2 * v66 - 4);
      v73 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v155, 2 * v66 - 3);
LABEL_96:
      v72 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v155, v75 - 2);
      v71 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v155, v75 - 1);
      goto LABEL_97;
    }
  }
  else if (InterpretedTensorValue)
  {
    goto LABEL_26;
  }
  *(_DWORD *)a3 = 2;
  std::string::basic_string[abi:ne180100]<0>(&v155, "x");
  v69 = std::string::insert(&v155, 0, "No value for ");
  v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v69->__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 8) = v70;
  v69->__r_.__value_.__l.__size_ = 0;
  v69->__r_.__value_.__r.__words[2] = 0;
  v69->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
  {
    v20 = (void *)v155.__r_.__value_.__r.__words[0];
    goto LABEL_22;
  }
}

void sub_20687C33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52)
{
  uint64_t v52;
  _QWORD *v54;
  uint64_t v55;

  if (__p)
    operator delete(__p);
  v54 = *(_QWORD **)(v52 - 104);
  if (v54 == (_QWORD *)(v52 - 128))
  {
    v55 = 4;
    v54 = (_QWORD *)(v52 - 128);
  }
  else
  {
    if (!v54)
      goto LABEL_8;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_8:
  if (a35 < 0)
    operator delete(a30);
  if (a39)
    operator delete(a39);
  if (a42)
    operator delete(a42);
  if (a45)
    operator delete(a45);
  if (a52)
    operator delete(a52);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, _QWORD *a9@<X8>, char a10, char a11, int a12, __int16 a13, int a14, __int16 a15, int a16, char a17, char a18, uint64_t a19)
{
  const void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  int *v44;
  uint64_t v45;
  double v46;
  float v47;
  float v48;
  unsigned int v49;
  __n128 v50;
  int *v51;
  char v52;
  uint64_t v53;
  float v54;
  float v55;
  int v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v67;
  unint64_t v68;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  float v73;
  float v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  _BOOL4 v80;
  float v81;
  float v82;
  float v83;
  double v84;
  long double v85;
  double v86;
  long double v87;
  double v88;
  float v89;
  float v90;
  float v91;
  long double v92;
  double v93;
  uint64_t v94;
  MIL::Fp16 *v95;
  float v96;
  __int16 v97;
  _QWORD *v98;
  uint64_t v99;
  const char *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v128;
  uint64_t v129;
  int v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  __int16 v138;
  __int16 v139;
  _QWORD v140[3];
  _QWORD *v141;
  int __e[4];
  char v143[8];
  int *v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v139 = a13;
  v138 = a15;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  v24 = *(const void **)a3;
  v25 = *(_QWORD *)(a3 + 8);
  v26 = (v25 - *(_QWORD *)a3) >> 3;
  if (v26 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v100 = "x_rank == o_shape.size()";
    v101 = 68;
    goto LABEL_124;
  }
  v27 = *a5;
  v28 = a5[1];
  v29 = (v28 - *a5) >> 2;
  if (v29 != v26 - 1)
  {
    v100 = "kernel_sizes.size() == num_spatial_dims + 1";
    v101 = 69;
    goto LABEL_124;
  }
  v30 = *a6;
  v31 = a6[1];
  if (v29 != (v31 - *a6) >> 2)
  {
    v100 = "strides.size() == num_spatial_dims + 1";
    v101 = 70;
    goto LABEL_124;
  }
  if (*(_DWORD *)(v28 - 4) != *(_DWORD *)(v31 - 4))
  {
    v100 = "kernel_sizes.back() == strides.back()";
    v101 = 71;
LABEL_124:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v101, v100);
  }
  v32 = v26 - 2;
  v33 = 4 * v26;
  if (v26 == 5)
  {
    v117 = *(int *)(v27 + v33 - 20);
    v103 = *(int *)(v30 + v33 - 20);
    v34 = 2;
LABEL_9:
    v35 = v33 - 16;
    v122 = *(int *)(v27 + v35);
    v36 = *(_DWORD *)(v30 + v35);
    v37 = 1;
    goto LABEL_11;
  }
  v34 = v26 - 3;
  v103 = 1;
  if (v32 > 1)
  {
    v117 = 1;
    goto LABEL_9;
  }
  v37 = 0;
  v117 = 1;
  v122 = 1;
  v36 = 1;
LABEL_11:
  v128 = *(_DWORD *)(v27 + 4 * v32);
  v121 = *(int *)(v27 + 4 * v34);
  v104 = *(int *)(v30 + 4 * v34);
  v109 = *(int *)(v30 + 4 * v32);
  v135 = 0;
  v136 = 0;
  v137 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v135, v24, v25, v26);
  v132 = 0;
  v133 = 0;
  v134 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v132, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v26 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v135, (uint64_t)(v135 + 8), (char *)__e, v143, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v132, (uint64_t)(v132 + 8), (char *)__e, v143, 2);
  }
  else if (v26 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v135, v135 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v132, v132 + 8, __e);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v139);
  v39 = v38;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v138);
  if (v26 == 5)
  {
    v39 = v39 * (float)v117;
    if (a17)
      v40 = v40 / (float)v117;
  }
  v41 = v39 * (float)v122;
  if (v37)
  {
    v42 = v40 / (float)v122;
  }
  else
  {
    v41 = v39;
    v42 = v40;
  }
  v43 = v41 * (float)v121;
  v105 = *(_QWORD *)v132;
  v106 = *((_QWORD *)v132 + 1);
  v107 = *((_QWORD *)v132 + 2);
  v108 = *((_QWORD *)v132 + 3);
  v114 = *((_QWORD *)v132 + 4);
  v116 = *((_QWORD *)v135 + 1);
  v120 = *((_QWORD *)v135 + 2);
  v124 = *((_QWORD *)v135 + 3);
  v140[0] = &off_24BFE77F0;
  v141 = v140;
  if (a18)
  {
    *(_QWORD *)__e = &off_24BFE7880;
    v144 = __e;
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](__e, v140);
    v44 = v144;
    if (v144 == __e)
    {
      v45 = 4;
      v44 = __e;
    }
    else
    {
      if (!v144)
        goto LABEL_27;
      v45 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
  }
LABEL_27:
  v46 = ldexp(1.0, a8 + 20);
  v47 = ldexp(1.0, a8 + 20 + a10);
  v48 = v43 * v47;
  v49 = llroundf(v48);
  if (fabsf(v48) < 1.0)
    v49 = 0;
  v110 = v49;
  v50.n128_f64[0] = exp2(-(double)(a8 + 20 + a11));
  v51 = a7;
  v52 = a17;
  if (v105)
  {
    v53 = 0;
    v54 = v42 / (float)v121;
    v102 = v36;
    v55 = v46;
    v50.n128_f64[0] = v50.n128_f64[0] * v54;
    v56 = v128;
    if (v128 <= 1)
      v56 = 1;
    v125 = v56;
    v57 = v121;
    if (v121 <= 1)
      v57 = 1;
    v129 = v57;
    v58 = v50.n128_f64[0];
    while (!v106)
    {
LABEL_108:
      if (++v53 == v105)
        goto LABEL_109;
    }
    v112 = 0;
    while (!v107)
    {
LABEL_107:
      if (++v112 == v106)
        goto LABEL_108;
    }
    v113 = 0;
    while (!v108)
    {
LABEL_106:
      if (++v113 == v107)
        goto LABEL_107;
    }
    v115 = 0;
    while (!v114)
    {
LABEL_105:
      if (++v115 == v108)
        goto LABEL_106;
    }
    v126 = 0;
    v59 = 0;
    while (1)
    {
      if (v117)
      {
        v60 = 0;
        v61 = 0;
        v62 = 0;
        v131 = v110;
        while (1)
        {
          v63 = v60 + v112 * v103;
          if ((v52 & 1) == 0 && (v63 < *v51 || v63 >= v116 - v51[1]))
            goto LABEL_87;
          v118 = v60;
          v119 = v61;
          if (v122)
            break;
LABEL_84:
          v60 = v118;
          v61 = v119 + 1;
          v51 = a7;
LABEL_87:
          if (++v60 == v117)
            goto LABEL_90;
        }
        v64 = 0;
        while (2)
        {
          v123 = v64;
          v65 = v64 + v113 * v102;
          if ((v52 & 1) != 0)
          {
            if ((_DWORD)v121)
              goto LABEL_56;
LABEL_83:
            v64 = v123 + 1;
            v52 = a17;
            if (v123 + 1 == v122)
              goto LABEL_84;
            continue;
          }
          break;
        }
        if (v65 < a7[2])
          goto LABEL_83;
        if (v65 >= v120 - a7[3] || (_DWORD)v121 == 0)
          goto LABEL_83;
LABEL_56:
        v67 = 0;
        while (2)
        {
          v68 = v67 + v115 * v104;
          if ((a17 & 1) != 0)
          {
            if (!v128)
              goto LABEL_82;
LABEL_65:
            v71 = v125;
            v70 = v126;
            do
            {
              LOWORD(__e[0]) = *(_WORD *)(a1
                                        + 2
              if (!v141)
                std::__throw_bad_function_call[abi:ne180100]();
              v72 = (*(uint64_t (**)(_QWORD *, int *))(*v141 + 48))(v141, __e);
              if (!v62)
              {
                LOWORD(__e[0]) = v72;
                MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                v74 = v73;
                v75 = ilogbf(v73);
                if (v75 <= -14)
                  v76 = -14;
                else
                  v76 = v75;
                v77 = ilogbf(1.0);
                if (v77 <= -14)
                  v78 = -14;
                else
                  v78 = v77;
                if (v76 + a8 + v78 >= -20)
                {
                  v79 = (int)llroundf(v74 * v55) + (uint64_t)v131;
                  if (v79 <= 0x7FFFFFFF)
                  {
                    v80 = v79 < (uint64_t)0xFFFFFFFF80000000;
                    if (v79 < (uint64_t)0xFFFFFFFF80000000)
                      LODWORD(v79) = -8388608;
                    v131 = v79;
                    v62 = 2 * v80;
                  }
                  else
                  {
                    v62 = 1;
                    v131 = 2139095040;
                  }
                }
                else
                {
                  v62 = 0;
                }
              }
              ++v70;
              --v71;
            }
            while (v71);
          }
          else if (v68 >= a7[4] && v68 < v124 - a7[5] && v128 != 0)
          {
            goto LABEL_65;
          }
LABEL_82:
          if (++v67 == v129)
            goto LABEL_83;
          continue;
        }
      }
      v62 = 0;
      v61 = 0;
      v131 = v110;
LABEL_90:
      LOWORD(__e[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v61];
      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
      v82 = v81 * v58;
      v83 = 0.0;
      if (v82 == 0.0)
      {
        if (v62)
          goto LABEL_92;
      }
      else
      {
        __e[0] = 0;
        v85 = frexp(v82, __e);
        v86 = ldexp(v85, 11);
        v83 = ldexp(round(v86), __e[0] - 11);
        if (v62)
        {
LABEL_92:
          v84 = INFINITY;
          if (v62 == 2)
            v84 = -INFINITY;
          goto LABEL_98;
        }
      }
      if (!v131)
      {
        v89 = 0.0;
        goto LABEL_99;
      }
      v84 = (double)v131;
LABEL_98:
      __e[0] = 0;
      v87 = frexp(v84, __e);
      v88 = ldexp(v87, 11);
      v89 = ldexp(round(v88), __e[0] - 11);
LABEL_99:
      v90 = v83 * v89;
      v91 = 0.0;
      if (v90 != 0.0)
      {
        __e[0] = 0;
        v92 = frexp(v90, __e);
        v93 = ldexp(v92, 11);
        v91 = ldexp(round(v93), __e[0] - 11);
      }
      *(float *)__e = v91;
      v94 = *(_QWORD *)(a19 + 24);
      if (!v94)
        std::__throw_bad_function_call[abi:ne180100]();
      v95 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v94 + 48))(v94, __e);
      v97 = MIL::Fp16::FromFloat(v95, v96);
      *(_WORD *)(*a9
               + 2
      v126 += v109;
      v51 = a7;
      if (v59 == v114)
        goto LABEL_105;
    }
  }
LABEL_109:
  v98 = v141;
  if (v141 == v140)
  {
    v99 = 4;
    v98 = v140;
  }
  else
  {
    if (!v141)
      goto LABEL_115;
    v99 = 5;
  }
  (*(void (**)(__n128))(*v98 + 8 * v99))(v50);
LABEL_115:
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
}

void sub_20687D050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;
  void *v22;
  void *v23;

  v21 = *(void **)(v19 - 248);
  if (v21)
  {
    *(_QWORD *)(v19 - 240) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(v19 - 224);
  if (v22)
  {
    *(_QWORD *)(v19 - 216) = v22;
    operator delete(v22);
  }
  v23 = *(void **)a19;
  if (*(_QWORD *)a19)
  {
    *(_QWORD *)(a19 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16)
{
  const void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  int *v41;
  uint64_t v42;
  double v43;
  float v44;
  float v45;
  unsigned int v46;
  __n128 v47;
  int *v48;
  char v49;
  uint64_t v50;
  float v51;
  float v52;
  int v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v64;
  unint64_t v65;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  float v70;
  float v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  _BOOL4 v77;
  float v78;
  float v79;
  float v80;
  double v81;
  long double v82;
  double v83;
  long double v84;
  double v85;
  float v86;
  float v87;
  float v88;
  long double v89;
  double v90;
  uint64_t v91;
  float v92;
  int v93;
  int v94;
  _QWORD *v95;
  uint64_t v96;
  const char *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v125;
  uint64_t v126;
  int v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  __int16 v135;
  __int16 v136;
  _QWORD v137[3];
  _QWORD *v138;
  int __e[4];
  char v140[8];
  int *v141;
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  v136 = a12;
  v135 = a13;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v21 = *(const void **)a3;
  v22 = *(_QWORD *)(a3 + 8);
  v23 = (v22 - *(_QWORD *)a3) >> 3;
  if (v23 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v97 = "x_rank == o_shape.size()";
    v98 = 68;
    goto LABEL_133;
  }
  v24 = *a5;
  v25 = a5[1];
  v26 = (v25 - *a5) >> 2;
  if (v26 != v23 - 1)
  {
    v97 = "kernel_sizes.size() == num_spatial_dims + 1";
    v98 = 69;
    goto LABEL_133;
  }
  v27 = *a6;
  v28 = a6[1];
  if (v26 != (v28 - *a6) >> 2)
  {
    v97 = "strides.size() == num_spatial_dims + 1";
    v98 = 70;
    goto LABEL_133;
  }
  if (*(_DWORD *)(v25 - 4) != *(_DWORD *)(v28 - 4))
  {
    v97 = "kernel_sizes.back() == strides.back()";
    v98 = 71;
LABEL_133:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v98, v97);
  }
  v29 = v23 - 2;
  v30 = 4 * v23;
  if (v23 == 5)
  {
    v114 = *(int *)(v24 + v30 - 20);
    v100 = *(int *)(v27 + v30 - 20);
    v31 = 2;
LABEL_11:
    v32 = v30 - 16;
    v119 = *(int *)(v24 + v32);
    v33 = *(_DWORD *)(v27 + v32);
    v34 = 1;
    goto LABEL_13;
  }
  v31 = v23 - 3;
  v100 = 1;
  if (v29 > 1)
  {
    v114 = 1;
    goto LABEL_11;
  }
  v34 = 0;
  v114 = 1;
  v119 = 1;
  v33 = 1;
LABEL_13:
  v125 = *(_DWORD *)(v24 + 4 * v29);
  v118 = *(int *)(v24 + 4 * v31);
  v101 = *(int *)(v27 + 4 * v31);
  v106 = *(int *)(v27 + 4 * v29);
  v132 = 0;
  v133 = 0;
  v134 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v132, v21, v22, v23);
  v129 = 0;
  v130 = 0;
  v131 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v129, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v23 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v132, (uint64_t)(v132 + 8), (char *)__e, v140, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v129, (uint64_t)(v129 + 8), (char *)__e, v140, 2);
  }
  else if (v23 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v132, v132 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v129, v129 + 8, __e);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v136);
  v36 = v35;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v135);
  if (v23 == 5)
  {
    v36 = v36 * (float)v114;
    if (a14)
      v37 = v37 / (float)v114;
  }
  v38 = v36 * (float)v119;
  if (v34)
  {
    v39 = v37 / (float)v119;
  }
  else
  {
    v38 = v36;
    v39 = v37;
  }
  v40 = v38 * (float)v118;
  v102 = *(_QWORD *)v129;
  v103 = *((_QWORD *)v129 + 1);
  v104 = *((_QWORD *)v129 + 2);
  v105 = *((_QWORD *)v129 + 3);
  v111 = *((_QWORD *)v129 + 4);
  v113 = *((_QWORD *)v132 + 1);
  v117 = *((_QWORD *)v132 + 2);
  v121 = *((_QWORD *)v132 + 3);
  v137[0] = &off_24BFE7900;
  v138 = v137;
  if (a15)
  {
    *(_QWORD *)__e = &off_24BFE7980;
    v141 = __e;
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](__e, v137);
    v41 = v141;
    if (v141 == __e)
    {
      v42 = 4;
      v41 = __e;
    }
    else
    {
      if (!v141)
        goto LABEL_29;
      v42 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
  }
LABEL_29:
  v43 = ldexp(1.0, a8 + 20);
  v44 = ldexp(1.0, a8 + 20 + a10);
  v45 = v40 * v44;
  v46 = llroundf(v45);
  if (fabsf(v45) < 1.0)
    v46 = 0;
  v107 = v46;
  v47.n128_f64[0] = exp2(-(double)(a8 + 20 + a11));
  v48 = a7;
  v49 = a14;
  if (v102)
  {
    v50 = 0;
    v51 = v39 / (float)v118;
    v99 = v33;
    v52 = v43;
    v47.n128_f64[0] = v47.n128_f64[0] * v51;
    v53 = v125;
    if (v125 <= 1)
      v53 = 1;
    v122 = v53;
    v54 = v118;
    if (v118 <= 1)
      v54 = 1;
    v126 = v54;
    v55 = v47.n128_f64[0];
    while (!v103)
    {
LABEL_117:
      if (++v50 == v102)
        goto LABEL_118;
    }
    v109 = 0;
    while (!v104)
    {
LABEL_116:
      if (++v109 == v103)
        goto LABEL_117;
    }
    v110 = 0;
    while (!v105)
    {
LABEL_115:
      if (++v110 == v104)
        goto LABEL_116;
    }
    v112 = 0;
    while (!v111)
    {
LABEL_114:
      if (++v112 == v105)
        goto LABEL_115;
    }
    v123 = 0;
    v56 = 0;
    while (1)
    {
      if (v114)
      {
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v128 = v107;
        while (1)
        {
          v60 = v57 + v109 * v100;
          if ((v49 & 1) == 0 && (v60 < *v48 || v60 >= v113 - v48[1]))
            goto LABEL_89;
          v115 = v57;
          v116 = v58;
          if (v119)
            break;
LABEL_86:
          v57 = v115;
          v58 = v116 + 1;
          v48 = a7;
LABEL_89:
          if (++v57 == v114)
            goto LABEL_92;
        }
        v61 = 0;
        while (2)
        {
          v120 = v61;
          v62 = v61 + v110 * v99;
          if ((v49 & 1) != 0)
          {
            if ((_DWORD)v118)
              goto LABEL_58;
LABEL_85:
            v61 = v120 + 1;
            v49 = a14;
            if (v120 + 1 == v119)
              goto LABEL_86;
            continue;
          }
          break;
        }
        if (v62 < a7[2])
          goto LABEL_85;
        if (v62 >= v117 - a7[3] || (_DWORD)v118 == 0)
          goto LABEL_85;
LABEL_58:
        v64 = 0;
        while (2)
        {
          v65 = v64 + v112 * v101;
          if ((a14 & 1) != 0)
          {
            if (!v125)
              goto LABEL_84;
LABEL_67:
            v68 = v122;
            v67 = v123;
            do
            {
              LOWORD(__e[0]) = *(_WORD *)(a1
                                        + 2
              if (!v138)
                std::__throw_bad_function_call[abi:ne180100]();
              v69 = (*(uint64_t (**)(_QWORD *, int *))(*v138 + 48))(v138, __e);
              if (!v59)
              {
                LOWORD(__e[0]) = v69;
                MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                v71 = v70;
                v72 = ilogbf(v70);
                if (v72 <= -14)
                  v73 = -14;
                else
                  v73 = v72;
                v74 = ilogbf(1.0);
                if (v74 <= -14)
                  v75 = -14;
                else
                  v75 = v74;
                if (v73 + a8 + v75 >= -20)
                {
                  v76 = (int)llroundf(v71 * v52) + (uint64_t)v128;
                  if (v76 <= 0x7FFFFFFF)
                  {
                    v77 = v76 < (uint64_t)0xFFFFFFFF80000000;
                    if (v76 < (uint64_t)0xFFFFFFFF80000000)
                      LODWORD(v76) = -8388608;
                    v128 = v76;
                    v59 = 2 * v77;
                  }
                  else
                  {
                    v59 = 1;
                    v128 = 2139095040;
                  }
                }
                else
                {
                  v59 = 0;
                }
              }
              ++v67;
              --v68;
            }
            while (v68);
          }
          else if (v65 >= a7[4] && v65 < v121 - a7[5] && v125 != 0)
          {
            goto LABEL_67;
          }
LABEL_84:
          if (++v64 == v126)
            goto LABEL_85;
          continue;
        }
      }
      v59 = 0;
      v58 = 0;
      v128 = v107;
LABEL_92:
      LOWORD(__e[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v58];
      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
      v79 = v78 * v55;
      v80 = 0.0;
      if (v79 == 0.0)
      {
        if (v59)
          goto LABEL_94;
      }
      else
      {
        __e[0] = 0;
        v82 = frexp(v79, __e);
        v83 = ldexp(v82, 11);
        v80 = ldexp(round(v83), __e[0] - 11);
        if (v59)
        {
LABEL_94:
          v81 = INFINITY;
          if (v59 == 2)
            v81 = -INFINITY;
          goto LABEL_100;
        }
      }
      if (!v128)
      {
        v86 = 0.0;
        goto LABEL_101;
      }
      v81 = (double)v128;
LABEL_100:
      __e[0] = 0;
      v84 = frexp(v81, __e);
      v85 = ldexp(v84, 11);
      v86 = ldexp(round(v85), __e[0] - 11);
LABEL_101:
      v87 = v80 * v86;
      v88 = 0.0;
      if (v87 != 0.0)
      {
        __e[0] = 0;
        v89 = frexp(v87, __e);
        v90 = ldexp(v89, 11);
        v88 = ldexp(round(v90), __e[0] - 11);
      }
      *(float *)__e = v88;
      v91 = *(_QWORD *)(a16 + 24);
      if (!v91)
        std::__throw_bad_function_call[abi:ne180100]();
      v92 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v91 + 48))(v91, __e);
      if (v92 == INFINITY)
      {
        LOBYTE(v93) = -1;
      }
      else if (v92 == -INFINITY)
      {
        LOBYTE(v93) = 0;
      }
      else
      {
        v94 = llroundf(v92);
        if (v94 >= 255)
          v94 = 255;
        v93 = v94 & ~(v94 >> 31);
      }
      *(_BYTE *)(*a9
      v123 += v106;
      v48 = a7;
      if (v56 == v111)
        goto LABEL_114;
    }
  }
LABEL_118:
  v95 = v138;
  if (v138 == v137)
  {
    v96 = 4;
    v95 = v137;
  }
  else
  {
    if (!v138)
      goto LABEL_124;
    v96 = 5;
  }
  (*(void (**)(__n128))(*v95 + 8 * v96))(v47);
LABEL_124:
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
}

void sub_20687DA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;
  void *v22;
  void *v23;

  v21 = *(void **)(v19 - 248);
  if (v21)
  {
    *(_QWORD *)(v19 - 240) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(v19 - 224);
  if (v22)
  {
    *(_QWORD *)(v19 - 216) = v22;
    operator delete(v22);
  }
  v23 = *(void **)a19;
  if (*(_QWORD *)a19)
  {
    *(_QWORD *)(a19 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16)
{
  const void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  int *v41;
  uint64_t v42;
  double v43;
  float v44;
  float v45;
  unsigned int v46;
  __n128 v47;
  int *v48;
  char v49;
  uint64_t v50;
  float v51;
  float v52;
  int v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v64;
  unint64_t v65;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  float v70;
  float v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  _BOOL4 v77;
  float v78;
  float v79;
  float v80;
  double v81;
  long double v82;
  double v83;
  long double v84;
  double v85;
  float v86;
  float v87;
  float v88;
  long double v89;
  double v90;
  uint64_t v91;
  float v92;
  char v93;
  int v94;
  _QWORD *v95;
  uint64_t v96;
  const char *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v125;
  uint64_t v126;
  int v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  __int16 v135;
  __int16 v136;
  _QWORD v137[3];
  _QWORD *v138;
  int __e[4];
  char v140[8];
  int *v141;
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  v136 = a12;
  v135 = a13;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v21 = *(const void **)a3;
  v22 = *(_QWORD *)(a3 + 8);
  v23 = (v22 - *(_QWORD *)a3) >> 3;
  if (v23 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v97 = "x_rank == o_shape.size()";
    v98 = 68;
    goto LABEL_135;
  }
  v24 = *a5;
  v25 = a5[1];
  v26 = (v25 - *a5) >> 2;
  if (v26 != v23 - 1)
  {
    v97 = "kernel_sizes.size() == num_spatial_dims + 1";
    v98 = 69;
    goto LABEL_135;
  }
  v27 = *a6;
  v28 = a6[1];
  if (v26 != (v28 - *a6) >> 2)
  {
    v97 = "strides.size() == num_spatial_dims + 1";
    v98 = 70;
    goto LABEL_135;
  }
  if (*(_DWORD *)(v25 - 4) != *(_DWORD *)(v28 - 4))
  {
    v97 = "kernel_sizes.back() == strides.back()";
    v98 = 71;
LABEL_135:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v98, v97);
  }
  v29 = v23 - 2;
  v30 = 4 * v23;
  if (v23 == 5)
  {
    v114 = *(int *)(v24 + v30 - 20);
    v100 = *(int *)(v27 + v30 - 20);
    v31 = 2;
LABEL_11:
    v32 = v30 - 16;
    v119 = *(int *)(v24 + v32);
    v33 = *(_DWORD *)(v27 + v32);
    v34 = 1;
    goto LABEL_13;
  }
  v31 = v23 - 3;
  v100 = 1;
  if (v29 > 1)
  {
    v114 = 1;
    goto LABEL_11;
  }
  v34 = 0;
  v114 = 1;
  v119 = 1;
  v33 = 1;
LABEL_13:
  v125 = *(_DWORD *)(v24 + 4 * v29);
  v118 = *(int *)(v24 + 4 * v31);
  v101 = *(int *)(v27 + 4 * v31);
  v106 = *(int *)(v27 + 4 * v29);
  v132 = 0;
  v133 = 0;
  v134 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v132, v21, v22, v23);
  v129 = 0;
  v130 = 0;
  v131 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v129, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v23 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v132, (uint64_t)(v132 + 8), (char *)__e, v140, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v129, (uint64_t)(v129 + 8), (char *)__e, v140, 2);
  }
  else if (v23 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v132, v132 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v129, v129 + 8, __e);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v136);
  v36 = v35;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v135);
  if (v23 == 5)
  {
    v36 = v36 * (float)v114;
    if (a14)
      v37 = v37 / (float)v114;
  }
  v38 = v36 * (float)v119;
  if (v34)
  {
    v39 = v37 / (float)v119;
  }
  else
  {
    v38 = v36;
    v39 = v37;
  }
  v40 = v38 * (float)v118;
  v102 = *(_QWORD *)v129;
  v103 = *((_QWORD *)v129 + 1);
  v104 = *((_QWORD *)v129 + 2);
  v105 = *((_QWORD *)v129 + 3);
  v111 = *((_QWORD *)v129 + 4);
  v113 = *((_QWORD *)v132 + 1);
  v117 = *((_QWORD *)v132 + 2);
  v121 = *((_QWORD *)v132 + 3);
  v137[0] = &off_24BFE7A00;
  v138 = v137;
  if (a15)
  {
    *(_QWORD *)__e = &off_24BFE7A80;
    v141 = __e;
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](__e, v137);
    v41 = v141;
    if (v141 == __e)
    {
      v42 = 4;
      v41 = __e;
    }
    else
    {
      if (!v141)
        goto LABEL_29;
      v42 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
  }
LABEL_29:
  v43 = ldexp(1.0, a8 + 20);
  v44 = ldexp(1.0, a8 + 20 + a10);
  v45 = v40 * v44;
  v46 = llroundf(v45);
  if (fabsf(v45) < 1.0)
    v46 = 0;
  v107 = v46;
  v47.n128_f64[0] = exp2(-(double)(a8 + 20 + a11));
  v48 = a7;
  v49 = a14;
  if (v102)
  {
    v50 = 0;
    v51 = v39 / (float)v118;
    v99 = v33;
    v52 = v43;
    v47.n128_f64[0] = v47.n128_f64[0] * v51;
    v53 = v125;
    if (v125 <= 1)
      v53 = 1;
    v122 = v53;
    v54 = v118;
    if (v118 <= 1)
      v54 = 1;
    v126 = v54;
    v55 = v47.n128_f64[0];
    while (!v103)
    {
LABEL_119:
      if (++v50 == v102)
        goto LABEL_120;
    }
    v109 = 0;
    while (!v104)
    {
LABEL_118:
      if (++v109 == v103)
        goto LABEL_119;
    }
    v110 = 0;
    while (!v105)
    {
LABEL_117:
      if (++v110 == v104)
        goto LABEL_118;
    }
    v112 = 0;
    while (!v111)
    {
LABEL_116:
      if (++v112 == v105)
        goto LABEL_117;
    }
    v123 = 0;
    v56 = 0;
    while (1)
    {
      if (v114)
      {
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v128 = v107;
        while (1)
        {
          v60 = v57 + v109 * v100;
          if ((v49 & 1) == 0 && (v60 < *v48 || v60 >= v113 - v48[1]))
            goto LABEL_89;
          v115 = v57;
          v116 = v58;
          if (v119)
            break;
LABEL_86:
          v57 = v115;
          v58 = v116 + 1;
          v48 = a7;
LABEL_89:
          if (++v57 == v114)
            goto LABEL_92;
        }
        v61 = 0;
        while (2)
        {
          v120 = v61;
          v62 = v61 + v110 * v99;
          if ((v49 & 1) != 0)
          {
            if ((_DWORD)v118)
              goto LABEL_58;
LABEL_85:
            v61 = v120 + 1;
            v49 = a14;
            if (v120 + 1 == v119)
              goto LABEL_86;
            continue;
          }
          break;
        }
        if (v62 < a7[2])
          goto LABEL_85;
        if (v62 >= v117 - a7[3] || (_DWORD)v118 == 0)
          goto LABEL_85;
LABEL_58:
        v64 = 0;
        while (2)
        {
          v65 = v64 + v112 * v101;
          if ((a14 & 1) != 0)
          {
            if (!v125)
              goto LABEL_84;
LABEL_67:
            v68 = v122;
            v67 = v123;
            do
            {
              LOWORD(__e[0]) = *(_WORD *)(a1
                                        + 2
              if (!v138)
                std::__throw_bad_function_call[abi:ne180100]();
              v69 = (*(uint64_t (**)(_QWORD *, int *))(*v138 + 48))(v138, __e);
              if (!v59)
              {
                LOWORD(__e[0]) = v69;
                MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                v71 = v70;
                v72 = ilogbf(v70);
                if (v72 <= -14)
                  v73 = -14;
                else
                  v73 = v72;
                v74 = ilogbf(1.0);
                if (v74 <= -14)
                  v75 = -14;
                else
                  v75 = v74;
                if (v73 + a8 + v75 >= -20)
                {
                  v76 = (int)llroundf(v71 * v52) + (uint64_t)v128;
                  if (v76 <= 0x7FFFFFFF)
                  {
                    v77 = v76 < (uint64_t)0xFFFFFFFF80000000;
                    if (v76 < (uint64_t)0xFFFFFFFF80000000)
                      LODWORD(v76) = -8388608;
                    v128 = v76;
                    v59 = 2 * v77;
                  }
                  else
                  {
                    v59 = 1;
                    v128 = 2139095040;
                  }
                }
                else
                {
                  v59 = 0;
                }
              }
              ++v67;
              --v68;
            }
            while (v68);
          }
          else if (v65 >= a7[4] && v65 < v121 - a7[5] && v125 != 0)
          {
            goto LABEL_67;
          }
LABEL_84:
          if (++v64 == v126)
            goto LABEL_85;
          continue;
        }
      }
      v59 = 0;
      v58 = 0;
      v128 = v107;
LABEL_92:
      LOWORD(__e[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v58];
      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
      v79 = v78 * v55;
      v80 = 0.0;
      if (v79 == 0.0)
      {
        if (v59)
          goto LABEL_94;
      }
      else
      {
        __e[0] = 0;
        v82 = frexp(v79, __e);
        v83 = ldexp(v82, 11);
        v80 = ldexp(round(v83), __e[0] - 11);
        if (v59)
        {
LABEL_94:
          v81 = INFINITY;
          if (v59 == 2)
            v81 = -INFINITY;
          goto LABEL_100;
        }
      }
      if (!v128)
      {
        v86 = 0.0;
        goto LABEL_101;
      }
      v81 = (double)v128;
LABEL_100:
      __e[0] = 0;
      v84 = frexp(v81, __e);
      v85 = ldexp(v84, 11);
      v86 = ldexp(round(v85), __e[0] - 11);
LABEL_101:
      v87 = v80 * v86;
      v88 = 0.0;
      if (v87 != 0.0)
      {
        __e[0] = 0;
        v89 = frexp(v87, __e);
        v90 = ldexp(v89, 11);
        v88 = ldexp(round(v90), __e[0] - 11);
      }
      *(float *)__e = v88;
      v91 = *(_QWORD *)(a16 + 24);
      if (!v91)
        std::__throw_bad_function_call[abi:ne180100]();
      v92 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v91 + 48))(v91, __e);
      if (v92 == INFINITY)
      {
        v93 = 127;
      }
      else if (v92 == -INFINITY)
      {
        v93 = 0x80;
      }
      else
      {
        v94 = llroundf(v92);
        if (v94 >= 127)
          v94 = 127;
        if (v94 <= -128)
          v93 = 0x80;
        else
          v93 = v94;
      }
      *(_BYTE *)(*a9
      v123 += v106;
      v48 = a7;
      if (v56 == v111)
        goto LABEL_116;
    }
  }
LABEL_120:
  v95 = v138;
  if (v138 == v137)
  {
    v96 = 4;
    v95 = v137;
  }
  else
  {
    if (!v138)
      goto LABEL_126;
    v96 = 5;
  }
  (*(void (**)(__n128))(*v95 + 8 * v96))(v47);
LABEL_126:
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
}

void sub_20687E4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;
  void *v22;
  void *v23;

  v21 = *(void **)(v19 - 248);
  if (v21)
  {
    *(_QWORD *)(v19 - 240) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(v19 - 224);
  if (v22)
  {
    *(_QWORD *)(v19 - 216) = v22;
    operator delete(v22);
  }
  v23 = *(void **)a19;
  if (*(_QWORD *)a19)
  {
    *(_QWORD *)(a19 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, _QWORD *a9@<X8>, char a10, char a11, int a12, __int16 a13, int a14, __int16 a15, int a16, char a17, uint64_t a18)
{
  const void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  _QWORD *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  int64x2_t *p_src;
  float v46;
  double v47;
  float v48;
  float v49;
  unsigned int v50;
  double v51;
  uint64_t v52;
  float v53;
  double v54;
  int v55;
  uint64_t v56;
  float v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  BOOL v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  double v81;
  long double v82;
  double v83;
  long double v84;
  double v85;
  float v86;
  float v87;
  float v88;
  long double v89;
  double v90;
  uint64_t v91;
  MIL::Fp16 *v92;
  float v93;
  __int16 v94;
  uint64_t v95;
  const char *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v124;
  uint64_t v125;
  int v127;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  __int16 v135;
  __int16 v136;
  int __e;
  int64x2_t __src;
  char v139[8];
  int64x2_t *v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  v136 = a13;
  v135 = a15;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  v23 = *(const void **)a3;
  v24 = *(_QWORD *)(a3 + 8);
  v25 = (v24 - *(_QWORD *)a3) >> 3;
  if (v25 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v96 = "x_rank == o_shape.size()";
    v97 = 68;
    goto LABEL_119;
  }
  v26 = *a5;
  v27 = a5[1];
  v28 = (v27 - *a5) >> 2;
  if (v28 != v25 - 1)
  {
    v96 = "kernel_sizes.size() == num_spatial_dims + 1";
    v97 = 69;
    goto LABEL_119;
  }
  v29 = *a6;
  v30 = a6[1];
  if (v28 != (v30 - *a6) >> 2)
  {
    v96 = "strides.size() == num_spatial_dims + 1";
    v97 = 70;
    goto LABEL_119;
  }
  if (*(_DWORD *)(v27 - 4) != *(_DWORD *)(v30 - 4))
  {
    v96 = "kernel_sizes.back() == strides.back()";
    v97 = 71;
LABEL_119:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v97, v96);
  }
  v31 = v25 - 2;
  v32 = 4 * v25;
  if (v25 == 5)
  {
    v113 = *(int *)(v26 + v32 - 20);
    v100 = *(int *)(v29 + v32 - 20);
    v33 = 2;
LABEL_9:
    v34 = v32 - 16;
    v118 = *(int *)(v26 + v34);
    v35 = *(_DWORD *)(v29 + v34);
    v36 = 1;
    goto LABEL_11;
  }
  v33 = v25 - 3;
  v100 = 1;
  if (v31 > 1)
  {
    v113 = 1;
    goto LABEL_9;
  }
  v36 = 0;
  v113 = 1;
  v118 = 1;
  v35 = 1;
LABEL_11:
  v124 = *(_DWORD *)(v26 + 4 * v31);
  v37 = *(int *)(v26 + 4 * v33);
  v101 = *(int *)(v29 + 4 * v33);
  v105 = *(int *)(v29 + 4 * v31);
  v132 = 0;
  v133 = 0;
  v134 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v132, v23, v24, v25);
  v129 = 0;
  v130 = 0;
  v131 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v129, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v25 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v132, (uint64_t)(v132 + 8), __src.i8, v139, 2);
    __src = vdupq_n_s64(1uLL);
    v38 = a9;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v129, (uint64_t)(v129 + 8), __src.i8, v139, 2);
  }
  else
  {
    v67 = v25 == 4;
    v38 = a9;
    if (v67)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v132, v132 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v129, v129 + 8, &__src);
    }
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v136);
  v40 = v39;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v135);
  if (v31 == 3)
  {
    v40 = v40 * (float)v113;
    if (a17)
      v41 = v41 / (float)v113;
  }
  v42 = v40 * (float)v118;
  if (v36)
  {
    v43 = v41 / (float)v118;
  }
  else
  {
    v42 = v40;
    v43 = v41;
  }
  v44 = *(_QWORD *)v129;
  v102 = *((_QWORD *)v129 + 1);
  v103 = *((_QWORD *)v129 + 2);
  v104 = *((_QWORD *)v129 + 3);
  v109 = *((_QWORD *)v129 + 4);
  v112 = *((_QWORD *)v132 + 1);
  v116 = *((_QWORD *)v132 + 2);
  v120 = *((_QWORD *)v132 + 3);
  p_src = &__src;
  __src.i64[0] = (uint64_t)&off_24BFE7B00;
  v140 = &__src;
  v46 = v42 * (float)v37;
  v47 = ldexp(1.0, a8);
  v48 = ldexp(1.0, a10 + a8);
  v49 = v46 * v48;
  v50 = llroundf(v49);
  if (fabsf(v49) < 1.0)
    v50 = 0;
  v106 = v50;
  v51 = exp2(-(double)(a11 + a8));
  v99 = v44;
  if (!v44)
  {
    v95 = 4;
LABEL_107:
    (*(void (**)(int64x2_t *))(p_src->i64[0] + 8 * v95))(p_src);
    goto LABEL_108;
  }
  v52 = 0;
  v98 = v35;
  v53 = v47;
  v54 = v51 * (float)(v43 / (float)v37);
  v127 = -20 - a8;
  v55 = v124;
  if (v124 <= 1)
    v55 = 1;
  v121 = v55;
  if (v37 <= 1)
    v56 = 1;
  else
    v56 = v37;
  v125 = v56;
  v57 = v54;
  v58 = a17;
  v117 = v37;
  do
  {
    if (v102)
    {
      v107 = 0;
      while (!v103)
      {
LABEL_101:
        if (++v107 == v102)
          goto LABEL_102;
      }
      v108 = 0;
      while (!v104)
      {
LABEL_100:
        if (++v108 == v103)
          goto LABEL_101;
      }
      v110 = 0;
      while (!v109)
      {
LABEL_99:
        if (++v110 == v104)
          goto LABEL_100;
      }
      v122 = 0;
      v59 = 0;
      while (1)
      {
        v111 = v59;
        if (v113)
        {
          v60 = 0;
          v61 = 0;
          v62 = 0;
          v63 = v106;
          while (1)
          {
            v64 = v60 + v107 * v100;
            if ((v58 & 1) == 0 && (v64 < *a7 || v64 >= v112 - a7[1]))
              goto LABEL_81;
            v114 = v60;
            v115 = v61;
            if (v118)
              break;
LABEL_78:
            v60 = v114;
            v61 = v115 + 1;
LABEL_81:
            if (++v60 == v113)
              goto LABEL_84;
          }
          v65 = 0;
          while (2)
          {
            v119 = v65;
            v66 = v65 + v108 * v98;
            if ((v58 & 1) != 0)
            {
              if (v117)
                goto LABEL_52;
LABEL_77:
              v65 = v119 + 1;
              v58 = a17;
              if (v119 + 1 == v118)
                goto LABEL_78;
              continue;
            }
            break;
          }
          if (v66 < a7[2])
            goto LABEL_77;
          v67 = v66 >= v116 - a7[3] || v117 == 0;
          if (v67)
            goto LABEL_77;
LABEL_52:
          v68 = 0;
          while (2)
          {
            v69 = v68 + v110 * v101;
            if ((a17 & 1) != 0)
            {
              if (!v124)
                goto LABEL_76;
LABEL_61:
              v71 = v121;
              v72 = v122;
              do
              {
                LOBYTE(__e) = *(_BYTE *)(a1
                if (!v140)
                  std::__throw_bad_function_call[abi:ne180100]();
                v73 = (*(uint64_t (**)(int64x2_t *, int *))(v140->i64[0] + 48))(v140, &__e);
                if (!v62)
                {
                  v74 = v73;
                  v75 = ilogbf(1.0);
                  if (v75 <= -14)
                    v76 = -14;
                  else
                    v76 = v75;
                  if (v76 >= v127)
                  {
                    v77 = (int)llroundf(v53 * (float)v74) + (uint64_t)v63;
                    if (v77 <= 0x7FFFFFFF)
                    {
                      if (v77 >= (uint64_t)0xFFFFFFFF80000000)
                        v63 = v77;
                      else
                        v63 = -8388608;
                      v62 = 2 * (v77 < (uint64_t)0xFFFFFFFF80000000);
                    }
                    else
                    {
                      v62 = 1;
                      v63 = 2139095040;
                    }
                  }
                  else
                  {
                    v62 = 0;
                  }
                }
                ++v72;
                --v71;
              }
              while (v71);
            }
            else if (v69 >= a7[4] && v69 < v120 - a7[5] && v124 != 0)
            {
              goto LABEL_61;
            }
LABEL_76:
            ++v68;
            v38 = a9;
            if (v68 == v125)
              goto LABEL_77;
            continue;
          }
        }
        v62 = 0;
        v61 = 0;
        v63 = v106;
LABEL_84:
        LOWORD(__e) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v61];
        MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
        v79 = v78 * v57;
        v80 = 0.0;
        if (v79 == 0.0)
        {
          if (v62)
            goto LABEL_86;
        }
        else
        {
          __e = 0;
          v82 = frexp(v79, &__e);
          v83 = ldexp(v82, 11);
          v80 = ldexp(round(v83), __e - 11);
          if (v62)
          {
LABEL_86:
            v81 = INFINITY;
            if (v62 == 2)
              v81 = -INFINITY;
            goto LABEL_92;
          }
        }
        if (!v63)
        {
          v86 = 0.0;
          goto LABEL_93;
        }
        v81 = (double)v63;
LABEL_92:
        __e = 0;
        v84 = frexp(v81, &__e);
        v85 = ldexp(v84, 11);
        v86 = ldexp(round(v85), __e - 11);
LABEL_93:
        v87 = v80 * v86;
        v88 = 0.0;
        if (v87 != 0.0)
        {
          __e = 0;
          v89 = frexp(v87, &__e);
          v90 = ldexp(v89, 11);
          v88 = ldexp(round(v90), __e - 11);
        }
        __e = LODWORD(v88);
        v91 = *(_QWORD *)(a18 + 24);
        if (!v91)
          std::__throw_bad_function_call[abi:ne180100]();
        v92 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v91 + 48))(v91, &__e);
        v94 = MIL::Fp16::FromFloat(v92, v93);
        *(_WORD *)(*v38
                 + 2
        v59 = v111 + 1;
        v122 += v105;
        if (v111 + 1 == v109)
          goto LABEL_99;
      }
    }
LABEL_102:
    ++v52;
  }
  while (v52 != v99);
  p_src = v140;
  if (v140 == &__src)
  {
    v95 = 4;
    p_src = &__src;
    goto LABEL_107;
  }
  if (v140)
  {
    v95 = 5;
    goto LABEL_107;
  }
LABEL_108:
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
}

void sub_20687EE4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)(v2 - 216);
  if (v4)
  {
    *(_QWORD *)(v2 - 208) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v2 - 192);
  if (v5)
  {
    *(_QWORD *)(v2 - 184) = v5;
    operator delete(v5);
  }
  v6 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  const void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  int64x2_t *p_src;
  float v44;
  double v45;
  float v46;
  float v47;
  unsigned int v48;
  double v49;
  uint64_t v50;
  float v51;
  double v52;
  int v53;
  uint64_t v54;
  float v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  uint64_t v75;
  float v76;
  float v77;
  float v78;
  double v79;
  long double v80;
  double v81;
  long double v82;
  double v83;
  float v84;
  float v85;
  float v86;
  long double v87;
  double v88;
  uint64_t v89;
  float v90;
  int v91;
  int v92;
  uint64_t v93;
  const char *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v122;
  uint64_t v123;
  unint64_t *v124;
  int v125;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  __int16 v133;
  __int16 v134;
  int __e;
  int64x2_t __src;
  char v137[8];
  int64x2_t *v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v134 = a12;
  v133 = a13;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v124 = a9;
  v21 = *(const void **)a3;
  v22 = *(_QWORD *)(a3 + 8);
  v23 = (v22 - *(_QWORD *)a3) >> 3;
  if (v23 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v94 = "x_rank == o_shape.size()";
    v95 = 68;
    goto LABEL_128;
  }
  v24 = *a5;
  v25 = a5[1];
  v26 = (v25 - *a5) >> 2;
  if (v26 != v23 - 1)
  {
    v94 = "kernel_sizes.size() == num_spatial_dims + 1";
    v95 = 69;
    goto LABEL_128;
  }
  v27 = *a6;
  v28 = a6[1];
  if (v26 != (v28 - *a6) >> 2)
  {
    v94 = "strides.size() == num_spatial_dims + 1";
    v95 = 70;
    goto LABEL_128;
  }
  if (*(_DWORD *)(v25 - 4) != *(_DWORD *)(v28 - 4))
  {
    v94 = "kernel_sizes.back() == strides.back()";
    v95 = 71;
LABEL_128:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v95, v94);
  }
  v29 = v23 - 2;
  v30 = 4 * v23;
  if (v23 == 5)
  {
    v111 = *(int *)(v24 + v30 - 20);
    v98 = *(int *)(v27 + v30 - 20);
    v31 = 2;
LABEL_11:
    v32 = v30 - 16;
    v116 = *(int *)(v24 + v32);
    v33 = *(_DWORD *)(v27 + v32);
    v34 = 1;
    goto LABEL_13;
  }
  v31 = v23 - 3;
  v98 = 1;
  if (v29 > 1)
  {
    v111 = 1;
    goto LABEL_11;
  }
  v34 = 0;
  v111 = 1;
  v116 = 1;
  v33 = 1;
LABEL_13:
  v122 = *(_DWORD *)(v24 + 4 * v29);
  v35 = *(int *)(v24 + 4 * v31);
  v99 = *(int *)(v27 + 4 * v31);
  v103 = *(int *)(v27 + 4 * v29);
  v130 = 0;
  v131 = 0;
  v132 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v130, v21, v22, v23);
  v127 = 0;
  v128 = 0;
  v129 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v127, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v23 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v130, (uint64_t)(v130 + 8), __src.i8, v137, 2);
    __src = vdupq_n_s64(1uLL);
    v36 = a9;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v127, (uint64_t)(v127 + 8), __src.i8, v137, 2);
  }
  else
  {
    v65 = v23 == 4;
    v36 = a9;
    if (v65)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v130, v130 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v127, v127 + 8, &__src);
    }
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v134);
  v38 = v37;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v133);
  if (v29 == 3)
  {
    v38 = v38 * (float)v111;
    if (a14)
      v39 = v39 / (float)v111;
  }
  v40 = v38 * (float)v116;
  if (v34)
  {
    v41 = v39 / (float)v116;
  }
  else
  {
    v40 = v38;
    v41 = v39;
  }
  v42 = *(_QWORD *)v127;
  v100 = *((_QWORD *)v127 + 1);
  v101 = *((_QWORD *)v127 + 2);
  v102 = *((_QWORD *)v127 + 3);
  v107 = *((_QWORD *)v127 + 4);
  v110 = *((_QWORD *)v130 + 1);
  v114 = *((_QWORD *)v130 + 2);
  v118 = *((_QWORD *)v130 + 3);
  p_src = &__src;
  __src.i64[0] = (uint64_t)&off_24BFE7B90;
  v138 = &__src;
  v44 = v40 * (float)v35;
  v45 = ldexp(1.0, a8);
  v46 = ldexp(1.0, a10 + a8);
  v47 = v44 * v46;
  v48 = llroundf(v47);
  if (fabsf(v47) < 1.0)
    v48 = 0;
  v104 = v48;
  v49 = exp2(-(double)(a11 + a8));
  v97 = v42;
  if (!v42)
  {
    v93 = 4;
LABEL_116:
    (*(void (**)(int64x2_t *))(p_src->i64[0] + 8 * v93))(p_src);
    goto LABEL_117;
  }
  v50 = 0;
  v96 = v33;
  v51 = v45;
  v52 = v49 * (float)(v41 / (float)v35);
  v125 = -20 - a8;
  v53 = v122;
  if (v122 <= 1)
    v53 = 1;
  v119 = v53;
  if (v35 <= 1)
    v54 = 1;
  else
    v54 = v35;
  v123 = v54;
  v55 = v52;
  v56 = a14;
  v115 = v35;
  do
  {
    if (v100)
    {
      v105 = 0;
      while (!v101)
      {
LABEL_110:
        if (++v105 == v100)
          goto LABEL_111;
      }
      v106 = 0;
      while (!v102)
      {
LABEL_109:
        if (++v106 == v101)
          goto LABEL_110;
      }
      v108 = 0;
      while (!v107)
      {
LABEL_108:
        if (++v108 == v102)
          goto LABEL_109;
      }
      v120 = 0;
      v57 = 0;
      while (1)
      {
        v109 = v57;
        if (v111)
        {
          v58 = 0;
          v59 = 0;
          v60 = 0;
          v61 = v104;
          while (1)
          {
            v62 = v58 + v105 * v98;
            if ((v56 & 1) == 0 && (v62 < *a7 || v62 >= v110 - a7[1]))
              goto LABEL_83;
            v112 = v58;
            v113 = v59;
            if (v116)
              break;
LABEL_80:
            v58 = v112;
            v59 = v113 + 1;
LABEL_83:
            if (++v58 == v111)
              goto LABEL_86;
          }
          v63 = 0;
          while (2)
          {
            v117 = v63;
            v64 = v63 + v106 * v96;
            if ((v56 & 1) != 0)
            {
              if (v115)
                goto LABEL_54;
LABEL_79:
              v63 = v117 + 1;
              v56 = a14;
              if (v117 + 1 == v116)
                goto LABEL_80;
              continue;
            }
            break;
          }
          if (v64 < a7[2])
            goto LABEL_79;
          v65 = v64 >= v114 - a7[3] || v115 == 0;
          if (v65)
            goto LABEL_79;
LABEL_54:
          v66 = 0;
          while (2)
          {
            v67 = v66 + v108 * v99;
            if ((a14 & 1) != 0)
            {
              if (!v122)
                goto LABEL_78;
LABEL_63:
              v69 = v119;
              v70 = v120;
              do
              {
                LOBYTE(__e) = *(_BYTE *)(a1
                if (!v138)
                  std::__throw_bad_function_call[abi:ne180100]();
                v71 = (*(uint64_t (**)(int64x2_t *, int *))(v138->i64[0] + 48))(v138, &__e);
                if (!v60)
                {
                  v72 = v71;
                  v73 = ilogbf(1.0);
                  if (v73 <= -14)
                    v74 = -14;
                  else
                    v74 = v73;
                  if (v74 >= v125)
                  {
                    v75 = (int)llroundf(v51 * (float)v72) + (uint64_t)v61;
                    if (v75 <= 0x7FFFFFFF)
                    {
                      if (v75 >= (uint64_t)0xFFFFFFFF80000000)
                        v61 = v75;
                      else
                        v61 = -8388608;
                      v60 = 2 * (v75 < (uint64_t)0xFFFFFFFF80000000);
                    }
                    else
                    {
                      v60 = 1;
                      v61 = 2139095040;
                    }
                  }
                  else
                  {
                    v60 = 0;
                  }
                }
                ++v70;
                --v69;
              }
              while (v69);
            }
            else if (v67 >= a7[4] && v67 < v118 - a7[5] && v122 != 0)
            {
              goto LABEL_63;
            }
LABEL_78:
            ++v66;
            v36 = v124;
            if (v66 == v123)
              goto LABEL_79;
            continue;
          }
        }
        v60 = 0;
        v59 = 0;
        v61 = v104;
LABEL_86:
        LOWORD(__e) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v59];
        MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
        v77 = v76 * v55;
        v78 = 0.0;
        if (v77 == 0.0)
        {
          if (v60)
            goto LABEL_88;
        }
        else
        {
          __e = 0;
          v80 = frexp(v77, &__e);
          v81 = ldexp(v80, 11);
          v78 = ldexp(round(v81), __e - 11);
          if (v60)
          {
LABEL_88:
            v79 = INFINITY;
            if (v60 == 2)
              v79 = -INFINITY;
            goto LABEL_94;
          }
        }
        if (!v61)
        {
          v84 = 0.0;
          goto LABEL_95;
        }
        v79 = (double)v61;
LABEL_94:
        __e = 0;
        v82 = frexp(v79, &__e);
        v83 = ldexp(v82, 11);
        v84 = ldexp(round(v83), __e - 11);
LABEL_95:
        v85 = v78 * v84;
        v86 = 0.0;
        if (v85 != 0.0)
        {
          __e = 0;
          v87 = frexp(v85, &__e);
          v88 = ldexp(v87, 11);
          v86 = ldexp(round(v88), __e - 11);
        }
        __e = LODWORD(v86);
        v89 = *(_QWORD *)(a15 + 24);
        if (!v89)
          std::__throw_bad_function_call[abi:ne180100]();
        v90 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v89 + 48))(v89, &__e);
        if (v90 == INFINITY)
        {
          LOBYTE(v91) = -1;
        }
        else if (v90 == -INFINITY)
        {
          LOBYTE(v91) = 0;
        }
        else
        {
          v92 = llroundf(v90);
          if (v92 >= 255)
            v92 = 255;
          v91 = v92 & ~(v92 >> 31);
        }
        *(_BYTE *)(*v36
        v57 = v109 + 1;
        v120 += v103;
        if (v109 + 1 == v107)
          goto LABEL_108;
      }
    }
LABEL_111:
    ++v50;
  }
  while (v50 != v97);
  p_src = v138;
  if (v138 == &__src)
  {
    v93 = 4;
    p_src = &__src;
    goto LABEL_116;
  }
  if (v138)
  {
    v93 = 5;
    goto LABEL_116;
  }
LABEL_117:
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
}

void sub_20687F81C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)(v2 - 216);
  if (v4)
  {
    *(_QWORD *)(v2 - 208) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v2 - 192);
  if (v5)
  {
    *(_QWORD *)(v2 - 184) = v5;
    operator delete(v5);
  }
  v6 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  const void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  int64x2_t *p_src;
  float v44;
  double v45;
  float v46;
  float v47;
  unsigned int v48;
  double v49;
  uint64_t v50;
  float v51;
  double v52;
  int v53;
  uint64_t v54;
  float v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  uint64_t v75;
  float v76;
  float v77;
  float v78;
  double v79;
  long double v80;
  double v81;
  long double v82;
  double v83;
  float v84;
  float v85;
  float v86;
  long double v87;
  double v88;
  uint64_t v89;
  float v90;
  char v91;
  int v92;
  uint64_t v93;
  const char *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v122;
  uint64_t v123;
  unint64_t *v124;
  int v125;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  __int16 v133;
  __int16 v134;
  int __e;
  int64x2_t __src;
  char v137[8];
  int64x2_t *v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v134 = a12;
  v133 = a13;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v124 = a9;
  v21 = *(const void **)a3;
  v22 = *(_QWORD *)(a3 + 8);
  v23 = (v22 - *(_QWORD *)a3) >> 3;
  if (v23 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v94 = "x_rank == o_shape.size()";
    v95 = 68;
    goto LABEL_130;
  }
  v24 = *a5;
  v25 = a5[1];
  v26 = (v25 - *a5) >> 2;
  if (v26 != v23 - 1)
  {
    v94 = "kernel_sizes.size() == num_spatial_dims + 1";
    v95 = 69;
    goto LABEL_130;
  }
  v27 = *a6;
  v28 = a6[1];
  if (v26 != (v28 - *a6) >> 2)
  {
    v94 = "strides.size() == num_spatial_dims + 1";
    v95 = 70;
    goto LABEL_130;
  }
  if (*(_DWORD *)(v25 - 4) != *(_DWORD *)(v28 - 4))
  {
    v94 = "kernel_sizes.back() == strides.back()";
    v95 = 71;
LABEL_130:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v95, v94);
  }
  v29 = v23 - 2;
  v30 = 4 * v23;
  if (v23 == 5)
  {
    v111 = *(int *)(v24 + v30 - 20);
    v98 = *(int *)(v27 + v30 - 20);
    v31 = 2;
LABEL_11:
    v32 = v30 - 16;
    v116 = *(int *)(v24 + v32);
    v33 = *(_DWORD *)(v27 + v32);
    v34 = 1;
    goto LABEL_13;
  }
  v31 = v23 - 3;
  v98 = 1;
  if (v29 > 1)
  {
    v111 = 1;
    goto LABEL_11;
  }
  v34 = 0;
  v111 = 1;
  v116 = 1;
  v33 = 1;
LABEL_13:
  v122 = *(_DWORD *)(v24 + 4 * v29);
  v35 = *(int *)(v24 + 4 * v31);
  v99 = *(int *)(v27 + 4 * v31);
  v103 = *(int *)(v27 + 4 * v29);
  v130 = 0;
  v131 = 0;
  v132 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v130, v21, v22, v23);
  v127 = 0;
  v128 = 0;
  v129 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v127, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v23 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v130, (uint64_t)(v130 + 8), __src.i8, v137, 2);
    __src = vdupq_n_s64(1uLL);
    v36 = a9;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v127, (uint64_t)(v127 + 8), __src.i8, v137, 2);
  }
  else
  {
    v65 = v23 == 4;
    v36 = a9;
    if (v65)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v130, v130 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v127, v127 + 8, &__src);
    }
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v134);
  v38 = v37;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v133);
  if (v29 == 3)
  {
    v38 = v38 * (float)v111;
    if (a14)
      v39 = v39 / (float)v111;
  }
  v40 = v38 * (float)v116;
  if (v34)
  {
    v41 = v39 / (float)v116;
  }
  else
  {
    v40 = v38;
    v41 = v39;
  }
  v42 = *(_QWORD *)v127;
  v100 = *((_QWORD *)v127 + 1);
  v101 = *((_QWORD *)v127 + 2);
  v102 = *((_QWORD *)v127 + 3);
  v107 = *((_QWORD *)v127 + 4);
  v110 = *((_QWORD *)v130 + 1);
  v114 = *((_QWORD *)v130 + 2);
  v118 = *((_QWORD *)v130 + 3);
  p_src = &__src;
  __src.i64[0] = (uint64_t)&off_24BFE7C10;
  v138 = &__src;
  v44 = v40 * (float)v35;
  v45 = ldexp(1.0, a8);
  v46 = ldexp(1.0, a10 + a8);
  v47 = v44 * v46;
  v48 = llroundf(v47);
  if (fabsf(v47) < 1.0)
    v48 = 0;
  v104 = v48;
  v49 = exp2(-(double)(a11 + a8));
  v97 = v42;
  if (!v42)
  {
    v93 = 4;
LABEL_118:
    (*(void (**)(int64x2_t *))(p_src->i64[0] + 8 * v93))(p_src);
    goto LABEL_119;
  }
  v50 = 0;
  v96 = v33;
  v51 = v45;
  v125 = -20 - a8;
  v52 = v49 * (float)(v41 / (float)v35);
  v53 = v122;
  if (v122 <= 1)
    v53 = 1;
  v119 = v53;
  if (v35 <= 1)
    v54 = 1;
  else
    v54 = v35;
  v123 = v54;
  v55 = v52;
  v56 = a14;
  v115 = v35;
  do
  {
    if (v100)
    {
      v105 = 0;
      while (!v101)
      {
LABEL_112:
        if (++v105 == v100)
          goto LABEL_113;
      }
      v106 = 0;
      while (!v102)
      {
LABEL_111:
        if (++v106 == v101)
          goto LABEL_112;
      }
      v108 = 0;
      while (!v107)
      {
LABEL_110:
        if (++v108 == v102)
          goto LABEL_111;
      }
      v120 = 0;
      v57 = 0;
      while (1)
      {
        v109 = v57;
        if (v111)
        {
          v58 = 0;
          v59 = 0;
          v60 = 0;
          v61 = v104;
          while (1)
          {
            v62 = v58 + v105 * v98;
            if ((v56 & 1) == 0 && (v62 < *a7 || v62 >= v110 - a7[1]))
              goto LABEL_83;
            v112 = v58;
            v113 = v59;
            if (v116)
              break;
LABEL_80:
            v58 = v112;
            v59 = v113 + 1;
LABEL_83:
            if (++v58 == v111)
              goto LABEL_86;
          }
          v63 = 0;
          while (2)
          {
            v117 = v63;
            v64 = v63 + v106 * v96;
            if ((v56 & 1) != 0)
            {
              if (v115)
                goto LABEL_54;
LABEL_79:
              v63 = v117 + 1;
              v56 = a14;
              if (v117 + 1 == v116)
                goto LABEL_80;
              continue;
            }
            break;
          }
          if (v64 < a7[2])
            goto LABEL_79;
          v65 = v64 >= v114 - a7[3] || v115 == 0;
          if (v65)
            goto LABEL_79;
LABEL_54:
          v66 = 0;
          while (2)
          {
            v67 = v66 + v108 * v99;
            if ((a14 & 1) != 0)
            {
              if (!v122)
                goto LABEL_78;
LABEL_63:
              v69 = v119;
              v70 = v120;
              do
              {
                LOBYTE(__e) = *(_BYTE *)(a1
                if (!v138)
                  std::__throw_bad_function_call[abi:ne180100]();
                v71 = (*(uint64_t (**)(int64x2_t *, int *))(v138->i64[0] + 48))(v138, &__e);
                if (!v60)
                {
                  v72 = v71;
                  v73 = ilogbf(1.0);
                  if (v73 <= -14)
                    v74 = -14;
                  else
                    v74 = v73;
                  if (v74 >= v125)
                  {
                    v75 = (int)llroundf(v51 * (float)v72) + (uint64_t)v61;
                    if (v75 <= 0x7FFFFFFF)
                    {
                      if (v75 >= (uint64_t)0xFFFFFFFF80000000)
                        v61 = v75;
                      else
                        v61 = -8388608;
                      v60 = 2 * (v75 < (uint64_t)0xFFFFFFFF80000000);
                    }
                    else
                    {
                      v60 = 1;
                      v61 = 2139095040;
                    }
                  }
                  else
                  {
                    v60 = 0;
                  }
                }
                ++v70;
                --v69;
              }
              while (v69);
            }
            else if (v67 >= a7[4] && v67 < v118 - a7[5] && v122 != 0)
            {
              goto LABEL_63;
            }
LABEL_78:
            ++v66;
            v36 = v124;
            if (v66 == v123)
              goto LABEL_79;
            continue;
          }
        }
        v60 = 0;
        v59 = 0;
        v61 = v104;
LABEL_86:
        LOWORD(__e) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v59];
        MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
        v77 = v76 * v55;
        v78 = 0.0;
        if (v77 == 0.0)
        {
          if (v60)
            goto LABEL_88;
        }
        else
        {
          __e = 0;
          v80 = frexp(v77, &__e);
          v81 = ldexp(v80, 11);
          v78 = ldexp(round(v81), __e - 11);
          if (v60)
          {
LABEL_88:
            v79 = INFINITY;
            if (v60 == 2)
              v79 = -INFINITY;
            goto LABEL_94;
          }
        }
        if (!v61)
        {
          v84 = 0.0;
          goto LABEL_95;
        }
        v79 = (double)v61;
LABEL_94:
        __e = 0;
        v82 = frexp(v79, &__e);
        v83 = ldexp(v82, 11);
        v84 = ldexp(round(v83), __e - 11);
LABEL_95:
        v85 = v78 * v84;
        v86 = 0.0;
        if (v85 != 0.0)
        {
          __e = 0;
          v87 = frexp(v85, &__e);
          v88 = ldexp(v87, 11);
          v86 = ldexp(round(v88), __e - 11);
        }
        __e = LODWORD(v86);
        v89 = *(_QWORD *)(a15 + 24);
        if (!v89)
          std::__throw_bad_function_call[abi:ne180100]();
        v90 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v89 + 48))(v89, &__e);
        if (v90 == INFINITY)
        {
          v91 = 127;
        }
        else if (v90 == -INFINITY)
        {
          v91 = 0x80;
        }
        else
        {
          v92 = llroundf(v90);
          if (v92 >= 127)
            v92 = 127;
          if (v92 <= -128)
            v91 = 0x80;
          else
            v91 = v92;
        }
        *(_BYTE *)(*v36
        v57 = v109 + 1;
        v120 += v103;
        if (v109 + 1 == v107)
          goto LABEL_110;
      }
    }
LABEL_113:
    ++v50;
  }
  while (v50 != v97);
  p_src = v138;
  if (v138 == &__src)
  {
    v93 = 4;
    p_src = &__src;
    goto LABEL_118;
  }
  if (v138)
  {
    v93 = 5;
    goto LABEL_118;
  }
LABEL_119:
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
}

void sub_2068801FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)(v2 - 216);
  if (v4)
  {
    *(_QWORD *)(v2 - 208) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v2 - 192);
  if (v5)
  {
    *(_QWORD *)(v2 - 184) = v5;
    operator delete(v5);
  }
  v6 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, _QWORD *a9@<X8>, char a10, char a11, int a12, __int16 a13, int a14, __int16 a15, int a16, char a17, char a18, uint64_t a19)
{
  const void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  _QWORD *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int *v45;
  uint64_t v46;
  double v47;
  float v48;
  float v49;
  unsigned int v50;
  __n128 v51;
  uint64_t v52;
  float v53;
  int v54;
  uint64_t v55;
  float v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  float v77;
  float v78;
  float v79;
  double v80;
  long double v81;
  double v82;
  long double v83;
  double v84;
  float v85;
  float v86;
  float v87;
  long double v88;
  double v89;
  uint64_t v90;
  MIL::Fp16 *v91;
  float v92;
  __int16 v93;
  _QWORD *v94;
  uint64_t v95;
  const char *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v124;
  uint64_t v125;
  int v127;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  __int16 v135;
  __int16 v136;
  _QWORD v137[3];
  _QWORD *v138;
  int __e[4];
  char v140[8];
  int *v141;
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  v136 = a13;
  v135 = a15;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  v24 = *(const void **)a3;
  v25 = *(_QWORD *)(a3 + 8);
  v26 = (v25 - *(_QWORD *)a3) >> 3;
  if (v26 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v96 = "x_rank == o_shape.size()";
    v97 = 68;
    goto LABEL_123;
  }
  v27 = *a5;
  v28 = a5[1];
  v29 = (v28 - *a5) >> 2;
  if (v29 != v26 - 1)
  {
    v96 = "kernel_sizes.size() == num_spatial_dims + 1";
    v97 = 69;
    goto LABEL_123;
  }
  v30 = *a6;
  v31 = a6[1];
  if (v29 != (v31 - *a6) >> 2)
  {
    v96 = "strides.size() == num_spatial_dims + 1";
    v97 = 70;
    goto LABEL_123;
  }
  if (*(_DWORD *)(v28 - 4) != *(_DWORD *)(v31 - 4))
  {
    v96 = "kernel_sizes.back() == strides.back()";
    v97 = 71;
LABEL_123:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v97, v96);
  }
  v32 = v26 - 2;
  v33 = 4 * v26;
  if (v26 == 5)
  {
    v113 = *(int *)(v27 + v33 - 20);
    v99 = *(int *)(v30 + v33 - 20);
    v34 = 2;
LABEL_9:
    v35 = v33 - 16;
    v118 = *(int *)(v27 + v35);
    v36 = *(_DWORD *)(v30 + v35);
    v37 = 1;
    goto LABEL_11;
  }
  v34 = v26 - 3;
  v99 = 1;
  if (v32 > 1)
  {
    v113 = 1;
    goto LABEL_9;
  }
  v37 = 0;
  v113 = 1;
  v118 = 1;
  v36 = 1;
LABEL_11:
  v124 = *(_DWORD *)(v27 + 4 * v32);
  v117 = *(int *)(v27 + 4 * v34);
  v100 = *(int *)(v30 + 4 * v34);
  v105 = *(int *)(v30 + 4 * v32);
  v132 = 0;
  v133 = 0;
  v134 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v132, v24, v25, v26);
  v129 = 0;
  v130 = 0;
  v131 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v129, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v26 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v132, (uint64_t)(v132 + 8), (char *)__e, v140, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    v38 = a9;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v129, (uint64_t)(v129 + 8), (char *)__e, v140, 2);
  }
  else
  {
    v66 = v26 == 4;
    v38 = a9;
    if (v66)
    {
      *(_QWORD *)__e = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v132, v132 + 8, __e);
      *(_QWORD *)__e = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v129, v129 + 8, __e);
    }
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v136);
  v40 = v39;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v135);
  if (v32 == 3)
  {
    v40 = v40 * (float)v113;
    if (a17)
      v41 = v41 / (float)v113;
  }
  v42 = v40 * (float)v118;
  if (v37)
  {
    v43 = v41 / (float)v118;
  }
  else
  {
    v42 = v40;
    v43 = v41;
  }
  v44 = v42 * (float)v117;
  v101 = *(_QWORD *)v129;
  v102 = *((_QWORD *)v129 + 1);
  v103 = *((_QWORD *)v129 + 2);
  v104 = *((_QWORD *)v129 + 3);
  v109 = *((_QWORD *)v129 + 4);
  v112 = *((_QWORD *)v132 + 1);
  v116 = *((_QWORD *)v132 + 2);
  v120 = *((_QWORD *)v132 + 3);
  v137[0] = &off_24BFE7C90;
  v138 = v137;
  if (a18)
  {
    *(_QWORD *)__e = &off_24BFE7D20;
    v141 = __e;
    std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](__e, v137);
    v45 = v141;
    if (v141 == __e)
    {
      v46 = 4;
      v45 = __e;
    }
    else
    {
      if (!v141)
        goto LABEL_28;
      v46 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
  }
LABEL_28:
  v47 = ldexp(1.0, a8);
  v48 = ldexp(1.0, a10 + a8);
  v49 = v44 * v48;
  v50 = llroundf(v49);
  if (fabsf(v49) < 1.0)
    v50 = 0;
  v106 = v50;
  v51.n128_f64[0] = exp2(-(double)(a11 + a8));
  if (v101)
  {
    v52 = 0;
    v98 = v36;
    v53 = v47;
    v51.n128_f64[0] = v51.n128_f64[0] * (float)(v43 / (float)v117);
    v127 = -20 - a8;
    v54 = v124;
    if (v124 <= 1)
      v54 = 1;
    v121 = v54;
    v55 = v117;
    if (v117 <= 1)
      v55 = 1;
    v125 = v55;
    v56 = v51.n128_f64[0];
    while (1)
    {
      v57 = a17;
      if (v102)
        break;
LABEL_107:
      if (++v52 == v101)
        goto LABEL_108;
    }
    v107 = 0;
    while (!v103)
    {
LABEL_106:
      if (++v107 == v102)
        goto LABEL_107;
    }
    v108 = 0;
    while (!v104)
    {
LABEL_105:
      if (++v108 == v103)
        goto LABEL_106;
    }
    v110 = 0;
    while (!v109)
    {
LABEL_104:
      if (++v110 == v104)
        goto LABEL_105;
    }
    v122 = 0;
    v58 = 0;
    while (1)
    {
      v111 = v58;
      if (v113)
      {
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v62 = v106;
        while (1)
        {
          v63 = v59 + v107 * v99;
          if ((v57 & 1) == 0 && (v63 < *a7 || v63 >= v112 - a7[1]))
            goto LABEL_86;
          v114 = v59;
          v115 = v60;
          if (v118)
            break;
LABEL_83:
          v59 = v114;
          v60 = v115 + 1;
LABEL_86:
          if (++v59 == v113)
            goto LABEL_89;
        }
        v64 = 0;
        while (2)
        {
          v119 = v64;
          v65 = v64 + v108 * v98;
          if ((v57 & 1) != 0)
          {
            if ((_DWORD)v117)
              goto LABEL_57;
LABEL_82:
            v64 = v119 + 1;
            v57 = a17;
            if (v119 + 1 == v118)
              goto LABEL_83;
            continue;
          }
          break;
        }
        if (v65 < a7[2])
          goto LABEL_82;
        v66 = v65 >= v116 - a7[3] || (_DWORD)v117 == 0;
        if (v66)
          goto LABEL_82;
LABEL_57:
        v67 = 0;
        while (2)
        {
          v68 = v67 + v110 * v100;
          if ((a17 & 1) != 0)
          {
            if (!v124)
              goto LABEL_81;
LABEL_66:
            v70 = v121;
            v71 = v122;
            do
            {
              LOBYTE(__e[0]) = *(_BYTE *)(a1
              if (!v138)
                std::__throw_bad_function_call[abi:ne180100]();
              v72 = (*(uint64_t (**)(_QWORD *, int *))(*v138 + 48))(v138, __e);
              if (!v61)
              {
                v73 = v72;
                v74 = ilogbf(1.0);
                if (v74 <= -14)
                  v75 = -14;
                else
                  v75 = v74;
                if (v75 >= v127)
                {
                  v76 = (int)llroundf(v53 * (float)v73) + (uint64_t)v62;
                  if (v76 <= 0x7FFFFFFF)
                  {
                    if (v76 >= (uint64_t)0xFFFFFFFF80000000)
                      v62 = v76;
                    else
                      v62 = -8388608;
                    v61 = 2 * (v76 < (uint64_t)0xFFFFFFFF80000000);
                  }
                  else
                  {
                    v61 = 1;
                    v62 = 2139095040;
                  }
                }
                else
                {
                  v61 = 0;
                }
              }
              ++v71;
              --v70;
            }
            while (v70);
          }
          else if (v68 >= a7[4] && v68 < v120 - a7[5] && v124 != 0)
          {
            goto LABEL_66;
          }
LABEL_81:
          ++v67;
          v38 = a9;
          if (v67 == v125)
            goto LABEL_82;
          continue;
        }
      }
      v61 = 0;
      v60 = 0;
      v62 = v106;
LABEL_89:
      LOWORD(__e[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v60];
      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
      v78 = v77 * v56;
      v79 = 0.0;
      if (v78 == 0.0)
      {
        if (v61)
          goto LABEL_91;
      }
      else
      {
        __e[0] = 0;
        v81 = frexp(v78, __e);
        v82 = ldexp(v81, 11);
        v79 = ldexp(round(v82), __e[0] - 11);
        if (v61)
        {
LABEL_91:
          v80 = INFINITY;
          if (v61 == 2)
            v80 = -INFINITY;
          goto LABEL_97;
        }
      }
      if (!v62)
      {
        v85 = 0.0;
        goto LABEL_98;
      }
      v80 = (double)v62;
LABEL_97:
      __e[0] = 0;
      v83 = frexp(v80, __e);
      v84 = ldexp(v83, 11);
      v85 = ldexp(round(v84), __e[0] - 11);
LABEL_98:
      v86 = v79 * v85;
      v87 = 0.0;
      if (v86 != 0.0)
      {
        __e[0] = 0;
        v88 = frexp(v86, __e);
        v89 = ldexp(v88, 11);
        v87 = ldexp(round(v89), __e[0] - 11);
      }
      *(float *)__e = v87;
      v90 = *(_QWORD *)(a19 + 24);
      if (!v90)
        std::__throw_bad_function_call[abi:ne180100]();
      v91 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v90 + 48))(v90, __e);
      v93 = MIL::Fp16::FromFloat(v91, v92);
      *(_WORD *)(*v38
      v58 = v111 + 1;
      v122 += v105;
      if (v111 + 1 == v109)
        goto LABEL_104;
    }
  }
LABEL_108:
  v94 = v138;
  if (v138 == v137)
  {
    v95 = 4;
    v94 = v137;
  }
  else
  {
    if (!v138)
      goto LABEL_114;
    v95 = 5;
  }
  (*(void (**)(__n128))(*v94 + 8 * v95))(v51);
LABEL_114:
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
}

void sub_206880BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  uint64_t v42;
  void *v44;
  void *v45;
  void *v46;

  v44 = *(void **)(v42 - 248);
  if (v44)
  {
    *(_QWORD *)(v42 - 240) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(v42 - 224);
  if (v45)
  {
    *(_QWORD *)(v42 - 216) = v45;
    operator delete(v45);
  }
  v46 = *(void **)v41;
  if (*(_QWORD *)v41)
  {
    *(_QWORD *)(v41 + 8) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16)
{
  const void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int *v43;
  uint64_t v44;
  double v45;
  float v46;
  float v47;
  unsigned int v48;
  __n128 v49;
  uint64_t v50;
  float v51;
  int v52;
  uint64_t v53;
  float v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  float v75;
  float v76;
  float v77;
  double v78;
  long double v79;
  double v80;
  long double v81;
  double v82;
  float v83;
  float v84;
  float v85;
  long double v86;
  double v87;
  uint64_t v88;
  float v89;
  int v90;
  int v91;
  _QWORD *v92;
  uint64_t v93;
  const char *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v122;
  uint64_t v123;
  unint64_t *v124;
  int v125;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  __int16 v133;
  __int16 v134;
  _QWORD v135[3];
  _QWORD *v136;
  int __e[4];
  char v138[8];
  int *v139;
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  v134 = a12;
  v133 = a13;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v124 = a9;
  v22 = *(const void **)a3;
  v23 = *(_QWORD *)(a3 + 8);
  v24 = (v23 - *(_QWORD *)a3) >> 3;
  if (v24 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v94 = "x_rank == o_shape.size()";
    v95 = 68;
    goto LABEL_132;
  }
  v25 = *a5;
  v26 = a5[1];
  v27 = (v26 - *a5) >> 2;
  if (v27 != v24 - 1)
  {
    v94 = "kernel_sizes.size() == num_spatial_dims + 1";
    v95 = 69;
    goto LABEL_132;
  }
  v28 = *a6;
  v29 = a6[1];
  if (v27 != (v29 - *a6) >> 2)
  {
    v94 = "strides.size() == num_spatial_dims + 1";
    v95 = 70;
    goto LABEL_132;
  }
  if (*(_DWORD *)(v26 - 4) != *(_DWORD *)(v29 - 4))
  {
    v94 = "kernel_sizes.back() == strides.back()";
    v95 = 71;
LABEL_132:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v95, v94);
  }
  v30 = v24 - 2;
  v31 = 4 * v24;
  if (v24 == 5)
  {
    v111 = *(int *)(v25 + v31 - 20);
    v97 = *(int *)(v28 + v31 - 20);
    v32 = 2;
LABEL_11:
    v33 = v31 - 16;
    v116 = *(int *)(v25 + v33);
    v34 = *(_DWORD *)(v28 + v33);
    v35 = 1;
    goto LABEL_13;
  }
  v32 = v24 - 3;
  v97 = 1;
  if (v30 > 1)
  {
    v111 = 1;
    goto LABEL_11;
  }
  v35 = 0;
  v111 = 1;
  v116 = 1;
  v34 = 1;
LABEL_13:
  v122 = *(_DWORD *)(v25 + 4 * v30);
  v115 = *(int *)(v25 + 4 * v32);
  v98 = *(int *)(v28 + 4 * v32);
  v103 = *(int *)(v28 + 4 * v30);
  v130 = 0;
  v131 = 0;
  v132 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v130, v22, v23, v24);
  v127 = 0;
  v128 = 0;
  v129 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v127, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v24 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v130, (uint64_t)(v130 + 8), (char *)__e, v138, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    v36 = a9;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v127, (uint64_t)(v127 + 8), (char *)__e, v138, 2);
  }
  else
  {
    v64 = v24 == 4;
    v36 = a9;
    if (v64)
    {
      *(_QWORD *)__e = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v130, v130 + 8, __e);
      *(_QWORD *)__e = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v127, v127 + 8, __e);
    }
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v134);
  v38 = v37;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v133);
  if (v30 == 3)
  {
    v38 = v38 * (float)v111;
    if (a14)
      v39 = v39 / (float)v111;
  }
  v40 = v38 * (float)v116;
  if (v35)
  {
    v41 = v39 / (float)v116;
  }
  else
  {
    v40 = v38;
    v41 = v39;
  }
  v42 = v40 * (float)v115;
  v99 = *(_QWORD *)v127;
  v100 = *((_QWORD *)v127 + 1);
  v101 = *((_QWORD *)v127 + 2);
  v102 = *((_QWORD *)v127 + 3);
  v107 = *((_QWORD *)v127 + 4);
  v110 = *((_QWORD *)v130 + 1);
  v114 = *((_QWORD *)v130 + 2);
  v118 = *((_QWORD *)v130 + 3);
  v135[0] = &off_24BFE7DA0;
  v136 = v135;
  if (a15)
  {
    *(_QWORD *)__e = &off_24BFE7E20;
    v139 = __e;
    std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](__e, v135);
    v43 = v139;
    if (v139 == __e)
    {
      v44 = 4;
      v43 = __e;
    }
    else
    {
      if (!v139)
        goto LABEL_30;
      v44 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
  }
LABEL_30:
  v45 = ldexp(1.0, a8);
  v46 = ldexp(1.0, a10 + a8);
  v47 = v42 * v46;
  v48 = llroundf(v47);
  if (fabsf(v47) < 1.0)
    v48 = 0;
  v104 = v48;
  v49.n128_f64[0] = exp2(-(double)(a11 + a8));
  if (v99)
  {
    v50 = 0;
    v96 = v34;
    v51 = v45;
    v49.n128_f64[0] = v49.n128_f64[0] * (float)(v41 / (float)v115);
    v125 = -20 - a8;
    v52 = v122;
    if (v122 <= 1)
      v52 = 1;
    v119 = v52;
    v53 = v115;
    if (v115 <= 1)
      v53 = 1;
    v123 = v53;
    v54 = v49.n128_f64[0];
    while (1)
    {
      v55 = a14;
      if (v100)
        break;
LABEL_116:
      if (++v50 == v99)
        goto LABEL_117;
    }
    v105 = 0;
    while (!v101)
    {
LABEL_115:
      if (++v105 == v100)
        goto LABEL_116;
    }
    v106 = 0;
    while (!v102)
    {
LABEL_114:
      if (++v106 == v101)
        goto LABEL_115;
    }
    v108 = 0;
    while (!v107)
    {
LABEL_113:
      if (++v108 == v102)
        goto LABEL_114;
    }
    v120 = 0;
    v56 = 0;
    while (1)
    {
      v109 = v56;
      if (v111)
      {
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = v104;
        while (1)
        {
          v61 = v57 + v105 * v97;
          if ((v55 & 1) == 0 && (v61 < *a7 || v61 >= v110 - a7[1]))
            goto LABEL_88;
          v112 = v57;
          v113 = v58;
          if (v116)
            break;
LABEL_85:
          v57 = v112;
          v58 = v113 + 1;
LABEL_88:
          if (++v57 == v111)
            goto LABEL_91;
        }
        v62 = 0;
        while (2)
        {
          v117 = v62;
          v63 = v62 + v106 * v96;
          if ((v55 & 1) != 0)
          {
            if ((_DWORD)v115)
              goto LABEL_59;
LABEL_84:
            v62 = v117 + 1;
            v55 = a14;
            if (v117 + 1 == v116)
              goto LABEL_85;
            continue;
          }
          break;
        }
        if (v63 < a7[2])
          goto LABEL_84;
        v64 = v63 >= v114 - a7[3] || (_DWORD)v115 == 0;
        if (v64)
          goto LABEL_84;
LABEL_59:
        v65 = 0;
        while (2)
        {
          v66 = v65 + v108 * v98;
          if ((a14 & 1) != 0)
          {
            if (!v122)
              goto LABEL_83;
LABEL_68:
            v68 = v119;
            v69 = v120;
            do
            {
              LOBYTE(__e[0]) = *(_BYTE *)(a1
              if (!v136)
                std::__throw_bad_function_call[abi:ne180100]();
              v70 = (*(uint64_t (**)(_QWORD *, int *))(*v136 + 48))(v136, __e);
              if (!v59)
              {
                v71 = v70;
                v72 = ilogbf(1.0);
                if (v72 <= -14)
                  v73 = -14;
                else
                  v73 = v72;
                if (v73 >= v125)
                {
                  v74 = (int)llroundf(v51 * (float)v71) + (uint64_t)v60;
                  if (v74 <= 0x7FFFFFFF)
                  {
                    if (v74 >= (uint64_t)0xFFFFFFFF80000000)
                      v60 = v74;
                    else
                      v60 = -8388608;
                    v59 = 2 * (v74 < (uint64_t)0xFFFFFFFF80000000);
                  }
                  else
                  {
                    v59 = 1;
                    v60 = 2139095040;
                  }
                }
                else
                {
                  v59 = 0;
                }
              }
              ++v69;
              --v68;
            }
            while (v68);
          }
          else if (v66 >= a7[4] && v66 < v118 - a7[5] && v122 != 0)
          {
            goto LABEL_68;
          }
LABEL_83:
          ++v65;
          v36 = v124;
          if (v65 == v123)
            goto LABEL_84;
          continue;
        }
      }
      v59 = 0;
      v58 = 0;
      v60 = v104;
LABEL_91:
      LOWORD(__e[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v58];
      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
      v76 = v75 * v54;
      v77 = 0.0;
      if (v76 == 0.0)
      {
        if (v59)
          goto LABEL_93;
      }
      else
      {
        __e[0] = 0;
        v79 = frexp(v76, __e);
        v80 = ldexp(v79, 11);
        v77 = ldexp(round(v80), __e[0] - 11);
        if (v59)
        {
LABEL_93:
          v78 = INFINITY;
          if (v59 == 2)
            v78 = -INFINITY;
          goto LABEL_99;
        }
      }
      if (!v60)
      {
        v83 = 0.0;
        goto LABEL_100;
      }
      v78 = (double)v60;
LABEL_99:
      __e[0] = 0;
      v81 = frexp(v78, __e);
      v82 = ldexp(v81, 11);
      v83 = ldexp(round(v82), __e[0] - 11);
LABEL_100:
      v84 = v77 * v83;
      v85 = 0.0;
      if (v84 != 0.0)
      {
        __e[0] = 0;
        v86 = frexp(v84, __e);
        v87 = ldexp(v86, 11);
        v85 = ldexp(round(v87), __e[0] - 11);
      }
      *(float *)__e = v85;
      v88 = *(_QWORD *)(a16 + 24);
      if (!v88)
        std::__throw_bad_function_call[abi:ne180100]();
      v89 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v88 + 48))(v88, __e);
      if (v89 == INFINITY)
      {
        LOBYTE(v90) = -1;
      }
      else if (v89 == -INFINITY)
      {
        LOBYTE(v90) = 0;
      }
      else
      {
        v91 = llroundf(v89);
        if (v91 >= 255)
          v91 = 255;
        v90 = v91 & ~(v91 >> 31);
      }
      *(_BYTE *)(*v36
      v56 = v109 + 1;
      v120 += v103;
      if (v109 + 1 == v107)
        goto LABEL_113;
    }
  }
LABEL_117:
  v92 = v136;
  if (v136 == v135)
  {
    v93 = 4;
    v92 = v135;
  }
  else
  {
    if (!v136)
      goto LABEL_123;
    v93 = 5;
  }
  (*(void (**)(__n128))(*v92 + 8 * v93))(v49);
LABEL_123:
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
}

void sub_206881608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  uint64_t v42;
  void *v44;
  void *v45;
  void *v46;

  v44 = *(void **)(v42 - 248);
  if (v44)
  {
    *(_QWORD *)(v42 - 240) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(v42 - 224);
  if (v45)
  {
    *(_QWORD *)(v42 - 216) = v45;
    operator delete(v45);
  }
  v46 = *(void **)v41;
  if (*(_QWORD *)v41)
  {
    *(_QWORD *)(v41 + 8) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16)
{
  const void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int *v43;
  uint64_t v44;
  double v45;
  float v46;
  float v47;
  unsigned int v48;
  __n128 v49;
  uint64_t v50;
  float v51;
  int v52;
  uint64_t v53;
  float v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  float v75;
  float v76;
  float v77;
  double v78;
  long double v79;
  double v80;
  long double v81;
  double v82;
  float v83;
  float v84;
  float v85;
  long double v86;
  double v87;
  uint64_t v88;
  float v89;
  char v90;
  int v91;
  _QWORD *v92;
  uint64_t v93;
  const char *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v122;
  uint64_t v123;
  unint64_t *v124;
  int v125;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  __int16 v133;
  __int16 v134;
  _QWORD v135[3];
  _QWORD *v136;
  int __e[4];
  char v138[8];
  int *v139;
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  v134 = a12;
  v133 = a13;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v124 = a9;
  v22 = *(const void **)a3;
  v23 = *(_QWORD *)(a3 + 8);
  v24 = (v23 - *(_QWORD *)a3) >> 3;
  if (v24 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v94 = "x_rank == o_shape.size()";
    v95 = 68;
    goto LABEL_134;
  }
  v25 = *a5;
  v26 = a5[1];
  v27 = (v26 - *a5) >> 2;
  if (v27 != v24 - 1)
  {
    v94 = "kernel_sizes.size() == num_spatial_dims + 1";
    v95 = 69;
    goto LABEL_134;
  }
  v28 = *a6;
  v29 = a6[1];
  if (v27 != (v29 - *a6) >> 2)
  {
    v94 = "strides.size() == num_spatial_dims + 1";
    v95 = 70;
    goto LABEL_134;
  }
  if (*(_DWORD *)(v26 - 4) != *(_DWORD *)(v29 - 4))
  {
    v94 = "kernel_sizes.back() == strides.back()";
    v95 = 71;
LABEL_134:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v95, v94);
  }
  v30 = v24 - 2;
  v31 = 4 * v24;
  if (v24 == 5)
  {
    v111 = *(int *)(v25 + v31 - 20);
    v97 = *(int *)(v28 + v31 - 20);
    v32 = 2;
LABEL_11:
    v33 = v31 - 16;
    v116 = *(int *)(v25 + v33);
    v34 = *(_DWORD *)(v28 + v33);
    v35 = 1;
    goto LABEL_13;
  }
  v32 = v24 - 3;
  v97 = 1;
  if (v30 > 1)
  {
    v111 = 1;
    goto LABEL_11;
  }
  v35 = 0;
  v111 = 1;
  v116 = 1;
  v34 = 1;
LABEL_13:
  v122 = *(_DWORD *)(v25 + 4 * v30);
  v115 = *(int *)(v25 + 4 * v32);
  v98 = *(int *)(v28 + 4 * v32);
  v103 = *(int *)(v28 + 4 * v30);
  v130 = 0;
  v131 = 0;
  v132 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v130, v22, v23, v24);
  v127 = 0;
  v128 = 0;
  v129 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v127, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v24 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v130, (uint64_t)(v130 + 8), (char *)__e, v138, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    v36 = a9;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v127, (uint64_t)(v127 + 8), (char *)__e, v138, 2);
  }
  else
  {
    v64 = v24 == 4;
    v36 = a9;
    if (v64)
    {
      *(_QWORD *)__e = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v130, v130 + 8, __e);
      *(_QWORD *)__e = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v127, v127 + 8, __e);
    }
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v134);
  v38 = v37;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v133);
  if (v30 == 3)
  {
    v38 = v38 * (float)v111;
    if (a14)
      v39 = v39 / (float)v111;
  }
  v40 = v38 * (float)v116;
  if (v35)
  {
    v41 = v39 / (float)v116;
  }
  else
  {
    v40 = v38;
    v41 = v39;
  }
  v42 = v40 * (float)v115;
  v99 = *(_QWORD *)v127;
  v100 = *((_QWORD *)v127 + 1);
  v101 = *((_QWORD *)v127 + 2);
  v102 = *((_QWORD *)v127 + 3);
  v107 = *((_QWORD *)v127 + 4);
  v110 = *((_QWORD *)v130 + 1);
  v114 = *((_QWORD *)v130 + 2);
  v118 = *((_QWORD *)v130 + 3);
  v135[0] = &off_24BFE7EA0;
  v136 = v135;
  if (a15)
  {
    *(_QWORD *)__e = &off_24BFE7F20;
    v139 = __e;
    std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](__e, v135);
    v43 = v139;
    if (v139 == __e)
    {
      v44 = 4;
      v43 = __e;
    }
    else
    {
      if (!v139)
        goto LABEL_30;
      v44 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
  }
LABEL_30:
  v45 = ldexp(1.0, a8);
  v46 = ldexp(1.0, a10 + a8);
  v47 = v42 * v46;
  v48 = llroundf(v47);
  if (fabsf(v47) < 1.0)
    v48 = 0;
  v104 = v48;
  v49.n128_f64[0] = exp2(-(double)(a11 + a8));
  if (v99)
  {
    v50 = 0;
    v96 = v34;
    v51 = v45;
    v125 = -20 - a8;
    v49.n128_f64[0] = v49.n128_f64[0] * (float)(v41 / (float)v115);
    v52 = v122;
    if (v122 <= 1)
      v52 = 1;
    v119 = v52;
    v53 = v115;
    if (v115 <= 1)
      v53 = 1;
    v123 = v53;
    v54 = v49.n128_f64[0];
    while (1)
    {
      v55 = a14;
      if (v100)
        break;
LABEL_118:
      if (++v50 == v99)
        goto LABEL_119;
    }
    v105 = 0;
    while (!v101)
    {
LABEL_117:
      if (++v105 == v100)
        goto LABEL_118;
    }
    v106 = 0;
    while (!v102)
    {
LABEL_116:
      if (++v106 == v101)
        goto LABEL_117;
    }
    v108 = 0;
    while (!v107)
    {
LABEL_115:
      if (++v108 == v102)
        goto LABEL_116;
    }
    v120 = 0;
    v56 = 0;
    while (1)
    {
      v109 = v56;
      if (v111)
      {
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = v104;
        while (1)
        {
          v61 = v57 + v105 * v97;
          if ((v55 & 1) == 0 && (v61 < *a7 || v61 >= v110 - a7[1]))
            goto LABEL_88;
          v112 = v57;
          v113 = v58;
          if (v116)
            break;
LABEL_85:
          v57 = v112;
          v58 = v113 + 1;
LABEL_88:
          if (++v57 == v111)
            goto LABEL_91;
        }
        v62 = 0;
        while (2)
        {
          v117 = v62;
          v63 = v62 + v106 * v96;
          if ((v55 & 1) != 0)
          {
            if ((_DWORD)v115)
              goto LABEL_59;
LABEL_84:
            v62 = v117 + 1;
            v55 = a14;
            if (v117 + 1 == v116)
              goto LABEL_85;
            continue;
          }
          break;
        }
        if (v63 < a7[2])
          goto LABEL_84;
        v64 = v63 >= v114 - a7[3] || (_DWORD)v115 == 0;
        if (v64)
          goto LABEL_84;
LABEL_59:
        v65 = 0;
        while (2)
        {
          v66 = v65 + v108 * v98;
          if ((a14 & 1) != 0)
          {
            if (!v122)
              goto LABEL_83;
LABEL_68:
            v68 = v119;
            v69 = v120;
            do
            {
              LOBYTE(__e[0]) = *(_BYTE *)(a1
              if (!v136)
                std::__throw_bad_function_call[abi:ne180100]();
              v70 = (*(uint64_t (**)(_QWORD *, int *))(*v136 + 48))(v136, __e);
              if (!v59)
              {
                v71 = v70;
                v72 = ilogbf(1.0);
                if (v72 <= -14)
                  v73 = -14;
                else
                  v73 = v72;
                if (v73 >= v125)
                {
                  v74 = (int)llroundf(v51 * (float)v71) + (uint64_t)v60;
                  if (v74 <= 0x7FFFFFFF)
                  {
                    if (v74 >= (uint64_t)0xFFFFFFFF80000000)
                      v60 = v74;
                    else
                      v60 = -8388608;
                    v59 = 2 * (v74 < (uint64_t)0xFFFFFFFF80000000);
                  }
                  else
                  {
                    v59 = 1;
                    v60 = 2139095040;
                  }
                }
                else
                {
                  v59 = 0;
                }
              }
              ++v69;
              --v68;
            }
            while (v68);
          }
          else if (v66 >= a7[4] && v66 < v118 - a7[5] && v122 != 0)
          {
            goto LABEL_68;
          }
LABEL_83:
          ++v65;
          v36 = v124;
          if (v65 == v123)
            goto LABEL_84;
          continue;
        }
      }
      v59 = 0;
      v58 = 0;
      v60 = v104;
LABEL_91:
      LOWORD(__e[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v58];
      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
      v76 = v75 * v54;
      v77 = 0.0;
      if (v76 == 0.0)
      {
        if (v59)
          goto LABEL_93;
      }
      else
      {
        __e[0] = 0;
        v79 = frexp(v76, __e);
        v80 = ldexp(v79, 11);
        v77 = ldexp(round(v80), __e[0] - 11);
        if (v59)
        {
LABEL_93:
          v78 = INFINITY;
          if (v59 == 2)
            v78 = -INFINITY;
          goto LABEL_99;
        }
      }
      if (!v60)
      {
        v83 = 0.0;
        goto LABEL_100;
      }
      v78 = (double)v60;
LABEL_99:
      __e[0] = 0;
      v81 = frexp(v78, __e);
      v82 = ldexp(v81, 11);
      v83 = ldexp(round(v82), __e[0] - 11);
LABEL_100:
      v84 = v77 * v83;
      v85 = 0.0;
      if (v84 != 0.0)
      {
        __e[0] = 0;
        v86 = frexp(v84, __e);
        v87 = ldexp(v86, 11);
        v85 = ldexp(round(v87), __e[0] - 11);
      }
      *(float *)__e = v85;
      v88 = *(_QWORD *)(a16 + 24);
      if (!v88)
        std::__throw_bad_function_call[abi:ne180100]();
      v89 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v88 + 48))(v88, __e);
      if (v89 == INFINITY)
      {
        v90 = 127;
      }
      else if (v89 == -INFINITY)
      {
        v90 = 0x80;
      }
      else
      {
        v91 = llroundf(v89);
        if (v91 >= 127)
          v91 = 127;
        if (v91 <= -128)
          v90 = 0x80;
        else
          v90 = v91;
      }
      *(_BYTE *)(*v36
      v56 = v109 + 1;
      v120 += v103;
      if (v109 + 1 == v107)
        goto LABEL_115;
    }
  }
LABEL_119:
  v92 = v136;
  if (v136 == v135)
  {
    v93 = 4;
    v92 = v135;
  }
  else
  {
    if (!v136)
      goto LABEL_125;
    v93 = 5;
  }
  (*(void (**)(__n128))(*v92 + 8 * v93))(v49);
LABEL_125:
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
}

void sub_20688203C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  uint64_t v42;
  void *v44;
  void *v45;
  void *v46;

  v44 = *(void **)(v42 - 248);
  if (v44)
  {
    *(_QWORD *)(v42 - 240) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(v42 - 224);
  if (v45)
  {
    *(_QWORD *)(v42 - 216) = v45;
    operator delete(v45);
  }
  v46 = *(void **)v41;
  if (*(_QWORD *)v41)
  {
    *(_QWORD *)(v41 + 8) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::NeMaxPoolCpu::Run(MIL::IROperation *a1@<X1>, _QWORD *a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  _DWORD *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string v20;
  std::string v21;
  std::string v22;

  v6 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(v6 + 8) != 11)
      goto LABEL_10;
    v6 = *(_QWORD *)v6;
  }
  else if (v7 != 11)
  {
    goto LABEL_10;
  }
  if (*(_QWORD *)v6 == 0x705F78616D5F656ELL && *(_QWORD *)(v6 + 3) == 0x6C6F6F705F78616DLL)
  {
    return;
  }
LABEL_10:
  *a3 = 1;
  v9 = a3 + 2;
  std::string::basic_string[abi:ne180100]<0>(&v20, "ne_max_pool");
  v10 = std::string::insert(&v20, 0, "Expected '");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v21, "' op. Got ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  v15 = *(char *)(v14 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)v14;
  else
    v16 = *(const std::string::value_type **)v14;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v14 + 23);
  else
    v17 = *(_QWORD *)(v14 + 8);
  v18 = std::string::append(&v22, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *((_QWORD *)v9 + 2) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)v9 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_2068822B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::RunMaxOrMinPool(MIL::IROperation *a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t InterpretedTensorValue;
  uint64_t v9;
  MIL::IRValue *ParameterValue;
  std::vector<int>::size_type v11;
  unint64_t v12;
  int *v13;
  std::vector<int>::pointer begin;
  MIL::IRValue *v15;
  std::vector<int>::size_type v16;
  unint64_t v17;
  int *v18;
  std::vector<int>::pointer v19;
  uint64_t v20;
  char *v21;
  char v22;
  MIL::Fp16 *v23;
  __int16 v24;
  uint64_t v25;
  __int16 *v26;
  std::string *v27;
  __int128 v28;
  std::vector<int>::pointer v29;
  uint64_t v30;
  int v31;
  MIL::IRValueType *OutputType;
  uint64_t v33;
  int v34;
  MIL::IRValueType *v35;
  uint64_t v36;
  unint64_t v37;
  ANEMachineIR::Utils *v38;
  const MIL::IRTensorValueType *v39;
  MIL::IRValueType *v40;
  ANEMachineIR::Utils *v41;
  const MIL::IRTensorValueType *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  MIL::IRValueType *v65;
  void **v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned __int8 *v69;
  MIL::IRValueType *v70;
  void **v71;
  _QWORD *v72;
  uint64_t v73;
  unsigned __int8 *v74;
  MIL::IRValueType *v75;
  void **v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  MIL::IRValueType *v80;
  void **v81;
  _QWORD *v82;
  uint64_t v83;
  unsigned __int8 *v84;
  MIL::IRValueType *v85;
  void **v86;
  _QWORD *v87;
  uint64_t v88;
  unsigned __int8 *v89;
  MIL::IRValueType *v90;
  void **v91;
  _QWORD *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  MIL::IRValueType *v95;
  void **v96;
  _QWORD *v97;
  uint64_t v98;
  unsigned __int8 *v99;
  MIL::IRValueType *v100;
  void **v101;
  _QWORD *v102;
  uint64_t v103;
  unsigned __int8 *v104;
  MIL::IRValueType *v105;
  void **v106;
  uint64_t (***v107)();
  uint64_t v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  void *v111[3];
  void *v112[3];
  void *v113[3];
  std::string __p;
  uint64_t v115;
  std::vector<int> v116;
  uint64_t v117;
  std::vector<int>::size_type v118;
  std::vector<int> v119;
  uint64_t Data;
  std::vector<int>::size_type __n;
  void **v122;
  _BYTE v123[24];
  _BYTE *v124;
  _BYTE v125[24];
  _BYTE *v126;
  _BYTE v127[24];
  _BYTE *v128;
  _BYTE v129[24];
  _BYTE *v130;
  _BYTE v131[24];
  _BYTE *v132;
  _BYTE v133[24];
  _BYTE *v134;
  _BYTE v135[24];
  _BYTE *v136;
  _BYTE v137[24];
  _BYTE *v138;
  _BYTE v139[24];
  _BYTE *v140;
  uint64_t (**v141[3])();
  uint64_t (***v142)();
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  v9 = InterpretedTensorValue;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue)
      goto LABEL_3;
LABEL_29:
    *(_DWORD *)a4 = 2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "x");
    v27 = std::string::insert(&__p, 0, "No value for ");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    *(_QWORD *)(a4 + 24) = *((_QWORD *)&v27->__r_.__value_.__l + 2);
    *(_OWORD *)(a4 + 8) = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v29 = (std::vector<int>::pointer)__p.__r_.__value_.__r.__words[0];
    goto LABEL_188;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v9)
    goto LABEL_29;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&__p, "kernel_sizes");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(ParameterValue);
  Data = MIL::IRTensorValue::GetDataView<int>();
  __n = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v11 = __n;
  }
  std::vector<int>::vector(&v119, v11);
  if (v119.__end_ != v119.__begin_)
  {
    v12 = 0;
    do
    {
      v13 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v12);
      begin = v119.__begin_;
      v119.__begin_[v12++] = *v13;
    }
    while (v12 < v119.__end_ - begin);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "strides");
  v15 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(v15);
  v117 = MIL::IRTensorValue::GetDataView<int>();
  v118 = v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v16 = v118;
  }
  std::vector<int>::vector(&v116, v16);
  if (v116.__end_ != v116.__begin_)
  {
    v17 = 0;
    do
    {
      v18 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v117, v17);
      v19 = v116.__begin_;
      v116.__begin_[v17++] = *v18;
    }
    while (v17 < v116.__end_ - v19);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_right_shift");
  v20 = MIL::IROperation::TryGetParameterValue();
  if (v20
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20)
    && (v21 = (char *)MEMORY[0x20BCFEE94]()) != 0)
  {
    v22 = *v21;
  }
  else
  {
    v22 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v23 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
  v24 = MIL::Fp16::FromFloat(v23, 1.0);
  v25 = MIL::IROperation::TryGetParameterValue();
  if (v25)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25))
    {
      v26 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v26)
        v24 = *v26;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  v115 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&__p, v141);
  if (LODWORD(__p.__r_.__value_.__l.__data_))
  {
    *(_DWORD *)a4 = __p.__r_.__value_.__l.__data_;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a4 + 24) = v115;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    v115 = 0;
    goto LABEL_177;
  }
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 88))(v30);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v33 = MIL::IRValueType::AsTensorType(OutputType);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 88))(v33);
  v35 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v36 = MIL::IRValueType::AsTensorType(v35);
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  v38 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  ANEMachineIR::Utils::GetStaticTensorShape(v38, v39, (uint64_t)v113);
  v40 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v41 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v40);
  ANEMachineIR::Utils::GetStaticTensorShape(v41, v42, (uint64_t)v112);
  switch(v31)
  {
    case 4:
      if (v34 != 14)
      {
        if (v34 != 9)
        {
          if (v34 != 4)
            goto LABEL_56;
          v47 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v48 = (uint64_t)v142;
          if (v142)
          {
            if (v142 == v141)
            {
              v140 = v139;
              (*((void (**)(uint64_t (***)(), _BYTE *))v141[0] + 3))(v141, v139);
LABEL_143:
              v92 = v140;
              if (v140 == v139)
              {
                v93 = 4;
                v92 = v139;
              }
              else
              {
                if (!v140)
                {
LABEL_148:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v109, a1);
                  v94 = v109;
                  if (v110 == v109)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v95 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v95);
                  MIL::IRTensorValueType::MakeFloat16Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v94, (uint64_t *)&v122);
                  v96 = v122;
                  v122 = 0;
                  if (v96)
                    (*((void (**)(void **))*v96 + 1))(v96);
                  goto LABEL_171;
                }
                v93 = 5;
              }
              (*(void (**)(void))(*v92 + 8 * v93))();
              goto LABEL_148;
            }
            v48 = ((uint64_t (*)(uint64_t (***)()))(*v142)[2])(v142);
          }
          v140 = (_BYTE *)v48;
          goto LABEL_143;
        }
        v54 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v55 = (uint64_t)v142;
        if (v142)
        {
          if (v142 == v141)
          {
            v136 = v135;
            (*((void (**)(uint64_t (***)(), _BYTE *))v141[0] + 3))(v141, v135);
LABEL_103:
            v72 = v136;
            if (v136 == v135)
            {
              v73 = 4;
              v72 = v135;
            }
            else
            {
              if (!v136)
              {
LABEL_108:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v109, a1);
                v74 = v109;
                if (v110 == v109)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v75 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v75);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v74, (uint64_t *)&v122);
                v76 = v122;
                v122 = 0;
                if (v76)
                  (*((void (**)(void **))*v76 + 1))(v76);
                goto LABEL_171;
              }
              v73 = 5;
            }
            (*(void (**)(void))(*v72 + 8 * v73))();
            goto LABEL_108;
          }
          v55 = ((uint64_t (*)(uint64_t (***)()))(*v142)[2])(v142);
        }
        v136 = (_BYTE *)v55;
        goto LABEL_103;
      }
      v58 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v59 = (uint64_t)v142;
      if (v142)
      {
        if (v142 == v141)
        {
          v138 = v137;
          (*((void (**)(uint64_t (***)(), _BYTE *))v141[0] + 3))(v141, v137);
LABEL_133:
          v87 = v138;
          if (v138 == v137)
          {
            v88 = 4;
            v87 = v137;
          }
          else
          {
            if (!v138)
            {
LABEL_138:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v109, a1);
              v89 = v109;
              if (v110 == v109)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v90 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v90);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v89, (uint64_t *)&v122);
              v91 = v122;
              v122 = 0;
              if (v91)
                (*((void (**)(void **))*v91 + 1))(v91);
              goto LABEL_171;
            }
            v88 = 5;
          }
          (*(void (**)(void))(*v87 + 8 * v88))();
          goto LABEL_138;
        }
        v59 = ((uint64_t (*)(uint64_t (***)()))(*v142)[2])(v142);
      }
      v138 = (_BYTE *)v59;
      goto LABEL_133;
    case 9:
      if (v34 != 14)
      {
        if (v34 != 9)
        {
          if (v34 == 4)
          {
            v45 = MIL::IRTensorValue::GetDataView<signed char>();
            v46 = (uint64_t)v142;
            if (v142)
            {
              if (v142 == v141)
              {
                v128 = v127;
                (*((void (**)(uint64_t (***)(), _BYTE *))v141[0] + 3))(v141, v127);
LABEL_113:
                v77 = v128;
                if (v128 == v127)
                {
                  v78 = 4;
                  v77 = v127;
                }
                else
                {
                  if (!v128)
                  {
LABEL_118:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v109, a1);
                    v79 = v109;
                    if (v110 == v109)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v80 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v80);
                    MIL::IRTensorValueType::MakeFloat16Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v79, (uint64_t *)&v122);
                    v81 = v122;
                    v122 = 0;
                    if (v81)
                      (*((void (**)(void **))*v81 + 1))(v81);
                    goto LABEL_171;
                  }
                  v78 = 5;
                }
                (*(void (**)(void))(*v77 + 8 * v78))();
                goto LABEL_118;
              }
              v46 = ((uint64_t (*)(uint64_t (***)()))(*v142)[2])(v142);
            }
            v128 = (_BYTE *)v46;
            goto LABEL_113;
          }
LABEL_56:
          v49 = "Unimplemented output dtype";
          goto LABEL_57;
        }
        v50 = MIL::IRTensorValue::GetDataView<signed char>();
        v51 = (uint64_t)v142;
        if (v142)
        {
          if (v142 == v141)
          {
            v124 = v123;
            (*((void (**)(uint64_t (***)(), _BYTE *))v141[0] + 3))(v141, v123);
LABEL_83:
            v62 = v124;
            if (v124 == v123)
            {
              v63 = 4;
              v62 = v123;
            }
            else
            {
              if (!v124)
              {
LABEL_88:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v109, a1);
                v64 = v109;
                if (v110 == v109)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v65 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v65);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v64, (uint64_t *)&v122);
                v66 = v122;
                v122 = 0;
                if (v66)
                  (*((void (**)(void **))*v66 + 1))(v66);
                goto LABEL_171;
              }
              v63 = 5;
            }
            (*(void (**)(void))(*v62 + 8 * v63))();
            goto LABEL_88;
          }
          v51 = ((uint64_t (*)(uint64_t (***)()))(*v142)[2])(v142);
        }
        v124 = (_BYTE *)v51;
        goto LABEL_83;
      }
      v52 = MIL::IRTensorValue::GetDataView<signed char>();
      v53 = (uint64_t)v142;
      if (v142)
      {
        if (v142 == v141)
        {
          v126 = v125;
          (*((void (**)(uint64_t (***)(), _BYTE *))v141[0] + 3))(v141, v125);
LABEL_93:
          v67 = v126;
          if (v126 == v125)
          {
            v68 = 4;
            v67 = v125;
          }
          else
          {
            if (!v126)
            {
LABEL_98:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v109, a1);
              v69 = v109;
              if (v110 == v109)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v70 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v70);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v69, (uint64_t *)&v122);
              v71 = v122;
              v122 = 0;
              if (v71)
                (*((void (**)(void **))*v71 + 1))(v71);
              goto LABEL_171;
            }
            v68 = 5;
          }
          (*(void (**)(void))(*v67 + 8 * v68))();
          goto LABEL_98;
        }
        v53 = ((uint64_t (*)(uint64_t (***)()))(*v142)[2])(v142);
      }
      v126 = (_BYTE *)v53;
      goto LABEL_93;
    case 14:
      if (v34 != 14)
      {
        if (v34 != 9)
        {
          if (v34 == 4)
          {
            v43 = MIL::IRTensorValue::GetDataView<unsigned char>();
            v44 = (uint64_t)v142;
            if (v142)
            {
              if (v142 == v141)
              {
                v134 = v133;
                (*((void (**)(uint64_t (***)(), _BYTE *))v141[0] + 3))(v141, v133);
LABEL_163:
                v102 = v134;
                if (v134 == v133)
                {
                  v103 = 4;
                  v102 = v133;
                }
                else
                {
                  if (!v134)
                  {
LABEL_168:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v109, a1);
                    v104 = v109;
                    if (v110 == v109)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v105 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v105);
                    MIL::IRTensorValueType::MakeFloat16Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v104, (uint64_t *)&v122);
                    v106 = v122;
                    v122 = 0;
                    if (v106)
                      (*((void (**)(void **))*v106 + 1))(v106);
LABEL_171:
                    v122 = (void **)&v109;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v122);
                    *(_DWORD *)a4 = 0;
                    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a4 + 8), (char *)&unk_2069A5097);
                    if (v111[0])
                    {
                      v111[1] = v111[0];
                      operator delete(v111[0]);
                    }
                    goto LABEL_173;
                  }
                  v103 = 5;
                }
                (*(void (**)(void))(*v102 + 8 * v103))();
                goto LABEL_168;
              }
              v44 = ((uint64_t (*)(uint64_t (***)()))(*v142)[2])(v142);
            }
            v134 = (_BYTE *)v44;
            goto LABEL_163;
          }
          goto LABEL_56;
        }
        v56 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v57 = (uint64_t)v142;
        if (v142)
        {
          if (v142 == v141)
          {
            v130 = v129;
            (*((void (**)(uint64_t (***)(), _BYTE *))v141[0] + 3))(v141, v129);
LABEL_123:
            v82 = v130;
            if (v130 == v129)
            {
              v83 = 4;
              v82 = v129;
            }
            else
            {
              if (!v130)
              {
LABEL_128:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v109, a1);
                v84 = v109;
                if (v110 == v109)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v85 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v85);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v84, (uint64_t *)&v122);
                v86 = v122;
                v122 = 0;
                if (v86)
                  (*((void (**)(void **))*v86 + 1))(v86);
                goto LABEL_171;
              }
              v83 = 5;
            }
            (*(void (**)(void))(*v82 + 8 * v83))();
            goto LABEL_128;
          }
          v57 = ((uint64_t (*)(uint64_t (***)()))(*v142)[2])(v142);
        }
        v130 = (_BYTE *)v57;
        goto LABEL_123;
      }
      v60 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v61 = (uint64_t)v142;
      if (v142)
      {
        if (v142 == v141)
        {
          v132 = v131;
          (*((void (**)(uint64_t (***)(), _BYTE *))v141[0] + 3))(v141, v131);
LABEL_153:
          v97 = v132;
          if (v132 == v131)
          {
            v98 = 4;
            v97 = v131;
          }
          else
          {
            if (!v132)
            {
LABEL_158:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v109, a1);
              v99 = v109;
              if (v110 == v109)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v100 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v100);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v99, (uint64_t *)&v122);
              v101 = v122;
              v122 = 0;
              if (v101)
                (*((void (**)(void **))*v101 + 1))(v101);
              goto LABEL_171;
            }
            v98 = 5;
          }
          (*(void (**)(void))(*v97 + 8 * v98))();
          goto LABEL_158;
        }
        v61 = ((uint64_t (*)(uint64_t (***)()))(*v142)[2])(v142);
      }
      v132 = (_BYTE *)v61;
      goto LABEL_153;
  }
  v49 = "Unimplemented input dtype";
LABEL_57:
  *(_DWORD *)a4 = 3;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a4 + 8), v49);
LABEL_173:
  if (v112[0])
  {
    v112[1] = v112[0];
    operator delete(v112[0]);
  }
  if (v113[0])
  {
    v113[1] = v113[0];
    operator delete(v113[0]);
  }
LABEL_177:
  v107 = v142;
  if (v142 == v141)
  {
    v108 = 4;
    v107 = v141;
  }
  else
  {
    if (!v142)
      goto LABEL_182;
    v108 = 5;
  }
  (*v107)[v108]();
LABEL_182:
  if (SHIBYTE(v115) < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v116.__begin_)
  {
    v116.__end_ = v116.__begin_;
    operator delete(v116.__begin_);
  }
  v29 = v119.__begin_;
  if (v119.__begin_)
  {
    v119.__end_ = v119.__begin_;
LABEL_188:
    operator delete(v29);
  }
}

{
  uint64_t InterpretedTensorValue;
  uint64_t v9;
  MIL::IRValue *ParameterValue;
  std::vector<int>::size_type v11;
  unint64_t v12;
  int *v13;
  std::vector<int>::pointer begin;
  MIL::IRValue *v15;
  std::vector<int>::size_type v16;
  unint64_t v17;
  int *v18;
  std::vector<int>::pointer v19;
  MIL::Fp16 *v20;
  __int16 v21;
  uint64_t v22;
  __int16 *v23;
  std::string *v24;
  __int128 v25;
  std::vector<int>::pointer v26;
  uint64_t v27;
  int v28;
  MIL::IRValueType *OutputType;
  uint64_t v30;
  int v31;
  MIL::IRValueType *v32;
  uint64_t v33;
  unint64_t v34;
  ANEMachineIR::Utils *v35;
  const MIL::IRTensorValueType *v36;
  MIL::IRValueType *v37;
  ANEMachineIR::Utils *v38;
  const MIL::IRTensorValueType *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  MIL::IRValueType *v62;
  void **v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  MIL::IRValueType *v67;
  void **v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned __int8 *v71;
  MIL::IRValueType *v72;
  void **v73;
  _QWORD *v74;
  uint64_t v75;
  unsigned __int8 *v76;
  MIL::IRValueType *v77;
  void **v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned __int8 *v81;
  MIL::IRValueType *v82;
  void **v83;
  _QWORD *v84;
  uint64_t v85;
  unsigned __int8 *v86;
  MIL::IRValueType *v87;
  void **v88;
  _QWORD *v89;
  uint64_t v90;
  unsigned __int8 *v91;
  MIL::IRValueType *v92;
  void **v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned __int8 *v96;
  MIL::IRValueType *v97;
  void **v98;
  _QWORD *v99;
  uint64_t v100;
  unsigned __int8 *v101;
  MIL::IRValueType *v102;
  void **v103;
  uint64_t (***v104)();
  uint64_t v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  void *v108[3];
  void *v109[3];
  void *v110[3];
  std::string __p;
  uint64_t v112;
  std::vector<int> v113;
  uint64_t v114;
  std::vector<int>::size_type v115;
  std::vector<int> v116;
  uint64_t Data;
  std::vector<int>::size_type __n;
  void **v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  _BYTE v126[24];
  _BYTE *v127;
  _BYTE v128[24];
  _BYTE *v129;
  _BYTE v130[24];
  _BYTE *v131;
  _BYTE v132[24];
  _BYTE *v133;
  _BYTE v134[24];
  _BYTE *v135;
  _BYTE v136[24];
  _BYTE *v137;
  uint64_t (**v138[3])();
  uint64_t (***v139)();
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  v9 = InterpretedTensorValue;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue)
      goto LABEL_3;
LABEL_22:
    *(_DWORD *)a4 = 2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "x");
    v24 = std::string::insert(&__p, 0, "No value for ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    *(_QWORD *)(a4 + 24) = *((_QWORD *)&v24->__r_.__value_.__l + 2);
    *(_OWORD *)(a4 + 8) = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v26 = (std::vector<int>::pointer)__p.__r_.__value_.__r.__words[0];
    goto LABEL_181;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v9)
    goto LABEL_22;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&__p, "kernel_sizes");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(ParameterValue);
  Data = MIL::IRTensorValue::GetDataView<int>();
  __n = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v11 = __n;
  }
  std::vector<int>::vector(&v116, v11);
  if (v116.__end_ != v116.__begin_)
  {
    v12 = 0;
    do
    {
      v13 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v12);
      begin = v116.__begin_;
      v116.__begin_[v12++] = *v13;
    }
    while (v12 < v116.__end_ - begin);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "strides");
  v15 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(v15);
  v114 = MIL::IRTensorValue::GetDataView<int>();
  v115 = v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v16 = v115;
  }
  std::vector<int>::vector(&v113, v16);
  if (v113.__end_ != v113.__begin_)
  {
    v17 = 0;
    do
    {
      v18 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v114, v17);
      v19 = v113.__begin_;
      v113.__begin_[v17++] = *v18;
    }
    while (v17 < v113.__end_ - v19);
  }
  v20 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
  v21 = MIL::Fp16::FromFloat(v20, 1.0);
  v22 = MIL::IROperation::TryGetParameterValue();
  if (v22)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22))
    {
      v23 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v23)
        v21 = *v23;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  v112 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&__p, v138);
  if (LODWORD(__p.__r_.__value_.__l.__data_))
  {
    *(_DWORD *)a4 = __p.__r_.__value_.__l.__data_;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a4 + 24) = v112;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    v112 = 0;
    goto LABEL_170;
  }
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 88))(v27);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v30 = MIL::IRValueType::AsTensorType(OutputType);
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 88))(v30);
  v32 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v33 = MIL::IRValueType::AsTensorType(v32);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
  v35 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  ANEMachineIR::Utils::GetStaticTensorShape(v35, v36, (uint64_t)v110);
  v37 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v38 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v37);
  ANEMachineIR::Utils::GetStaticTensorShape(v38, v39, (uint64_t)v109);
  switch(v28)
  {
    case 4:
      if (v31 != 14)
      {
        if (v31 != 9)
        {
          if (v31 != 4)
            goto LABEL_49;
          v44 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v45 = (uint64_t)v139;
          if (v139)
          {
            if (v139 == v138)
            {
              v137 = v136;
              (*((void (**)(uint64_t (***)(), _BYTE *))v138[0] + 3))(v138, v136);
LABEL_136:
              v89 = v137;
              if (v137 == v136)
              {
                v90 = 4;
                v89 = v136;
              }
              else
              {
                if (!v137)
                {
LABEL_141:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v106, a1);
                  v91 = v106;
                  if (v107 == v106)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v92 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v92);
                  MIL::IRTensorValueType::MakeFloat16Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v91, (uint64_t *)&v119);
                  v93 = v119;
                  v119 = 0;
                  if (v93)
                    (*((void (**)(void **))*v93 + 1))(v93);
                  goto LABEL_164;
                }
                v90 = 5;
              }
              (*(void (**)(void))(*v89 + 8 * v90))();
              goto LABEL_141;
            }
            v45 = ((uint64_t (*)(uint64_t (***)()))(*v139)[2])(v139);
          }
          v137 = (_BYTE *)v45;
          goto LABEL_136;
        }
        v51 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v52 = (uint64_t)v139;
        if (v139)
        {
          if (v139 == v138)
          {
            v133 = v132;
            (*((void (**)(uint64_t (***)(), _BYTE *))v138[0] + 3))(v138, v132);
LABEL_96:
            v69 = v133;
            if (v133 == v132)
            {
              v70 = 4;
              v69 = v132;
            }
            else
            {
              if (!v133)
              {
LABEL_101:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v106, a1);
                v71 = v106;
                if (v107 == v106)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v72 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v72);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v71, (uint64_t *)&v119);
                v73 = v119;
                v119 = 0;
                if (v73)
                  (*((void (**)(void **))*v73 + 1))(v73);
                goto LABEL_164;
              }
              v70 = 5;
            }
            (*(void (**)(void))(*v69 + 8 * v70))();
            goto LABEL_101;
          }
          v52 = ((uint64_t (*)(uint64_t (***)()))(*v139)[2])(v139);
        }
        v133 = (_BYTE *)v52;
        goto LABEL_96;
      }
      v55 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v56 = (uint64_t)v139;
      if (v139)
      {
        if (v139 == v138)
        {
          v135 = v134;
          (*((void (**)(uint64_t (***)(), _BYTE *))v138[0] + 3))(v138, v134);
LABEL_126:
          v84 = v135;
          if (v135 == v134)
          {
            v85 = 4;
            v84 = v134;
          }
          else
          {
            if (!v135)
            {
LABEL_131:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v106, a1);
              v86 = v106;
              if (v107 == v106)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v87 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v87);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v86, (uint64_t *)&v119);
              v88 = v119;
              v119 = 0;
              if (v88)
                (*((void (**)(void **))*v88 + 1))(v88);
              goto LABEL_164;
            }
            v85 = 5;
          }
          (*(void (**)(void))(*v84 + 8 * v85))();
          goto LABEL_131;
        }
        v56 = ((uint64_t (*)(uint64_t (***)()))(*v139)[2])(v139);
      }
      v135 = (_BYTE *)v56;
      goto LABEL_126;
    case 9:
      if (v31 != 14)
      {
        if (v31 != 9)
        {
          if (v31 == 4)
          {
            v42 = MIL::IRTensorValue::GetDataView<signed char>();
            v43 = (uint64_t)v139;
            if (v139)
            {
              if (v139 == v138)
              {
                v125 = v124;
                (*((void (**)(uint64_t (***)(), _BYTE *))v138[0] + 3))(v138, v124);
LABEL_106:
                v74 = v125;
                if (v125 == v124)
                {
                  v75 = 4;
                  v74 = v124;
                }
                else
                {
                  if (!v125)
                  {
LABEL_111:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v106, a1);
                    v76 = v106;
                    if (v107 == v106)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v77 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v77);
                    MIL::IRTensorValueType::MakeFloat16Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v76, (uint64_t *)&v119);
                    v78 = v119;
                    v119 = 0;
                    if (v78)
                      (*((void (**)(void **))*v78 + 1))(v78);
                    goto LABEL_164;
                  }
                  v75 = 5;
                }
                (*(void (**)(void))(*v74 + 8 * v75))();
                goto LABEL_111;
              }
              v43 = ((uint64_t (*)(uint64_t (***)()))(*v139)[2])(v139);
            }
            v125 = (_BYTE *)v43;
            goto LABEL_106;
          }
LABEL_49:
          v46 = "Unimplemented output dtype";
          goto LABEL_50;
        }
        v47 = MIL::IRTensorValue::GetDataView<signed char>();
        v48 = (uint64_t)v139;
        if (v139)
        {
          if (v139 == v138)
          {
            v121 = v120;
            (*((void (**)(uint64_t (***)(), _BYTE *))v138[0] + 3))(v138, v120);
LABEL_76:
            v59 = v121;
            if (v121 == v120)
            {
              v60 = 4;
              v59 = v120;
            }
            else
            {
              if (!v121)
              {
LABEL_81:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v106, a1);
                v61 = v106;
                if (v107 == v106)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v62 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v62);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v61, (uint64_t *)&v119);
                v63 = v119;
                v119 = 0;
                if (v63)
                  (*((void (**)(void **))*v63 + 1))(v63);
                goto LABEL_164;
              }
              v60 = 5;
            }
            (*(void (**)(void))(*v59 + 8 * v60))();
            goto LABEL_81;
          }
          v48 = ((uint64_t (*)(uint64_t (***)()))(*v139)[2])(v139);
        }
        v121 = (_BYTE *)v48;
        goto LABEL_76;
      }
      v49 = MIL::IRTensorValue::GetDataView<signed char>();
      v50 = (uint64_t)v139;
      if (v139)
      {
        if (v139 == v138)
        {
          v123 = v122;
          (*((void (**)(uint64_t (***)(), _BYTE *))v138[0] + 3))(v138, v122);
LABEL_86:
          v64 = v123;
          if (v123 == v122)
          {
            v65 = 4;
            v64 = v122;
          }
          else
          {
            if (!v123)
            {
LABEL_91:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v106, a1);
              v66 = v106;
              if (v107 == v106)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v67 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v67);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v66, (uint64_t *)&v119);
              v68 = v119;
              v119 = 0;
              if (v68)
                (*((void (**)(void **))*v68 + 1))(v68);
              goto LABEL_164;
            }
            v65 = 5;
          }
          (*(void (**)(void))(*v64 + 8 * v65))();
          goto LABEL_91;
        }
        v50 = ((uint64_t (*)(uint64_t (***)()))(*v139)[2])(v139);
      }
      v123 = (_BYTE *)v50;
      goto LABEL_86;
    case 14:
      if (v31 != 14)
      {
        if (v31 != 9)
        {
          if (v31 == 4)
          {
            v40 = MIL::IRTensorValue::GetDataView<unsigned char>();
            v41 = (uint64_t)v139;
            if (v139)
            {
              if (v139 == v138)
              {
                v131 = v130;
                (*((void (**)(uint64_t (***)(), _BYTE *))v138[0] + 3))(v138, v130);
LABEL_156:
                v99 = v131;
                if (v131 == v130)
                {
                  v100 = 4;
                  v99 = v130;
                }
                else
                {
                  if (!v131)
                  {
LABEL_161:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v106, a1);
                    v101 = v106;
                    if (v107 == v106)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v102 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v102);
                    MIL::IRTensorValueType::MakeFloat16Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v101, (uint64_t *)&v119);
                    v103 = v119;
                    v119 = 0;
                    if (v103)
                      (*((void (**)(void **))*v103 + 1))(v103);
LABEL_164:
                    v119 = (void **)&v106;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v119);
                    *(_DWORD *)a4 = 0;
                    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a4 + 8), (char *)&unk_2069A5097);
                    if (v108[0])
                    {
                      v108[1] = v108[0];
                      operator delete(v108[0]);
                    }
                    goto LABEL_166;
                  }
                  v100 = 5;
                }
                (*(void (**)(void))(*v99 + 8 * v100))();
                goto LABEL_161;
              }
              v41 = ((uint64_t (*)(uint64_t (***)()))(*v139)[2])(v139);
            }
            v131 = (_BYTE *)v41;
            goto LABEL_156;
          }
          goto LABEL_49;
        }
        v53 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v54 = (uint64_t)v139;
        if (v139)
        {
          if (v139 == v138)
          {
            v127 = v126;
            (*((void (**)(uint64_t (***)(), _BYTE *))v138[0] + 3))(v138, v126);
LABEL_116:
            v79 = v127;
            if (v127 == v126)
            {
              v80 = 4;
              v79 = v126;
            }
            else
            {
              if (!v127)
              {
LABEL_121:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v106, a1);
                v81 = v106;
                if (v107 == v106)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v82 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v82);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v81, (uint64_t *)&v119);
                v83 = v119;
                v119 = 0;
                if (v83)
                  (*((void (**)(void **))*v83 + 1))(v83);
                goto LABEL_164;
              }
              v80 = 5;
            }
            (*(void (**)(void))(*v79 + 8 * v80))();
            goto LABEL_121;
          }
          v54 = ((uint64_t (*)(uint64_t (***)()))(*v139)[2])(v139);
        }
        v127 = (_BYTE *)v54;
        goto LABEL_116;
      }
      v57 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v58 = (uint64_t)v139;
      if (v139)
      {
        if (v139 == v138)
        {
          v129 = v128;
          (*((void (**)(uint64_t (***)(), _BYTE *))v138[0] + 3))(v138, v128);
LABEL_146:
          v94 = v129;
          if (v129 == v128)
          {
            v95 = 4;
            v94 = v128;
          }
          else
          {
            if (!v129)
            {
LABEL_151:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v106, a1);
              v96 = v106;
              if (v107 == v106)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v97 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v97);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v96, (uint64_t *)&v119);
              v98 = v119;
              v119 = 0;
              if (v98)
                (*((void (**)(void **))*v98 + 1))(v98);
              goto LABEL_164;
            }
            v95 = 5;
          }
          (*(void (**)(void))(*v94 + 8 * v95))();
          goto LABEL_151;
        }
        v58 = ((uint64_t (*)(uint64_t (***)()))(*v139)[2])(v139);
      }
      v129 = (_BYTE *)v58;
      goto LABEL_146;
  }
  v46 = "Unimplemented input dtype";
LABEL_50:
  *(_DWORD *)a4 = 3;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a4 + 8), v46);
LABEL_166:
  if (v109[0])
  {
    v109[1] = v109[0];
    operator delete(v109[0]);
  }
  if (v110[0])
  {
    v110[1] = v110[0];
    operator delete(v110[0]);
  }
LABEL_170:
  v104 = v139;
  if (v139 == v138)
  {
    v105 = 4;
    v104 = v138;
  }
  else
  {
    if (!v139)
      goto LABEL_175;
    v105 = 5;
  }
  (*v104)[v105]();
LABEL_175:
  if (SHIBYTE(v112) < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (v113.__begin_)
  {
    v113.__end_ = v113.__begin_;
    operator delete(v113.__begin_);
  }
  v26 = v116.__begin_;
  if (v116.__begin_)
  {
    v116.__end_ = v116.__begin_;
LABEL_181:
    operator delete(v26);
  }
}

void sub_20688333C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;

  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  v38 = *(_QWORD **)(v36 - 104);
  if (v38 == (_QWORD *)(v36 - 128))
  {
    v39 = 4;
    v38 = (_QWORD *)(v36 - 128);
  }
  else
  {
    if (!v38)
      goto LABEL_12;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_12:
  if (a30 < 0)
    operator delete(a25);
  if (a31)
    operator delete(a31);
  if (a36)
    operator delete(a36);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::NeMinPoolCpu::Run(MIL::IROperation *a1@<X1>, _QWORD *a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  _DWORD *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string v20;
  std::string v21;
  std::string v22;

  v6 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(v6 + 8) != 11)
      goto LABEL_10;
    v6 = *(_QWORD *)v6;
  }
  else if (v7 != 11)
  {
    goto LABEL_10;
  }
  if (*(_QWORD *)v6 == 0x705F6E696D5F656ELL && *(_QWORD *)(v6 + 3) == 0x6C6F6F705F6E696DLL)
  {
    return;
  }
LABEL_10:
  *a3 = 1;
  v9 = a3 + 2;
  std::string::basic_string[abi:ne180100]<0>(&v20, "ne_min_pool");
  v10 = std::string::insert(&v20, 0, "Expected '");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v21, "' op. Got ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  v15 = *(char *)(v14 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)v14;
  else
    v16 = *(const std::string::value_type **)v14;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v14 + 23);
  else
    v17 = *(_QWORD *)(v14 + 8);
  v18 = std::string::append(&v22, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *((_QWORD *)v9 + 2) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)v9 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_206883830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::NeAvgPoolCpu::~NeAvgPoolCpu(MIL::ANEMachineIR::Interpreter::NeAvgPoolCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

void MIL::ANEMachineIR::Interpreter::NeMaxPoolCpu::~NeMaxPoolCpu(MIL::ANEMachineIR::Interpreter::NeMaxPoolCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

void MIL::ANEMachineIR::Interpreter::NeMinPoolCpu::~NeMinPoolCpu(MIL::ANEMachineIR::Interpreter::NeMinPoolCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, _QWORD *a9@<X8>, uint64_t a10, char a11)
{
  _QWORD *v16;
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  double v37;
  uint64_t v38;
  float v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  long double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  MIL::Fp16 *v70;
  float v71;
  __int16 v72;
  const char *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t j;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unint64_t v103;
  unint64_t v104;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  __int16 v112;
  int __e[4];
  char v114[16];

  v16 = a9;
  *(_QWORD *)v114 = *MEMORY[0x24BDAC8D0];
  v112 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v73 = "x_rank == o_shape.size()";
    v74 = 217;
    goto LABEL_74;
  }
  v20 = *a5;
  v21 = a5[1];
  v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    v73 = "kernel_sizes.size() == num_spatial_dims + 1";
    v74 = 218;
    goto LABEL_74;
  }
  v23 = *a6;
  v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    v73 = "strides.size() == num_spatial_dims + 1";
    v74 = 219;
    goto LABEL_74;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    v73 = "kernel_sizes.back() == strides.back()";
    v74 = 220;
LABEL_74:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v74, v73);
  }
  v25 = v19 - 2;
  v26 = 4 * v19;
  if (v19 == 5)
  {
    v27 = *(int *)(v20 + v26 - 20);
    v91 = *(int *)(v23 + v26 - 20);
    v28 = 2;
  }
  else
  {
    v28 = v19 - 3;
    v91 = 1;
    v27 = 1;
    v92 = 1;
    v97 = 1;
    v29 = 1;
    if (v25 <= 1)
      goto LABEL_9;
  }
  v30 = v26 - 16;
  v97 = *(int *)(v20 + v30);
  v29 = *(_DWORD *)(v23 + v30);
  v92 = v27;
LABEL_9:
  v102 = *(_DWORD *)(v20 + 4 * v25);
  v104 = *(int *)(v20 + 4 * v28);
  v103 = *(int *)(v23 + 4 * v28);
  v31 = *(int *)(v23 + 4 * v25);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v109, v17, v18, v19);
  v106 = 0;
  v107 = 0;
  v108 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v106, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  v84 = v16;
  if (v19 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v109, (uint64_t)(v109 + 8), (char *)__e, v114, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v106, (uint64_t)(v106 + 8), (char *)__e, v114, 2);
  }
  else if (v19 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v109, v109 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v106, v106 + 8, __e);
  }
  v32 = *(_QWORD *)v106;
  v33 = *((_QWORD *)v106 + 1);
  v34 = *((_QWORD *)v106 + 2);
  v85 = *((_QWORD *)v106 + 3);
  v86 = *((_QWORD *)v106 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v112);
  v36 = v35;
  v37 = exp2(-(double)a7);
  if (v32)
  {
    v38 = 0;
    v39 = v37 * v36;
    v40 = v102;
    if (v102 <= 1)
      v40 = 1;
    v99 = v40;
    v41 = v103;
    if (v103 <= 1)
      v41 = 1;
    v87 = v41;
    v95 = v29;
    if ((unint64_t)v29 <= 1)
      v42 = 1;
    else
      v42 = v29;
    v75 = v31;
    v76 = v42;
    v78 = v33;
    v79 = v32;
    v77 = v34;
    do
    {
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          if (v34)
          {
            v44 = 0;
            v89 = i * v91;
            v80 = i;
            do
            {
              if (v85)
              {
                v45 = 0;
                v94 = v44 * v95;
                v81 = v44;
                do
                {
                  if (v86)
                  {
                    v101 = 0;
                    v46 = 0;
                    v47 = v45 * v103;
                    v82 = v45;
                    v100 = v45 * v103;
                    do
                    {
                      v83 = v46;
                      v48 = *(_WORD *)(a1
                                     + 2
                      if (v91)
                      {
                        for (j = 0; j != v91; ++j)
                        {
                          if ((_DWORD)v95)
                          {
                            v90 = 0;
                            do
                            {
                              if ((_DWORD)v103)
                              {
                                v49 = 0;
                                v50 = v90;
                                do
                                {
                                  v51 = j;
                                  v96 = v49;
                                  if (j < v92)
                                  {
                                    do
                                    {
                                      v93 = v51;
                                      if (v50 < v97)
                                      {
                                        v52 = v51 + v89;
                                        do
                                        {
                                          v98 = v50;
                                          if (v49 < v104)
                                          {
                                            v53 = v50 + v94;
                                            do
                                            {
                                              if (v102)
                                              {
                                                v54 = v101;
                                                v55 = v99;
                                                do
                                                {
                                                  v56 = *(_WORD *)(a1
                                                                 + 2
                                                  if (a11)
                                                  {
                                                    LOWORD(__e[0]) = v48;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    v58 = v57;
                                                    LOWORD(__e[0]) = v56;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    if (v58 < v59)
                                                      v48 = v56;
                                                  }
                                                  else
                                                  {
                                                    LOWORD(__e[0]) = v48;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    v61 = v60;
                                                    LOWORD(__e[0]) = v56;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    if (v61 > v62)
                                                      v48 = v56;
                                                  }
                                                  ++v54;
                                                  --v55;
                                                }
                                                while (v55);
                                              }
                                              v49 += v103;
                                            }
                                            while (v49 < v104);
                                          }
                                          v49 = v96;
                                          v50 = v98 + v95;
                                        }
                                        while (v98 + v95 < v97);
                                      }
                                      v50 = v90;
                                      v51 = v93 + v91;
                                    }
                                    while (v93 + v91 < v92);
                                  }
                                  ++v49;
                                }
                                while (v49 != v87);
                              }
                              else
                              {
                                v50 = v90;
                              }
                              v34 = v77;
                              v90 = v50 + 1;
                              v16 = v84;
                              v33 = v78;
                              v32 = v79;
                              v47 = v100;
                            }
                            while (v50 + 1 != v76);
                          }
                        }
                      }
                      LOWORD(__e[0]) = v48;
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      v64 = v63 * v39;
                      v65 = 0.0;
                      v31 = v75;
                      if (v64 != 0.0)
                      {
                        __e[0] = 0;
                        v66 = frexp(v64, __e);
                        v67 = ldexp(v66, 11);
                        v65 = ldexp(round(v67), __e[0] - 11);
                      }
                      *(float *)__e = v65;
                      v68 = *(_QWORD *)(a10 + 24);
                      if (!v68)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v69 = v47;
                      v70 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v68 + 48))(v68, __e);
                      v72 = MIL::Fp16::FromFloat(v70, v71);
                      *(_WORD *)(*v16
                               + 2
                      v45 = v82;
                      v46 = v83 + 1;
                      v101 += v75;
                      v47 = v69;
                    }
                    while (v83 + 1 != v86);
                  }
                  ++v45;
                  v44 = v81;
                }
                while (v45 != v85);
              }
              ++v44;
              i = v80;
            }
            while (v44 != v34);
          }
        }
      }
      ++v38;
    }
    while (v38 != v32);
  }
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  if (v109)
  {
    v110 = v109;
    operator delete(v109);
  }
}

void sub_206883F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(_QWORD *)(v20 - 176) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(_QWORD *)(v20 - 152) = v23;
    operator delete(v23);
  }
  v24 = *(void **)a20;
  if (*(_QWORD *)a20)
  {
    *(_QWORD *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<unsigned char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, char a11)
{
  unint64_t *v16;
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  double v37;
  uint64_t v38;
  double v39;
  int v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  long double v67;
  double v68;
  uint64_t v69;
  float v70;
  int v71;
  int v72;
  const char *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t j;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  __int16 v111;
  int __e[4];
  char v113[16];

  v16 = a9;
  *(_QWORD *)v113 = *MEMORY[0x24BDAC8D0];
  v111 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v73 = "x_rank == o_shape.size()";
    v74 = 217;
    goto LABEL_83;
  }
  v20 = *a5;
  v21 = a5[1];
  v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    v73 = "kernel_sizes.size() == num_spatial_dims + 1";
    v74 = 218;
    goto LABEL_83;
  }
  v23 = *a6;
  v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    v73 = "strides.size() == num_spatial_dims + 1";
    v74 = 219;
    goto LABEL_83;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    v73 = "kernel_sizes.back() == strides.back()";
    v74 = 220;
LABEL_83:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v74, v73);
  }
  v25 = v19 - 2;
  v26 = 4 * v19;
  if (v19 == 5)
  {
    v27 = *(int *)(v20 + v26 - 20);
    v91 = *(int *)(v23 + v26 - 20);
    v28 = 2;
  }
  else
  {
    v28 = v19 - 3;
    v91 = 1;
    v27 = 1;
    v92 = 1;
    v96 = 1;
    v29 = 1;
    if (v25 <= 1)
      goto LABEL_11;
  }
  v30 = v26 - 16;
  v96 = *(int *)(v20 + v30);
  v29 = *(_DWORD *)(v23 + v30);
  v92 = v27;
LABEL_11:
  v101 = *(_DWORD *)(v20 + 4 * v25);
  v103 = *(int *)(v20 + 4 * v28);
  v102 = *(int *)(v23 + 4 * v28);
  v31 = *(int *)(v23 + 4 * v25);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v108, v17, v18, v19);
  v105 = 0;
  v106 = 0;
  v107 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v105, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  v84 = v16;
  if (v19 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v108, (uint64_t)(v108 + 8), (char *)__e, v113, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v105, (uint64_t)(v105 + 8), (char *)__e, v113, 2);
  }
  else if (v19 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v108, v108 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v105, v105 + 8, __e);
  }
  v32 = *(_QWORD *)v105;
  v33 = *((_QWORD *)v105 + 1);
  v34 = *((_QWORD *)v105 + 2);
  v85 = *((_QWORD *)v105 + 3);
  v86 = *((_QWORD *)v105 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v111);
  v36 = v35;
  v37 = exp2(-(double)a7);
  if (v32)
  {
    v38 = 0;
    v39 = v37 * v36;
    v40 = v101;
    if (v101 <= 1)
      v40 = 1;
    v98 = v40;
    v41 = v102;
    if (v102 <= 1)
      v41 = 1;
    v87 = v41;
    v42 = v39;
    if ((unint64_t)v29 <= 1)
      v43 = 1;
    else
      v43 = v29;
    v75 = v31;
    v76 = v43;
    v78 = v33;
    v79 = v32;
    v77 = v34;
    do
    {
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          if (v34)
          {
            v45 = 0;
            v89 = i * v91;
            v80 = i;
            do
            {
              if (v85)
              {
                v46 = 0;
                v94 = v45 * v29;
                v81 = v45;
                do
                {
                  if (v86)
                  {
                    v100 = 0;
                    v47 = 0;
                    v48 = v46 * v102;
                    v99 = v46 * v102;
                    v82 = v46;
                    do
                    {
                      v83 = v47;
                      v49 = *(_WORD *)(a1
                                     + 2
                      if (v91)
                      {
                        for (j = 0; j != v91; ++j)
                        {
                          if (v29)
                          {
                            v90 = 0;
                            do
                            {
                              if ((_DWORD)v102)
                              {
                                v50 = 0;
                                v51 = v90;
                                do
                                {
                                  v52 = j;
                                  v95 = v50;
                                  if (j < v92)
                                  {
                                    do
                                    {
                                      v93 = v52;
                                      if (v51 < v96)
                                      {
                                        v53 = v52 + v89;
                                        do
                                        {
                                          v97 = v51;
                                          if (v50 < v103)
                                          {
                                            v54 = v51 + v94;
                                            do
                                            {
                                              if (v101)
                                              {
                                                v55 = v100;
                                                v56 = v98;
                                                do
                                                {
                                                  v57 = *(_WORD *)(a1
                                                                 + 2
                                                  if (a11)
                                                  {
                                                    LOWORD(__e[0]) = v49;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    v59 = v58;
                                                    LOWORD(__e[0]) = v57;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    if (v59 < v60)
                                                      v49 = v57;
                                                  }
                                                  else
                                                  {
                                                    LOWORD(__e[0]) = v49;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    v62 = v61;
                                                    LOWORD(__e[0]) = v57;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    if (v62 > v63)
                                                      v49 = v57;
                                                  }
                                                  ++v55;
                                                  --v56;
                                                }
                                                while (v56);
                                              }
                                              v50 += v102;
                                            }
                                            while (v50 < v103);
                                          }
                                          v50 = v95;
                                          v51 = v97 + v29;
                                        }
                                        while (v51 < v96);
                                      }
                                      v51 = v90;
                                      v52 = v93 + v91;
                                    }
                                    while (v93 + v91 < v92);
                                  }
                                  ++v50;
                                }
                                while (v50 != v87);
                              }
                              else
                              {
                                v51 = v90;
                              }
                              v34 = v77;
                              v90 = v51 + 1;
                              v16 = v84;
                              v33 = v78;
                              v32 = v79;
                            }
                            while (v51 + 1 != v76);
                          }
                        }
                      }
                      LOWORD(__e[0]) = v49;
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      v31 = v75;
                      v65 = v64 * v42;
                      v66 = 0.0;
                      if (v65 != 0.0)
                      {
                        __e[0] = 0;
                        v67 = frexp(v65, __e);
                        v68 = ldexp(v67, 11);
                        v66 = ldexp(round(v68), __e[0] - 11);
                      }
                      *(float *)__e = v66;
                      v69 = *(_QWORD *)(a10 + 24);
                      if (!v69)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v70 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v69 + 48))(v69, __e);
                      if (v70 == INFINITY)
                      {
                        LOBYTE(v71) = -1;
                      }
                      else if (v70 == -INFINITY)
                      {
                        LOBYTE(v71) = 0;
                      }
                      else
                      {
                        v72 = llroundf(v70);
                        if (v72 >= 255)
                          v72 = 255;
                        v71 = v72 & ~(v72 >> 31);
                      }
                      *(_BYTE *)(*v16
                      v46 = v82;
                      v47 = v83 + 1;
                      v48 = v99;
                      v100 += v75;
                    }
                    while (v83 + 1 != v86);
                  }
                  ++v46;
                  v45 = v81;
                }
                while (v46 != v85);
              }
              ++v45;
              i = v80;
            }
            while (v45 != v34);
          }
        }
      }
      ++v38;
    }
    while (v38 != v32);
  }
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
}

void sub_206884648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(_QWORD *)(v20 - 176) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(_QWORD *)(v20 - 152) = v23;
    operator delete(v23);
  }
  v24 = *(void **)a20;
  if (*(_QWORD *)a20)
  {
    *(_QWORD *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<signed char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, char a11)
{
  unint64_t *v16;
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  double v37;
  uint64_t v38;
  double v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  long double v67;
  double v68;
  uint64_t v69;
  float v70;
  char v71;
  int v72;
  const char *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t j;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  __int16 v111;
  int __e[4];
  char v113[16];

  v16 = a9;
  *(_QWORD *)v113 = *MEMORY[0x24BDAC8D0];
  v111 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v73 = "x_rank == o_shape.size()";
    v74 = 217;
    goto LABEL_85;
  }
  v20 = *a5;
  v21 = a5[1];
  v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    v73 = "kernel_sizes.size() == num_spatial_dims + 1";
    v74 = 218;
    goto LABEL_85;
  }
  v23 = *a6;
  v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    v73 = "strides.size() == num_spatial_dims + 1";
    v74 = 219;
    goto LABEL_85;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    v73 = "kernel_sizes.back() == strides.back()";
    v74 = 220;
LABEL_85:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v74, v73);
  }
  v25 = v19 - 2;
  v26 = 4 * v19;
  if (v19 == 5)
  {
    v27 = *(int *)(v20 + v26 - 20);
    v91 = *(int *)(v23 + v26 - 20);
    v28 = 2;
  }
  else
  {
    v28 = v19 - 3;
    v91 = 1;
    v27 = 1;
    v92 = 1;
    v96 = 1;
    v29 = 1;
    if (v25 <= 1)
      goto LABEL_11;
  }
  v30 = v26 - 16;
  v96 = *(int *)(v20 + v30);
  v29 = *(_DWORD *)(v23 + v30);
  v92 = v27;
LABEL_11:
  v101 = *(_DWORD *)(v20 + 4 * v25);
  v103 = *(int *)(v20 + 4 * v28);
  v102 = *(int *)(v23 + 4 * v28);
  v31 = *(int *)(v23 + 4 * v25);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v108, v17, v18, v19);
  v105 = 0;
  v106 = 0;
  v107 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v105, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  v84 = v16;
  if (v19 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v108, (uint64_t)(v108 + 8), (char *)__e, v113, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v105, (uint64_t)(v105 + 8), (char *)__e, v113, 2);
  }
  else if (v19 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v108, v108 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v105, v105 + 8, __e);
  }
  v32 = *(_QWORD *)v105;
  v33 = *((_QWORD *)v105 + 1);
  v34 = *((_QWORD *)v105 + 2);
  v85 = *((_QWORD *)v105 + 3);
  v86 = *((_QWORD *)v105 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v111);
  v36 = v35;
  v37 = exp2(-(double)a7);
  if (v32)
  {
    v38 = 0;
    v39 = v37 * v36;
    v40 = v101;
    if (v101 <= 1)
      v40 = 1;
    v98 = v40;
    v41 = v102;
    if (v102 <= 1)
      v41 = 1;
    v87 = v41;
    if ((unint64_t)v29 <= 1)
      v42 = 1;
    else
      v42 = v29;
    v75 = v31;
    v76 = v42;
    v43 = v39;
    v78 = v33;
    v79 = v32;
    v77 = v34;
    do
    {
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          if (v34)
          {
            v45 = 0;
            v89 = i * v91;
            v80 = i;
            do
            {
              if (v85)
              {
                v46 = 0;
                v94 = v45 * v29;
                v81 = v45;
                do
                {
                  if (v86)
                  {
                    v100 = 0;
                    v47 = 0;
                    v48 = v46 * v102;
                    v99 = v46 * v102;
                    v82 = v46;
                    do
                    {
                      v83 = v47;
                      v49 = *(_WORD *)(a1
                                     + 2
                      if (v91)
                      {
                        for (j = 0; j != v91; ++j)
                        {
                          if (v29)
                          {
                            v90 = 0;
                            do
                            {
                              if ((_DWORD)v102)
                              {
                                v50 = 0;
                                v51 = v90;
                                do
                                {
                                  v52 = j;
                                  v95 = v50;
                                  if (j < v92)
                                  {
                                    do
                                    {
                                      v93 = v52;
                                      if (v51 < v96)
                                      {
                                        v53 = v52 + v89;
                                        do
                                        {
                                          v97 = v51;
                                          if (v50 < v103)
                                          {
                                            v54 = v51 + v94;
                                            do
                                            {
                                              if (v101)
                                              {
                                                v55 = v100;
                                                v56 = v98;
                                                do
                                                {
                                                  v57 = *(_WORD *)(a1
                                                                 + 2
                                                  if (a11)
                                                  {
                                                    LOWORD(__e[0]) = v49;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    v59 = v58;
                                                    LOWORD(__e[0]) = v57;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    if (v59 < v60)
                                                      v49 = v57;
                                                  }
                                                  else
                                                  {
                                                    LOWORD(__e[0]) = v49;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    v62 = v61;
                                                    LOWORD(__e[0]) = v57;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    if (v62 > v63)
                                                      v49 = v57;
                                                  }
                                                  ++v55;
                                                  --v56;
                                                }
                                                while (v56);
                                              }
                                              v50 += v102;
                                            }
                                            while (v50 < v103);
                                          }
                                          v50 = v95;
                                          v51 = v97 + v29;
                                        }
                                        while (v51 < v96);
                                      }
                                      v51 = v90;
                                      v52 = v93 + v91;
                                    }
                                    while (v93 + v91 < v92);
                                  }
                                  ++v50;
                                }
                                while (v50 != v87);
                              }
                              else
                              {
                                v51 = v90;
                              }
                              v34 = v77;
                              v90 = v51 + 1;
                              v16 = v84;
                              v33 = v78;
                              v32 = v79;
                            }
                            while (v51 + 1 != v76);
                          }
                        }
                      }
                      LOWORD(__e[0]) = v49;
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      v31 = v75;
                      v65 = v64 * v43;
                      v66 = 0.0;
                      if (v65 != 0.0)
                      {
                        __e[0] = 0;
                        v67 = frexp(v65, __e);
                        v68 = ldexp(v67, 11);
                        v66 = ldexp(round(v68), __e[0] - 11);
                      }
                      *(float *)__e = v66;
                      v69 = *(_QWORD *)(a10 + 24);
                      if (!v69)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v70 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v69 + 48))(v69, __e);
                      if (v70 == INFINITY)
                      {
                        v71 = 127;
                      }
                      else if (v70 == -INFINITY)
                      {
                        v71 = 0x80;
                      }
                      else
                      {
                        v72 = llroundf(v70);
                        if (v72 >= 127)
                          v72 = 127;
                        if (v72 <= -128)
                          v71 = 0x80;
                        else
                          v71 = v72;
                      }
                      *(_BYTE *)(*v16
                      v46 = v82;
                      v47 = v83 + 1;
                      v48 = v99;
                      v100 += v75;
                    }
                    while (v83 + 1 != v86);
                  }
                  ++v46;
                  v45 = v81;
                }
                while (v46 != v85);
              }
              ++v45;
              i = v80;
            }
            while (v45 != v34);
          }
        }
      }
      ++v38;
    }
    while (v38 != v32);
  }
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
}

void sub_206884D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(_QWORD *)(v20 - 176) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(_QWORD *)(v20 - 152) = v23;
    operator delete(v23);
  }
  v24 = *(void **)a20;
  if (*(_QWORD *)a20)
  {
    *(_QWORD *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<MIL::Fp16,unsigned char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, _QWORD *a9@<X8>, uint64_t a10, char a11)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  double v38;
  uint64_t v39;
  float v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  _BOOL4 v58;
  float v59;
  float v60;
  long double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  MIL::Fp16 *v65;
  float v66;
  __int16 v67;
  const char *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  unint64_t j;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  __int16 v106;
  int __e[4];
  char v108[16];

  *(_QWORD *)v108 = *MEMORY[0x24BDAC8D0];
  v106 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v68 = "x_rank == o_shape.size()";
    v69 = 217;
    goto LABEL_71;
  }
  v20 = *a5;
  v21 = a5[1];
  v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    v68 = "kernel_sizes.size() == num_spatial_dims + 1";
    v69 = 218;
    goto LABEL_71;
  }
  v23 = *a6;
  v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    v68 = "strides.size() == num_spatial_dims + 1";
    v69 = 219;
    goto LABEL_71;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    v68 = "kernel_sizes.back() == strides.back()";
    v69 = 220;
LABEL_71:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v69, v68);
  }
  v25 = v19 - 2;
  v26 = 4 * v19;
  if (v19 == 5)
  {
    v27 = *(int *)(v20 + v26 - 20);
    v86 = *(int *)(v23 + v26 - 20);
    v28 = 2;
  }
  else
  {
    v28 = v19 - 3;
    v86 = 1;
    v27 = 1;
    v87 = 1;
    v92 = 1;
    v29 = 1;
    if (v25 <= 1)
      goto LABEL_9;
  }
  v30 = v26 - 16;
  v92 = *(int *)(v20 + v30);
  v29 = *(_DWORD *)(v23 + v30);
  v87 = v27;
LABEL_9:
  v97 = *(_DWORD *)(v20 + 4 * v25);
  v99 = *(int *)(v20 + 4 * v28);
  v98 = *(int *)(v23 + 4 * v28);
  v31 = *(int *)(v23 + 4 * v25);
  v103 = 0;
  v104 = 0;
  v105 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v103, v17, v18, v19);
  v100 = 0;
  v101 = 0;
  v102 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v100, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v19 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v103, (uint64_t)(v103 + 8), (char *)__e, v108, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v100, (uint64_t)(v100 + 8), (char *)__e, v108, 2);
  }
  else if (v19 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v103, v103 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v100, v100 + 8, __e);
  }
  v32 = *(_QWORD *)v100;
  v33 = *((_QWORD *)v100 + 1);
  v34 = *((_QWORD *)v100 + 2);
  v35 = *((_QWORD *)v100 + 3);
  v81 = *((_QWORD *)v100 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v106);
  v37 = v36;
  v38 = exp2(-(double)a7);
  if (v32)
  {
    v39 = 0;
    v40 = v38 * v37;
    v41 = v97;
    if (v97 <= 1)
      v41 = 1;
    v94 = v41;
    v42 = v98;
    if (v98 <= 1)
      v42 = 1;
    v82 = v42;
    v90 = v29;
    if ((unint64_t)v29 <= 1)
      v43 = 1;
    else
      v43 = v29;
    v77 = v43;
    v78 = v35;
    v72 = v32;
    v73 = v31;
    v70 = v34;
    v71 = v33;
    do
    {
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          if (v34)
          {
            v45 = 0;
            v84 = i * v86;
            v74 = i;
            do
            {
              if (v35)
              {
                v46 = 0;
                v89 = v45 * v90;
                v75 = v45;
                do
                {
                  if (v81)
                  {
                    v95 = 0;
                    v47 = 0;
                    v48 = v46 * v98;
                    v76 = v46;
                    v96 = v46 * v98;
                    do
                    {
                      v79 = v47;
                      v49 = *(_BYTE *)(a1
                      if (v86)
                      {
                        for (j = 0; j != v86; ++j)
                        {
                          if ((_DWORD)v90)
                          {
                            v50 = 0;
                            do
                            {
                              if ((_DWORD)v98)
                              {
                                v51 = 0;
                                v85 = v50;
                                do
                                {
                                  v52 = j;
                                  v91 = v51;
                                  if (j < v87)
                                  {
                                    do
                                    {
                                      v88 = v52;
                                      if (v50 < v92)
                                      {
                                        v53 = v52 + v84;
                                        do
                                        {
                                          v93 = v50;
                                          if (v51 < v99)
                                          {
                                            v54 = v50 + v89;
                                            do
                                            {
                                              if (v97)
                                              {
                                                v55 = v95;
                                                v56 = v94;
                                                do
                                                {
                                                  v57 = *(unsigned __int8 *)(a1
                                                  v58 = v49 > v57;
                                                  if (a11)
                                                    v58 = v49 < v57;
                                                  if (v58)
                                                    v49 = v57;
                                                  ++v55;
                                                  --v56;
                                                }
                                                while (v56);
                                              }
                                              v51 += v98;
                                            }
                                            while (v51 < v99);
                                          }
                                          v51 = v91;
                                          v50 = v93 + v90;
                                        }
                                        while (v93 + v90 < v92);
                                      }
                                      v50 = v85;
                                      v52 = v88 + v86;
                                    }
                                    while (v88 + v86 < v87);
                                  }
                                  ++v51;
                                }
                                while (v51 != v82);
                              }
                              ++v50;
                              v35 = v78;
                              v48 = v96;
                            }
                            while (v50 != v77);
                          }
                        }
                      }
                      v59 = v40 * (float)v49;
                      v60 = 0.0;
                      if (v59 != 0.0)
                      {
                        __e[0] = 0;
                        v61 = frexp(v59, __e);
                        v62 = ldexp(v61, 11);
                        v60 = ldexp(round(v62), __e[0] - 11);
                      }
                      *(float *)__e = v60;
                      v34 = v70;
                      v63 = *(_QWORD *)(a10 + 24);
                      v32 = v72;
                      v31 = v73;
                      v33 = v71;
                      if (!v63)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v64 = v48;
                      v65 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v63 + 48))(v63, __e);
                      v67 = MIL::Fp16::FromFloat(v65, v66);
                      *(_WORD *)(*a9
                               + 2
                      v47 = v79 + 1;
                      v95 += v73;
                      v46 = v76;
                      v48 = v64;
                    }
                    while (v79 + 1 != v81);
                  }
                  ++v46;
                  v45 = v75;
                }
                while (v46 != v35);
              }
              ++v45;
              i = v74;
            }
            while (v45 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
}

void sub_2068853F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(_QWORD *)(v20 - 176) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(_QWORD *)(v20 - 152) = v23;
    operator delete(v23);
  }
  v24 = *(void **)a20;
  if (*(_QWORD *)a20)
  {
    *(_QWORD *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<unsigned char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, char a11)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  double v38;
  uint64_t v39;
  double v40;
  int v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  float v60;
  float v61;
  long double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  int v67;
  int v68;
  const char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  unint64_t j;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  __int16 v107;
  int __e[4];
  char v109[16];

  *(_QWORD *)v109 = *MEMORY[0x24BDAC8D0];
  v107 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v69 = "x_rank == o_shape.size()";
    v70 = 217;
    goto LABEL_80;
  }
  v20 = *a5;
  v21 = a5[1];
  v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    v69 = "kernel_sizes.size() == num_spatial_dims + 1";
    v70 = 218;
    goto LABEL_80;
  }
  v23 = *a6;
  v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    v69 = "strides.size() == num_spatial_dims + 1";
    v70 = 219;
    goto LABEL_80;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    v69 = "kernel_sizes.back() == strides.back()";
    v70 = 220;
LABEL_80:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v70, v69);
  }
  v25 = v19 - 2;
  v26 = 4 * v19;
  if (v19 == 5)
  {
    v27 = *(int *)(v20 + v26 - 20);
    v87 = *(int *)(v23 + v26 - 20);
    v28 = 2;
  }
  else
  {
    v28 = v19 - 3;
    v87 = 1;
    v27 = 1;
    v88 = 1;
    v93 = 1;
    v29 = 1;
    if (v25 <= 1)
      goto LABEL_11;
  }
  v30 = v26 - 16;
  v93 = *(int *)(v20 + v30);
  v29 = *(_DWORD *)(v23 + v30);
  v88 = v27;
LABEL_11:
  v98 = *(_DWORD *)(v20 + 4 * v25);
  v100 = *(int *)(v20 + 4 * v28);
  v99 = *(int *)(v23 + 4 * v28);
  v31 = *(int *)(v23 + 4 * v25);
  v104 = 0;
  v105 = 0;
  v106 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v104, v17, v18, v19);
  v101 = 0;
  v102 = 0;
  v103 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v101, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v19 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v104, (uint64_t)(v104 + 8), (char *)__e, v109, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v101, (uint64_t)(v101 + 8), (char *)__e, v109, 2);
  }
  else if (v19 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v104, v104 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v101, v101 + 8, __e);
  }
  v32 = *(_QWORD *)v101;
  v33 = *((_QWORD *)v101 + 1);
  v34 = *((_QWORD *)v101 + 2);
  v35 = *((_QWORD *)v101 + 3);
  v82 = *((_QWORD *)v101 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v107);
  v37 = v36;
  v38 = exp2(-(double)a7);
  if (v32)
  {
    v39 = 0;
    v40 = v38 * v37;
    v41 = v98;
    if (v98 <= 1)
      v41 = 1;
    v95 = v41;
    v42 = v99;
    if (v99 <= 1)
      v42 = 1;
    v83 = v42;
    v43 = v40;
    v91 = v29;
    if ((unint64_t)v29 <= 1)
      v44 = 1;
    else
      v44 = v29;
    v78 = v44;
    v79 = v35;
    v73 = v32;
    v74 = v31;
    v71 = v34;
    v72 = v33;
    do
    {
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          if (v34)
          {
            v46 = 0;
            v85 = i * v87;
            v75 = i;
            do
            {
              if (v35)
              {
                v47 = 0;
                v90 = v46 * v91;
                v76 = v46;
                do
                {
                  if (v82)
                  {
                    v96 = 0;
                    v48 = 0;
                    v49 = v47 * v99;
                    v77 = v47;
                    v97 = v47 * v99;
                    do
                    {
                      v80 = v48;
                      v50 = *(_BYTE *)(a1
                      if (v87)
                      {
                        for (j = 0; j != v87; ++j)
                        {
                          if ((_DWORD)v91)
                          {
                            v51 = 0;
                            do
                            {
                              if ((_DWORD)v99)
                              {
                                v52 = 0;
                                v86 = v51;
                                do
                                {
                                  v53 = j;
                                  v92 = v52;
                                  if (j < v88)
                                  {
                                    do
                                    {
                                      v89 = v53;
                                      if (v51 < v93)
                                      {
                                        v54 = v53 + v85;
                                        do
                                        {
                                          v94 = v51;
                                          if (v52 < v100)
                                          {
                                            v55 = v51 + v90;
                                            do
                                            {
                                              if (v98)
                                              {
                                                v56 = v96;
                                                v57 = v95;
                                                do
                                                {
                                                  v58 = *(unsigned __int8 *)(a1
                                                  v59 = v50 > v58;
                                                  if (a11)
                                                    v59 = v50 < v58;
                                                  if (v59)
                                                    v50 = v58;
                                                  ++v56;
                                                  --v57;
                                                }
                                                while (v57);
                                              }
                                              v52 += v99;
                                            }
                                            while (v52 < v100);
                                          }
                                          v52 = v92;
                                          v51 = v94 + v91;
                                        }
                                        while (v94 + v91 < v93);
                                      }
                                      v51 = v86;
                                      v53 = v89 + v87;
                                    }
                                    while (v89 + v87 < v88);
                                  }
                                  ++v52;
                                }
                                while (v52 != v83);
                              }
                              ++v51;
                              v35 = v79;
                              v49 = v97;
                            }
                            while (v51 != v78);
                          }
                        }
                      }
                      v60 = v43 * (float)v50;
                      v61 = 0.0;
                      if (v60 != 0.0)
                      {
                        __e[0] = 0;
                        v62 = frexp(v60, __e);
                        v63 = ldexp(v62, 11);
                        v61 = ldexp(round(v63), __e[0] - 11);
                      }
                      *(float *)__e = v61;
                      v34 = v71;
                      v64 = *(_QWORD *)(a10 + 24);
                      v32 = v73;
                      v31 = v74;
                      v33 = v72;
                      if (!v64)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v65 = v49;
                      v66 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v64 + 48))(v64, __e);
                      if (v66 == INFINITY)
                      {
                        LOBYTE(v67) = -1;
                      }
                      else if (v66 == -INFINITY)
                      {
                        LOBYTE(v67) = 0;
                      }
                      else
                      {
                        v68 = llroundf(v66);
                        if (v68 >= 255)
                          v68 = 255;
                        v67 = v68 & ~(v68 >> 31);
                      }
                      *(_BYTE *)(*a9
                      v48 = v80 + 1;
                      v96 += v74;
                      v47 = v77;
                      v49 = v65;
                    }
                    while (v80 + 1 != v82);
                  }
                  ++v47;
                  v46 = v76;
                }
                while (v47 != v35);
              }
              ++v46;
              i = v75;
            }
            while (v46 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
}

void sub_206885AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(_QWORD *)(v20 - 176) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(_QWORD *)(v20 - 152) = v23;
    operator delete(v23);
  }
  v24 = *(void **)a20;
  if (*(_QWORD *)a20)
  {
    *(_QWORD *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<signed char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, char a11)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  double v38;
  uint64_t v39;
  double v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t i;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  float v60;
  float v61;
  long double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  char v67;
  int v68;
  const char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  unint64_t j;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  __int16 v107;
  int __e[4];
  char v109[16];

  *(_QWORD *)v109 = *MEMORY[0x24BDAC8D0];
  v107 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v69 = "x_rank == o_shape.size()";
    v70 = 217;
    goto LABEL_82;
  }
  v20 = *a5;
  v21 = a5[1];
  v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    v69 = "kernel_sizes.size() == num_spatial_dims + 1";
    v70 = 218;
    goto LABEL_82;
  }
  v23 = *a6;
  v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    v69 = "strides.size() == num_spatial_dims + 1";
    v70 = 219;
    goto LABEL_82;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    v69 = "kernel_sizes.back() == strides.back()";
    v70 = 220;
LABEL_82:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v70, v69);
  }
  v25 = v19 - 2;
  v26 = 4 * v19;
  if (v19 == 5)
  {
    v27 = *(int *)(v20 + v26 - 20);
    v87 = *(int *)(v23 + v26 - 20);
    v28 = 2;
  }
  else
  {
    v28 = v19 - 3;
    v87 = 1;
    v27 = 1;
    v88 = 1;
    v93 = 1;
    v29 = 1;
    if (v25 <= 1)
      goto LABEL_11;
  }
  v30 = v26 - 16;
  v93 = *(int *)(v20 + v30);
  v29 = *(_DWORD *)(v23 + v30);
  v88 = v27;
LABEL_11:
  v98 = *(_DWORD *)(v20 + 4 * v25);
  v100 = *(int *)(v20 + 4 * v28);
  v99 = *(int *)(v23 + 4 * v28);
  v31 = *(int *)(v23 + 4 * v25);
  v104 = 0;
  v105 = 0;
  v106 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v104, v17, v18, v19);
  v101 = 0;
  v102 = 0;
  v103 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v101, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v19 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v104, (uint64_t)(v104 + 8), (char *)__e, v109, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v101, (uint64_t)(v101 + 8), (char *)__e, v109, 2);
  }
  else if (v19 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v104, v104 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v101, v101 + 8, __e);
  }
  v32 = *(_QWORD *)v101;
  v33 = *((_QWORD *)v101 + 1);
  v34 = *((_QWORD *)v101 + 2);
  v35 = *((_QWORD *)v101 + 3);
  v82 = *((_QWORD *)v101 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v107);
  v37 = v36;
  v38 = exp2(-(double)a7);
  if (v32)
  {
    v39 = 0;
    v40 = v38 * v37;
    v41 = v98;
    if (v98 <= 1)
      v41 = 1;
    v95 = v41;
    v42 = v99;
    if (v99 <= 1)
      v42 = 1;
    v83 = v42;
    v91 = v29;
    if ((unint64_t)v29 <= 1)
      v43 = 1;
    else
      v43 = v29;
    v78 = v43;
    v79 = v35;
    v44 = v40;
    v73 = v32;
    v74 = v31;
    v71 = v34;
    v72 = v33;
    do
    {
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          if (v34)
          {
            v46 = 0;
            v85 = i * v87;
            v75 = i;
            do
            {
              if (v35)
              {
                v47 = 0;
                v90 = v46 * v91;
                v76 = v46;
                do
                {
                  if (v82)
                  {
                    v96 = 0;
                    v48 = 0;
                    v49 = v47 * v99;
                    v77 = v47;
                    v97 = v47 * v99;
                    do
                    {
                      v80 = v48;
                      v50 = *(_BYTE *)(a1
                      if (v87)
                      {
                        for (j = 0; j != v87; ++j)
                        {
                          if ((_DWORD)v91)
                          {
                            v51 = 0;
                            do
                            {
                              if ((_DWORD)v99)
                              {
                                v52 = 0;
                                v86 = v51;
                                do
                                {
                                  v53 = j;
                                  v92 = v52;
                                  if (j < v88)
                                  {
                                    do
                                    {
                                      v89 = v53;
                                      if (v51 < v93)
                                      {
                                        v54 = v53 + v85;
                                        do
                                        {
                                          v94 = v51;
                                          if (v52 < v100)
                                          {
                                            v55 = v51 + v90;
                                            do
                                            {
                                              if (v98)
                                              {
                                                v56 = v96;
                                                v57 = v95;
                                                do
                                                {
                                                  v58 = *(unsigned __int8 *)(a1
                                                  v59 = v50 > v58;
                                                  if (a11)
                                                    v59 = v50 < v58;
                                                  if (v59)
                                                    v50 = v58;
                                                  ++v56;
                                                  --v57;
                                                }
                                                while (v57);
                                              }
                                              v52 += v99;
                                            }
                                            while (v52 < v100);
                                          }
                                          v52 = v92;
                                          v51 = v94 + v91;
                                        }
                                        while (v94 + v91 < v93);
                                      }
                                      v51 = v86;
                                      v53 = v89 + v87;
                                    }
                                    while (v89 + v87 < v88);
                                  }
                                  ++v52;
                                }
                                while (v52 != v83);
                              }
                              ++v51;
                              v35 = v79;
                              v49 = v97;
                            }
                            while (v51 != v78);
                          }
                        }
                      }
                      v60 = v44 * (float)v50;
                      v61 = 0.0;
                      if (v60 != 0.0)
                      {
                        __e[0] = 0;
                        v62 = frexp(v60, __e);
                        v63 = ldexp(v62, 11);
                        v61 = ldexp(round(v63), __e[0] - 11);
                      }
                      *(float *)__e = v61;
                      v34 = v71;
                      v64 = *(_QWORD *)(a10 + 24);
                      v32 = v73;
                      v31 = v74;
                      v33 = v72;
                      if (!v64)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v65 = v49;
                      v66 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v64 + 48))(v64, __e);
                      if (v66 == INFINITY)
                      {
                        v67 = 127;
                      }
                      else if (v66 == -INFINITY)
                      {
                        v67 = 0x80;
                      }
                      else
                      {
                        v68 = llroundf(v66);
                        if (v68 >= 127)
                          v68 = 127;
                        if (v68 <= -128)
                          v67 = 0x80;
                        else
                          v67 = v68;
                      }
                      *(_BYTE *)(*a9
                      v48 = v80 + 1;
                      v96 += v74;
                      v47 = v77;
                      v49 = v65;
                    }
                    while (v80 + 1 != v82);
                  }
                  ++v47;
                  v46 = v76;
                }
                while (v47 != v35);
              }
              ++v46;
              i = v75;
            }
            while (v46 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
}

void sub_2068861B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(_QWORD *)(v20 - 176) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(_QWORD *)(v20 - 152) = v23;
    operator delete(v23);
  }
  v24 = *(void **)a20;
  if (*(_QWORD *)a20)
  {
    *(_QWORD *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<MIL::Fp16,signed char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, _QWORD *a9@<X8>, uint64_t a10, char a11)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  double v38;
  uint64_t v39;
  float v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _BOOL4 v58;
  float v59;
  float v60;
  long double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  MIL::Fp16 *v65;
  float v66;
  __int16 v67;
  const char *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  unint64_t j;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  __int16 v106;
  int __e[4];
  char v108[16];

  *(_QWORD *)v108 = *MEMORY[0x24BDAC8D0];
  v106 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v68 = "x_rank == o_shape.size()";
    v69 = 217;
    goto LABEL_71;
  }
  v20 = *a5;
  v21 = a5[1];
  v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    v68 = "kernel_sizes.size() == num_spatial_dims + 1";
    v69 = 218;
    goto LABEL_71;
  }
  v23 = *a6;
  v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    v68 = "strides.size() == num_spatial_dims + 1";
    v69 = 219;
    goto LABEL_71;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    v68 = "kernel_sizes.back() == strides.back()";
    v69 = 220;
LABEL_71:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v69, v68);
  }
  v25 = v19 - 2;
  v26 = 4 * v19;
  if (v19 == 5)
  {
    v27 = *(int *)(v20 + v26 - 20);
    v86 = *(int *)(v23 + v26 - 20);
    v28 = 2;
  }
  else
  {
    v28 = v19 - 3;
    v86 = 1;
    v27 = 1;
    v87 = 1;
    v92 = 1;
    v29 = 1;
    if (v25 <= 1)
      goto LABEL_9;
  }
  v30 = v26 - 16;
  v92 = *(int *)(v20 + v30);
  v29 = *(_DWORD *)(v23 + v30);
  v87 = v27;
LABEL_9:
  v97 = *(_DWORD *)(v20 + 4 * v25);
  v99 = *(int *)(v20 + 4 * v28);
  v98 = *(int *)(v23 + 4 * v28);
  v31 = *(int *)(v23 + 4 * v25);
  v103 = 0;
  v104 = 0;
  v105 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v103, v17, v18, v19);
  v100 = 0;
  v101 = 0;
  v102 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v100, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v19 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v103, (uint64_t)(v103 + 8), (char *)__e, v108, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v100, (uint64_t)(v100 + 8), (char *)__e, v108, 2);
  }
  else if (v19 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v103, v103 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v100, v100 + 8, __e);
  }
  v32 = *(_QWORD *)v100;
  v33 = *((_QWORD *)v100 + 1);
  v34 = *((_QWORD *)v100 + 2);
  v35 = *((_QWORD *)v100 + 3);
  v81 = *((_QWORD *)v100 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v106);
  v37 = v36;
  v38 = exp2(-(double)a7);
  if (v32)
  {
    v39 = 0;
    v40 = v38 * v37;
    v41 = v97;
    if (v97 <= 1)
      v41 = 1;
    v94 = v41;
    v42 = v98;
    if (v98 <= 1)
      v42 = 1;
    v82 = v42;
    v90 = v29;
    if ((unint64_t)v29 <= 1)
      v43 = 1;
    else
      v43 = v29;
    v77 = v43;
    v78 = v35;
    v72 = v32;
    v73 = v31;
    v70 = v34;
    v71 = v33;
    do
    {
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          if (v34)
          {
            v45 = 0;
            v84 = i * v86;
            v74 = i;
            do
            {
              if (v35)
              {
                v46 = 0;
                v89 = v45 * v90;
                v75 = v45;
                do
                {
                  if (v81)
                  {
                    v95 = 0;
                    v47 = 0;
                    v48 = v46 * v98;
                    v76 = v46;
                    v96 = v46 * v98;
                    do
                    {
                      v79 = v47;
                      v49 = *(_BYTE *)(a1
                      if (v86)
                      {
                        for (j = 0; j != v86; ++j)
                        {
                          if ((_DWORD)v90)
                          {
                            v50 = 0;
                            do
                            {
                              if ((_DWORD)v98)
                              {
                                v51 = 0;
                                v85 = v50;
                                do
                                {
                                  v52 = j;
                                  v91 = v51;
                                  if (j < v87)
                                  {
                                    do
                                    {
                                      v88 = v52;
                                      if (v50 < v92)
                                      {
                                        v53 = v52 + v84;
                                        do
                                        {
                                          v93 = v50;
                                          if (v51 < v99)
                                          {
                                            v54 = v50 + v89;
                                            do
                                            {
                                              if (v97)
                                              {
                                                v55 = v95;
                                                v56 = v94;
                                                do
                                                {
                                                  v57 = *(char *)(a1
                                                  v58 = v49 > v57;
                                                  if (a11)
                                                    v58 = v49 < v57;
                                                  if (v58)
                                                    v49 = v57;
                                                  ++v55;
                                                  --v56;
                                                }
                                                while (v56);
                                              }
                                              v51 += v98;
                                            }
                                            while (v51 < v99);
                                          }
                                          v51 = v91;
                                          v50 = v93 + v90;
                                        }
                                        while (v93 + v90 < v92);
                                      }
                                      v50 = v85;
                                      v52 = v88 + v86;
                                    }
                                    while (v88 + v86 < v87);
                                  }
                                  ++v51;
                                }
                                while (v51 != v82);
                              }
                              ++v50;
                              v35 = v78;
                              v48 = v96;
                            }
                            while (v50 != v77);
                          }
                        }
                      }
                      v59 = v40 * (float)v49;
                      v60 = 0.0;
                      if (v59 != 0.0)
                      {
                        __e[0] = 0;
                        v61 = frexp(v59, __e);
                        v62 = ldexp(v61, 11);
                        v60 = ldexp(round(v62), __e[0] - 11);
                      }
                      *(float *)__e = v60;
                      v34 = v70;
                      v63 = *(_QWORD *)(a10 + 24);
                      v32 = v72;
                      v31 = v73;
                      v33 = v71;
                      if (!v63)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v64 = v48;
                      v65 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v63 + 48))(v63, __e);
                      v67 = MIL::Fp16::FromFloat(v65, v66);
                      *(_WORD *)(*a9
                               + 2
                      v47 = v79 + 1;
                      v95 += v73;
                      v46 = v76;
                      v48 = v64;
                    }
                    while (v79 + 1 != v81);
                  }
                  ++v46;
                  v45 = v75;
                }
                while (v46 != v35);
              }
              ++v45;
              i = v74;
            }
            while (v45 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
}

void sub_206886844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(_QWORD *)(v20 - 176) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(_QWORD *)(v20 - 152) = v23;
    operator delete(v23);
  }
  v24 = *(void **)a20;
  if (*(_QWORD *)a20)
  {
    *(_QWORD *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<unsigned char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, char a11)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  double v38;
  uint64_t v39;
  double v40;
  int v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _BOOL4 v59;
  float v60;
  float v61;
  long double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  int v67;
  int v68;
  const char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  unint64_t j;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  __int16 v107;
  int __e[4];
  char v109[16];

  *(_QWORD *)v109 = *MEMORY[0x24BDAC8D0];
  v107 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v69 = "x_rank == o_shape.size()";
    v70 = 217;
    goto LABEL_80;
  }
  v20 = *a5;
  v21 = a5[1];
  v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    v69 = "kernel_sizes.size() == num_spatial_dims + 1";
    v70 = 218;
    goto LABEL_80;
  }
  v23 = *a6;
  v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    v69 = "strides.size() == num_spatial_dims + 1";
    v70 = 219;
    goto LABEL_80;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    v69 = "kernel_sizes.back() == strides.back()";
    v70 = 220;
LABEL_80:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v70, v69);
  }
  v25 = v19 - 2;
  v26 = 4 * v19;
  if (v19 == 5)
  {
    v27 = *(int *)(v20 + v26 - 20);
    v87 = *(int *)(v23 + v26 - 20);
    v28 = 2;
  }
  else
  {
    v28 = v19 - 3;
    v87 = 1;
    v27 = 1;
    v88 = 1;
    v93 = 1;
    v29 = 1;
    if (v25 <= 1)
      goto LABEL_11;
  }
  v30 = v26 - 16;
  v93 = *(int *)(v20 + v30);
  v29 = *(_DWORD *)(v23 + v30);
  v88 = v27;
LABEL_11:
  v98 = *(_DWORD *)(v20 + 4 * v25);
  v100 = *(int *)(v20 + 4 * v28);
  v99 = *(int *)(v23 + 4 * v28);
  v31 = *(int *)(v23 + 4 * v25);
  v104 = 0;
  v105 = 0;
  v106 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v104, v17, v18, v19);
  v101 = 0;
  v102 = 0;
  v103 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v101, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v19 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v104, (uint64_t)(v104 + 8), (char *)__e, v109, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v101, (uint64_t)(v101 + 8), (char *)__e, v109, 2);
  }
  else if (v19 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v104, v104 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v101, v101 + 8, __e);
  }
  v32 = *(_QWORD *)v101;
  v33 = *((_QWORD *)v101 + 1);
  v34 = *((_QWORD *)v101 + 2);
  v35 = *((_QWORD *)v101 + 3);
  v82 = *((_QWORD *)v101 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v107);
  v37 = v36;
  v38 = exp2(-(double)a7);
  if (v32)
  {
    v39 = 0;
    v40 = v38 * v37;
    v41 = v98;
    if (v98 <= 1)
      v41 = 1;
    v95 = v41;
    v42 = v99;
    if (v99 <= 1)
      v42 = 1;
    v83 = v42;
    v43 = v40;
    v91 = v29;
    if ((unint64_t)v29 <= 1)
      v44 = 1;
    else
      v44 = v29;
    v78 = v44;
    v79 = v35;
    v73 = v32;
    v74 = v31;
    v71 = v34;
    v72 = v33;
    do
    {
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          if (v34)
          {
            v46 = 0;
            v85 = i * v87;
            v75 = i;
            do
            {
              if (v35)
              {
                v47 = 0;
                v90 = v46 * v91;
                v76 = v46;
                do
                {
                  if (v82)
                  {
                    v96 = 0;
                    v48 = 0;
                    v49 = v47 * v99;
                    v77 = v47;
                    v97 = v47 * v99;
                    do
                    {
                      v80 = v48;
                      v50 = *(_BYTE *)(a1
                      if (v87)
                      {
                        for (j = 0; j != v87; ++j)
                        {
                          if ((_DWORD)v91)
                          {
                            v51 = 0;
                            do
                            {
                              if ((_DWORD)v99)
                              {
                                v52 = 0;
                                v86 = v51;
                                do
                                {
                                  v53 = j;
                                  v92 = v52;
                                  if (j < v88)
                                  {
                                    do
                                    {
                                      v89 = v53;
                                      if (v51 < v93)
                                      {
                                        v54 = v53 + v85;
                                        do
                                        {
                                          v94 = v51;
                                          if (v52 < v100)
                                          {
                                            v55 = v51 + v90;
                                            do
                                            {
                                              if (v98)
                                              {
                                                v56 = v96;
                                                v57 = v95;
                                                do
                                                {
                                                  v58 = *(char *)(a1
                                                  v59 = v50 > v58;
                                                  if (a11)
                                                    v59 = v50 < v58;
                                                  if (v59)
                                                    v50 = v58;
                                                  ++v56;
                                                  --v57;
                                                }
                                                while (v57);
                                              }
                                              v52 += v99;
                                            }
                                            while (v52 < v100);
                                          }
                                          v52 = v92;
                                          v51 = v94 + v91;
                                        }
                                        while (v94 + v91 < v93);
                                      }
                                      v51 = v86;
                                      v53 = v89 + v87;
                                    }
                                    while (v89 + v87 < v88);
                                  }
                                  ++v52;
                                }
                                while (v52 != v83);
                              }
                              ++v51;
                              v35 = v79;
                              v49 = v97;
                            }
                            while (v51 != v78);
                          }
                        }
                      }
                      v60 = v43 * (float)v50;
                      v61 = 0.0;
                      if (v60 != 0.0)
                      {
                        __e[0] = 0;
                        v62 = frexp(v60, __e);
                        v63 = ldexp(v62, 11);
                        v61 = ldexp(round(v63), __e[0] - 11);
                      }
                      *(float *)__e = v61;
                      v34 = v71;
                      v64 = *(_QWORD *)(a10 + 24);
                      v32 = v73;
                      v31 = v74;
                      v33 = v72;
                      if (!v64)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v65 = v49;
                      v66 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v64 + 48))(v64, __e);
                      if (v66 == INFINITY)
                      {
                        LOBYTE(v67) = -1;
                      }
                      else if (v66 == -INFINITY)
                      {
                        LOBYTE(v67) = 0;
                      }
                      else
                      {
                        v68 = llroundf(v66);
                        if (v68 >= 255)
                          v68 = 255;
                        v67 = v68 & ~(v68 >> 31);
                      }
                      *(_BYTE *)(*a9
                      v48 = v80 + 1;
                      v96 += v74;
                      v47 = v77;
                      v49 = v65;
                    }
                    while (v80 + 1 != v82);
                  }
                  ++v47;
                  v46 = v76;
                }
                while (v47 != v35);
              }
              ++v46;
              i = v75;
            }
            while (v46 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
}

void sub_206886F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(_QWORD *)(v20 - 176) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(_QWORD *)(v20 - 152) = v23;
    operator delete(v23);
  }
  v24 = *(void **)a20;
  if (*(_QWORD *)a20)
  {
    *(_QWORD *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<signed char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, char a11)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  double v38;
  uint64_t v39;
  double v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t i;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _BOOL4 v59;
  float v60;
  float v61;
  long double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  char v67;
  int v68;
  const char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  unint64_t j;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  __int16 v107;
  int __e[4];
  char v109[16];

  *(_QWORD *)v109 = *MEMORY[0x24BDAC8D0];
  v107 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v69 = "x_rank == o_shape.size()";
    v70 = 217;
    goto LABEL_82;
  }
  v20 = *a5;
  v21 = a5[1];
  v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    v69 = "kernel_sizes.size() == num_spatial_dims + 1";
    v70 = 218;
    goto LABEL_82;
  }
  v23 = *a6;
  v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    v69 = "strides.size() == num_spatial_dims + 1";
    v70 = 219;
    goto LABEL_82;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    v69 = "kernel_sizes.back() == strides.back()";
    v70 = 220;
LABEL_82:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v70, v69);
  }
  v25 = v19 - 2;
  v26 = 4 * v19;
  if (v19 == 5)
  {
    v27 = *(int *)(v20 + v26 - 20);
    v87 = *(int *)(v23 + v26 - 20);
    v28 = 2;
  }
  else
  {
    v28 = v19 - 3;
    v87 = 1;
    v27 = 1;
    v88 = 1;
    v93 = 1;
    v29 = 1;
    if (v25 <= 1)
      goto LABEL_11;
  }
  v30 = v26 - 16;
  v93 = *(int *)(v20 + v30);
  v29 = *(_DWORD *)(v23 + v30);
  v88 = v27;
LABEL_11:
  v98 = *(_DWORD *)(v20 + 4 * v25);
  v100 = *(int *)(v20 + 4 * v28);
  v99 = *(int *)(v23 + 4 * v28);
  v31 = *(int *)(v23 + 4 * v25);
  v104 = 0;
  v105 = 0;
  v106 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v104, v17, v18, v19);
  v101 = 0;
  v102 = 0;
  v103 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v101, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v19 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v104, (uint64_t)(v104 + 8), (char *)__e, v109, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v101, (uint64_t)(v101 + 8), (char *)__e, v109, 2);
  }
  else if (v19 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v104, v104 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v101, v101 + 8, __e);
  }
  v32 = *(_QWORD *)v101;
  v33 = *((_QWORD *)v101 + 1);
  v34 = *((_QWORD *)v101 + 2);
  v35 = *((_QWORD *)v101 + 3);
  v82 = *((_QWORD *)v101 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v107);
  v37 = v36;
  v38 = exp2(-(double)a7);
  if (v32)
  {
    v39 = 0;
    v40 = v38 * v37;
    v41 = v98;
    if (v98 <= 1)
      v41 = 1;
    v95 = v41;
    v42 = v99;
    if (v99 <= 1)
      v42 = 1;
    v83 = v42;
    v91 = v29;
    if ((unint64_t)v29 <= 1)
      v43 = 1;
    else
      v43 = v29;
    v78 = v43;
    v79 = v35;
    v44 = v40;
    v73 = v32;
    v74 = v31;
    v71 = v34;
    v72 = v33;
    do
    {
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          if (v34)
          {
            v46 = 0;
            v85 = i * v87;
            v75 = i;
            do
            {
              if (v35)
              {
                v47 = 0;
                v90 = v46 * v91;
                v76 = v46;
                do
                {
                  if (v82)
                  {
                    v96 = 0;
                    v48 = 0;
                    v49 = v47 * v99;
                    v77 = v47;
                    v97 = v47 * v99;
                    do
                    {
                      v80 = v48;
                      v50 = *(_BYTE *)(a1
                      if (v87)
                      {
                        for (j = 0; j != v87; ++j)
                        {
                          if ((_DWORD)v91)
                          {
                            v51 = 0;
                            do
                            {
                              if ((_DWORD)v99)
                              {
                                v52 = 0;
                                v86 = v51;
                                do
                                {
                                  v53 = j;
                                  v92 = v52;
                                  if (j < v88)
                                  {
                                    do
                                    {
                                      v89 = v53;
                                      if (v51 < v93)
                                      {
                                        v54 = v53 + v85;
                                        do
                                        {
                                          v94 = v51;
                                          if (v52 < v100)
                                          {
                                            v55 = v51 + v90;
                                            do
                                            {
                                              if (v98)
                                              {
                                                v56 = v96;
                                                v57 = v95;
                                                do
                                                {
                                                  v58 = *(char *)(a1
                                                  v59 = v50 > v58;
                                                  if (a11)
                                                    v59 = v50 < v58;
                                                  if (v59)
                                                    v50 = v58;
                                                  ++v56;
                                                  --v57;
                                                }
                                                while (v57);
                                              }
                                              v52 += v99;
                                            }
                                            while (v52 < v100);
                                          }
                                          v52 = v92;
                                          v51 = v94 + v91;
                                        }
                                        while (v94 + v91 < v93);
                                      }
                                      v51 = v86;
                                      v53 = v89 + v87;
                                    }
                                    while (v89 + v87 < v88);
                                  }
                                  ++v52;
                                }
                                while (v52 != v83);
                              }
                              ++v51;
                              v35 = v79;
                              v49 = v97;
                            }
                            while (v51 != v78);
                          }
                        }
                      }
                      v60 = v44 * (float)v50;
                      v61 = 0.0;
                      if (v60 != 0.0)
                      {
                        __e[0] = 0;
                        v62 = frexp(v60, __e);
                        v63 = ldexp(v62, 11);
                        v61 = ldexp(round(v63), __e[0] - 11);
                      }
                      *(float *)__e = v61;
                      v34 = v71;
                      v64 = *(_QWORD *)(a10 + 24);
                      v32 = v73;
                      v31 = v74;
                      v33 = v72;
                      if (!v64)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v65 = v49;
                      v66 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v64 + 48))(v64, __e);
                      if (v66 == INFINITY)
                      {
                        v67 = 127;
                      }
                      else if (v66 == -INFINITY)
                      {
                        v67 = 0x80;
                      }
                      else
                      {
                        v68 = llroundf(v66);
                        if (v68 >= 127)
                          v68 = 127;
                        if (v68 <= -128)
                          v67 = 0x80;
                        else
                          v67 = v68;
                      }
                      *(_BYTE *)(*a9
                      v48 = v80 + 1;
                      v96 += v74;
                      v47 = v77;
                      v49 = v65;
                    }
                    while (v80 + 1 != v82);
                  }
                  ++v47;
                  v46 = v76;
                }
                while (v47 != v35);
              }
              ++v46;
              i = v75;
            }
            while (v46 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
}

void sub_2068875FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(_QWORD *)(v20 - 176) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(_QWORD *)(v20 - 152) = v23;
    operator delete(v23);
  }
  v24 = *(void **)a20;
  if (*(_QWORD *)a20)
  {
    *(_QWORD *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MIL::Fp16>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<MIL::Fp16>::__append((char **)a1, a2 - v2);
  }
}

char *std::vector<unsigned long long>::insert(uint64_t a1, char *__src, _QWORD *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v15 >> 61)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v16 = (__src - v14) >> 3;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 2 > v15)
      v15 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[8 * v16];
    v23 = v22;
    v24 = &v19[8 * v18];
    std::__split_buffer<unsigned long long>::push_back(&__p, a3);
    v4 = std::vector<unsigned long long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v10 = __src + 8;
    v11 = v6 - 8;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v13;
      v12 += 8;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    *(_QWORD *)v4 = *a3;
  }
  return v4;
}

void sub_20688780C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ANEMachineIR::Interpreter::`anonymous namespace'::GetIndex(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1[1] - *a1 != 40)
  return a6
       + (a5
        + (a4 + *(_QWORD *)(*a1 + 16) * a3 + *(_QWORD *)(*a1 + 8) * a2 * *(_QWORD *)(*a1 + 16))
        * *(_QWORD *)(*a1 + 24))
       * *(_QWORD *)(*a1 + 32);
}

{
  if (a1[1] - *a1 != 40)
  return a6
       + (a5
        + (a4 + *(_QWORD *)(*a1 + 16) * a3 + *(_QWORD *)(*a1 + 8) * a2 * *(_QWORD *)(*a1 + 16))
        * *(_QWORD *)(*a1 + 24))
       * *(_QWORD *)(*a1 + 32);
}

{
  if (a1[1] - *a1 != 40)
  return a6
       + (a5
        + (a4 + *(_QWORD *)(*a1 + 16) * a3 + *(_QWORD *)(*a1 + 8) * a2 * *(_QWORD *)(*a1 + 16))
        * *(_QWORD *)(*a1 + 24))
       * *(_QWORD *)(*a1 + 32);
}

void std::vector<MIL::Fp16>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::__split_buffer<unsigned long long>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] = v4 + 8;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE77F0;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE77F0;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7880;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7880;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  MIL::Fp16 *Float;
  float v3;
  __int16 v5;

  v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0)
    v3 = 0.0;
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

_QWORD *std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_206887E98(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7900;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7900;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7980;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7980;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  MIL::Fp16 *Float;
  float v3;
  __int16 v5;

  v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0)
    v3 = 0.0;
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7A00;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7A00;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7A80;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7A80;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  MIL::Fp16 *Float;
  float v3;
  __int16 v5;

  v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0)
    v3 = 0.0;
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7B00;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7B00;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7B90;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7B90;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7C10;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7C10;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7C90;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7C90;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7D20;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7D20;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

_QWORD *std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_206888634(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7DA0;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7DA0;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7E20;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7E20;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7EA0;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7EA0;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE7F20;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE7F20;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::GetIndex()
{
  __assert_rtn("GetIndex", "NePoolCpu.cpp", 38, "shape5d.size() == 5");
}

{
  __assert_rtn("GetIndex", "PeReduceCpu.cpp", 53, "shape5d.size() == 5");
}

{
  __assert_rtn("GetIndex", "PePoolCpu.cpp", 39, "shape5d.size() == 5");
}

void MilTranslator::OpTranslator::TranslateConv(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ParameterValue;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ParameterType;
  uint64_t v12;
  ANEMachineIR::Utils *v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  std::string *p_p;
  char *v20;
  std::string __p;
  void *v22;
  char v23;
  _QWORD v24[3];
  std::string __str;
  std::vector<int> v26;
  std::string v27;
  std::string v28;
  std::string v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  void **v35;

  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "groups");
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue)
    && (v7 = (int *)MEMORY[0x20BCFEEC4]()) != 0)
  {
    v8 = *v7;
  }
  else
  {
    v8 = 1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
  MilTranslator::WeightTranslator::TargetProgramConstOpName((uint64_t)this + 144, (uint64_t)a2, (uint64_t)&__p, 0, v8, (uint64_t)v33, &v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v30)
  {
    *(_DWORD *)a3 = v30;
    *(_OWORD *)(a3 + 8) = v31;
    *(_QWORD *)(a3 + 24) = v32;
    v31 = 0uLL;
    v32 = 0;
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  v9 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, _QWORD))(*(_QWORD *)a2 + 120))(a2, &__p, 0);
  v10 = v9;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9)
      goto LABEL_19;
LABEL_25:
    *(_DWORD *)a3 = 4;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Conv does not handle immediate value inputs for x");
    goto LABEL_12;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v10)
    goto LABEL_25;
LABEL_19:
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  ParameterType = MIL::IROperation::GetParameterType();
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterType + 24))(ParameterType);
  v13 = (ANEMachineIR::Utils *)v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v13)
      goto LABEL_21;
LABEL_27:
    *(_DWORD *)a3 = 8;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Conv input not a tensor");
    goto LABEL_12;
  }
  if (!v12)
    goto LABEL_27;
LABEL_21:
  MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, v10, v13, &v29);
  (*(void (**)(std::string *__return_ptr, const MIL::IROperation *))(*(_QWORD *)a2 + 200))(&__p, a2);
  if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (*(char *)(__p.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)__p.__r_.__value_.__l.__data_, *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    v14 = *(_OWORD *)__p.__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v14;
  }
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  v15 = (_QWORD *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)v13 + 96))(v13);
  v16 = (uint64_t)(v15[1] - *v15) >> 3;
  MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, (uint64_t)&v28, v16, (uint64_t)&v27);
  MilTranslator::OpTranslator::GetTransposeOpParamPerm(v16, (uint64_t)&v27, &v26);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    __str = v28;
  if (MilTranslator::OpTranslator::IsTransposeRequired(&v26))
  {
    (*(void (**)(_QWORD *__return_ptr, const MIL::IROperation *))(*(_QWORD *)a2 + 200))(v24, a2);
    v17 = (char *)v24[0];
    if (v24[1] == v24[0])
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    if (*(char *)(v24[0] + 23) >= 0)
      v18 = *(unsigned __int8 *)(v24[0] + 23);
    else
      v18 = *(_QWORD *)(v24[0] + 8);
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v18 + 13);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v18)
    {
      if (v17[23] >= 0)
        v20 = v17;
      else
        v20 = *(char **)v17;
      memmove(p_p, v20, v18);
    }
    strcpy((char *)p_p + v18, "_channel_last");
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = __p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v35 = (void **)v24;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v35);
    std::string::operator=(&v27, &__str);
    std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&__p, (__int128 *)&v28, (__int128 *)&v27);
    std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>((uint64_t)this + 296, (unsigned __int8 *)&__p, (__int128 *)&__p);
    if (v23 < 0)
      operator delete(v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v26.__begin_)
  {
    v26.__end_ = v26.__begin_;
    operator delete(v26.__begin_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
LABEL_12:
  if (SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
}

void sub_206888D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (__p)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a43 < 0)
    operator delete(a38);
  if (*(char *)(v43 - 137) < 0)
    operator delete(*(void **)(v43 - 160));
  if (*(char *)(v43 - 105) < 0)
    operator delete(*(void **)(v43 - 128));
  if (*(char *)(v43 - 81) < 0)
    operator delete(*(void **)(v43 - 104));
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ANEMachineIR::GetScalarValueOrDefault<int>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t ParameterValue;
  unsigned int *v7;
  int v8;

  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (!ParameterValue)
  {
    if (!a4)
      return a3;
    v8 = 1;
LABEL_11:
    *a4 = v8;
    return a3;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue)
    || (v7 = (unsigned int *)MEMORY[0x20BCFEEC4]()) == 0)
  {
    if (!a4)
      return a3;
    v8 = 2;
    goto LABEL_11;
  }
  if (a4)
    *a4 = 0;
  return *v7;
}

void MilTranslator::`anonymous namespace'::TranslateConvOp(MIL::IROperation *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t ParameterType;
  uint64_t v8;
  uint64_t OutputType;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  char *v18;
  int v19;
  uint64_t ParameterValue;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  MIL::IRValue *v30;
  int v31;
  std::string::size_type v32;
  unint64_t i;
  _WORD *v34;
  _WORD *v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int16 v43;
  std::vector<int>::size_type v44;
  MIL::IRValue *v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  char *v50;
  _DWORD *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  std::vector<int>::size_type v60;
  MIL::IRValue *v61;
  unint64_t v62;
  unint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  char *v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  int ScalarValueOr;
  std::string::size_type v77;
  unint64_t j;
  unint64_t v79;
  std::string::size_type v80;
  char *v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t k;
  unint64_t v91;
  _QWORD *v92;
  char *v93;
  char *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  std::string *v102;
  __int128 v103;
  void *v104;
  MIL::IRValueType *v105;
  uint64_t v106;
  uint64_t LocationPtr;
  std::__shared_weak_count *v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  char *v144;
  unint64_t v145;
  unsigned int v146;
  unint64_t v147;
  uint64_t v148;
  MIL::IRValue *v149;
  void *v150;
  unint64_t v151;
  _DWORD *v152;
  _WORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  std::string v162;
  void *v163;
  _BYTE *v164;
  int v165;
  void *v166[2];
  std::string::size_type v167;
  std::string v168;
  void *v169;
  _WORD *v170;
  unint64_t v171;
  void *v172;
  char *v173;
  char *v174;
  void *v175;
  char *v176;
  char *v177;
  int v178;
  __int128 __p;
  uint64_t v180;
  std::__shared_weak_count *v181;
  std::string v182;
  std::__shared_weak_count *v183;
  void *v184;
  void *v185;
  uint64_t v186;
  void *v187;
  char v188;
  std::__shared_weak_count *v189;
  std::string v190;
  std::__shared_weak_count *v191;
  void *v192;
  void *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  void *v196;
  void *v197;
  uint64_t v198;
  void *v199;
  unint64_t v200;
  char v201;
  std::__shared_weak_count *v202;
  void *Data;
  unint64_t v204;
  char v205;
  std::__shared_weak_count *v206;
  std::string v207;
  std::vector<int>::value_type __u[2];
  char v209;
  std::__shared_weak_count *v210;
  std::string v211;
  std::__shared_weak_count *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  std::__shared_weak_count *v215;
  _QWORD *v216;
  _BYTE *v217;
  uint64_t v218;
  unint64_t v219;
  std::string::size_type v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  std::vector<int> v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;

  v228 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v219, "x");
  ParameterType = MIL::IROperation::TryGetParameterType();
  if (SHIBYTE(v221) < 0)
    operator delete((void *)v219);
  std::string::basic_string[abi:ne180100]<0>(&v219, "weight");
  v8 = MIL::IROperation::TryGetParameterType();
  if (SHIBYTE(v221) < 0)
    operator delete((void *)v219);
  OutputType = MIL::IROperation::GetOutputType(a1);
  v10 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterType + 24))(ParameterType);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)OutputType + 24))(OutputType);
  if (v10 && v11 && (v13 = v12) != 0)
  {
    (*(void (**)(void *))(*(_QWORD *)v10 + 88))(v10);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13);
    v15 = 0;
    v219 = (unint64_t)v10;
    v220 = v11;
    v221 = v13;
    while (1)
    {
      v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)((char *)&v219 + v15) + 88))(*(unint64_t *)((char *)&v219 + v15));
      if (v16 != 4)
        break;
      v15 += 8;
      if (v15 == 24)
      {
        v178 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_2069A5097);
        goto LABEL_20;
      }
    }
    if (v16 == 9 || v16 == 14)
    {
      v18 = "ios opset does not yet have quantized conv.";
      v19 = 4;
    }
    else
    {
      v18 = "Conv input, weights, and output must be supported dtype.";
      v19 = 11;
    }
    v178 = v19;
    std::string::basic_string[abi:ne180100]<0>(&__p, v18);
  }
  else
  {
    v178 = 11;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Conv input, weights, and output must be tensors.");
    v14 = 0;
  }
LABEL_20:
  if (v178)
  {
    *(_DWORD *)a5 = v178;
    *(_OWORD *)(a5 + 8) = __p;
    *(_QWORD *)(a5 + 24) = v180;
    __p = 0uLL;
    v180 = 0;
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(&v219, "weight");
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  v21 = ParameterValue;
  if ((SHIBYTE(v221) & 0x80000000) == 0)
  {
    if (ParameterValue)
      goto LABEL_27;
LABEL_173:
    *(_DWORD *)a5 = 4;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a5 + 8), "Dynamic weight translation not implemented for conv.");
    goto LABEL_22;
  }
  operator delete((void *)v219);
  if (!v21)
    goto LABEL_173;
LABEL_27:
  memset(&v225, 0, sizeof(v225));
  v224 = 0u;
  v223 = 0u;
  v222 = 0u;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  memset(&v168, 0, sizeof(v168));
  MEMORY[0x20BCFEFFC](&v168, "zero");
  std::string::basic_string[abi:ne180100]<0>(&v162, "x");
  v22 = MIL::IROperation::TryGetParameterType();
  v23 = v22;
  if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v22)
      goto LABEL_29;
LABEL_175:
    v165 = 11;
    std::string::basic_string[abi:ne180100]<0>(&v162, "Cannot get value type for ");
    v102 = std::string::append(&v162, "x");
    goto LABEL_186;
  }
  operator delete(v162.__r_.__value_.__l.__data_);
  if (!v23)
    goto LABEL_175;
LABEL_29:
  v156 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
  if (v156)
  {
    std::string::basic_string[abi:ne180100]<0>(&v162, "strides");
    v24 = MIL::IROperation::TryGetParameterType();
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    if (v24)
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
      if (v25)
      {
        std::string::basic_string[abi:ne180100]<0>(&v162, "dilations");
        v26 = MIL::IROperation::TryGetParameterType();
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v162.__r_.__value_.__l.__data_);
        if (v26)
        {
          v155 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
          if (v155)
          {
            std::string::basic_string[abi:ne180100]<0>(&v162, "weight");
            v27 = MIL::IROperation::TryGetParameterType();
            if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v162.__r_.__value_.__l.__data_);
            if (v27)
            {
              v154 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
              if (v154)
              {
                std::string::basic_string[abi:ne180100]<0>(&v162, "bias");
                v28 = MIL::IROperation::TryGetParameterType();
                if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v162.__r_.__value_.__l.__data_);
                if (v28 && (v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28)) == 0)
                {
                  v165 = 11;
                  std::string::basic_string[abi:ne180100]<0>(&v162, "Cannot get type as tensor for ");
                  v102 = std::string::append(&v162, "bias");
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(&v162, "pad");
                  v29 = MIL::IROperation::TryGetParameterType();
                  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v162.__r_.__value_.__l.__data_);
                  if (v29)
                  {
                    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29))
                    {
                      v226 = 0;
                      if (!v28)
                        goto LABEL_76;
                      v226 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
                      std::string::basic_string[abi:ne180100]<0>(&v162, "bias");
                      v30 = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue();
                      if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v162.__r_.__value_.__l.__data_);
                      if (v30)
                      {
                        MIL::IRValue::AsTensor(v30);
                        std::vector<MIL::Fp16>::reserve(&v169, v226);
                        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 88))(v28);
                        if (v31 == 5)
                        {
                          v165 = 11;
                          v144 = "Fp32 precision (for bias) not supported by ANE.";
                        }
                        else
                        {
                          if (v31 == 4)
                          {
                            v162.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                            v162.__r_.__value_.__l.__size_ = v32;
                            if (v226)
                            {
                              for (i = 0; i < v226; ++i)
                              {
                                v153 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v162, i);
                                v34 = v170;
                                if ((unint64_t)v170 >= v171)
                                {
                                  v36 = v169;
                                  v37 = (char *)v170 - (_BYTE *)v169;
                                  if ((char *)v170 - (_BYTE *)v169 <= -3)
                                    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                                  v38 = v37 >> 1;
                                  if (v171 - (unint64_t)v169 <= (v37 >> 1) + 1)
                                    v39 = v38 + 1;
                                  else
                                    v39 = v171 - (_QWORD)v169;
                                  if (v171 - (unint64_t)v169 >= 0x7FFFFFFFFFFFFFFELL)
                                    v40 = 0x7FFFFFFFFFFFFFFFLL;
                                  else
                                    v40 = v39;
                                  if (v40)
                                  {
                                    v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v171, v40);
                                    v36 = v169;
                                    v34 = v170;
                                  }
                                  else
                                  {
                                    v41 = 0;
                                  }
                                  v42 = &v41[2 * v38];
                                  *(_WORD *)v42 = *v153;
                                  v35 = v42 + 2;
                                  while (v34 != v36)
                                  {
                                    v43 = *--v34;
                                    *((_WORD *)v42 - 1) = v43;
                                    v42 -= 2;
                                  }
                                  v169 = v42;
                                  v170 = v35;
                                  v171 = (unint64_t)&v41[2 * v40];
                                  if (v36)
                                    operator delete(v36);
                                }
                                else
                                {
                                  *v170 = *v153;
                                  v35 = v34 + 1;
                                }
                                v170 = v35;
                              }
                            }
LABEL_76:
                            v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
                            std::vector<int>::reserve((std::vector<int> *)&v222, v44);
                            std::string::basic_string[abi:ne180100]<0>(&v162, "strides");
                            v45 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
                            MIL::IRValue::AsTensor(v45);
                            Data = (void *)MIL::IRTensorValue::GetDataView<int>();
                            v204 = v46;
                            if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(v162.__r_.__value_.__l.__data_);
                              v46 = v204;
                            }
                            if (v46)
                            {
                              v47 = 0;
                              do
                              {
                                v48 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&Data, v47);
                                v49 = v48;
                                v50 = (char *)*((_QWORD *)&v222 + 1);
                                if (*((_QWORD *)&v222 + 1) >= (unint64_t)v223)
                                {
                                  v52 = (char *)v222;
                                  v53 = (uint64_t)(*((_QWORD *)&v222 + 1) - v222) >> 2;
                                  v54 = v53 + 1;
                                  if ((unint64_t)(v53 + 1) >> 62)
LABEL_359:
                                    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                                  v55 = v223 - v222;
                                  if ((uint64_t)(v223 - v222) >> 1 > v54)
                                    v54 = v55 >> 1;
                                  if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v56 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v56 = v54;
                                  if (v56)
                                  {
                                    v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v223, v56);
                                    v50 = (char *)*((_QWORD *)&v222 + 1);
                                    v52 = (char *)v222;
                                  }
                                  else
                                  {
                                    v57 = 0;
                                  }
                                  v58 = &v57[4 * v53];
                                  *(_DWORD *)v58 = *v49;
                                  v51 = v58 + 4;
                                  while (v50 != v52)
                                  {
                                    v59 = *((_DWORD *)v50 - 1);
                                    v50 -= 4;
                                    *((_DWORD *)v58 - 1) = v59;
                                    v58 -= 4;
                                  }
                                  *(_QWORD *)&v222 = v58;
                                  *((_QWORD *)&v222 + 1) = v51;
                                  *(_QWORD *)&v223 = &v57[4 * v56];
                                  if (v52)
                                    operator delete(v52);
                                }
                                else
                                {
                                  **((_DWORD **)&v222 + 1) = *v48;
                                  v51 = v50 + 4;
                                }
                                *((_QWORD *)&v222 + 1) = v51;
                                ++v47;
                              }
                              while (v204 > v47);
                            }
                            v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 16))(v155);
                            std::vector<int>::reserve((std::vector<int> *)((char *)&v223 + 8), v60);
                            std::string::basic_string[abi:ne180100]<0>(&v162, "dilations");
                            v61 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
                            MIL::IRValue::AsTensor(v61);
                            v199 = (void *)MIL::IRTensorValue::GetDataView<int>();
                            v200 = v62;
                            if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(v162.__r_.__value_.__l.__data_);
                              v62 = v200;
                            }
                            if (v62)
                            {
                              v63 = 0;
                              do
                              {
                                v64 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v199, v63);
                                v65 = v64;
                                v66 = (char *)v224;
                                if ((unint64_t)v224 >= *((_QWORD *)&v224 + 1))
                                {
                                  v68 = (char *)*((_QWORD *)&v223 + 1);
                                  v69 = (uint64_t)(v224 - *((_QWORD *)&v223 + 1)) >> 2;
                                  v70 = v69 + 1;
                                  if ((unint64_t)(v69 + 1) >> 62)
                                    goto LABEL_359;
                                  v71 = *((_QWORD *)&v224 + 1) - *((_QWORD *)&v223 + 1);
                                  if ((uint64_t)(*((_QWORD *)&v224 + 1) - *((_QWORD *)&v223 + 1)) >> 1 > v70)
                                    v70 = v71 >> 1;
                                  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v72 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v72 = v70;
                                  if (v72)
                                  {
                                    v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v224 + 8, v72);
                                    v68 = (char *)*((_QWORD *)&v223 + 1);
                                    v66 = (char *)v224;
                                  }
                                  else
                                  {
                                    v73 = 0;
                                  }
                                  v74 = &v73[4 * v69];
                                  *(_DWORD *)v74 = *v65;
                                  v67 = v74 + 4;
                                  while (v66 != v68)
                                  {
                                    v75 = *((_DWORD *)v66 - 1);
                                    v66 -= 4;
                                    *((_DWORD *)v74 - 1) = v75;
                                    v74 -= 4;
                                  }
                                  *((_QWORD *)&v223 + 1) = v74;
                                  *(_QWORD *)&v224 = v67;
                                  *((_QWORD *)&v224 + 1) = &v73[4 * v72];
                                  if (v68)
                                    operator delete(v68);
                                }
                                else
                                {
                                  *(_DWORD *)v224 = *v64;
                                  v67 = v66 + 4;
                                }
                                *(_QWORD *)&v224 = v67;
                                ++v63;
                              }
                              while (v200 > v63);
                            }
                            memset(&v162, 0, sizeof(v162));
                            if ((ANEMachineIR::Utils::TryGetStaticTensorShape(v154, (uint64_t)&v162) & 1) == 0)
                            {
                              v165 = 11;
                              std::string::basic_string[abi:ne180100]<0>(v166, "weights must have static shape.");
LABEL_356:
                              v104 = (void *)v162.__r_.__value_.__r.__words[0];
                              if (!v162.__r_.__value_.__r.__words[0])
                                goto LABEL_189;
                              v162.__r_.__value_.__l.__size_ = v162.__r_.__value_.__r.__words[0];
                              goto LABEL_188;
                            }
                            v216 = 0;
                            v217 = 0;
                            v218 = 0;
                            if ((ANEMachineIR::Utils::TryGetStaticTensorShape(v156, (uint64_t)&v216) & 1) == 0)
                            {
                              v165 = 11;
                              std::string::basic_string[abi:ne180100]<0>(v166, "x must have static shape.");
LABEL_354:
                              if (v216)
                              {
                                v217 = v216;
                                operator delete(v216);
                              }
                              goto LABEL_356;
                            }
                            std::vector<unsigned long long>::reserve(&v172, ((uint64_t)(v162.__r_.__value_.__l.__size_ - v162.__r_.__value_.__r.__words[0]) >> 3) + 1);
                            std::string::basic_string[abi:ne180100]<0>(&v211, "groups");
                            ScalarValueOr = MIL::ANEMachineIR::GetScalarValueOrDefault<int>((uint64_t)a1, (uint64_t)&v211, 1, 0);
                            v77 = ScalarValueOr;
                            v220 = ScalarValueOr;
                            if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(v211.__r_.__value_.__l.__data_);
                              v77 = v220;
                            }
                            v219 = ((uint64_t)(v162.__r_.__value_.__l.__size_ - v162.__r_.__value_.__r.__words[0]) >> 3)
                                 - 2;
                            LOBYTE(v221) = 0;
                            v211.__r_.__value_.__r.__words[0] = v77;
                            std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v172, &v211);
                            if (v219)
                            {
                              for (j = 0; j < v219; ++j)
                              {
                                v79 = j + 2;
                                v80 = v162.__r_.__value_.__r.__words[0];
                                if (j + 2 >= (uint64_t)(v162.__r_.__value_.__l.__size_
                                                      - v162.__r_.__value_.__r.__words[0]) >> 3)
                                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                                v81 = v173;
                                if (v173 >= v174)
                                {
                                  v83 = (char *)v172;
                                  v157 = (v173 - (_BYTE *)v172) >> 3;
                                  v84 = v157 + 1;
                                  if ((unint64_t)(v157 + 1) >> 61)
                                    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                                  v85 = v174 - (_BYTE *)v172;
                                  if ((v174 - (_BYTE *)v172) >> 2 > v84)
                                    v84 = v85 >> 2;
                                  if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
                                    v86 = 0x1FFFFFFFFFFFFFFFLL;
                                  else
                                    v86 = v84;
                                  if (v86)
                                  {
                                    v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v174, v86);
                                    v83 = (char *)v172;
                                    v81 = v173;
                                  }
                                  else
                                  {
                                    v87 = 0;
                                  }
                                  v88 = &v87[8 * v157];
                                  *(_QWORD *)v88 = *(_QWORD *)(v80 + 8 * v79);
                                  v82 = v88 + 8;
                                  while (v81 != v83)
                                  {
                                    v89 = *((_QWORD *)v81 - 1);
                                    v81 -= 8;
                                    *((_QWORD *)v88 - 1) = v89;
                                    v88 -= 8;
                                  }
                                  v172 = v88;
                                  v173 = v82;
                                  v174 = &v87[8 * v86];
                                  if (v83)
                                    operator delete(v83);
                                }
                                else
                                {
                                  *(_QWORD *)v173 = *(_QWORD *)(v162.__r_.__value_.__r.__words[0] + 8 * v79);
                                  v82 = v81 + 8;
                                }
                                v173 = v82;
                              }
                            }
                            if (v162.__r_.__value_.__l.__size_ - v162.__r_.__value_.__r.__words[0] <= 8)
                              goto LABEL_369;
                            std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v172, (_QWORD *)(v162.__r_.__value_.__r.__words[0] + 8));
                            if (v162.__r_.__value_.__l.__size_ == v162.__r_.__value_.__r.__words[0])
                              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                            v211.__r_.__value_.__r.__words[0] = *(_QWORD *)v162.__r_.__value_.__l.__data_ / v220;
                            std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v172, &v211);
                            v227 = 0;
                            std::vector<unsigned long long>::reserve(&v175, (v217 - (_BYTE *)v216) >> 3);
                            if (v217 == (_BYTE *)v216)
                              goto LABEL_369;
                            std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v175, v216);
                            if (v219)
                            {
                              for (k = 0; k < v219; ++k)
                              {
                                v91 = k + 2;
                                v92 = v216;
                                if (k + 2 >= (v217 - (_BYTE *)v216) >> 3)
                                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                                v93 = v176;
                                if (v176 >= v177)
                                {
                                  v95 = (char *)v175;
                                  v158 = (v176 - (_BYTE *)v175) >> 3;
                                  v96 = v158 + 1;
                                  if ((unint64_t)(v158 + 1) >> 61)
                                    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                                  v97 = v177 - (_BYTE *)v175;
                                  if ((v177 - (_BYTE *)v175) >> 2 > v96)
                                    v96 = v97 >> 2;
                                  if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
                                    v98 = 0x1FFFFFFFFFFFFFFFLL;
                                  else
                                    v98 = v96;
                                  if (v98)
                                  {
                                    v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v177, v98);
                                    v95 = (char *)v175;
                                    v93 = v176;
                                  }
                                  else
                                  {
                                    v99 = 0;
                                  }
                                  v100 = &v99[8 * v158];
                                  *(_QWORD *)v100 = v92[v91];
                                  v94 = v100 + 8;
                                  while (v93 != v95)
                                  {
                                    v101 = *((_QWORD *)v93 - 1);
                                    v93 -= 8;
                                    *((_QWORD *)v100 - 1) = v101;
                                    v100 -= 8;
                                  }
                                  v175 = v100;
                                  v176 = v94;
                                  v177 = &v99[8 * v98];
                                  if (v95)
                                    operator delete(v95);
                                }
                                else
                                {
                                  *(_QWORD *)v176 = v216[v91];
                                  v94 = v93 + 8;
                                }
                                v176 = v94;
                              }
                            }
                            if ((unint64_t)(v217 - (_BYTE *)v216) <= 8)
LABEL_369:
                              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                            std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v175, v216 + 1);
                            *(_WORD *)((char *)&v221 + 1) = 0;
                            std::string::basic_string[abi:ne180100]<0>(__u, "pad_type");
                            std::string::basic_string[abi:ne180100]<0>(&v207, "custom");
                            MIL::ANEMachineIR::GetScalarValueOrDefault<std::string>((uint64_t)&v207, 0, &v211);
                            if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v207.__r_.__value_.__l.__data_);
                            if (v209 < 0)
                              operator delete(*(void **)__u);
                            std::vector<int>::reserve(&v225, 2 * v219);
                            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v211, "valid"))
                            {
                              __u[0] = 0;
                              std::vector<int>::assign(&v225, 2 * v219, __u);
                            }
                            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v211, "same"))
                            {
                              if ((v219 & 0x7FFFFFFFFFFFFFFFLL) != 0)
                              {
                                v145 = 0;
                                do
                                {
                                  v146 = v145 >> 1;
                                  v147 = (v145 >> 1) + 1;
                                  if (v147 >= (v173 - (_BYTE *)v172) >> 3)
                                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                                  v148 = *((_QWORD *)v172 + v147);
                                  if ((v145 & 1) != 0)
                                  {
                                    __u[0] = 0;
                                    if (v146 >= (unint64_t)((uint64_t)(v224 - *((_QWORD *)&v223 + 1)) >> 2))
                                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                                  }
                                  else
                                  {
                                    __u[0] = 0;
                                    if (v146 >= (unint64_t)((uint64_t)(v224 - *((_QWORD *)&v223 + 1)) >> 2))
                                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                                  }
                                  __u[0] = (unint64_t)((v148 - 1) * *(int *)(*((_QWORD *)&v223 + 1) + 4 * v146)
                                                            + 1) >> 1;
                                  std::vector<int>::push_back[abi:ne180100]((uint64_t)&v225, __u);
                                  ++v145;
                                }
                                while (v145 < 2 * v219);
                              }
                            }
                            else
                            {
                              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v211, "custom"))
                              {
                                v165 = 11;
                                std::operator+<char>();
LABEL_352:
                                if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v211.__r_.__value_.__l.__data_);
                                goto LABEL_354;
                              }
                              std::string::basic_string[abi:ne180100]<0>(__u, "pad");
                              v149 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
                              MIL::IRValue::AsTensor(v149);
                              v196 = (void *)MIL::IRTensorValue::GetDataView<int>();
                              v197 = v150;
                              if (v209 < 0)
                                operator delete(*(void **)__u);
                              if ((v219 & 0x7FFFFFFFFFFFFFFFLL) != 0)
                              {
                                v151 = 0;
                                do
                                {
                                  v152 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v196, v151);
                                  std::vector<int>::push_back[abi:ne180100]((uint64_t)&v225, v152);
                                  ++v151;
                                }
                                while (v151 < 2 * v219);
                              }
                            }
                            v165 = 0;
                            std::string::basic_string[abi:ne180100]<0>(v166, (char *)&unk_2069A5097);
                            goto LABEL_352;
                          }
                          v165 = 11;
                          v144 = "Unhandled dtype for conv bias.";
                        }
                      }
                      else
                      {
                        v165 = 4;
                        v144 = "Non constant bias vectors not yet implemented.";
                      }
                      std::string::basic_string[abi:ne180100]<0>(v166, v144);
                      goto LABEL_189;
                    }
                    v165 = 11;
                    std::string::basic_string[abi:ne180100]<0>(&v162, "Cannot get type as tensor for ");
                    v102 = std::string::append(&v162, "pad");
                  }
                  else
                  {
                    v165 = 11;
                    std::string::basic_string[abi:ne180100]<0>(&v162, "Cannot get value type for ");
                    v102 = std::string::append(&v162, "pad");
                  }
                }
              }
              else
              {
                v165 = 11;
                std::string::basic_string[abi:ne180100]<0>(&v162, "Cannot get type as tensor for ");
                v102 = std::string::append(&v162, "kernel");
              }
            }
            else
            {
              v165 = 11;
              std::string::basic_string[abi:ne180100]<0>(&v162, "Cannot get value type for ");
              v102 = std::string::append(&v162, "kernel");
            }
          }
          else
          {
            v165 = 11;
            std::string::basic_string[abi:ne180100]<0>(&v162, "Cannot get type as tensor for ");
            v102 = std::string::append(&v162, "dilations");
          }
        }
        else
        {
          v165 = 11;
          std::string::basic_string[abi:ne180100]<0>(&v162, "Cannot get value type for ");
          v102 = std::string::append(&v162, "dilations");
        }
      }
      else
      {
        v165 = 11;
        std::string::basic_string[abi:ne180100]<0>(&v162, "Cannot get type as tensor for ");
        v102 = std::string::append(&v162, "strides");
      }
    }
    else
    {
      v165 = 11;
      std::string::basic_string[abi:ne180100]<0>(&v162, "Cannot get value type for ");
      v102 = std::string::append(&v162, "strides");
    }
  }
  else
  {
    v165 = 11;
    std::string::basic_string[abi:ne180100]<0>(&v162, "Cannot get type as tensor for ");
    v102 = std::string::append(&v162, "x");
  }
LABEL_186:
  v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  v167 = v102->__r_.__value_.__r.__words[2];
  *(_OWORD *)v166 = v103;
  v102->__r_.__value_.__l.__size_ = 0;
  v102->__r_.__value_.__r.__words[2] = 0;
  v102->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
  {
    v104 = (void *)v162.__r_.__value_.__r.__words[0];
LABEL_188:
    operator delete(v104);
  }
LABEL_189:
  if (v165)
  {
    *(_DWORD *)a5 = v165;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)v166;
    *(_QWORD *)(a5 + 24) = v167;
  }
  else
  {
    ANEMachineIR::Validators::InferOutputShape((uint64_t)&v175, (uint64_t *)&v172, (uint64_t)&v219, &v163);
    if (!v226)
      goto LABEL_195;
    std::string::basic_string[abi:ne180100]<0>(&v162, "bias");
    v105 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    v106 = MIL::IRValueType::AsTensorType(v105);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v106 + 88))(v106) != 4)
    {
      *(_DWORD *)a5 = 4;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a5 + 8), "Biases not matching the input type (fp16) are not implemented or expected from the iOS opset.");
    }
    else
    {
LABEL_195:
      LocationPtr = MIL::IRObject::GetLocationPtr(a1);
      ANEMachineIR::Validators::ValidateConvParameters(LocationPtr, (uint64_t *)&v175, (uint64_t *)&v172, v14, (uint64_t *)&v163, (uint64_t)&v219, (uint64_t)&v162);
      if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v162) & 1) != 0)
      {
        MIL::IRObject::GetLocationPtr(a1);
        v216 = 0;
        v217 = 0;
        v218 = 0;
        std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v216, v163, (uint64_t)v164, (v164 - (_BYTE *)v163) >> 3);
        MIL::IRTensorValueType::Make();
        if (v216)
        {
          v217 = v216;
          operator delete(v216);
        }
        std::string::basic_string[abi:ne180100]<0>(&v216, "ne_conv");
        v214 = 0;
        v213 = 0;
        MIL::Builder::BlockBuilder::AddOperation();
        v108 = v214;
        if (v214)
        {
          p_shared_owners = (unint64_t *)&v214->__shared_owners_;
          do
            v110 = __ldaxr(p_shared_owners);
          while (__stlxr(v110 - 1, p_shared_owners));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        if (SHIBYTE(v218) < 0)
          operator delete(v216);
        std::string::basic_string[abi:ne180100]<0>(&v216, "x");
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v211 = *(std::string *)a2;
        MIL::Builder::OperationBuilder::AddInput();
        v111 = v212;
        if (v212)
        {
          v112 = (unint64_t *)&v212->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v211.__r_.__value_.__l.__data_);
        if (SHIBYTE(v218) < 0)
          operator delete(v216);
        std::string::basic_string[abi:ne180100]<0>(__u, "dense_kernel");
        if (*(char *)(a3 + 23) < 0)
          std::string::__init_copy_ctor_external(&v207, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
        else
          v207 = *(std::string *)a3;
        MIL::Builder::OperationBuilder::AddInput();
        v114 = v210;
        if (v210)
        {
          v115 = (unint64_t *)&v210->__shared_owners_;
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v207.__r_.__value_.__l.__data_);
        if (v209 < 0)
          operator delete(*(void **)__u);
        std::string::basic_string[abi:ne180100]<0>(&Data, "num_groups");
        MIL::Builder::OperationBuilder::AddInputInt32();
        v117 = v206;
        if (v206)
        {
          v118 = (unint64_t *)&v206->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
        if (v205 < 0)
          operator delete(Data);
        std::string::basic_string[abi:ne180100]<0>(&v199, "strides");
        v197 = 0;
        v196 = 0;
        v198 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v196, (const void *)v222, *((uint64_t *)&v222 + 1), (uint64_t)(*((_QWORD *)&v222 + 1) - v222) >> 2);
        MIL::Builder::OperationBuilder::AddInputInt32();
        v120 = v202;
        if (v202)
        {
          v121 = (unint64_t *)&v202->__shared_owners_;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
        }
        if (v196)
        {
          v197 = v196;
          operator delete(v196);
        }
        if (v201 < 0)
          operator delete(v199);
        std::string::basic_string[abi:ne180100]<0>(&v196, "dilations");
        v192 = 0;
        v193 = 0;
        v194 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v192, *((const void **)&v223 + 1), v224, (uint64_t)(v224 - *((_QWORD *)&v223 + 1)) >> 2);
        MIL::Builder::OperationBuilder::AddInputInt32();
        v123 = v195;
        if (v195)
        {
          v124 = (unint64_t *)&v195->__shared_owners_;
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
            std::__shared_weak_count::__release_weak(v123);
          }
        }
        if (v192)
        {
          v193 = v192;
          operator delete(v192);
        }
        if (SHIBYTE(v198) < 0)
          operator delete(v196);
        std::string::basic_string[abi:ne180100]<0>(&v192, "pad_mode");
        if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v190, v168.__r_.__value_.__l.__data_, v168.__r_.__value_.__l.__size_);
        else
          v190 = v168;
        MIL::Builder::OperationBuilder::AddInputString();
        v126 = v191;
        if (v191)
        {
          v127 = (unint64_t *)&v191->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v190.__r_.__value_.__l.__data_);
        if (SHIBYTE(v194) < 0)
          operator delete(v192);
        std::string::basic_string[abi:ne180100]<0>(&v187, "pad");
        v184 = 0;
        v185 = 0;
        v186 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v184, v225.__begin_, (uint64_t)v225.__end_, v225.__end_ - v225.__begin_);
        MIL::Builder::OperationBuilder::AddInputInt32();
        v129 = v189;
        if (v189)
        {
          v130 = (unint64_t *)&v189->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        if (v184)
        {
          v185 = v184;
          operator delete(v184);
        }
        if (v188 < 0)
          operator delete(v187);
        if (v226)
        {
          if (v226 == 1)
          {
            std::string::basic_string[abi:ne180100]<0>(&v184, "bias");
            if (v170 == v169)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            MIL::Builder::OperationBuilder::AddInputFloat16();
            v132 = v183;
            if (v183)
            {
              v133 = (unint64_t *)&v183->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v184, "bias");
            memset(&v182, 0, sizeof(v182));
            std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>(&v182, v169, (uint64_t)v170, ((char *)v170 - (_BYTE *)v169) >> 1);
            MIL::Builder::OperationBuilder::AddInputFloat16();
            v135 = v183;
            if (v183)
            {
              v136 = (unint64_t *)&v183->__shared_owners_;
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
            if (v182.__r_.__value_.__r.__words[0])
            {
              v182.__r_.__value_.__l.__size_ = v182.__r_.__value_.__r.__words[0];
              operator delete(v182.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(v186) < 0)
            operator delete(v184);
        }
        if (*(char *)(a4 + 23) < 0)
          std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
        else
          v182 = *(std::string *)a4;
        MIL::Builder::OperationBuilder::AddOutput();
        v138 = v181;
        if (v181)
        {
          v139 = (unint64_t *)&v181->__shared_owners_;
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
        }
        if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v182.__r_.__value_.__l.__data_);
        v141 = v215;
        if (v215)
        {
          v142 = (unint64_t *)&v215->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
        *(_DWORD *)a5 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a5 + 8), (char *)&unk_2069A5097);
      }
      else
      {
        *(_DWORD *)a5 = 8;
        MIL::MILResult::GetMessage((MIL::MILResult *)&v162);
        std::operator+<char>();
      }
      MEMORY[0x20BCFEAEC](&v162);
    }
    if (v163)
    {
      v164 = v163;
      operator delete(v163);
    }
    if (SHIBYTE(v167) < 0)
      operator delete(v166[0]);
  }
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (v172)
  {
    v173 = (char *)v172;
    operator delete(v172);
  }
  if (v175)
  {
    v176 = (char *)v175;
    operator delete(v175);
  }
  if (v225.__begin_)
  {
    v225.__end_ = v225.__begin_;
    operator delete(v225.__begin_);
  }
  if (*((_QWORD *)&v223 + 1))
  {
    *(_QWORD *)&v224 = *((_QWORD *)&v223 + 1);
    operator delete(*((void **)&v223 + 1));
  }
  if ((_QWORD)v222)
  {
    *((_QWORD *)&v222 + 1) = v222;
    operator delete((void *)v222);
  }
LABEL_22:
  if (SHIBYTE(v180) < 0)
    operator delete((void *)__p);
}

void sub_20688A98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;
  void *v56;

  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  v56 = *(void **)(v54 - 240);
  if (v56)
  {
    *(_QWORD *)(v54 - 232) = v56;
    operator delete(v56);
  }
  if (a19)
    operator delete(a19);
  if (a38 < 0)
    operator delete(a33);
  if (a39)
    operator delete(a39);
  if (a42)
    operator delete(a42);
  if (a45)
    operator delete(a45);
  ANEMachineIR::Validators::NeConvParameterValues::~NeConvParameterValues((ANEMachineIR::Validators::NeConvParameterValues *)(v54 - 216));
  if (a54 < 0)
    operator delete(a49);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_DWORD *)a3 + 6);
  this[2].__r_.__value_.__s.__data_[4] = *((_BYTE *)a3 + 28);
  LODWORD(this[2].__r_.__value_.__l.__data_) = v8;
  return this;
}

void sub_20688ADFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<MIL::Fp16>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    v9 = &v6[2 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_24BFE70B8, MEMORY[0x24BEDAAD0]);
  }
  return *a1 + 2 * a2;
}

void sub_20688AF04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<int>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void MIL::ANEMachineIR::GetScalarValueOrDefault<std::string>(uint64_t a1@<X2>, int *a2@<X3>, std::string *a3@<X8>)
{
  uint64_t ParameterValue;
  uint64_t v7;
  __int128 v8;
  int v9;

  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (!ParameterValue)
  {
    if (a2)
    {
      v9 = 1;
      goto LABEL_12;
    }
LABEL_13:
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    return;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue)
    || (v7 = MEMORY[0x20BCFEE88]()) == 0)
  {
    if (a2)
    {
      v9 = 2;
LABEL_12:
      *a2 = v9;
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  if (a2)
    *a2 = 0;
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    v8 = *(_OWORD *)v7;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v8;
  }
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void std::vector<int>::assign(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __u)
{
  uint64_t value;
  int *begin;
  std::vector<int>::size_type v8;
  unint64_t v9;
  std::vector<int>::pointer v10;
  int *v11;
  std::vector<int>::size_type v12;
  std::vector<int>::pointer end;
  std::vector<int>::size_type v14;
  std::vector<int>::size_type v15;
  int *v16;
  int *v17;
  std::vector<int>::size_type v18;

  value = (uint64_t)this->__end_cap_.__value_;
  begin = this->__begin_;
  if (__n <= (value - (uint64_t)begin) >> 2)
  {
    end = this->__end_;
    v14 = end - begin;
    if (v14 >= __n)
      v15 = __n;
    else
      v15 = end - begin;
    if (v15)
    {
      v16 = begin;
      do
      {
        *v16++ = *__u;
        --v15;
      }
      while (v15);
    }
    if (__n <= v14)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v17 = &end[__n - v14];
      v18 = 4 * __n - 4 * v14;
      do
      {
        *end++ = *__u;
        v18 -= 4;
      }
      while (v18);
      this->__end_ = v17;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n >> 62)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v8 = value >> 1;
    if (value >> 1 <= __n)
      v8 = __n;
    if ((unint64_t)value >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    std::vector<int>::__vallocate[abi:ne180100](this, v9);
    v10 = this->__end_;
    v11 = &v10[__n];
    v12 = 4 * __n;
    do
    {
      *v10++ = *__u;
      v12 -= 4;
    }
    while (v12);
    this->__end_ = v11;
  }
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

_QWORD *std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20688B3F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ANEMachineIR::HasNeuralEngine()
{
  return 1;
}

BOOL ANEMachineIR::HasTextureEngine(int a1)
{
  return a1 != 0;
}

char *ANEMachineIR::GetOpsetString(unsigned int a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_24BFE7F90[a1];
}

uint64_t ANEMachineIR::LookupOpsetString(uint64_t *a1, int *a2)
{
  int v2;
  int v7;

  v2 = *((char *)a1 + 23);
  if (v2 < 0)
  {
    if (a1[1] == 12)
    {
      a1 = (uint64_t *)*a1;
      goto LABEL_6;
    }
    return 0;
  }
  if (v2 != 12)
    return 0;
LABEL_6:
  if (*a1 == 0x68776F6C66656E61 && *((_DWORD *)a1 + 2) == 808595506)
  {
    v7 = 0;
  }
  else if (*a1 == 0x68776F6C66656E61 && *((_DWORD *)a1 + 2) == 825372722)
  {
    v7 = 1;
  }
  else
  {
    if (*a1 != 0x68776F6C66656E61 || *((_DWORD *)a1 + 2) != 842149938)
      return 0;
    v7 = 2;
  }
  *a2 = v7;
  return 1;
}

uint64_t ANEMachineIR::H2020::BaseActivation::Make(MIL::IRUnknownDimension *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  char **v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t result;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  void *v56[2];
  uint64_t v57;
  void *v58;
  void *v59;
  _QWORD *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  char **v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  void *__p;
  void *v67;
  char *v68;
  char *v69;
  char **v70;
  _BYTE v71[24];
  _BYTE *v72;
  _QWORD v73[3];
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v65 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v67 = v8 + 1;
  v68 = (char *)(v8 + 1);
  v76 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v58);
  v9 = v58;
  v58 = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = v64;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v67 = __p;
    operator delete(__p);
  }
  v63 = 0;
  v13 = operator new();
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v63, (void **)v13);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v63, 1uLL);
  v14 = v63;
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v58 = v16;
  *v16 = v15;
  v59 = v16 + 1;
  v60 = v16 + 1;
  v75 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v17 = v62;
  v76 = v62;
  if (v62)
  {
    v18 = (_QWORD *)operator new();
    v19 = v62;
    *v18 = &unk_24BFE7320;
    v18[1] = 0;
    v18[2] = 0;
    v18[3] = v19;
  }
  else
  {
    v18 = 0;
  }
  v77 = v18;
  v62 = 0;
  v20 = v14[2];
  v21 = v14[1];
  if (v21 >= v20)
  {
    v23 = (v21 - *v14) >> 4;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v25 = v20 - *v14;
    if (v25 >> 3 > v24)
      v24 = v25 >> 3;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    v70 = v14 + 2;
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v14 + 2), v26);
    v29 = &v27[16 * v23];
    *(_QWORD *)v29 = v17;
    *((_QWORD *)v29 + 1) = v18;
    v76 = 0;
    v77 = 0;
    v31 = *v14;
    v30 = v14[1];
    if (v30 == *v14)
    {
      v34 = v14[1];
      v32 = &v27[16 * v23];
    }
    else
    {
      v32 = &v27[16 * v23];
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v30 -= 16;
        *((_OWORD *)v32 - 1) = v33;
        v32 -= 16;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
      }
      while (v30 != v31);
      v34 = *v14;
      v30 = v14[1];
    }
    v22 = v29 + 16;
    *v14 = v32;
    __p = v34;
    v67 = v34;
    v14[1] = v29 + 16;
    v68 = v30;
    v35 = v14[2];
    v14[2] = &v27[16 * v28];
    v69 = v35;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v21 = v17;
    *((_QWORD *)v21 + 1) = v18;
    v22 = v21 + 16;
    v76 = 0;
    v77 = 0;
  }
  v14[1] = v22;
  v36 = v62;
  v62 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v61;
  if (v61)
  {
    v38 = (unint64_t *)&v61->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  *(_OWORD *)v56 = *(_OWORD *)a2;
  v57 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v40 = v65;
  if (v65)
  {
    v41 = (std::__shared_weak_count *)operator new();
    v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v41->__shared_owners_ = 0;
    v41->__shared_weak_owners_ = 0;
    v41[1].__vftable = (std::__shared_weak_count_vtbl *)v40;
  }
  else
  {
    v41 = 0;
  }
  v55 = v41;
  v65 = 0;
  if (v63)
  {
    v42 = (std::__shared_weak_count *)operator new();
    v43 = v63;
    v42->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v42->__shared_owners_ = 0;
    v42->__shared_weak_owners_ = 0;
    v42[1].__vftable = (std::__shared_weak_count_vtbl *)v43;
  }
  else
  {
    v42 = 0;
  }
  v54 = v42;
  v63 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v73, a3);
  }
  else
  {
    v73[0] = &unk_24BFE7440;
    v73[1] = ANEMachineIR::H2020::Validators::ValidateBaseActivation;
    v74 = v73;
  }
  v72 = 0;
  MIL::IROperator::Make();
  v44 = v72;
  if (v72 == v71)
  {
    v45 = 4;
    v44 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_50;
    v45 = 5;
  }
  (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_50:
  v46 = v74;
  if (v74 == v73)
  {
    v47 = 4;
    v46 = v73;
    goto LABEL_54;
  }
  if (v74)
  {
    v47 = 5;
LABEL_54:
    (*(void (**)(_QWORD *))(*v46 + 8 * v47))(v46);
  }
  if (v54)
  {
    v48 = (unint64_t *)&v54->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v55)
  {
    v50 = (unint64_t *)&v55->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v57) < 0)
    operator delete(v56[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v63, 0);
  result = v65;
  if (v65)
  {
    v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v65);
    return MEMORY[0x20BCFF140](v53, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20688BAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a25, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a30, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Linear::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2020::Validators::ValidateLinear;
  v7 = v6;
  ANEMachineIR::H2020::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_20688BCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2020::NePiecewiseV2::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t *p_shared_owners;
  unint64_t v11;
  unsigned __int8 *v12;
  void *v13;
  uint64_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  void *v17;
  uint64_t *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  void *v21;
  uint64_t *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  void *v25;
  uint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  std::__shared_weak_count_vtbl *v32;
  uint64_t *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  void *v36;
  uint64_t *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  void *v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned __int8 *v43;
  void *v44;
  uint64_t *v45;
  unint64_t v46;
  unsigned __int8 *v47;
  void *v48;
  uint64_t *v49;
  unint64_t v50;
  unsigned __int8 *v51;
  void *v52;
  uint64_t *v53;
  unint64_t v54;
  unsigned __int8 *v55;
  void *v56;
  uint64_t *v57;
  unint64_t v58;
  unsigned __int8 *v59;
  void *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  char **v64;
  uint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  __int128 v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  char **v92;
  _QWORD *v93;
  uint64_t v94;
  MIL::Validation::TensorSymbolicShapeConstraints *v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  MIL::Validation::PossibleStringValuesConstraints *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  uint64_t i;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  std::__shared_weak_count_vtbl *result;
  uint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void *v142;
  char v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146;
  char v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  void *v154;
  char v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  char **v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  char **v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count *v178;
  _BYTE v179[8];
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  void *__p;
  void *v183;
  char *v184;
  _QWORD v185[3];
  _QWORD v186[3];
  _QWORD v187[3];
  uint64_t v188[3];
  uint64_t v189[3];
  uint64_t v190[3];
  uint64_t v191[3];
  uint64_t v192[3];
  uint64_t v193[3];
  uint64_t v194[3];
  uint64_t v195[3];
  uint64_t v196[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v198;
  void (__cdecl **v199)(std::__shared_weak_count *__hidden);
  _BYTE v200[24];
  _BYTE *v201;
  _QWORD v202[3];
  MIL::Validation::TensorSymbolicShapeConstraints *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;

  v207 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v181 = (std::__shared_weak_count_vtbl *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v183 = v8 + 1;
  v184 = (char *)(v8 + 1);
  v205 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*((void (**)(std::__shared_weak_count_vtbl *))v9->~__shared_weak_count + 1))(v9);
  if (v180)
  {
    p_shared_owners = &v180->__shared_owners_;
    do
      v11 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v11 - 1, (unint64_t *)p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v181, "x_sat_left", (uint64_t *)&__p);
  v13 = __p;
  __p = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  if (v178)
  {
    v14 = &v178->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v12 + 5) + 32))(*((_QWORD *)v12 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v181, "x_sat_right", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  if (v177)
  {
    v18 = &v177->__shared_owners_;
    do
      v19 = __ldaxr((unint64_t *)v18);
    while (__stlxr(v19 - 1, (unint64_t *)v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v181, "y_sat_left", (uint64_t *)&__p);
  v21 = __p;
  __p = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  if (v176)
  {
    v22 = &v176->__shared_owners_;
    do
      v23 = __ldaxr((unint64_t *)v22);
    while (__stlxr(v23 - 1, (unint64_t *)v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v181, "y_sat_right", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  if (v175)
  {
    v26 = &v175->__shared_owners_;
    do
      v27 = __ldaxr((unint64_t *)v26);
    while (__stlxr(v27 - 1, (unint64_t *)v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v28 = v181;
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = operator new(8uLL);
  __p = v30;
  *v30 = v29;
  v183 = v30 + 1;
  v184 = (char *)(v30 + 1);
  v205 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v28, "y_intercept", (uint64_t *)&Scalar);
  v32 = Scalar;
  Scalar = 0;
  if (v32)
    (*((void (**)(std::__shared_weak_count_vtbl *))v32->~__shared_weak_count + 1))(v32);
  if (v174)
  {
    v33 = &v174->__shared_owners_;
    do
      v34 = __ldaxr((unint64_t *)v33);
    while (__stlxr(v34 - 1, (unint64_t *)v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v181, "intercept_left", (uint64_t *)&__p);
  v36 = __p;
  __p = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  if (v173)
  {
    v37 = &v173->__shared_owners_;
    do
      v38 = __ldaxr((unint64_t *)v37);
    while (__stlxr(v38 - 1, (unint64_t *)v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v181, "intercept_right", (uint64_t *)&__p);
  v40 = __p;
  __p = 0;
  if (v40)
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  if (v172)
  {
    v41 = &v172->__shared_owners_;
    do
      v42 = __ldaxr((unint64_t *)v41);
    while (__stlxr(v42 - 1, (unint64_t *)v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v181, "slope_left", (uint64_t *)&__p);
  v44 = __p;
  __p = 0;
  if (v44)
    (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
  if (v171)
  {
    v45 = &v171->__shared_owners_;
    do
      v46 = __ldaxr((unint64_t *)v45);
    while (__stlxr(v46 - 1, (unint64_t *)v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 32))(*((_QWORD *)v43 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v181, "slope_right", (uint64_t *)&__p);
  v48 = __p;
  __p = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  if (v170)
  {
    v49 = &v170->__shared_owners_;
    do
      v50 = __ldaxr((unint64_t *)v49);
    while (__stlxr(v50 - 1, (unint64_t *)v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v181, "in_abs", (uint64_t *)&__p);
  v52 = __p;
  __p = 0;
  if (v52)
    (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
  if (v169)
  {
    v53 = &v169->__shared_owners_;
    do
      v54 = __ldaxr((unint64_t *)v53);
    while (__stlxr(v54 - 1, (unint64_t *)v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v181, "lut_mode", (uint64_t *)&__p);
  v56 = __p;
  __p = 0;
  if (v56)
    (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
  if (v168)
  {
    v57 = &v168->__shared_owners_;
    do
      v58 = __ldaxr((unint64_t *)v57);
    while (__stlxr(v58 - 1, (unint64_t *)v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 32))(*((_QWORD *)v55 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v181, "sign_mode", (uint64_t *)&__p);
  v60 = __p;
  __p = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  if (v167)
  {
    v61 = &v167->__shared_owners_;
    do
      v62 = __ldaxr((unint64_t *)v61);
    while (__stlxr(v62 - 1, (unint64_t *)v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  v166 = 0;
  v63 = operator new();
  *(_QWORD *)v63 = 0;
  *(_QWORD *)(v63 + 8) = 0;
  *(_QWORD *)(v63 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, (void **)v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v166, 1uLL);
  v64 = v166;
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v66;
  v66->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v65;
  v198 = (std::__shared_weak_count_vtbl *)&v66->~__shared_weak_count_0;
  v199 = &v66->~__shared_weak_count_0;
  v204 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v67 = v165;
  v205 = v165;
  if (v165)
  {
    v68 = (_QWORD *)operator new();
    v69 = v165;
    *v68 = &unk_24BFE7320;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v69;
  }
  else
  {
    v68 = 0;
  }
  v206 = v68;
  v165 = 0;
  v70 = v64[2];
  v71 = v64[1];
  if (v71 >= v70)
  {
    v73 = (v71 - *v64) >> 4;
    v74 = v73 + 1;
    if ((unint64_t)(v73 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v75 = v70 - *v64;
    if (v75 >> 3 > v74)
      v74 = v75 >> 3;
    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0)
      v76 = 0xFFFFFFFFFFFFFFFLL;
    else
      v76 = v74;
    v185[1] = v64 + 2;
    v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v64 + 2), v76);
    v79 = &v77[16 * v73];
    *(_QWORD *)v79 = v67;
    *((_QWORD *)v79 + 1) = v68;
    v205 = 0;
    v206 = 0;
    v81 = *v64;
    v80 = v64[1];
    if (v80 == *v64)
    {
      v84 = v64[1];
      v82 = &v77[16 * v73];
    }
    else
    {
      v82 = &v77[16 * v73];
      do
      {
        v83 = *((_OWORD *)v80 - 1);
        v80 -= 16;
        *((_OWORD *)v82 - 1) = v83;
        v82 -= 16;
        *(_QWORD *)v80 = 0;
        *((_QWORD *)v80 + 1) = 0;
      }
      while (v80 != v81);
      v84 = *v64;
      v80 = v64[1];
    }
    v72 = v79 + 16;
    *v64 = v82;
    __p = v84;
    v183 = v84;
    v64[1] = v79 + 16;
    v184 = v80;
    v85 = v64[2];
    v64[2] = &v77[16 * v78];
    v185[0] = v85;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v71 = v67;
    *((_QWORD *)v71 + 1) = v68;
    v72 = v71 + 16;
    v205 = 0;
    v206 = 0;
  }
  v64[1] = v72;
  v86 = v165;
  v165 = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  if (v164)
  {
    v87 = &v164->__shared_owners_;
    do
      v88 = __ldaxr((unint64_t *)v87);
    while (__stlxr(v88 - 1, (unint64_t *)v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  if (Scalar)
  {
    v198 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v162 = *(_OWORD *)a2;
  v163 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v89 = v181;
  v160 = v181;
  if (v181)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v89;
  }
  else
  {
    v90 = 0;
  }
  v161 = v90;
  v181 = 0;
  v158 = v166;
  if (v166)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v166;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v159 = v91;
  v166 = 0;
  v202[0] = &unk_24BFE7440;
  v202[1] = ANEMachineIR::H2020::Validators::ValidateNePiecewiseV2;
  v203 = (MIL::Validation::TensorSymbolicShapeConstraints *)v202;
  v201 = 0;
  MIL::IROperator::Make();
  v93 = v201;
  if (v201 == v200)
  {
    v94 = 4;
    v93 = v200;
  }
  else
  {
    if (!v201)
      goto LABEL_133;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_133:
  v95 = v203;
  if (v203 == (MIL::Validation::TensorSymbolicShapeConstraints *)v202)
  {
    v96 = 4;
    v95 = (MIL::Validation::TensorSymbolicShapeConstraints *)v202;
    goto LABEL_137;
  }
  if (v203)
  {
    v96 = 5;
LABEL_137:
    v95 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v95 + 8 * v96))();
  }
  if (v159)
  {
    v97 = &v159->__shared_owners_;
    do
      v98 = __ldaxr((unint64_t *)v97);
    while (__stlxr(v98 - 1, (unint64_t *)v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  if (v161)
  {
    v99 = &v161->__shared_owners_;
    do
      v100 = __ldaxr((unint64_t *)v99);
    while (__stlxr(v100 - 1, (unint64_t *)v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  if (SHIBYTE(v163) < 0)
    operator delete(v162[0]);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v95);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(&v154, "y_intercept");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v156 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v157 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "LUT_SIZE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v101 + 24))(v101, &v156, 0, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v104 = v157;
  if (v157)
  {
    v105 = (unint64_t *)&v157->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v155 < 0)
    operator delete(v154);
  v108 = *a3;
  v150 = __p;
  if (__p)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)__p;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v151 = v109;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v108 + 56))(v108, &v150);
  v111 = v151;
  if (v151)
  {
    v112 = (unint64_t *)&v151->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = (MIL::Validation::PossibleStringValuesConstraints *)__p;
  __p = 0;
  if (v114)
    v114 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v114 + 8))(v114);
  MIL::Validation::PossibleStringValuesConstraints::Make(v114);
  v115 = v205;
  std::string::basic_string[abi:ne180100]<0>(&v146, "lut_mode");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v148 = v165;
  if (v165)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = v165;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = (std::__shared_weak_count_vtbl *)v117;
  }
  else
  {
    v116 = 0;
  }
  v149 = v116;
  v165 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "cos");
  std::string::basic_string[abi:ne180100]<0>(v185, "exp2");
  std::string::basic_string[abi:ne180100]<0>(v186, "frac");
  std::string::basic_string[abi:ne180100]<0>(v187, "int");
  std::string::basic_string[abi:ne180100]<0>(v188, "inv");
  std::string::basic_string[abi:ne180100]<0>(v189, "left_lut");
  std::string::basic_string[abi:ne180100]<0>(v190, "log2");
  std::string::basic_string[abi:ne180100]<0>(v191, "lut");
  std::string::basic_string[abi:ne180100]<0>(v192, "rsqrt");
  std::string::basic_string[abi:ne180100]<0>(v193, "sin");
  std::string::basic_string[abi:ne180100]<0>(v194, "split_lut");
  std::string::basic_string[abi:ne180100]<0>(v195, "sqr");
  std::string::basic_string[abi:ne180100]<0>(v196, "sqrt");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 13);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v115 + 24))(v115, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  v118 = 312;
  do
  {
    if (*((char *)&__p + v118 - 1) < 0)
      operator delete(*(void **)&v179[v118]);
    v118 -= 24;
  }
  while (v118);
  v119 = v149;
  if (v149)
  {
    v120 = (unint64_t *)&v149->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v165;
  v165 = 0;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  if (v147 < 0)
    operator delete(v146);
  v123 = v205;
  std::string::basic_string[abi:ne180100]<0>(&v142, "sign_mode");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v144 = v165;
  if (v165)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = v165;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = (std::__shared_weak_count_vtbl *)v125;
  }
  else
  {
    v124 = 0;
  }
  v145 = v124;
  v165 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "copy");
  std::string::basic_string[abi:ne180100]<0>(v185, "invert");
  std::string::basic_string[abi:ne180100]<0>(v186, "negzero");
  std::string::basic_string[abi:ne180100]<0>(v187, "pass");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 4);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v123 + 24))(v123, &v144, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v187[i + 2]) < 0)
      operator delete((void *)v187[i]);
  }
  v127 = v145;
  if (v145)
  {
    v128 = (unint64_t *)&v145->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v165;
  v165 = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  if (v143 < 0)
    operator delete(v142);
  v131 = *a3;
  v140 = v205;
  if (v205)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = v205;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = (std::__shared_weak_count_vtbl *)v133;
  }
  else
  {
    v132 = 0;
  }
  v141 = v132;
  v205 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v131 + 56))(v131, &v140);
  v134 = v141;
  if (v141)
  {
    v135 = (unint64_t *)&v141->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v205;
  v205 = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, 0);
  result = v181;
  if (v181)
  {
    v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v181);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v139, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20688D14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;

  v71 = *(_QWORD *)(v69 - 88);
  *(_QWORD *)(v69 - 88) = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = *v68;
  *v68 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a41, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Relu::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2020::Validators::ValidateRelu;
  v7 = v6;
  ANEMachineIR::H2020::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_20688D820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2020::ScaledActivation::Make(MIL::IRUnknownDimension *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t *p_shared_owners;
  unint64_t v11;
  unsigned __int8 *v12;
  void *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  char **v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count_vtbl *result;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  void *v55[2];
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  char **v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count_vtbl *v62;
  void *__p;
  void *v64;
  char *v65;
  char *v66;
  char **v67;
  _BYTE v68[24];
  _BYTE *v69;
  _QWORD v70[3];
  _QWORD *v71;
  void *Scalar;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v62 = (std::__shared_weak_count_vtbl *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v64 = v8 + 1;
  v65 = (char *)(v8 + 1);
  v76 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  if (v61)
  {
    p_shared_owners = &v61->__shared_owners_;
    do
      v11 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v11 - 1, (unint64_t *)p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v62, "scale", (uint64_t *)&__p);
  v13 = __p;
  __p = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  if (v60)
  {
    v14 = &v60->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v12 + 5) + 32))(*((_QWORD *)v12 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v12 + 5) + 48))(*((_QWORD *)v12 + 5), 1);
  v59 = 0;
  v16 = operator new();
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v59, (void **)v16);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v59, 1uLL);
  v17 = v59;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = operator new(8uLL);
  Scalar = v19;
  *v19 = v18;
  v73 = v19 + 1;
  v74 = v19 + 1;
  v75 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v76 = v58;
  if (v58)
  {
    v20 = (_QWORD *)operator new();
    *v20 = &unk_24BFE7320;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v58;
  }
  else
  {
    v20 = 0;
  }
  v77 = v20;
  v21 = v17[2];
  v22 = v17[1];
  if (v22 >= v21)
  {
    v24 = (v22 - *v17) >> 4;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v26 = v21 - *v17;
    if (v26 >> 3 > v25)
      v25 = v26 >> 3;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
      v27 = 0xFFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    v67 = v17 + 2;
    v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v17 + 2), v27);
    v30 = (uint64_t *)&v28[16 * v24];
    *v30 = v58;
    v30[1] = (uint64_t)v20;
    v76 = 0;
    v77 = 0;
    v32 = *v17;
    v31 = v17[1];
    if (v31 == *v17)
    {
      v35 = v17[1];
      v33 = &v28[16 * v24];
    }
    else
    {
      v33 = &v28[16 * v24];
      do
      {
        v34 = *((_OWORD *)v31 - 1);
        v31 -= 16;
        *((_OWORD *)v33 - 1) = v34;
        v33 -= 16;
        *(_QWORD *)v31 = 0;
        *((_QWORD *)v31 + 1) = 0;
      }
      while (v31 != v32);
      v35 = *v17;
      v31 = v17[1];
    }
    v23 = (char *)(v30 + 2);
    *v17 = v33;
    __p = v35;
    v64 = v35;
    v17[1] = (char *)(v30 + 2);
    v65 = v31;
    v36 = v17[2];
    v17[2] = &v28[16 * v29];
    v66 = v36;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v22 = v58;
    *((_QWORD *)v22 + 1) = v20;
    v23 = v22 + 16;
    v76 = 0;
    v77 = 0;
  }
  v17[1] = v23;
  if (v57)
  {
    v37 = (unint64_t *)&v57->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)())v57->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (Scalar)
  {
    v73 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v55 = *(_OWORD *)a2;
  v56 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v39 = v62;
  if (v62)
  {
    v40 = (std::__shared_weak_count *)operator new();
    v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v40->__shared_owners_ = 0;
    v40->__shared_weak_owners_ = 0;
    v40[1].__vftable = v39;
  }
  else
  {
    v40 = 0;
  }
  v54 = v40;
  v62 = 0;
  if (v59)
  {
    v41 = (std::__shared_weak_count *)operator new();
    v42 = v59;
    v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v41->__shared_owners_ = 0;
    v41->__shared_weak_owners_ = 0;
    v41[1].__vftable = (std::__shared_weak_count_vtbl *)v42;
  }
  else
  {
    v41 = 0;
  }
  v53 = v41;
  v59 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v70, a3);
  }
  else
  {
    v70[0] = &unk_24BFE7440;
    v70[1] = ANEMachineIR::H2020::Validators::ValidateScaledActivation;
    v71 = v70;
  }
  v69 = 0;
  MIL::IROperator::Make();
  v43 = v69;
  if (v69 == v68)
  {
    v44 = 4;
    v43 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_55;
    v44 = 5;
  }
  (*(void (**)(_QWORD *))(*v43 + 8 * v44))(v43);
LABEL_55:
  v45 = v71;
  if (v71 == v70)
  {
    v46 = 4;
    v45 = v70;
    goto LABEL_59;
  }
  if (v71)
  {
    v46 = 5;
LABEL_59:
    (*(void (**)(_QWORD *))(*v45 + 8 * v46))(v45);
  }
  if (v53)
  {
    v47 = (unint64_t *)&v53->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v54)
  {
    v49 = (unint64_t *)&v54->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (SHIBYTE(v56) < 0)
    operator delete(v55[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v59, 0);
  result = v62;
  if (v62)
  {
    v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v62);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v52, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20688DEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void **a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a22, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a29, 0);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2020::Lrelu::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t *p_shared_owners;
  unint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  uint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  char *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  char **v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count_vtbl *result;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  void *v57[2];
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  char **v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count_vtbl *v65;
  void *__p;
  void *v67;
  char *v68;
  char *v69;
  char **v70;
  _BYTE v71[24];
  _BYTE *v72;
  _QWORD v73[3];
  _QWORD *v74;
  void *Scalar;
  void *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  v65 = (std::__shared_weak_count_vtbl *)v4;
  v5 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v6 = operator new(8uLL);
  __p = v6;
  *v6 = v5;
  v67 = v6 + 1;
  v68 = (char *)(v6 + 1);
  v79 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v4, "x", (uint64_t *)&Scalar);
  v7 = Scalar;
  Scalar = 0;
  if (v7)
    (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
  if (v64)
  {
    p_shared_owners = &v64->__shared_owners_;
    do
      v9 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v9 - 1, (unint64_t *)p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (__p)
  {
    v67 = __p;
    operator delete(__p);
  }
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v65, "scale", (uint64_t *)&__p);
  v11 = __p;
  __p = 0;
  if (v11)
    (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
  if (v63)
  {
    v12 = &v63->__shared_owners_;
    do
      v13 = __ldaxr((unint64_t *)v12);
    while (__stlxr(v13 - 1, (unint64_t *)v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v10 + 5) + 32))(*((_QWORD *)v10 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v10 + 5) + 48))(*((_QWORD *)v10 + 5), 1);
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v65, "alpha", (uint64_t *)&__p);
  v15 = __p;
  __p = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  if (v62)
  {
    v16 = &v62->__shared_owners_;
    do
      v17 = __ldaxr((unint64_t *)v16);
    while (__stlxr(v17 - 1, (unint64_t *)v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 32))(*((_QWORD *)v14 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 48))(*((_QWORD *)v14 + 5), 1);
  v61 = 0;
  v18 = operator new();
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v61, (void **)v18);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v61, 1uLL);
  v19 = v61;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  Scalar = v21;
  *v21 = v20;
  v76 = v21 + 1;
  v77 = v21 + 1;
  v78 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v79 = v60;
  if (v60)
  {
    v22 = (_QWORD *)operator new();
    *v22 = &unk_24BFE7320;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v60;
  }
  else
  {
    v22 = 0;
  }
  v80 = v22;
  v23 = v19[2];
  v24 = v19[1];
  if (v24 >= v23)
  {
    v26 = (v24 - *v19) >> 4;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v28 = v23 - *v19;
    if (v28 >> 3 > v27)
      v27 = v28 >> 3;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
      v29 = 0xFFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    v70 = v19 + 2;
    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v19 + 2), v29);
    v32 = (uint64_t *)&v30[16 * v26];
    *v32 = v60;
    v32[1] = (uint64_t)v22;
    v79 = 0;
    v80 = 0;
    v34 = *v19;
    v33 = v19[1];
    if (v33 == *v19)
    {
      v37 = v19[1];
      v35 = &v30[16 * v26];
    }
    else
    {
      v35 = &v30[16 * v26];
      do
      {
        v36 = *((_OWORD *)v33 - 1);
        v33 -= 16;
        *((_OWORD *)v35 - 1) = v36;
        v35 -= 16;
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = 0;
      }
      while (v33 != v34);
      v37 = *v19;
      v33 = v19[1];
    }
    v25 = (char *)(v32 + 2);
    *v19 = v35;
    __p = v37;
    v67 = v37;
    v19[1] = (char *)(v32 + 2);
    v68 = v33;
    v38 = v19[2];
    v19[2] = &v30[16 * v31];
    v69 = v38;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v24 = v60;
    *((_QWORD *)v24 + 1) = v22;
    v25 = v24 + 16;
    v79 = 0;
    v80 = 0;
  }
  v19[1] = v25;
  if (v59)
  {
    v39 = (unint64_t *)&v59->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)())v59->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (Scalar)
  {
    v76 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v57 = *(_OWORD *)a2;
  v58 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v41 = v65;
  if (v65)
  {
    v42 = (std::__shared_weak_count *)operator new();
    v42->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v42->__shared_owners_ = 0;
    v42->__shared_weak_owners_ = 0;
    v42[1].__vftable = v41;
  }
  else
  {
    v42 = 0;
  }
  v56 = v42;
  v65 = 0;
  if (v61)
  {
    v43 = (std::__shared_weak_count *)operator new();
    v44 = v61;
    v43->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v43->__shared_owners_ = 0;
    v43->__shared_weak_owners_ = 0;
    v43[1].__vftable = (std::__shared_weak_count_vtbl *)v44;
  }
  else
  {
    v43 = 0;
  }
  v55 = v43;
  v61 = 0;
  v73[0] = &unk_24BFE7440;
  v73[1] = ANEMachineIR::H2020::Validators::ValidateLrelu;
  v74 = v73;
  v72 = 0;
  MIL::IROperator::Make();
  v45 = v72;
  if (v72 == v71)
  {
    v46 = 4;
    v45 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_59;
    v46 = 5;
  }
  (*(void (**)(_QWORD *))(*v45 + 8 * v46))(v45);
LABEL_59:
  v47 = v74;
  if (v74 == v73)
  {
    v48 = 4;
    v47 = v73;
    goto LABEL_63;
  }
  if (v74)
  {
    v48 = 5;
LABEL_63:
    (*(void (**)(_QWORD *))(*v47 + 8 * v48))(v47);
  }
  if (v55)
  {
    v49 = (unint64_t *)&v55->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v56)
  {
    v51 = (unint64_t *)&v56->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (SHIBYTE(v58) < 0)
    operator delete(v57[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v61, 0);
  result = v65;
  if (v65)
  {
    v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v65);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v54, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20688E788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void **a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a22, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a31, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Sigmoid::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2020::Validators::ValidateSigmoid;
  v7 = v6;
  ANEMachineIR::H2020::ScaledActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_20688EA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Sqrt::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2020::Validators::ValidateSqrt;
  v7 = v6;
  ANEMachineIR::H2020::ScaledActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_20688EB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Tanh::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2020::Validators::ValidateTanh;
  v7 = v6;
  ANEMachineIR::H2020::ScaledActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_20688EC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[12],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20688ED4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[12],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[12],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20688EDE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[12],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20688EE30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[7],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20688EEA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[7],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[7],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20688EF40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[7],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20688EF8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[9],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20688F004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[9],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[9],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20688F09C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[9],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20688F0E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20688F160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[6],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[6],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20688F1F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[6],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20688F244(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0_1(void **a1)
{
  operator delete(*a1);
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  uint64_t v0;

  return std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v0);
}

uint64_t OUTLINED_FUNCTION_4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(*a1 + 8 * a2))();
}

void ANEMachineIR::H2020::BaseActivation::Make(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)a1[3];
  if (v1 == a1)
  {
    v2 = 4;
    goto LABEL_5;
  }
  if (v1)
  {
    v2 = 5;
    a1 = (_QWORD *)a1[3];
LABEL_5:
    OUTLINED_FUNCTION_4(a1, v2);
  }
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_0();
}

void ANEMachineIR::H2020::Linear::Make(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    OUTLINED_FUNCTION_0_1((void **)a1);
}

void ANEMachineIR::H2020::NePiecewiseV2::Make(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  if ((_QWORD *)*a1 == a2)
  {
    v2 = 4;
    goto LABEL_5;
  }
  if (*a1)
  {
    v2 = 5;
    a2 = (_QWORD *)*a1;
LABEL_5:
    OUTLINED_FUNCTION_0_0(a2, v2);
  }
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_0();
}

void MIL::ANEMachineIR::Interpreter::NeMatmulCpu::Run(MIL::Fp16 *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t InterpretedTensorValue;
  uint64_t v6;
  MIL::Fp16 *v7;
  __int16 v8;
  _WORD *v9;
  uint64_t ParameterValue;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  MIL::IRValueType *OutputType;
  ANEMachineIR::Utils *v17;
  ANEMachineIR::Utils *v18;
  const MIL::IRTensorValueType *v19;
  ANEMachineIR::Utils *v20;
  const MIL::IRTensorValueType *v21;
  const MIL::IRTensorValueType *v22;
  uint64_t v23;
  void *v24;
  ANEMachineIR::Utils *v25;
  const MIL::IRTensorValueType *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t j;
  MIL::Fp16 *v32;
  unsigned int v33;
  __int16 v34;
  __int16 v35;
  char *v36;
  _WORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int16 v45;
  uint64_t v46;
  unint64_t i;
  MIL::Fp16 *v48;
  __int16 v49;
  __int16 v50;
  char *v51;
  _WORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int16 v60;
  MIL::Fp16 *v61;
  __int16 v62;
  _WORD *v63;
  MIL::Fp16 *v64;
  MIL::Fp16 *v65;
  __int16 v66;
  MIL::Fp16 *v67;
  unsigned int v68;
  __int16 v69;
  MIL::Fp16 *v70;
  char v71;
  MIL::Fp16 *v72;
  uint64_t v73;
  __int16 *v74;
  __int16 v75;
  _QWORD *v76;
  char *v77;
  unint64_t k;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  __int16 v87;
  std::string *v88;
  __int128 v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  MIL::IRValueType *v113;
  void **v114;
  _QWORD *v115;
  uint64_t v116;
  unsigned __int8 *v117;
  MIL::IRValueType *v118;
  void **v119;
  _QWORD *v120;
  uint64_t v121;
  unsigned __int8 *v122;
  MIL::IRValueType *v123;
  void **v124;
  _QWORD *v125;
  uint64_t v126;
  unsigned __int8 *v127;
  MIL::IRValueType *v128;
  void **v129;
  _QWORD *v130;
  uint64_t v131;
  unsigned __int8 *v132;
  MIL::IRValueType *v133;
  void **v134;
  _QWORD *v135;
  uint64_t v136;
  unsigned __int8 *v137;
  MIL::IRValueType *v138;
  void **v139;
  _QWORD *v140;
  uint64_t v141;
  unsigned __int8 *v142;
  MIL::IRValueType *v143;
  void **v144;
  _QWORD *v145;
  uint64_t v146;
  unsigned __int8 *v147;
  MIL::IRValueType *v148;
  void **v149;
  _QWORD *v150;
  uint64_t v151;
  unsigned __int8 *v152;
  MIL::IRValueType *v153;
  void **v154;
  uint64_t (***p_Data)();
  uint64_t v156;
  std::runtime_error *exception;
  int v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  char v162;
  char v163;
  int v164;
  int v165;
  int v166;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  void *v170;
  __int128 v171;
  uint64_t v172;
  void *v173;
  char *v174;
  char *v175;
  void *v176[3];
  void *v177;
  void *v178;
  void *__dst[3];
  void *v180;
  _BYTE *v181;
  void **v182;
  _BYTE v183[24];
  _BYTE *v184;
  _BYTE v185[24];
  _BYTE *v186;
  _BYTE v187[24];
  _BYTE *v188;
  _BYTE v189[24];
  _BYTE *v190;
  _BYTE v191[24];
  _BYTE *v192;
  _BYTE v193[24];
  _BYTE *v194;
  _BYTE v195[24];
  _BYTE *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  void *__src;
  void *v202;
  uint64_t v203;
  std::string __p;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  void *v208[6];
  uint64_t (**Data)();
  uint64_t v210;
  uint64_t (***v211)();
  uint64_t v212;

  v212 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "y");
  v6 = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue)
      goto LABEL_5;
LABEL_15:
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "No value for x");
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!InterpretedTensorValue)
    goto LABEL_15;
LABEL_5:
  if (!v6)
  {
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "No value for y");
    return;
  }
  v7 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
  v8 = MIL::Fp16::FromFloat(v7, 1.0);
  v9 = operator new(2uLL);
  v170 = v9;
  *v9 = v8;
  *(_QWORD *)&v171 = v9 + 1;
  *((_QWORD *)&v171 + 1) = v9 + 1;
  MIL::ANEMachineIR::GetScalarOrVectorOrDefault<MIL::Fp16>(a1, (uint64_t)&v170, (uint64_t)&v180);
  if (v170)
  {
    *(_QWORD *)&v171 = v170;
    operator delete(v170);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "acc_left_shift");
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue)
    && (v11 = (char *)MEMORY[0x20BCFEE94]()) != 0)
  {
    v163 = *v11;
  }
  else
  {
    v163 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_right_shift");
  v12 = MIL::IROperation::TryGetParameterValue();
  if (v12
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12)
    && (v13 = (char *)MEMORY[0x20BCFEE94]()) != 0)
  {
    v162 = *v13;
  }
  else
  {
    v162 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  v165 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v17 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(OutputType);
  v164 = (*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)v17 + 88))(v17);
  v18 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  ANEMachineIR::Utils::GetStaticTensorShape(v18, v19, (uint64_t)__dst);
  v20 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  ANEMachineIR::Utils::GetStaticTensorShape(v20, v21, (uint64_t)&v177);
  ANEMachineIR::Utils::GetStaticTensorShape(v17, v22, (uint64_t)v176);
  if (v166 == 4)
  {
    v23 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    v24 = 0;
  }
  else
  {
    v25 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    ANEMachineIR::Utils::GetStaticTensorShape(v25, v26, (uint64_t)&__p);
    v27 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
    v28 = 1;
    while (v27 != (uint64_t *)__p.__r_.__value_.__l.__size_)
    {
      v29 = *v27++;
      v28 *= v29;
    }
    v170 = 0;
    v171 = 0uLL;
    std::vector<MIL::Fp16>::reserve(&v170, v28);
    if (v166 == 9)
    {
      Data = (uint64_t (**)())MIL::IRTensorValue::GetDataView<signed char>();
      v210 = v46;
      if (v28)
      {
        for (i = 0; i != v28; ++i)
        {
          v48 = (MIL::Fp16 *)MIL::Util::Span<signed char const,18446744073709551615ul>::operator[](&Data, i);
          v49 = MIL::Fp16::FromFloat(v48, (float)*(char *)v48);
          v50 = v49;
          v51 = (char *)v171;
          if ((unint64_t)v171 >= *((_QWORD *)&v171 + 1))
          {
            v53 = (char *)v170;
            v54 = v171 - (_QWORD)v170;
            if ((uint64_t)(v171 - (_QWORD)v170) <= -3)
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            v55 = v54 >> 1;
            if (*((_QWORD *)&v171 + 1) - (_QWORD)v170 <= (unint64_t)((v54 >> 1) + 1))
              v56 = v55 + 1;
            else
              v56 = *((_QWORD *)&v171 + 1) - (_QWORD)v170;
            if (*((_QWORD *)&v171 + 1) - (_QWORD)v170 >= 0x7FFFFFFFFFFFFFFEuLL)
              v57 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v57 = v56;
            if (v57)
            {
              v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v171 + 8, v57);
              v53 = (char *)v170;
              v51 = (char *)v171;
            }
            else
            {
              v58 = 0;
            }
            v59 = &v58[2 * v55];
            *(_WORD *)v59 = v50;
            v52 = v59 + 2;
            while (v51 != v53)
            {
              v60 = *((_WORD *)v51 - 1);
              v51 -= 2;
              *((_WORD *)v59 - 1) = v60;
              v59 -= 2;
            }
            v170 = v59;
            *(_QWORD *)&v171 = v52;
            *((_QWORD *)&v171 + 1) = &v58[2 * v57];
            if (v53)
              operator delete(v53);
          }
          else
          {
            *(_WORD *)v171 = v49;
            v52 = v51 + 2;
          }
          *(_QWORD *)&v171 = v52;
        }
      }
    }
    else
    {
      if (v166 != 14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unexpected dtype copying to fp16.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      Data = (uint64_t (**)())MIL::IRTensorValue::GetDataView<unsigned char>();
      v210 = v30;
      if (v28)
      {
        for (j = 0; j != v28; ++j)
        {
          v32 = (MIL::Fp16 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::operator[](&Data, j);
          LOBYTE(v33) = *(_BYTE *)v32;
          v34 = MIL::Fp16::FromFloat(v32, (float)v33);
          v35 = v34;
          v36 = (char *)v171;
          if ((unint64_t)v171 >= *((_QWORD *)&v171 + 1))
          {
            v38 = (char *)v170;
            v39 = v171 - (_QWORD)v170;
            if ((uint64_t)(v171 - (_QWORD)v170) <= -3)
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            v40 = v39 >> 1;
            if (*((_QWORD *)&v171 + 1) - (_QWORD)v170 <= (unint64_t)((v39 >> 1) + 1))
              v41 = v40 + 1;
            else
              v41 = *((_QWORD *)&v171 + 1) - (_QWORD)v170;
            if (*((_QWORD *)&v171 + 1) - (_QWORD)v170 >= 0x7FFFFFFFFFFFFFFEuLL)
              v42 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v42 = v41;
            if (v42)
            {
              v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v171 + 8, v42);
              v38 = (char *)v170;
              v36 = (char *)v171;
            }
            else
            {
              v43 = 0;
            }
            v44 = &v43[2 * v40];
            *(_WORD *)v44 = v35;
            v37 = v44 + 2;
            while (v36 != v38)
            {
              v45 = *((_WORD *)v36 - 1);
              v36 -= 2;
              *((_WORD *)v44 - 1) = v45;
              v44 -= 2;
            }
            v170 = v44;
            *(_QWORD *)&v171 = v37;
            *((_QWORD *)&v171 + 1) = &v43[2 * v42];
            if (v38)
              operator delete(v38);
          }
          else
          {
            *(_WORD *)v171 = v34;
            v37 = v36 + 2;
          }
          *(_QWORD *)&v171 = v37;
        }
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v24 = v170;
    v23 = (uint64_t)v170;
  }
  v61 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "bias");
  v62 = MIL::Fp16::FromFloat(v61, 0.0);
  v63 = operator new(2uLL);
  v170 = v63;
  *v63 = v62;
  *(_QWORD *)&v171 = v63 + 1;
  *((_QWORD *)&v171 + 1) = v63 + 1;
  MIL::ANEMachineIR::GetScalarOrVectorOrDefault<MIL::Fp16>(a1, (uint64_t)&v170, (uint64_t)&v173);
  if (v170)
  {
    *(_QWORD *)&v171 = v170;
    operator delete(v170);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "bias");
  v64 = (MIL::Fp16 *)MIL::IROperation::TryGetParameterValue();
  v65 = v64;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v66 = MIL::Fp16::FromFloat(v64, 1.0);
  if (!v65)
  {
    v69 = v66;
    goto LABEL_134;
  }
  if (v166 == 4)
  {
    v72 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
    v69 = MIL::Fp16::FromFloat(v72, 1.0);
    v73 = MIL::IROperation::TryGetParameterValue();
    if (v73)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73))
      {
        v74 = (__int16 *)MEMORY[0x20BCFEE7C]();
        if (v74)
          v69 = *v74;
      }
    }
  }
  else
  {
    if (v166 == 9)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
      v70 = (MIL::Fp16 *)MIL::IROperation::TryGetParameterValue();
      if (v70
        && (v70 = (MIL::Fp16 *)(*(uint64_t (**)(MIL::Fp16 *))(*(_QWORD *)v70 + 40))(v70)) != 0
        && (v70 = (MIL::Fp16 *)MEMORY[0x20BCFEE94]()) != 0)
      {
        v71 = *(_BYTE *)v70;
      }
      else
      {
        v71 = 1;
      }
      v75 = MIL::Fp16::FromFloat(v70, (float)v71);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
      v67 = (MIL::Fp16 *)MIL::IROperation::TryGetParameterValue();
      if (v67
        && (v67 = (MIL::Fp16 *)(*(uint64_t (**)(MIL::Fp16 *))(*(_QWORD *)v67 + 40))(v67)) != 0
        && (v67 = (MIL::Fp16 *)MEMORY[0x20BCFEEB8]()) != 0)
      {
        v68 = *(unsigned __int8 *)v67;
      }
      else
      {
        v68 = 1;
      }
      v75 = MIL::Fp16::FromFloat(v67, (float)v68);
    }
    v69 = v75;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v76 = v177;
  if (v178 == v177)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v77 = v174;
  if (*(_QWORD *)v177 == (v174 - (_BYTE *)v173) >> 1)
  {
LABEL_134:
    v171 = 0uLL;
    v172 = 0;
    MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v170, &Data);
    if ((_DWORD)v170)
    {
      *(_DWORD *)a3 = (_DWORD)v170;
      *(_OWORD *)(a3 + 8) = v171;
      *(_QWORD *)(a3 + 24) = v172;
      v171 = 0uLL;
      v172 = 0;
      goto LABEL_284;
    }
    __p.__r_.__value_.__r.__words[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)__dst, (uint64_t)__dst[0], (char *)&__p, &__p.__r_.__value_.__s.__data_[8], 1);
    *(int64x2_t *)&__p.__r_.__value_.__l.__data_ = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v177, (uint64_t)v177, (char *)&__p, &__p.__r_.__value_.__s.__data_[16], 2);
    __p.__r_.__value_.__r.__words[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)v176, (uint64_t)v176[0], (char *)&__p, &__p.__r_.__value_.__s.__data_[8], 1);
    memset(v208, 0, 24);
    v207 = 0u;
    v206 = 0u;
    v205 = 0u;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_206993660;
    LOWORD(__p.__r_.__value_.__r.__words[2]) = 0;
    __p.__r_.__value_.__s.__data_[18] = 0;
    __src = (void *)0x100000001;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v205, (char *)&__src, (uint64_t)&v202, 2uLL);
    __src = (void *)0x100000001;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v206 + 8, (char *)&__src, (uint64_t)&v202, 2uLL);
    v202 = 0;
    __src = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v208, (char *)&__src, (uint64_t)&v203, 4uLL);
    v208[3] = (void *)((v174 - (_BYTE *)v173) >> 1);
    v208[4] = (void *)((v181 - (_BYTE *)v180) >> 1);
    if (v165 != 4)
    {
      if (v165 != 9)
      {
        if (v165 != 14)
        {
          v97 = "Unimplemented input dtype";
LABEL_162:
          *(_DWORD *)a3 = 3;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v97);
LABEL_278:
          if (v208[0])
          {
            v208[1] = v208[0];
            operator delete(v208[0]);
          }
          if (*((_QWORD *)&v206 + 1))
          {
            *(_QWORD *)&v207 = *((_QWORD *)&v206 + 1);
            operator delete(*((void **)&v206 + 1));
          }
          if ((_QWORD)v205)
          {
            *((_QWORD *)&v205 + 1) = v205;
            operator delete((void *)v205);
          }
LABEL_284:
          p_Data = v211;
          if (v211 == &Data)
          {
            v156 = 4;
            p_Data = &Data;
          }
          else
          {
            if (!v211)
              goto LABEL_289;
            v156 = 5;
          }
          (*p_Data)[v156]();
LABEL_289:
          if (SHIBYTE(v172) < 0)
          {
            v90 = (void *)v171;
            goto LABEL_291;
          }
          goto LABEL_292;
        }
        if (v164 != 14)
        {
          if (v164 != 9)
          {
            if (v164 == 4)
            {
              v91 = MIL::IRTensorValue::GetDataView<unsigned char>();
              v92 = (uint64_t)v211;
              if (v211)
              {
                if (v211 == &Data)
                {
                  v194 = v193;
                  ((void (*)(uint64_t (***)(), _BYTE *))Data[3])(&Data, v193);
LABEL_268:
                  LOBYTE(v159) = 0;
                  MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(v91, (uint64_t *)__dst, v23, v166, &v177, (uint64_t)v176, (unint64_t *)&__p, 0, (uint64_t)&__src, v163, 0, v162, (uint64_t)&v173, (MIL::Fp16 **)&v180, v65 != 0, v158, v69, v159, (uint64_t)v193);
                  v150 = v194;
                  if (v194 == v193)
                  {
                    v151 = 4;
                    v150 = v193;
                  }
                  else
                  {
                    if (!v194)
                    {
LABEL_273:
                      (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(_QWORD *)a1 + 200))(&v168, a1);
                      v152 = v168;
                      if (v169 == v168)
                        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                      v153 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                      MIL::IRValueType::AsTensorType(v153);
                      MIL::IRTensorValueType::MakeFloat16Value();
                      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v152, (uint64_t *)&v182);
                      v154 = v182;
                      v182 = 0;
                      if (v154)
                        (*((void (**)(void **))*v154 + 1))(v154);
LABEL_276:
                      v182 = (void **)&v168;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v182);
                      *(_DWORD *)a3 = 0;
                      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
                      if (__src)
                      {
                        v202 = __src;
                        operator delete(__src);
                      }
                      goto LABEL_278;
                    }
                    v151 = 5;
                  }
                  (*(void (**)(void))(*v150 + 8 * v151))();
                  goto LABEL_273;
                }
                v92 = ((uint64_t (*)(uint64_t (***)()))(*v211)[2])(v211);
              }
              v194 = (_BYTE *)v92;
              goto LABEL_268;
            }
            goto LABEL_161;
          }
          v104 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v105 = (uint64_t)v211;
          if (v211)
          {
            if (v211 == &Data)
            {
              v190 = v189;
              ((void (*)(uint64_t (***)(), _BYTE *))Data[3])(&Data, v189);
LABEL_228:
              LOBYTE(v159) = 0;
              MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(v104, (uint64_t *)__dst, v23, v166, &v177, (uint64_t)v176, (unint64_t *)&__p, 0, (unint64_t *)&__src, v163, 0, v162, (uint64_t)&v173, (MIL::Fp16 **)&v180, v65 != 0, v158, v69, v159, (uint64_t)v189);
              v130 = v190;
              if (v190 == v189)
              {
                v131 = 4;
                v130 = v189;
              }
              else
              {
                if (!v190)
                {
LABEL_233:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(_QWORD *)a1 + 200))(&v168, a1);
                  v132 = v168;
                  if (v169 == v168)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v133 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v133);
                  MIL::IRTensorValueType::MakeInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v132, (uint64_t *)&v182);
                  v134 = v182;
                  v182 = 0;
                  if (v134)
                    (*((void (**)(void **))*v134 + 1))(v134);
                  goto LABEL_276;
                }
                v131 = 5;
              }
              (*(void (**)(void))(*v130 + 8 * v131))();
              goto LABEL_233;
            }
            v105 = ((uint64_t (*)(uint64_t (***)()))(*v211)[2])(v211);
          }
          v190 = (_BYTE *)v105;
          goto LABEL_228;
        }
        v108 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v109 = (uint64_t)v211;
        if (v211)
        {
          if (v211 == &Data)
          {
            v192 = v191;
            ((void (*)(uint64_t (***)(), _BYTE *))Data[3])(&Data, v191);
LABEL_258:
            LOBYTE(v159) = 0;
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(v108, (uint64_t *)__dst, v23, v166, &v177, (uint64_t)v176, (unint64_t *)&__p, 0, (unint64_t *)&__src, v163, 0, v162, (uint64_t)&v173, (MIL::Fp16 **)&v180, v65 != 0, v158, v69, v159, (uint64_t)v191);
            v145 = v192;
            if (v192 == v191)
            {
              v146 = 4;
              v145 = v191;
            }
            else
            {
              if (!v192)
              {
LABEL_263:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(_QWORD *)a1 + 200))(&v168, a1);
                v147 = v168;
                if (v169 == v168)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v148 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v148);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v147, (uint64_t *)&v182);
                v149 = v182;
                v182 = 0;
                if (v149)
                  (*((void (**)(void **))*v149 + 1))(v149);
                goto LABEL_276;
              }
              v146 = 5;
            }
            (*(void (**)(void))(*v145 + 8 * v146))();
            goto LABEL_263;
          }
          v109 = ((uint64_t (*)(uint64_t (***)()))(*v211)[2])(v211);
        }
        v192 = (_BYTE *)v109;
        goto LABEL_258;
      }
      if (v164 != 14)
      {
        if (v164 != 9)
        {
          if (v164 == 4)
          {
            v93 = MIL::IRTensorValue::GetDataView<signed char>();
            v94 = (uint64_t)v211;
            if (v211)
            {
              if (v211 == &Data)
              {
                v188 = v187;
                ((void (*)(uint64_t (***)(), _BYTE *))Data[3])(&Data, v187);
LABEL_218:
                MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(v93, (uint64_t *)__dst, v23, v166, &v177, (uint64_t)v176, (unint64_t *)&__p, 0, (uint64_t)&__src, v163, 0, v162, (uint64_t)&v173, (MIL::Fp16 **)&v180, v65 != 0, v158, v69, 0, 0,
                  (uint64_t)v187);
                v125 = v188;
                if (v188 == v187)
                {
                  v126 = 4;
                  v125 = v187;
                }
                else
                {
                  if (!v188)
                  {
LABEL_223:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(_QWORD *)a1 + 200))(&v168, a1);
                    v127 = v168;
                    if (v169 == v168)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v128 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v128);
                    MIL::IRTensorValueType::MakeFloat16Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v127, (uint64_t *)&v182);
                    v129 = v182;
                    v182 = 0;
                    if (v129)
                      (*((void (**)(void **))*v129 + 1))(v129);
                    goto LABEL_276;
                  }
                  v126 = 5;
                }
                (*(void (**)(void))(*v125 + 8 * v126))();
                goto LABEL_223;
              }
              v94 = ((uint64_t (*)(uint64_t (***)()))(*v211)[2])(v211);
            }
            v188 = (_BYTE *)v94;
            goto LABEL_218;
          }
LABEL_161:
          v97 = "Unimplemented output dtype";
          goto LABEL_162;
        }
        v98 = MIL::IRTensorValue::GetDataView<signed char>();
        v99 = (uint64_t)v211;
        if (v211)
        {
          if (v211 == &Data)
          {
            v184 = v183;
            ((void (*)(uint64_t (***)(), _BYTE *))Data[3])(&Data, v183);
LABEL_188:
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(v98, (uint64_t *)__dst, v23, v166, &v177, (uint64_t)v176, (unint64_t *)&__p, 0, (unint64_t *)&__src, v163, 0, v162, (uint64_t)&v173, (MIL::Fp16 **)&v180, v65 != 0, v158, v69, 0, 0,
              (uint64_t)v183);
            v110 = v184;
            if (v184 == v183)
            {
              v111 = 4;
              v110 = v183;
            }
            else
            {
              if (!v184)
              {
LABEL_193:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(_QWORD *)a1 + 200))(&v168, a1);
                v112 = v168;
                if (v169 == v168)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v113 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v113);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v112, (uint64_t *)&v182);
                v114 = v182;
                v182 = 0;
                if (v114)
                  (*((void (**)(void **))*v114 + 1))(v114);
                goto LABEL_276;
              }
              v111 = 5;
            }
            (*(void (**)(void))(*v110 + 8 * v111))();
            goto LABEL_193;
          }
          v99 = ((uint64_t (*)(uint64_t (***)()))(*v211)[2])(v211);
        }
        v184 = (_BYTE *)v99;
        goto LABEL_188;
      }
      v100 = MIL::IRTensorValue::GetDataView<signed char>();
      v101 = (uint64_t)v211;
      if (v211)
      {
        if (v211 == &Data)
        {
          v186 = v185;
          ((void (*)(uint64_t (***)(), _BYTE *))Data[3])(&Data, v185);
LABEL_198:
          MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(v100, (uint64_t *)__dst, v23, v166, &v177, (uint64_t)v176, (unint64_t *)&__p, 0, (unint64_t *)&__src, v163, 0, v162, (uint64_t)&v173, (MIL::Fp16 **)&v180, v65 != 0, v158, v69, 0, 0,
            (uint64_t)v185);
          v115 = v186;
          if (v186 == v185)
          {
            v116 = 4;
            v115 = v185;
          }
          else
          {
            if (!v186)
            {
LABEL_203:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(_QWORD *)a1 + 200))(&v168, a1);
              v117 = v168;
              if (v169 == v168)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v118 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v118);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v117, (uint64_t *)&v182);
              v119 = v182;
              v182 = 0;
              if (v119)
                (*((void (**)(void **))*v119 + 1))(v119);
              goto LABEL_276;
            }
            v116 = 5;
          }
          (*(void (**)(void))(*v115 + 8 * v116))();
          goto LABEL_203;
        }
        v101 = ((uint64_t (*)(uint64_t (***)()))(*v211)[2])(v211);
      }
      v186 = (_BYTE *)v101;
      goto LABEL_198;
    }
    if (v164 != 14)
    {
      if (v164 != 9)
      {
        if (v164 != 4)
          goto LABEL_161;
        v95 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v96 = (uint64_t)v211;
        if (v211)
        {
          if (v211 == &Data)
          {
            v200 = v199;
            ((void (*)(uint64_t (***)(), _BYTE *))Data[3])(&Data, v199);
LABEL_248:
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(v95, (uint64_t *)__dst, v23, v166, &v177, (uint64_t)v176, (unint64_t *)&__p, 0, (uint64_t)&__src, v163, 0, v162, (uint64_t)&v173, (MIL::Fp16 **)&v180, v65 != 0, v158, v69, 0, 0,
              (uint64_t)v199);
            v140 = v200;
            if (v200 == v199)
            {
              v141 = 4;
              v140 = v199;
            }
            else
            {
              if (!v200)
              {
LABEL_253:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(_QWORD *)a1 + 200))(&v168, a1);
                v142 = v168;
                if (v169 == v168)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v143 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v143);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v142, (uint64_t *)&v182);
                v144 = v182;
                v182 = 0;
                if (v144)
                  (*((void (**)(void **))*v144 + 1))(v144);
                goto LABEL_276;
              }
              v141 = 5;
            }
            (*(void (**)(void))(*v140 + 8 * v141))();
            goto LABEL_253;
          }
          v96 = ((uint64_t (*)(uint64_t (***)()))(*v211)[2])(v211);
        }
        v200 = (_BYTE *)v96;
        goto LABEL_248;
      }
      v102 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v103 = (uint64_t)v211;
      if (v211)
      {
        if (v211 == &Data)
        {
          v196 = v195;
          ((void (*)(uint64_t (***)(), _BYTE *))Data[3])(&Data, v195);
LABEL_208:
          MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(v102, (uint64_t *)__dst, v23, v166, &v177, (uint64_t)v176, (unint64_t *)&__p, 0, (unint64_t *)&__src, v163, 0, v162, (uint64_t)&v173, (MIL::Fp16 **)&v180, v65 != 0, v158, v69, 0, 0,
            (uint64_t)v195);
          v120 = v196;
          if (v196 == v195)
          {
            v121 = 4;
            v120 = v195;
          }
          else
          {
            if (!v196)
            {
LABEL_213:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(_QWORD *)a1 + 200))(&v168, a1);
              v122 = v168;
              if (v169 == v168)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v123 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v123);
              MIL::IRTensorValueType::MakeInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v122, (uint64_t *)&v182);
              v124 = v182;
              v182 = 0;
              if (v124)
                (*((void (**)(void **))*v124 + 1))(v124);
              goto LABEL_276;
            }
            v121 = 5;
          }
          (*(void (**)(void))(*v120 + 8 * v121))();
          goto LABEL_213;
        }
        v103 = ((uint64_t (*)(uint64_t (***)()))(*v211)[2])(v211);
      }
      v196 = (_BYTE *)v103;
      goto LABEL_208;
    }
    v106 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    v107 = (uint64_t)v211;
    if (v211)
    {
      if (v211 == &Data)
      {
        v198 = v197;
        ((void (*)(uint64_t (***)(), _BYTE *))Data[3])(&Data, v197);
LABEL_238:
        MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(v106, (uint64_t *)__dst, v23, v166, &v177, (uint64_t)v176, (unint64_t *)&__p, 0, (unint64_t *)&__src, v163, 0, v162, (uint64_t)&v173, (MIL::Fp16 **)&v180, v65 != 0, v158, v69, 0, 0,
          (uint64_t)v197);
        v135 = v198;
        if (v198 == v197)
        {
          v136 = 4;
          v135 = v197;
        }
        else
        {
          if (!v198)
          {
LABEL_243:
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(_QWORD *)a1 + 200))(&v168, a1);
            v137 = v168;
            if (v169 == v168)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v138 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v138);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v137, (uint64_t *)&v182);
            v139 = v182;
            v182 = 0;
            if (v139)
              (*((void (**)(void **))*v139 + 1))(v139);
            goto LABEL_276;
          }
          v136 = 5;
        }
        (*(void (**)(void))(*v135 + 8 * v136))();
        goto LABEL_243;
      }
      v107 = ((uint64_t (*)(uint64_t (***)()))(*v211)[2])(v211);
    }
    v198 = (_BYTE *)v107;
    goto LABEL_238;
  }
  if (v174 - (_BYTE *)v173 == 2)
  {
    v160 = v23;
    v161 = v24;
    for (k = 0; *v76 - 1 > k; ++k)
    {
      if (v77 >= v175)
      {
        v79 = (char *)v173;
        v80 = v77 - (_BYTE *)v173;
        if (v77 - (_BYTE *)v173 <= -3)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v81 = v80 >> 1;
        if (v175 - (_BYTE *)v173 <= (unint64_t)((v80 >> 1) + 1))
          v82 = v81 + 1;
        else
          v82 = v175 - (_BYTE *)v173;
        if ((unint64_t)(v175 - (_BYTE *)v173) >= 0x7FFFFFFFFFFFFFFELL)
          v83 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
        {
          v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v175, v83);
          v79 = (char *)v173;
          v85 = v174;
        }
        else
        {
          v84 = 0;
          v85 = v77;
        }
        v86 = &v84[2 * v81];
        *(_WORD *)v86 = *((_WORD *)v77 - 1);
        v77 = v86 + 2;
        while (v85 != v79)
        {
          v87 = *((_WORD *)v85 - 1);
          v85 -= 2;
          *((_WORD *)v86 - 1) = v87;
          v86 -= 2;
        }
        v173 = v86;
        v174 = v77;
        v175 = &v84[2 * v83];
        if (v79)
          operator delete(v79);
      }
      else
      {
        *(_WORD *)v77 = *((_WORD *)v77 - 1);
        v77 += 2;
      }
      v174 = v77;
      v76 = v177;
      if (v178 == v177)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    v23 = v160;
    v24 = v161;
    goto LABEL_134;
  }
  *(_DWORD *)a3 = 3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
  v88 = std::string::insert(&__p, 0, "Vector size wrong for ");
  v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v88->__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 8) = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v90 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_291:
    operator delete(v90);
  }
LABEL_292:
  if (v173)
  {
    v174 = (char *)v173;
    operator delete(v173);
  }
  if (v24)
    operator delete(v24);
  if (v176[0])
  {
    v176[1] = v176[0];
    operator delete(v176[0]);
  }
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
}

void sub_206890CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45)
{
  void *v45;
  uint64_t v46;
  void *v48;
  _QWORD *v49;
  uint64_t v50;

  v48 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v48;
    operator delete(v48);
  }
  ANEMachineIR::Validators::NeConvParameterValues::~NeConvParameterValues((ANEMachineIR::Validators::NeConvParameterValues *)&STACK[0x260]);
  v49 = *(_QWORD **)(v46 - 128);
  if (v49 == (_QWORD *)(v46 - 152))
  {
    v50 = 4;
    v49 = (_QWORD *)(v46 - 152);
  }
  else
  {
    if (!v49)
      goto LABEL_8;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_8:
  if (a32 < 0)
    operator delete(a27);
  if (a33)
    operator delete(a33);
  if (v45)
    operator delete(v45);
  if (a36)
    operator delete(a36);
  if (a39)
    operator delete(a39);
  if (a42)
    operator delete(a42);
  if (a45)
    operator delete(a45);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::GetScalarOrVectorOrDefault<MIL::Fp16>(MIL::Fp16 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ParameterValue;
  __int16 *v6;
  __int16 v7;
  _WORD *v8;
  MIL::IRValue *v9;
  uint64_t v10;
  ANEMachineIR::Utils *v11;
  const MIL::IRTensorValueType *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t i;
  _WORD *v16;
  _WORD *v17;
  unint64_t v18;
  _WORD *v19;
  _WORD *v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  unint64_t *v30;
  unint64_t *v31;

  MIL::Fp16::FromFloat(a1, 0.0);
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue)
      && (v6 = (__int16 *)MEMORY[0x20BCFEE7C]()) != 0)
    {
      v7 = *v6;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v8 = operator new(2uLL);
      *(_QWORD *)a3 = v8;
      *v8++ = v7;
      *(_QWORD *)(a3 + 8) = v8;
      *(_QWORD *)(a3 + 16) = v8;
    }
    else
    {
      v9 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      v10 = MIL::IRValue::AsTensor(v9);
      v11 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      ANEMachineIR::Utils::GetStaticTensorShape(v11, v12, (uint64_t)&v30);
      if (v31 == v30)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v13 = *v30;
      v31 = v30;
      operator delete(v30);
      v30 = (unint64_t *)MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v31 = v14;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      std::vector<MIL::Fp16>::reserve((void **)a3, v13);
      if (v13)
      {
        for (i = 0; i != v13; ++i)
        {
          v16 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::operator[](&v30, i);
          v17 = v16;
          v19 = *(_WORD **)(a3 + 8);
          v18 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v19 >= v18)
          {
            v21 = *(_WORD **)a3;
            v22 = (uint64_t)v19 - *(_QWORD *)a3;
            if (v22 <= -3)
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            v23 = v22 >> 1;
            v24 = v18 - (_QWORD)v21;
            if (v24 <= (v22 >> 1) + 1)
              v25 = v23 + 1;
            else
              v25 = v24;
            if (v24 >= 0x7FFFFFFFFFFFFFFELL)
              v26 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v26 = v25;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a3 + 16, v26);
              v21 = *(_WORD **)a3;
              v19 = *(_WORD **)(a3 + 8);
            }
            else
            {
              v27 = 0;
            }
            v28 = &v27[2 * v23];
            *(_WORD *)v28 = *v17;
            v20 = v28 + 2;
            while (v19 != v21)
            {
              v29 = *--v19;
              *((_WORD *)v28 - 1) = v29;
              v28 -= 2;
            }
            *(_QWORD *)a3 = v28;
            *(_QWORD *)(a3 + 8) = v20;
            *(_QWORD *)(a3 + 16) = &v27[2 * v26];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *v19 = *v16;
            v20 = v19 + 1;
          }
          *(_QWORD *)(a3 + 8) = v20;
        }
      }
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  }
}

void sub_20689139C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, int a18, char a19, uint64_t a20)
{
  unint64_t *v21;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  MIL::Fp16 *Float;
  float v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  MIL::Fp16 *v58;
  int v59;
  int v60;
  double v61;
  double v62;
  unint64_t v63;
  MIL::Fp16 *v64;
  MIL::Fp16 *v65;
  float v66;
  float v67;
  double v68;
  float v69;
  float v70;
  float *v71;
  float *v72;
  float *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  float *v79;
  int v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  uint64_t i;
  float v86;
  float v87;
  unsigned int v88;
  int v89;
  std::vector<int>::pointer end;
  int *v91;
  std::vector<int>::pointer begin;
  int64_t v93;
  unint64_t v94;
  int64_t v95;
  unint64_t v96;
  char *v97;
  int *v98;
  int v99;
  char *v100;
  char *v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t j;
  uint64_t k;
  __int16 v128;
  float v129;
  float v130;
  double v131;
  long double v132;
  double v133;
  float v134;
  float v135;
  float v136;
  long double v137;
  double v138;
  uint64_t v139;
  MIL::Fp16 *v140;
  float v141;
  _QWORD *v142;
  uint64_t v143;
  std::vector<int>::value_type *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *result;
  uint64_t v149;
  std::runtime_error *exception;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  unint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  __int128 __e;
  uint64_t *v189;
  __int128 *v190;
  std::vector<int> v191;
  void *__p;
  float *v193;
  char *v194;
  __int16 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t *v207;
  __int16 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int16 v219;
  _QWORD v220[3];
  _QWORD *v221;
  std::vector<int>::value_type __u[6];
  std::vector<int>::value_type *v223;
  _QWORD v224[3];
  _QWORD *v225;
  _QWORD v226[3];
  _QWORD *v227;
  uint64_t v228;

  v21 = a7;
  v228 = *MEMORY[0x24BDAC8D0];
  v219 = a17;
  v217 = a3;
  v218 = a1;
  v25 = *a7;
  if (*a7 == 3)
  {
    v26 = *a2;
    v27 = a2[1] - *a2;
    if (v27 <= 8)
      goto LABEL_190;
    v28 = *(_QWORD *)(v26 + 8);
    v215 = 0;
    v216 = v28;
    goto LABEL_5;
  }
  v28 = 1;
  v215 = 0;
  v216 = 1;
  v26 = *a2;
  v27 = a2[1] - *a2;
  if (v25 >= 2)
  {
LABEL_5:
    if (v27 > 0x10)
    {
      v29 = *(_QWORD *)(v27 + v26 - 24);
      v214 = 0;
      v215 = v29;
      goto LABEL_8;
    }
LABEL_190:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v29 = 1;
  v214 = 0;
  v215 = 1;
  v28 = 1;
  if (v27 <= 8)
    goto LABEL_190;
LABEL_8:
  v30 = v27 + v26;
  v31 = *(_QWORD *)(v30 - 16);
  v213 = 0;
  v214 = v31;
  v212 = *(_QWORD *)(v30 - 8);
  v213 = v212;
  v32 = v212 * v31;
  v210 = v32 * v29;
  v211 = v32;
  v209 = v32 * v29 * v28;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v219);
  v208 = MIL::Fp16::FromFloat(Float, v34);
  v227 = 0;
  if (a15)
  {
    *(_QWORD *)&v201 = &v213;
    *((_QWORD *)&v201 + 1) = &v208;
    v202 = &v218;
    v203 = &v209;
    v204 = &v210;
    v205 = &v211;
    v206 = &v212;
    std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v226, (uint64_t)&v201);
  }
  else
  {
    *(_QWORD *)&v201 = &v216;
    *((_QWORD *)&v201 + 1) = &v215;
    v202 = &v214;
    v203 = &v218;
    v204 = &v209;
    v205 = &v210;
    v206 = &v211;
    v207 = &v212;
    if (a8)
      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v226, &v201);
    else
      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v226, &v201);
  }
  v224[0] = &off_24BFE8188;
  v225 = v224;
  if (a19)
    std::function<MIL::Fp16 ()(MIL::Fp16)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},void>(v224);
  v36 = *(uint64_t **)a6;
  v35 = *(_QWORD *)(a6 + 8);
  v37 = v35 - *(_QWORD *)a6;
  if (v35 == *(_QWORD *)a6)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v38 = (uint64_t)v37 >> 3;
  v174 = *v36;
  v39 = *v21;
  if (*v21 == 3)
  {
    if (v37 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v40 = v36[1];
    goto LABEL_21;
  }
  if (v39 >= 2)
  {
    v40 = 1;
LABEL_21:
    if (v37 <= 0x10)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v41 = &v36[v38];
    v42 = *(v41 - 2);
    v176 = *(v41 - 3);
    v43 = *(v41 - 1);
    if (v39 == 3)
    {
      if (a5[1] - *a5 <= 8uLL)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v44 = *(_QWORD *)(*a5 + 8);
    }
    else
    {
      v44 = 1;
    }
    v178 = v44;
    v45 = *a5;
    v46 = a5[1] - *a5;
    if (v46 <= 0x18)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v164 = v43 * v42;
    v47 = *(_QWORD *)(v46 + v45 - 32);
    goto LABEL_31;
  }
  if (v37 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v45 = *a5;
  v46 = a5[1] - *a5;
  if (v46 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v48 = &v36[v38];
  v42 = *(v48 - 2);
  v43 = *(v48 - 1);
  v164 = v43 * v42;
  v47 = 1;
  v40 = 1;
  v176 = 1;
  v178 = 1;
LABEL_31:
  v49 = v46 + v45;
  v50 = *(_QWORD *)(v49 - 24);
  v51 = *(_QWORD *)(v49 - 16);
  v200 = *(_QWORD *)(v49 - 8);
  v186 = v51;
  v173 = v200;
  v199 = v200 * v51;
  v182 = v50;
  v198 = v200 * v51 * v50;
  v197 = v198 * v47;
  v196 = v198 * v47 * v178;
  *(_QWORD *)&v201 = &v196;
  *((_QWORD *)&v201 + 1) = &v197;
  v202 = &v198;
  v203 = &v199;
  v204 = &v200;
  v52 = v21[4];
  if (v39 >= 3)
  {
    v53 = v21[3];
    v54 = v52 - v53;
    if (v52 - v53 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v55 = *(_DWORD *)(v52 - 12);
    goto LABEL_37;
  }
  v53 = v21[3];
  if (v39 == 2)
  {
    v54 = v52 - v53;
    if (v52 - v53 <= 4)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v55 = 1;
LABEL_37:
    v162 = v55;
    v56 = *(_DWORD *)(v54 + v53 - 8);
    goto LABEL_39;
  }
  v56 = 1;
  v162 = 1;
LABEL_39:
  v163 = v56;
  v180 = v47;
  if (v52 == v53)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v166 = *(_DWORD *)(v52 - 4);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  v170 = v40;
  v172 = v43;
  v57 = v40 * v174 * v176 * v42 * v43;
  std::vector<MIL::Fp16>::reserve((void **)a9, v57);
  v195 = MIL::Fp16::FromFloat(v58, 0.0);
  std::vector<MIL::Fp16>::assign((char **)a9, v57, &v195);
  if (a4 == 4)
    v59 = 20;
  else
    v59 = 10;
  v60 = v59 + a10;
  v61 = ldexp(1.0, v60);
  v62 = ldexp(1.0, v60 + a11);
  v63 = v172;
  if (*((_BYTE *)v21 + 16))
    v63 = v172 / v21[1];
  v169 = v42;
  v171 = v21;
  __p = 0;
  v193 = 0;
  v194 = 0;
  std::vector<float>::reserve(&__p, v63);
  v65 = *a14;
  v64 = a14[1];
  if (v64 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    v67 = exp2(-(double)(v60 + a12)) * v66;
    *(float *)__u = v67;
    std::vector<float>::assign((char **)&__p, v63, __u);
  }
  else if (v65 != v64)
  {
    v68 = exp2(-(double)(v60 + a12));
    do
    {
      MIL::Fp16::GetFloat(v65);
      v70 = v68 * v69;
      v71 = v193;
      if (v193 >= (float *)v194)
      {
        v73 = (float *)__p;
        v74 = ((char *)v193 - (_BYTE *)__p) >> 2;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v76 = v194 - (_BYTE *)__p;
        if ((v194 - (_BYTE *)__p) >> 1 > v75)
          v75 = v76 >> 1;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
          v77 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        if (v77)
        {
          v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v194, v77);
          v73 = (float *)__p;
          v71 = v193;
        }
        else
        {
          v78 = 0;
        }
        v79 = (float *)&v78[4 * v74];
        *v79 = v70;
        v72 = v79 + 1;
        while (v71 != v73)
        {
          v80 = *((_DWORD *)v71-- - 1);
          *((_DWORD *)v79-- - 1) = v80;
        }
        __p = v79;
        v193 = v72;
        v194 = &v78[4 * v77];
        if (v73)
          operator delete(v73);
      }
      else
      {
        *v193 = v70;
        v72 = v71 + 1;
      }
      v193 = v72;
      v65 = (MIL::Fp16 *)((char *)v65 + 2);
    }
    while (v65 != v64);
  }
  memset(&v191, 0, sizeof(v191));
  std::vector<int>::reserve(&v191, v63);
  if (a15)
  {
    __u[0] = 0;
    std::vector<int>::assign(&v191, v63, __u);
  }
  else
  {
    v81 = v62;
    if (*(_QWORD *)(a13 + 8) - *(_QWORD *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      v83 = v82 * v81;
      v84 = llroundf(v83);
      if (fabsf(v83) < 1.0)
        v84 = 0;
      __u[0] = v84;
      std::vector<int>::assign(&v191, v63, __u);
    }
    else if (v63)
    {
      for (i = 0; i != v63; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(_QWORD *)a13 + 2 * i));
        v87 = v86 * v81;
        v88 = llroundf(v87);
        if (fabsf(v87) >= 1.0)
          v89 = v88;
        else
          v89 = 0;
        end = v191.__end_;
        if (v191.__end_ >= v191.__end_cap_.__value_)
        {
          begin = v191.__begin_;
          v93 = v191.__end_ - v191.__begin_;
          v94 = v93 + 1;
          if ((unint64_t)(v93 + 1) >> 62)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v95 = (char *)v191.__end_cap_.__value_ - (char *)v191.__begin_;
          if (((char *)v191.__end_cap_.__value_ - (char *)v191.__begin_) >> 1 > v94)
            v94 = v95 >> 1;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
            v96 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v96 = v94;
          if (v96)
          {
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v191.__end_cap_, v96);
            begin = v191.__begin_;
            end = v191.__end_;
          }
          else
          {
            v97 = 0;
          }
          v98 = (int *)&v97[4 * v93];
          *v98 = v89;
          v91 = v98 + 1;
          while (end != begin)
          {
            v99 = *--end;
            *--v98 = v99;
          }
          v191.__begin_ = v98;
          v191.__end_ = v91;
          v191.__end_cap_.__value_ = (int *)&v97[4 * v96];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v191.__end_ = v89;
          v91 = end + 1;
        }
        v191.__end_ = v91;
      }
    }
  }
  v100 = (char *)v21[10];
  if (*v21 == 3)
  {
    v101 = (char *)v21[9];
    if (v100 == v101)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v102 = *(_DWORD *)v101;
    goto LABEL_99;
  }
  v101 = (char *)v21[9];
  if (*v21 >= 2)
  {
    v102 = 0;
LABEL_99:
    v103 = v100 - v101;
    if (v103 <= 0xC)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v104 = *(_DWORD *)&v101[v103 - 16];
    goto LABEL_103;
  }
  v103 = v100 - v101;
  if (v103 <= 4)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v104 = 0;
  v102 = 0;
LABEL_103:
  v105 = *(_DWORD *)&v101[v103 - 8];
  v223 = 0;
  switch(a4)
  {
    case 4:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},void>(__u);
      break;
    case 9:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},void>(__u);
      break;
    case 14:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},void>(__u);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v221 = 0;
  if (a15)
  {
    *(_QWORD *)&__e = &v213;
    *((_QWORD *)&__e + 1) = a13;
    v189 = &v217;
    v190 = &v201;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v220, &__e);
  }
  else
  {
    *(_QWORD *)&__e = &v217;
    *((_QWORD *)&__e + 1) = &v201;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(v220, &__e);
  }
  v106 = v170;
  v107 = v21[1];
  if (v107)
  {
    v184 = 0;
    v108 = 0;
    v109 = a20;
    v110 = v173;
    v111 = v61;
    v157 = -v102;
    v159 = -v104;
    v161 = -v105;
    while (1)
    {
      v112 = *((_BYTE *)v21 + 16) ? 0 : v108;
      v183 = v112;
      if (v174)
        break;
LABEL_161:
      ++v108;
      v184 += v186;
      if (v107 <= v108)
        goto LABEL_162;
    }
    v185 = 0;
    v113 = v108 * v173;
    if (*((_BYTE *)v21 + 16))
      v114 = 0;
    else
      v114 = (int)v108 * v173;
    v115 = (_QWORD *)a9;
    v116 = v169;
    v154 = v108 * v173;
    v155 = v108;
    v153 = v114;
    while (!v106)
    {
LABEL_159:
      if (++v185 == v174)
      {
        v107 = v21[1];
        goto LABEL_161;
      }
    }
    v117 = 0;
    v158 = v106 * v185;
    while (!v176)
    {
LABEL_158:
      if (++v117 == v106)
        goto LABEL_159;
    }
    v118 = 0;
    v177 = v157 + v162 * v117;
    v160 = (v158 + v117) * v176;
    v151 = v117;
    while (!v116)
    {
LABEL_157:
      ++v118;
      v117 = v151;
      if (v118 == v176)
        goto LABEL_158;
    }
    v119 = 0;
    v179 = v159 + v163 * v118;
    v167 = v164 * (v160 + v118);
    v152 = v118;
    while (v173 < 1)
    {
LABEL_156:
      ++v119;
      v116 = v169;
      v118 = v152;
      if (v119 == v169)
        goto LABEL_157;
    }
    v120 = 0;
    v181 = v161 + v166 * v119;
    v168 = v172 * v119;
    v156 = v119;
    while (1)
    {
      v187 = 0;
      v121 = v191.__begin_[v120 + v114];
      v187 = v121;
      if (v178)
      {
        v165 = v120 + v114;
        v122 = 0;
        v123 = 0;
        v124 = v180;
        do
        {
          if (v124)
          {
            v125 = 0;
            do
            {
              if (v182)
              {
                for (j = 0; j != v182; ++j)
                {
                  if (v186)
                  {
                    for (k = 0; k != v186; ++k)
                    {
                      LOWORD(__e) = std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v226, v185, v177 + (int)v122, v179 + (int)v125, v181 + (int)j, v184 + (int)k, v120);
                      if (!v225)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v128 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v225 + 48))(v225, &__e);
                      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v220, v183, v122, v125, j, k, v120);
                      v123 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()((uint64_t)__u, (uint64_t)&v187, v123, v128, a10, v129, v111);
                    }
                  }
                }
              }
              ++v125;
              v124 = v180;
            }
            while (v125 != v180);
          }
          ++v122;
        }
        while (v122 != v178);
        v130 = *((float *)__p + v165);
        if (v123)
        {
          v131 = INFINITY;
          if (v123 == 2)
            v131 = -INFINITY;
          v115 = (_QWORD *)a9;
          v106 = v170;
          v21 = v171;
          v113 = v154;
          v108 = v155;
          v110 = v173;
          v109 = a20;
          v114 = v153;
          v119 = v156;
          goto LABEL_149;
        }
        v121 = v187;
        v115 = (_QWORD *)a9;
        v106 = v170;
        v21 = v171;
        v113 = v154;
        v108 = v155;
        v110 = v173;
        v109 = a20;
        v114 = v153;
        v119 = v156;
        if (!v187)
        {
LABEL_151:
          v134 = 0.0;
          goto LABEL_152;
        }
      }
      else
      {
        v130 = *((float *)__p + v120 + v114);
        if (!v121)
          goto LABEL_151;
      }
      v131 = (double)v121;
LABEL_149:
      LODWORD(__e) = 0;
      v132 = frexp(v131, (int *)&__e);
      v133 = ldexp(v132, 11);
      v134 = ldexp(round(v133), (int)__e - 11);
LABEL_152:
      v135 = v130 * v134;
      v136 = 0.0;
      if (v135 != 0.0)
      {
        LODWORD(__e) = 0;
        v137 = frexp(v135, (int *)&__e);
        v138 = ldexp(v137, 11);
        v136 = ldexp(round(v138), (int)__e - 11);
      }
      *(float *)&__e = v136;
      v139 = *(_QWORD *)(v109 + 24);
      if (!v139)
        std::__throw_bad_function_call[abi:ne180100]();
      v140 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v139 + 48))(v139, &__e);
      *(_WORD *)(*v115 + 2 * (v168 + v167 + v120 + v113)) = MIL::Fp16::FromFloat(v140, v141);
      if (++v120 == v110)
        goto LABEL_156;
    }
  }
LABEL_162:
  v142 = v221;
  if (v221 == v220)
  {
    v143 = 4;
    v142 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_167;
    v143 = 5;
  }
  (*(void (**)(void))(*v142 + 8 * v143))();
LABEL_167:
  v144 = v223;
  if (v223 == __u)
  {
    v145 = 4;
    v144 = __u;
  }
  else
  {
    if (!v223)
      goto LABEL_172;
    v145 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v144 + 8 * v145))();
LABEL_172:
  if (v191.__begin_)
  {
    v191.__end_ = v191.__begin_;
    operator delete(v191.__begin_);
  }
  if (__p)
  {
    v193 = (float *)__p;
    operator delete(__p);
  }
  v146 = v225;
  if (v225 == v224)
  {
    v147 = 4;
    v146 = v224;
  }
  else
  {
    if (!v225)
      goto LABEL_181;
    v147 = 5;
  }
  (*(void (**)(void))(*v146 + 8 * v147))();
LABEL_181:
  result = v227;
  if (v227 == v226)
  {
    v149 = 4;
    result = v226;
  }
  else
  {
    if (!v227)
      return result;
    v149 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v149))();
}

void sub_20689220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56)
{
  uint64_t v56;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v58 = (_QWORD *)STACK[0x298];
  if (STACK[0x298] == v56 - 224)
  {
    v59 = 4;
    v58 = (_QWORD *)(v56 - 224);
  }
  else
  {
    if (!v58)
      goto LABEL_6;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_6:
  if (__p)
    operator delete(__p);
  if (a56)
    operator delete(a56);
  v60 = *(void **)a36;
  if (*(_QWORD *)a36)
  {
    *(_QWORD *)(a36 + 8) = v60;
    operator delete(v60);
  }
  v61 = (_QWORD *)STACK[0x2B8];
  if (STACK[0x2B8] == v56 - 192)
  {
    v62 = 4;
    v61 = (_QWORD *)(v56 - 192);
  }
  else
  {
    if (!v61)
      goto LABEL_17;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_17:
  v63 = (_QWORD *)STACK[0x2D8];
  if (STACK[0x2D8] == v56 - 160)
  {
    v64 = 4;
    v63 = (_QWORD *)(v56 - 160);
  }
  else
  {
    if (!v63)
      goto LABEL_22;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_22:
  _Unwind_Resume(a1);
}

_QWORD *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, int a18, char a19, uint64_t a20)
{
  unint64_t *v21;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  MIL::Fp16 *Float;
  float v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  size_t v57;
  int v58;
  int v59;
  double v60;
  double v61;
  unint64_t v62;
  MIL::Fp16 *v63;
  MIL::Fp16 *v64;
  float v65;
  float v66;
  double v67;
  float v68;
  float v69;
  float *v70;
  float *v71;
  float *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  float *v78;
  int v79;
  float v80;
  float v81;
  float v82;
  unsigned int v83;
  uint64_t i;
  float v85;
  float v86;
  unsigned int v87;
  int v88;
  std::vector<int>::pointer end;
  int *v90;
  std::vector<int>::pointer begin;
  int64_t v92;
  unint64_t v93;
  int64_t v94;
  unint64_t v95;
  char *v96;
  int *v97;
  int v98;
  char *v99;
  char *v100;
  int v101;
  unint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t j;
  uint64_t k;
  __int16 v126;
  float v127;
  float v128;
  double v129;
  long double v130;
  double v131;
  float v132;
  float v133;
  float v134;
  long double v135;
  double v136;
  uint64_t v137;
  float v138;
  int v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  std::vector<int>::value_type *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *result;
  uint64_t v148;
  std::runtime_error *exception;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  unint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  __int128 __e;
  uint64_t *v185;
  __int128 *v186;
  std::vector<int> v187;
  void *__p;
  float *v189;
  char *v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t *v203;
  __int16 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int16 v215;
  _QWORD v216[3];
  _QWORD *v217;
  std::vector<int>::value_type __u[6];
  std::vector<int>::value_type *v219;
  _QWORD v220[3];
  _QWORD *v221;
  _QWORD v222[3];
  _QWORD *v223;
  uint64_t v224;

  v21 = a7;
  v224 = *MEMORY[0x24BDAC8D0];
  v215 = a17;
  v213 = a3;
  v214 = a1;
  v25 = *a7;
  if (*a7 == 3)
  {
    v26 = *a2;
    v27 = a2[1] - *a2;
    if (v27 <= 8)
      goto LABEL_197;
    v28 = *(_QWORD *)(v26 + 8);
    v211 = 0;
    v212 = v28;
    goto LABEL_5;
  }
  v28 = 1;
  v211 = 0;
  v212 = 1;
  v26 = *a2;
  v27 = a2[1] - *a2;
  if (v25 >= 2)
  {
LABEL_5:
    if (v27 > 0x10)
    {
      v29 = *(_QWORD *)(v27 + v26 - 24);
      v210 = 0;
      v211 = v29;
      goto LABEL_8;
    }
LABEL_197:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v29 = 1;
  v210 = 0;
  v211 = 1;
  v28 = 1;
  if (v27 <= 8)
    goto LABEL_197;
LABEL_8:
  v30 = v27 + v26;
  v31 = *(_QWORD *)(v30 - 16);
  v209 = 0;
  v210 = v31;
  v208 = *(_QWORD *)(v30 - 8);
  v209 = v208;
  v32 = v208 * v31;
  v206 = v32 * v29;
  v207 = v32;
  v205 = v32 * v29 * v28;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v215);
  v204 = MIL::Fp16::FromFloat(Float, v34);
  v223 = 0;
  if (a15)
  {
    *(_QWORD *)&v197 = &v209;
    *((_QWORD *)&v197 + 1) = &v204;
    v198 = &v214;
    v199 = &v205;
    v200 = &v206;
    v201 = &v207;
    v202 = &v208;
    std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v222, (uint64_t)&v197);
  }
  else
  {
    *(_QWORD *)&v197 = &v212;
    *((_QWORD *)&v197 + 1) = &v211;
    v198 = &v210;
    v199 = &v214;
    v200 = &v205;
    v201 = &v206;
    v202 = &v207;
    v203 = &v208;
    if (a8)
      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v222, &v197);
    else
      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v222, &v197);
  }
  v220[0] = &off_24BFE86A8;
  v221 = v220;
  if (a19)
    std::function<MIL::Fp16 ()(MIL::Fp16)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},void>(v220);
  v36 = *(uint64_t **)a6;
  v35 = *(_QWORD *)(a6 + 8);
  v37 = v35 - *(_QWORD *)a6;
  if (v35 == *(_QWORD *)a6)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v38 = (uint64_t)v37 >> 3;
  v171 = *v36;
  v39 = *v21;
  if (*v21 == 3)
  {
    if (v37 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v40 = v36[1];
    goto LABEL_21;
  }
  if (v39 >= 2)
  {
    v40 = 1;
LABEL_21:
    if (v37 <= 0x10)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v41 = &v36[v38];
    v42 = *(v41 - 2);
    v173 = *(v41 - 3);
    v43 = *(v41 - 1);
    if (v39 == 3)
    {
      if (a5[1] - *a5 <= 8uLL)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v44 = *(_QWORD *)(*a5 + 8);
    }
    else
    {
      v44 = 1;
    }
    v175 = v44;
    v45 = *a5;
    v46 = a5[1] - *a5;
    if (v46 <= 0x18)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v162 = v43 * v42;
    v47 = *(_QWORD *)(v46 + v45 - 32);
    goto LABEL_31;
  }
  if (v37 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v45 = *a5;
  v46 = a5[1] - *a5;
  if (v46 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v48 = &v36[v38];
  v42 = *(v48 - 2);
  v43 = *(v48 - 1);
  v162 = v43 * v42;
  v47 = 1;
  v40 = 1;
  v173 = 1;
  v175 = 1;
LABEL_31:
  v49 = v46 + v45;
  v50 = *(_QWORD *)(v49 - 24);
  v51 = *(_QWORD *)(v49 - 16);
  v196 = *(_QWORD *)(v49 - 8);
  v182 = v51;
  v170 = v196;
  v195 = v196 * v51;
  v178 = v50;
  v194 = v196 * v51 * v50;
  v193 = v194 * v47;
  v192 = v194 * v47 * v175;
  *(_QWORD *)&v197 = &v192;
  *((_QWORD *)&v197 + 1) = &v193;
  v198 = &v194;
  v199 = &v195;
  v200 = &v196;
  v52 = v21[4];
  if (v39 >= 3)
  {
    v53 = v21[3];
    v54 = v52 - v53;
    if (v52 - v53 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v55 = *(_DWORD *)(v52 - 12);
    goto LABEL_37;
  }
  v53 = v21[3];
  if (v39 == 2)
  {
    v54 = v52 - v53;
    if (v52 - v53 <= 4)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v55 = 1;
LABEL_37:
    v160 = v55;
    v56 = *(_DWORD *)(v54 + v53 - 8);
    goto LABEL_39;
  }
  v56 = 1;
  v160 = 1;
LABEL_39:
  v161 = v56;
  v177 = v47;
  if (v52 == v53)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v163 = *(_DWORD *)(v52 - 4);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v167 = v40;
  v169 = v43;
  v57 = v40 * v171 * v173 * v42 * v43;
  std::vector<unsigned char>::reserve(a9, v57);
  v191 = 0;
  std::vector<unsigned char>::assign((char **)a9, v57, &v191);
  if (a4 == 4)
    v58 = 20;
  else
    v58 = 10;
  v59 = v58 + a10;
  v60 = ldexp(1.0, v59);
  v61 = ldexp(1.0, v59 + a11);
  v62 = v169;
  if (*((_BYTE *)v21 + 16))
    v62 = v169 / v21[1];
  v165 = v42;
  v168 = v21;
  __p = 0;
  v189 = 0;
  v190 = 0;
  std::vector<float>::reserve(&__p, v62);
  v64 = *a14;
  v63 = a14[1];
  if (v63 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    v66 = exp2(-(double)(v59 + a12)) * v65;
    *(float *)__u = v66;
    std::vector<float>::assign((char **)&__p, v62, __u);
  }
  else if (v64 != v63)
  {
    v67 = exp2(-(double)(v59 + a12));
    do
    {
      MIL::Fp16::GetFloat(v64);
      v69 = v67 * v68;
      v70 = v189;
      if (v189 >= (float *)v190)
      {
        v72 = (float *)__p;
        v73 = ((char *)v189 - (_BYTE *)__p) >> 2;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v75 = v190 - (_BYTE *)__p;
        if ((v190 - (_BYTE *)__p) >> 1 > v74)
          v74 = v75 >> 1;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
          v76 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76)
        {
          v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v190, v76);
          v72 = (float *)__p;
          v70 = v189;
        }
        else
        {
          v77 = 0;
        }
        v78 = (float *)&v77[4 * v73];
        *v78 = v69;
        v71 = v78 + 1;
        while (v70 != v72)
        {
          v79 = *((_DWORD *)v70-- - 1);
          *((_DWORD *)v78-- - 1) = v79;
        }
        __p = v78;
        v189 = v71;
        v190 = &v77[4 * v76];
        if (v72)
          operator delete(v72);
      }
      else
      {
        *v189 = v69;
        v71 = v70 + 1;
      }
      v189 = v71;
      v64 = (MIL::Fp16 *)((char *)v64 + 2);
    }
    while (v64 != v63);
  }
  memset(&v187, 0, sizeof(v187));
  std::vector<int>::reserve(&v187, v62);
  if (a15)
  {
    __u[0] = 0;
    std::vector<int>::assign(&v187, v62, __u);
  }
  else
  {
    v80 = v61;
    if (*(_QWORD *)(a13 + 8) - *(_QWORD *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      v82 = v81 * v80;
      v83 = llroundf(v82);
      if (fabsf(v82) < 1.0)
        v83 = 0;
      __u[0] = v83;
      std::vector<int>::assign(&v187, v62, __u);
    }
    else if (v62)
    {
      for (i = 0; i != v62; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(_QWORD *)a13 + 2 * i));
        v86 = v85 * v80;
        v87 = llroundf(v86);
        if (fabsf(v86) >= 1.0)
          v88 = v87;
        else
          v88 = 0;
        end = v187.__end_;
        if (v187.__end_ >= v187.__end_cap_.__value_)
        {
          begin = v187.__begin_;
          v92 = v187.__end_ - v187.__begin_;
          v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v94 = (char *)v187.__end_cap_.__value_ - (char *)v187.__begin_;
          if (((char *)v187.__end_cap_.__value_ - (char *)v187.__begin_) >> 1 > v93)
            v93 = v94 >> 1;
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
            v95 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v95 = v93;
          if (v95)
          {
            v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v187.__end_cap_, v95);
            begin = v187.__begin_;
            end = v187.__end_;
          }
          else
          {
            v96 = 0;
          }
          v97 = (int *)&v96[4 * v92];
          *v97 = v88;
          v90 = v97 + 1;
          while (end != begin)
          {
            v98 = *--end;
            *--v97 = v98;
          }
          v187.__begin_ = v97;
          v187.__end_ = v90;
          v187.__end_cap_.__value_ = (int *)&v96[4 * v95];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v187.__end_ = v88;
          v90 = end + 1;
        }
        v187.__end_ = v90;
      }
    }
  }
  v99 = (char *)v21[10];
  if (*v21 == 3)
  {
    v100 = (char *)v21[9];
    if (v99 == v100)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v101 = *(_DWORD *)v100;
    goto LABEL_99;
  }
  v100 = (char *)v21[9];
  if (*v21 >= 2)
  {
    v101 = 0;
LABEL_99:
    v102 = v99 - v100;
    if (v102 <= 0xC)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v103 = *(_DWORD *)&v100[v102 - 16];
    goto LABEL_103;
  }
  v102 = v99 - v100;
  if (v102 <= 4)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v103 = 0;
  v101 = 0;
LABEL_103:
  v104 = *(_DWORD *)&v100[v102 - 8];
  v219 = 0;
  switch(a4)
  {
    case 4:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},void>(__u);
      break;
    case 9:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},void>(__u);
      break;
    case 14:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},void>(__u);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v217 = 0;
  if (a15)
  {
    *(_QWORD *)&__e = &v209;
    *((_QWORD *)&__e + 1) = a13;
    v185 = &v213;
    v186 = &v197;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v216, &__e);
  }
  else
  {
    *(_QWORD *)&__e = &v213;
    *((_QWORD *)&__e + 1) = &v197;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(v216, &__e);
  }
  v105 = v167;
  v106 = v21[1];
  if (v106)
  {
    v180 = 0;
    v107 = 0;
    v108 = a20;
    v109 = v170;
    v110 = v60;
    v155 = -v101;
    v157 = -v103;
    v159 = -v104;
    while (1)
    {
      v111 = *((_BYTE *)v21 + 16) ? 0 : v107;
      v179 = v111;
      if (v171)
        break;
LABEL_168:
      ++v107;
      v180 += v182;
      if (v106 <= v107)
        goto LABEL_169;
    }
    v181 = 0;
    v112 = v107 * v170;
    if (*((_BYTE *)v21 + 16))
      v113 = 0;
    else
      v113 = (int)v107 * v170;
    v114 = a9;
    v115 = v165;
    v153 = v107 * v170;
    v154 = v107;
    v152 = v113;
    while (!v105)
    {
LABEL_166:
      if (++v181 == v171)
      {
        v106 = v21[1];
        goto LABEL_168;
      }
    }
    v116 = 0;
    v156 = v105 * v181;
    while (!v173)
    {
LABEL_165:
      if (++v116 == v105)
        goto LABEL_166;
    }
    v117 = 0;
    v174 = v155 + v160 * v116;
    v158 = (v156 + v116) * v173;
    v150 = v116;
    while (!v115)
    {
LABEL_164:
      ++v117;
      v116 = v150;
      if (v117 == v173)
        goto LABEL_165;
    }
    v166 = 0;
    v176 = v157 + v161 * v117;
    v164 = v162 * (v158 + v117);
    v151 = v117;
    while (v170 < 1)
    {
LABEL_163:
      v115 = v165;
      ++v166;
      v117 = v151;
      if (v166 == v165)
        goto LABEL_164;
    }
    v118 = 0;
    while (1)
    {
      v183 = 0;
      v119 = v187.__begin_[v118 + v113];
      v183 = v119;
      if (v175)
      {
        v120 = 0;
        v121 = 0;
        v122 = v177;
        do
        {
          if (v122)
          {
            v123 = 0;
            do
            {
              if (v178)
              {
                for (j = 0; j != v178; ++j)
                {
                  if (v182)
                  {
                    for (k = 0; k != v182; ++k)
                    {
                      LOWORD(__e) = std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v222, v181, v174 + (int)v120, v176 + (int)v123, v159 + v163 * (int)v166 + (int)j, v180 + (int)k, v118);
                      if (!v221)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v126 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v221 + 48))(v221, &__e);
                      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v216, v179, v120, v123, j, k, v118);
                      v121 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()((uint64_t)__u, (uint64_t)&v183, v121, v126, a10, v127, v110);
                    }
                  }
                }
              }
              ++v123;
              v122 = v177;
            }
            while (v123 != v177);
          }
          ++v120;
        }
        while (v120 != v175);
        v128 = *((float *)__p + v118 + v113);
        if (v121)
        {
          v129 = INFINITY;
          if (v121 == 2)
            v129 = -INFINITY;
          v114 = a9;
          v105 = v167;
          v21 = v168;
          v112 = v153;
          v107 = v154;
          v109 = v170;
          v108 = a20;
          v113 = v152;
          goto LABEL_149;
        }
        v119 = v183;
        v114 = a9;
        v105 = v167;
        v21 = v168;
        v112 = v153;
        v107 = v154;
        v109 = v170;
        v108 = a20;
        v113 = v152;
        if (!v183)
        {
LABEL_151:
          v132 = 0.0;
          goto LABEL_152;
        }
      }
      else
      {
        v128 = *((float *)__p + v118 + v113);
        if (!v119)
          goto LABEL_151;
      }
      v129 = (double)v119;
LABEL_149:
      LODWORD(__e) = 0;
      v130 = frexp(v129, (int *)&__e);
      v131 = ldexp(v130, 11);
      v132 = ldexp(round(v131), (int)__e - 11);
LABEL_152:
      v133 = v128 * v132;
      v134 = 0.0;
      if (v133 != 0.0)
      {
        LODWORD(__e) = 0;
        v135 = frexp(v133, (int *)&__e);
        v136 = ldexp(v135, 11);
        v134 = ldexp(round(v136), (int)__e - 11);
      }
      *(float *)&__e = v134;
      v137 = *(_QWORD *)(v108 + 24);
      if (!v137)
        std::__throw_bad_function_call[abi:ne180100]();
      v138 = (*(float (**)(uint64_t, __int128 *))(*(_QWORD *)v137 + 48))(v137, &__e);
      if (v138 == INFINITY)
      {
        LOBYTE(v139) = -1;
      }
      else if (v138 == -INFINITY)
      {
        LOBYTE(v139) = 0;
      }
      else
      {
        v140 = llroundf(v138);
        if (v140 >= 255)
          v140 = 255;
        v139 = v140 & ~(v140 >> 31);
      }
      *(_BYTE *)(*v114 + v169 * v166 + v164 + v118 + v112) = v139;
      if (++v118 == v109)
        goto LABEL_163;
    }
  }
LABEL_169:
  v141 = v217;
  if (v217 == v216)
  {
    v142 = 4;
    v141 = v216;
  }
  else
  {
    if (!v217)
      goto LABEL_174;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_174:
  v143 = v219;
  if (v219 == __u)
  {
    v144 = 4;
    v143 = __u;
  }
  else
  {
    if (!v219)
      goto LABEL_179;
    v144 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v143 + 8 * v144))();
LABEL_179:
  if (v187.__begin_)
  {
    v187.__end_ = v187.__begin_;
    operator delete(v187.__begin_);
  }
  if (__p)
  {
    v189 = (float *)__p;
    operator delete(__p);
  }
  v145 = v221;
  if (v221 == v220)
  {
    v146 = 4;
    v145 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_188;
    v146 = 5;
  }
  (*(void (**)(void))(*v145 + 8 * v146))();
LABEL_188:
  result = v223;
  if (v223 == v222)
  {
    v148 = 4;
    result = v222;
  }
  else
  {
    if (!v223)
      return result;
    v148 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v148))();
}

void sub_20689326C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56)
{
  uint64_t v56;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v58 = (_QWORD *)STACK[0x298];
  if (STACK[0x298] == v56 - 224)
  {
    v59 = 4;
    v58 = (_QWORD *)(v56 - 224);
  }
  else
  {
    if (!v58)
      goto LABEL_6;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_6:
  if (__p)
    operator delete(__p);
  if (a56)
    operator delete(a56);
  v60 = *(void **)a36;
  if (*(_QWORD *)a36)
  {
    *(_QWORD *)(a36 + 8) = v60;
    operator delete(v60);
  }
  v61 = (_QWORD *)STACK[0x2B8];
  if (STACK[0x2B8] == v56 - 192)
  {
    v62 = 4;
    v61 = (_QWORD *)(v56 - 192);
  }
  else
  {
    if (!v61)
      goto LABEL_17;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_17:
  v63 = (_QWORD *)STACK[0x2D8];
  if (STACK[0x2D8] == v56 - 160)
  {
    v64 = 4;
    v63 = (_QWORD *)(v56 - 160);
  }
  else
  {
    if (!v63)
      goto LABEL_22;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_22:
  _Unwind_Resume(a1);
}

_QWORD *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, int a18, char a19, uint64_t a20)
{
  unint64_t *v21;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  MIL::Fp16 *Float;
  float v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  size_t v57;
  int v58;
  int v59;
  double v60;
  double v61;
  unint64_t v62;
  MIL::Fp16 *v63;
  MIL::Fp16 *v64;
  float v65;
  float v66;
  double v67;
  float v68;
  float v69;
  float *v70;
  float *v71;
  float *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  float *v78;
  int v79;
  float v80;
  float v81;
  float v82;
  unsigned int v83;
  uint64_t i;
  float v85;
  float v86;
  unsigned int v87;
  int v88;
  std::vector<int>::pointer end;
  int *v90;
  std::vector<int>::pointer begin;
  int64_t v92;
  unint64_t v93;
  int64_t v94;
  unint64_t v95;
  char *v96;
  int *v97;
  int v98;
  char *v99;
  char *v100;
  int v101;
  unint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t j;
  uint64_t k;
  __int16 v126;
  float v127;
  float v128;
  double v129;
  long double v130;
  double v131;
  float v132;
  float v133;
  float v134;
  long double v135;
  double v136;
  uint64_t v137;
  float v138;
  int v139;
  _QWORD *v140;
  uint64_t v141;
  std::vector<int>::value_type *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *result;
  uint64_t v147;
  std::runtime_error *exception;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  unint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  __int128 __e;
  uint64_t *v184;
  __int128 *v185;
  std::vector<int> v186;
  void *__p;
  float *v188;
  char *v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;
  __int16 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int16 v214;
  _QWORD v215[3];
  _QWORD *v216;
  std::vector<int>::value_type __u[6];
  std::vector<int>::value_type *v218;
  _QWORD v219[3];
  _QWORD *v220;
  _QWORD v221[3];
  _QWORD *v222;
  uint64_t v223;

  v21 = a7;
  v223 = *MEMORY[0x24BDAC8D0];
  v214 = a17;
  v212 = a3;
  v213 = a1;
  v25 = *a7;
  if (*a7 == 3)
  {
    v26 = *a2;
    v27 = a2[1] - *a2;
    if (v27 <= 8)
      goto LABEL_198;
    v28 = *(_QWORD *)(v26 + 8);
    v210 = 0;
    v211 = v28;
    goto LABEL_5;
  }
  v28 = 1;
  v210 = 0;
  v211 = 1;
  v26 = *a2;
  v27 = a2[1] - *a2;
  if (v25 >= 2)
  {
LABEL_5:
    if (v27 > 0x10)
    {
      v29 = *(_QWORD *)(v27 + v26 - 24);
      v209 = 0;
      v210 = v29;
      goto LABEL_8;
    }
LABEL_198:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v29 = 1;
  v209 = 0;
  v210 = 1;
  v28 = 1;
  if (v27 <= 8)
    goto LABEL_198;
LABEL_8:
  v30 = v27 + v26;
  v31 = *(_QWORD *)(v30 - 16);
  v208 = 0;
  v209 = v31;
  v207 = *(_QWORD *)(v30 - 8);
  v208 = v207;
  v32 = v207 * v31;
  v205 = v32 * v29;
  v206 = v32;
  v204 = v32 * v29 * v28;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v214);
  v203 = MIL::Fp16::FromFloat(Float, v34);
  v222 = 0;
  if (a15)
  {
    *(_QWORD *)&v196 = &v208;
    *((_QWORD *)&v196 + 1) = &v203;
    v197 = &v213;
    v198 = &v204;
    v199 = &v205;
    v200 = &v206;
    v201 = &v207;
    std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v221, (uint64_t)&v196);
  }
  else
  {
    *(_QWORD *)&v196 = &v211;
    *((_QWORD *)&v196 + 1) = &v210;
    v197 = &v209;
    v198 = &v213;
    v199 = &v204;
    v200 = &v205;
    v201 = &v206;
    v202 = &v207;
    if (a8)
      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v221, &v196);
    else
      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v221, &v196);
  }
  v219[0] = &off_24BFE8BA8;
  v220 = v219;
  if (a19)
    std::function<MIL::Fp16 ()(MIL::Fp16)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},void>(v219);
  v36 = *(uint64_t **)a6;
  v35 = *(_QWORD *)(a6 + 8);
  v37 = v35 - *(_QWORD *)a6;
  if (v35 == *(_QWORD *)a6)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v38 = (uint64_t)v37 >> 3;
  v170 = *v36;
  v39 = *v21;
  if (*v21 == 3)
  {
    if (v37 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v40 = v36[1];
    goto LABEL_21;
  }
  if (v39 >= 2)
  {
    v40 = 1;
LABEL_21:
    if (v37 <= 0x10)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v41 = &v36[v38];
    v42 = *(v41 - 2);
    v172 = *(v41 - 3);
    v43 = *(v41 - 1);
    if (v39 == 3)
    {
      if (a5[1] - *a5 <= 8uLL)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v44 = *(_QWORD *)(*a5 + 8);
    }
    else
    {
      v44 = 1;
    }
    v174 = v44;
    v45 = *a5;
    v46 = a5[1] - *a5;
    if (v46 <= 0x18)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v161 = v43 * v42;
    v47 = *(_QWORD *)(v46 + v45 - 32);
    goto LABEL_31;
  }
  if (v37 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v45 = *a5;
  v46 = a5[1] - *a5;
  if (v46 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v48 = &v36[v38];
  v42 = *(v48 - 2);
  v43 = *(v48 - 1);
  v161 = v43 * v42;
  v47 = 1;
  v40 = 1;
  v172 = 1;
  v174 = 1;
LABEL_31:
  v49 = v46 + v45;
  v50 = *(_QWORD *)(v49 - 24);
  v51 = *(_QWORD *)(v49 - 16);
  v195 = *(_QWORD *)(v49 - 8);
  v181 = v51;
  v169 = v195;
  v194 = v195 * v51;
  v177 = v50;
  v193 = v195 * v51 * v50;
  v192 = v193 * v47;
  v191 = v193 * v47 * v174;
  *(_QWORD *)&v196 = &v191;
  *((_QWORD *)&v196 + 1) = &v192;
  v197 = &v193;
  v198 = &v194;
  v199 = &v195;
  v52 = v21[4];
  if (v39 >= 3)
  {
    v53 = v21[3];
    v54 = v52 - v53;
    if (v52 - v53 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v55 = *(_DWORD *)(v52 - 12);
    goto LABEL_37;
  }
  v53 = v21[3];
  if (v39 == 2)
  {
    v54 = v52 - v53;
    if (v52 - v53 <= 4)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v55 = 1;
LABEL_37:
    v159 = v55;
    v56 = *(_DWORD *)(v54 + v53 - 8);
    goto LABEL_39;
  }
  v56 = 1;
  v159 = 1;
LABEL_39:
  v160 = v56;
  v176 = v47;
  if (v52 == v53)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v162 = *(_DWORD *)(v52 - 4);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v166 = v40;
  v168 = v43;
  v57 = v40 * v170 * v172 * v42 * v43;
  std::vector<unsigned char>::reserve(a9, v57);
  v190 = 0;
  std::vector<unsigned char>::assign((char **)a9, v57, &v190);
  if (a4 == 4)
    v58 = 20;
  else
    v58 = 10;
  v59 = v58 + a10;
  v60 = ldexp(1.0, v59);
  v61 = ldexp(1.0, v59 + a11);
  v62 = v168;
  if (*((_BYTE *)v21 + 16))
    v62 = v168 / v21[1];
  v164 = v42;
  v167 = v21;
  __p = 0;
  v188 = 0;
  v189 = 0;
  std::vector<float>::reserve(&__p, v62);
  v64 = *a14;
  v63 = a14[1];
  if (v63 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    v66 = exp2(-(double)(v59 + a12)) * v65;
    *(float *)__u = v66;
    std::vector<float>::assign((char **)&__p, v62, __u);
  }
  else if (v64 != v63)
  {
    v67 = exp2(-(double)(v59 + a12));
    do
    {
      MIL::Fp16::GetFloat(v64);
      v69 = v67 * v68;
      v70 = v188;
      if (v188 >= (float *)v189)
      {
        v72 = (float *)__p;
        v73 = ((char *)v188 - (_BYTE *)__p) >> 2;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v75 = v189 - (_BYTE *)__p;
        if ((v189 - (_BYTE *)__p) >> 1 > v74)
          v74 = v75 >> 1;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
          v76 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76)
        {
          v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v189, v76);
          v72 = (float *)__p;
          v70 = v188;
        }
        else
        {
          v77 = 0;
        }
        v78 = (float *)&v77[4 * v73];
        *v78 = v69;
        v71 = v78 + 1;
        while (v70 != v72)
        {
          v79 = *((_DWORD *)v70-- - 1);
          *((_DWORD *)v78-- - 1) = v79;
        }
        __p = v78;
        v188 = v71;
        v189 = &v77[4 * v76];
        if (v72)
          operator delete(v72);
      }
      else
      {
        *v188 = v69;
        v71 = v70 + 1;
      }
      v188 = v71;
      v64 = (MIL::Fp16 *)((char *)v64 + 2);
    }
    while (v64 != v63);
  }
  memset(&v186, 0, sizeof(v186));
  std::vector<int>::reserve(&v186, v62);
  if (a15)
  {
    __u[0] = 0;
    std::vector<int>::assign(&v186, v62, __u);
  }
  else
  {
    v80 = v61;
    if (*(_QWORD *)(a13 + 8) - *(_QWORD *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      v82 = v81 * v80;
      v83 = llroundf(v82);
      if (fabsf(v82) < 1.0)
        v83 = 0;
      __u[0] = v83;
      std::vector<int>::assign(&v186, v62, __u);
    }
    else if (v62)
    {
      for (i = 0; i != v62; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(_QWORD *)a13 + 2 * i));
        v86 = v85 * v80;
        v87 = llroundf(v86);
        if (fabsf(v86) >= 1.0)
          v88 = v87;
        else
          v88 = 0;
        end = v186.__end_;
        if (v186.__end_ >= v186.__end_cap_.__value_)
        {
          begin = v186.__begin_;
          v92 = v186.__end_ - v186.__begin_;
          v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v94 = (char *)v186.__end_cap_.__value_ - (char *)v186.__begin_;
          if (((char *)v186.__end_cap_.__value_ - (char *)v186.__begin_) >> 1 > v93)
            v93 = v94 >> 1;
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
            v95 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v95 = v93;
          if (v95)
          {
            v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v186.__end_cap_, v95);
            begin = v186.__begin_;
            end = v186.__end_;
          }
          else
          {
            v96 = 0;
          }
          v97 = (int *)&v96[4 * v92];
          *v97 = v88;
          v90 = v97 + 1;
          while (end != begin)
          {
            v98 = *--end;
            *--v97 = v98;
          }
          v186.__begin_ = v97;
          v186.__end_ = v90;
          v186.__end_cap_.__value_ = (int *)&v96[4 * v95];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v186.__end_ = v88;
          v90 = end + 1;
        }
        v186.__end_ = v90;
      }
    }
  }
  v99 = (char *)v21[10];
  if (*v21 == 3)
  {
    v100 = (char *)v21[9];
    if (v99 == v100)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v101 = *(_DWORD *)v100;
    goto LABEL_99;
  }
  v100 = (char *)v21[9];
  if (*v21 >= 2)
  {
    v101 = 0;
LABEL_99:
    v102 = v99 - v100;
    if (v102 <= 0xC)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v103 = *(_DWORD *)&v100[v102 - 16];
    goto LABEL_103;
  }
  v102 = v99 - v100;
  if (v102 <= 4)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v103 = 0;
  v101 = 0;
LABEL_103:
  v104 = *(_DWORD *)&v100[v102 - 8];
  v218 = 0;
  switch(a4)
  {
    case 4:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},void>(__u);
      break;
    case 9:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},void>(__u);
      break;
    case 14:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},void>(__u);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v216 = 0;
  if (a15)
  {
    *(_QWORD *)&__e = &v208;
    *((_QWORD *)&__e + 1) = a13;
    v184 = &v212;
    v185 = &v196;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v215, &__e);
  }
  else
  {
    *(_QWORD *)&__e = &v212;
    *((_QWORD *)&__e + 1) = &v196;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(v215, &__e);
  }
  v105 = v166;
  v106 = v21[1];
  if (v106)
  {
    v179 = 0;
    v107 = 0;
    v108 = a20;
    v109 = v169;
    v110 = v60;
    v154 = -v101;
    v156 = -v103;
    v158 = -v104;
    while (1)
    {
      v111 = *((_BYTE *)v21 + 16) ? 0 : v107;
      v178 = v111;
      if (v170)
        break;
LABEL_169:
      ++v107;
      v179 += v181;
      if (v106 <= v107)
        goto LABEL_170;
    }
    v180 = 0;
    v112 = v107 * v169;
    if (*((_BYTE *)v21 + 16))
      v113 = 0;
    else
      v113 = (int)v107 * v169;
    v114 = a9;
    v115 = v164;
    v152 = v107 * v169;
    v153 = v107;
    v151 = v113;
    while (!v105)
    {
LABEL_167:
      if (++v180 == v170)
      {
        v106 = v21[1];
        goto LABEL_169;
      }
    }
    v116 = 0;
    v155 = v105 * v180;
    while (!v172)
    {
LABEL_166:
      if (++v116 == v105)
        goto LABEL_167;
    }
    v117 = 0;
    v173 = v154 + v159 * v116;
    v157 = (v155 + v116) * v172;
    v149 = v116;
    while (!v115)
    {
LABEL_165:
      ++v117;
      v116 = v149;
      if (v117 == v172)
        goto LABEL_166;
    }
    v165 = 0;
    v175 = v156 + v160 * v117;
    v163 = v161 * (v157 + v117);
    v150 = v117;
    while (v169 < 1)
    {
LABEL_164:
      v115 = v164;
      ++v165;
      v117 = v150;
      if (v165 == v164)
        goto LABEL_165;
    }
    v118 = 0;
    while (1)
    {
      v182 = 0;
      v119 = v186.__begin_[v118 + v113];
      v182 = v119;
      if (v174)
      {
        v120 = 0;
        v121 = 0;
        v122 = v176;
        do
        {
          if (v122)
          {
            v123 = 0;
            do
            {
              if (v177)
              {
                for (j = 0; j != v177; ++j)
                {
                  if (v181)
                  {
                    for (k = 0; k != v181; ++k)
                    {
                      LOWORD(__e) = std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v221, v180, v173 + (int)v120, v175 + (int)v123, v158 + v162 * (int)v165 + (int)j, v179 + (int)k, v118);
                      if (!v220)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v126 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v220 + 48))(v220, &__e);
                      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v215, v178, v120, v123, j, k, v118);
                      v121 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()((uint64_t)__u, (uint64_t)&v182, v121, v126, a10, v127, v110);
                    }
                  }
                }
              }
              ++v123;
              v122 = v176;
            }
            while (v123 != v176);
          }
          ++v120;
        }
        while (v120 != v174);
        v128 = *((float *)__p + v118 + v113);
        if (v121)
        {
          v129 = INFINITY;
          if (v121 == 2)
            v129 = -INFINITY;
          v114 = a9;
          v105 = v166;
          v21 = v167;
          v112 = v152;
          v107 = v153;
          v109 = v169;
          v108 = a20;
          v113 = v151;
          goto LABEL_149;
        }
        v119 = v182;
        v114 = a9;
        v105 = v166;
        v21 = v167;
        v112 = v152;
        v107 = v153;
        v109 = v169;
        v108 = a20;
        v113 = v151;
        if (!v182)
        {
LABEL_151:
          v132 = 0.0;
          goto LABEL_152;
        }
      }
      else
      {
        v128 = *((float *)__p + v118 + v113);
        if (!v119)
          goto LABEL_151;
      }
      v129 = (double)v119;
LABEL_149:
      LODWORD(__e) = 0;
      v130 = frexp(v129, (int *)&__e);
      v131 = ldexp(v130, 11);
      v132 = ldexp(round(v131), (int)__e - 11);
LABEL_152:
      v133 = v128 * v132;
      v134 = 0.0;
      if (v133 != 0.0)
      {
        LODWORD(__e) = 0;
        v135 = frexp(v133, (int *)&__e);
        v136 = ldexp(v135, 11);
        v134 = ldexp(round(v136), (int)__e - 11);
      }
      *(float *)&__e = v134;
      v137 = *(_QWORD *)(v108 + 24);
      if (!v137)
        std::__throw_bad_function_call[abi:ne180100]();
      v138 = (*(float (**)(uint64_t, __int128 *))(*(_QWORD *)v137 + 48))(v137, &__e);
      if (v138 == INFINITY)
      {
        LOBYTE(v139) = 127;
      }
      else if (v138 == -INFINITY)
      {
        LOBYTE(v139) = 0x80;
      }
      else
      {
        v139 = llroundf(v138);
        if (v139 >= 127)
          v139 = 127;
        if (v139 <= -128)
          LOBYTE(v139) = 0x80;
      }
      *(_BYTE *)(*v114 + v168 * v165 + v163 + v118 + v112) = v139;
      if (++v118 == v109)
        goto LABEL_164;
    }
  }
LABEL_170:
  v140 = v216;
  if (v216 == v215)
  {
    v141 = 4;
    v140 = v215;
  }
  else
  {
    if (!v216)
      goto LABEL_175;
    v141 = 5;
  }
  (*(void (**)(void))(*v140 + 8 * v141))();
LABEL_175:
  v142 = v218;
  if (v218 == __u)
  {
    v143 = 4;
    v142 = __u;
  }
  else
  {
    if (!v218)
      goto LABEL_180;
    v143 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v142 + 8 * v143))();
LABEL_180:
  if (v186.__begin_)
  {
    v186.__end_ = v186.__begin_;
    operator delete(v186.__begin_);
  }
  if (__p)
  {
    v188 = (float *)__p;
    operator delete(__p);
  }
  v144 = v220;
  if (v220 == v219)
  {
    v145 = 4;
    v144 = v219;
  }
  else
  {
    if (!v220)
      goto LABEL_189;
    v145 = 5;
  }
  (*(void (**)(void))(*v144 + 8 * v145))();
LABEL_189:
  result = v222;
  if (v222 == v221)
  {
    v147 = 4;
    result = v221;
  }
  else
  {
    if (!v222)
      return result;
    v147 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v147))();
}

void sub_2068942D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56)
{
  uint64_t v56;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v58 = (_QWORD *)STACK[0x298];
  if (STACK[0x298] == v56 - 224)
  {
    v59 = 4;
    v58 = (_QWORD *)(v56 - 224);
  }
  else
  {
    if (!v58)
      goto LABEL_6;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_6:
  if (__p)
    operator delete(__p);
  if (a56)
    operator delete(a56);
  v60 = *(void **)a36;
  if (*(_QWORD *)a36)
  {
    *(_QWORD *)(a36 + 8) = v60;
    operator delete(v60);
  }
  v61 = (_QWORD *)STACK[0x2B8];
  if (STACK[0x2B8] == v56 - 192)
  {
    v62 = 4;
    v61 = (_QWORD *)(v56 - 192);
  }
  else
  {
    if (!v61)
      goto LABEL_17;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_17:
  v63 = (_QWORD *)STACK[0x2D8];
  if (STACK[0x2D8] == v56 - 160)
  {
    v64 = 4;
    v63 = (_QWORD *)(v56 - 160);
  }
  else
  {
    if (!v63)
      goto LABEL_22;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_22:
  _Unwind_Resume(a1);
}

_QWORD *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, uint64_t a18, uint64_t a19)
{
  unint64_t *v20;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  MIL::Fp16 *v58;
  int v59;
  int v60;
  double v61;
  double v62;
  unint64_t v63;
  MIL::Fp16 *v64;
  MIL::Fp16 *v65;
  float v66;
  float v67;
  double v68;
  float v69;
  float v70;
  float *v71;
  float *v72;
  float *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  float *v79;
  int v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  uint64_t i;
  float v86;
  float v87;
  unsigned int v88;
  int v89;
  std::vector<int>::pointer end;
  int *v91;
  std::vector<int>::pointer begin;
  int64_t v93;
  unint64_t v94;
  int64_t v95;
  unint64_t v96;
  char *v97;
  int *v98;
  int v99;
  char *v100;
  char *v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t j;
  uint64_t k;
  char v128;
  float v129;
  float v130;
  double v131;
  long double v132;
  double v133;
  float v134;
  float v135;
  float v136;
  long double v137;
  double v138;
  uint64_t v139;
  MIL::Fp16 *v140;
  float v141;
  _QWORD *v142;
  uint64_t v143;
  std::vector<int>::value_type *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *result;
  uint64_t v149;
  std::runtime_error *exception;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  unint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  __int128 __e;
  uint64_t *v189;
  __int128 *v190;
  std::vector<int> v191;
  void *__p;
  float *v193;
  char *v194;
  __int16 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t *v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int16 v219;
  _QWORD v220[3];
  _QWORD *v221;
  std::vector<int>::value_type __u[6];
  std::vector<int>::value_type *v223;
  _QWORD v224[3];
  _QWORD *v225;
  _QWORD v226[3];
  _QWORD *v227;
  uint64_t v228;

  v20 = a7;
  v228 = *MEMORY[0x24BDAC8D0];
  v219 = a17;
  v217 = a3;
  v218 = a1;
  v24 = *a7;
  if (*a7 == 3)
  {
    v25 = *a2;
    v26 = a2[1] - *a2;
    if (v26 <= 8)
      goto LABEL_195;
    v27 = *(_QWORD *)(v25 + 8);
    v215 = 0;
    v216 = v27;
    goto LABEL_5;
  }
  v27 = 1;
  v215 = 0;
  v216 = 1;
  v25 = *a2;
  v26 = a2[1] - *a2;
  if (v24 >= 2)
  {
LABEL_5:
    if (v26 > 0x10)
    {
      v28 = *(_QWORD *)(v26 + v25 - 24);
      v214 = 0;
      v215 = v28;
      goto LABEL_8;
    }
LABEL_195:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v28 = 1;
  v214 = 0;
  v215 = 1;
  v27 = 1;
  if (v26 <= 8)
    goto LABEL_195;
LABEL_8:
  v29 = v26 + v25;
  v30 = *(_QWORD *)(v29 - 16);
  v213 = 0;
  v214 = v30;
  v212 = *(_QWORD *)(v29 - 8);
  v213 = v212;
  v31 = v212 * v30;
  v210 = v31 * v28;
  v211 = v31;
  v209 = v31 * v28 * v27;
  v208 = 0;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v219);
  if (v32 == INFINITY)
  {
    LOBYTE(v33) = -1;
  }
  else if (v32 == -INFINITY)
  {
    LOBYTE(v33) = 0;
  }
  else
  {
    v34 = llroundf(v32);
    if (v34 >= 255)
      v34 = 255;
    v33 = v34 & ~(v34 >> 31);
  }
  v208 = v33;
  v227 = 0;
  if (a15)
  {
    *(_QWORD *)&v201 = &v213;
    *((_QWORD *)&v201 + 1) = &v208;
    v202 = &v218;
    v203 = &v209;
    v204 = &v210;
    v205 = &v211;
    v206 = &v212;
    std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v226, (uint64_t)&v201);
  }
  else
  {
    *(_QWORD *)&v201 = &v216;
    *((_QWORD *)&v201 + 1) = &v215;
    v202 = &v214;
    v203 = &v218;
    v204 = &v209;
    v205 = &v210;
    v206 = &v211;
    v207 = &v212;
    if (a8)
      std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v226, &v201);
    else
      std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v226, &v201);
  }
  v224[0] = &off_24BFE90B8;
  v225 = v224;
  v36 = *(uint64_t **)a6;
  v35 = *(_QWORD *)(a6 + 8);
  v37 = v35 - *(_QWORD *)a6;
  if (v35 == *(_QWORD *)a6)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v38 = (uint64_t)v37 >> 3;
  v174 = *v36;
  v39 = *v20;
  if (*v20 == 3)
  {
    if (v37 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v40 = v36[1];
    goto LABEL_26;
  }
  if (v39 >= 2)
  {
    v40 = 1;
LABEL_26:
    if (v37 <= 0x10)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v41 = &v36[v38];
    v42 = *(v41 - 2);
    v176 = *(v41 - 3);
    v43 = *(v41 - 1);
    if (v39 == 3)
    {
      if (a5[1] - *a5 <= 8uLL)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v44 = *(_QWORD *)(*a5 + 8);
    }
    else
    {
      v44 = 1;
    }
    v178 = v44;
    v45 = *a5;
    v46 = a5[1] - *a5;
    if (v46 <= 0x18)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v164 = v43 * v42;
    v47 = *(_QWORD *)(v46 + v45 - 32);
    goto LABEL_36;
  }
  if (v37 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v45 = *a5;
  v46 = a5[1] - *a5;
  if (v46 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v48 = &v36[v38];
  v42 = *(v48 - 2);
  v43 = *(v48 - 1);
  v164 = v43 * v42;
  v47 = 1;
  v40 = 1;
  v176 = 1;
  v178 = 1;
LABEL_36:
  v49 = v46 + v45;
  v50 = *(_QWORD *)(v49 - 24);
  v51 = *(_QWORD *)(v49 - 16);
  v200 = *(_QWORD *)(v49 - 8);
  v186 = v51;
  v173 = v200;
  v199 = v200 * v51;
  v182 = v50;
  v198 = v200 * v51 * v50;
  v197 = v198 * v47;
  v196 = v198 * v47 * v178;
  *(_QWORD *)&v201 = &v196;
  *((_QWORD *)&v201 + 1) = &v197;
  v202 = &v198;
  v203 = &v199;
  v204 = &v200;
  v52 = v20[4];
  if (v39 >= 3)
  {
    v53 = v20[3];
    v54 = v52 - v53;
    if (v52 - v53 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v55 = *(_DWORD *)(v52 - 12);
    goto LABEL_42;
  }
  v53 = v20[3];
  if (v39 == 2)
  {
    v54 = v52 - v53;
    if (v52 - v53 <= 4)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v55 = 1;
LABEL_42:
    v162 = v55;
    v56 = *(_DWORD *)(v54 + v53 - 8);
    goto LABEL_44;
  }
  v56 = 1;
  v162 = 1;
LABEL_44:
  v163 = v56;
  v180 = v47;
  if (v52 == v53)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v166 = *(_DWORD *)(v52 - 4);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  v170 = v40;
  v172 = v43;
  v57 = v40 * v174 * v176 * v42 * v43;
  std::vector<MIL::Fp16>::reserve((void **)a9, v57);
  v195 = MIL::Fp16::FromFloat(v58, 0.0);
  std::vector<MIL::Fp16>::assign((char **)a9, v57, &v195);
  if (a4 == 4)
    v59 = 10;
  else
    v59 = 0;
  v60 = v59 + a10;
  v61 = ldexp(1.0, v60);
  v62 = ldexp(1.0, v60 + a11);
  v63 = v172;
  if (*((_BYTE *)v20 + 16))
    v63 = v172 / v20[1];
  v169 = v42;
  v171 = v20;
  __p = 0;
  v193 = 0;
  v194 = 0;
  std::vector<float>::reserve(&__p, v63);
  v65 = *a14;
  v64 = a14[1];
  if (v64 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    v67 = exp2(-(double)(v60 + a12)) * v66;
    *(float *)__u = v67;
    std::vector<float>::assign((char **)&__p, v63, __u);
  }
  else if (v65 != v64)
  {
    v68 = exp2(-(double)(v60 + a12));
    do
    {
      MIL::Fp16::GetFloat(v65);
      v70 = v68 * v69;
      v71 = v193;
      if (v193 >= (float *)v194)
      {
        v73 = (float *)__p;
        v74 = ((char *)v193 - (_BYTE *)__p) >> 2;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v76 = v194 - (_BYTE *)__p;
        if ((v194 - (_BYTE *)__p) >> 1 > v75)
          v75 = v76 >> 1;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
          v77 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        if (v77)
        {
          v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v194, v77);
          v73 = (float *)__p;
          v71 = v193;
        }
        else
        {
          v78 = 0;
        }
        v79 = (float *)&v78[4 * v74];
        *v79 = v70;
        v72 = v79 + 1;
        while (v71 != v73)
        {
          v80 = *((_DWORD *)v71-- - 1);
          *((_DWORD *)v79-- - 1) = v80;
        }
        __p = v79;
        v193 = v72;
        v194 = &v78[4 * v77];
        if (v73)
          operator delete(v73);
      }
      else
      {
        *v193 = v70;
        v72 = v71 + 1;
      }
      v193 = v72;
      v65 = (MIL::Fp16 *)((char *)v65 + 2);
    }
    while (v65 != v64);
  }
  memset(&v191, 0, sizeof(v191));
  std::vector<int>::reserve(&v191, v63);
  if (a15)
  {
    __u[0] = 0;
    std::vector<int>::assign(&v191, v63, __u);
  }
  else
  {
    v81 = v62;
    if (*(_QWORD *)(a13 + 8) - *(_QWORD *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      v83 = v82 * v81;
      v84 = llroundf(v83);
      if (fabsf(v83) < 1.0)
        v84 = 0;
      __u[0] = v84;
      std::vector<int>::assign(&v191, v63, __u);
    }
    else if (v63)
    {
      for (i = 0; i != v63; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(_QWORD *)a13 + 2 * i));
        v87 = v86 * v81;
        v88 = llroundf(v87);
        if (fabsf(v87) >= 1.0)
          v89 = v88;
        else
          v89 = 0;
        end = v191.__end_;
        if (v191.__end_ >= v191.__end_cap_.__value_)
        {
          begin = v191.__begin_;
          v93 = v191.__end_ - v191.__begin_;
          v94 = v93 + 1;
          if ((unint64_t)(v93 + 1) >> 62)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v95 = (char *)v191.__end_cap_.__value_ - (char *)v191.__begin_;
          if (((char *)v191.__end_cap_.__value_ - (char *)v191.__begin_) >> 1 > v94)
            v94 = v95 >> 1;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
            v96 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v96 = v94;
          if (v96)
          {
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v191.__end_cap_, v96);
            begin = v191.__begin_;
            end = v191.__end_;
          }
          else
          {
            v97 = 0;
          }
          v98 = (int *)&v97[4 * v93];
          *v98 = v89;
          v91 = v98 + 1;
          while (end != begin)
          {
            v99 = *--end;
            *--v98 = v99;
          }
          v191.__begin_ = v98;
          v191.__end_ = v91;
          v191.__end_cap_.__value_ = (int *)&v97[4 * v96];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v191.__end_ = v89;
          v91 = end + 1;
        }
        v191.__end_ = v91;
      }
    }
  }
  v100 = (char *)v20[10];
  if (*v20 == 3)
  {
    v101 = (char *)v20[9];
    if (v100 == v101)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v102 = *(_DWORD *)v101;
    goto LABEL_104;
  }
  v101 = (char *)v20[9];
  if (*v20 >= 2)
  {
    v102 = 0;
LABEL_104:
    v103 = v100 - v101;
    if (v103 <= 0xC)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v104 = *(_DWORD *)&v101[v103 - 16];
    goto LABEL_108;
  }
  v103 = v100 - v101;
  if (v103 <= 4)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v104 = 0;
  v102 = 0;
LABEL_108:
  v105 = *(_DWORD *)&v101[v103 - 8];
  v223 = 0;
  switch(a4)
  {
    case 4:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},void>(__u);
      break;
    case 9:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},void>(__u);
      break;
    case 14:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},void>(__u);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v221 = 0;
  if (a15)
  {
    *(_QWORD *)&__e = &v213;
    *((_QWORD *)&__e + 1) = a13;
    v189 = &v217;
    v190 = &v201;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v220, &__e);
  }
  else
  {
    *(_QWORD *)&__e = &v217;
    *((_QWORD *)&__e + 1) = &v201;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(v220, &__e);
  }
  v106 = v170;
  v107 = v20[1];
  if (v107)
  {
    v184 = 0;
    v108 = 0;
    v109 = a19;
    v110 = v173;
    v111 = v61;
    v157 = -v102;
    v159 = -v104;
    v161 = -v105;
    while (1)
    {
      v112 = *((_BYTE *)v20 + 16) ? 0 : v108;
      v183 = v112;
      if (v174)
        break;
LABEL_166:
      ++v108;
      v184 += v186;
      if (v107 <= v108)
        goto LABEL_167;
    }
    v185 = 0;
    v113 = v108 * v173;
    if (*((_BYTE *)v20 + 16))
      v114 = 0;
    else
      v114 = (int)v108 * v173;
    v115 = (_QWORD *)a9;
    v116 = v169;
    v154 = v108 * v173;
    v155 = v108;
    v153 = v114;
    while (!v106)
    {
LABEL_164:
      if (++v185 == v174)
      {
        v107 = v20[1];
        goto LABEL_166;
      }
    }
    v117 = 0;
    v158 = v106 * v185;
    while (!v176)
    {
LABEL_163:
      if (++v117 == v106)
        goto LABEL_164;
    }
    v118 = 0;
    v177 = v157 + v162 * v117;
    v160 = (v158 + v117) * v176;
    v151 = v117;
    while (!v116)
    {
LABEL_162:
      ++v118;
      v117 = v151;
      if (v118 == v176)
        goto LABEL_163;
    }
    v119 = 0;
    v179 = v159 + v163 * v118;
    v167 = v164 * (v160 + v118);
    v152 = v118;
    while (v173 < 1)
    {
LABEL_161:
      ++v119;
      v116 = v169;
      v118 = v152;
      if (v119 == v169)
        goto LABEL_162;
    }
    v120 = 0;
    v181 = v161 + v166 * v119;
    v168 = v172 * v119;
    v156 = v119;
    while (1)
    {
      v187 = 0;
      v121 = v191.__begin_[v120 + v114];
      v187 = v121;
      if (v178)
      {
        v165 = v120 + v114;
        v122 = 0;
        v123 = 0;
        v124 = v180;
        do
        {
          if (v124)
          {
            v125 = 0;
            do
            {
              if (v182)
              {
                for (j = 0; j != v182; ++j)
                {
                  if (v186)
                  {
                    for (k = 0; k != v186; ++k)
                    {
                      LOBYTE(__e) = std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v226, v185, v177 + (int)v122, v179 + (int)v125, v181 + (int)j, v184 + (int)k, v120);
                      if (!v225)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v128 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v225 + 48))(v225, &__e);
                      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v220, v183, v122, v125, j, k, v120);
                      v123 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()((uint64_t)__u, (uint64_t)&v187, v123, v128, a10, v129, v111);
                    }
                  }
                }
              }
              ++v125;
              v124 = v180;
            }
            while (v125 != v180);
          }
          ++v122;
        }
        while (v122 != v178);
        v130 = *((float *)__p + v165);
        if (v123)
        {
          v131 = INFINITY;
          if (v123 == 2)
            v131 = -INFINITY;
          v115 = (_QWORD *)a9;
          v106 = v170;
          v20 = v171;
          v113 = v154;
          v108 = v155;
          v110 = v173;
          v109 = a19;
          v114 = v153;
          v119 = v156;
          goto LABEL_154;
        }
        v121 = v187;
        v115 = (_QWORD *)a9;
        v106 = v170;
        v20 = v171;
        v113 = v154;
        v108 = v155;
        v110 = v173;
        v109 = a19;
        v114 = v153;
        v119 = v156;
        if (!v187)
        {
LABEL_156:
          v134 = 0.0;
          goto LABEL_157;
        }
      }
      else
      {
        v130 = *((float *)__p + v120 + v114);
        if (!v121)
          goto LABEL_156;
      }
      v131 = (double)v121;
LABEL_154:
      LODWORD(__e) = 0;
      v132 = frexp(v131, (int *)&__e);
      v133 = ldexp(v132, 11);
      v134 = ldexp(round(v133), (int)__e - 11);
LABEL_157:
      v135 = v130 * v134;
      v136 = 0.0;
      if (v135 != 0.0)
      {
        LODWORD(__e) = 0;
        v137 = frexp(v135, (int *)&__e);
        v138 = ldexp(v137, 11);
        v136 = ldexp(round(v138), (int)__e - 11);
      }
      *(float *)&__e = v136;
      v139 = *(_QWORD *)(v109 + 24);
      if (!v139)
        std::__throw_bad_function_call[abi:ne180100]();
      v140 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v139 + 48))(v139, &__e);
      *(_WORD *)(*v115 + 2 * (v168 + v167 + v120 + v113)) = MIL::Fp16::FromFloat(v140, v141);
      if (++v120 == v110)
        goto LABEL_161;
    }
  }
LABEL_167:
  v142 = v221;
  if (v221 == v220)
  {
    v143 = 4;
    v142 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_172;
    v143 = 5;
  }
  (*(void (**)(void))(*v142 + 8 * v143))();
LABEL_172:
  v144 = v223;
  if (v223 == __u)
  {
    v145 = 4;
    v144 = __u;
  }
  else
  {
    if (!v223)
      goto LABEL_177;
    v145 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v144 + 8 * v145))();
LABEL_177:
  if (v191.__begin_)
  {
    v191.__end_ = v191.__begin_;
    operator delete(v191.__begin_);
  }
  if (__p)
  {
    v193 = (float *)__p;
    operator delete(__p);
  }
  v146 = v225;
  if (v225 == v224)
  {
    v147 = 4;
    v146 = v224;
  }
  else
  {
    if (!v225)
      goto LABEL_186;
    v147 = 5;
  }
  (*(void (**)(void))(*v146 + 8 * v147))();
LABEL_186:
  result = v227;
  if (v227 == v226)
  {
    v149 = 4;
    result = v226;
  }
  else
  {
    if (!v227)
      return result;
    v149 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v149))();
}

void sub_20689532C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56)
{
  uint64_t v56;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v58 = (_QWORD *)STACK[0x298];
  if (STACK[0x298] == v56 - 224)
  {
    v59 = 4;
    v58 = (_QWORD *)(v56 - 224);
  }
  else
  {
    if (!v58)
      goto LABEL_6;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_6:
  if (__p)
    operator delete(__p);
  if (a56)
    operator delete(a56);
  v60 = *(void **)a36;
  if (*(_QWORD *)a36)
  {
    *(_QWORD *)(a36 + 8) = v60;
    operator delete(v60);
  }
  v61 = (_QWORD *)STACK[0x2B8];
  if (STACK[0x2B8] == v56 - 192)
  {
    v62 = 4;
    v61 = (_QWORD *)(v56 - 192);
  }
  else
  {
    if (!v61)
      goto LABEL_17;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_17:
  v63 = (_QWORD *)STACK[0x2D8];
  if (STACK[0x2D8] == v56 - 160)
  {
    v64 = 4;
    v63 = (_QWORD *)(v56 - 160);
  }
  else
  {
    if (!v63)
      goto LABEL_22;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_22:
  _Unwind_Resume(a1);
}

_QWORD *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, uint64_t a18, uint64_t a19)
{
  unint64_t *v20;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  size_t v57;
  int v58;
  int v59;
  double v60;
  double v61;
  unint64_t v62;
  MIL::Fp16 *v63;
  MIL::Fp16 *v64;
  float v65;
  float v66;
  double v67;
  float v68;
  float v69;
  float *v70;
  float *v71;
  float *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  float *v78;
  int v79;
  float v80;
  float v81;
  float v82;
  unsigned int v83;
  uint64_t i;
  float v85;
  float v86;
  unsigned int v87;
  int v88;
  std::vector<int>::pointer end;
  int *v90;
  std::vector<int>::pointer begin;
  int64_t v92;
  unint64_t v93;
  int64_t v94;
  unint64_t v95;
  char *v96;
  int *v97;
  int v98;
  char *v99;
  char *v100;
  int v101;
  unint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t j;
  uint64_t k;
  char v126;
  float v127;
  float v128;
  double v129;
  long double v130;
  double v131;
  float v132;
  float v133;
  float v134;
  long double v135;
  double v136;
  uint64_t v137;
  float v138;
  int v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  std::vector<int>::value_type *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *result;
  uint64_t v148;
  std::runtime_error *exception;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  unint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  __int128 __e;
  uint64_t *v185;
  __int128 *v186;
  std::vector<int> v187;
  void *__p;
  float *v189;
  char *v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t *v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int16 v215;
  _QWORD v216[3];
  _QWORD *v217;
  std::vector<int>::value_type __u[6];
  std::vector<int>::value_type *v219;
  _QWORD v220[3];
  _QWORD *v221;
  _QWORD v222[3];
  _QWORD *v223;
  uint64_t v224;

  v20 = a7;
  v224 = *MEMORY[0x24BDAC8D0];
  v215 = a17;
  v213 = a3;
  v214 = a1;
  v24 = *a7;
  if (*a7 == 3)
  {
    v25 = *a2;
    v26 = a2[1] - *a2;
    if (v26 <= 8)
      goto LABEL_202;
    v27 = *(_QWORD *)(v25 + 8);
    v211 = 0;
    v212 = v27;
    goto LABEL_5;
  }
  v27 = 1;
  v211 = 0;
  v212 = 1;
  v25 = *a2;
  v26 = a2[1] - *a2;
  if (v24 >= 2)
  {
LABEL_5:
    if (v26 > 0x10)
    {
      v28 = *(_QWORD *)(v26 + v25 - 24);
      v210 = 0;
      v211 = v28;
      goto LABEL_8;
    }
LABEL_202:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v28 = 1;
  v210 = 0;
  v211 = 1;
  v27 = 1;
  if (v26 <= 8)
    goto LABEL_202;
LABEL_8:
  v29 = v26 + v25;
  v30 = *(_QWORD *)(v29 - 16);
  v209 = 0;
  v210 = v30;
  v208 = *(_QWORD *)(v29 - 8);
  v209 = v208;
  v31 = v208 * v30;
  v206 = v31 * v28;
  v207 = v31;
  v205 = v31 * v28 * v27;
  v204 = 0;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v215);
  if (v32 == INFINITY)
  {
    LOBYTE(v33) = -1;
  }
  else if (v32 == -INFINITY)
  {
    LOBYTE(v33) = 0;
  }
  else
  {
    v34 = llroundf(v32);
    if (v34 >= 255)
      v34 = 255;
    v33 = v34 & ~(v34 >> 31);
  }
  v204 = v33;
  v223 = 0;
  if (a15)
  {
    *(_QWORD *)&v197 = &v209;
    *((_QWORD *)&v197 + 1) = &v204;
    v198 = &v214;
    v199 = &v205;
    v200 = &v206;
    v201 = &v207;
    v202 = &v208;
    std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v222, (uint64_t)&v197);
  }
  else
  {
    *(_QWORD *)&v197 = &v212;
    *((_QWORD *)&v197 + 1) = &v211;
    v198 = &v210;
    v199 = &v214;
    v200 = &v205;
    v201 = &v206;
    v202 = &v207;
    v203 = &v208;
    if (a8)
      std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v222, &v197);
    else
      std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v222, &v197);
  }
  v220[0] = &off_24BFE9548;
  v221 = v220;
  v36 = *(uint64_t **)a6;
  v35 = *(_QWORD *)(a6 + 8);
  v37 = v35 - *(_QWORD *)a6;
  if (v35 == *(_QWORD *)a6)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v38 = (uint64_t)v37 >> 3;
  v171 = *v36;
  v39 = *v20;
  if (*v20 == 3)
  {
    if (v37 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v40 = v36[1];
    goto LABEL_26;
  }
  if (v39 >= 2)
  {
    v40 = 1;
LABEL_26:
    if (v37 <= 0x10)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v41 = &v36[v38];
    v42 = *(v41 - 2);
    v173 = *(v41 - 3);
    v43 = *(v41 - 1);
    if (v39 == 3)
    {
      if (a5[1] - *a5 <= 8uLL)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v44 = *(_QWORD *)(*a5 + 8);
    }
    else
    {
      v44 = 1;
    }
    v175 = v44;
    v45 = *a5;
    v46 = a5[1] - *a5;
    if (v46 <= 0x18)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v162 = v43 * v42;
    v47 = *(_QWORD *)(v46 + v45 - 32);
    goto LABEL_36;
  }
  if (v37 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v45 = *a5;
  v46 = a5[1] - *a5;
  if (v46 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v48 = &v36[v38];
  v42 = *(v48 - 2);
  v43 = *(v48 - 1);
  v162 = v43 * v42;
  v47 = 1;
  v40 = 1;
  v173 = 1;
  v175 = 1;
LABEL_36:
  v49 = v46 + v45;
  v50 = *(_QWORD *)(v49 - 24);
  v51 = *(_QWORD *)(v49 - 16);
  v196 = *(_QWORD *)(v49 - 8);
  v182 = v51;
  v170 = v196;
  v195 = v196 * v51;
  v178 = v50;
  v194 = v196 * v51 * v50;
  v193 = v194 * v47;
  v192 = v194 * v47 * v175;
  *(_QWORD *)&v197 = &v192;
  *((_QWORD *)&v197 + 1) = &v193;
  v198 = &v194;
  v199 = &v195;
  v200 = &v196;
  v52 = v20[4];
  if (v39 >= 3)
  {
    v53 = v20[3];
    v54 = v52 - v53;
    if (v52 - v53 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v55 = *(_DWORD *)(v52 - 12);
    goto LABEL_42;
  }
  v53 = v20[3];
  if (v39 == 2)
  {
    v54 = v52 - v53;
    if (v52 - v53 <= 4)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v55 = 1;
LABEL_42:
    v160 = v55;
    v56 = *(_DWORD *)(v54 + v53 - 8);
    goto LABEL_44;
  }
  v56 = 1;
  v160 = 1;
LABEL_44:
  v161 = v56;
  v177 = v47;
  if (v52 == v53)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v163 = *(_DWORD *)(v52 - 4);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v167 = v40;
  v169 = v43;
  v57 = v40 * v171 * v173 * v42 * v43;
  std::vector<unsigned char>::reserve(a9, v57);
  v191 = 0;
  std::vector<unsigned char>::assign((char **)a9, v57, &v191);
  if (a4 == 4)
    v58 = 10;
  else
    v58 = 0;
  v59 = v58 + a10;
  v60 = ldexp(1.0, v59);
  v61 = ldexp(1.0, v59 + a11);
  v62 = v169;
  if (*((_BYTE *)v20 + 16))
    v62 = v169 / v20[1];
  v165 = v42;
  v168 = v20;
  __p = 0;
  v189 = 0;
  v190 = 0;
  std::vector<float>::reserve(&__p, v62);
  v64 = *a14;
  v63 = a14[1];
  if (v63 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    v66 = exp2(-(double)(v59 + a12)) * v65;
    *(float *)__u = v66;
    std::vector<float>::assign((char **)&__p, v62, __u);
  }
  else if (v64 != v63)
  {
    v67 = exp2(-(double)(v59 + a12));
    do
    {
      MIL::Fp16::GetFloat(v64);
      v69 = v67 * v68;
      v70 = v189;
      if (v189 >= (float *)v190)
      {
        v72 = (float *)__p;
        v73 = ((char *)v189 - (_BYTE *)__p) >> 2;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v75 = v190 - (_BYTE *)__p;
        if ((v190 - (_BYTE *)__p) >> 1 > v74)
          v74 = v75 >> 1;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
          v76 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76)
        {
          v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v190, v76);
          v72 = (float *)__p;
          v70 = v189;
        }
        else
        {
          v77 = 0;
        }
        v78 = (float *)&v77[4 * v73];
        *v78 = v69;
        v71 = v78 + 1;
        while (v70 != v72)
        {
          v79 = *((_DWORD *)v70-- - 1);
          *((_DWORD *)v78-- - 1) = v79;
        }
        __p = v78;
        v189 = v71;
        v190 = &v77[4 * v76];
        if (v72)
          operator delete(v72);
      }
      else
      {
        *v189 = v69;
        v71 = v70 + 1;
      }
      v189 = v71;
      v64 = (MIL::Fp16 *)((char *)v64 + 2);
    }
    while (v64 != v63);
  }
  memset(&v187, 0, sizeof(v187));
  std::vector<int>::reserve(&v187, v62);
  if (a15)
  {
    __u[0] = 0;
    std::vector<int>::assign(&v187, v62, __u);
  }
  else
  {
    v80 = v61;
    if (*(_QWORD *)(a13 + 8) - *(_QWORD *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      v82 = v81 * v80;
      v83 = llroundf(v82);
      if (fabsf(v82) < 1.0)
        v83 = 0;
      __u[0] = v83;
      std::vector<int>::assign(&v187, v62, __u);
    }
    else if (v62)
    {
      for (i = 0; i != v62; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(_QWORD *)a13 + 2 * i));
        v86 = v85 * v80;
        v87 = llroundf(v86);
        if (fabsf(v86) >= 1.0)
          v88 = v87;
        else
          v88 = 0;
        end = v187.__end_;
        if (v187.__end_ >= v187.__end_cap_.__value_)
        {
          begin = v187.__begin_;
          v92 = v187.__end_ - v187.__begin_;
          v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v94 = (char *)v187.__end_cap_.__value_ - (char *)v187.__begin_;
          if (((char *)v187.__end_cap_.__value_ - (char *)v187.__begin_) >> 1 > v93)
            v93 = v94 >> 1;
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
            v95 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v95 = v93;
          if (v95)
          {
            v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v187.__end_cap_, v95);
            begin = v187.__begin_;
            end = v187.__end_;
          }
          else
          {
            v96 = 0;
          }
          v97 = (int *)&v96[4 * v92];
          *v97 = v88;
          v90 = v97 + 1;
          while (end != begin)
          {
            v98 = *--end;
            *--v97 = v98;
          }
          v187.__begin_ = v97;
          v187.__end_ = v90;
          v187.__end_cap_.__value_ = (int *)&v96[4 * v95];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v187.__end_ = v88;
          v90 = end + 1;
        }
        v187.__end_ = v90;
      }
    }
  }
  v99 = (char *)v20[10];
  if (*v20 == 3)
  {
    v100 = (char *)v20[9];
    if (v99 == v100)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v101 = *(_DWORD *)v100;
    goto LABEL_104;
  }
  v100 = (char *)v20[9];
  if (*v20 >= 2)
  {
    v101 = 0;
LABEL_104:
    v102 = v99 - v100;
    if (v102 <= 0xC)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v103 = *(_DWORD *)&v100[v102 - 16];
    goto LABEL_108;
  }
  v102 = v99 - v100;
  if (v102 <= 4)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v103 = 0;
  v101 = 0;
LABEL_108:
  v104 = *(_DWORD *)&v100[v102 - 8];
  v219 = 0;
  switch(a4)
  {
    case 4:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},void>(__u);
      break;
    case 9:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},void>(__u);
      break;
    case 14:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},void>(__u);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v217 = 0;
  if (a15)
  {
    *(_QWORD *)&__e = &v209;
    *((_QWORD *)&__e + 1) = a13;
    v185 = &v213;
    v186 = &v197;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v216, &__e);
  }
  else
  {
    *(_QWORD *)&__e = &v213;
    *((_QWORD *)&__e + 1) = &v197;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(v216, &__e);
  }
  v105 = v167;
  v106 = v20[1];
  if (v106)
  {
    v180 = 0;
    v107 = 0;
    v108 = a19;
    v109 = v170;
    v110 = v60;
    v155 = -v101;
    v157 = -v103;
    v159 = -v104;
    while (1)
    {
      v111 = *((_BYTE *)v20 + 16) ? 0 : v107;
      v179 = v111;
      if (v171)
        break;
LABEL_173:
      ++v107;
      v180 += v182;
      if (v106 <= v107)
        goto LABEL_174;
    }
    v181 = 0;
    v112 = v107 * v170;
    if (*((_BYTE *)v20 + 16))
      v113 = 0;
    else
      v113 = (int)v107 * v170;
    v114 = a9;
    v115 = v165;
    v153 = v107 * v170;
    v154 = v107;
    v152 = v113;
    while (!v105)
    {
LABEL_171:
      if (++v181 == v171)
      {
        v106 = v20[1];
        goto LABEL_173;
      }
    }
    v116 = 0;
    v156 = v105 * v181;
    while (!v173)
    {
LABEL_170:
      if (++v116 == v105)
        goto LABEL_171;
    }
    v117 = 0;
    v174 = v155 + v160 * v116;
    v158 = (v156 + v116) * v173;
    v150 = v116;
    while (!v115)
    {
LABEL_169:
      ++v117;
      v116 = v150;
      if (v117 == v173)
        goto LABEL_170;
    }
    v166 = 0;
    v176 = v157 + v161 * v117;
    v164 = v162 * (v158 + v117);
    v151 = v117;
    while (v170 < 1)
    {
LABEL_168:
      v115 = v165;
      ++v166;
      v117 = v151;
      if (v166 == v165)
        goto LABEL_169;
    }
    v118 = 0;
    while (1)
    {
      v183 = 0;
      v119 = v187.__begin_[v118 + v113];
      v183 = v119;
      if (v175)
      {
        v120 = 0;
        v121 = 0;
        v122 = v177;
        do
        {
          if (v122)
          {
            v123 = 0;
            do
            {
              if (v178)
              {
                for (j = 0; j != v178; ++j)
                {
                  if (v182)
                  {
                    for (k = 0; k != v182; ++k)
                    {
                      LOBYTE(__e) = std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v222, v181, v174 + (int)v120, v176 + (int)v123, v159 + v163 * (int)v166 + (int)j, v180 + (int)k, v118);
                      if (!v221)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v126 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v221 + 48))(v221, &__e);
                      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v216, v179, v120, v123, j, k, v118);
                      v121 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()((uint64_t)__u, (uint64_t)&v183, v121, v126, a10, v127, v110);
                    }
                  }
                }
              }
              ++v123;
              v122 = v177;
            }
            while (v123 != v177);
          }
          ++v120;
        }
        while (v120 != v175);
        v128 = *((float *)__p + v118 + v113);
        if (v121)
        {
          v129 = INFINITY;
          if (v121 == 2)
            v129 = -INFINITY;
          v114 = a9;
          v105 = v167;
          v20 = v168;
          v112 = v153;
          v107 = v154;
          v109 = v170;
          v108 = a19;
          v113 = v152;
          goto LABEL_154;
        }
        v119 = v183;
        v114 = a9;
        v105 = v167;
        v20 = v168;
        v112 = v153;
        v107 = v154;
        v109 = v170;
        v108 = a19;
        v113 = v152;
        if (!v183)
        {
LABEL_156:
          v132 = 0.0;
          goto LABEL_157;
        }
      }
      else
      {
        v128 = *((float *)__p + v118 + v113);
        if (!v119)
          goto LABEL_156;
      }
      v129 = (double)v119;
LABEL_154:
      LODWORD(__e) = 0;
      v130 = frexp(v129, (int *)&__e);
      v131 = ldexp(v130, 11);
      v132 = ldexp(round(v131), (int)__e - 11);
LABEL_157:
      v133 = v128 * v132;
      v134 = 0.0;
      if (v133 != 0.0)
      {
        LODWORD(__e) = 0;
        v135 = frexp(v133, (int *)&__e);
        v136 = ldexp(v135, 11);
        v134 = ldexp(round(v136), (int)__e - 11);
      }
      *(float *)&__e = v134;
      v137 = *(_QWORD *)(v108 + 24);
      if (!v137)
        std::__throw_bad_function_call[abi:ne180100]();
      v138 = (*(float (**)(uint64_t, __int128 *))(*(_QWORD *)v137 + 48))(v137, &__e);
      if (v138 == INFINITY)
      {
        LOBYTE(v139) = -1;
      }
      else if (v138 == -INFINITY)
      {
        LOBYTE(v139) = 0;
      }
      else
      {
        v140 = llroundf(v138);
        if (v140 >= 255)
          v140 = 255;
        v139 = v140 & ~(v140 >> 31);
      }
      *(_BYTE *)(*v114 + v169 * v166 + v164 + v118 + v112) = v139;
      if (++v118 == v109)
        goto LABEL_168;
    }
  }
LABEL_174:
  v141 = v217;
  if (v217 == v216)
  {
    v142 = 4;
    v141 = v216;
  }
  else
  {
    if (!v217)
      goto LABEL_179;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_179:
  v143 = v219;
  if (v219 == __u)
  {
    v144 = 4;
    v143 = __u;
  }
  else
  {
    if (!v219)
      goto LABEL_184;
    v144 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v143 + 8 * v144))();
LABEL_184:
  if (v187.__begin_)
  {
    v187.__end_ = v187.__begin_;
    operator delete(v187.__begin_);
  }
  if (__p)
  {
    v189 = (float *)__p;
    operator delete(__p);
  }
  v145 = v221;
  if (v221 == v220)
  {
    v146 = 4;
    v145 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_193;
    v146 = 5;
  }
  (*(void (**)(void))(*v145 + 8 * v146))();
LABEL_193:
  result = v223;
  if (v223 == v222)
  {
    v148 = 4;
    result = v222;
  }
  else
  {
    if (!v223)
      return result;
    v148 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v148))();
}

void sub_2068963B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56)
{
  uint64_t v56;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v58 = (_QWORD *)STACK[0x298];
  if (STACK[0x298] == v56 - 224)
  {
    v59 = 4;
    v58 = (_QWORD *)(v56 - 224);
  }
  else
  {
    if (!v58)
      goto LABEL_6;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_6:
  if (__p)
    operator delete(__p);
  if (a56)
    operator delete(a56);
  v60 = *(void **)a36;
  if (*(_QWORD *)a36)
  {
    *(_QWORD *)(a36 + 8) = v60;
    operator delete(v60);
  }
  v61 = (_QWORD *)STACK[0x2B8];
  if (STACK[0x2B8] == v56 - 192)
  {
    v62 = 4;
    v61 = (_QWORD *)(v56 - 192);
  }
  else
  {
    if (!v61)
      goto LABEL_17;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_17:
  v63 = (_QWORD *)STACK[0x2D8];
  if (STACK[0x2D8] == v56 - 160)
  {
    v64 = 4;
    v63 = (_QWORD *)(v56 - 160);
  }
  else
  {
    if (!v63)
      goto LABEL_22;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_22:
  _Unwind_Resume(a1);
}

_QWORD *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, uint64_t a18, uint64_t a19)
{
  unint64_t *v20;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  size_t v57;
  int v58;
  int v59;
  double v60;
  double v61;
  unint64_t v62;
  MIL::Fp16 *v63;
  MIL::Fp16 *v64;
  float v65;
  float v66;
  double v67;
  float v68;
  float v69;
  float *v70;
  float *v71;
  float *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  float *v78;
  int v79;
  float v80;
  float v81;
  float v82;
  unsigned int v83;
  uint64_t i;
  float v85;
  float v86;
  unsigned int v87;
  int v88;
  std::vector<int>::pointer end;
  int *v90;
  std::vector<int>::pointer begin;
  int64_t v92;
  unint64_t v93;
  int64_t v94;
  unint64_t v95;
  char *v96;
  int *v97;
  int v98;
  char *v99;
  char *v100;
  int v101;
  unint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t j;
  uint64_t k;
  char v126;
  float v127;
  float v128;
  double v129;
  long double v130;
  double v131;
  float v132;
  float v133;
  float v134;
  long double v135;
  double v136;
  uint64_t v137;
  float v138;
  int v139;
  _QWORD *v140;
  uint64_t v141;
  std::vector<int>::value_type *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *result;
  uint64_t v147;
  std::runtime_error *exception;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  unint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  __int128 __e;
  uint64_t *v184;
  __int128 *v185;
  std::vector<int> v186;
  void *__p;
  float *v188;
  char *v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int16 v214;
  _QWORD v215[3];
  _QWORD *v216;
  std::vector<int>::value_type __u[6];
  std::vector<int>::value_type *v218;
  _QWORD v219[3];
  _QWORD *v220;
  _QWORD v221[3];
  _QWORD *v222;
  uint64_t v223;

  v20 = a7;
  v223 = *MEMORY[0x24BDAC8D0];
  v214 = a17;
  v212 = a3;
  v213 = a1;
  v24 = *a7;
  if (*a7 == 3)
  {
    v25 = *a2;
    v26 = a2[1] - *a2;
    if (v26 <= 8)
      goto LABEL_203;
    v27 = *(_QWORD *)(v25 + 8);
    v210 = 0;
    v211 = v27;
    goto LABEL_5;
  }
  v27 = 1;
  v210 = 0;
  v211 = 1;
  v25 = *a2;
  v26 = a2[1] - *a2;
  if (v24 >= 2)
  {
LABEL_5:
    if (v26 > 0x10)
    {
      v28 = *(_QWORD *)(v26 + v25 - 24);
      v209 = 0;
      v210 = v28;
      goto LABEL_8;
    }
LABEL_203:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v28 = 1;
  v209 = 0;
  v210 = 1;
  v27 = 1;
  if (v26 <= 8)
    goto LABEL_203;
LABEL_8:
  v29 = v26 + v25;
  v30 = *(_QWORD *)(v29 - 16);
  v208 = 0;
  v209 = v30;
  v207 = *(_QWORD *)(v29 - 8);
  v208 = v207;
  v31 = v207 * v30;
  v205 = v31 * v28;
  v206 = v31;
  v204 = v31 * v28 * v27;
  v203 = 0;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v214);
  if (v32 == INFINITY)
  {
    LOBYTE(v33) = -1;
  }
  else if (v32 == -INFINITY)
  {
    LOBYTE(v33) = 0;
  }
  else
  {
    v34 = llroundf(v32);
    if (v34 >= 255)
      v34 = 255;
    v33 = v34 & ~(v34 >> 31);
  }
  v203 = v33;
  v222 = 0;
  if (a15)
  {
    *(_QWORD *)&v196 = &v208;
    *((_QWORD *)&v196 + 1) = &v203;
    v197 = &v213;
    v198 = &v204;
    v199 = &v205;
    v200 = &v206;
    v201 = &v207;
    std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v221, (uint64_t)&v196);
  }
  else
  {
    *(_QWORD *)&v196 = &v211;
    *((_QWORD *)&v196 + 1) = &v210;
    v197 = &v209;
    v198 = &v213;
    v199 = &v204;
    v200 = &v205;
    v201 = &v206;
    v202 = &v207;
    if (a8)
      std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v221, &v196);
    else
      std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v221, &v196);
  }
  v219[0] = &off_24BFE99C8;
  v220 = v219;
  v36 = *(uint64_t **)a6;
  v35 = *(_QWORD *)(a6 + 8);
  v37 = v35 - *(_QWORD *)a6;
  if (v35 == *(_QWORD *)a6)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v38 = (uint64_t)v37 >> 3;
  v170 = *v36;
  v39 = *v20;
  if (*v20 == 3)
  {
    if (v37 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v40 = v36[1];
    goto LABEL_26;
  }
  if (v39 >= 2)
  {
    v40 = 1;
LABEL_26:
    if (v37 <= 0x10)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v41 = &v36[v38];
    v42 = *(v41 - 2);
    v172 = *(v41 - 3);
    v43 = *(v41 - 1);
    if (v39 == 3)
    {
      if (a5[1] - *a5 <= 8uLL)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v44 = *(_QWORD *)(*a5 + 8);
    }
    else
    {
      v44 = 1;
    }
    v174 = v44;
    v45 = *a5;
    v46 = a5[1] - *a5;
    if (v46 <= 0x18)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v161 = v43 * v42;
    v47 = *(_QWORD *)(v46 + v45 - 32);
    goto LABEL_36;
  }
  if (v37 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v45 = *a5;
  v46 = a5[1] - *a5;
  if (v46 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v48 = &v36[v38];
  v42 = *(v48 - 2);
  v43 = *(v48 - 1);
  v161 = v43 * v42;
  v47 = 1;
  v40 = 1;
  v172 = 1;
  v174 = 1;
LABEL_36:
  v49 = v46 + v45;
  v50 = *(_QWORD *)(v49 - 24);
  v51 = *(_QWORD *)(v49 - 16);
  v195 = *(_QWORD *)(v49 - 8);
  v181 = v51;
  v169 = v195;
  v194 = v195 * v51;
  v177 = v50;
  v193 = v195 * v51 * v50;
  v192 = v193 * v47;
  v191 = v193 * v47 * v174;
  *(_QWORD *)&v196 = &v191;
  *((_QWORD *)&v196 + 1) = &v192;
  v197 = &v193;
  v198 = &v194;
  v199 = &v195;
  v52 = v20[4];
  if (v39 >= 3)
  {
    v53 = v20[3];
    v54 = v52 - v53;
    if (v52 - v53 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v55 = *(_DWORD *)(v52 - 12);
    goto LABEL_42;
  }
  v53 = v20[3];
  if (v39 == 2)
  {
    v54 = v52 - v53;
    if (v52 - v53 <= 4)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v55 = 1;
LABEL_42:
    v159 = v55;
    v56 = *(_DWORD *)(v54 + v53 - 8);
    goto LABEL_44;
  }
  v56 = 1;
  v159 = 1;
LABEL_44:
  v160 = v56;
  v176 = v47;
  if (v52 == v53)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v162 = *(_DWORD *)(v52 - 4);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v166 = v40;
  v168 = v43;
  v57 = v40 * v170 * v172 * v42 * v43;
  std::vector<unsigned char>::reserve(a9, v57);
  v190 = 0;
  std::vector<unsigned char>::assign((char **)a9, v57, &v190);
  if (a4 == 4)
    v58 = 10;
  else
    v58 = 0;
  v59 = v58 + a10;
  v60 = ldexp(1.0, v59);
  v61 = ldexp(1.0, v59 + a11);
  v62 = v168;
  if (*((_BYTE *)v20 + 16))
    v62 = v168 / v20[1];
  v164 = v42;
  v167 = v20;
  __p = 0;
  v188 = 0;
  v189 = 0;
  std::vector<float>::reserve(&__p, v62);
  v64 = *a14;
  v63 = a14[1];
  if (v63 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    v66 = exp2(-(double)(v59 + a12)) * v65;
    *(float *)__u = v66;
    std::vector<float>::assign((char **)&__p, v62, __u);
  }
  else if (v64 != v63)
  {
    v67 = exp2(-(double)(v59 + a12));
    do
    {
      MIL::Fp16::GetFloat(v64);
      v69 = v67 * v68;
      v70 = v188;
      if (v188 >= (float *)v189)
      {
        v72 = (float *)__p;
        v73 = ((char *)v188 - (_BYTE *)__p) >> 2;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v75 = v189 - (_BYTE *)__p;
        if ((v189 - (_BYTE *)__p) >> 1 > v74)
          v74 = v75 >> 1;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
          v76 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76)
        {
          v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v189, v76);
          v72 = (float *)__p;
          v70 = v188;
        }
        else
        {
          v77 = 0;
        }
        v78 = (float *)&v77[4 * v73];
        *v78 = v69;
        v71 = v78 + 1;
        while (v70 != v72)
        {
          v79 = *((_DWORD *)v70-- - 1);
          *((_DWORD *)v78-- - 1) = v79;
        }
        __p = v78;
        v188 = v71;
        v189 = &v77[4 * v76];
        if (v72)
          operator delete(v72);
      }
      else
      {
        *v188 = v69;
        v71 = v70 + 1;
      }
      v188 = v71;
      v64 = (MIL::Fp16 *)((char *)v64 + 2);
    }
    while (v64 != v63);
  }
  memset(&v186, 0, sizeof(v186));
  std::vector<int>::reserve(&v186, v62);
  if (a15)
  {
    __u[0] = 0;
    std::vector<int>::assign(&v186, v62, __u);
  }
  else
  {
    v80 = v61;
    if (*(_QWORD *)(a13 + 8) - *(_QWORD *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      v82 = v81 * v80;
      v83 = llroundf(v82);
      if (fabsf(v82) < 1.0)
        v83 = 0;
      __u[0] = v83;
      std::vector<int>::assign(&v186, v62, __u);
    }
    else if (v62)
    {
      for (i = 0; i != v62; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(_QWORD *)a13 + 2 * i));
        v86 = v85 * v80;
        v87 = llroundf(v86);
        if (fabsf(v86) >= 1.0)
          v88 = v87;
        else
          v88 = 0;
        end = v186.__end_;
        if (v186.__end_ >= v186.__end_cap_.__value_)
        {
          begin = v186.__begin_;
          v92 = v186.__end_ - v186.__begin_;
          v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v94 = (char *)v186.__end_cap_.__value_ - (char *)v186.__begin_;
          if (((char *)v186.__end_cap_.__value_ - (char *)v186.__begin_) >> 1 > v93)
            v93 = v94 >> 1;
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
            v95 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v95 = v93;
          if (v95)
          {
            v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v186.__end_cap_, v95);
            begin = v186.__begin_;
            end = v186.__end_;
          }
          else
          {
            v96 = 0;
          }
          v97 = (int *)&v96[4 * v92];
          *v97 = v88;
          v90 = v97 + 1;
          while (end != begin)
          {
            v98 = *--end;
            *--v97 = v98;
          }
          v186.__begin_ = v97;
          v186.__end_ = v90;
          v186.__end_cap_.__value_ = (int *)&v96[4 * v95];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v186.__end_ = v88;
          v90 = end + 1;
        }
        v186.__end_ = v90;
      }
    }
  }
  v99 = (char *)v20[10];
  if (*v20 == 3)
  {
    v100 = (char *)v20[9];
    if (v99 == v100)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v101 = *(_DWORD *)v100;
    goto LABEL_104;
  }
  v100 = (char *)v20[9];
  if (*v20 >= 2)
  {
    v101 = 0;
LABEL_104:
    v102 = v99 - v100;
    if (v102 <= 0xC)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v103 = *(_DWORD *)&v100[v102 - 16];
    goto LABEL_108;
  }
  v102 = v99 - v100;
  if (v102 <= 4)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v103 = 0;
  v101 = 0;
LABEL_108:
  v104 = *(_DWORD *)&v100[v102 - 8];
  v218 = 0;
  switch(a4)
  {
    case 4:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},void>(__u);
      break;
    case 9:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},void>(__u);
      break;
    case 14:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},void>(__u);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v216 = 0;
  if (a15)
  {
    *(_QWORD *)&__e = &v208;
    *((_QWORD *)&__e + 1) = a13;
    v184 = &v212;
    v185 = &v196;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v215, &__e);
  }
  else
  {
    *(_QWORD *)&__e = &v212;
    *((_QWORD *)&__e + 1) = &v196;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(v215, &__e);
  }
  v105 = v166;
  v106 = v20[1];
  if (v106)
  {
    v179 = 0;
    v107 = 0;
    v108 = a19;
    v109 = v169;
    v110 = v60;
    v154 = -v101;
    v156 = -v103;
    v158 = -v104;
    while (1)
    {
      v111 = *((_BYTE *)v20 + 16) ? 0 : v107;
      v178 = v111;
      if (v170)
        break;
LABEL_174:
      ++v107;
      v179 += v181;
      if (v106 <= v107)
        goto LABEL_175;
    }
    v180 = 0;
    v112 = v107 * v169;
    if (*((_BYTE *)v20 + 16))
      v113 = 0;
    else
      v113 = (int)v107 * v169;
    v114 = a9;
    v115 = v164;
    v152 = v107 * v169;
    v153 = v107;
    v151 = v113;
    while (!v105)
    {
LABEL_172:
      if (++v180 == v170)
      {
        v106 = v20[1];
        goto LABEL_174;
      }
    }
    v116 = 0;
    v155 = v105 * v180;
    while (!v172)
    {
LABEL_171:
      if (++v116 == v105)
        goto LABEL_172;
    }
    v117 = 0;
    v173 = v154 + v159 * v116;
    v157 = (v155 + v116) * v172;
    v149 = v116;
    while (!v115)
    {
LABEL_170:
      ++v117;
      v116 = v149;
      if (v117 == v172)
        goto LABEL_171;
    }
    v165 = 0;
    v175 = v156 + v160 * v117;
    v163 = v161 * (v157 + v117);
    v150 = v117;
    while (v169 < 1)
    {
LABEL_169:
      v115 = v164;
      ++v165;
      v117 = v150;
      if (v165 == v164)
        goto LABEL_170;
    }
    v118 = 0;
    while (1)
    {
      v182 = 0;
      v119 = v186.__begin_[v118 + v113];
      v182 = v119;
      if (v174)
      {
        v120 = 0;
        v121 = 0;
        v122 = v176;
        do
        {
          if (v122)
          {
            v123 = 0;
            do
            {
              if (v177)
              {
                for (j = 0; j != v177; ++j)
                {
                  if (v181)
                  {
                    for (k = 0; k != v181; ++k)
                    {
                      LOBYTE(__e) = std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v221, v180, v173 + (int)v120, v175 + (int)v123, v158 + v162 * (int)v165 + (int)j, v179 + (int)k, v118);
                      if (!v220)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v126 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v220 + 48))(v220, &__e);
                      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v215, v178, v120, v123, j, k, v118);
                      v121 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()((uint64_t)__u, (uint64_t)&v182, v121, v126, a10, v127, v110);
                    }
                  }
                }
              }
              ++v123;
              v122 = v176;
            }
            while (v123 != v176);
          }
          ++v120;
        }
        while (v120 != v174);
        v128 = *((float *)__p + v118 + v113);
        if (v121)
        {
          v129 = INFINITY;
          if (v121 == 2)
            v129 = -INFINITY;
          v114 = a9;
          v105 = v166;
          v20 = v167;
          v112 = v152;
          v107 = v153;
          v109 = v169;
          v108 = a19;
          v113 = v151;
          goto LABEL_154;
        }
        v119 = v182;
        v114 = a9;
        v105 = v166;
        v20 = v167;
        v112 = v152;
        v107 = v153;
        v109 = v169;
        v108 = a19;
        v113 = v151;
        if (!v182)
        {
LABEL_156:
          v132 = 0.0;
          goto LABEL_157;
        }
      }
      else
      {
        v128 = *((float *)__p + v118 + v113);
        if (!v119)
          goto LABEL_156;
      }
      v129 = (double)v119;
LABEL_154:
      LODWORD(__e) = 0;
      v130 = frexp(v129, (int *)&__e);
      v131 = ldexp(v130, 11);
      v132 = ldexp(round(v131), (int)__e - 11);
LABEL_157:
      v133 = v128 * v132;
      v134 = 0.0;
      if (v133 != 0.0)
      {
        LODWORD(__e) = 0;
        v135 = frexp(v133, (int *)&__e);
        v136 = ldexp(v135, 11);
        v134 = ldexp(round(v136), (int)__e - 11);
      }
      *(float *)&__e = v134;
      v137 = *(_QWORD *)(v108 + 24);
      if (!v137)
        std::__throw_bad_function_call[abi:ne180100]();
      v138 = (*(float (**)(uint64_t, __int128 *))(*(_QWORD *)v137 + 48))(v137, &__e);
      if (v138 == INFINITY)
      {
        LOBYTE(v139) = 127;
      }
      else if (v138 == -INFINITY)
      {
        LOBYTE(v139) = 0x80;
      }
      else
      {
        v139 = llroundf(v138);
        if (v139 >= 127)
          v139 = 127;
        if (v139 <= -128)
          LOBYTE(v139) = 0x80;
      }
      *(_BYTE *)(*v114 + v168 * v165 + v163 + v118 + v112) = v139;
      if (++v118 == v109)
        goto LABEL_169;
    }
  }
LABEL_175:
  v140 = v216;
  if (v216 == v215)
  {
    v141 = 4;
    v140 = v215;
  }
  else
  {
    if (!v216)
      goto LABEL_180;
    v141 = 5;
  }
  (*(void (**)(void))(*v140 + 8 * v141))();
LABEL_180:
  v142 = v218;
  if (v218 == __u)
  {
    v143 = 4;
    v142 = __u;
  }
  else
  {
    if (!v218)
      goto LABEL_185;
    v143 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v142 + 8 * v143))();
LABEL_185:
  if (v186.__begin_)
  {
    v186.__end_ = v186.__begin_;
    operator delete(v186.__begin_);
  }
  if (__p)
  {
    v188 = (float *)__p;
    operator delete(__p);
  }
  v144 = v220;
  if (v220 == v219)
  {
    v145 = 4;
    v144 = v219;
  }
  else
  {
    if (!v220)
      goto LABEL_194;
    v145 = 5;
  }
  (*(void (**)(void))(*v144 + 8 * v145))();
LABEL_194:
  result = v222;
  if (v222 == v221)
  {
    v147 = 4;
    result = v221;
  }
  else
  {
    if (!v222)
      return result;
    v147 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v147))();
}

void sub_206897448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56)
{
  uint64_t v56;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v58 = (_QWORD *)STACK[0x298];
  if (STACK[0x298] == v56 - 224)
  {
    v59 = 4;
    v58 = (_QWORD *)(v56 - 224);
  }
  else
  {
    if (!v58)
      goto LABEL_6;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_6:
  if (__p)
    operator delete(__p);
  if (a56)
    operator delete(a56);
  v60 = *(void **)a36;
  if (*(_QWORD *)a36)
  {
    *(_QWORD *)(a36 + 8) = v60;
    operator delete(v60);
  }
  v61 = (_QWORD *)STACK[0x2B8];
  if (STACK[0x2B8] == v56 - 192)
  {
    v62 = 4;
    v61 = (_QWORD *)(v56 - 192);
  }
  else
  {
    if (!v61)
      goto LABEL_17;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_17:
  v63 = (_QWORD *)STACK[0x2D8];
  if (STACK[0x2D8] == v56 - 160)
  {
    v64 = 4;
    v63 = (_QWORD *)(v56 - 160);
  }
  else
  {
    if (!v63)
      goto LABEL_22;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_22:
  _Unwind_Resume(a1);
}

_QWORD *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, int a18, char a19, uint64_t a20)
{
  unint64_t *v21;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  MIL::Fp16 *v59;
  int v60;
  int v61;
  double v62;
  double v63;
  unint64_t v64;
  MIL::Fp16 *v65;
  MIL::Fp16 *v66;
  float v67;
  float v68;
  double v69;
  float v70;
  float v71;
  float *v72;
  float *v73;
  float *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  float *v80;
  int v81;
  float v82;
  float v83;
  float v84;
  unsigned int v85;
  uint64_t i;
  float v87;
  float v88;
  unsigned int v89;
  int v90;
  std::vector<int>::pointer end;
  int *v92;
  std::vector<int>::pointer begin;
  int64_t v94;
  unint64_t v95;
  int64_t v96;
  unint64_t v97;
  char *v98;
  int *v99;
  int v100;
  char *v101;
  char *v102;
  int v103;
  unint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t j;
  uint64_t k;
  char v129;
  float v130;
  float v131;
  double v132;
  long double v133;
  double v134;
  float v135;
  float v136;
  float v137;
  long double v138;
  double v139;
  uint64_t v140;
  MIL::Fp16 *v141;
  float v142;
  _QWORD *v143;
  uint64_t v144;
  std::vector<int>::value_type *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *result;
  uint64_t v150;
  std::runtime_error *exception;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  __int128 __e;
  uint64_t *v190;
  __int128 *v191;
  std::vector<int> v192;
  void *__p;
  float *v194;
  char *v195;
  __int16 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t *v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int16 v220;
  _QWORD v221[3];
  _QWORD *v222;
  std::vector<int>::value_type __u[6];
  std::vector<int>::value_type *v224;
  _QWORD v225[3];
  _QWORD *v226;
  _QWORD v227[3];
  _QWORD *v228;
  uint64_t v229;

  v21 = a7;
  v229 = *MEMORY[0x24BDAC8D0];
  v220 = a17;
  v218 = a3;
  v219 = a1;
  v25 = *a7;
  if (*a7 == 3)
  {
    v26 = *a2;
    v27 = a2[1] - *a2;
    if (v27 <= 8)
      goto LABEL_198;
    v28 = *(_QWORD *)(v26 + 8);
    v216 = 0;
    v217 = v28;
    goto LABEL_5;
  }
  v28 = 1;
  v216 = 0;
  v217 = 1;
  v26 = *a2;
  v27 = a2[1] - *a2;
  if (v25 >= 2)
  {
LABEL_5:
    if (v27 > 0x10)
    {
      v29 = *(_QWORD *)(v27 + v26 - 24);
      v215 = 0;
      v216 = v29;
      goto LABEL_8;
    }
LABEL_198:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v29 = 1;
  v215 = 0;
  v216 = 1;
  v28 = 1;
  if (v27 <= 8)
    goto LABEL_198;
LABEL_8:
  v30 = v27 + v26;
  v31 = *(_QWORD *)(v30 - 16);
  v214 = 0;
  v215 = v31;
  v213 = *(_QWORD *)(v30 - 8);
  v214 = v213;
  v32 = v213 * v31;
  v211 = v32 * v29;
  v212 = v32;
  v210 = v32 * v29 * v28;
  v209 = 0;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v220);
  if (v33 == INFINITY)
  {
    v34 = 127;
  }
  else
  {
    v34 = 0x80;
    if (v33 != -INFINITY)
    {
      v35 = llroundf(v33);
      if (v35 >= 127)
        v35 = 127;
      if (v35 <= -128)
        v34 = 0x80;
      else
        v34 = v35;
    }
  }
  v209 = v34;
  v228 = 0;
  if (a15)
  {
    *(_QWORD *)&v202 = &v214;
    *((_QWORD *)&v202 + 1) = &v209;
    v203 = &v219;
    v204 = &v210;
    v205 = &v211;
    v206 = &v212;
    v207 = &v213;
    std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v227, (uint64_t)&v202);
  }
  else
  {
    *(_QWORD *)&v202 = &v217;
    *((_QWORD *)&v202 + 1) = &v216;
    v203 = &v215;
    v204 = &v219;
    v205 = &v210;
    v206 = &v211;
    v207 = &v212;
    v208 = &v213;
    if (a8)
      std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v227, &v202);
    else
      std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v227, &v202);
  }
  v225[0] = &off_24BFE9E58;
  v226 = v225;
  if (a19)
    std::function<signed char ()(signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},void>(v225);
  v37 = *(uint64_t **)a6;
  v36 = *(_QWORD *)(a6 + 8);
  v38 = v36 - *(_QWORD *)a6;
  if (v36 == *(_QWORD *)a6)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v39 = (uint64_t)v38 >> 3;
  v175 = *v37;
  v40 = *v21;
  if (*v21 == 3)
  {
    if (v38 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v41 = v37[1];
    goto LABEL_29;
  }
  if (v40 >= 2)
  {
    v41 = 1;
LABEL_29:
    if (v38 <= 0x10)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v42 = &v37[v39];
    v43 = *(v42 - 2);
    v177 = *(v42 - 3);
    v44 = *(v42 - 1);
    if (v40 == 3)
    {
      if (a5[1] - *a5 <= 8uLL)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v45 = *(_QWORD *)(*a5 + 8);
    }
    else
    {
      v45 = 1;
    }
    v179 = v45;
    v46 = *a5;
    v47 = a5[1] - *a5;
    if (v47 <= 0x18)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v165 = v44 * v43;
    v48 = *(_QWORD *)(v47 + v46 - 32);
    goto LABEL_39;
  }
  if (v38 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v46 = *a5;
  v47 = a5[1] - *a5;
  if (v47 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v49 = &v37[v39];
  v43 = *(v49 - 2);
  v44 = *(v49 - 1);
  v165 = v44 * v43;
  v48 = 1;
  v41 = 1;
  v177 = 1;
  v179 = 1;
LABEL_39:
  v50 = v47 + v46;
  v51 = *(_QWORD *)(v50 - 24);
  v52 = *(_QWORD *)(v50 - 16);
  v201 = *(_QWORD *)(v50 - 8);
  v187 = v52;
  v174 = v201;
  v200 = v201 * v52;
  v183 = v51;
  v199 = v201 * v52 * v51;
  v198 = v199 * v48;
  v197 = v199 * v48 * v179;
  *(_QWORD *)&v202 = &v197;
  *((_QWORD *)&v202 + 1) = &v198;
  v203 = &v199;
  v204 = &v200;
  v205 = &v201;
  v53 = v21[4];
  if (v40 >= 3)
  {
    v54 = v21[3];
    v55 = v53 - v54;
    if (v53 - v54 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v56 = *(_DWORD *)(v53 - 12);
    goto LABEL_45;
  }
  v54 = v21[3];
  if (v40 == 2)
  {
    v55 = v53 - v54;
    if (v53 - v54 <= 4)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v56 = 1;
LABEL_45:
    v163 = v56;
    v57 = *(_DWORD *)(v55 + v54 - 8);
    goto LABEL_47;
  }
  v57 = 1;
  v163 = 1;
LABEL_47:
  v164 = v57;
  v181 = v48;
  if (v53 == v54)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v167 = *(_DWORD *)(v53 - 4);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  v171 = v41;
  v173 = v44;
  v58 = v41 * v175 * v177 * v43 * v44;
  std::vector<MIL::Fp16>::reserve((void **)a9, v58);
  v196 = MIL::Fp16::FromFloat(v59, 0.0);
  std::vector<MIL::Fp16>::assign((char **)a9, v58, &v196);
  if (a4 == 4)
    v60 = 10;
  else
    v60 = 0;
  v61 = v60 + a10;
  v62 = ldexp(1.0, v61);
  v63 = ldexp(1.0, v61 + a11);
  v64 = v173;
  if (*((_BYTE *)v21 + 16))
    v64 = v173 / v21[1];
  v170 = v43;
  v172 = v21;
  __p = 0;
  v194 = 0;
  v195 = 0;
  std::vector<float>::reserve(&__p, v64);
  v66 = *a14;
  v65 = a14[1];
  if (v65 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    v68 = exp2(-(double)(v61 + a12)) * v67;
    *(float *)__u = v68;
    std::vector<float>::assign((char **)&__p, v64, __u);
  }
  else if (v66 != v65)
  {
    v69 = exp2(-(double)(v61 + a12));
    do
    {
      MIL::Fp16::GetFloat(v66);
      v71 = v69 * v70;
      v72 = v194;
      if (v194 >= (float *)v195)
      {
        v74 = (float *)__p;
        v75 = ((char *)v194 - (_BYTE *)__p) >> 2;
        v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v77 = v195 - (_BYTE *)__p;
        if ((v195 - (_BYTE *)__p) >> 1 > v76)
          v76 = v77 >> 1;
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
          v78 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v78 = v76;
        if (v78)
        {
          v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v195, v78);
          v74 = (float *)__p;
          v72 = v194;
        }
        else
        {
          v79 = 0;
        }
        v80 = (float *)&v79[4 * v75];
        *v80 = v71;
        v73 = v80 + 1;
        while (v72 != v74)
        {
          v81 = *((_DWORD *)v72-- - 1);
          *((_DWORD *)v80-- - 1) = v81;
        }
        __p = v80;
        v194 = v73;
        v195 = &v79[4 * v78];
        if (v74)
          operator delete(v74);
      }
      else
      {
        *v194 = v71;
        v73 = v72 + 1;
      }
      v194 = v73;
      v66 = (MIL::Fp16 *)((char *)v66 + 2);
    }
    while (v66 != v65);
  }
  memset(&v192, 0, sizeof(v192));
  std::vector<int>::reserve(&v192, v64);
  if (a15)
  {
    __u[0] = 0;
    std::vector<int>::assign(&v192, v64, __u);
  }
  else
  {
    v82 = v63;
    if (*(_QWORD *)(a13 + 8) - *(_QWORD *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      v84 = v83 * v82;
      v85 = llroundf(v84);
      if (fabsf(v84) < 1.0)
        v85 = 0;
      __u[0] = v85;
      std::vector<int>::assign(&v192, v64, __u);
    }
    else if (v64)
    {
      for (i = 0; i != v64; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(_QWORD *)a13 + 2 * i));
        v88 = v87 * v82;
        v89 = llroundf(v88);
        if (fabsf(v88) >= 1.0)
          v90 = v89;
        else
          v90 = 0;
        end = v192.__end_;
        if (v192.__end_ >= v192.__end_cap_.__value_)
        {
          begin = v192.__begin_;
          v94 = v192.__end_ - v192.__begin_;
          v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 62)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v96 = (char *)v192.__end_cap_.__value_ - (char *)v192.__begin_;
          if (((char *)v192.__end_cap_.__value_ - (char *)v192.__begin_) >> 1 > v95)
            v95 = v96 >> 1;
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
            v97 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v97 = v95;
          if (v97)
          {
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v192.__end_cap_, v97);
            begin = v192.__begin_;
            end = v192.__end_;
          }
          else
          {
            v98 = 0;
          }
          v99 = (int *)&v98[4 * v94];
          *v99 = v90;
          v92 = v99 + 1;
          while (end != begin)
          {
            v100 = *--end;
            *--v99 = v100;
          }
          v192.__begin_ = v99;
          v192.__end_ = v92;
          v192.__end_cap_.__value_ = (int *)&v98[4 * v97];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v192.__end_ = v90;
          v92 = end + 1;
        }
        v192.__end_ = v92;
      }
    }
  }
  v101 = (char *)v21[10];
  if (*v21 == 3)
  {
    v102 = (char *)v21[9];
    if (v101 == v102)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v103 = *(_DWORD *)v102;
    goto LABEL_107;
  }
  v102 = (char *)v21[9];
  if (*v21 >= 2)
  {
    v103 = 0;
LABEL_107:
    v104 = v101 - v102;
    if (v104 <= 0xC)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v105 = *(_DWORD *)&v102[v104 - 16];
    goto LABEL_111;
  }
  v104 = v101 - v102;
  if (v104 <= 4)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v105 = 0;
  v103 = 0;
LABEL_111:
  v106 = *(_DWORD *)&v102[v104 - 8];
  v224 = 0;
  switch(a4)
  {
    case 4:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},void>(__u);
      break;
    case 9:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},void>(__u);
      break;
    case 14:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},void>(__u);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v222 = 0;
  if (a15)
  {
    *(_QWORD *)&__e = &v214;
    *((_QWORD *)&__e + 1) = a13;
    v190 = &v218;
    v191 = &v202;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v221, &__e);
  }
  else
  {
    *(_QWORD *)&__e = &v218;
    *((_QWORD *)&__e + 1) = &v202;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(v221, &__e);
  }
  v107 = v171;
  v108 = v21[1];
  if (v108)
  {
    v185 = 0;
    v109 = 0;
    v110 = a20;
    v111 = v174;
    v112 = v62;
    v158 = -v103;
    v160 = -v105;
    v162 = -v106;
    while (1)
    {
      v113 = *((_BYTE *)v21 + 16) ? 0 : v109;
      v184 = v113;
      if (v175)
        break;
LABEL_169:
      ++v109;
      v185 += v187;
      if (v108 <= v109)
        goto LABEL_170;
    }
    v186 = 0;
    v114 = v109 * v174;
    if (*((_BYTE *)v21 + 16))
      v115 = 0;
    else
      v115 = (int)v109 * v174;
    v116 = (_QWORD *)a9;
    v117 = v170;
    v155 = v109 * v174;
    v156 = v109;
    v154 = v115;
    while (!v107)
    {
LABEL_167:
      if (++v186 == v175)
      {
        v108 = v21[1];
        goto LABEL_169;
      }
    }
    v118 = 0;
    v159 = v107 * v186;
    while (!v177)
    {
LABEL_166:
      if (++v118 == v107)
        goto LABEL_167;
    }
    v119 = 0;
    v178 = v158 + v163 * v118;
    v161 = (v159 + v118) * v177;
    v152 = v118;
    while (!v117)
    {
LABEL_165:
      ++v119;
      v118 = v152;
      if (v119 == v177)
        goto LABEL_166;
    }
    v120 = 0;
    v180 = v160 + v164 * v119;
    v168 = v165 * (v161 + v119);
    v153 = v119;
    while (v174 < 1)
    {
LABEL_164:
      ++v120;
      v117 = v170;
      v119 = v153;
      if (v120 == v170)
        goto LABEL_165;
    }
    v121 = 0;
    v182 = v162 + v167 * v120;
    v169 = v173 * v120;
    v157 = v120;
    while (1)
    {
      v188 = 0;
      v122 = v192.__begin_[v121 + v115];
      v188 = v122;
      if (v179)
      {
        v166 = v121 + v115;
        v123 = 0;
        v124 = 0;
        v125 = v181;
        do
        {
          if (v125)
          {
            v126 = 0;
            do
            {
              if (v183)
              {
                for (j = 0; j != v183; ++j)
                {
                  if (v187)
                  {
                    for (k = 0; k != v187; ++k)
                    {
                      LOBYTE(__e) = std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v227, v186, v178 + (int)v123, v180 + (int)v126, v182 + (int)j, v185 + (int)k, v121);
                      if (!v226)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v129 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v226 + 48))(v226, &__e);
                      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v221, v184, v123, v126, j, k, v121);
                      v124 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()((uint64_t)__u, (uint64_t)&v188, v124, v129, a10, v130, v112);
                    }
                  }
                }
              }
              ++v126;
              v125 = v181;
            }
            while (v126 != v181);
          }
          ++v123;
        }
        while (v123 != v179);
        v131 = *((float *)__p + v166);
        if (v124)
        {
          v132 = INFINITY;
          if (v124 == 2)
            v132 = -INFINITY;
          v116 = (_QWORD *)a9;
          v107 = v171;
          v21 = v172;
          v114 = v155;
          v109 = v156;
          v111 = v174;
          v110 = a20;
          v115 = v154;
          v120 = v157;
          goto LABEL_157;
        }
        v122 = v188;
        v116 = (_QWORD *)a9;
        v107 = v171;
        v21 = v172;
        v114 = v155;
        v109 = v156;
        v111 = v174;
        v110 = a20;
        v115 = v154;
        v120 = v157;
        if (!v188)
        {
LABEL_159:
          v135 = 0.0;
          goto LABEL_160;
        }
      }
      else
      {
        v131 = *((float *)__p + v121 + v115);
        if (!v122)
          goto LABEL_159;
      }
      v132 = (double)v122;
LABEL_157:
      LODWORD(__e) = 0;
      v133 = frexp(v132, (int *)&__e);
      v134 = ldexp(v133, 11);
      v135 = ldexp(round(v134), (int)__e - 11);
LABEL_160:
      v136 = v131 * v135;
      v137 = 0.0;
      if (v136 != 0.0)
      {
        LODWORD(__e) = 0;
        v138 = frexp(v136, (int *)&__e);
        v139 = ldexp(v138, 11);
        v137 = ldexp(round(v139), (int)__e - 11);
      }
      *(float *)&__e = v137;
      v140 = *(_QWORD *)(v110 + 24);
      if (!v140)
        std::__throw_bad_function_call[abi:ne180100]();
      v141 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v140 + 48))(v140, &__e);
      *(_WORD *)(*v116 + 2 * (v169 + v168 + v121 + v114)) = MIL::Fp16::FromFloat(v141, v142);
      if (++v121 == v111)
        goto LABEL_164;
    }
  }
LABEL_170:
  v143 = v222;
  if (v222 == v221)
  {
    v144 = 4;
    v143 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_175;
    v144 = 5;
  }
  (*(void (**)(void))(*v143 + 8 * v144))();
LABEL_175:
  v145 = v224;
  if (v224 == __u)
  {
    v146 = 4;
    v145 = __u;
  }
  else
  {
    if (!v224)
      goto LABEL_180;
    v146 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v145 + 8 * v146))();
LABEL_180:
  if (v192.__begin_)
  {
    v192.__end_ = v192.__begin_;
    operator delete(v192.__begin_);
  }
  if (__p)
  {
    v194 = (float *)__p;
    operator delete(__p);
  }
  v147 = v226;
  if (v226 == v225)
  {
    v148 = 4;
    v147 = v225;
  }
  else
  {
    if (!v226)
      goto LABEL_189;
    v148 = 5;
  }
  (*(void (**)(void))(*v147 + 8 * v148))();
LABEL_189:
  result = v228;
  if (v228 == v227)
  {
    v150 = 4;
    result = v227;
  }
  else
  {
    if (!v228)
      return result;
    v150 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v150))();
}

void sub_2068984AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56)
{
  uint64_t v56;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v58 = (_QWORD *)STACK[0x298];
  if (STACK[0x298] == v56 - 224)
  {
    v59 = 4;
    v58 = (_QWORD *)(v56 - 224);
  }
  else
  {
    if (!v58)
      goto LABEL_6;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_6:
  if (__p)
    operator delete(__p);
  if (a56)
    operator delete(a56);
  v60 = *(void **)a36;
  if (*(_QWORD *)a36)
  {
    *(_QWORD *)(a36 + 8) = v60;
    operator delete(v60);
  }
  v61 = (_QWORD *)STACK[0x2B8];
  if (STACK[0x2B8] == v56 - 192)
  {
    v62 = 4;
    v61 = (_QWORD *)(v56 - 192);
  }
  else
  {
    if (!v61)
      goto LABEL_17;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_17:
  v63 = (_QWORD *)STACK[0x2D8];
  if (STACK[0x2D8] == v56 - 160)
  {
    v64 = 4;
    v63 = (_QWORD *)(v56 - 160);
  }
  else
  {
    if (!v63)
      goto LABEL_22;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_22:
  _Unwind_Resume(a1);
}

_QWORD *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, int a18, char a19, uint64_t a20)
{
  unint64_t *v21;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  size_t v58;
  int v59;
  int v60;
  double v61;
  double v62;
  unint64_t v63;
  MIL::Fp16 *v64;
  MIL::Fp16 *v65;
  float v66;
  float v67;
  double v68;
  float v69;
  float v70;
  float *v71;
  float *v72;
  float *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  float *v79;
  int v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  uint64_t i;
  float v86;
  float v87;
  unsigned int v88;
  int v89;
  std::vector<int>::pointer end;
  int *v91;
  std::vector<int>::pointer begin;
  int64_t v93;
  unint64_t v94;
  int64_t v95;
  unint64_t v96;
  char *v97;
  int *v98;
  int v99;
  char *v100;
  char *v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t j;
  uint64_t k;
  char v127;
  float v128;
  float v129;
  double v130;
  long double v131;
  double v132;
  float v133;
  float v134;
  float v135;
  long double v136;
  double v137;
  uint64_t v138;
  float v139;
  int v140;
  int v141;
  _QWORD *v142;
  uint64_t v143;
  std::vector<int>::value_type *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *result;
  uint64_t v149;
  std::runtime_error *exception;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  unint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  __int128 __e;
  uint64_t *v186;
  __int128 *v187;
  std::vector<int> v188;
  void *__p;
  float *v190;
  char *v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t *v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __int16 v216;
  _QWORD v217[3];
  _QWORD *v218;
  std::vector<int>::value_type __u[6];
  std::vector<int>::value_type *v220;
  _QWORD v221[3];
  _QWORD *v222;
  _QWORD v223[3];
  _QWORD *v224;
  uint64_t v225;

  v21 = a7;
  v225 = *MEMORY[0x24BDAC8D0];
  v216 = a17;
  v214 = a3;
  v215 = a1;
  v25 = *a7;
  if (*a7 == 3)
  {
    v26 = *a2;
    v27 = a2[1] - *a2;
    if (v27 <= 8)
      goto LABEL_205;
    v28 = *(_QWORD *)(v26 + 8);
    v212 = 0;
    v213 = v28;
    goto LABEL_5;
  }
  v28 = 1;
  v212 = 0;
  v213 = 1;
  v26 = *a2;
  v27 = a2[1] - *a2;
  if (v25 >= 2)
  {
LABEL_5:
    if (v27 > 0x10)
    {
      v29 = *(_QWORD *)(v27 + v26 - 24);
      v211 = 0;
      v212 = v29;
      goto LABEL_8;
    }
LABEL_205:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v29 = 1;
  v211 = 0;
  v212 = 1;
  v28 = 1;
  if (v27 <= 8)
    goto LABEL_205;
LABEL_8:
  v30 = v27 + v26;
  v31 = *(_QWORD *)(v30 - 16);
  v210 = 0;
  v211 = v31;
  v209 = *(_QWORD *)(v30 - 8);
  v210 = v209;
  v32 = v209 * v31;
  v207 = v32 * v29;
  v208 = v32;
  v206 = v32 * v29 * v28;
  v205 = 0;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v216);
  if (v33 == INFINITY)
  {
    v34 = 127;
  }
  else
  {
    v34 = 0x80;
    if (v33 != -INFINITY)
    {
      v35 = llroundf(v33);
      if (v35 >= 127)
        v35 = 127;
      if (v35 <= -128)
        v34 = 0x80;
      else
        v34 = v35;
    }
  }
  v205 = v34;
  v224 = 0;
  if (a15)
  {
    *(_QWORD *)&v198 = &v210;
    *((_QWORD *)&v198 + 1) = &v205;
    v199 = &v215;
    v200 = &v206;
    v201 = &v207;
    v202 = &v208;
    v203 = &v209;
    std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v223, (uint64_t)&v198);
  }
  else
  {
    *(_QWORD *)&v198 = &v213;
    *((_QWORD *)&v198 + 1) = &v212;
    v199 = &v211;
    v200 = &v215;
    v201 = &v206;
    v202 = &v207;
    v203 = &v208;
    v204 = &v209;
    if (a8)
      std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v223, &v198);
    else
      std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v223, &v198);
  }
  v221[0] = &off_24BFEA368;
  v222 = v221;
  if (a19)
    std::function<signed char ()(signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},void>(v221);
  v37 = *(uint64_t **)a6;
  v36 = *(_QWORD *)(a6 + 8);
  v38 = v36 - *(_QWORD *)a6;
  if (v36 == *(_QWORD *)a6)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v39 = (uint64_t)v38 >> 3;
  v172 = *v37;
  v40 = *v21;
  if (*v21 == 3)
  {
    if (v38 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v41 = v37[1];
    goto LABEL_29;
  }
  if (v40 >= 2)
  {
    v41 = 1;
LABEL_29:
    if (v38 <= 0x10)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v42 = &v37[v39];
    v43 = *(v42 - 2);
    v174 = *(v42 - 3);
    v44 = *(v42 - 1);
    if (v40 == 3)
    {
      if (a5[1] - *a5 <= 8uLL)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v45 = *(_QWORD *)(*a5 + 8);
    }
    else
    {
      v45 = 1;
    }
    v176 = v45;
    v46 = *a5;
    v47 = a5[1] - *a5;
    if (v47 <= 0x18)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v163 = v44 * v43;
    v48 = *(_QWORD *)(v47 + v46 - 32);
    goto LABEL_39;
  }
  if (v38 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v46 = *a5;
  v47 = a5[1] - *a5;
  if (v47 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v49 = &v37[v39];
  v43 = *(v49 - 2);
  v44 = *(v49 - 1);
  v163 = v44 * v43;
  v48 = 1;
  v41 = 1;
  v174 = 1;
  v176 = 1;
LABEL_39:
  v50 = v47 + v46;
  v51 = *(_QWORD *)(v50 - 24);
  v52 = *(_QWORD *)(v50 - 16);
  v197 = *(_QWORD *)(v50 - 8);
  v183 = v52;
  v171 = v197;
  v196 = v197 * v52;
  v179 = v51;
  v195 = v197 * v52 * v51;
  v194 = v195 * v48;
  v193 = v195 * v48 * v176;
  *(_QWORD *)&v198 = &v193;
  *((_QWORD *)&v198 + 1) = &v194;
  v199 = &v195;
  v200 = &v196;
  v201 = &v197;
  v53 = v21[4];
  if (v40 >= 3)
  {
    v54 = v21[3];
    v55 = v53 - v54;
    if (v53 - v54 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v56 = *(_DWORD *)(v53 - 12);
    goto LABEL_45;
  }
  v54 = v21[3];
  if (v40 == 2)
  {
    v55 = v53 - v54;
    if (v53 - v54 <= 4)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v56 = 1;
LABEL_45:
    v161 = v56;
    v57 = *(_DWORD *)(v55 + v54 - 8);
    goto LABEL_47;
  }
  v57 = 1;
  v161 = 1;
LABEL_47:
  v162 = v57;
  v178 = v48;
  if (v53 == v54)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v164 = *(_DWORD *)(v53 - 4);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v168 = v41;
  v170 = v44;
  v58 = v41 * v172 * v174 * v43 * v44;
  std::vector<unsigned char>::reserve(a9, v58);
  v192 = 0;
  std::vector<unsigned char>::assign((char **)a9, v58, &v192);
  if (a4 == 4)
    v59 = 10;
  else
    v59 = 0;
  v60 = v59 + a10;
  v61 = ldexp(1.0, v60);
  v62 = ldexp(1.0, v60 + a11);
  v63 = v170;
  if (*((_BYTE *)v21 + 16))
    v63 = v170 / v21[1];
  v166 = v43;
  v169 = v21;
  __p = 0;
  v190 = 0;
  v191 = 0;
  std::vector<float>::reserve(&__p, v63);
  v65 = *a14;
  v64 = a14[1];
  if (v64 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    v67 = exp2(-(double)(v60 + a12)) * v66;
    *(float *)__u = v67;
    std::vector<float>::assign((char **)&__p, v63, __u);
  }
  else if (v65 != v64)
  {
    v68 = exp2(-(double)(v60 + a12));
    do
    {
      MIL::Fp16::GetFloat(v65);
      v70 = v68 * v69;
      v71 = v190;
      if (v190 >= (float *)v191)
      {
        v73 = (float *)__p;
        v74 = ((char *)v190 - (_BYTE *)__p) >> 2;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v76 = v191 - (_BYTE *)__p;
        if ((v191 - (_BYTE *)__p) >> 1 > v75)
          v75 = v76 >> 1;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
          v77 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        if (v77)
        {
          v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v191, v77);
          v73 = (float *)__p;
          v71 = v190;
        }
        else
        {
          v78 = 0;
        }
        v79 = (float *)&v78[4 * v74];
        *v79 = v70;
        v72 = v79 + 1;
        while (v71 != v73)
        {
          v80 = *((_DWORD *)v71-- - 1);
          *((_DWORD *)v79-- - 1) = v80;
        }
        __p = v79;
        v190 = v72;
        v191 = &v78[4 * v77];
        if (v73)
          operator delete(v73);
      }
      else
      {
        *v190 = v70;
        v72 = v71 + 1;
      }
      v190 = v72;
      v65 = (MIL::Fp16 *)((char *)v65 + 2);
    }
    while (v65 != v64);
  }
  memset(&v188, 0, sizeof(v188));
  std::vector<int>::reserve(&v188, v63);
  if (a15)
  {
    __u[0] = 0;
    std::vector<int>::assign(&v188, v63, __u);
  }
  else
  {
    v81 = v62;
    if (*(_QWORD *)(a13 + 8) - *(_QWORD *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      v83 = v82 * v81;
      v84 = llroundf(v83);
      if (fabsf(v83) < 1.0)
        v84 = 0;
      __u[0] = v84;
      std::vector<int>::assign(&v188, v63, __u);
    }
    else if (v63)
    {
      for (i = 0; i != v63; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(_QWORD *)a13 + 2 * i));
        v87 = v86 * v81;
        v88 = llroundf(v87);
        if (fabsf(v87) >= 1.0)
          v89 = v88;
        else
          v89 = 0;
        end = v188.__end_;
        if (v188.__end_ >= v188.__end_cap_.__value_)
        {
          begin = v188.__begin_;
          v93 = v188.__end_ - v188.__begin_;
          v94 = v93 + 1;
          if ((unint64_t)(v93 + 1) >> 62)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v95 = (char *)v188.__end_cap_.__value_ - (char *)v188.__begin_;
          if (((char *)v188.__end_cap_.__value_ - (char *)v188.__begin_) >> 1 > v94)
            v94 = v95 >> 1;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
            v96 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v96 = v94;
          if (v96)
          {
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v188.__end_cap_, v96);
            begin = v188.__begin_;
            end = v188.__end_;
          }
          else
          {
            v97 = 0;
          }
          v98 = (int *)&v97[4 * v93];
          *v98 = v89;
          v91 = v98 + 1;
          while (end != begin)
          {
            v99 = *--end;
            *--v98 = v99;
          }
          v188.__begin_ = v98;
          v188.__end_ = v91;
          v188.__end_cap_.__value_ = (int *)&v97[4 * v96];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v188.__end_ = v89;
          v91 = end + 1;
        }
        v188.__end_ = v91;
      }
    }
  }
  v100 = (char *)v21[10];
  if (*v21 == 3)
  {
    v101 = (char *)v21[9];
    if (v100 == v101)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v102 = *(_DWORD *)v101;
    goto LABEL_107;
  }
  v101 = (char *)v21[9];
  if (*v21 >= 2)
  {
    v102 = 0;
LABEL_107:
    v103 = v100 - v101;
    if (v103 <= 0xC)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v104 = *(_DWORD *)&v101[v103 - 16];
    goto LABEL_111;
  }
  v103 = v100 - v101;
  if (v103 <= 4)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v104 = 0;
  v102 = 0;
LABEL_111:
  v105 = *(_DWORD *)&v101[v103 - 8];
  v220 = 0;
  switch(a4)
  {
    case 4:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},void>(__u);
      break;
    case 9:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},void>(__u);
      break;
    case 14:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},void>(__u);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v218 = 0;
  if (a15)
  {
    *(_QWORD *)&__e = &v210;
    *((_QWORD *)&__e + 1) = a13;
    v186 = &v214;
    v187 = &v198;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v217, &__e);
  }
  else
  {
    *(_QWORD *)&__e = &v214;
    *((_QWORD *)&__e + 1) = &v198;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(v217, &__e);
  }
  v106 = v168;
  v107 = v21[1];
  if (v107)
  {
    v181 = 0;
    v108 = 0;
    v109 = a20;
    v110 = v171;
    v111 = v61;
    v156 = -v102;
    v158 = -v104;
    v160 = -v105;
    while (1)
    {
      v112 = *((_BYTE *)v21 + 16) ? 0 : v108;
      v180 = v112;
      if (v172)
        break;
LABEL_176:
      ++v108;
      v181 += v183;
      if (v107 <= v108)
        goto LABEL_177;
    }
    v182 = 0;
    v113 = v108 * v171;
    if (*((_BYTE *)v21 + 16))
      v114 = 0;
    else
      v114 = (int)v108 * v171;
    v115 = a9;
    v116 = v166;
    v154 = v108 * v171;
    v155 = v108;
    v153 = v114;
    while (!v106)
    {
LABEL_174:
      if (++v182 == v172)
      {
        v107 = v21[1];
        goto LABEL_176;
      }
    }
    v117 = 0;
    v157 = v106 * v182;
    while (!v174)
    {
LABEL_173:
      if (++v117 == v106)
        goto LABEL_174;
    }
    v118 = 0;
    v175 = v156 + v161 * v117;
    v159 = (v157 + v117) * v174;
    v151 = v117;
    while (!v116)
    {
LABEL_172:
      ++v118;
      v117 = v151;
      if (v118 == v174)
        goto LABEL_173;
    }
    v167 = 0;
    v177 = v158 + v162 * v118;
    v165 = v163 * (v159 + v118);
    v152 = v118;
    while (v171 < 1)
    {
LABEL_171:
      v116 = v166;
      ++v167;
      v118 = v152;
      if (v167 == v166)
        goto LABEL_172;
    }
    v119 = 0;
    while (1)
    {
      v184 = 0;
      v120 = v188.__begin_[v119 + v114];
      v184 = v120;
      if (v176)
      {
        v121 = 0;
        v122 = 0;
        v123 = v178;
        do
        {
          if (v123)
          {
            v124 = 0;
            do
            {
              if (v179)
              {
                for (j = 0; j != v179; ++j)
                {
                  if (v183)
                  {
                    for (k = 0; k != v183; ++k)
                    {
                      LOBYTE(__e) = std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v223, v182, v175 + (int)v121, v177 + (int)v124, v160 + v164 * (int)v167 + (int)j, v181 + (int)k, v119);
                      if (!v222)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v127 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v222 + 48))(v222, &__e);
                      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v217, v180, v121, v124, j, k, v119);
                      v122 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()((uint64_t)__u, (uint64_t)&v184, v122, v127, a10, v128, v111);
                    }
                  }
                }
              }
              ++v124;
              v123 = v178;
            }
            while (v124 != v178);
          }
          ++v121;
        }
        while (v121 != v176);
        v129 = *((float *)__p + v119 + v114);
        if (v122)
        {
          v130 = INFINITY;
          if (v122 == 2)
            v130 = -INFINITY;
          v115 = a9;
          v106 = v168;
          v21 = v169;
          v113 = v154;
          v108 = v155;
          v110 = v171;
          v109 = a20;
          v114 = v153;
          goto LABEL_157;
        }
        v120 = v184;
        v115 = a9;
        v106 = v168;
        v21 = v169;
        v113 = v154;
        v108 = v155;
        v110 = v171;
        v109 = a20;
        v114 = v153;
        if (!v184)
        {
LABEL_159:
          v133 = 0.0;
          goto LABEL_160;
        }
      }
      else
      {
        v129 = *((float *)__p + v119 + v114);
        if (!v120)
          goto LABEL_159;
      }
      v130 = (double)v120;
LABEL_157:
      LODWORD(__e) = 0;
      v131 = frexp(v130, (int *)&__e);
      v132 = ldexp(v131, 11);
      v133 = ldexp(round(v132), (int)__e - 11);
LABEL_160:
      v134 = v129 * v133;
      v135 = 0.0;
      if (v134 != 0.0)
      {
        LODWORD(__e) = 0;
        v136 = frexp(v134, (int *)&__e);
        v137 = ldexp(v136, 11);
        v135 = ldexp(round(v137), (int)__e - 11);
      }
      *(float *)&__e = v135;
      v138 = *(_QWORD *)(v109 + 24);
      if (!v138)
        std::__throw_bad_function_call[abi:ne180100]();
      v139 = (*(float (**)(uint64_t, __int128 *))(*(_QWORD *)v138 + 48))(v138, &__e);
      if (v139 == INFINITY)
      {
        LOBYTE(v140) = -1;
      }
      else if (v139 == -INFINITY)
      {
        LOBYTE(v140) = 0;
      }
      else
      {
        v141 = llroundf(v139);
        if (v141 >= 255)
          v141 = 255;
        v140 = v141 & ~(v141 >> 31);
      }
      *(_BYTE *)(*v115 + v170 * v167 + v165 + v119 + v113) = v140;
      if (++v119 == v110)
        goto LABEL_171;
    }
  }
LABEL_177:
  v142 = v218;
  if (v218 == v217)
  {
    v143 = 4;
    v142 = v217;
  }
  else
  {
    if (!v218)
      goto LABEL_182;
    v143 = 5;
  }
  (*(void (**)(void))(*v142 + 8 * v143))();
LABEL_182:
  v144 = v220;
  if (v220 == __u)
  {
    v145 = 4;
    v144 = __u;
  }
  else
  {
    if (!v220)
      goto LABEL_187;
    v145 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v144 + 8 * v145))();
LABEL_187:
  if (v188.__begin_)
  {
    v188.__end_ = v188.__begin_;
    operator delete(v188.__begin_);
  }
  if (__p)
  {
    v190 = (float *)__p;
    operator delete(__p);
  }
  v146 = v222;
  if (v222 == v221)
  {
    v147 = 4;
    v146 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_196;
    v147 = 5;
  }
  (*(void (**)(void))(*v146 + 8 * v147))();
LABEL_196:
  result = v224;
  if (v224 == v223)
  {
    v149 = 4;
    result = v223;
  }
  else
  {
    if (!v224)
      return result;
    v149 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v149))();
}

void sub_20689954C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56)
{
  uint64_t v56;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v58 = (_QWORD *)STACK[0x298];
  if (STACK[0x298] == v56 - 224)
  {
    v59 = 4;
    v58 = (_QWORD *)(v56 - 224);
  }
  else
  {
    if (!v58)
      goto LABEL_6;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_6:
  if (__p)
    operator delete(__p);
  if (a56)
    operator delete(a56);
  v60 = *(void **)a36;
  if (*(_QWORD *)a36)
  {
    *(_QWORD *)(a36 + 8) = v60;
    operator delete(v60);
  }
  v61 = (_QWORD *)STACK[0x2B8];
  if (STACK[0x2B8] == v56 - 192)
  {
    v62 = 4;
    v61 = (_QWORD *)(v56 - 192);
  }
  else
  {
    if (!v61)
      goto LABEL_17;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_17:
  v63 = (_QWORD *)STACK[0x2D8];
  if (STACK[0x2D8] == v56 - 160)
  {
    v64 = 4;
    v63 = (_QWORD *)(v56 - 160);
  }
  else
  {
    if (!v63)
      goto LABEL_22;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_22:
  _Unwind_Resume(a1);
}

_QWORD *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, int a18, char a19, uint64_t a20)
{
  unint64_t *v21;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  size_t v58;
  int v59;
  int v60;
  double v61;
  double v62;
  unint64_t v63;
  MIL::Fp16 *v64;
  MIL::Fp16 *v65;
  float v66;
  float v67;
  double v68;
  float v69;
  float v70;
  float *v71;
  float *v72;
  float *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  float *v79;
  int v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  uint64_t i;
  float v86;
  float v87;
  unsigned int v88;
  int v89;
  std::vector<int>::pointer end;
  int *v91;
  std::vector<int>::pointer begin;
  int64_t v93;
  unint64_t v94;
  int64_t v95;
  unint64_t v96;
  char *v97;
  int *v98;
  int v99;
  char *v100;
  char *v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t j;
  uint64_t k;
  char v127;
  float v128;
  float v129;
  double v130;
  long double v131;
  double v132;
  float v133;
  float v134;
  float v135;
  long double v136;
  double v137;
  uint64_t v138;
  float v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  std::vector<int>::value_type *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *result;
  uint64_t v148;
  std::runtime_error *exception;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  unint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  __int128 __e;
  uint64_t *v185;
  __int128 *v186;
  std::vector<int> v187;
  void *__p;
  float *v189;
  char *v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t *v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int16 v215;
  _QWORD v216[3];
  _QWORD *v217;
  std::vector<int>::value_type __u[6];
  std::vector<int>::value_type *v219;
  _QWORD v220[3];
  _QWORD *v221;
  _QWORD v222[3];
  _QWORD *v223;
  uint64_t v224;

  v21 = a7;
  v224 = *MEMORY[0x24BDAC8D0];
  v215 = a17;
  v213 = a3;
  v214 = a1;
  v25 = *a7;
  if (*a7 == 3)
  {
    v26 = *a2;
    v27 = a2[1] - *a2;
    if (v27 <= 8)
      goto LABEL_206;
    v28 = *(_QWORD *)(v26 + 8);
    v211 = 0;
    v212 = v28;
    goto LABEL_5;
  }
  v28 = 1;
  v211 = 0;
  v212 = 1;
  v26 = *a2;
  v27 = a2[1] - *a2;
  if (v25 >= 2)
  {
LABEL_5:
    if (v27 > 0x10)
    {
      v29 = *(_QWORD *)(v27 + v26 - 24);
      v210 = 0;
      v211 = v29;
      goto LABEL_8;
    }
LABEL_206:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v29 = 1;
  v210 = 0;
  v211 = 1;
  v28 = 1;
  if (v27 <= 8)
    goto LABEL_206;
LABEL_8:
  v30 = v27 + v26;
  v31 = *(_QWORD *)(v30 - 16);
  v209 = 0;
  v210 = v31;
  v208 = *(_QWORD *)(v30 - 8);
  v209 = v208;
  v32 = v208 * v31;
  v206 = v32 * v29;
  v207 = v32;
  v205 = v32 * v29 * v28;
  v204 = 0;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v215);
  if (v33 == INFINITY)
  {
    v34 = 127;
  }
  else
  {
    v34 = 0x80;
    if (v33 != -INFINITY)
    {
      v35 = llroundf(v33);
      if (v35 >= 127)
        v35 = 127;
      if (v35 <= -128)
        v34 = 0x80;
      else
        v34 = v35;
    }
  }
  v204 = v34;
  v223 = 0;
  if (a15)
  {
    *(_QWORD *)&v197 = &v209;
    *((_QWORD *)&v197 + 1) = &v204;
    v198 = &v214;
    v199 = &v205;
    v200 = &v206;
    v201 = &v207;
    v202 = &v208;
    std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v222, (uint64_t)&v197);
  }
  else
  {
    *(_QWORD *)&v197 = &v212;
    *((_QWORD *)&v197 + 1) = &v211;
    v198 = &v210;
    v199 = &v214;
    v200 = &v205;
    v201 = &v206;
    v202 = &v207;
    v203 = &v208;
    if (a8)
      std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v222, &v197);
    else
      std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v222, &v197);
  }
  v220[0] = &off_24BFEA868;
  v221 = v220;
  if (a19)
    std::function<signed char ()(signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},void>(v220);
  v37 = *(uint64_t **)a6;
  v36 = *(_QWORD *)(a6 + 8);
  v38 = v36 - *(_QWORD *)a6;
  if (v36 == *(_QWORD *)a6)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v39 = (uint64_t)v38 >> 3;
  v171 = *v37;
  v40 = *v21;
  if (*v21 == 3)
  {
    if (v38 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v41 = v37[1];
    goto LABEL_29;
  }
  if (v40 >= 2)
  {
    v41 = 1;
LABEL_29:
    if (v38 <= 0x10)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v42 = &v37[v39];
    v43 = *(v42 - 2);
    v173 = *(v42 - 3);
    v44 = *(v42 - 1);
    if (v40 == 3)
    {
      if (a5[1] - *a5 <= 8uLL)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v45 = *(_QWORD *)(*a5 + 8);
    }
    else
    {
      v45 = 1;
    }
    v175 = v45;
    v46 = *a5;
    v47 = a5[1] - *a5;
    if (v47 <= 0x18)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v162 = v44 * v43;
    v48 = *(_QWORD *)(v47 + v46 - 32);
    goto LABEL_39;
  }
  if (v38 <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v46 = *a5;
  v47 = a5[1] - *a5;
  if (v47 <= 0x10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v49 = &v37[v39];
  v43 = *(v49 - 2);
  v44 = *(v49 - 1);
  v162 = v44 * v43;
  v48 = 1;
  v41 = 1;
  v173 = 1;
  v175 = 1;
LABEL_39:
  v50 = v47 + v46;
  v51 = *(_QWORD *)(v50 - 24);
  v52 = *(_QWORD *)(v50 - 16);
  v196 = *(_QWORD *)(v50 - 8);
  v182 = v52;
  v170 = v196;
  v195 = v196 * v52;
  v178 = v51;
  v194 = v196 * v52 * v51;
  v193 = v194 * v48;
  v192 = v194 * v48 * v175;
  *(_QWORD *)&v197 = &v192;
  *((_QWORD *)&v197 + 1) = &v193;
  v198 = &v194;
  v199 = &v195;
  v200 = &v196;
  v53 = v21[4];
  if (v40 >= 3)
  {
    v54 = v21[3];
    v55 = v53 - v54;
    if (v53 - v54 <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v56 = *(_DWORD *)(v53 - 12);
    goto LABEL_45;
  }
  v54 = v21[3];
  if (v40 == 2)
  {
    v55 = v53 - v54;
    if (v53 - v54 <= 4)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v56 = 1;
LABEL_45:
    v160 = v56;
    v57 = *(_DWORD *)(v55 + v54 - 8);
    goto LABEL_47;
  }
  v57 = 1;
  v160 = 1;
LABEL_47:
  v161 = v57;
  v177 = v48;
  if (v53 == v54)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v163 = *(_DWORD *)(v53 - 4);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v167 = v41;
  v169 = v44;
  v58 = v41 * v171 * v173 * v43 * v44;
  std::vector<unsigned char>::reserve(a9, v58);
  v191 = 0;
  std::vector<unsigned char>::assign((char **)a9, v58, &v191);
  if (a4 == 4)
    v59 = 10;
  else
    v59 = 0;
  v60 = v59 + a10;
  v61 = ldexp(1.0, v60);
  v62 = ldexp(1.0, v60 + a11);
  v63 = v169;
  if (*((_BYTE *)v21 + 16))
    v63 = v169 / v21[1];
  v165 = v43;
  v168 = v21;
  __p = 0;
  v189 = 0;
  v190 = 0;
  std::vector<float>::reserve(&__p, v63);
  v65 = *a14;
  v64 = a14[1];
  if (v64 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    v67 = exp2(-(double)(v60 + a12)) * v66;
    *(float *)__u = v67;
    std::vector<float>::assign((char **)&__p, v63, __u);
  }
  else if (v65 != v64)
  {
    v68 = exp2(-(double)(v60 + a12));
    do
    {
      MIL::Fp16::GetFloat(v65);
      v70 = v68 * v69;
      v71 = v189;
      if (v189 >= (float *)v190)
      {
        v73 = (float *)__p;
        v74 = ((char *)v189 - (_BYTE *)__p) >> 2;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v76 = v190 - (_BYTE *)__p;
        if ((v190 - (_BYTE *)__p) >> 1 > v75)
          v75 = v76 >> 1;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
          v77 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        if (v77)
        {
          v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v190, v77);
          v73 = (float *)__p;
          v71 = v189;
        }
        else
        {
          v78 = 0;
        }
        v79 = (float *)&v78[4 * v74];
        *v79 = v70;
        v72 = v79 + 1;
        while (v71 != v73)
        {
          v80 = *((_DWORD *)v71-- - 1);
          *((_DWORD *)v79-- - 1) = v80;
        }
        __p = v79;
        v189 = v72;
        v190 = &v78[4 * v77];
        if (v73)
          operator delete(v73);
      }
      else
      {
        *v189 = v70;
        v72 = v71 + 1;
      }
      v189 = v72;
      v65 = (MIL::Fp16 *)((char *)v65 + 2);
    }
    while (v65 != v64);
  }
  memset(&v187, 0, sizeof(v187));
  std::vector<int>::reserve(&v187, v63);
  if (a15)
  {
    __u[0] = 0;
    std::vector<int>::assign(&v187, v63, __u);
  }
  else
  {
    v81 = v62;
    if (*(_QWORD *)(a13 + 8) - *(_QWORD *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      v83 = v82 * v81;
      v84 = llroundf(v83);
      if (fabsf(v83) < 1.0)
        v84 = 0;
      __u[0] = v84;
      std::vector<int>::assign(&v187, v63, __u);
    }
    else if (v63)
    {
      for (i = 0; i != v63; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(_QWORD *)a13 + 2 * i));
        v87 = v86 * v81;
        v88 = llroundf(v87);
        if (fabsf(v87) >= 1.0)
          v89 = v88;
        else
          v89 = 0;
        end = v187.__end_;
        if (v187.__end_ >= v187.__end_cap_.__value_)
        {
          begin = v187.__begin_;
          v93 = v187.__end_ - v187.__begin_;
          v94 = v93 + 1;
          if ((unint64_t)(v93 + 1) >> 62)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v95 = (char *)v187.__end_cap_.__value_ - (char *)v187.__begin_;
          if (((char *)v187.__end_cap_.__value_ - (char *)v187.__begin_) >> 1 > v94)
            v94 = v95 >> 1;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
            v96 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v96 = v94;
          if (v96)
          {
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v187.__end_cap_, v96);
            begin = v187.__begin_;
            end = v187.__end_;
          }
          else
          {
            v97 = 0;
          }
          v98 = (int *)&v97[4 * v93];
          *v98 = v89;
          v91 = v98 + 1;
          while (end != begin)
          {
            v99 = *--end;
            *--v98 = v99;
          }
          v187.__begin_ = v98;
          v187.__end_ = v91;
          v187.__end_cap_.__value_ = (int *)&v97[4 * v96];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v187.__end_ = v89;
          v91 = end + 1;
        }
        v187.__end_ = v91;
      }
    }
  }
  v100 = (char *)v21[10];
  if (*v21 == 3)
  {
    v101 = (char *)v21[9];
    if (v100 == v101)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v102 = *(_DWORD *)v101;
    goto LABEL_107;
  }
  v101 = (char *)v21[9];
  if (*v21 >= 2)
  {
    v102 = 0;
LABEL_107:
    v103 = v100 - v101;
    if (v103 <= 0xC)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v104 = *(_DWORD *)&v101[v103 - 16];
    goto LABEL_111;
  }
  v103 = v100 - v101;
  if (v103 <= 4)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v104 = 0;
  v102 = 0;
LABEL_111:
  v105 = *(_DWORD *)&v101[v103 - 8];
  v219 = 0;
  switch(a4)
  {
    case 4:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},void>(__u);
      break;
    case 9:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},void>(__u);
      break;
    case 14:
      std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},void>(__u);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v217 = 0;
  if (a15)
  {
    *(_QWORD *)&__e = &v209;
    *((_QWORD *)&__e + 1) = a13;
    v185 = &v213;
    v186 = &v197;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v216, &__e);
  }
  else
  {
    *(_QWORD *)&__e = &v213;
    *((_QWORD *)&__e + 1) = &v197;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(v216, &__e);
  }
  v106 = v167;
  v107 = v21[1];
  if (v107)
  {
    v180 = 0;
    v108 = 0;
    v109 = a20;
    v110 = v170;
    v111 = v61;
    v155 = -v102;
    v157 = -v104;
    v159 = -v105;
    while (1)
    {
      v112 = *((_BYTE *)v21 + 16) ? 0 : v108;
      v179 = v112;
      if (v171)
        break;
LABEL_177:
      ++v108;
      v180 += v182;
      if (v107 <= v108)
        goto LABEL_178;
    }
    v181 = 0;
    v113 = v108 * v170;
    if (*((_BYTE *)v21 + 16))
      v114 = 0;
    else
      v114 = (int)v108 * v170;
    v115 = a9;
    v116 = v165;
    v153 = v108 * v170;
    v154 = v108;
    v152 = v114;
    while (!v106)
    {
LABEL_175:
      if (++v181 == v171)
      {
        v107 = v21[1];
        goto LABEL_177;
      }
    }
    v117 = 0;
    v156 = v106 * v181;
    while (!v173)
    {
LABEL_174:
      if (++v117 == v106)
        goto LABEL_175;
    }
    v118 = 0;
    v174 = v155 + v160 * v117;
    v158 = (v156 + v117) * v173;
    v150 = v117;
    while (!v116)
    {
LABEL_173:
      ++v118;
      v117 = v150;
      if (v118 == v173)
        goto LABEL_174;
    }
    v166 = 0;
    v176 = v157 + v161 * v118;
    v164 = v162 * (v158 + v118);
    v151 = v118;
    while (v170 < 1)
    {
LABEL_172:
      v116 = v165;
      ++v166;
      v118 = v151;
      if (v166 == v165)
        goto LABEL_173;
    }
    v119 = 0;
    while (1)
    {
      v183 = 0;
      v120 = v187.__begin_[v119 + v114];
      v183 = v120;
      if (v175)
      {
        v121 = 0;
        v122 = 0;
        v123 = v177;
        do
        {
          if (v123)
          {
            v124 = 0;
            do
            {
              if (v178)
              {
                for (j = 0; j != v178; ++j)
                {
                  if (v182)
                  {
                    for (k = 0; k != v182; ++k)
                    {
                      LOBYTE(__e) = std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v222, v181, v174 + (int)v121, v176 + (int)v124, v159 + v163 * (int)v166 + (int)j, v180 + (int)k, v119);
                      if (!v221)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v127 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v221 + 48))(v221, &__e);
                      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v216, v179, v121, v124, j, k, v119);
                      v122 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()((uint64_t)__u, (uint64_t)&v183, v122, v127, a10, v128, v111);
                    }
                  }
                }
              }
              ++v124;
              v123 = v177;
            }
            while (v124 != v177);
          }
          ++v121;
        }
        while (v121 != v175);
        v129 = *((float *)__p + v119 + v114);
        if (v122)
        {
          v130 = INFINITY;
          if (v122 == 2)
            v130 = -INFINITY;
          v115 = a9;
          v106 = v167;
          v21 = v168;
          v113 = v153;
          v108 = v154;
          v110 = v170;
          v109 = a20;
          v114 = v152;
          goto LABEL_157;
        }
        v120 = v183;
        v115 = a9;
        v106 = v167;
        v21 = v168;
        v113 = v153;
        v108 = v154;
        v110 = v170;
        v109 = a20;
        v114 = v152;
        if (!v183)
        {
LABEL_159:
          v133 = 0.0;
          goto LABEL_160;
        }
      }
      else
      {
        v129 = *((float *)__p + v119 + v114);
        if (!v120)
          goto LABEL_159;
      }
      v130 = (double)v120;
LABEL_157:
      LODWORD(__e) = 0;
      v131 = frexp(v130, (int *)&__e);
      v132 = ldexp(v131, 11);
      v133 = ldexp(round(v132), (int)__e - 11);
LABEL_160:
      v134 = v129 * v133;
      v135 = 0.0;
      if (v134 != 0.0)
      {
        LODWORD(__e) = 0;
        v136 = frexp(v134, (int *)&__e);
        v137 = ldexp(v136, 11);
        v135 = ldexp(round(v137), (int)__e - 11);
      }
      *(float *)&__e = v135;
      v138 = *(_QWORD *)(v109 + 24);
      if (!v138)
        std::__throw_bad_function_call[abi:ne180100]();
      v139 = (*(float (**)(uint64_t, __int128 *))(*(_QWORD *)v138 + 48))(v138, &__e);
      if (v139 == INFINITY)
      {
        LOBYTE(v140) = 127;
      }
      else if (v139 == -INFINITY)
      {
        LOBYTE(v140) = 0x80;
      }
      else
      {
        v140 = llroundf(v139);
        if (v140 >= 127)
          v140 = 127;
        if (v140 <= -128)
          LOBYTE(v140) = 0x80;
      }
      *(_BYTE *)(*v115 + v169 * v166 + v164 + v119 + v113) = v140;
      if (++v119 == v110)
        goto LABEL_172;
    }
  }
LABEL_178:
  v141 = v217;
  if (v217 == v216)
  {
    v142 = 4;
    v141 = v216;
  }
  else
  {
    if (!v217)
      goto LABEL_183;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_183:
  v143 = v219;
  if (v219 == __u)
  {
    v144 = 4;
    v143 = __u;
  }
  else
  {
    if (!v219)
      goto LABEL_188;
    v144 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v143 + 8 * v144))();
LABEL_188:
  if (v187.__begin_)
  {
    v187.__end_ = v187.__begin_;
    operator delete(v187.__begin_);
  }
  if (__p)
  {
    v189 = (float *)__p;
    operator delete(__p);
  }
  v145 = v221;
  if (v221 == v220)
  {
    v146 = 4;
    v145 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_197;
    v146 = 5;
  }
  (*(void (**)(void))(*v145 + 8 * v146))();
LABEL_197:
  result = v223;
  if (v223 == v222)
  {
    v148 = 4;
    result = v222;
  }
  else
  {
    if (!v223)
      return result;
    v148 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v148))();
}

void sub_20689A5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56)
{
  uint64_t v56;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v58 = (_QWORD *)STACK[0x298];
  if (STACK[0x298] == v56 - 224)
  {
    v59 = 4;
    v58 = (_QWORD *)(v56 - 224);
  }
  else
  {
    if (!v58)
      goto LABEL_6;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_6:
  if (__p)
    operator delete(__p);
  if (a56)
    operator delete(a56);
  v60 = *(void **)a36;
  if (*(_QWORD *)a36)
  {
    *(_QWORD *)(a36 + 8) = v60;
    operator delete(v60);
  }
  v61 = (_QWORD *)STACK[0x2B8];
  if (STACK[0x2B8] == v56 - 192)
  {
    v62 = 4;
    v61 = (_QWORD *)(v56 - 192);
  }
  else
  {
    if (!v61)
      goto LABEL_17;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_17:
  v63 = (_QWORD *)STACK[0x2D8];
  if (STACK[0x2D8] == v56 - 160)
  {
    v64 = 4;
    v63 = (_QWORD *)(v56 - 160);
  }
  else
  {
    if (!v63)
      goto LABEL_22;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_22:
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::NeMatmulCpu::~NeMatmulCpu(MIL::ANEMachineIR::Interpreter::NeMatmulCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

unint64_t MIL::Util::Span<unsigned char const,18446744073709551615ul>::operator[](_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_24BFE70B8, MEMORY[0x24BEDAAD0]);
  }
  return *a1 + a2;
}

void sub_20689A85C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Util::Span<signed char const,18446744073709551615ul>::operator[](_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_24BFE70B8, MEMORY[0x24BEDAAD0]);
  }
  return *a1 + a2;
}

void sub_20689A8CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::operator[](_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_24BFE70B8, MEMORY[0x24BEDAAD0]);
  }
  return *a1 + 2 * a2;
}

void sub_20689A93C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &off_24BFE7FF8;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a2 + 48);
  v10 = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE8088;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE8108;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<MIL::Fp16 ()(MIL::Fp16)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE8208;
  v6 = v5;
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

char *std::vector<MIL::Fp16>::assign(char **a1, unint64_t a2, _WORD *a3)
{
  unint64_t v6;
  char *result;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  result = *a1;
  if (a2 <= (uint64_t)(v6 - (_QWORD)result) >> 1)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 1;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 1;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_WORD *)v16 = *a3;
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[2 * a2];
    }
    else
    {
      v17 = &v13[2 * (a2 - v14)];
      v18 = 2 * a2 - 2 * v14;
      do
      {
        *(_WORD *)v13 = *a3;
        v13 += 2;
        v18 -= 2;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    if (v6 <= a2)
      v8 = a2;
    else
      v8 = v6;
    if (v6 >= 0x7FFFFFFFFFFFFFFELL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[2 * a2];
    v12 = 2 * a2;
    do
    {
      *(_WORD *)v10 = *a3;
      v10 += 2;
      v12 -= 2;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 2;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 2;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      v17 = &v13[4 * (a2 - v14)];
      v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<int>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[4 * a2];
    v12 = 4 * a2;
    do
    {
      *(_DWORD *)v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE8288;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE8318;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE8398;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_QWORD *)v4 = &off_24BFE8418;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v10 = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &off_24BFE84A8;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

uint64_t std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v13 = a3;
  v14 = a2;
  v12 = a4;
  v10 = a6;
  v11 = a5;
  v9 = a7;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, int *, int *, int *, int *, int *))(*(_QWORD *)v7 + 48))(v7, &v14, &v13, &v12, &v11, &v10, &v9);
}

uint64_t std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, uint64_t a2, int a3, __int16 a4, char a5, float a6, float a7)
{
  uint64_t v7;
  char v9;
  float v10;
  float v11;
  int v12;
  __int16 v13;

  v13 = a4;
  v12 = a3;
  v11 = a6;
  v10 = a7;
  v9 = a5;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, __int16 *, float *, float *, char *))(*(_QWORD *)v7 + 48))(v7, a2, &v12, &v13, &v11, &v10, &v9);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24BFE7FF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE7FF8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  uint64_t v6;
  unsigned __int16 *v7;

  v6 = *a6;
  if (**(_QWORD **)a1 == v6)
    v7 = *(unsigned __int16 **)(a1 + 8);
  else
    v7 = (unsigned __int16 *)(**(_QWORD **)(a1 + 16)
                            + 2
                            * (v6
                             + **(_QWORD **)(a1 + 24) * *a2
                             + **(_QWORD **)(a1 + 32) * *a3
                             + **(_QWORD **)(a1 + 40) * *a4
                             + **(_QWORD **)(a1 + 48) * *a5));
  return *v7;
}

_QWORD *std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20689B6A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE8088;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE8088;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((MIL::Fp16 *)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>(MIL::Fp16 *a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v6 = *a3;
  if ((v6 & 0x80000000) != 0)
    return MIL::Fp16::FromFloat(a1, 0.0);
  if (**(_QWORD **)a1 <= v6)
    return MIL::Fp16::FromFloat(a1, 0.0);
  v7 = *a4;
  if ((v7 & 0x80000000) != 0)
    return MIL::Fp16::FromFloat(a1, 0.0);
  if (**((_QWORD **)a1 + 1) <= v7)
    return MIL::Fp16::FromFloat(a1, 0.0);
  v8 = *a5;
  if ((v8 & 0x80000000) != 0 || **((_QWORD **)a1 + 2) <= v8)
    return MIL::Fp16::FromFloat(a1, 0.0);
  else
    return *(unsigned __int16 *)(**((_QWORD **)a1 + 3)
                               + 2
                               * (*a6
                                + **((_QWORD **)a1 + 4) * *a2
                                + **((_QWORD **)a1 + 5) * v6
                                + **((_QWORD **)a1 + 6) * v7
                                + **((_QWORD **)a1 + 7) * v8));
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE8108;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE8108;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  v6 = *a3 & ~(*a3 >> 31);
  if (**(_QWORD **)a1 - 1 < v6)
    v6 = **(_QWORD **)a1 - 1;
  v8 = *a4 & ~(*a4 >> 31);
  v7 = *(_QWORD **)(a1 + 8);
  if (*v7 - 1 < v8)
    v8 = *v7 - 1;
  v9 = *a5 & ~(*a5 >> 31);
  if (**(_QWORD **)(a1 + 16) - 1 < v9)
    v9 = **(_QWORD **)(a1 + 16) - 1;
  return *(unsigned __int16 *)(**(_QWORD **)(a1 + 24)
                             + 2
                             * (*a6
                              + **(_QWORD **)(a1 + 32) * *a2
                              + **(_QWORD **)(a1 + 40) * v6
                              + **(_QWORD **)(a1 + 48) * v8
                              + **(_QWORD **)(a1 + 56) * v9));
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE8188;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE8188;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE8208;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE8208;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  MIL::Fp16 *Float;
  float v3;
  __int16 v5;

  v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0)
    v3 = 0.0;
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE8288;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE8288;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  uint64_t result;
  float v9;
  float v10;
  int v11;
  float v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  __int16 v19;

  result = *a3;
  if (!(_DWORD)result)
  {
    v9 = *a5;
    v10 = *a6;
    v11 = *a7;
    v19 = *a4;
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v19);
    v13 = v12;
    v14 = ilogbf(v12);
    if (v14 <= -14)
      v15 = -14;
    else
      v15 = v14;
    v16 = ilogbf(v9);
    if (v16 <= -14)
      v17 = -14;
    else
      v17 = v16;
    if (v15 + v11 + v17 >= -20)
    {
      v18 = *a2 + (uint64_t)(int)llroundf(v10 * (float)(v9 * v13));
      if (v18 < 0x80000000)
      {
        if (v18 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          result = 0;
          *a2 = v18;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20689BE20(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE8318;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE8318;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  uint64_t result;
  float v9;
  float v10;
  int v11;
  float v12;
  float v13;
  int v14;
  int v15;
  uint64_t v16;
  __int16 v17;

  result = *a3;
  if (!(_DWORD)result)
  {
    v9 = *a5;
    v10 = *a6;
    v11 = *a7;
    v17 = *a4;
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v17);
    v13 = v12;
    v14 = ilogbf(v12);
    if (v14 <= -14)
      v15 = -14;
    else
      v15 = v14;
    if (v15 + v11 >= -20)
    {
      v16 = *a2 + (uint64_t)(int)llroundf(v10 * (float)(v13 * (float)(int)v9));
      if (v16 < 0x80000000)
      {
        if (v16 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          result = 0;
          *a2 = v16;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE8398;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE8398;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  uint64_t result;
  float v9;
  float v10;
  int v11;
  float v12;
  float v13;
  int v14;
  int v15;
  uint64_t v16;
  __int16 v17;

  result = *a3;
  if (!(_DWORD)result)
  {
    v9 = *a5;
    v10 = *a6;
    v11 = *a7;
    v17 = *a4;
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v17);
    v13 = v12;
    v14 = ilogbf(v12);
    if (v14 <= -14)
      v15 = -14;
    else
      v15 = v14;
    if (v15 + v11 >= -20)
    {
      v16 = *a2 + (uint64_t)(int)llroundf(v10 * (float)(v13 * (float)(int)v9));
      if (v16 < 0x80000000)
      {
        if (v16 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          result = 0;
          *a2 = v16;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24BFE8418;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFE8418;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD **v11;

  v7 = *a6;
  v8 = *a7;
  if (**(_QWORD **)a1 == v7)
  {
    v9 = *(_QWORD **)(a1 + 8);
    if (v8 >= (uint64_t)(v9[1] - *v9) >> 1)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    return MIL::Fp16::GetFloat((MIL::Fp16 *)(*v9 + 2 * v8));
  }
  else
  {
    v11 = *(_QWORD ***)(a1 + 24);
    return MIL::Fp16::GetFloat((MIL::Fp16 *)(**(_QWORD **)(a1 + 16)
                                           + 2
                                           * (v8
                                            + **v11 * *a2
                                            + *v11[1] * *a3
                                            + *v11[2] * *a4
                                            + *v11[3] * *a5
                                            + *v11[4] * v7)));
  }
}

_QWORD *std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20689C3FC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24BFE84A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFE84A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  _QWORD **v7;

  v7 = *(_QWORD ***)(a1 + 8);
  return MIL::Fp16::GetFloat((MIL::Fp16 *)(**(_QWORD **)a1
                                         + 2
                                         * (*a7 + **v7 * *a2 + *v7[1] * *a3 + *v7[2] * *a4 + *v7[3] * *a5 + *v7[4] * *a6)));
}

_QWORD *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &off_24BFE8528;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a2 + 48);
  v10 = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE85A8;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE8628;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<MIL::Fp16 ()(MIL::Fp16)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE8728;
  v6 = v5;
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

char *std::vector<unsigned char>::assign(char **a1, unint64_t a2, char *a3)
{
  unint64_t v4;
  unint64_t v6;
  char *result;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  char *v16;
  char *v17;

  v4 = a2;
  v6 = (unint64_t)a1[2];
  result = *a1;
  if (v6 - (unint64_t)result >= a2)
  {
    v12 = a1[1] - result;
    if (v12 >= a2)
      v13 = a2;
    else
      v13 = a1[1] - result;
    for (; v13; --v13)
      *result++ = *a3;
    v14 = a2 >= v12;
    v15 = a2 - v12;
    if (v15 != 0 && v14)
    {
      v16 = a1[1];
      v17 = &v16[v15];
      do
      {
        *v16++ = *a3;
        --v15;
      }
      while (v15);
      a1[1] = v17;
    }
    else
    {
      a1[1] = &(*a1)[a2];
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v8 = 2 * v6;
    if (2 * v6 <= v4)
      v8 = v4;
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[v4];
    do
    {
      *v10++ = *a3;
      --v4;
    }
    while (v4);
    a1[1] = v11;
  }
  return result;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE87A8;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE8828;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE88A8;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_QWORD *)v4 = &off_24BFE8928;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v10 = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &off_24BFE89A8;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24BFE8528;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE8528;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE85A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE85A8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((MIL::Fp16 *)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE8628;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE8628;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE86A8;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE86A8;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE8728;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE8728;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  MIL::Fp16 *Float;
  float v3;
  __int16 v5;

  v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0)
    v3 = 0.0;
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE87A8;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE87A8;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE8828;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE8828;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE88A8;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE88A8;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24BFE8928;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFE8928;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24BFE89A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFE89A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

_QWORD *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &off_24BFE8A28;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a2 + 48);
  v10 = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE8AA8;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE8B28;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<MIL::Fp16 ()(MIL::Fp16)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE8C28;
  v6 = v5;
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE8CA8;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE8D28;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE8DA8;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_QWORD *)v4 = &off_24BFE8E28;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v10 = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &off_24BFE8EA8;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24BFE8A28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE8A28;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE8AA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE8AA8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((MIL::Fp16 *)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE8B28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE8B28;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE8BA8;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE8BA8;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE8C28;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE8C28;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  MIL::Fp16 *Float;
  float v3;
  __int16 v5;

  v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0)
    v3 = 0.0;
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE8CA8;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE8CA8;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE8D28;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE8D28;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE8DA8;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE8DA8;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24BFE8E28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFE8E28;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24BFE8EA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFE8EA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

_QWORD *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &off_24BFE8F28;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a2 + 48);
  v10 = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE8FB8;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE9038;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE9138;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE91C8;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE9248;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_QWORD *)v4 = &off_24BFE92C8;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v10 = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &off_24BFE9348;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

uint64_t std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, uint64_t a2, int a3, char a4, char a5, float a6, float a7)
{
  uint64_t v7;
  char v9;
  float v10;
  float v11;
  char v12;
  int v13;

  v13 = a3;
  v12 = a4;
  v11 = a6;
  v10 = a7;
  v9 = a5;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, char *, float *, float *, char *))(*(_QWORD *)v7 + 48))(v7, a2, &v13, &v12, &v11, &v10, &v9);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24BFE8F28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE8F28;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  uint64_t v6;
  unsigned __int8 *v7;

  v6 = *a6;
  if (**(_QWORD **)a1 == v6)
    v7 = *(unsigned __int8 **)(a1 + 8);
  else
    v7 = (unsigned __int8 *)(**(_QWORD **)(a1 + 16)
                           + v6
                           + **(_QWORD **)(a1 + 24) * *a2
                           + **(_QWORD **)(a1 + 32) * *a3
                           + **(_QWORD **)(a1 + 40) * *a4
                           + **(_QWORD **)(a1 + 48) * *a5);
  return *v7;
}

_QWORD *std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20689EB5C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE8FB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE8FB8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((unint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>(unint64_t **a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v6 = *a3;
  if ((v6 & 0x80000000) != 0)
    return 0;
  v7 = 0;
  v8 = *a4;
  if ((v8 & 0x80000000) == 0 && **a1 > v6)
  {
    v7 = 0;
    v9 = *a5;
    if ((v9 & 0x80000000) == 0 && *a1[1] > v8)
    {
      if (*a1[2] > v9)
        return *(unsigned __int8 *)(*a1[3] + *a6 + *a1[4] * *a2 + *a1[5] * v6 + *a1[6] * v8 + *a1[7] * v9);
      return 0;
    }
  }
  return v7;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE9038;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE9038;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  v6 = *a3 & ~(*a3 >> 31);
  if (**(_QWORD **)a1 - 1 < v6)
    v6 = **(_QWORD **)a1 - 1;
  v8 = *a4 & ~(*a4 >> 31);
  v7 = *(_QWORD **)(a1 + 8);
  if (*v7 - 1 < v8)
    v8 = *v7 - 1;
  v9 = *a5 & ~(*a5 >> 31);
  if (**(_QWORD **)(a1 + 16) - 1 < v9)
    v9 = **(_QWORD **)(a1 + 16) - 1;
  return *(unsigned __int8 *)(**(_QWORD **)(a1 + 24)
                            + *a6
                            + **(_QWORD **)(a1 + 32) * *a2
                            + **(_QWORD **)(a1 + 40) * v6
                            + **(_QWORD **)(a1 + 48) * v8
                            + **(_QWORD **)(a1 + 56) * v9);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE90B8;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE90B8;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE9138;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE9138;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  uint64_t result;
  unsigned int v9;
  float v10;
  float v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;

  result = *a3;
  if (!(_DWORD)result)
  {
    v9 = *a4;
    v10 = *a5;
    v11 = *a6;
    v12 = *a7;
    v13 = ilogbf(*a5);
    if (v13 <= -14)
      v14 = -14;
    else
      v14 = v13;
    if (v14 + v12 >= -20)
    {
      v15 = *a2 + (uint64_t)(int)llroundf((float)(v10 * (float)v9) * v11);
      if (v15 < 0x80000000)
      {
        if (v15 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          result = 0;
          *a2 = v15;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20689F1E4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE91C8;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE91C8;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  uint64_t result;
  uint64_t v8;

  result = *a3;
  if (!(_DWORD)result)
  {
    if (*a7 >= -20)
    {
      v8 = *a2 + (uint64_t)(int)llroundf(*a6 * (float)((float)*a4 * (float)(int)*a5));
      if (v8 < 0x80000000)
      {
        if (v8 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          result = 0;
          *a2 = v8;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE9248;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE9248;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, uint64_t a6, _BYTE *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, uint64_t a6, _BYTE *a7)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  result = *a3;
  if (!(_DWORD)result)
  {
    v8 = (int)*a5 * *a4;
    v9 = (v8 + (1 << ~*a7)) >> -*a7;
    if ((char)*a7 >= 1)
      v9 = v8 << *a7;
    if (*a7)
      v10 = v9;
    else
      v10 = (int)*a5 * *a4;
    v11 = *a2 + (uint64_t)v10;
    if (v11 < 0x80000000)
    {
      if (v11 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
      {
        result = 0;
        *a2 = v11;
      }
      else
      {
        *a2 = -8388608;
        return 2;
      }
    }
    else
    {
      *a2 = 2139095040;
      return 1;
    }
  }
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24BFE92C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFE92C8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24BFE9348;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFE9348;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

_QWORD *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &off_24BFE93C8;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a2 + 48);
  v10 = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE9448;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE94C8;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE95C8;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE9648;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE96C8;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_QWORD *)v4 = &off_24BFE9748;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v10 = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &off_24BFE97C8;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24BFE93C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE93C8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE9448;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE9448;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((unint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE94C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE94C8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE9548;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE9548;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE95C8;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE95C8;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE9648;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE9648;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE96C8;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE96C8;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, uint64_t a6, _BYTE *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24BFE9748;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFE9748;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24BFE97C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFE97C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

_QWORD *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &off_24BFE9848;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a2 + 48);
  v10 = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE98C8;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE9948;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE9A48;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE9AC8;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE9B48;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_QWORD *)v4 = &off_24BFE9BC8;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v10 = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &off_24BFE9C48;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24BFE9848;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE9848;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE98C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE98C8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((unint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE9948;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE9948;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE99C8;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE99C8;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE9A48;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE9A48;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE9AC8;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE9AC8;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE9B48;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE9B48;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, uint64_t a6, _BYTE *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24BFE9BC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFE9BC8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24BFE9C48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFE9C48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

_QWORD *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &off_24BFE9CC8;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a2 + 48);
  v10 = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE9D58;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFE9DD8;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<signed char ()(signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE9ED8;
  v6 = v5;
  std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE9F58;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFE9FE8;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFEA068;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_QWORD *)v4 = &off_24BFEA0E8;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v10 = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &off_24BFEA168;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24BFE9CC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE9CC8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  uint64_t v6;
  char *v7;

  v6 = *a6;
  if (**(_QWORD **)a1 == v6)
    v7 = *(char **)(a1 + 8);
  else
    v7 = (char *)(**(_QWORD **)(a1 + 16)
                + v6
                + **(_QWORD **)(a1 + 24) * *a2
                + **(_QWORD **)(a1 + 32) * *a3
                + **(_QWORD **)(a1 + 40) * *a4
                + **(_QWORD **)(a1 + 48) * *a5);
  return *v7;
}

_QWORD *std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2068A17E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE9D58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE9D58;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((unint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>(unint64_t **a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;

  v6 = *a3;
  if ((v6 & 0x80000000) != 0)
    return 0;
  v7 = 0;
  v8 = *a4;
  if ((v8 & 0x80000000) == 0 && **a1 > v6)
  {
    v7 = 0;
    v9 = *a5;
    if ((v9 & 0x80000000) == 0 && *a1[1] > v8)
    {
      if (*a1[2] > v9)
        return *(char *)(*a1[3] + *a6 + *a1[4] * *a2 + *a1[5] * v6 + *a1[6] * v8 + *a1[7] * v9);
      return 0;
    }
  }
  return v7;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFE9DD8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFE9DD8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  v6 = *a3 & ~(*a3 >> 31);
  if (**(_QWORD **)a1 - 1 < v6)
    v6 = **(_QWORD **)a1 - 1;
  v8 = *a4 & ~(*a4 >> 31);
  v7 = *(_QWORD **)(a1 + 8);
  if (*v7 - 1 < v8)
    v8 = *v7 - 1;
  v9 = *a5 & ~(*a5 >> 31);
  if (**(_QWORD **)(a1 + 16) - 1 < v9)
    v9 = **(_QWORD **)(a1 + 16) - 1;
  return *(char *)(**(_QWORD **)(a1 + 24)
                               + *a6
                               + **(_QWORD **)(a1 + 32) * *a2
                               + **(_QWORD **)(a1 + 40) * v6
                               + **(_QWORD **)(a1 + 48) * v8
                               + **(_QWORD **)(a1 + 56) * v9);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE9E58;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE9E58;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE9ED8;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE9ED8;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE9F58;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE9F58;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  uint64_t result;
  char v9;
  float v10;
  float v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;

  result = *a3;
  if (!(_DWORD)result)
  {
    v9 = *a4;
    v10 = *a5;
    v11 = *a6;
    v12 = *a7;
    v13 = ilogbf(*a5);
    if (v13 <= -14)
      v14 = -14;
    else
      v14 = v13;
    if (v14 + v12 >= -20)
    {
      v15 = *a2 + (uint64_t)(int)llroundf((float)(v10 * (float)v9) * v11);
      if (v15 < 0x80000000)
      {
        if (v15 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          result = 0;
          *a2 = v15;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2068A1F14(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFE9FE8;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFE9FE8;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  uint64_t result;
  uint64_t v8;

  result = *a3;
  if (!(_DWORD)result)
  {
    if (*a7 >= -20)
    {
      v8 = *a2 + (uint64_t)(int)llroundf(*a6 * (float)((float)*a4 * (float)(int)*a5));
      if (v8 < 0x80000000)
      {
        if (v8 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          result = 0;
          *a2 = v8;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEA068;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEA068;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, uint64_t a6, _BYTE *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, uint64_t a6, _BYTE *a7)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  result = *a3;
  if (!(_DWORD)result)
  {
    v8 = (int)*a5 * *a4;
    v9 = (v8 + (1 << ~*a7)) >> -*a7;
    if ((char)*a7 >= 1)
      v9 = v8 << *a7;
    if (*a7)
      v10 = v9;
    else
      v10 = (int)*a5 * *a4;
    v11 = *a2 + (uint64_t)v10;
    if (v11 < 0x80000000)
    {
      if (v11 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
      {
        result = 0;
        *a2 = v11;
      }
      else
      {
        *a2 = -8388608;
        return 2;
      }
    }
    else
    {
      *a2 = 2139095040;
      return 1;
    }
  }
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24BFEA0E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFEA0E8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24BFEA168;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFEA168;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

_QWORD *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &off_24BFEA1E8;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a2 + 48);
  v10 = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFEA268;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFEA2E8;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<signed char ()(signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFEA3E8;
  v6 = v5;
  std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFEA468;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFEA4E8;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFEA568;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_QWORD *)v4 = &off_24BFEA5E8;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v10 = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &off_24BFEA668;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24BFEA1E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFEA1E8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFEA268;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFEA268;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((unint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFEA2E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFEA2E8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEA368;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEA368;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEA3E8;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEA3E8;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEA468;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEA468;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEA4E8;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEA4E8;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEA568;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEA568;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, uint64_t a6, _BYTE *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24BFEA5E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFEA5E8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24BFEA668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFEA668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

_QWORD *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &off_24BFEA6E8;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a2 + 48);
  v10 = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFEA768;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x48uLL);
  *(_QWORD *)v4 = &off_24BFEA7E8;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v11 = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v10, a1);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *std::function<signed char ()(signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFEA8E8;
  v6 = v5;
  std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFEA968;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFEA9E8;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFEAA68;
  v6 = v5;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_QWORD *)v4 = &off_24BFEAAE8;
  v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  v10 = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v9, a1);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},void>(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &off_24BFEAB68;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24BFEA6E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFEA6E8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFEA768;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFEA768;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((unint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24BFEA7E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24BFEA7E8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEA868;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEA868;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEA8E8;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEA8E8;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEA968;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEA968;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEA9E8;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEA9E8;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEAA68;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEAA68;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, uint64_t a6, _BYTE *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24BFEAAE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFEAAE8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24BFEAB68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFEAB68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t ANEMachineIR::H2022::NeConv::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned __int8 *v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  unsigned __int8 *v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  unsigned __int8 *v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  unsigned __int8 *v101;
  void *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  unsigned __int8 *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  unsigned __int8 *v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  unsigned __int8 *v121;
  void *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  unsigned __int8 *v127;
  void *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  uint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  uint64_t v137;
  _QWORD *v138;
  unsigned __int8 *v139;
  void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  unsigned __int8 *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  _QWORD *v152;
  unsigned __int8 *v153;
  void *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  unsigned __int8 *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  std::__shared_weak_count_vtbl *v168;
  uint64_t v169;
  std::__shared_weak_count_vtbl *v170;
  uint64_t v171;
  _QWORD *v172;
  unsigned __int8 *v173;
  void *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  char **v179;
  uint64_t v180;
  std::__shared_weak_count_vtbl *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  __int128 v202;
  char *v203;
  char *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  char **v212;
  _QWORD *v213;
  uint64_t v214;
  MIL::Validation::TensorDTypeConstraints *v215;
  uint64_t v216;
  uint64_t *v217;
  unint64_t v218;
  uint64_t *v219;
  unint64_t v220;
  void *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count_vtbl *v227;
  void *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count_vtbl *v234;
  void *v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count_vtbl *v241;
  void *v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count_vtbl *v248;
  void *v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count_vtbl *v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count_vtbl *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  MIL::Validation::TensorRankValueConstraints *v262;
  void *v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count_vtbl *v269;
  void *v270;
  std::__shared_weak_count *v271;
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count_vtbl *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  MIL::Validation::TensorSymbolicShapeConstraints *v283;
  void *v284;
  std::__shared_weak_count *v285;
  std::__shared_weak_count_vtbl *v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count_vtbl *v290;
  void *v291;
  std::__shared_weak_count *v292;
  std::__shared_weak_count_vtbl *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count_vtbl *v297;
  void *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count_vtbl *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count_vtbl *v304;
  void *v305;
  std::__shared_weak_count *v306;
  std::__shared_weak_count_vtbl *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count_vtbl *v311;
  void *v312;
  std::__shared_weak_count *v313;
  std::__shared_weak_count_vtbl *v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count_vtbl *v318;
  void *v319;
  std::__shared_weak_count *v320;
  std::__shared_weak_count_vtbl *v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count_vtbl *v325;
  void *v326;
  std::__shared_weak_count *v327;
  std::__shared_weak_count_vtbl *v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count_vtbl *v332;
  void *v333;
  std::__shared_weak_count *v334;
  std::__shared_weak_count_vtbl *v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count_vtbl *v339;
  void *v340;
  std::__shared_weak_count *v341;
  std::__shared_weak_count_vtbl *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count_vtbl *v346;
  void *v347;
  std::__shared_weak_count *v348;
  std::__shared_weak_count_vtbl *v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count_vtbl *v353;
  void *v354;
  std::__shared_weak_count *v355;
  std::__shared_weak_count_vtbl *v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count_vtbl *v360;
  void *v361;
  std::__shared_weak_count *v362;
  std::__shared_weak_count_vtbl *v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count_vtbl *v367;
  uint64_t v368;
  std::__shared_weak_count *v369;
  std::__shared_weak_count_vtbl *v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  MIL::Validation::PossibleStringValuesConstraints *v374;
  std::__shared_weak_count_vtbl *v375;
  std::__shared_weak_count *v376;
  std::__shared_weak_count_vtbl *v377;
  uint64_t i;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  void *v382;
  uint64_t v383;
  std::__shared_weak_count *v384;
  std::__shared_weak_count_vtbl *v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count_vtbl *v389;
  uint64_t result;
  uint64_t v391;
  std::__shared_weak_count_vtbl *v392;
  std::__shared_weak_count *v393;
  void *v394;
  char v395;
  void *v396;
  std::__shared_weak_count *v397;
  void *v398;
  std::__shared_weak_count *v399;
  void *v400[2];
  char v401;
  void *v402;
  char v403;
  std::__shared_weak_count_vtbl *v404;
  std::__shared_weak_count *v405;
  void *v406[2];
  char v407;
  void *v408;
  char v409;
  std::__shared_weak_count_vtbl *v410;
  std::__shared_weak_count *v411;
  void *v412[2];
  char v413;
  void *v414;
  char v415;
  std::__shared_weak_count_vtbl *v416;
  std::__shared_weak_count *v417;
  void *v418[2];
  char v419;
  void *v420;
  char v421;
  std::__shared_weak_count_vtbl *v422;
  std::__shared_weak_count *v423;
  void *v424[2];
  char v425;
  void *v426;
  char v427;
  std::__shared_weak_count_vtbl *v428;
  std::__shared_weak_count *v429;
  void *v430[2];
  char v431;
  void *v432;
  char v433;
  std::__shared_weak_count_vtbl *v434;
  std::__shared_weak_count *v435;
  void *v436[2];
  char v437;
  void *v438;
  char v439;
  std::__shared_weak_count_vtbl *v440;
  std::__shared_weak_count *v441;
  void *v442[2];
  char v443;
  void *v444;
  char v445;
  std::__shared_weak_count_vtbl *v446;
  std::__shared_weak_count *v447;
  void *v448[2];
  char v449;
  void *v450;
  char v451;
  std::__shared_weak_count_vtbl *v452;
  std::__shared_weak_count *v453;
  void *v454[2];
  char v455;
  void *v456;
  char v457;
  std::__shared_weak_count_vtbl *v458;
  std::__shared_weak_count *v459;
  void *v460[2];
  char v461;
  void *v462;
  char v463;
  std::__shared_weak_count_vtbl *v464;
  std::__shared_weak_count *v465;
  void *v466[2];
  char v467;
  void *v468;
  char v469;
  std::__shared_weak_count_vtbl *v470;
  std::__shared_weak_count *v471;
  void *v472;
  std::__shared_weak_count *v473;
  void *v474;
  char v475;
  std::__shared_weak_count_vtbl *v476;
  std::__shared_weak_count *v477;
  void *v478;
  char v479;
  std::__shared_weak_count_vtbl *v480;
  std::__shared_weak_count *v481;
  void *v482;
  std::__shared_weak_count *v483;
  void *v484[2];
  char v485;
  std::__shared_weak_count_vtbl *v486;
  std::__shared_weak_count *v487;
  void *v488[2];
  char v489;
  void *v490;
  char v491;
  std::__shared_weak_count_vtbl *v492;
  std::__shared_weak_count *v493;
  void *v494[2];
  char v495;
  void *v496;
  char v497;
  std::__shared_weak_count_vtbl *v498;
  std::__shared_weak_count *v499;
  void *v500[2];
  char v501;
  void *v502;
  char v503;
  std::__shared_weak_count_vtbl *v504;
  std::__shared_weak_count *v505;
  void *v506[2];
  char v507;
  void *v508;
  char v509;
  std::__shared_weak_count_vtbl *v510;
  std::__shared_weak_count *v511;
  char **v512;
  std::__shared_weak_count *v513;
  uint64_t v514;
  std::__shared_weak_count *v515;
  void *v516[2];
  uint64_t v517;
  void *v518;
  void *v519;
  _QWORD *v520;
  std::__shared_weak_count *v521;
  uint64_t v522;
  uint64_t v523;
  _QWORD *v524;
  char **v525;
  std::__shared_weak_count *v526;
  std::__shared_weak_count *v527;
  std::__shared_weak_count *v528;
  std::__shared_weak_count *v529;
  std::__shared_weak_count *v530;
  std::__shared_weak_count *v531;
  std::__shared_weak_count *v532;
  std::__shared_weak_count *v533;
  std::__shared_weak_count *v534;
  std::__shared_weak_count *v535;
  std::__shared_weak_count *v536;
  std::__shared_weak_count *v537;
  std::__shared_weak_count *v538;
  std::__shared_weak_count *v539;
  std::__shared_weak_count *v540;
  std::__shared_weak_count *v541;
  std::__shared_weak_count *v542;
  std::__shared_weak_count *v543;
  std::__shared_weak_count *v544;
  void *__p;
  void *v546;
  _QWORD *v547;
  std::__shared_weak_count *v548;
  _QWORD *v549;
  void *v550;
  uint64_t v551;
  uint64_t v552;
  _QWORD v553[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t p_on_zero_shared_weak;
  _BYTE v557[24];
  _BYTE *v558;
  _QWORD v559[3];
  MIL::Validation::TensorDTypeConstraints *v560;
  std::__shared_weak_count_vtbl *v561;
  std::__shared_weak_count_vtbl *v562;
  _QWORD *v563;
  uint64_t v564;

  v564 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v549 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  p_on_zero_shared_weak = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v550 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v562 = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v563 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  v561 = v14;
  v551 = MIL::IRTensorValueType::MakeWithShape();
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v547 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v546 = v18 + 3;
  v552 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v518);
  v19 = v518;
  v518 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v548;
  if (v548)
  {
    p_shared_owners = (unint64_t *)&v548->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v549;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_get_deleter = (uint64_t)&v28->__on_zero_shared_weak;
  p_on_zero_shared_weak = (uint64_t)&v28->__on_zero_shared_weak;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v28->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v28->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  v28->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v27;
  Scalar = v28;
  v550 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  v562 = (std::__shared_weak_count_vtbl *)&v33->__on_zero_shared_weak;
  v563 = &v33->__on_zero_shared_weak;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v33->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v31;
  v33->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v32;
  v561 = v33;
  v551 = MIL::IRTensorValueType::MakeWithShape();
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = operator new(0x20uLL);
  v547 = v38 + 4;
  *v38 = v34;
  v38[1] = v35;
  v38[2] = v36;
  v38[3] = v37;
  __p = v38;
  v546 = v38 + 4;
  v552 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v23, "dense_kernel", (uint64_t *)&v518);
  v40 = v518;
  v518 = 0;
  if (v40)
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  v41 = v544;
  if (v544)
  {
    v42 = (unint64_t *)&v544->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 48))(*((_QWORD *)v39 + 5), 1);
  v44 = v549;
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = operator new(8uLL);
  v550 = v46;
  *v46 = v45;
  v552 = (uint64_t)(v46 + 1);
  v551 = (uint64_t)(v46 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v44, "strides", (uint64_t *)&Scalar);
  v48 = Scalar;
  Scalar = 0;
  if (v48)
    (*((void (**)(std::__shared_weak_count_vtbl *))v48->~__shared_weak_count + 1))(v48);
  v49 = v543;
  if (v543)
  {
    v50 = (unint64_t *)&v543->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v52, "pad_mode", (uint64_t *)&v550);
  v54 = v550;
  v550 = 0;
  if (v54)
    (*(void (**)(void *))(*(_QWORD *)v54 + 8))(v54);
  v55 = v542;
  if (v542)
  {
    v56 = (unint64_t *)&v542->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v58 = v549;
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = operator new(8uLL);
  v550 = v60;
  *v60 = v59;
  v552 = (uint64_t)(v60 + 1);
  v551 = (uint64_t)(v60 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v58, "pad", (uint64_t *)&Scalar);
  v62 = Scalar;
  Scalar = 0;
  if (v62)
    (*((void (**)(std::__shared_weak_count_vtbl *))v62->~__shared_weak_count + 1))(v62);
  v63 = v541;
  if (v541)
  {
    v64 = (unint64_t *)&v541->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 32))(*((_QWORD *)v61 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 48))(*((_QWORD *)v61 + 5), 1);
  v66 = v549;
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = operator new(8uLL);
  v550 = v68;
  *v68 = v67;
  v552 = (uint64_t)(v68 + 1);
  v551 = (uint64_t)(v68 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v66, "dilations", (uint64_t *)&Scalar);
  v70 = Scalar;
  Scalar = 0;
  if (v70)
    (*((void (**)(std::__shared_weak_count_vtbl *))v70->~__shared_weak_count + 1))(v70);
  v71 = v540;
  if (v540)
  {
    v72 = (unint64_t *)&v540->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v74, "num_groups", (uint64_t *)&v550);
  v76 = v550;
  v550 = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  v77 = v539;
  if (v539)
  {
    v78 = (unint64_t *)&v539->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 32))(*((_QWORD *)v75 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 48))(*((_QWORD *)v75 + 5), 1);
  v80 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v80, "group_kernel_reuse", (uint64_t *)&v550);
  v82 = v550;
  v550 = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  v83 = v538;
  if (v538)
  {
    v84 = (unint64_t *)&v538->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 32))(*((_QWORD *)v81 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 48))(*((_QWORD *)v81 + 5), 1);
  v86 = v549;
  v87 = MIL::IRUnknownDimension::Make(a1, 0);
  v88 = operator new(8uLL);
  v550 = v88;
  *v88 = v87;
  v552 = (uint64_t)(v88 + 1);
  v551 = (uint64_t)(v88 + 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  p_get_deleter = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v86, "bias", (uint64_t *)&v561);
  v90 = v561;
  v561 = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  v91 = v537;
  if (v537)
  {
    v92 = (unint64_t *)&v537->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 32))(*((_QWORD *)v89 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 48))(*((_QWORD *)v89 + 5), 1);
  v94 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v94, "acc_left_shift", (uint64_t *)&v550);
  v96 = v550;
  v550 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  v97 = v536;
  if (v536)
  {
    v98 = (unint64_t *)&v536->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 32))(*((_QWORD *)v95 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 48))(*((_QWORD *)v95 + 5), 1);
  v100 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v101 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v100, "acc_bias_shift", (uint64_t *)&v550);
  v102 = v550;
  v550 = 0;
  if (v102)
    (*(void (**)(void *))(*(_QWORD *)v102 + 8))(v102);
  v103 = v535;
  if (v535)
  {
    v104 = (unint64_t *)&v535->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v101 + 5) + 32))(*((_QWORD *)v101 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v101 + 5) + 48))(*((_QWORD *)v101 + 5), 1);
  v106 = v549;
  v107 = MIL::IRUnknownDimension::Make(a1, 0);
  v108 = operator new(8uLL);
  v550 = v108;
  *v108 = v107;
  v552 = (uint64_t)(v108 + 1);
  v551 = (uint64_t)(v108 + 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  p_get_deleter = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v106, "post_scale", (uint64_t *)&v561);
  v110 = v561;
  v561 = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  v111 = v534;
  if (v534)
  {
    v112 = (unint64_t *)&v534->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v109 + 5) + 32))(*((_QWORD *)v109 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v109 + 5) + 48))(*((_QWORD *)v109 + 5), 1);
  v114 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v114, "post_right_shift", (uint64_t *)&v550);
  v116 = v550;
  v550 = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  v117 = v533;
  if (v533)
  {
    v118 = (unint64_t *)&v533->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v115 + 5) + 32))(*((_QWORD *)v115 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v115 + 5) + 48))(*((_QWORD *)v115 + 5), 1);
  v120 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v121 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v120, "transposed", (uint64_t *)&v550);
  v122 = v550;
  v550 = 0;
  if (v122)
    (*(void (**)(void *))(*(_QWORD *)v122 + 8))(v122);
  v123 = v532;
  if (v532)
  {
    v124 = (unint64_t *)&v532->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v121 + 5) + 32))(*((_QWORD *)v121 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v121 + 5) + 48))(*((_QWORD *)v121 + 5), 1);
  v126 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v126, "pre_relu", (uint64_t *)&v550);
  v128 = v550;
  v550 = 0;
  if (v128)
    (*(void (**)(void *))(*(_QWORD *)v128 + 8))(v128);
  v129 = v531;
  if (v531)
  {
    v130 = (unint64_t *)&v531->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v127 + 5) + 32))(*((_QWORD *)v127 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v127 + 5) + 48))(*((_QWORD *)v127 + 5), 1);
  v132 = v549;
  v133 = MIL::IRUnknownDimension::Make(a1, 0);
  v134 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v134;
  v134->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v133;
  p_get_deleter = (uint64_t)&v134->~__shared_weak_count_0;
  p_on_zero_shared_weak = (uint64_t)&v134->~__shared_weak_count_0;
  v550 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v135 = MIL::IRUnknownDimension::Make(a1, 0);
  v136 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v561 = v136;
  v136->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v135;
  v562 = (std::__shared_weak_count_vtbl *)&v136->~__shared_weak_count_0;
  v563 = &v136->~__shared_weak_count_0;
  v551 = MIL::IRTensorValueType::MakeWithShape();
  v137 = MIL::IRUnknownDimension::Make(a1, 0);
  v138 = operator new(8uLL);
  __p = v138;
  *v138 = v137;
  v547 = v138 + 1;
  v546 = v138 + 1;
  v552 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[39],std::unique_ptr<MIL::IRParameter>>(v132, "alternative_format_kernel_coefficients", (uint64_t *)&v518);
  v140 = v518;
  v518 = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  v141 = v530;
  if (v530)
  {
    v142 = (unint64_t *)&v530->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v139 + 5) + 32))(*((_QWORD *)v139 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v139 + 5) + 48))(*((_QWORD *)v139 + 5), 1);
  v144 = v549;
  v145 = MIL::IRUnknownDimension::Make(a1, 0);
  v146 = operator new(8uLL);
  v550 = v146;
  *v146 = v145;
  v552 = (uint64_t)(v146 + 1);
  v551 = (uint64_t)(v146 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v147 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v144, "sparse_mask", (uint64_t *)&Scalar);
  v148 = Scalar;
  Scalar = 0;
  if (v148)
    (*((void (**)(std::__shared_weak_count_vtbl *))v148->~__shared_weak_count + 1))(v148);
  v149 = v529;
  if (v529)
  {
    v150 = (unint64_t *)&v529->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v147 + 5) + 32))(*((_QWORD *)v147 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v147 + 5) + 48))(*((_QWORD *)v147 + 5), 1);
  v152 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v153 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v152, "sparse_num_nonzero", (uint64_t *)&v550);
  v154 = v550;
  v550 = 0;
  if (v154)
    (*(void (**)(void *))(*(_QWORD *)v154 + 8))(v154);
  v155 = v528;
  if (v528)
  {
    v156 = (unint64_t *)&v528->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v153 + 5) + 32))(*((_QWORD *)v153 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v153 + 5) + 48))(*((_QWORD *)v153 + 5), 1);
  v158 = v549;
  v159 = MIL::IRUnknownDimension::Make(a1, 0);
  v160 = operator new(8uLL);
  v550 = v160;
  *v160 = v159;
  v552 = (uint64_t)(v160 + 1);
  v551 = (uint64_t)(v160 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v161 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[30],std::unique_ptr<MIL::IRParameter>>(v158, "sparse_num_nonzero_per_filter", (uint64_t *)&Scalar);
  v162 = Scalar;
  Scalar = 0;
  if (v162)
    (*((void (**)(std::__shared_weak_count_vtbl *))v162->~__shared_weak_count + 1))(v162);
  v163 = v527;
  if (v527)
  {
    v164 = (unint64_t *)&v527->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v161 + 5) + 32))(*((_QWORD *)v161 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v161 + 5) + 48))(*((_QWORD *)v161 + 5), 1);
  v166 = v549;
  v167 = MIL::IRUnknownDimension::Make(a1, 0);
  v168 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v168;
  v168->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v167;
  p_get_deleter = (uint64_t)&v168->~__shared_weak_count_0;
  p_on_zero_shared_weak = (uint64_t)&v168->~__shared_weak_count_0;
  v550 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v169 = MIL::IRUnknownDimension::Make(a1, 0);
  v170 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v561 = v170;
  v170->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v169;
  v562 = (std::__shared_weak_count_vtbl *)&v170->~__shared_weak_count_0;
  v563 = &v170->~__shared_weak_count_0;
  v551 = MIL::IRTensorValueType::MakeWithShape();
  v171 = MIL::IRUnknownDimension::Make(a1, 0);
  v172 = operator new(8uLL);
  __p = v172;
  *v172 = v171;
  v547 = v172 + 1;
  v546 = v172 + 1;
  v552 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v173 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v166, "palette_table", (uint64_t *)&v518);
  v174 = v518;
  v518 = 0;
  if (v174)
    (*(void (**)(void *))(*(_QWORD *)v174 + 8))(v174);
  v175 = v526;
  if (v526)
  {
    v176 = (unint64_t *)&v526->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v173 + 5) + 32))(*((_QWORD *)v173 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v173 + 5) + 48))(*((_QWORD *)v173 + 5), 1);
  v525 = 0;
  v178 = operator new();
  *(_QWORD *)v178 = 0;
  *(_QWORD *)(v178 + 8) = 0;
  *(_QWORD *)(v178 + 16) = 0;
  v550 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v525, (void **)v178);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v550, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v525, 1uLL);
  v179 = v525;
  v180 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v181 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v561 = v181;
  v181->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v180;
  v562 = (std::__shared_weak_count_vtbl *)&v181->~__shared_weak_count_0;
  v563 = &v181->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v182 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v183 = operator new(8uLL);
  __p = v183;
  *v183 = v182;
  v547 = v183 + 1;
  v546 = v183 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v184 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v185 = operator new(8uLL);
  v518 = v185;
  *v185 = v184;
  v520 = v185 + 1;
  v519 = v185 + 1;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v186 = v522;
  v523 = v522;
  if (v522)
  {
    v187 = (_QWORD *)operator new();
    v188 = v522;
    *v187 = &unk_24BFE7320;
    v187[1] = 0;
    v187[2] = 0;
    v187[3] = v188;
  }
  else
  {
    v187 = 0;
  }
  v524 = v187;
  v522 = 0;
  v189 = v179[2];
  v190 = v179[1];
  if (v190 >= v189)
  {
    v192 = (v190 - *v179) >> 4;
    v193 = v192 + 1;
    if ((unint64_t)(v192 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v194 = v189 - *v179;
    if (v194 >> 3 > v193)
      v193 = v194 >> 3;
    if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF0)
      v195 = 0xFFFFFFFFFFFFFFFLL;
    else
      v195 = v193;
    v553[1] = v179 + 2;
    v196 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v179 + 2), v195);
    v198 = &v196[16 * v192];
    *(_QWORD *)v198 = v186;
    *((_QWORD *)v198 + 1) = v187;
    v524 = 0;
    v523 = 0;
    v200 = *v179;
    v199 = v179[1];
    if (v199 == *v179)
    {
      v203 = v179[1];
      v201 = &v196[16 * v192];
    }
    else
    {
      v201 = &v196[16 * v192];
      do
      {
        v202 = *((_OWORD *)v199 - 1);
        v199 -= 16;
        *((_OWORD *)v201 - 1) = v202;
        v201 -= 16;
        *(_QWORD *)v199 = 0;
        *((_QWORD *)v199 + 1) = 0;
      }
      while (v199 != v200);
      v203 = *v179;
      v199 = v179[1];
    }
    v191 = v198 + 16;
    *v179 = v201;
    v551 = (uint64_t)v203;
    v179[1] = v198 + 16;
    v552 = (uint64_t)v199;
    v204 = v179[2];
    v179[2] = &v196[16 * v197];
    v553[0] = v204;
    v550 = v203;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v550);
  }
  else
  {
    *(_QWORD *)v190 = v186;
    *((_QWORD *)v190 + 1) = v187;
    v191 = v190 + 16;
    v524 = 0;
    v523 = 0;
  }
  v179[1] = v191;
  v205 = v522;
  v522 = 0;
  if (v205)
    (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
  v206 = v521;
  if (v521)
  {
    v207 = (unint64_t *)&v521->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  if (v518)
  {
    v519 = v518;
    operator delete(v518);
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  *(_OWORD *)v516 = *(_OWORD *)a2;
  v517 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v209 = (uint64_t)v549;
  v514 = (uint64_t)v549;
  if (v549)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = (std::__shared_weak_count_vtbl *)v209;
  }
  else
  {
    v210 = 0;
  }
  v515 = v210;
  v549 = 0;
  v512 = v525;
  if (v525)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = v525;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = (std::__shared_weak_count_vtbl *)v212;
  }
  else
  {
    v211 = 0;
  }
  v513 = v211;
  v525 = 0;
  v559[0] = &unk_24BFE7440;
  v559[1] = ANEMachineIR::H2022::Validators::ValidateNeConv;
  v560 = (MIL::Validation::TensorDTypeConstraints *)v559;
  v558 = 0;
  MIL::IROperator::Make();
  v213 = v558;
  if (v558 == v557)
  {
    v214 = 4;
    v213 = v557;
  }
  else
  {
    if (!v558)
      goto LABEL_220;
    v214 = 5;
  }
  (*(void (**)(void))(*v213 + 8 * v214))();
LABEL_220:
  v215 = v560;
  if (v560 == (MIL::Validation::TensorDTypeConstraints *)v559)
  {
    v216 = 4;
    v215 = (MIL::Validation::TensorDTypeConstraints *)v559;
    goto LABEL_224;
  }
  if (v560)
  {
    v216 = 5;
LABEL_224:
    v215 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v215 + 8 * v216))();
  }
  if (v513)
  {
    v217 = &v513->__shared_owners_;
    do
      v218 = __ldaxr((unint64_t *)v217);
    while (__stlxr(v218 - 1, (unint64_t *)v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
      std::__shared_weak_count::__release_weak(v513);
    }
  }
  if (v515)
  {
    v219 = &v515->__shared_owners_;
    do
      v220 = __ldaxr((unint64_t *)v219);
    while (__stlxr(v220 - 1, (unint64_t *)v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
      std::__shared_weak_count::__release_weak(v515);
    }
  }
  if (SHIBYTE(v517) < 0)
    operator delete(v516[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v215);
  v221 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v508, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v510 = Scalar;
  if (Scalar)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = Scalar;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v511 = v222;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v506, "InputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v221 + 24))(v221, &v510, v506);
  if (v507 < 0)
    operator delete(v506[0]);
  v224 = v511;
  if (v511)
  {
    v225 = (unint64_t *)&v511->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = Scalar;
  Scalar = 0;
  if (v227)
    (*((void (**)(std::__shared_weak_count_vtbl *))v227->~__shared_weak_count + 1))(v227);
  if (v509 < 0)
    operator delete(v508);
  v228 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v502, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v504 = Scalar;
  if (Scalar)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = Scalar;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v505 = v229;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v500, "KernelT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v228 + 24))(v228, &v504, v500);
  if (v501 < 0)
    operator delete(v500[0]);
  v231 = v505;
  if (v505)
  {
    v232 = (unint64_t *)&v505->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = Scalar;
  Scalar = 0;
  if (v234)
    (*((void (**)(std::__shared_weak_count_vtbl *))v234->~__shared_weak_count + 1))(v234);
  if (v503 < 0)
    operator delete(v502);
  v235 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v496, "alternative_format_kernel_coefficients");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v498 = Scalar;
  if (Scalar)
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = Scalar;
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = v237;
  }
  else
  {
    v236 = 0;
  }
  v499 = v236;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v494, "AlternateKernelT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v235 + 24))(v235, &v498, v494);
  if (v495 < 0)
    operator delete(v494[0]);
  v238 = v499;
  if (v499)
  {
    v239 = (unint64_t *)&v499->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = Scalar;
  Scalar = 0;
  if (v241)
    (*((void (**)(std::__shared_weak_count_vtbl *))v241->~__shared_weak_count + 1))(v241);
  if (v497 < 0)
    operator delete(v496);
  v242 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v490, "palette_table");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v492 = Scalar;
  if (Scalar)
  {
    v243 = (std::__shared_weak_count *)operator new();
    v244 = Scalar;
    v243->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v243->__shared_owners_ = 0;
    v243->__shared_weak_owners_ = 0;
    v243[1].__vftable = v244;
  }
  else
  {
    v243 = 0;
  }
  v493 = v243;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v488, "PaletteT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v242 + 24))(v242, &v492, v488);
  if (v489 < 0)
    operator delete(v488[0]);
  v245 = v493;
  if (v493)
  {
    v246 = (unint64_t *)&v493->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = Scalar;
  Scalar = 0;
  if (v248)
    (*((void (**)(std::__shared_weak_count_vtbl *))v248->~__shared_weak_count + 1))(v248);
  if (v491 < 0)
    operator delete(v490);
  v249 = v550;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v486 = Scalar;
  if (Scalar)
  {
    v250 = (std::__shared_weak_count *)operator new();
    v251 = Scalar;
    v250->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v250->__shared_owners_ = 0;
    v250->__shared_weak_owners_ = 0;
    v250[1].__vftable = v251;
  }
  else
  {
    v250 = 0;
  }
  v487 = v250;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v484, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v249 + 24))(v249, &v486, v484);
  if (v485 < 0)
    operator delete(v484[0]);
  v252 = v487;
  if (v487)
  {
    v253 = (unint64_t *)&v487->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = Scalar;
  Scalar = 0;
  if (v255)
    (*((void (**)(std::__shared_weak_count_vtbl *))v255->~__shared_weak_count + 1))(v255);
  v256 = *a3;
  v482 = v550;
  if (v550)
  {
    v257 = (std::__shared_weak_count *)operator new();
    v258 = (std::__shared_weak_count_vtbl *)v550;
    v257->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v257->__shared_owners_ = 0;
    v257->__shared_weak_owners_ = 0;
    v257[1].__vftable = v258;
  }
  else
  {
    v257 = 0;
  }
  v483 = v257;
  v550 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v256 + 56))(v256, &v482);
  v259 = v483;
  if (v483)
  {
    v260 = (unint64_t *)&v483->__shared_owners_;
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v262 = (MIL::Validation::TensorRankValueConstraints *)v550;
  v550 = 0;
  if (v262)
    v262 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v262 + 8))(v262);
  MIL::Validation::TensorRankValueConstraints::Make(v262);
  v263 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v478, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v480 = Scalar;
  if (Scalar)
  {
    v264 = (std::__shared_weak_count *)operator new();
    v265 = Scalar;
    v264->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v264->__shared_owners_ = 0;
    v264->__shared_weak_owners_ = 0;
    v264[1].__vftable = v265;
  }
  else
  {
    v264 = 0;
  }
  v481 = v264;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v263 + 32))(v263, &v480, 3, 5);
  v266 = v481;
  if (v481)
  {
    v267 = (unint64_t *)&v481->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  v269 = Scalar;
  Scalar = 0;
  if (v269)
    (*((void (**)(std::__shared_weak_count_vtbl *))v269->~__shared_weak_count + 1))(v269);
  if (v479 < 0)
    operator delete(v478);
  v270 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v474, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v476 = Scalar;
  if (Scalar)
  {
    v271 = (std::__shared_weak_count *)operator new();
    v272 = Scalar;
    v271->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v271->__shared_owners_ = 0;
    v271->__shared_weak_owners_ = 0;
    v271[1].__vftable = v272;
  }
  else
  {
    v271 = 0;
  }
  v477 = v271;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v270 + 32))(v270, &v476, 4, 6);
  v273 = v477;
  if (v477)
  {
    v274 = (unint64_t *)&v477->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
  }
  v276 = Scalar;
  Scalar = 0;
  if (v276)
    (*((void (**)(std::__shared_weak_count_vtbl *))v276->~__shared_weak_count + 1))(v276);
  if (v475 < 0)
    operator delete(v474);
  v277 = *a3;
  v472 = v550;
  if (v550)
  {
    v278 = (std::__shared_weak_count *)operator new();
    v279 = (std::__shared_weak_count_vtbl *)v550;
    v278->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v278->__shared_owners_ = 0;
    v278->__shared_weak_owners_ = 0;
    v278[1].__vftable = v279;
  }
  else
  {
    v278 = 0;
  }
  v473 = v278;
  v550 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v277 + 56))(v277, &v472);
  v280 = v473;
  if (v473)
  {
    v281 = (unint64_t *)&v473->__shared_owners_;
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  v283 = (MIL::Validation::TensorSymbolicShapeConstraints *)v550;
  v550 = 0;
  if (v283)
    v283 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v283 + 8))(v283);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v283);
  v284 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v468, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v470 = Scalar;
  if (Scalar)
  {
    v285 = (std::__shared_weak_count *)operator new();
    v286 = Scalar;
    v285->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v285->__shared_owners_ = 0;
    v285->__shared_weak_owners_ = 0;
    v285[1].__vftable = v286;
  }
  else
  {
    v285 = 0;
  }
  v471 = v285;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v466, "Batch");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v284 + 24))(v284, &v470, 0, v466);
  if (v467 < 0)
    operator delete(v466[0]);
  v287 = v471;
  if (v471)
  {
    v288 = (unint64_t *)&v471->__shared_owners_;
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
  }
  v290 = Scalar;
  Scalar = 0;
  if (v290)
    (*((void (**)(std::__shared_weak_count_vtbl *))v290->~__shared_weak_count + 1))(v290);
  if (v469 < 0)
    operator delete(v468);
  v291 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v462, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v464 = Scalar;
  if (Scalar)
  {
    v292 = (std::__shared_weak_count *)operator new();
    v293 = Scalar;
    v292->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v292->__shared_owners_ = 0;
    v292->__shared_weak_owners_ = 0;
    v292[1].__vftable = v293;
  }
  else
  {
    v292 = 0;
  }
  v465 = v292;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v460, "Cin");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v291 + 24))(v291, &v464, -1, v460);
  if (v461 < 0)
    operator delete(v460[0]);
  v294 = v465;
  if (v465)
  {
    v295 = (unint64_t *)&v465->__shared_owners_;
    do
      v296 = __ldaxr(v295);
    while (__stlxr(v296 - 1, v295));
    if (!v296)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
  }
  v297 = Scalar;
  Scalar = 0;
  if (v297)
    (*((void (**)(std::__shared_weak_count_vtbl *))v297->~__shared_weak_count + 1))(v297);
  if (v463 < 0)
    operator delete(v462);
  v298 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v456, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v458 = Scalar;
  if (Scalar)
  {
    v299 = (std::__shared_weak_count *)operator new();
    v300 = Scalar;
    v299->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v299->__shared_owners_ = 0;
    v299->__shared_weak_owners_ = 0;
    v299[1].__vftable = v300;
  }
  else
  {
    v299 = 0;
  }
  v459 = v299;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v454, "NUM_GROUPS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v298 + 24))(v298, &v458, 0, v454);
  if (v455 < 0)
    operator delete(v454[0]);
  v301 = v459;
  if (v459)
  {
    v302 = (unint64_t *)&v459->__shared_owners_;
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  v304 = Scalar;
  Scalar = 0;
  if (v304)
    (*((void (**)(std::__shared_weak_count_vtbl *))v304->~__shared_weak_count + 1))(v304);
  if (v457 < 0)
    operator delete(v456);
  v305 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v450, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v452 = Scalar;
  if (Scalar)
  {
    v306 = (std::__shared_weak_count *)operator new();
    v307 = Scalar;
    v306->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v306->__shared_owners_ = 0;
    v306->__shared_weak_owners_ = 0;
    v306[1].__vftable = v307;
  }
  else
  {
    v306 = 0;
  }
  v453 = v306;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v448, "KCin");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v305 + 24))(v305, &v452, -2, v448);
  if (v449 < 0)
    operator delete(v448[0]);
  v308 = v453;
  if (v453)
  {
    v309 = (unint64_t *)&v453->__shared_owners_;
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  v311 = Scalar;
  Scalar = 0;
  if (v311)
    (*((void (**)(std::__shared_weak_count_vtbl *))v311->~__shared_weak_count + 1))(v311);
  if (v451 < 0)
    operator delete(v450);
  v312 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v444, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v446 = Scalar;
  if (Scalar)
  {
    v313 = (std::__shared_weak_count *)operator new();
    v314 = Scalar;
    v313->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v313->__shared_owners_ = 0;
    v313->__shared_weak_owners_ = 0;
    v313[1].__vftable = v314;
  }
  else
  {
    v313 = 0;
  }
  v447 = v313;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v442, "KCout");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v312 + 24))(v312, &v446, -1, v442);
  if (v443 < 0)
    operator delete(v442[0]);
  v315 = v447;
  if (v447)
  {
    v316 = (unint64_t *)&v447->__shared_owners_;
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
  }
  v318 = Scalar;
  Scalar = 0;
  if (v318)
    (*((void (**)(std::__shared_weak_count_vtbl *))v318->~__shared_weak_count + 1))(v318);
  if (v445 < 0)
    operator delete(v444);
  v319 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v438, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v440 = Scalar;
  if (Scalar)
  {
    v320 = (std::__shared_weak_count *)operator new();
    v321 = Scalar;
    v320->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v320->__shared_owners_ = 0;
    v320->__shared_weak_owners_ = 0;
    v320[1].__vftable = v321;
  }
  else
  {
    v320 = 0;
  }
  v441 = v320;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v436, "NUM_SPATIAL_DIMS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v319 + 24))(v319, &v440, 0, v436);
  if (v437 < 0)
    operator delete(v436[0]);
  v322 = v441;
  if (v441)
  {
    v323 = (unint64_t *)&v441->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  v325 = Scalar;
  Scalar = 0;
  if (v325)
    (*((void (**)(std::__shared_weak_count_vtbl *))v325->~__shared_weak_count + 1))(v325);
  if (v439 < 0)
    operator delete(v438);
  v326 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v432, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v434 = Scalar;
  if (Scalar)
  {
    v327 = (std::__shared_weak_count *)operator new();
    v328 = Scalar;
    v327->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v327->__shared_owners_ = 0;
    v327->__shared_weak_owners_ = 0;
    v327[1].__vftable = v328;
  }
  else
  {
    v327 = 0;
  }
  v435 = v327;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v430, "TWICE_NUM_SPATIAL_DIMS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v326 + 24))(v326, &v434, 0, v430);
  if (v431 < 0)
    operator delete(v430[0]);
  v329 = v435;
  if (v435)
  {
    v330 = (unint64_t *)&v435->__shared_owners_;
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
  v332 = Scalar;
  Scalar = 0;
  if (v332)
    (*((void (**)(std::__shared_weak_count_vtbl *))v332->~__shared_weak_count + 1))(v332);
  if (v433 < 0)
    operator delete(v432);
  v333 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v426, "dilations");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v428 = Scalar;
  if (Scalar)
  {
    v334 = (std::__shared_weak_count *)operator new();
    v335 = Scalar;
    v334->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v334->__shared_owners_ = 0;
    v334->__shared_weak_owners_ = 0;
    v334[1].__vftable = v335;
  }
  else
  {
    v334 = 0;
  }
  v429 = v334;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v424, "NUM_SPATIAL_DIMS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v333 + 24))(v333, &v428, 0, v424);
  if (v425 < 0)
    operator delete(v424[0]);
  v336 = v429;
  if (v429)
  {
    v337 = (unint64_t *)&v429->__shared_owners_;
    do
      v338 = __ldaxr(v337);
    while (__stlxr(v338 - 1, v337));
    if (!v338)
    {
      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
      std::__shared_weak_count::__release_weak(v336);
    }
  }
  v339 = Scalar;
  Scalar = 0;
  if (v339)
    (*((void (**)(std::__shared_weak_count_vtbl *))v339->~__shared_weak_count + 1))(v339);
  if (v427 < 0)
    operator delete(v426);
  v340 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v420, "alternative_format_kernel_coefficients");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v422 = Scalar;
  if (Scalar)
  {
    v341 = (std::__shared_weak_count *)operator new();
    v342 = Scalar;
    v341->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v341->__shared_owners_ = 0;
    v341->__shared_weak_owners_ = 0;
    v341[1].__vftable = v342;
  }
  else
  {
    v341 = 0;
  }
  v423 = v341;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v418, "ALTERNATE_KERNEL_SIZE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v340 + 24))(v340, &v422, 0, v418);
  if (v419 < 0)
    operator delete(v418[0]);
  v343 = v423;
  if (v423)
  {
    v344 = (unint64_t *)&v423->__shared_owners_;
    do
      v345 = __ldaxr(v344);
    while (__stlxr(v345 - 1, v344));
    if (!v345)
    {
      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
      std::__shared_weak_count::__release_weak(v343);
    }
  }
  v346 = Scalar;
  Scalar = 0;
  if (v346)
    (*((void (**)(std::__shared_weak_count_vtbl *))v346->~__shared_weak_count + 1))(v346);
  if (v421 < 0)
    operator delete(v420);
  v347 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v414, "sparse_mask");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v416 = Scalar;
  if (Scalar)
  {
    v348 = (std::__shared_weak_count *)operator new();
    v349 = Scalar;
    v348->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v348->__shared_owners_ = 0;
    v348->__shared_weak_owners_ = 0;
    v348[1].__vftable = v349;
  }
  else
  {
    v348 = 0;
  }
  v417 = v348;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v412, "SPARSE_MASK_SIZE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v347 + 24))(v347, &v416, 0, v412);
  if (v413 < 0)
    operator delete(v412[0]);
  v350 = v417;
  if (v417)
  {
    v351 = (unint64_t *)&v417->__shared_owners_;
    do
      v352 = __ldaxr(v351);
    while (__stlxr(v352 - 1, v351));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
      std::__shared_weak_count::__release_weak(v350);
    }
  }
  v353 = Scalar;
  Scalar = 0;
  if (v353)
    (*((void (**)(std::__shared_weak_count_vtbl *))v353->~__shared_weak_count + 1))(v353);
  if (v415 < 0)
    operator delete(v414);
  v354 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v408, "sparse_num_nonzero_per_filter");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v410 = Scalar;
  if (Scalar)
  {
    v355 = (std::__shared_weak_count *)operator new();
    v356 = Scalar;
    v355->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v355->__shared_owners_ = 0;
    v355->__shared_weak_owners_ = 0;
    v355[1].__vftable = v356;
  }
  else
  {
    v355 = 0;
  }
  v411 = v355;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v406, "NUM_FILTERS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v354 + 24))(v354, &v410, 0, v406);
  if (v407 < 0)
    operator delete(v406[0]);
  v357 = v411;
  if (v411)
  {
    v358 = (unint64_t *)&v411->__shared_owners_;
    do
      v359 = __ldaxr(v358);
    while (__stlxr(v359 - 1, v358));
    if (!v359)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  v360 = Scalar;
  Scalar = 0;
  if (v360)
    (*((void (**)(std::__shared_weak_count_vtbl *))v360->~__shared_weak_count + 1))(v360);
  if (v409 < 0)
    operator delete(v408);
  v361 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v402, "palette_table");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v404 = Scalar;
  if (Scalar)
  {
    v362 = (std::__shared_weak_count *)operator new();
    v363 = Scalar;
    v362->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v362->__shared_owners_ = 0;
    v362->__shared_weak_owners_ = 0;
    v362[1].__vftable = v363;
  }
  else
  {
    v362 = 0;
  }
  v405 = v362;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v400, "PALETTE_SIZE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v361 + 24))(v361, &v404, 0, v400);
  if (v401 < 0)
    operator delete(v400[0]);
  v364 = v405;
  if (v405)
  {
    v365 = (unint64_t *)&v405->__shared_owners_;
    do
      v366 = __ldaxr(v365);
    while (__stlxr(v366 - 1, v365));
    if (!v366)
    {
      ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
      std::__shared_weak_count::__release_weak(v364);
    }
  }
  v367 = Scalar;
  Scalar = 0;
  if (v367)
    (*((void (**)(std::__shared_weak_count_vtbl *))v367->~__shared_weak_count + 1))(v367);
  if (v403 < 0)
    operator delete(v402);
  v368 = *a3;
  v398 = v550;
  if (v550)
  {
    v369 = (std::__shared_weak_count *)operator new();
    v370 = (std::__shared_weak_count_vtbl *)v550;
    v369->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v369->__shared_owners_ = 0;
    v369->__shared_weak_owners_ = 0;
    v369[1].__vftable = v370;
  }
  else
  {
    v369 = 0;
  }
  v399 = v369;
  v550 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v368 + 56))(v368, &v398);
  v371 = v399;
  if (v399)
  {
    v372 = (unint64_t *)&v399->__shared_owners_;
    do
      v373 = __ldaxr(v372);
    while (__stlxr(v373 - 1, v372));
    if (!v373)
    {
      ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
      std::__shared_weak_count::__release_weak(v371);
    }
  }
  v374 = (MIL::Validation::PossibleStringValuesConstraints *)v550;
  v550 = 0;
  if (v374)
    v374 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v374 + 8))(v374);
  MIL::Validation::PossibleStringValuesConstraints::Make(v374);
  v375 = v561;
  std::string::basic_string[abi:ne180100]<0>(&v394, "pad_mode");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v396 = __p;
  if (__p)
  {
    v376 = (std::__shared_weak_count *)operator new();
    v377 = (std::__shared_weak_count_vtbl *)__p;
    v376->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v376->__shared_owners_ = 0;
    v376->__shared_weak_owners_ = 0;
    v376[1].__vftable = v377;
  }
  else
  {
    v376 = 0;
  }
  v397 = v376;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v550, "replicate");
  std::string::basic_string[abi:ne180100]<0>(v553, "zero");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v550, 2);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v375->~__shared_weak_count
   + 3))(v375, &v396, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v553[i + 2]) < 0)
      operator delete((void *)v553[i]);
  }
  v379 = v397;
  if (v397)
  {
    v380 = (unint64_t *)&v397->__shared_owners_;
    do
      v381 = __ldaxr(v380);
    while (__stlxr(v381 - 1, v380));
    if (!v381)
    {
      ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
      std::__shared_weak_count::__release_weak(v379);
    }
  }
  v382 = __p;
  __p = 0;
  if (v382)
    (*(void (**)(void *))(*(_QWORD *)v382 + 8))(v382);
  if (v395 < 0)
    operator delete(v394);
  v383 = *a3;
  v392 = v561;
  if (v561)
  {
    v384 = (std::__shared_weak_count *)operator new();
    v385 = v561;
    v384->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v384->__shared_owners_ = 0;
    v384->__shared_weak_owners_ = 0;
    v384[1].__vftable = v385;
  }
  else
  {
    v384 = 0;
  }
  v393 = v384;
  v561 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v383 + 56))(v383, &v392);
  v386 = v393;
  if (v393)
  {
    v387 = (unint64_t *)&v393->__shared_owners_;
    do
      v388 = __ldaxr(v387);
    while (__stlxr(v388 - 1, v387));
    if (!v388)
    {
      ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
      std::__shared_weak_count::__release_weak(v386);
    }
  }
  v389 = v561;
  v561 = 0;
  if (v389)
    (*((void (**)(std::__shared_weak_count_vtbl *))v389->~__shared_weak_count + 1))(v389);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v525, 0);
  result = (uint64_t)v549;
  if (v549)
  {
    v391 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v549);
    return MEMORY[0x20BCFF140](v391, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068A7024(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x560], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x6C0], 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[13],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068A7F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[13],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068A7F98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068A7FE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[8],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068A805C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[8],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[8],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068A80F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[8],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068A8140(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[4],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068A81B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[4],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[4],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068A8250(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[4],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068A829C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[19],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068A8314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[19],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[19],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068A83AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[19],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068A83F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[39],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[39],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068A8470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[39],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[39],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068A8508(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[39],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068A8554(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[30],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[30],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068A85CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[30],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[30],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068A8664(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[30],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068A86B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[14],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068A8728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[14],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[14],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068A87C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[14],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068A880C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MIL::Validation::TensorRankValueConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorRankValueConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorRankValueConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t ANEMachineIR::H2022::NeConv::Make(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  if ((_QWORD *)*a1 == a2)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (*a1)
  {
    v4 = 5;
    a2 = (_QWORD *)*a1;
LABEL_5:
    (*(void (**)(_QWORD *))(*a2 + 8 * v4))(a2);
  }
  return std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](a3);
}

uint64_t ANEMachineIR::H2021::BaseActivation::Make(MIL::IRUnknownDimension *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  char **v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t result;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  void *v56[2];
  uint64_t v57;
  void *v58;
  void *v59;
  _QWORD *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  char **v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  void *__p;
  void *v67;
  char *v68;
  char *v69;
  char **v70;
  _BYTE v71[24];
  _BYTE *v72;
  _QWORD v73[3];
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v65 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v67 = v8 + 1;
  v68 = (char *)(v8 + 1);
  v76 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v58);
  v9 = v58;
  v58 = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = v64;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v67 = __p;
    operator delete(__p);
  }
  v63 = 0;
  v13 = operator new();
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v63, (void **)v13);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v63, 1uLL);
  v14 = v63;
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v58 = v16;
  *v16 = v15;
  v59 = v16 + 1;
  v60 = v16 + 1;
  v75 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v17 = v62;
  v76 = v62;
  if (v62)
  {
    v18 = (_QWORD *)operator new();
    v19 = v62;
    *v18 = &unk_24BFE7320;
    v18[1] = 0;
    v18[2] = 0;
    v18[3] = v19;
  }
  else
  {
    v18 = 0;
  }
  v77 = v18;
  v62 = 0;
  v20 = v14[2];
  v21 = v14[1];
  if (v21 >= v20)
  {
    v23 = (v21 - *v14) >> 4;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v25 = v20 - *v14;
    if (v25 >> 3 > v24)
      v24 = v25 >> 3;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    v70 = v14 + 2;
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v14 + 2), v26);
    v29 = &v27[16 * v23];
    *(_QWORD *)v29 = v17;
    *((_QWORD *)v29 + 1) = v18;
    v76 = 0;
    v77 = 0;
    v31 = *v14;
    v30 = v14[1];
    if (v30 == *v14)
    {
      v34 = v14[1];
      v32 = &v27[16 * v23];
    }
    else
    {
      v32 = &v27[16 * v23];
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v30 -= 16;
        *((_OWORD *)v32 - 1) = v33;
        v32 -= 16;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
      }
      while (v30 != v31);
      v34 = *v14;
      v30 = v14[1];
    }
    v22 = v29 + 16;
    *v14 = v32;
    __p = v34;
    v67 = v34;
    v14[1] = v29 + 16;
    v68 = v30;
    v35 = v14[2];
    v14[2] = &v27[16 * v28];
    v69 = v35;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v21 = v17;
    *((_QWORD *)v21 + 1) = v18;
    v22 = v21 + 16;
    v76 = 0;
    v77 = 0;
  }
  v14[1] = v22;
  v36 = v62;
  v62 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v61;
  if (v61)
  {
    v38 = (unint64_t *)&v61->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  *(_OWORD *)v56 = *(_OWORD *)a2;
  v57 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v40 = v65;
  if (v65)
  {
    v41 = (std::__shared_weak_count *)operator new();
    v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v41->__shared_owners_ = 0;
    v41->__shared_weak_owners_ = 0;
    v41[1].__vftable = (std::__shared_weak_count_vtbl *)v40;
  }
  else
  {
    v41 = 0;
  }
  v55 = v41;
  v65 = 0;
  if (v63)
  {
    v42 = (std::__shared_weak_count *)operator new();
    v43 = v63;
    v42->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v42->__shared_owners_ = 0;
    v42->__shared_weak_owners_ = 0;
    v42[1].__vftable = (std::__shared_weak_count_vtbl *)v43;
  }
  else
  {
    v42 = 0;
  }
  v54 = v42;
  v63 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v73, a3);
  }
  else
  {
    v73[0] = &unk_24BFE7440;
    v73[1] = ANEMachineIR::H2021::Validators::ValidateBaseActivation;
    v74 = v73;
  }
  v72 = 0;
  MIL::IROperator::Make();
  v44 = v72;
  if (v72 == v71)
  {
    v45 = 4;
    v44 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_50;
    v45 = 5;
  }
  (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_50:
  v46 = v74;
  if (v74 == v73)
  {
    v47 = 4;
    v46 = v73;
    goto LABEL_54;
  }
  if (v74)
  {
    v47 = 5;
LABEL_54:
    (*(void (**)(_QWORD *))(*v46 + 8 * v47))(v46);
  }
  if (v54)
  {
    v48 = (unint64_t *)&v54->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v55)
  {
    v50 = (unint64_t *)&v55->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v57) < 0)
    operator delete(v56[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v63, 0);
  result = v65;
  if (v65)
  {
    v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v65);
    return MEMORY[0x20BCFF140](v53, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068A8EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a25, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a30, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Linear::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2021::Validators::ValidateLinear;
  v7 = v6;
  ANEMachineIR::H2021::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_2068A90D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2021::NePiecewiseV2::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t *p_shared_owners;
  unint64_t v11;
  unsigned __int8 *v12;
  void *v13;
  uint64_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  void *v17;
  uint64_t *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  void *v21;
  uint64_t *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  void *v25;
  uint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  std::__shared_weak_count_vtbl *v32;
  uint64_t *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  void *v36;
  uint64_t *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  void *v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned __int8 *v43;
  void *v44;
  uint64_t *v45;
  unint64_t v46;
  unsigned __int8 *v47;
  void *v48;
  uint64_t *v49;
  unint64_t v50;
  unsigned __int8 *v51;
  void *v52;
  uint64_t *v53;
  unint64_t v54;
  unsigned __int8 *v55;
  void *v56;
  uint64_t *v57;
  unint64_t v58;
  unsigned __int8 *v59;
  void *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  char **v64;
  uint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  __int128 v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  char **v92;
  _QWORD *v93;
  uint64_t v94;
  MIL::Validation::TensorSymbolicShapeConstraints *v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  MIL::Validation::PossibleStringValuesConstraints *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  uint64_t i;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  std::__shared_weak_count_vtbl *result;
  uint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void *v142;
  char v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146;
  char v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  void *v154;
  char v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  char **v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  char **v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count *v178;
  _BYTE v179[8];
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  void *__p;
  void *v183;
  char *v184;
  _QWORD v185[3];
  _QWORD v186[3];
  _QWORD v187[3];
  uint64_t v188[3];
  uint64_t v189[3];
  uint64_t v190[3];
  uint64_t v191[3];
  uint64_t v192[3];
  uint64_t v193[3];
  uint64_t v194[3];
  uint64_t v195[3];
  uint64_t v196[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v198;
  void (__cdecl **v199)(std::__shared_weak_count *__hidden);
  _BYTE v200[24];
  _BYTE *v201;
  _QWORD v202[3];
  MIL::Validation::TensorSymbolicShapeConstraints *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;

  v207 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v181 = (std::__shared_weak_count_vtbl *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v183 = v8 + 1;
  v184 = (char *)(v8 + 1);
  v205 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*((void (**)(std::__shared_weak_count_vtbl *))v9->~__shared_weak_count + 1))(v9);
  if (v180)
  {
    p_shared_owners = &v180->__shared_owners_;
    do
      v11 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v11 - 1, (unint64_t *)p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v181, "x_sat_left", (uint64_t *)&__p);
  v13 = __p;
  __p = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  if (v178)
  {
    v14 = &v178->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v12 + 5) + 32))(*((_QWORD *)v12 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v181, "x_sat_right", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  if (v177)
  {
    v18 = &v177->__shared_owners_;
    do
      v19 = __ldaxr((unint64_t *)v18);
    while (__stlxr(v19 - 1, (unint64_t *)v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v181, "y_sat_left", (uint64_t *)&__p);
  v21 = __p;
  __p = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  if (v176)
  {
    v22 = &v176->__shared_owners_;
    do
      v23 = __ldaxr((unint64_t *)v22);
    while (__stlxr(v23 - 1, (unint64_t *)v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v181, "y_sat_right", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  if (v175)
  {
    v26 = &v175->__shared_owners_;
    do
      v27 = __ldaxr((unint64_t *)v26);
    while (__stlxr(v27 - 1, (unint64_t *)v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v28 = v181;
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = operator new(8uLL);
  __p = v30;
  *v30 = v29;
  v183 = v30 + 1;
  v184 = (char *)(v30 + 1);
  v205 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v28, "y_intercept", (uint64_t *)&Scalar);
  v32 = Scalar;
  Scalar = 0;
  if (v32)
    (*((void (**)(std::__shared_weak_count_vtbl *))v32->~__shared_weak_count + 1))(v32);
  if (v174)
  {
    v33 = &v174->__shared_owners_;
    do
      v34 = __ldaxr((unint64_t *)v33);
    while (__stlxr(v34 - 1, (unint64_t *)v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v181, "intercept_left", (uint64_t *)&__p);
  v36 = __p;
  __p = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  if (v173)
  {
    v37 = &v173->__shared_owners_;
    do
      v38 = __ldaxr((unint64_t *)v37);
    while (__stlxr(v38 - 1, (unint64_t *)v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v181, "intercept_right", (uint64_t *)&__p);
  v40 = __p;
  __p = 0;
  if (v40)
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  if (v172)
  {
    v41 = &v172->__shared_owners_;
    do
      v42 = __ldaxr((unint64_t *)v41);
    while (__stlxr(v42 - 1, (unint64_t *)v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v181, "slope_left", (uint64_t *)&__p);
  v44 = __p;
  __p = 0;
  if (v44)
    (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
  if (v171)
  {
    v45 = &v171->__shared_owners_;
    do
      v46 = __ldaxr((unint64_t *)v45);
    while (__stlxr(v46 - 1, (unint64_t *)v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 32))(*((_QWORD *)v43 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v181, "slope_right", (uint64_t *)&__p);
  v48 = __p;
  __p = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  if (v170)
  {
    v49 = &v170->__shared_owners_;
    do
      v50 = __ldaxr((unint64_t *)v49);
    while (__stlxr(v50 - 1, (unint64_t *)v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v181, "in_abs", (uint64_t *)&__p);
  v52 = __p;
  __p = 0;
  if (v52)
    (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
  if (v169)
  {
    v53 = &v169->__shared_owners_;
    do
      v54 = __ldaxr((unint64_t *)v53);
    while (__stlxr(v54 - 1, (unint64_t *)v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v181, "lut_mode", (uint64_t *)&__p);
  v56 = __p;
  __p = 0;
  if (v56)
    (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
  if (v168)
  {
    v57 = &v168->__shared_owners_;
    do
      v58 = __ldaxr((unint64_t *)v57);
    while (__stlxr(v58 - 1, (unint64_t *)v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 32))(*((_QWORD *)v55 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v181, "sign_mode", (uint64_t *)&__p);
  v60 = __p;
  __p = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  if (v167)
  {
    v61 = &v167->__shared_owners_;
    do
      v62 = __ldaxr((unint64_t *)v61);
    while (__stlxr(v62 - 1, (unint64_t *)v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  v166 = 0;
  v63 = operator new();
  *(_QWORD *)v63 = 0;
  *(_QWORD *)(v63 + 8) = 0;
  *(_QWORD *)(v63 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, (void **)v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v166, 1uLL);
  v64 = v166;
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v66;
  v66->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v65;
  v198 = (std::__shared_weak_count_vtbl *)&v66->~__shared_weak_count_0;
  v199 = &v66->~__shared_weak_count_0;
  v204 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v67 = v165;
  v205 = v165;
  if (v165)
  {
    v68 = (_QWORD *)operator new();
    v69 = v165;
    *v68 = &unk_24BFE7320;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v69;
  }
  else
  {
    v68 = 0;
  }
  v206 = v68;
  v165 = 0;
  v70 = v64[2];
  v71 = v64[1];
  if (v71 >= v70)
  {
    v73 = (v71 - *v64) >> 4;
    v74 = v73 + 1;
    if ((unint64_t)(v73 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v75 = v70 - *v64;
    if (v75 >> 3 > v74)
      v74 = v75 >> 3;
    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0)
      v76 = 0xFFFFFFFFFFFFFFFLL;
    else
      v76 = v74;
    v185[1] = v64 + 2;
    v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v64 + 2), v76);
    v79 = &v77[16 * v73];
    *(_QWORD *)v79 = v67;
    *((_QWORD *)v79 + 1) = v68;
    v205 = 0;
    v206 = 0;
    v81 = *v64;
    v80 = v64[1];
    if (v80 == *v64)
    {
      v84 = v64[1];
      v82 = &v77[16 * v73];
    }
    else
    {
      v82 = &v77[16 * v73];
      do
      {
        v83 = *((_OWORD *)v80 - 1);
        v80 -= 16;
        *((_OWORD *)v82 - 1) = v83;
        v82 -= 16;
        *(_QWORD *)v80 = 0;
        *((_QWORD *)v80 + 1) = 0;
      }
      while (v80 != v81);
      v84 = *v64;
      v80 = v64[1];
    }
    v72 = v79 + 16;
    *v64 = v82;
    __p = v84;
    v183 = v84;
    v64[1] = v79 + 16;
    v184 = v80;
    v85 = v64[2];
    v64[2] = &v77[16 * v78];
    v185[0] = v85;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v71 = v67;
    *((_QWORD *)v71 + 1) = v68;
    v72 = v71 + 16;
    v205 = 0;
    v206 = 0;
  }
  v64[1] = v72;
  v86 = v165;
  v165 = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  if (v164)
  {
    v87 = &v164->__shared_owners_;
    do
      v88 = __ldaxr((unint64_t *)v87);
    while (__stlxr(v88 - 1, (unint64_t *)v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  if (Scalar)
  {
    v198 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v162 = *(_OWORD *)a2;
  v163 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v89 = v181;
  v160 = v181;
  if (v181)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v89;
  }
  else
  {
    v90 = 0;
  }
  v161 = v90;
  v181 = 0;
  v158 = v166;
  if (v166)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v166;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v159 = v91;
  v166 = 0;
  v202[0] = &unk_24BFE7440;
  v202[1] = ANEMachineIR::H2021::Validators::ValidateNePiecewiseV2;
  v203 = (MIL::Validation::TensorSymbolicShapeConstraints *)v202;
  v201 = 0;
  MIL::IROperator::Make();
  v93 = v201;
  if (v201 == v200)
  {
    v94 = 4;
    v93 = v200;
  }
  else
  {
    if (!v201)
      goto LABEL_133;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_133:
  v95 = v203;
  if (v203 == (MIL::Validation::TensorSymbolicShapeConstraints *)v202)
  {
    v96 = 4;
    v95 = (MIL::Validation::TensorSymbolicShapeConstraints *)v202;
    goto LABEL_137;
  }
  if (v203)
  {
    v96 = 5;
LABEL_137:
    v95 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v95 + 8 * v96))();
  }
  if (v159)
  {
    v97 = &v159->__shared_owners_;
    do
      v98 = __ldaxr((unint64_t *)v97);
    while (__stlxr(v98 - 1, (unint64_t *)v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  if (v161)
  {
    v99 = &v161->__shared_owners_;
    do
      v100 = __ldaxr((unint64_t *)v99);
    while (__stlxr(v100 - 1, (unint64_t *)v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  if (SHIBYTE(v163) < 0)
    operator delete(v162[0]);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v95);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(&v154, "y_intercept");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v156 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v157 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "LUT_SIZE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v101 + 24))(v101, &v156, 0, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v104 = v157;
  if (v157)
  {
    v105 = (unint64_t *)&v157->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v155 < 0)
    operator delete(v154);
  v108 = *a3;
  v150 = __p;
  if (__p)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)__p;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v151 = v109;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v108 + 56))(v108, &v150);
  v111 = v151;
  if (v151)
  {
    v112 = (unint64_t *)&v151->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = (MIL::Validation::PossibleStringValuesConstraints *)__p;
  __p = 0;
  if (v114)
    v114 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v114 + 8))(v114);
  MIL::Validation::PossibleStringValuesConstraints::Make(v114);
  v115 = v205;
  std::string::basic_string[abi:ne180100]<0>(&v146, "lut_mode");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v148 = v165;
  if (v165)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = v165;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = (std::__shared_weak_count_vtbl *)v117;
  }
  else
  {
    v116 = 0;
  }
  v149 = v116;
  v165 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "cos");
  std::string::basic_string[abi:ne180100]<0>(v185, "exp2");
  std::string::basic_string[abi:ne180100]<0>(v186, "frac");
  std::string::basic_string[abi:ne180100]<0>(v187, "int");
  std::string::basic_string[abi:ne180100]<0>(v188, "inv");
  std::string::basic_string[abi:ne180100]<0>(v189, "left_lut");
  std::string::basic_string[abi:ne180100]<0>(v190, "log2");
  std::string::basic_string[abi:ne180100]<0>(v191, "lut");
  std::string::basic_string[abi:ne180100]<0>(v192, "rsqrt");
  std::string::basic_string[abi:ne180100]<0>(v193, "sin");
  std::string::basic_string[abi:ne180100]<0>(v194, "split_lut");
  std::string::basic_string[abi:ne180100]<0>(v195, "sqr");
  std::string::basic_string[abi:ne180100]<0>(v196, "sqrt");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 13);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v115 + 24))(v115, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  v118 = 312;
  do
  {
    if (*((char *)&__p + v118 - 1) < 0)
      operator delete(*(void **)&v179[v118]);
    v118 -= 24;
  }
  while (v118);
  v119 = v149;
  if (v149)
  {
    v120 = (unint64_t *)&v149->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v165;
  v165 = 0;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  if (v147 < 0)
    operator delete(v146);
  v123 = v205;
  std::string::basic_string[abi:ne180100]<0>(&v142, "sign_mode");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v144 = v165;
  if (v165)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = v165;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = (std::__shared_weak_count_vtbl *)v125;
  }
  else
  {
    v124 = 0;
  }
  v145 = v124;
  v165 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "copy");
  std::string::basic_string[abi:ne180100]<0>(v185, "invert");
  std::string::basic_string[abi:ne180100]<0>(v186, "negzero");
  std::string::basic_string[abi:ne180100]<0>(v187, "pass");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 4);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v123 + 24))(v123, &v144, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v187[i + 2]) < 0)
      operator delete((void *)v187[i]);
  }
  v127 = v145;
  if (v145)
  {
    v128 = (unint64_t *)&v145->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v165;
  v165 = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  if (v143 < 0)
    operator delete(v142);
  v131 = *a3;
  v140 = v205;
  if (v205)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = v205;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = (std::__shared_weak_count_vtbl *)v133;
  }
  else
  {
    v132 = 0;
  }
  v141 = v132;
  v205 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v131 + 56))(v131, &v140);
  v134 = v141;
  if (v141)
  {
    v135 = (unint64_t *)&v141->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v205;
  v205 = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, 0);
  result = v181;
  if (v181)
  {
    v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v181);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v139, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068AA538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;

  v71 = *(_QWORD *)(v69 - 88);
  *(_QWORD *)(v69 - 88) = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = *v68;
  *v68 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a41, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Relu::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2021::Validators::ValidateRelu;
  v7 = v6;
  ANEMachineIR::H2021::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_2068AAC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2021::ScaledActivation::Make(MIL::IRUnknownDimension *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t *p_shared_owners;
  unint64_t v11;
  unsigned __int8 *v12;
  void *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  char **v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count_vtbl *result;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  void *v55[2];
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  char **v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count_vtbl *v62;
  void *__p;
  void *v64;
  char *v65;
  char *v66;
  char **v67;
  _BYTE v68[24];
  _BYTE *v69;
  _QWORD v70[3];
  _QWORD *v71;
  void *Scalar;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v62 = (std::__shared_weak_count_vtbl *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v64 = v8 + 1;
  v65 = (char *)(v8 + 1);
  v76 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  if (v61)
  {
    p_shared_owners = &v61->__shared_owners_;
    do
      v11 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v11 - 1, (unint64_t *)p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v62, "scale", (uint64_t *)&__p);
  v13 = __p;
  __p = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  if (v60)
  {
    v14 = &v60->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v12 + 5) + 32))(*((_QWORD *)v12 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v12 + 5) + 48))(*((_QWORD *)v12 + 5), 1);
  v59 = 0;
  v16 = operator new();
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v59, (void **)v16);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v59, 1uLL);
  v17 = v59;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = operator new(8uLL);
  Scalar = v19;
  *v19 = v18;
  v73 = v19 + 1;
  v74 = v19 + 1;
  v75 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v76 = v58;
  if (v58)
  {
    v20 = (_QWORD *)operator new();
    *v20 = &unk_24BFE7320;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v58;
  }
  else
  {
    v20 = 0;
  }
  v77 = v20;
  v21 = v17[2];
  v22 = v17[1];
  if (v22 >= v21)
  {
    v24 = (v22 - *v17) >> 4;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v26 = v21 - *v17;
    if (v26 >> 3 > v25)
      v25 = v26 >> 3;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
      v27 = 0xFFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    v67 = v17 + 2;
    v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v17 + 2), v27);
    v30 = (uint64_t *)&v28[16 * v24];
    *v30 = v58;
    v30[1] = (uint64_t)v20;
    v76 = 0;
    v77 = 0;
    v32 = *v17;
    v31 = v17[1];
    if (v31 == *v17)
    {
      v35 = v17[1];
      v33 = &v28[16 * v24];
    }
    else
    {
      v33 = &v28[16 * v24];
      do
      {
        v34 = *((_OWORD *)v31 - 1);
        v31 -= 16;
        *((_OWORD *)v33 - 1) = v34;
        v33 -= 16;
        *(_QWORD *)v31 = 0;
        *((_QWORD *)v31 + 1) = 0;
      }
      while (v31 != v32);
      v35 = *v17;
      v31 = v17[1];
    }
    v23 = (char *)(v30 + 2);
    *v17 = v33;
    __p = v35;
    v64 = v35;
    v17[1] = (char *)(v30 + 2);
    v65 = v31;
    v36 = v17[2];
    v17[2] = &v28[16 * v29];
    v66 = v36;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v22 = v58;
    *((_QWORD *)v22 + 1) = v20;
    v23 = v22 + 16;
    v76 = 0;
    v77 = 0;
  }
  v17[1] = v23;
  if (v57)
  {
    v37 = (unint64_t *)&v57->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)())v57->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (Scalar)
  {
    v73 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v55 = *(_OWORD *)a2;
  v56 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v39 = v62;
  if (v62)
  {
    v40 = (std::__shared_weak_count *)operator new();
    v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v40->__shared_owners_ = 0;
    v40->__shared_weak_owners_ = 0;
    v40[1].__vftable = v39;
  }
  else
  {
    v40 = 0;
  }
  v54 = v40;
  v62 = 0;
  if (v59)
  {
    v41 = (std::__shared_weak_count *)operator new();
    v42 = v59;
    v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v41->__shared_owners_ = 0;
    v41->__shared_weak_owners_ = 0;
    v41[1].__vftable = (std::__shared_weak_count_vtbl *)v42;
  }
  else
  {
    v41 = 0;
  }
  v53 = v41;
  v59 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v70, a3);
  }
  else
  {
    v70[0] = &unk_24BFE7440;
    v70[1] = ANEMachineIR::H2021::Validators::ValidateScaledActivation;
    v71 = v70;
  }
  v69 = 0;
  MIL::IROperator::Make();
  v43 = v69;
  if (v69 == v68)
  {
    v44 = 4;
    v43 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_55;
    v44 = 5;
  }
  (*(void (**)(_QWORD *))(*v43 + 8 * v44))(v43);
LABEL_55:
  v45 = v71;
  if (v71 == v70)
  {
    v46 = 4;
    v45 = v70;
    goto LABEL_59;
  }
  if (v71)
  {
    v46 = 5;
LABEL_59:
    (*(void (**)(_QWORD *))(*v45 + 8 * v46))(v45);
  }
  if (v53)
  {
    v47 = (unint64_t *)&v53->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v54)
  {
    v49 = (unint64_t *)&v54->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (SHIBYTE(v56) < 0)
    operator delete(v55[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v59, 0);
  result = v62;
  if (v62)
  {
    v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v62);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v52, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068AB2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void **a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a22, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a29, 0);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2021::Lrelu::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t *p_shared_owners;
  unint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  uint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  char *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  char **v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count_vtbl *result;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  void *v57[2];
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  char **v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count_vtbl *v65;
  void *__p;
  void *v67;
  char *v68;
  char *v69;
  char **v70;
  _BYTE v71[24];
  _BYTE *v72;
  _QWORD v73[3];
  _QWORD *v74;
  void *Scalar;
  void *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  v65 = (std::__shared_weak_count_vtbl *)v4;
  v5 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v6 = operator new(8uLL);
  __p = v6;
  *v6 = v5;
  v67 = v6 + 1;
  v68 = (char *)(v6 + 1);
  v79 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v4, "x", (uint64_t *)&Scalar);
  v7 = Scalar;
  Scalar = 0;
  if (v7)
    (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
  if (v64)
  {
    p_shared_owners = &v64->__shared_owners_;
    do
      v9 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v9 - 1, (unint64_t *)p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (__p)
  {
    v67 = __p;
    operator delete(__p);
  }
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v65, "scale", (uint64_t *)&__p);
  v11 = __p;
  __p = 0;
  if (v11)
    (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
  if (v63)
  {
    v12 = &v63->__shared_owners_;
    do
      v13 = __ldaxr((unint64_t *)v12);
    while (__stlxr(v13 - 1, (unint64_t *)v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v10 + 5) + 32))(*((_QWORD *)v10 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v10 + 5) + 48))(*((_QWORD *)v10 + 5), 1);
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v65, "alpha", (uint64_t *)&__p);
  v15 = __p;
  __p = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  if (v62)
  {
    v16 = &v62->__shared_owners_;
    do
      v17 = __ldaxr((unint64_t *)v16);
    while (__stlxr(v17 - 1, (unint64_t *)v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 32))(*((_QWORD *)v14 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 48))(*((_QWORD *)v14 + 5), 1);
  v61 = 0;
  v18 = operator new();
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v61, (void **)v18);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v61, 1uLL);
  v19 = v61;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  Scalar = v21;
  *v21 = v20;
  v76 = v21 + 1;
  v77 = v21 + 1;
  v78 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v79 = v60;
  if (v60)
  {
    v22 = (_QWORD *)operator new();
    *v22 = &unk_24BFE7320;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v60;
  }
  else
  {
    v22 = 0;
  }
  v80 = v22;
  v23 = v19[2];
  v24 = v19[1];
  if (v24 >= v23)
  {
    v26 = (v24 - *v19) >> 4;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v28 = v23 - *v19;
    if (v28 >> 3 > v27)
      v27 = v28 >> 3;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
      v29 = 0xFFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    v70 = v19 + 2;
    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v19 + 2), v29);
    v32 = (uint64_t *)&v30[16 * v26];
    *v32 = v60;
    v32[1] = (uint64_t)v22;
    v79 = 0;
    v80 = 0;
    v34 = *v19;
    v33 = v19[1];
    if (v33 == *v19)
    {
      v37 = v19[1];
      v35 = &v30[16 * v26];
    }
    else
    {
      v35 = &v30[16 * v26];
      do
      {
        v36 = *((_OWORD *)v33 - 1);
        v33 -= 16;
        *((_OWORD *)v35 - 1) = v36;
        v35 -= 16;
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = 0;
      }
      while (v33 != v34);
      v37 = *v19;
      v33 = v19[1];
    }
    v25 = (char *)(v32 + 2);
    *v19 = v35;
    __p = v37;
    v67 = v37;
    v19[1] = (char *)(v32 + 2);
    v68 = v33;
    v38 = v19[2];
    v19[2] = &v30[16 * v31];
    v69 = v38;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v24 = v60;
    *((_QWORD *)v24 + 1) = v22;
    v25 = v24 + 16;
    v79 = 0;
    v80 = 0;
  }
  v19[1] = v25;
  if (v59)
  {
    v39 = (unint64_t *)&v59->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)())v59->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (Scalar)
  {
    v76 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v57 = *(_OWORD *)a2;
  v58 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v41 = v65;
  if (v65)
  {
    v42 = (std::__shared_weak_count *)operator new();
    v42->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v42->__shared_owners_ = 0;
    v42->__shared_weak_owners_ = 0;
    v42[1].__vftable = v41;
  }
  else
  {
    v42 = 0;
  }
  v56 = v42;
  v65 = 0;
  if (v61)
  {
    v43 = (std::__shared_weak_count *)operator new();
    v44 = v61;
    v43->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v43->__shared_owners_ = 0;
    v43->__shared_weak_owners_ = 0;
    v43[1].__vftable = (std::__shared_weak_count_vtbl *)v44;
  }
  else
  {
    v43 = 0;
  }
  v55 = v43;
  v61 = 0;
  v73[0] = &unk_24BFE7440;
  v73[1] = ANEMachineIR::H2021::Validators::ValidateLrelu;
  v74 = v73;
  v72 = 0;
  MIL::IROperator::Make();
  v45 = v72;
  if (v72 == v71)
  {
    v46 = 4;
    v45 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_59;
    v46 = 5;
  }
  (*(void (**)(_QWORD *))(*v45 + 8 * v46))(v45);
LABEL_59:
  v47 = v74;
  if (v74 == v73)
  {
    v48 = 4;
    v47 = v73;
    goto LABEL_63;
  }
  if (v74)
  {
    v48 = 5;
LABEL_63:
    (*(void (**)(_QWORD *))(*v47 + 8 * v48))(v47);
  }
  if (v55)
  {
    v49 = (unint64_t *)&v55->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v56)
  {
    v51 = (unint64_t *)&v56->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (SHIBYTE(v58) < 0)
    operator delete(v57[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v61, 0);
  result = v65;
  if (v65)
  {
    v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v65);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v54, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068ABB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void **a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a22, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a31, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Sigmoid::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2021::Validators::ValidateSigmoid;
  v7 = v6;
  ANEMachineIR::H2021::ScaledActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_2068ABDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Sqrt::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2021::Validators::ValidateSqrt;
  v7 = v6;
  ANEMachineIR::H2021::ScaledActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_2068ABF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Tanh::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2021::Validators::ValidateTanh;
  v7 = v6;
  ANEMachineIR::H2021::ScaledActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_2068AC02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::BaseNePool::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  unsigned __int8 *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void **v35;
  unsigned __int8 *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void **v43;
  unsigned __int8 *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void **v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char **v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  void **v86;
  char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  char **v95;
  _QWORD *v96;
  uint64_t v97;
  MIL::Validation::TensorDTypeConstraints *v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  void **v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void **v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  MIL::Validation::TensorRankValueConstraints *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  MIL::Validation::TensorSymbolicShapeConstraints *v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  void **v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count_vtbl *v152;
  void **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count_vtbl *v159;
  void **v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count_vtbl *v166;
  void **v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count_vtbl *v173;
  void **v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count_vtbl *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  void **v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void **v187;
  uint64_t result;
  uint64_t v189;
  void **v190;
  std::__shared_weak_count *v191;
  void *v192[2];
  char v193;
  void *v194;
  char v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  void *v198[2];
  char v199;
  void *v200;
  char v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  char v205;
  void *v206;
  char v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  char v211;
  void *v212;
  char v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  void *v218;
  char v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  void *v222[2];
  char v223;
  void *v224;
  char v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  void **v228;
  std::__shared_weak_count *v229;
  void *v230;
  char v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  void **v234;
  std::__shared_weak_count *v235;
  void *v236[2];
  char v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  void *v240[2];
  char v241;
  void *v242;
  char v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  char **v246;
  std::__shared_weak_count *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  void *v250[2];
  uint64_t v251;
  void *v252;
  void *v253;
  _QWORD *v254;
  std::__shared_weak_count *v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  char **v259;
  std::__shared_weak_count *v260;
  std::__shared_weak_count *v261;
  std::__shared_weak_count *v262;
  std::__shared_weak_count *v263;
  std::__shared_weak_count *v264;
  void *__p;
  void *v266;
  _QWORD *v267;
  std::__shared_weak_count *v268;
  _QWORD *v269;
  _BYTE v270[24];
  _BYTE *v271;
  _QWORD v272[3];
  MIL::Validation::TensorDTypeConstraints *v273;
  void *v274;
  void *v275;
  _QWORD *v276;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v279;
  void **v280;
  void **v281;
  uint64_t v282;
  char *v283;
  char **v284;
  uint64_t v285;

  v285 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v269 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v12->__get_deleter;
  v279 = (uint64_t)&v12->__get_deleter;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  Scalar = v12;
  v280 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x18uLL);
  v275 = v16 + 3;
  v276 = v16 + 3;
  *v16 = v13;
  v16[1] = v14;
  v16[2] = v15;
  v274 = v16;
  v281 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = operator new(0x18uLL);
  v267 = v20 + 3;
  *v20 = v17;
  v20[1] = v18;
  v20[2] = v19;
  __p = v20;
  v266 = v20 + 3;
  v282 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v252);
  v21 = v252;
  v252 = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = v268;
  if (v268)
  {
    p_shared_owners = (unint64_t *)&v268->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v266 = __p;
    operator delete(__p);
  }
  if (v274)
  {
    v275 = v274;
    operator delete(v274);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v25 = v269;
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (void **)operator new(8uLL);
  v280 = v27;
  *v27 = (void *)v26;
  v281 = v27 + 1;
  v282 = (uint64_t)(v27 + 1);
  v274 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v25, "kernel_sizes", (uint64_t *)&Scalar);
  v29 = Scalar;
  Scalar = 0;
  if (v29)
    (*((void (**)(std::__shared_weak_count_vtbl *))v29->~__shared_weak_count + 1))(v29);
  v30 = v264;
  if (v264)
  {
    v31 = (unint64_t *)&v264->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v33 = v269;
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = (void **)operator new(8uLL);
  v280 = v35;
  *v35 = (void *)v34;
  v281 = v35 + 1;
  v282 = (uint64_t)(v35 + 1);
  v274 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v33, "strides", (uint64_t *)&Scalar);
  v37 = Scalar;
  Scalar = 0;
  if (v37)
    (*((void (**)(std::__shared_weak_count_vtbl *))v37->~__shared_weak_count + 1))(v37);
  v38 = v263;
  if (v263)
  {
    v39 = (unint64_t *)&v263->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v269;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (void **)operator new(8uLL);
  v280 = v43;
  *v43 = (void *)v42;
  v281 = v43 + 1;
  v282 = (uint64_t)(v43 + 1);
  v274 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v41, "custom_pads", (uint64_t *)&Scalar);
  v45 = Scalar;
  Scalar = 0;
  if (v45)
    (*((void (**)(std::__shared_weak_count_vtbl *))v45->~__shared_weak_count + 1))(v45);
  v46 = v262;
  if (v262)
  {
    v47 = (unint64_t *)&v262->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v269;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v49, "post_right_shift", (uint64_t *)&v280);
  v51 = v280;
  v280 = 0;
  if (v51)
    (*((void (**)(void **))*v51 + 1))(v51);
  v52 = v261;
  if (v261)
  {
    v53 = (unint64_t *)&v261->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 48))(*((_QWORD *)v50 + 5), 1);
  v55 = v269;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v55, "post_scale", (uint64_t *)&v280);
  v57 = v280;
  v280 = 0;
  if (v57)
    (*((void (**)(void **))*v57 + 1))(v57);
  v58 = v260;
  if (v260)
  {
    v59 = (unint64_t *)&v260->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 48))(*((_QWORD *)v56 + 5), 1);
  v259 = 0;
  v61 = operator new();
  *(_QWORD *)v61 = 0;
  *(_QWORD *)(v61 + 8) = 0;
  *(_QWORD *)(v61 + 16) = 0;
  v280 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v259, (void **)v61);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v280, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v259, 1uLL);
  v62 = v259;
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v274 = v64;
  *v64 = v63;
  v275 = v64 + 1;
  v276 = v64 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  __p = v66;
  *v66 = v65;
  v267 = v66 + 1;
  v266 = v66 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v252 = v68;
  *v68 = v67;
  v254 = v68 + 1;
  v253 = v68 + 1;
  v279 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v69 = v256;
  v257 = v256;
  if (v256)
  {
    v70 = (_QWORD *)operator new();
    v71 = v256;
    *v70 = &unk_24BFE7320;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  v258 = v70;
  v256 = 0;
  v72 = v62[2];
  v73 = v62[1];
  if (v73 >= v72)
  {
    v75 = (v73 - *v62) >> 4;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v77 = v72 - *v62;
    if (v77 >> 3 > v76)
      v76 = v77 >> 3;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
      v78 = 0xFFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    v284 = v62 + 2;
    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v62 + 2), v78);
    v81 = &v79[16 * v75];
    *(_QWORD *)v81 = v69;
    *((_QWORD *)v81 + 1) = v70;
    v258 = 0;
    v257 = 0;
    v83 = *v62;
    v82 = v62[1];
    if (v82 == *v62)
    {
      v86 = (void **)v62[1];
      v84 = &v79[16 * v75];
    }
    else
    {
      v84 = &v79[16 * v75];
      do
      {
        v85 = *((_OWORD *)v82 - 1);
        v82 -= 16;
        *((_OWORD *)v84 - 1) = v85;
        v84 -= 16;
        *(_QWORD *)v82 = 0;
        *((_QWORD *)v82 + 1) = 0;
      }
      while (v82 != v83);
      v86 = (void **)*v62;
      v82 = v62[1];
    }
    v74 = v81 + 16;
    *v62 = v84;
    v280 = v86;
    v281 = v86;
    v62[1] = v81 + 16;
    v282 = (uint64_t)v82;
    v87 = v62[2];
    v62[2] = &v79[16 * v80];
    v283 = v87;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v280);
  }
  else
  {
    *(_QWORD *)v73 = v69;
    *((_QWORD *)v73 + 1) = v70;
    v74 = v73 + 16;
    v258 = 0;
    v257 = 0;
  }
  v62[1] = v74;
  v88 = v256;
  v256 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v255;
  if (v255)
  {
    v90 = (unint64_t *)&v255->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (__p)
  {
    v266 = __p;
    operator delete(__p);
  }
  if (v274)
  {
    v275 = v274;
    operator delete(v274);
  }
  *(_OWORD *)v250 = *(_OWORD *)a2;
  v251 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v92 = (uint64_t)v269;
  v248 = (uint64_t)v269;
  if (v269)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v93 = 0;
  }
  v249 = v93;
  v269 = 0;
  v246 = v259;
  if (v259)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = v259;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = (std::__shared_weak_count_vtbl *)v95;
  }
  else
  {
    v94 = 0;
  }
  v247 = v94;
  v259 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v272, a3);
  }
  else
  {
    v272[0] = &unk_24BFE7440;
    v272[1] = ANEMachineIR::H2021::Validators::ValidateBaseNePool;
    v273 = (MIL::Validation::TensorDTypeConstraints *)v272;
  }
  v271 = 0;
  MIL::IROperator::Make();
  v96 = v271;
  if (v271 == v270)
  {
    v97 = 4;
    v96 = v270;
  }
  else
  {
    if (!v271)
      goto LABEL_99;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_99:
  v98 = v273;
  if (v273 == (MIL::Validation::TensorDTypeConstraints *)v272)
  {
    v99 = 4;
    v98 = (MIL::Validation::TensorDTypeConstraints *)v272;
    goto LABEL_103;
  }
  if (v273)
  {
    v99 = 5;
LABEL_103:
    v98 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v98 + 8 * v99))();
  }
  if (v247)
  {
    v100 = &v247->__shared_owners_;
    do
      v101 = __ldaxr((unint64_t *)v100);
    while (__stlxr(v101 - 1, (unint64_t *)v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  if (v249)
  {
    v102 = &v249->__shared_owners_;
    do
      v103 = __ldaxr((unint64_t *)v102);
    while (__stlxr(v103 - 1, (unint64_t *)v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  if (SHIBYTE(v251) < 0)
    operator delete(v250[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v98);
  v104 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v242, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v244 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v245 = v105;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v240, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v104 + 3))(v104, &v244, v240);
  if (v241 < 0)
    operator delete(v240[0]);
  v107 = v245;
  if (v245)
  {
    v108 = (unint64_t *)&v245->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  if (v243 < 0)
    operator delete(v242);
  v111 = v280;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v238 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v239 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v236, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 3))(v111, &v238, v236);
  if (v237 < 0)
    operator delete(v236[0]);
  v114 = v239;
  if (v239)
  {
    v115 = (unint64_t *)&v239->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  v118 = *a4;
  v234 = v280;
  if (v280)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = v280;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = (std::__shared_weak_count_vtbl *)v120;
  }
  else
  {
    v119 = 0;
  }
  v235 = v119;
  v280 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v118 + 56))(v118, &v234);
  v121 = v235;
  if (v235)
  {
    v122 = (unint64_t *)&v235->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (MIL::Validation::TensorRankValueConstraints *)v280;
  v280 = 0;
  if (v124)
    v124 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v124 + 8))(v124);
  MIL::Validation::TensorRankValueConstraints::Make(v124);
  v125 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v230, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v232 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v233 = v126;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v125 + 4))(v125, &v232, 3, 5);
  v128 = v233;
  if (v233)
  {
    v129 = (unint64_t *)&v233->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  if (v231 < 0)
    operator delete(v230);
  v132 = *a4;
  v228 = v280;
  if (v280)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v280;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v229 = v133;
  v280 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v228);
  v135 = v229;
  if (v229)
  {
    v136 = (unint64_t *)&v229->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = (MIL::Validation::TensorSymbolicShapeConstraints *)v280;
  v280 = 0;
  if (v138)
    v138 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v138 + 8))(v138);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v138);
  v139 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v224, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v226 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v227 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v222, "Batch");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v139 + 3))(v139, &v226, 0, v222);
  if (v223 < 0)
    operator delete(v222[0]);
  v142 = v227;
  if (v227)
  {
    v143 = (unint64_t *)&v227->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  if (v225 < 0)
    operator delete(v224);
  v146 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v218, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v220 = Scalar;
  if (Scalar)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = Scalar;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v221 = v147;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v216, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))*v146 + 4))(v146, &v220, 1, -2, v216);
  if (v217 < 0)
    operator delete(v216[0]);
  v149 = v221;
  if (v221)
  {
    v150 = (unint64_t *)&v221->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = Scalar;
  Scalar = 0;
  if (v152)
    (*((void (**)(std::__shared_weak_count_vtbl *))v152->~__shared_weak_count + 1))(v152);
  if (v219 < 0)
    operator delete(v218);
  v153 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v212, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v214 = Scalar;
  if (Scalar)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = Scalar;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v215 = v154;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v210, "Cin");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v153 + 3))(v153, &v214, -1, v210);
  if (v211 < 0)
    operator delete(v210[0]);
  v156 = v215;
  if (v215)
  {
    v157 = (unint64_t *)&v215->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = Scalar;
  Scalar = 0;
  if (v159)
    (*((void (**)(std::__shared_weak_count_vtbl *))v159->~__shared_weak_count + 1))(v159);
  if (v213 < 0)
    operator delete(v212);
  v160 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v206, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v208 = Scalar;
  if (Scalar)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = Scalar;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v162;
  }
  else
  {
    v161 = 0;
  }
  v209 = v161;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v204, "NUM_SPATIAL_DIMS_PLUS_ONE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v160 + 3))(v160, &v208, 0, v204);
  if (v205 < 0)
    operator delete(v204[0]);
  v163 = v209;
  if (v209)
  {
    v164 = (unint64_t *)&v209->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = Scalar;
  Scalar = 0;
  if (v166)
    (*((void (**)(std::__shared_weak_count_vtbl *))v166->~__shared_weak_count + 1))(v166);
  if (v207 < 0)
    operator delete(v206);
  v167 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v200, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v202 = Scalar;
  if (Scalar)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = Scalar;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v203 = v168;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v198, "NUM_SPATIAL_DIMS_PLUS_ONE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v167 + 3))(v167, &v202, 0, v198);
  if (v199 < 0)
    operator delete(v198[0]);
  v170 = v203;
  if (v203)
  {
    v171 = (unint64_t *)&v203->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = Scalar;
  Scalar = 0;
  if (v173)
    (*((void (**)(std::__shared_weak_count_vtbl *))v173->~__shared_weak_count + 1))(v173);
  if (v201 < 0)
    operator delete(v200);
  v174 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v194, "custom_pads");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v196 = Scalar;
  if (Scalar)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = Scalar;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v197 = v175;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v192, "TWICE_NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v174 + 3))(v174, &v196, 0, v192);
  if (v193 < 0)
    operator delete(v192[0]);
  v177 = v197;
  if (v197)
  {
    v178 = (unint64_t *)&v197->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = Scalar;
  Scalar = 0;
  if (v180)
    (*((void (**)(std::__shared_weak_count_vtbl *))v180->~__shared_weak_count + 1))(v180);
  if (v195 < 0)
    operator delete(v194);
  v181 = *a4;
  v190 = v280;
  if (v280)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = v280;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = (std::__shared_weak_count_vtbl *)v183;
  }
  else
  {
    v182 = 0;
  }
  v191 = v182;
  v280 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v181 + 56))(v181, &v190);
  v184 = v191;
  if (v191)
  {
    v185 = (unint64_t *)&v191->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = v280;
  v280 = 0;
  if (v187)
    (*((void (**)(void **))*v187 + 1))(v187);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v259, 0);
  result = (uint64_t)v269;
  if (v269)
  {
    v189 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v269);
    return MEMORY[0x20BCFF140](v189, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068AD744(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::NeAvgPool::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void **v41;
  unsigned __int8 *v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  void **v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  unsigned __int8 *v66;
  void **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unsigned __int8 *v72;
  void **v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  unsigned __int8 *v78;
  void **v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  unsigned __int8 *v84;
  void **v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  char **v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  __int128 v113;
  void **v114;
  char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  char **v123;
  _QWORD *v124;
  uint64_t v125;
  MIL::Validation::TensorDTypeConstraints *v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  void **v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  void **v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  MIL::Validation::TensorRankValueConstraints *v152;
  void **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count_vtbl *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  void **v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  MIL::Validation::TensorSymbolicShapeConstraints *v166;
  void **v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count_vtbl *v173;
  void **v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count_vtbl *v180;
  void **v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count_vtbl *v187;
  void **v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count_vtbl *v194;
  void **v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count_vtbl *v201;
  void **v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count_vtbl *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  void **v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  void **v215;
  uint64_t result;
  uint64_t v217;
  void **v218;
  std::__shared_weak_count *v219;
  void *v220[2];
  char v221;
  void *v222;
  char v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  void *v226[2];
  char v227;
  void *v228;
  char v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  void *v232[2];
  char v233;
  void *v234;
  char v235;
  std::__shared_weak_count_vtbl *v236;
  std::__shared_weak_count *v237;
  void *v238[2];
  char v239;
  void *v240;
  char v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  char v245;
  void *v246;
  char v247;
  std::__shared_weak_count_vtbl *v248;
  std::__shared_weak_count *v249;
  void *v250[2];
  char v251;
  void *v252;
  char v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  void **v256;
  std::__shared_weak_count *v257;
  void *v258;
  char v259;
  std::__shared_weak_count_vtbl *v260;
  std::__shared_weak_count *v261;
  void **v262;
  std::__shared_weak_count *v263;
  void *v264[2];
  char v265;
  std::__shared_weak_count_vtbl *v266;
  std::__shared_weak_count *v267;
  void *v268[2];
  char v269;
  void *v270;
  char v271;
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  char **v274;
  std::__shared_weak_count *v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  void *v278[2];
  uint64_t v279;
  void *v280;
  void *v281;
  _QWORD *v282;
  std::__shared_weak_count *v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  char **v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count *v289;
  std::__shared_weak_count *v290;
  std::__shared_weak_count *v291;
  std::__shared_weak_count *v292;
  std::__shared_weak_count *v293;
  std::__shared_weak_count *v294;
  std::__shared_weak_count *v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count *v297;
  void *__p;
  void *v299;
  _QWORD *v300;
  std::__shared_weak_count *v301;
  _QWORD *v302;
  _BYTE v303[24];
  _BYTE *v304;
  _QWORD v305[3];
  MIL::Validation::TensorDTypeConstraints *v306;
  void *v307;
  void *v308;
  _QWORD *v309;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v312;
  void **v313;
  void **v314;
  uint64_t v315;
  char *v316;
  char **v317;
  uint64_t v318;

  v318 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v302 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v312 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v313 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v308 = v14 + 3;
  v309 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v307 = v14;
  v314 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v300 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v299 = v18 + 3;
  v315 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v280);
  v19 = v280;
  v280 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v301;
  if (v301)
  {
    p_shared_owners = (unint64_t *)&v301->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v299 = __p;
    operator delete(__p);
  }
  if (v307)
  {
    v308 = v307;
    operator delete(v307);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v302;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (void **)operator new(8uLL);
  v313 = v25;
  *v25 = (void *)v24;
  v314 = v25 + 1;
  v315 = (uint64_t)(v25 + 1);
  v307 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v23, "kernel_sizes", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = v297;
  if (v297)
  {
    v29 = (unint64_t *)&v297->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v313)
  {
    v314 = v313;
    operator delete(v313);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v31 = v302;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (void **)operator new(8uLL);
  v313 = v33;
  *v33 = (void *)v32;
  v314 = v33 + 1;
  v315 = (uint64_t)(v33 + 1);
  v307 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v31, "strides", (uint64_t *)&Scalar);
  v35 = Scalar;
  Scalar = 0;
  if (v35)
    (*((void (**)(std::__shared_weak_count_vtbl *))v35->~__shared_weak_count + 1))(v35);
  v36 = v296;
  if (v296)
  {
    v37 = (unint64_t *)&v296->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v313)
  {
    v314 = v313;
    operator delete(v313);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v39 = v302;
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = (void **)operator new(8uLL);
  v313 = v41;
  *v41 = (void *)v40;
  v314 = v41 + 1;
  v315 = (uint64_t)(v41 + 1);
  v307 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v39, "custom_pads", (uint64_t *)&Scalar);
  v43 = Scalar;
  Scalar = 0;
  if (v43)
    (*((void (**)(std::__shared_weak_count_vtbl *))v43->~__shared_weak_count + 1))(v43);
  v44 = v295;
  if (v295)
  {
    v45 = (unint64_t *)&v295->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v313)
  {
    v314 = v313;
    operator delete(v313);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v47 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v47, "post_right_shift", (uint64_t *)&v313);
  v49 = v313;
  v313 = 0;
  if (v49)
    (*((void (**)(void **))*v49 + 1))(v49);
  v50 = v294;
  if (v294)
  {
    v51 = (unint64_t *)&v294->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 48))(*((_QWORD *)v48 + 5), 1);
  v53 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v53, "post_scale", (uint64_t *)&v313);
  v55 = v313;
  v313 = 0;
  if (v55)
    (*((void (**)(void **))*v55 + 1))(v55);
  v56 = v293;
  if (v293)
  {
    v57 = (unint64_t *)&v293->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 48))(*((_QWORD *)v54 + 5), 1);
  v59 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v59, "bias", (uint64_t *)&v313);
  v61 = v313;
  v313 = 0;
  if (v61)
    (*((void (**)(void **))*v61 + 1))(v61);
  v62 = v292;
  if (v292)
  {
    v63 = (unint64_t *)&v292->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 48))(*((_QWORD *)v60 + 5), 1);
  v65 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v66 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v65, "acc_left_shift", (uint64_t *)&v313);
  v67 = v313;
  v313 = 0;
  if (v67)
    (*((void (**)(void **))*v67 + 1))(v67);
  v68 = v291;
  if (v291)
  {
    v69 = (unint64_t *)&v291->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 32))(*((_QWORD *)v66 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 48))(*((_QWORD *)v66 + 5), 1);
  v71 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v71, "acc_bias_shift", (uint64_t *)&v313);
  v73 = v313;
  v313 = 0;
  if (v73)
    (*((void (**)(void **))*v73 + 1))(v73);
  v74 = v290;
  if (v290)
  {
    v75 = (unint64_t *)&v290->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 32))(*((_QWORD *)v72 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 48))(*((_QWORD *)v72 + 5), 1);
  v77 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v78 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v77, "include_pads", (uint64_t *)&v313);
  v79 = v313;
  v313 = 0;
  if (v79)
    (*((void (**)(void **))*v79 + 1))(v79);
  v80 = v289;
  if (v289)
  {
    v81 = (unint64_t *)&v289->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v78 + 5) + 32))(*((_QWORD *)v78 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v78 + 5) + 48))(*((_QWORD *)v78 + 5), 1);
  v83 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v84 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v83, "pre_relu", (uint64_t *)&v313);
  v85 = v313;
  v313 = 0;
  if (v85)
    (*((void (**)(void **))*v85 + 1))(v85);
  v86 = v288;
  if (v288)
  {
    v87 = (unint64_t *)&v288->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v84 + 5) + 32))(*((_QWORD *)v84 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v84 + 5) + 48))(*((_QWORD *)v84 + 5), 1);
  v287 = 0;
  v89 = operator new();
  *(_QWORD *)v89 = 0;
  *(_QWORD *)(v89 + 8) = 0;
  *(_QWORD *)(v89 + 16) = 0;
  v313 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v287, (void **)v89);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v313, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v287, 1uLL);
  v90 = v287;
  v91 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v92 = operator new(8uLL);
  v307 = v92;
  *v92 = v91;
  v308 = v92 + 1;
  v309 = v92 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v93 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v94 = operator new(8uLL);
  __p = v94;
  *v94 = v93;
  v300 = v94 + 1;
  v299 = v94 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v95 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v96 = operator new(8uLL);
  v280 = v96;
  *v96 = v95;
  v282 = v96 + 1;
  v281 = v96 + 1;
  v312 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v97 = v284;
  v285 = v284;
  if (v284)
  {
    v98 = (_QWORD *)operator new();
    v99 = v284;
    *v98 = &unk_24BFE7320;
    v98[1] = 0;
    v98[2] = 0;
    v98[3] = v99;
  }
  else
  {
    v98 = 0;
  }
  v286 = v98;
  v284 = 0;
  v100 = v90[2];
  v101 = v90[1];
  if (v101 >= v100)
  {
    v103 = (v101 - *v90) >> 4;
    v104 = v103 + 1;
    if ((unint64_t)(v103 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v105 = v100 - *v90;
    if (v105 >> 3 > v104)
      v104 = v105 >> 3;
    if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF0)
      v106 = 0xFFFFFFFFFFFFFFFLL;
    else
      v106 = v104;
    v317 = v90 + 2;
    v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v90 + 2), v106);
    v109 = &v107[16 * v103];
    *(_QWORD *)v109 = v97;
    *((_QWORD *)v109 + 1) = v98;
    v286 = 0;
    v285 = 0;
    v111 = *v90;
    v110 = v90[1];
    if (v110 == *v90)
    {
      v114 = (void **)v90[1];
      v112 = &v107[16 * v103];
    }
    else
    {
      v112 = &v107[16 * v103];
      do
      {
        v113 = *((_OWORD *)v110 - 1);
        v110 -= 16;
        *((_OWORD *)v112 - 1) = v113;
        v112 -= 16;
        *(_QWORD *)v110 = 0;
        *((_QWORD *)v110 + 1) = 0;
      }
      while (v110 != v111);
      v114 = (void **)*v90;
      v110 = v90[1];
    }
    v102 = v109 + 16;
    *v90 = v112;
    v313 = v114;
    v314 = v114;
    v90[1] = v109 + 16;
    v315 = (uint64_t)v110;
    v115 = v90[2];
    v90[2] = &v107[16 * v108];
    v316 = v115;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v313);
  }
  else
  {
    *(_QWORD *)v101 = v97;
    *((_QWORD *)v101 + 1) = v98;
    v102 = v101 + 16;
    v286 = 0;
    v285 = 0;
  }
  v90[1] = v102;
  v116 = v284;
  v284 = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  v117 = v283;
  if (v283)
  {
    v118 = (unint64_t *)&v283->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  if (__p)
  {
    v299 = __p;
    operator delete(__p);
  }
  if (v307)
  {
    v308 = v307;
    operator delete(v307);
  }
  *(_OWORD *)v278 = *(_OWORD *)a2;
  v279 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v120 = (uint64_t)v302;
  v276 = (uint64_t)v302;
  if (v302)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = (std::__shared_weak_count_vtbl *)v120;
  }
  else
  {
    v121 = 0;
  }
  v277 = v121;
  v302 = 0;
  v274 = v287;
  if (v287)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = v287;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = (std::__shared_weak_count_vtbl *)v123;
  }
  else
  {
    v122 = 0;
  }
  v275 = v122;
  v287 = 0;
  v305[0] = &unk_24BFE7440;
  v305[1] = ANEMachineIR::H2021::Validators::ValidateNeAvgPool;
  v306 = (MIL::Validation::TensorDTypeConstraints *)v305;
  v304 = 0;
  MIL::IROperator::Make();
  v124 = v304;
  if (v304 == v303)
  {
    v125 = 4;
    v124 = v303;
  }
  else
  {
    if (!v304)
      goto LABEL_131;
    v125 = 5;
  }
  (*(void (**)(void))(*v124 + 8 * v125))();
LABEL_131:
  v126 = v306;
  if (v306 == (MIL::Validation::TensorDTypeConstraints *)v305)
  {
    v127 = 4;
    v126 = (MIL::Validation::TensorDTypeConstraints *)v305;
    goto LABEL_135;
  }
  if (v306)
  {
    v127 = 5;
LABEL_135:
    v126 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v126 + 8 * v127))();
  }
  if (v275)
  {
    v128 = &v275->__shared_owners_;
    do
      v129 = __ldaxr((unint64_t *)v128);
    while (__stlxr(v129 - 1, (unint64_t *)v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  if (v277)
  {
    v130 = &v277->__shared_owners_;
    do
      v131 = __ldaxr((unint64_t *)v130);
    while (__stlxr(v131 - 1, (unint64_t *)v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
      std::__shared_weak_count::__release_weak(v277);
    }
  }
  if (SHIBYTE(v279) < 0)
    operator delete(v278[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v126);
  v132 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v270, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v272 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v273 = v133;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v268, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v132 + 3))(v132, &v272, v268);
  if (v269 < 0)
    operator delete(v268[0]);
  v135 = v273;
  if (v273)
  {
    v136 = (unint64_t *)&v273->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*((void (**)(std::__shared_weak_count_vtbl *))v138->~__shared_weak_count + 1))(v138);
  if (v271 < 0)
    operator delete(v270);
  v139 = v313;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v266 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v267 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v264, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v139 + 3))(v139, &v266, v264);
  if (v265 < 0)
    operator delete(v264[0]);
  v142 = v267;
  if (v267)
  {
    v143 = (unint64_t *)&v267->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  v146 = *a3;
  v262 = v313;
  if (v313)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = v313;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = (std::__shared_weak_count_vtbl *)v148;
  }
  else
  {
    v147 = 0;
  }
  v263 = v147;
  v313 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v146 + 56))(v146, &v262);
  v149 = v263;
  if (v263)
  {
    v150 = (unint64_t *)&v263->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = (MIL::Validation::TensorRankValueConstraints *)v313;
  v313 = 0;
  if (v152)
    v152 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v152 + 8))(v152);
  MIL::Validation::TensorRankValueConstraints::Make(v152);
  v153 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v258, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v260 = Scalar;
  if (Scalar)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = Scalar;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v261 = v154;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v153 + 4))(v153, &v260, 3, 5);
  v156 = v261;
  if (v261)
  {
    v157 = (unint64_t *)&v261->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = Scalar;
  Scalar = 0;
  if (v159)
    (*((void (**)(std::__shared_weak_count_vtbl *))v159->~__shared_weak_count + 1))(v159);
  if (v259 < 0)
    operator delete(v258);
  v160 = *a3;
  v256 = v313;
  if (v313)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = v313;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = (std::__shared_weak_count_vtbl *)v162;
  }
  else
  {
    v161 = 0;
  }
  v257 = v161;
  v313 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v160 + 56))(v160, &v256);
  v163 = v257;
  if (v257)
  {
    v164 = (unint64_t *)&v257->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = (MIL::Validation::TensorSymbolicShapeConstraints *)v313;
  v313 = 0;
  if (v166)
    v166 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v166 + 8))(v166);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v166);
  v167 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v252, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v254 = Scalar;
  if (Scalar)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = Scalar;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v255 = v168;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v250, "Batch");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v167 + 3))(v167, &v254, 0, v250);
  if (v251 < 0)
    operator delete(v250[0]);
  v170 = v255;
  if (v255)
  {
    v171 = (unint64_t *)&v255->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = Scalar;
  Scalar = 0;
  if (v173)
    (*((void (**)(std::__shared_weak_count_vtbl *))v173->~__shared_weak_count + 1))(v173);
  if (v253 < 0)
    operator delete(v252);
  v174 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v246, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v248 = Scalar;
  if (Scalar)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = Scalar;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v249 = v175;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v244, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))*v174 + 4))(v174, &v248, 1, -2, v244);
  if (v245 < 0)
    operator delete(v244[0]);
  v177 = v249;
  if (v249)
  {
    v178 = (unint64_t *)&v249->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = Scalar;
  Scalar = 0;
  if (v180)
    (*((void (**)(std::__shared_weak_count_vtbl *))v180->~__shared_weak_count + 1))(v180);
  if (v247 < 0)
    operator delete(v246);
  v181 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v240, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v242 = Scalar;
  if (Scalar)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = Scalar;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v183;
  }
  else
  {
    v182 = 0;
  }
  v243 = v182;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v238, "Cin");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v181 + 3))(v181, &v242, -1, v238);
  if (v239 < 0)
    operator delete(v238[0]);
  v184 = v243;
  if (v243)
  {
    v185 = (unint64_t *)&v243->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = Scalar;
  Scalar = 0;
  if (v187)
    (*((void (**)(std::__shared_weak_count_vtbl *))v187->~__shared_weak_count + 1))(v187);
  if (v241 < 0)
    operator delete(v240);
  v188 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v234, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v236 = Scalar;
  if (Scalar)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = Scalar;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v190;
  }
  else
  {
    v189 = 0;
  }
  v237 = v189;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v232, "NUM_SPATIAL_DIMS_PLUS_ONE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v188 + 3))(v188, &v236, 0, v232);
  if (v233 < 0)
    operator delete(v232[0]);
  v191 = v237;
  if (v237)
  {
    v192 = (unint64_t *)&v237->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = Scalar;
  Scalar = 0;
  if (v194)
    (*((void (**)(std::__shared_weak_count_vtbl *))v194->~__shared_weak_count + 1))(v194);
  if (v235 < 0)
    operator delete(v234);
  v195 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v228, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v230 = Scalar;
  if (Scalar)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = Scalar;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v231 = v196;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v226, "NUM_SPATIAL_DIMS_PLUS_ONE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v195 + 3))(v195, &v230, 0, v226);
  if (v227 < 0)
    operator delete(v226[0]);
  v198 = v231;
  if (v231)
  {
    v199 = (unint64_t *)&v231->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = Scalar;
  Scalar = 0;
  if (v201)
    (*((void (**)(std::__shared_weak_count_vtbl *))v201->~__shared_weak_count + 1))(v201);
  if (v229 < 0)
    operator delete(v228);
  v202 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v222, "custom_pads");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v224 = Scalar;
  if (Scalar)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = Scalar;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v225 = v203;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v220, "TWICE_NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v202 + 3))(v202, &v224, 0, v220);
  if (v221 < 0)
    operator delete(v220[0]);
  v205 = v225;
  if (v225)
  {
    v206 = (unint64_t *)&v225->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = Scalar;
  Scalar = 0;
  if (v208)
    (*((void (**)(std::__shared_weak_count_vtbl *))v208->~__shared_weak_count + 1))(v208);
  if (v223 < 0)
    operator delete(v222);
  v209 = *a3;
  v218 = v313;
  if (v313)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v211 = v313;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = (std::__shared_weak_count_vtbl *)v211;
  }
  else
  {
    v210 = 0;
  }
  v219 = v210;
  v313 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v209 + 56))(v209, &v218);
  v212 = v219;
  if (v219)
  {
    v213 = (unint64_t *)&v219->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = v313;
  v313 = 0;
  if (v215)
    (*((void (**)(void **))*v215 + 1))(v215);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v287, 0);
  result = (uint64_t)v302;
  if (v302)
  {
    v217 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v302);
    return MEMORY[0x20BCFF140](v217, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068AF868(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NeMaxPool::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidateNeMaxPool;
  v8 = v7;
  ANEMachineIR::H2021::BaseNePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068B00EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NeMinPool::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidateNeMinPool;
  v8 = v7;
  ANEMachineIR::H2021::BaseNePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068B0204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::BasePePool::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  unsigned __int8 *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void **v35;
  unsigned __int8 *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void **v43;
  unsigned __int8 *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  void **v80;
  char *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  char **v89;
  _QWORD *v90;
  uint64_t v91;
  MIL::Validation::TensorDTypeConstraints *v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  void **v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void **v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  MIL::Validation::TensorRankValueConstraints *v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void **v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  MIL::Validation::TensorSymbolicShapeConstraints *v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count_vtbl *v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count_vtbl *v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count_vtbl *v153;
  void **v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count_vtbl *v160;
  void **v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  void **v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count_vtbl *v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  void **v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  void **v181;
  uint64_t result;
  uint64_t v183;
  void **v184;
  std::__shared_weak_count *v185;
  void *v186[2];
  char v187;
  void *v188;
  char v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  void *v192[2];
  char v193;
  void *v194;
  char v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  void *v198[2];
  char v199;
  void *v200;
  char v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  char v205;
  void *v206;
  char v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  char v211;
  void *v212;
  char v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  void *v218;
  char v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  void **v222;
  std::__shared_weak_count *v223;
  void *v224;
  char v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  void **v228;
  std::__shared_weak_count *v229;
  void *v230[2];
  char v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  void *v234[2];
  char v235;
  void *v236;
  char v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  char **v240;
  std::__shared_weak_count *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  uint64_t v245;
  void *v246;
  void *v247;
  _QWORD *v248;
  std::__shared_weak_count *v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  char **v253;
  std::__shared_weak_count *v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count *v256;
  std::__shared_weak_count *v257;
  void *__p;
  void *v259;
  _QWORD *v260;
  std::__shared_weak_count *v261;
  _QWORD *v262;
  _BYTE v263[24];
  _BYTE *v264;
  _QWORD v265[3];
  MIL::Validation::TensorDTypeConstraints *v266;
  void *v267;
  void *v268;
  _QWORD *v269;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v272;
  void **v273;
  void **v274;
  uint64_t v275;
  char *v276;
  char **v277;
  uint64_t v278;

  v278 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v262 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v12->__get_deleter;
  v272 = (uint64_t)&v12->__get_deleter;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  Scalar = v12;
  v273 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x18uLL);
  v268 = v16 + 3;
  v269 = v16 + 3;
  *v16 = v13;
  v16[1] = v14;
  v16[2] = v15;
  v267 = v16;
  v274 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = operator new(0x18uLL);
  v260 = v20 + 3;
  *v20 = v17;
  v20[1] = v18;
  v20[2] = v19;
  __p = v20;
  v259 = v20 + 3;
  v275 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v246);
  v21 = v246;
  v246 = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = v261;
  if (v261)
  {
    p_shared_owners = (unint64_t *)&v261->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v259 = __p;
    operator delete(__p);
  }
  if (v267)
  {
    v268 = v267;
    operator delete(v267);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v25 = v262;
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (void **)operator new(8uLL);
  v273 = v27;
  *v27 = (void *)v26;
  v274 = v27 + 1;
  v275 = (uint64_t)(v27 + 1);
  v267 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v25, "kernel_sizes", (uint64_t *)&Scalar);
  v29 = Scalar;
  Scalar = 0;
  if (v29)
    (*((void (**)(std::__shared_weak_count_vtbl *))v29->~__shared_weak_count + 1))(v29);
  v30 = v257;
  if (v257)
  {
    v31 = (unint64_t *)&v257->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v33 = v262;
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = (void **)operator new(8uLL);
  v273 = v35;
  *v35 = (void *)v34;
  v274 = v35 + 1;
  v275 = (uint64_t)(v35 + 1);
  v267 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v33, "strides", (uint64_t *)&Scalar);
  v37 = Scalar;
  Scalar = 0;
  if (v37)
    (*((void (**)(std::__shared_weak_count_vtbl *))v37->~__shared_weak_count + 1))(v37);
  v38 = v256;
  if (v256)
  {
    v39 = (unint64_t *)&v256->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v262;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (void **)operator new(8uLL);
  v273 = v43;
  *v43 = (void *)v42;
  v274 = v43 + 1;
  v275 = (uint64_t)(v43 + 1);
  v267 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v41, "custom_pads", (uint64_t *)&Scalar);
  v45 = Scalar;
  Scalar = 0;
  if (v45)
    (*((void (**)(std::__shared_weak_count_vtbl *))v45->~__shared_weak_count + 1))(v45);
  v46 = v255;
  if (v255)
  {
    v47 = (unint64_t *)&v255->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v262;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v49, "post_scale", (uint64_t *)&v273);
  v51 = v273;
  v273 = 0;
  if (v51)
    (*((void (**)(void **))*v51 + 1))(v51);
  v52 = v254;
  if (v254)
  {
    v53 = (unint64_t *)&v254->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 48))(*((_QWORD *)v50 + 5), 1);
  v253 = 0;
  v55 = operator new();
  *(_QWORD *)v55 = 0;
  *(_QWORD *)(v55 + 8) = 0;
  *(_QWORD *)(v55 + 16) = 0;
  v273 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v253, (void **)v55);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v273, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v253, 1uLL);
  v56 = v253;
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v267 = v58;
  *v58 = v57;
  v268 = v58 + 1;
  v269 = v58 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  __p = v60;
  *v60 = v59;
  v260 = v60 + 1;
  v259 = v60 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v246 = v62;
  *v62 = v61;
  v248 = v62 + 1;
  v247 = v62 + 1;
  v272 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v63 = v250;
  v251 = v250;
  if (v250)
  {
    v64 = (_QWORD *)operator new();
    v65 = v250;
    *v64 = &unk_24BFE7320;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  v252 = v64;
  v250 = 0;
  v66 = v56[2];
  v67 = v56[1];
  if (v67 >= v66)
  {
    v69 = (v67 - *v56) >> 4;
    v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v71 = v66 - *v56;
    if (v71 >> 3 > v70)
      v70 = v71 >> 3;
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0)
      v72 = 0xFFFFFFFFFFFFFFFLL;
    else
      v72 = v70;
    v277 = v56 + 2;
    v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v56 + 2), v72);
    v75 = &v73[16 * v69];
    *(_QWORD *)v75 = v63;
    *((_QWORD *)v75 + 1) = v64;
    v252 = 0;
    v251 = 0;
    v77 = *v56;
    v76 = v56[1];
    if (v76 == *v56)
    {
      v80 = (void **)v56[1];
      v78 = &v73[16 * v69];
    }
    else
    {
      v78 = &v73[16 * v69];
      do
      {
        v79 = *((_OWORD *)v76 - 1);
        v76 -= 16;
        *((_OWORD *)v78 - 1) = v79;
        v78 -= 16;
        *(_QWORD *)v76 = 0;
        *((_QWORD *)v76 + 1) = 0;
      }
      while (v76 != v77);
      v80 = (void **)*v56;
      v76 = v56[1];
    }
    v68 = v75 + 16;
    *v56 = v78;
    v273 = v80;
    v274 = v80;
    v56[1] = v75 + 16;
    v275 = (uint64_t)v76;
    v81 = v56[2];
    v56[2] = &v73[16 * v74];
    v276 = v81;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v273);
  }
  else
  {
    *(_QWORD *)v67 = v63;
    *((_QWORD *)v67 + 1) = v64;
    v68 = v67 + 16;
    v252 = 0;
    v251 = 0;
  }
  v56[1] = v68;
  v82 = v250;
  v250 = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = v249;
  if (v249)
  {
    v84 = (unint64_t *)&v249->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  if (__p)
  {
    v259 = __p;
    operator delete(__p);
  }
  if (v267)
  {
    v268 = v267;
    operator delete(v267);
  }
  *(_OWORD *)v244 = *(_OWORD *)a2;
  v245 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v86 = (uint64_t)v262;
  v242 = (uint64_t)v262;
  if (v262)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = (std::__shared_weak_count_vtbl *)v86;
  }
  else
  {
    v87 = 0;
  }
  v243 = v87;
  v262 = 0;
  v240 = v253;
  if (v253)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v253;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v241 = v88;
  v253 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v265, a3);
  }
  else
  {
    v265[0] = &unk_24BFE7440;
    v265[1] = ANEMachineIR::H2021::Validators::ValidateBasePePool;
    v266 = (MIL::Validation::TensorDTypeConstraints *)v265;
  }
  v264 = 0;
  MIL::IROperator::Make();
  v90 = v264;
  if (v264 == v263)
  {
    v91 = 4;
    v90 = v263;
  }
  else
  {
    if (!v264)
      goto LABEL_92;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_92:
  v92 = v266;
  if (v266 == (MIL::Validation::TensorDTypeConstraints *)v265)
  {
    v93 = 4;
    v92 = (MIL::Validation::TensorDTypeConstraints *)v265;
    goto LABEL_96;
  }
  if (v266)
  {
    v93 = 5;
LABEL_96:
    v92 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v92 + 8 * v93))();
  }
  if (v241)
  {
    v94 = &v241->__shared_owners_;
    do
      v95 = __ldaxr((unint64_t *)v94);
    while (__stlxr(v95 - 1, (unint64_t *)v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  if (v243)
  {
    v96 = &v243->__shared_owners_;
    do
      v97 = __ldaxr((unint64_t *)v96);
    while (__stlxr(v97 - 1, (unint64_t *)v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  if (SHIBYTE(v245) < 0)
    operator delete(v244[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v92);
  v98 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v236, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v238 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v239 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v234, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v98 + 3))(v98, &v238, v234);
  if (v235 < 0)
    operator delete(v234[0]);
  v101 = v239;
  if (v239)
  {
    v102 = (unint64_t *)&v239->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v237 < 0)
    operator delete(v236);
  v105 = v273;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v232 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v233 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v230, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v105 + 3))(v105, &v232, v230);
  if (v231 < 0)
    operator delete(v230[0]);
  v108 = v233;
  if (v233)
  {
    v109 = (unint64_t *)&v233->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  v112 = *a4;
  v228 = v273;
  if (v273)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v273;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v229 = v113;
  v273 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v112 + 56))(v112, &v228);
  v115 = v229;
  if (v229)
  {
    v116 = (unint64_t *)&v229->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = (MIL::Validation::TensorRankValueConstraints *)v273;
  v273 = 0;
  if (v118)
    v118 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v118 + 8))(v118);
  MIL::Validation::TensorRankValueConstraints::Make(v118);
  v119 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v224, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v226 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v227 = v120;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v119 + 4))(v119, &v226, 3, 5);
  v122 = v227;
  if (v227)
  {
    v123 = (unint64_t *)&v227->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  if (v225 < 0)
    operator delete(v224);
  v126 = *a4;
  v222 = v273;
  if (v273)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v273;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = (std::__shared_weak_count_vtbl *)v128;
  }
  else
  {
    v127 = 0;
  }
  v223 = v127;
  v273 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v126 + 56))(v126, &v222);
  v129 = v223;
  if (v223)
  {
    v130 = (unint64_t *)&v223->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (MIL::Validation::TensorSymbolicShapeConstraints *)v273;
  v273 = 0;
  if (v132)
    v132 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v132 + 8))(v132);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v132);
  v133 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v218, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v220 = Scalar;
  if (Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v221 = v134;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v216, "Batch");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v133 + 3))(v133, &v220, 0, v216);
  if (v217 < 0)
    operator delete(v216[0]);
  v136 = v221;
  if (v221)
  {
    v137 = (unint64_t *)&v221->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = Scalar;
  Scalar = 0;
  if (v139)
    (*((void (**)(std::__shared_weak_count_vtbl *))v139->~__shared_weak_count + 1))(v139);
  if (v219 < 0)
    operator delete(v218);
  v140 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v212, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v214 = Scalar;
  if (Scalar)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = Scalar;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v215 = v141;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v210, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))*v140 + 4))(v140, &v214, 1, -2, v210);
  if (v211 < 0)
    operator delete(v210[0]);
  v143 = v215;
  if (v215)
  {
    v144 = (unint64_t *)&v215->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = Scalar;
  Scalar = 0;
  if (v146)
    (*((void (**)(std::__shared_weak_count_vtbl *))v146->~__shared_weak_count + 1))(v146);
  if (v213 < 0)
    operator delete(v212);
  v147 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v206, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v208 = Scalar;
  if (Scalar)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = Scalar;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v209 = v148;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v204, "Cin");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v147 + 3))(v147, &v208, -1, v204);
  if (v205 < 0)
    operator delete(v204[0]);
  v150 = v209;
  if (v209)
  {
    v151 = (unint64_t *)&v209->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = Scalar;
  Scalar = 0;
  if (v153)
    (*((void (**)(std::__shared_weak_count_vtbl *))v153->~__shared_weak_count + 1))(v153);
  if (v207 < 0)
    operator delete(v206);
  v154 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v200, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v202 = Scalar;
  if (Scalar)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = Scalar;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v203 = v155;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v198, "NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v154 + 3))(v154, &v202, 0, v198);
  if (v199 < 0)
    operator delete(v198[0]);
  v157 = v203;
  if (v203)
  {
    v158 = (unint64_t *)&v203->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = Scalar;
  Scalar = 0;
  if (v160)
    (*((void (**)(std::__shared_weak_count_vtbl *))v160->~__shared_weak_count + 1))(v160);
  if (v201 < 0)
    operator delete(v200);
  v161 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v194, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v196 = Scalar;
  if (Scalar)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = Scalar;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v197 = v162;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v192, "NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v161 + 3))(v161, &v196, 0, v192);
  if (v193 < 0)
    operator delete(v192[0]);
  v164 = v197;
  if (v197)
  {
    v165 = (unint64_t *)&v197->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = Scalar;
  Scalar = 0;
  if (v167)
    (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
  if (v195 < 0)
    operator delete(v194);
  v168 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v188, "custom_pads");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v190 = Scalar;
  if (Scalar)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = Scalar;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = v170;
  }
  else
  {
    v169 = 0;
  }
  v191 = v169;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v186, "TWICE_NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v168 + 3))(v168, &v190, 0, v186);
  if (v187 < 0)
    operator delete(v186[0]);
  v171 = v191;
  if (v191)
  {
    v172 = (unint64_t *)&v191->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = Scalar;
  Scalar = 0;
  if (v174)
    (*((void (**)(std::__shared_weak_count_vtbl *))v174->~__shared_weak_count + 1))(v174);
  if (v189 < 0)
    operator delete(v188);
  v175 = *a4;
  v184 = v273;
  if (v273)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = v273;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = (std::__shared_weak_count_vtbl *)v177;
  }
  else
  {
    v176 = 0;
  }
  v185 = v176;
  v273 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v175 + 56))(v175, &v184);
  v178 = v185;
  if (v185)
  {
    v179 = (unint64_t *)&v185->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = v273;
  v273 = 0;
  if (v181)
    (*((void (**)(void **))*v181 + 1))(v181);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v253, 0);
  result = (uint64_t)v262;
  if (v262)
  {
    v183 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v262);
    return MEMORY[0x20BCFF140](v183, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068B185C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::PeAvgPool::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void **v41;
  unsigned __int8 *v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  void **v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  void **v90;
  char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  char **v99;
  _QWORD *v100;
  uint64_t v101;
  MIL::Validation::TensorDTypeConstraints *v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t *v106;
  unint64_t v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void **v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  MIL::Validation::TensorRankValueConstraints *v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count_vtbl *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void **v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  MIL::Validation::TensorSymbolicShapeConstraints *v142;
  void **v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  void **v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count_vtbl *v156;
  void **v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  void **v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count_vtbl *v170;
  void **v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count_vtbl *v177;
  void **v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count_vtbl *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  void **v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void **v191;
  uint64_t result;
  uint64_t v193;
  void **v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  void *v198;
  char v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  void *v202[2];
  char v203;
  void *v204;
  char v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  void *v208[2];
  char v209;
  void *v210;
  char v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  void *v214[2];
  char v215;
  void *v216;
  char v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  void *v220[2];
  char v221;
  void *v222;
  char v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  void *v226[2];
  char v227;
  void *v228;
  char v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  void **v232;
  std::__shared_weak_count *v233;
  void *v234;
  char v235;
  std::__shared_weak_count_vtbl *v236;
  std::__shared_weak_count *v237;
  void **v238;
  std::__shared_weak_count *v239;
  void *v240[2];
  char v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  char v245;
  void *v246;
  char v247;
  std::__shared_weak_count_vtbl *v248;
  std::__shared_weak_count *v249;
  char **v250;
  std::__shared_weak_count *v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  void *v254[2];
  uint64_t v255;
  void *v256;
  void *v257;
  _QWORD *v258;
  std::__shared_weak_count *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char **v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count *v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count *v267;
  std::__shared_weak_count *v268;
  std::__shared_weak_count *v269;
  void *__p;
  void *v271;
  _QWORD *v272;
  std::__shared_weak_count *v273;
  _QWORD *v274;
  _BYTE v275[24];
  _BYTE *v276;
  _QWORD v277[3];
  MIL::Validation::TensorDTypeConstraints *v278;
  void *v279;
  void *v280;
  _QWORD *v281;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v284;
  void **v285;
  void **v286;
  uint64_t v287;
  char *v288;
  char **v289;
  uint64_t v290;

  v290 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v274 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v284 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v285 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v280 = v14 + 3;
  v281 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v279 = v14;
  v286 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v272 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v271 = v18 + 3;
  v287 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v256);
  v19 = v256;
  v256 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v273;
  if (v273)
  {
    p_shared_owners = (unint64_t *)&v273->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v271 = __p;
    operator delete(__p);
  }
  if (v279)
  {
    v280 = v279;
    operator delete(v279);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v274;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (void **)operator new(8uLL);
  v285 = v25;
  *v25 = (void *)v24;
  v286 = v25 + 1;
  v287 = (uint64_t)(v25 + 1);
  v279 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v23, "kernel_sizes", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = v269;
  if (v269)
  {
    v29 = (unint64_t *)&v269->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v285)
  {
    v286 = v285;
    operator delete(v285);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v31 = v274;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (void **)operator new(8uLL);
  v285 = v33;
  *v33 = (void *)v32;
  v286 = v33 + 1;
  v287 = (uint64_t)(v33 + 1);
  v279 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v31, "strides", (uint64_t *)&Scalar);
  v35 = Scalar;
  Scalar = 0;
  if (v35)
    (*((void (**)(std::__shared_weak_count_vtbl *))v35->~__shared_weak_count + 1))(v35);
  v36 = v268;
  if (v268)
  {
    v37 = (unint64_t *)&v268->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v285)
  {
    v286 = v285;
    operator delete(v285);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v39 = v274;
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = (void **)operator new(8uLL);
  v285 = v41;
  *v41 = (void *)v40;
  v286 = v41 + 1;
  v287 = (uint64_t)(v41 + 1);
  v279 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v39, "custom_pads", (uint64_t *)&Scalar);
  v43 = Scalar;
  Scalar = 0;
  if (v43)
    (*((void (**)(std::__shared_weak_count_vtbl *))v43->~__shared_weak_count + 1))(v43);
  v44 = v267;
  if (v267)
  {
    v45 = (unint64_t *)&v267->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v285)
  {
    v286 = v285;
    operator delete(v285);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v47 = v274;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v47, "post_scale", (uint64_t *)&v285);
  v49 = v285;
  v285 = 0;
  if (v49)
    (*((void (**)(void **))*v49 + 1))(v49);
  v50 = v266;
  if (v266)
  {
    v51 = (unint64_t *)&v266->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 48))(*((_QWORD *)v48 + 5), 1);
  v53 = v274;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v53, "include_pads", (uint64_t *)&v285);
  v55 = v285;
  v285 = 0;
  if (v55)
    (*((void (**)(void **))*v55 + 1))(v55);
  v56 = v265;
  if (v265)
  {
    v57 = (unint64_t *)&v265->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 48))(*((_QWORD *)v54 + 5), 1);
  v59 = v274;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v59, "pre_relu", (uint64_t *)&v285);
  v61 = v285;
  v285 = 0;
  if (v61)
    (*((void (**)(void **))*v61 + 1))(v61);
  v62 = v264;
  if (v264)
  {
    v63 = (unint64_t *)&v264->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 48))(*((_QWORD *)v60 + 5), 1);
  v263 = 0;
  v65 = operator new();
  *(_QWORD *)v65 = 0;
  *(_QWORD *)(v65 + 8) = 0;
  *(_QWORD *)(v65 + 16) = 0;
  v285 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v263, (void **)v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v285, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v263, 1uLL);
  v66 = v263;
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v279 = v68;
  *v68 = v67;
  v280 = v68 + 1;
  v281 = v68 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  __p = v70;
  *v70 = v69;
  v272 = v70 + 1;
  v271 = v70 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v256 = v72;
  *v72 = v71;
  v258 = v72 + 1;
  v257 = v72 + 1;
  v284 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v73 = v260;
  v261 = v260;
  if (v260)
  {
    v74 = (_QWORD *)operator new();
    v75 = v260;
    *v74 = &unk_24BFE7320;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  v262 = v74;
  v260 = 0;
  v76 = v66[2];
  v77 = v66[1];
  if (v77 >= v76)
  {
    v79 = (v77 - *v66) >> 4;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v81 = v76 - *v66;
    if (v81 >> 3 > v80)
      v80 = v81 >> 3;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
      v82 = 0xFFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    v289 = v66 + 2;
    v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v66 + 2), v82);
    v85 = &v83[16 * v79];
    *(_QWORD *)v85 = v73;
    *((_QWORD *)v85 + 1) = v74;
    v262 = 0;
    v261 = 0;
    v87 = *v66;
    v86 = v66[1];
    if (v86 == *v66)
    {
      v90 = (void **)v66[1];
      v88 = &v83[16 * v79];
    }
    else
    {
      v88 = &v83[16 * v79];
      do
      {
        v89 = *((_OWORD *)v86 - 1);
        v86 -= 16;
        *((_OWORD *)v88 - 1) = v89;
        v88 -= 16;
        *(_QWORD *)v86 = 0;
        *((_QWORD *)v86 + 1) = 0;
      }
      while (v86 != v87);
      v90 = (void **)*v66;
      v86 = v66[1];
    }
    v78 = v85 + 16;
    *v66 = v88;
    v285 = v90;
    v286 = v90;
    v66[1] = v85 + 16;
    v287 = (uint64_t)v86;
    v91 = v66[2];
    v66[2] = &v83[16 * v84];
    v288 = v91;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v285);
  }
  else
  {
    *(_QWORD *)v77 = v73;
    *((_QWORD *)v77 + 1) = v74;
    v78 = v77 + 16;
    v262 = 0;
    v261 = 0;
  }
  v66[1] = v78;
  v92 = v260;
  v260 = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  v93 = v259;
  if (v259)
  {
    v94 = (unint64_t *)&v259->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  if (__p)
  {
    v271 = __p;
    operator delete(__p);
  }
  if (v279)
  {
    v280 = v279;
    operator delete(v279);
  }
  *(_OWORD *)v254 = *(_OWORD *)a2;
  v255 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v96 = (uint64_t)v274;
  v252 = (uint64_t)v274;
  if (v274)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v97 = 0;
  }
  v253 = v97;
  v274 = 0;
  v250 = v263;
  if (v263)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v263;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v251 = v98;
  v263 = 0;
  v277[0] = &unk_24BFE7440;
  v277[1] = ANEMachineIR::H2021::Validators::ValidatePeAvgPool;
  v278 = (MIL::Validation::TensorDTypeConstraints *)v277;
  v276 = 0;
  MIL::IROperator::Make();
  v100 = v276;
  if (v276 == v275)
  {
    v101 = 4;
    v100 = v275;
  }
  else
  {
    if (!v276)
      goto LABEL_103;
    v101 = 5;
  }
  (*(void (**)(void))(*v100 + 8 * v101))();
LABEL_103:
  v102 = v278;
  if (v278 == (MIL::Validation::TensorDTypeConstraints *)v277)
  {
    v103 = 4;
    v102 = (MIL::Validation::TensorDTypeConstraints *)v277;
    goto LABEL_107;
  }
  if (v278)
  {
    v103 = 5;
LABEL_107:
    v102 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v102 + 8 * v103))();
  }
  if (v251)
  {
    v104 = &v251->__shared_owners_;
    do
      v105 = __ldaxr((unint64_t *)v104);
    while (__stlxr(v105 - 1, (unint64_t *)v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
  if (v253)
  {
    v106 = &v253->__shared_owners_;
    do
      v107 = __ldaxr((unint64_t *)v106);
    while (__stlxr(v107 - 1, (unint64_t *)v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  if (SHIBYTE(v255) < 0)
    operator delete(v254[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v102);
  v108 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v246, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v248 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v249 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v244, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v108 + 3))(v108, &v248, v244);
  if (v245 < 0)
    operator delete(v244[0]);
  v111 = v249;
  if (v249)
  {
    v112 = (unint64_t *)&v249->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v247 < 0)
    operator delete(v246);
  v115 = v285;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v242 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v243 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v240, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v115 + 3))(v115, &v242, v240);
  if (v241 < 0)
    operator delete(v240[0]);
  v118 = v243;
  if (v243)
  {
    v119 = (unint64_t *)&v243->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  v122 = *a3;
  v238 = v285;
  if (v285)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v285;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
  }
  else
  {
    v123 = 0;
  }
  v239 = v123;
  v285 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v122 + 56))(v122, &v238);
  v125 = v239;
  if (v239)
  {
    v126 = (unint64_t *)&v239->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (MIL::Validation::TensorRankValueConstraints *)v285;
  v285 = 0;
  if (v128)
    v128 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v128 + 8))(v128);
  MIL::Validation::TensorRankValueConstraints::Make(v128);
  v129 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v234, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v236 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v237 = v130;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v129 + 4))(v129, &v236, 3, 5);
  v132 = v237;
  if (v237)
  {
    v133 = (unint64_t *)&v237->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*((void (**)(std::__shared_weak_count_vtbl *))v135->~__shared_weak_count + 1))(v135);
  if (v235 < 0)
    operator delete(v234);
  v136 = *a3;
  v232 = v285;
  if (v285)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = v285;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = (std::__shared_weak_count_vtbl *)v138;
  }
  else
  {
    v137 = 0;
  }
  v233 = v137;
  v285 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v136 + 56))(v136, &v232);
  v139 = v233;
  if (v233)
  {
    v140 = (unint64_t *)&v233->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = (MIL::Validation::TensorSymbolicShapeConstraints *)v285;
  v285 = 0;
  if (v142)
    v142 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v142 + 8))(v142);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v142);
  v143 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v228, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v230 = Scalar;
  if (Scalar)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = Scalar;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v231 = v144;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v226, "Batch");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v143 + 3))(v143, &v230, 0, v226);
  if (v227 < 0)
    operator delete(v226[0]);
  v146 = v231;
  if (v231)
  {
    v147 = (unint64_t *)&v231->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*((void (**)(std::__shared_weak_count_vtbl *))v149->~__shared_weak_count + 1))(v149);
  if (v229 < 0)
    operator delete(v228);
  v150 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v222, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v224 = Scalar;
  if (Scalar)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = Scalar;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v152;
  }
  else
  {
    v151 = 0;
  }
  v225 = v151;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v220, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))*v150 + 4))(v150, &v224, 1, -2, v220);
  if (v221 < 0)
    operator delete(v220[0]);
  v153 = v225;
  if (v225)
  {
    v154 = (unint64_t *)&v225->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = Scalar;
  Scalar = 0;
  if (v156)
    (*((void (**)(std::__shared_weak_count_vtbl *))v156->~__shared_weak_count + 1))(v156);
  if (v223 < 0)
    operator delete(v222);
  v157 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v216, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v218 = Scalar;
  if (Scalar)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = Scalar;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v219 = v158;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v214, "Cin");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v157 + 3))(v157, &v218, -1, v214);
  if (v215 < 0)
    operator delete(v214[0]);
  v160 = v219;
  if (v219)
  {
    v161 = (unint64_t *)&v219->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = Scalar;
  Scalar = 0;
  if (v163)
    (*((void (**)(std::__shared_weak_count_vtbl *))v163->~__shared_weak_count + 1))(v163);
  if (v217 < 0)
    operator delete(v216);
  v164 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v210, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v212 = Scalar;
  if (Scalar)
  {
    v165 = (std::__shared_weak_count *)operator new();
    v166 = Scalar;
    v165->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v165->__shared_owners_ = 0;
    v165->__shared_weak_owners_ = 0;
    v165[1].__vftable = v166;
  }
  else
  {
    v165 = 0;
  }
  v213 = v165;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v208, "NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v164 + 3))(v164, &v212, 0, v208);
  if (v209 < 0)
    operator delete(v208[0]);
  v167 = v213;
  if (v213)
  {
    v168 = (unint64_t *)&v213->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = Scalar;
  Scalar = 0;
  if (v170)
    (*((void (**)(std::__shared_weak_count_vtbl *))v170->~__shared_weak_count + 1))(v170);
  if (v211 < 0)
    operator delete(v210);
  v171 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v204, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v206 = Scalar;
  if (Scalar)
  {
    v172 = (std::__shared_weak_count *)operator new();
    v173 = Scalar;
    v172->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v172->__shared_owners_ = 0;
    v172->__shared_weak_owners_ = 0;
    v172[1].__vftable = v173;
  }
  else
  {
    v172 = 0;
  }
  v207 = v172;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v202, "NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v171 + 3))(v171, &v206, 0, v202);
  if (v203 < 0)
    operator delete(v202[0]);
  v174 = v207;
  if (v207)
  {
    v175 = (unint64_t *)&v207->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = Scalar;
  Scalar = 0;
  if (v177)
    (*((void (**)(std::__shared_weak_count_vtbl *))v177->~__shared_weak_count + 1))(v177);
  if (v205 < 0)
    operator delete(v204);
  v178 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v198, "custom_pads");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v200 = Scalar;
  if (Scalar)
  {
    v179 = (std::__shared_weak_count *)operator new();
    v180 = Scalar;
    v179->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v179->__shared_owners_ = 0;
    v179->__shared_weak_owners_ = 0;
    v179[1].__vftable = v180;
  }
  else
  {
    v179 = 0;
  }
  v201 = v179;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "TWICE_NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v178 + 3))(v178, &v200, 0, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v181 = v201;
  if (v201)
  {
    v182 = (unint64_t *)&v201->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = Scalar;
  Scalar = 0;
  if (v184)
    (*((void (**)(std::__shared_weak_count_vtbl *))v184->~__shared_weak_count + 1))(v184);
  if (v199 < 0)
    operator delete(v198);
  v185 = *a3;
  v194 = v285;
  if (v285)
  {
    v186 = (std::__shared_weak_count *)operator new();
    v187 = v285;
    v186->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v186->__shared_owners_ = 0;
    v186->__shared_weak_owners_ = 0;
    v186[1].__vftable = (std::__shared_weak_count_vtbl *)v187;
  }
  else
  {
    v186 = 0;
  }
  v195 = v186;
  v285 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v185 + 56))(v185, &v194);
  v188 = v195;
  if (v195)
  {
    v189 = (unint64_t *)&v195->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = v285;
  v285 = 0;
  if (v191)
    (*((void (**)(void **))*v191 + 1))(v191);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v263, 0);
  result = (uint64_t)v274;
  if (v274)
  {
    v193 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v274);
    return MEMORY[0x20BCFF140](v193, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068B364C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeMaxPool::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeMaxPool;
  v8 = v7;
  ANEMachineIR::H2021::BasePePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068B3E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeMinPool::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeMinPool;
  v8 = v7;
  ANEMachineIR::H2021::BasePePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068B3F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateBaseNeMatmul@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2021::Validators::ValidateNeBatchMatmul(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeBatchMatmul(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidateNeMatmul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeMatmul(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidateReshape(MIL::IROperation *this@<X0>, uint64_t a2@<X8>)
{
  ANEMachineIR::Validators::ValidateReshape(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidateTranspose(MIL::IROperation *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateTranspose(this, a2);
}

uint64_t ANEMachineIR::H2022::BaseActivation::Make(MIL::IRUnknownDimension *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  char **v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t result;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  void *v56[2];
  uint64_t v57;
  void *v58;
  void *v59;
  _QWORD *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  char **v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  void *__p;
  void *v67;
  char *v68;
  char *v69;
  char **v70;
  _BYTE v71[24];
  _BYTE *v72;
  _QWORD v73[3];
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v65 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v67 = v8 + 1;
  v68 = (char *)(v8 + 1);
  v76 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v58);
  v9 = v58;
  v58 = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = v64;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v67 = __p;
    operator delete(__p);
  }
  v63 = 0;
  v13 = operator new();
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v63, (void **)v13);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v63, 1uLL);
  v14 = v63;
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v58 = v16;
  *v16 = v15;
  v59 = v16 + 1;
  v60 = v16 + 1;
  v75 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v17 = v62;
  v76 = v62;
  if (v62)
  {
    v18 = (_QWORD *)operator new();
    v19 = v62;
    *v18 = &unk_24BFE7320;
    v18[1] = 0;
    v18[2] = 0;
    v18[3] = v19;
  }
  else
  {
    v18 = 0;
  }
  v77 = v18;
  v62 = 0;
  v20 = v14[2];
  v21 = v14[1];
  if (v21 >= v20)
  {
    v23 = (v21 - *v14) >> 4;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v25 = v20 - *v14;
    if (v25 >> 3 > v24)
      v24 = v25 >> 3;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    v70 = v14 + 2;
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v14 + 2), v26);
    v29 = &v27[16 * v23];
    *(_QWORD *)v29 = v17;
    *((_QWORD *)v29 + 1) = v18;
    v76 = 0;
    v77 = 0;
    v31 = *v14;
    v30 = v14[1];
    if (v30 == *v14)
    {
      v34 = v14[1];
      v32 = &v27[16 * v23];
    }
    else
    {
      v32 = &v27[16 * v23];
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v30 -= 16;
        *((_OWORD *)v32 - 1) = v33;
        v32 -= 16;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
      }
      while (v30 != v31);
      v34 = *v14;
      v30 = v14[1];
    }
    v22 = v29 + 16;
    *v14 = v32;
    __p = v34;
    v67 = v34;
    v14[1] = v29 + 16;
    v68 = v30;
    v35 = v14[2];
    v14[2] = &v27[16 * v28];
    v69 = v35;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v21 = v17;
    *((_QWORD *)v21 + 1) = v18;
    v22 = v21 + 16;
    v76 = 0;
    v77 = 0;
  }
  v14[1] = v22;
  v36 = v62;
  v62 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v61;
  if (v61)
  {
    v38 = (unint64_t *)&v61->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  *(_OWORD *)v56 = *(_OWORD *)a2;
  v57 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v40 = v65;
  if (v65)
  {
    v41 = (std::__shared_weak_count *)operator new();
    v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v41->__shared_owners_ = 0;
    v41->__shared_weak_owners_ = 0;
    v41[1].__vftable = (std::__shared_weak_count_vtbl *)v40;
  }
  else
  {
    v41 = 0;
  }
  v55 = v41;
  v65 = 0;
  if (v63)
  {
    v42 = (std::__shared_weak_count *)operator new();
    v43 = v63;
    v42->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v42->__shared_owners_ = 0;
    v42->__shared_weak_owners_ = 0;
    v42[1].__vftable = (std::__shared_weak_count_vtbl *)v43;
  }
  else
  {
    v42 = 0;
  }
  v54 = v42;
  v63 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v73, a3);
  }
  else
  {
    v73[0] = &unk_24BFE7440;
    v73[1] = ANEMachineIR::H2022::Validators::ValidateBaseActivation;
    v74 = v73;
  }
  v72 = 0;
  MIL::IROperator::Make();
  v44 = v72;
  if (v72 == v71)
  {
    v45 = 4;
    v44 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_50;
    v45 = 5;
  }
  (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_50:
  v46 = v74;
  if (v74 == v73)
  {
    v47 = 4;
    v46 = v73;
    goto LABEL_54;
  }
  if (v74)
  {
    v47 = 5;
LABEL_54:
    (*(void (**)(_QWORD *))(*v46 + 8 * v47))(v46);
  }
  if (v54)
  {
    v48 = (unint64_t *)&v54->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v55)
  {
    v50 = (unint64_t *)&v55->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v57) < 0)
    operator delete(v56[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v63, 0);
  result = v65;
  if (v65)
  {
    v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v65);
    return MEMORY[0x20BCFF140](v53, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068B4540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a25, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a30, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Linear::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2022::Validators::ValidateLinear;
  v7 = v6;
  ANEMachineIR::H2022::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_2068B4760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2022::NePiecewiseV2::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t *p_shared_owners;
  unint64_t v11;
  unsigned __int8 *v12;
  void *v13;
  uint64_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  void *v17;
  uint64_t *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  void *v21;
  uint64_t *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  void *v25;
  uint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  std::__shared_weak_count_vtbl *v32;
  uint64_t *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  void *v36;
  uint64_t *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  void *v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned __int8 *v43;
  void *v44;
  uint64_t *v45;
  unint64_t v46;
  unsigned __int8 *v47;
  void *v48;
  uint64_t *v49;
  unint64_t v50;
  unsigned __int8 *v51;
  void *v52;
  uint64_t *v53;
  unint64_t v54;
  unsigned __int8 *v55;
  void *v56;
  uint64_t *v57;
  unint64_t v58;
  unsigned __int8 *v59;
  void *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  char **v64;
  uint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  __int128 v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  char **v92;
  _QWORD *v93;
  uint64_t v94;
  MIL::Validation::TensorSymbolicShapeConstraints *v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  MIL::Validation::PossibleStringValuesConstraints *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  uint64_t i;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  std::__shared_weak_count_vtbl *result;
  uint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void *v142;
  char v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146;
  char v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  void *v154;
  char v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  char **v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  char **v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count *v178;
  _BYTE v179[8];
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  void *__p;
  void *v183;
  char *v184;
  _QWORD v185[3];
  _QWORD v186[3];
  _QWORD v187[3];
  uint64_t v188[3];
  uint64_t v189[3];
  uint64_t v190[3];
  uint64_t v191[3];
  uint64_t v192[3];
  uint64_t v193[3];
  uint64_t v194[3];
  uint64_t v195[3];
  uint64_t v196[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v198;
  void (__cdecl **v199)(std::__shared_weak_count *__hidden);
  _BYTE v200[24];
  _BYTE *v201;
  _QWORD v202[3];
  MIL::Validation::TensorSymbolicShapeConstraints *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;

  v207 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v181 = (std::__shared_weak_count_vtbl *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v183 = v8 + 1;
  v184 = (char *)(v8 + 1);
  v205 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*((void (**)(std::__shared_weak_count_vtbl *))v9->~__shared_weak_count + 1))(v9);
  if (v180)
  {
    p_shared_owners = &v180->__shared_owners_;
    do
      v11 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v11 - 1, (unint64_t *)p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v181, "x_sat_left", (uint64_t *)&__p);
  v13 = __p;
  __p = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  if (v178)
  {
    v14 = &v178->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v12 + 5) + 32))(*((_QWORD *)v12 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v181, "x_sat_right", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  if (v177)
  {
    v18 = &v177->__shared_owners_;
    do
      v19 = __ldaxr((unint64_t *)v18);
    while (__stlxr(v19 - 1, (unint64_t *)v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v181, "y_sat_left", (uint64_t *)&__p);
  v21 = __p;
  __p = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  if (v176)
  {
    v22 = &v176->__shared_owners_;
    do
      v23 = __ldaxr((unint64_t *)v22);
    while (__stlxr(v23 - 1, (unint64_t *)v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v181, "y_sat_right", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  if (v175)
  {
    v26 = &v175->__shared_owners_;
    do
      v27 = __ldaxr((unint64_t *)v26);
    while (__stlxr(v27 - 1, (unint64_t *)v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v28 = v181;
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = operator new(8uLL);
  __p = v30;
  *v30 = v29;
  v183 = v30 + 1;
  v184 = (char *)(v30 + 1);
  v205 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v28, "y_intercept", (uint64_t *)&Scalar);
  v32 = Scalar;
  Scalar = 0;
  if (v32)
    (*((void (**)(std::__shared_weak_count_vtbl *))v32->~__shared_weak_count + 1))(v32);
  if (v174)
  {
    v33 = &v174->__shared_owners_;
    do
      v34 = __ldaxr((unint64_t *)v33);
    while (__stlxr(v34 - 1, (unint64_t *)v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v181, "intercept_left", (uint64_t *)&__p);
  v36 = __p;
  __p = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  if (v173)
  {
    v37 = &v173->__shared_owners_;
    do
      v38 = __ldaxr((unint64_t *)v37);
    while (__stlxr(v38 - 1, (unint64_t *)v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v181, "intercept_right", (uint64_t *)&__p);
  v40 = __p;
  __p = 0;
  if (v40)
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  if (v172)
  {
    v41 = &v172->__shared_owners_;
    do
      v42 = __ldaxr((unint64_t *)v41);
    while (__stlxr(v42 - 1, (unint64_t *)v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v181, "slope_left", (uint64_t *)&__p);
  v44 = __p;
  __p = 0;
  if (v44)
    (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
  if (v171)
  {
    v45 = &v171->__shared_owners_;
    do
      v46 = __ldaxr((unint64_t *)v45);
    while (__stlxr(v46 - 1, (unint64_t *)v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 32))(*((_QWORD *)v43 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v181, "slope_right", (uint64_t *)&__p);
  v48 = __p;
  __p = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  if (v170)
  {
    v49 = &v170->__shared_owners_;
    do
      v50 = __ldaxr((unint64_t *)v49);
    while (__stlxr(v50 - 1, (unint64_t *)v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v181, "in_abs", (uint64_t *)&__p);
  v52 = __p;
  __p = 0;
  if (v52)
    (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
  if (v169)
  {
    v53 = &v169->__shared_owners_;
    do
      v54 = __ldaxr((unint64_t *)v53);
    while (__stlxr(v54 - 1, (unint64_t *)v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v181, "lut_mode", (uint64_t *)&__p);
  v56 = __p;
  __p = 0;
  if (v56)
    (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
  if (v168)
  {
    v57 = &v168->__shared_owners_;
    do
      v58 = __ldaxr((unint64_t *)v57);
    while (__stlxr(v58 - 1, (unint64_t *)v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 32))(*((_QWORD *)v55 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v181, "sign_mode", (uint64_t *)&__p);
  v60 = __p;
  __p = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  if (v167)
  {
    v61 = &v167->__shared_owners_;
    do
      v62 = __ldaxr((unint64_t *)v61);
    while (__stlxr(v62 - 1, (unint64_t *)v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  v166 = 0;
  v63 = operator new();
  *(_QWORD *)v63 = 0;
  *(_QWORD *)(v63 + 8) = 0;
  *(_QWORD *)(v63 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, (void **)v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v166, 1uLL);
  v64 = v166;
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v66;
  v66->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v65;
  v198 = (std::__shared_weak_count_vtbl *)&v66->~__shared_weak_count_0;
  v199 = &v66->~__shared_weak_count_0;
  v204 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v67 = v165;
  v205 = v165;
  if (v165)
  {
    v68 = (_QWORD *)operator new();
    v69 = v165;
    *v68 = &unk_24BFE7320;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v69;
  }
  else
  {
    v68 = 0;
  }
  v206 = v68;
  v165 = 0;
  v70 = v64[2];
  v71 = v64[1];
  if (v71 >= v70)
  {
    v73 = (v71 - *v64) >> 4;
    v74 = v73 + 1;
    if ((unint64_t)(v73 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v75 = v70 - *v64;
    if (v75 >> 3 > v74)
      v74 = v75 >> 3;
    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0)
      v76 = 0xFFFFFFFFFFFFFFFLL;
    else
      v76 = v74;
    v185[1] = v64 + 2;
    v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v64 + 2), v76);
    v79 = &v77[16 * v73];
    *(_QWORD *)v79 = v67;
    *((_QWORD *)v79 + 1) = v68;
    v205 = 0;
    v206 = 0;
    v81 = *v64;
    v80 = v64[1];
    if (v80 == *v64)
    {
      v84 = v64[1];
      v82 = &v77[16 * v73];
    }
    else
    {
      v82 = &v77[16 * v73];
      do
      {
        v83 = *((_OWORD *)v80 - 1);
        v80 -= 16;
        *((_OWORD *)v82 - 1) = v83;
        v82 -= 16;
        *(_QWORD *)v80 = 0;
        *((_QWORD *)v80 + 1) = 0;
      }
      while (v80 != v81);
      v84 = *v64;
      v80 = v64[1];
    }
    v72 = v79 + 16;
    *v64 = v82;
    __p = v84;
    v183 = v84;
    v64[1] = v79 + 16;
    v184 = v80;
    v85 = v64[2];
    v64[2] = &v77[16 * v78];
    v185[0] = v85;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v71 = v67;
    *((_QWORD *)v71 + 1) = v68;
    v72 = v71 + 16;
    v205 = 0;
    v206 = 0;
  }
  v64[1] = v72;
  v86 = v165;
  v165 = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  if (v164)
  {
    v87 = &v164->__shared_owners_;
    do
      v88 = __ldaxr((unint64_t *)v87);
    while (__stlxr(v88 - 1, (unint64_t *)v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  if (Scalar)
  {
    v198 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v162 = *(_OWORD *)a2;
  v163 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v89 = v181;
  v160 = v181;
  if (v181)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v89;
  }
  else
  {
    v90 = 0;
  }
  v161 = v90;
  v181 = 0;
  v158 = v166;
  if (v166)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v166;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v159 = v91;
  v166 = 0;
  v202[0] = &unk_24BFE7440;
  v202[1] = ANEMachineIR::H2022::Validators::ValidateNePiecewiseV2;
  v203 = (MIL::Validation::TensorSymbolicShapeConstraints *)v202;
  v201 = 0;
  MIL::IROperator::Make();
  v93 = v201;
  if (v201 == v200)
  {
    v94 = 4;
    v93 = v200;
  }
  else
  {
    if (!v201)
      goto LABEL_133;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_133:
  v95 = v203;
  if (v203 == (MIL::Validation::TensorSymbolicShapeConstraints *)v202)
  {
    v96 = 4;
    v95 = (MIL::Validation::TensorSymbolicShapeConstraints *)v202;
    goto LABEL_137;
  }
  if (v203)
  {
    v96 = 5;
LABEL_137:
    v95 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v95 + 8 * v96))();
  }
  if (v159)
  {
    v97 = &v159->__shared_owners_;
    do
      v98 = __ldaxr((unint64_t *)v97);
    while (__stlxr(v98 - 1, (unint64_t *)v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  if (v161)
  {
    v99 = &v161->__shared_owners_;
    do
      v100 = __ldaxr((unint64_t *)v99);
    while (__stlxr(v100 - 1, (unint64_t *)v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  if (SHIBYTE(v163) < 0)
    operator delete(v162[0]);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v95);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(&v154, "y_intercept");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v156 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v157 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "LUT_SIZE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v101 + 24))(v101, &v156, 0, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v104 = v157;
  if (v157)
  {
    v105 = (unint64_t *)&v157->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v155 < 0)
    operator delete(v154);
  v108 = *a3;
  v150 = __p;
  if (__p)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)__p;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v151 = v109;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v108 + 56))(v108, &v150);
  v111 = v151;
  if (v151)
  {
    v112 = (unint64_t *)&v151->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = (MIL::Validation::PossibleStringValuesConstraints *)__p;
  __p = 0;
  if (v114)
    v114 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v114 + 8))(v114);
  MIL::Validation::PossibleStringValuesConstraints::Make(v114);
  v115 = v205;
  std::string::basic_string[abi:ne180100]<0>(&v146, "lut_mode");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v148 = v165;
  if (v165)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = v165;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = (std::__shared_weak_count_vtbl *)v117;
  }
  else
  {
    v116 = 0;
  }
  v149 = v116;
  v165 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "cos");
  std::string::basic_string[abi:ne180100]<0>(v185, "exp2");
  std::string::basic_string[abi:ne180100]<0>(v186, "frac");
  std::string::basic_string[abi:ne180100]<0>(v187, "int");
  std::string::basic_string[abi:ne180100]<0>(v188, "inv");
  std::string::basic_string[abi:ne180100]<0>(v189, "left_lut");
  std::string::basic_string[abi:ne180100]<0>(v190, "log2");
  std::string::basic_string[abi:ne180100]<0>(v191, "lut");
  std::string::basic_string[abi:ne180100]<0>(v192, "rsqrt");
  std::string::basic_string[abi:ne180100]<0>(v193, "sin");
  std::string::basic_string[abi:ne180100]<0>(v194, "split_lut");
  std::string::basic_string[abi:ne180100]<0>(v195, "sqr");
  std::string::basic_string[abi:ne180100]<0>(v196, "sqrt");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 13);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v115 + 24))(v115, &v148, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  v118 = 312;
  do
  {
    if (*((char *)&__p + v118 - 1) < 0)
      operator delete(*(void **)&v179[v118]);
    v118 -= 24;
  }
  while (v118);
  v119 = v149;
  if (v149)
  {
    v120 = (unint64_t *)&v149->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v165;
  v165 = 0;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  if (v147 < 0)
    operator delete(v146);
  v123 = v205;
  std::string::basic_string[abi:ne180100]<0>(&v142, "sign_mode");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v144 = v165;
  if (v165)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = v165;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = (std::__shared_weak_count_vtbl *)v125;
  }
  else
  {
    v124 = 0;
  }
  v145 = v124;
  v165 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "copy");
  std::string::basic_string[abi:ne180100]<0>(v185, "invert");
  std::string::basic_string[abi:ne180100]<0>(v186, "negzero");
  std::string::basic_string[abi:ne180100]<0>(v187, "pass");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 4);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v123 + 24))(v123, &v144, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v187[i + 2]) < 0)
      operator delete((void *)v187[i]);
  }
  v127 = v145;
  if (v145)
  {
    v128 = (unint64_t *)&v145->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v165;
  v165 = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  if (v143 < 0)
    operator delete(v142);
  v131 = *a3;
  v140 = v205;
  if (v205)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = v205;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = (std::__shared_weak_count_vtbl *)v133;
  }
  else
  {
    v132 = 0;
  }
  v141 = v132;
  v205 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v131 + 56))(v131, &v140);
  v134 = v141;
  if (v141)
  {
    v135 = (unint64_t *)&v141->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v205;
  v205 = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, 0);
  result = v181;
  if (v181)
  {
    v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v181);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v139, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068B5BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;

  v71 = *(_QWORD *)(v69 - 88);
  *(_QWORD *)(v69 - 88) = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = *v68;
  *v68 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a41, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Relu::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2022::Validators::ValidateRelu;
  v7 = v6;
  ANEMachineIR::H2022::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_2068B629C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2022::ScaledActivation::Make(MIL::IRUnknownDimension *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t *p_shared_owners;
  unint64_t v11;
  unsigned __int8 *v12;
  void *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  char **v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count_vtbl *result;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  void *v55[2];
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  char **v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count_vtbl *v62;
  void *__p;
  void *v64;
  char *v65;
  char *v66;
  char **v67;
  _BYTE v68[24];
  _BYTE *v69;
  _QWORD v70[3];
  _QWORD *v71;
  void *Scalar;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v62 = (std::__shared_weak_count_vtbl *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v64 = v8 + 1;
  v65 = (char *)(v8 + 1);
  v76 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  if (v61)
  {
    p_shared_owners = &v61->__shared_owners_;
    do
      v11 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v11 - 1, (unint64_t *)p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v62, "scale", (uint64_t *)&__p);
  v13 = __p;
  __p = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  if (v60)
  {
    v14 = &v60->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v12 + 5) + 32))(*((_QWORD *)v12 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v12 + 5) + 48))(*((_QWORD *)v12 + 5), 1);
  v59 = 0;
  v16 = operator new();
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v59, (void **)v16);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v59, 1uLL);
  v17 = v59;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = operator new(8uLL);
  Scalar = v19;
  *v19 = v18;
  v73 = v19 + 1;
  v74 = v19 + 1;
  v75 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v76 = v58;
  if (v58)
  {
    v20 = (_QWORD *)operator new();
    *v20 = &unk_24BFE7320;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v58;
  }
  else
  {
    v20 = 0;
  }
  v77 = v20;
  v21 = v17[2];
  v22 = v17[1];
  if (v22 >= v21)
  {
    v24 = (v22 - *v17) >> 4;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v26 = v21 - *v17;
    if (v26 >> 3 > v25)
      v25 = v26 >> 3;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
      v27 = 0xFFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    v67 = v17 + 2;
    v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v17 + 2), v27);
    v30 = (uint64_t *)&v28[16 * v24];
    *v30 = v58;
    v30[1] = (uint64_t)v20;
    v76 = 0;
    v77 = 0;
    v32 = *v17;
    v31 = v17[1];
    if (v31 == *v17)
    {
      v35 = v17[1];
      v33 = &v28[16 * v24];
    }
    else
    {
      v33 = &v28[16 * v24];
      do
      {
        v34 = *((_OWORD *)v31 - 1);
        v31 -= 16;
        *((_OWORD *)v33 - 1) = v34;
        v33 -= 16;
        *(_QWORD *)v31 = 0;
        *((_QWORD *)v31 + 1) = 0;
      }
      while (v31 != v32);
      v35 = *v17;
      v31 = v17[1];
    }
    v23 = (char *)(v30 + 2);
    *v17 = v33;
    __p = v35;
    v64 = v35;
    v17[1] = (char *)(v30 + 2);
    v65 = v31;
    v36 = v17[2];
    v17[2] = &v28[16 * v29];
    v66 = v36;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v22 = v58;
    *((_QWORD *)v22 + 1) = v20;
    v23 = v22 + 16;
    v76 = 0;
    v77 = 0;
  }
  v17[1] = v23;
  if (v57)
  {
    v37 = (unint64_t *)&v57->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)())v57->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (Scalar)
  {
    v73 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v55 = *(_OWORD *)a2;
  v56 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v39 = v62;
  if (v62)
  {
    v40 = (std::__shared_weak_count *)operator new();
    v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v40->__shared_owners_ = 0;
    v40->__shared_weak_owners_ = 0;
    v40[1].__vftable = v39;
  }
  else
  {
    v40 = 0;
  }
  v54 = v40;
  v62 = 0;
  if (v59)
  {
    v41 = (std::__shared_weak_count *)operator new();
    v42 = v59;
    v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v41->__shared_owners_ = 0;
    v41->__shared_weak_owners_ = 0;
    v41[1].__vftable = (std::__shared_weak_count_vtbl *)v42;
  }
  else
  {
    v41 = 0;
  }
  v53 = v41;
  v59 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v70, a3);
  }
  else
  {
    v70[0] = &unk_24BFE7440;
    v70[1] = ANEMachineIR::H2022::Validators::ValidateScaledActivation;
    v71 = v70;
  }
  v69 = 0;
  MIL::IROperator::Make();
  v43 = v69;
  if (v69 == v68)
  {
    v44 = 4;
    v43 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_55;
    v44 = 5;
  }
  (*(void (**)(_QWORD *))(*v43 + 8 * v44))(v43);
LABEL_55:
  v45 = v71;
  if (v71 == v70)
  {
    v46 = 4;
    v45 = v70;
    goto LABEL_59;
  }
  if (v71)
  {
    v46 = 5;
LABEL_59:
    (*(void (**)(_QWORD *))(*v45 + 8 * v46))(v45);
  }
  if (v53)
  {
    v47 = (unint64_t *)&v53->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v54)
  {
    v49 = (unint64_t *)&v54->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (SHIBYTE(v56) < 0)
    operator delete(v55[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v59, 0);
  result = v62;
  if (v62)
  {
    v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v62);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v52, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068B695C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void **a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a22, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a29, 0);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2022::Lrelu::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t *p_shared_owners;
  unint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  uint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  char *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  char **v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count_vtbl *result;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  void *v57[2];
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  char **v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count_vtbl *v65;
  void *__p;
  void *v67;
  char *v68;
  char *v69;
  char **v70;
  _BYTE v71[24];
  _BYTE *v72;
  _QWORD v73[3];
  _QWORD *v74;
  void *Scalar;
  void *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  v65 = (std::__shared_weak_count_vtbl *)v4;
  v5 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v6 = operator new(8uLL);
  __p = v6;
  *v6 = v5;
  v67 = v6 + 1;
  v68 = (char *)(v6 + 1);
  v79 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v4, "x", (uint64_t *)&Scalar);
  v7 = Scalar;
  Scalar = 0;
  if (v7)
    (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
  if (v64)
  {
    p_shared_owners = &v64->__shared_owners_;
    do
      v9 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v9 - 1, (unint64_t *)p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (__p)
  {
    v67 = __p;
    operator delete(__p);
  }
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v65, "scale", (uint64_t *)&__p);
  v11 = __p;
  __p = 0;
  if (v11)
    (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
  if (v63)
  {
    v12 = &v63->__shared_owners_;
    do
      v13 = __ldaxr((unint64_t *)v12);
    while (__stlxr(v13 - 1, (unint64_t *)v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v10 + 5) + 32))(*((_QWORD *)v10 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v10 + 5) + 48))(*((_QWORD *)v10 + 5), 1);
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v65, "alpha", (uint64_t *)&__p);
  v15 = __p;
  __p = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  if (v62)
  {
    v16 = &v62->__shared_owners_;
    do
      v17 = __ldaxr((unint64_t *)v16);
    while (__stlxr(v17 - 1, (unint64_t *)v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 32))(*((_QWORD *)v14 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 48))(*((_QWORD *)v14 + 5), 1);
  v61 = 0;
  v18 = operator new();
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v61, (void **)v18);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v61, 1uLL);
  v19 = v61;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  Scalar = v21;
  *v21 = v20;
  v76 = v21 + 1;
  v77 = v21 + 1;
  v78 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v79 = v60;
  if (v60)
  {
    v22 = (_QWORD *)operator new();
    *v22 = &unk_24BFE7320;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v60;
  }
  else
  {
    v22 = 0;
  }
  v80 = v22;
  v23 = v19[2];
  v24 = v19[1];
  if (v24 >= v23)
  {
    v26 = (v24 - *v19) >> 4;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v28 = v23 - *v19;
    if (v28 >> 3 > v27)
      v27 = v28 >> 3;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
      v29 = 0xFFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    v70 = v19 + 2;
    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v19 + 2), v29);
    v32 = (uint64_t *)&v30[16 * v26];
    *v32 = v60;
    v32[1] = (uint64_t)v22;
    v79 = 0;
    v80 = 0;
    v34 = *v19;
    v33 = v19[1];
    if (v33 == *v19)
    {
      v37 = v19[1];
      v35 = &v30[16 * v26];
    }
    else
    {
      v35 = &v30[16 * v26];
      do
      {
        v36 = *((_OWORD *)v33 - 1);
        v33 -= 16;
        *((_OWORD *)v35 - 1) = v36;
        v35 -= 16;
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = 0;
      }
      while (v33 != v34);
      v37 = *v19;
      v33 = v19[1];
    }
    v25 = (char *)(v32 + 2);
    *v19 = v35;
    __p = v37;
    v67 = v37;
    v19[1] = (char *)(v32 + 2);
    v68 = v33;
    v38 = v19[2];
    v19[2] = &v30[16 * v31];
    v69 = v38;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v24 = v60;
    *((_QWORD *)v24 + 1) = v22;
    v25 = v24 + 16;
    v79 = 0;
    v80 = 0;
  }
  v19[1] = v25;
  if (v59)
  {
    v39 = (unint64_t *)&v59->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)())v59->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (Scalar)
  {
    v76 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v57 = *(_OWORD *)a2;
  v58 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v41 = v65;
  if (v65)
  {
    v42 = (std::__shared_weak_count *)operator new();
    v42->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v42->__shared_owners_ = 0;
    v42->__shared_weak_owners_ = 0;
    v42[1].__vftable = v41;
  }
  else
  {
    v42 = 0;
  }
  v56 = v42;
  v65 = 0;
  if (v61)
  {
    v43 = (std::__shared_weak_count *)operator new();
    v44 = v61;
    v43->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v43->__shared_owners_ = 0;
    v43->__shared_weak_owners_ = 0;
    v43[1].__vftable = (std::__shared_weak_count_vtbl *)v44;
  }
  else
  {
    v43 = 0;
  }
  v55 = v43;
  v61 = 0;
  v73[0] = &unk_24BFE7440;
  v73[1] = ANEMachineIR::H2022::Validators::ValidateLrelu;
  v74 = v73;
  v72 = 0;
  MIL::IROperator::Make();
  v45 = v72;
  if (v72 == v71)
  {
    v46 = 4;
    v45 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_59;
    v46 = 5;
  }
  (*(void (**)(_QWORD *))(*v45 + 8 * v46))(v45);
LABEL_59:
  v47 = v74;
  if (v74 == v73)
  {
    v48 = 4;
    v47 = v73;
    goto LABEL_63;
  }
  if (v74)
  {
    v48 = 5;
LABEL_63:
    (*(void (**)(_QWORD *))(*v47 + 8 * v48))(v47);
  }
  if (v55)
  {
    v49 = (unint64_t *)&v55->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v56)
  {
    v51 = (unint64_t *)&v56->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (SHIBYTE(v58) < 0)
    operator delete(v57[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v61, 0);
  result = v65;
  if (v65)
  {
    v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v65);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v54, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068B7204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void **a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a22, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a31, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Sigmoid::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2022::Validators::ValidateSigmoid;
  v7 = v6;
  ANEMachineIR::H2022::ScaledActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_2068B748C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Sqrt::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2022::Validators::ValidateSqrt;
  v7 = v6;
  ANEMachineIR::H2022::ScaledActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_2068B75A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Tanh::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v6[0] = &unk_24BFE7440;
  v6[1] = ANEMachineIR::H2022::Validators::ValidateTanh;
  v7 = v6;
  ANEMachineIR::H2022::ScaledActivation::Make(a1, (uint64_t)__p, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_2068B76BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::FunctionInterpreter::Call(uint64_t a1@<X0>, MIL::IRObject *a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  char *OpsetString;
  _QWORD *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *Value;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t ***v19;
  uint64_t *v20;
  uint64_t *v21;
  MIL::IRObject *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *LocationPtr;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  __int128 __p;
  uint64_t v48;
  void *v49[2];
  char v50;

  OpsetString = ANEMachineIR::GetOpsetString(a3);
  std::string::basic_string[abi:ne180100]<0>(v49, OpsetString);
  if (((*(uint64_t (**)(MIL::IRObject *, void **))(*(_QWORD *)a2 + 200))(a2, v49) & 1) != 0)
  {
    v10 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 128))(a2);
    v11 = (unsigned __int8 *)(v10 + 1);
    v12 = (unsigned __int8 *)*v10;
    if ((_QWORD *)*v10 == v10 + 1)
    {
LABEL_11:
      v17 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 112))(a2);
      v18 = (_QWORD *)std::map<std::string,std::unique_ptr<MIL::IRBlock>>::at(v17, (const void **)v49);
      v19 = (uint64_t ***)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 64))(*v18);
      v20 = **v19;
      v21 = (*v19)[1];
      if (v20 == v21)
      {
LABEL_16:
        v23 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 88))(*v18);
        v24 = *(unsigned __int8 **)v23;
        v25 = *(unsigned __int8 **)(v23 + 8);
        while (1)
        {
          if (v24 == v25)
          {
            *(_DWORD *)a5 = 0;
            std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a5 + 8), (char *)&unk_2069A5097);
            *(_QWORD *)(a5 + 32) = 0;
            *(_QWORD *)(a5 + 40) = 0;
            goto LABEL_45;
          }
          if (!MIL::ANEMachineIR::Interpreter::ComputedValueStore::TryGetValue(a4, v24))
            break;
          v24 += 24;
        }
        *(_DWORD *)a5 = 4;
        std::operator+<char>();
        LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(a2);
        *(_QWORD *)(a5 + 32) = *LocationPtr;
        v39 = LocationPtr[1];
        *(_QWORD *)(a5 + 40) = v39;
        if (v39)
        {
          v40 = (unint64_t *)(v39 + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
      }
      else
      {
        while (1)
        {
          v22 = (MIL::IRObject *)*v20;
          MIL::ANEMachineIR::Interpreter::DelegateByNameOp::Run(a1, *v20, (uint64_t)a4, &v46);
          if (v46)
            break;
          if (SHIBYTE(v48) < 0)
            operator delete((void *)__p);
          v20 += 2;
          if (v20 == v21)
            goto LABEL_16;
        }
        *(_DWORD *)a5 = v46;
        if (SHIBYTE(v48) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(a5 + 8), (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
        }
        else
        {
          *(_OWORD *)(a5 + 8) = __p;
          *(_QWORD *)(a5 + 24) = v48;
        }
        v42 = (_QWORD *)MIL::IRObject::GetLocationPtr(v22);
        *(_QWORD *)(a5 + 32) = *v42;
        v43 = v42[1];
        *(_QWORD *)(a5 + 40) = v43;
        if (v43)
        {
          v44 = (unint64_t *)(v43 + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        if (SHIBYTE(v48) < 0)
          operator delete((void *)__p);
      }
    }
    else
    {
      while (1)
      {
        Value = MIL::ANEMachineIR::Interpreter::ComputedValueStore::TryGetValue(a4, v12 + 32);
        if (!Value)
          break;
        if ((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)Value + 32))(Value) != *((_QWORD *)v12 + 7))
        {
          *(_DWORD *)a5 = 3;
          std::operator+<char>();
          v34 = (_QWORD *)MIL::IRObject::GetLocationPtr(a2);
          *(_QWORD *)(a5 + 32) = *v34;
          v35 = v34[1];
          *(_QWORD *)(a5 + 40) = v35;
          if (v35)
          {
            v36 = (unint64_t *)(v35 + 8);
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          goto LABEL_45;
        }
        v14 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = *(unsigned __int8 **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
            v16 = *(_QWORD *)v15 == (_QWORD)v12;
            v12 = v15;
          }
          while (!v16);
        }
        v12 = v15;
        if (v15 == v11)
          goto LABEL_11;
      }
      *(_DWORD *)a5 = 2;
      std::operator+<char>();
      v30 = (_QWORD *)MIL::IRObject::GetLocationPtr(a2);
      *(_QWORD *)(a5 + 32) = *v30;
      v31 = v30[1];
      *(_QWORD *)(a5 + 40) = v31;
      if (v31)
      {
        v32 = (unint64_t *)(v31 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
    }
  }
  else
  {
    *(_DWORD *)a5 = 3;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a5 + 8), "Function does not have requested opset");
    v26 = (_QWORD *)MIL::IRObject::GetLocationPtr(a2);
    *(_QWORD *)(a5 + 32) = *v26;
    v27 = v26[1];
    *(_QWORD *)(a5 + 40) = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
  }
LABEL_45:
  if (v50 < 0)
    operator delete(v49[0]);
}

void sub_2068B7AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::unique_ptr<MIL::IRBlock>>::at(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

_QWORD *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

void MilTranslator::OpTranslator::TranslateReduceMean(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  MilTranslator::OpTranslator *v7;
  MIL::IRValueType *ParameterType;
  const MIL::IRTensorValueType *v9;
  MIL::IRNamedValueType ***v10;
  MIL::IRNamedValueType **v11;
  MIL::IRNamedValueType *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  MIL::IRValueType *Type;
  uint64_t v17;
  char v18;
  char v19;
  _QWORD *v20;
  unint64_t v21;
  MIL::IRValue *ParameterValue;
  const MIL::IRTensorValueType *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  std::string::size_type v27;
  unint64_t v28;
  char v29;
  int v30;
  char v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  size_t v35;
  char *v36;
  uint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  size_t v42;
  char *v43;
  char *v44;
  char *v45;
  char v46;
  char *v47;
  char v48;
  char *v49;
  char *v50;
  char *v51;
  char v52;
  _QWORD *v53;
  MIL::IRNamedValueType *v54;
  uint64_t Name;
  char *v56;
  size_t v57;
  std::string *p_str;
  char *v59;
  uint64_t v60;
  __int128 v61;
  MIL::IRNamedValueType *v62;
  MIL::IRNamedValueType *v63;
  MIL::IRNamedValueType *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  MIL::IRNamedValueType **v73;
  _QWORD *v74;
  _QWORD *v75;
  char *v76;
  __int128 v77;
  int64x2_t v78;
  __int128 *v79;
  _QWORD *v80;
  std::string::size_type v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  _QWORD *v90;
  _QWORD *v91;
  char *v92;
  __int128 v93;
  int64x2_t v94;
  void *v95;
  MIL::IRNamedValueType *v96;
  MIL::IRNamedValueType *v97;
  _OWORD *v98;
  void *v99;
  unint64_t *v100;
  unint64_t v101;
  MIL::IRNamedValueType *v102;
  ANEMachineIR::Utils *v103;
  uint64_t *LocationPtr;
  MIL::IRValueType *v105;
  uint64_t v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string::size_type size;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  std::string::size_type v114;
  std::string *v115;
  __int128 v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  __int128 v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  ANEMachineIR::Utils *v135;
  ANEMachineIR::Utils *v136;
  uint64_t v138;
  std::string v140;
  std::string v141;
  std::string v142;
  std::__shared_weak_count *v143;
  void *v144;
  char v145;
  std::__shared_weak_count *v146;
  std::string v147;
  void *v148;
  char v149;
  std::__shared_weak_count *v150;
  std::string v151;
  void *v152;
  char v153;
  std::__shared_weak_count *v154;
  void *v155;
  char v156;
  std::string v157;
  int v158;
  char v159;
  std::string __p;
  void *v161;
  void *v162;
  void *v163;
  uint64_t v164;
  char v165;
  char v166;
  char v167;
  char v168;
  char v169;
  void *v170;
  char v171;
  char v172;
  std::string v173;
  std::string v174;
  std::string __str;
  MIL::IRNamedValueType *v176;
  MIL::IRNamedValueType *v177;
  std::vector<int> v178;
  std::string __s;
  int v180;
  char v181;
  void *v182;
  _BYTE *v183;
  int64x2_t v184;
  _QWORD v185[2];
  char *v186;
  _BYTE *v187;
  char *v188;
  std::string v189;
  MIL::IRNamedValueType *v190;
  std::__shared_weak_count *v191;
  std::string v192;
  void *v193[3];
  std::string v194;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  v4 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, _QWORD))(*(_QWORD *)a2 + 120))(a2, &__p, 0);
  v5 = v4;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v4)
      goto LABEL_3;
LABEL_6:
    *(_DWORD *)a3 = 4;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Immediate value inputs not handled.");
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v5)
    goto LABEL_6;
LABEL_3:
  if (*(char *)(v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v194.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
    *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v6;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  v7 = this;
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v136 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ANEMachineIR::Utils::GetStaticTensorShape(v136, v9, (uint64_t)v193);
  MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, (uint64_t)&v194, v136, &v192);
  v10 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 176))(a2);
  v11 = *v10;
  v12 = **v10;
  v13 = (std::__shared_weak_count *)v11[1];
  v190 = v12;
  v191 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v12);
  v17 = MIL::IRValueType::AsTensorType(Type);
  std::string::basic_string[abi:ne180100]<0>(&__p, "keep_dims");
  MIL::IROperation::GetParameterValue();
  v18 = MIL::IRValue::GetScalar<BOOL>();
  v19 = v18;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v19 & 1) != 0)
    {
LABEL_15:
      std::string::basic_string[abi:ne180100]<0>(&v189, "mean");
      v135 = (ANEMachineIR::Utils *)v17;
      v20 = (_QWORD *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)v136 + 96))(v136);
      v21 = v20[1] - *v20;
      if (v21 <= 0x17)
      {
        *(_DWORD *)a3 = 8;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "reduce_mean: input tensor rank must >= 3.");
        goto LABEL_264;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "axes");
      v186 = 0;
      v187 = 0;
      v188 = 0;
      ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(ParameterValue);
      v157.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<int>();
      v157.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
      if (v23)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = v21 >> 3;
        v29 = (v21 >> 3) - 1;
        do
        {
          if ((*(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v157, v27) & 0x80000000) != 0)
            v30 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v157, v27) + v28;
          else
            v30 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v157, v27);
          v31 = v30 - 1;
          if (v30 == 1)
          {
            if (v26 >= v25)
            {
              v37 = (uint64_t)&v26[-v24 + 1];
              if (v37 < 0)
                std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
              if (2 * (uint64_t)&v25[-v24] > (unint64_t)v37)
                v37 = 2 * (_QWORD)&v25[-v24];
              if ((unint64_t)&v25[-v24] >= 0x3FFFFFFFFFFFFFFFLL)
                v38 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v38 = v37;
              if (v38)
                v39 = (char *)operator new(v38);
              else
                v39 = 0;
              v44 = &v26[(_QWORD)v39 - v24];
              *v44 = v29;
              v33 = v44 + 1;
              if (v26 != (char *)v24)
              {
                v47 = &v26[~v24];
                do
                {
                  v48 = *--v26;
                  (v47--)[(_QWORD)v39] = v48;
                }
                while (v26 != (char *)v24);
                v44 = v39;
              }
              v25 = &v39[v38];
              v186 = v44;
              v187 = v33;
              goto LABEL_72;
            }
            *v26 = v29;
            v32 = v26 + 1;
          }
          else if (v30)
          {
            if (v30 < 2)
              goto LABEL_76;
            if (v26 >= v25)
            {
              v40 = &v26[-v24];
              v41 = (uint64_t)&v26[-v24 + 1];
              if (v41 < 0)
                std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
              if (2 * (uint64_t)&v25[-v24] > (unint64_t)v41)
                v41 = 2 * (_QWORD)&v25[-v24];
              if ((unint64_t)&v25[-v24] >= 0x3FFFFFFFFFFFFFFFLL)
                v42 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v42 = v41;
              if (v42)
                v43 = (char *)operator new(v42);
              else
                v43 = 0;
              v49 = &v40[(_QWORD)v43];
              v50 = &v40[(_QWORD)v43];
              *v50 = v31;
              v33 = v50 + 1;
              if (v26 != (char *)v24)
              {
                v51 = &v26[~v24];
                do
                {
                  v52 = *--v26;
                  (v51--)[(_QWORD)v43] = v52;
                }
                while (v26 != (char *)v24);
                v49 = v43;
              }
              v25 = &v43[v42];
              v186 = v49;
              v188 = v25;
              if (v24)
                operator delete((void *)v24);
              v24 = (unint64_t)v49;
              v7 = this;
              goto LABEL_75;
            }
            *v26 = v31;
            v32 = v26 + 1;
          }
          else
          {
            if (v26 >= v25)
            {
              v34 = (uint64_t)&v26[-v24 + 1];
              if (v34 < 0)
                std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
              if (2 * (uint64_t)&v25[-v24] > (unint64_t)v34)
                v34 = 2 * (_QWORD)&v25[-v24];
              if ((unint64_t)&v25[-v24] >= 0x3FFFFFFFFFFFFFFFLL)
                v35 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v35 = v34;
              if (v35)
                v36 = (char *)operator new(v35);
              else
                v36 = 0;
              v44 = &v26[(_QWORD)v36 - v24];
              *v44 = 0;
              v33 = v44 + 1;
              if (v26 != (char *)v24)
              {
                v45 = &v26[~v24];
                do
                {
                  v46 = *--v26;
                  (v45--)[(_QWORD)v36] = v46;
                }
                while (v26 != (char *)v24);
                v44 = v36;
              }
              v25 = &v36[v35];
              v186 = v44;
LABEL_72:
              v188 = v25;
              if (v24)
                operator delete((void *)v24);
              v24 = (unint64_t)v44;
              goto LABEL_75;
            }
            *v26 = 0;
            v32 = v26 + 1;
          }
          v33 = v32;
LABEL_75:
          v187 = v33;
          v26 = v33;
LABEL_76:
          ++v27;
        }
        while (v27 < v157.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v184 = 0uLL;
      v185[0] = 0;
      ANEMachineIR::Utils::GetStaticTensorShape(v135, v23, (uint64_t)&v182);
      v53 = (_QWORD *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)v136 + 96))(v136);
      MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)v7, (uint64_t)&v194, (uint64_t)(v53[1] - *v53) >> 3, (uint64_t)&__s);
      MilTranslator::OpTranslator::GetTransposeOpParamPerm((v183 - (_BYTE *)v182) >> 3, (uint64_t)&__s, &v178);
      if (MilTranslator::OpTranslator::IsTransposeRequired(&v178))
      {
        MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)&v182, (unsigned int **)&v178, &v176);
        (*(void (**)(ANEMachineIR::Utils *))(*(_QWORD *)v135 + 88))(v135);
        MIL::IRTensorValueType::Make();
        v54 = v190;
        Name = MIL::IRNamedValueType::GetName(v190);
        v56 = (char *)Name;
        if (*(char *)(Name + 23) >= 0)
          v57 = *(unsigned __int8 *)(Name + 23);
        else
          v57 = *(_QWORD *)(Name + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v57 + 13);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v57)
        {
          if (v56[23] >= 0)
            v59 = v56;
          else
            v59 = *(char **)v56;
          memmove(p_str, v59, v57);
        }
        strcpy((char *)p_str + v57, "_channel_last");
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v157, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v157 = __s;
        v158 = v180;
        v159 = v181;
        std::string::operator=(&v157, &__str);
        v79 = (__int128 *)MIL::IRNamedValueType::GetName(v54);
        std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&__p, v79, (__int128 *)&v157);
        std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>((uint64_t)v7 + 296, (unsigned __int8 *)&__p, (__int128 *)&__p);
        if (SHIBYTE(v163) < 0)
          operator delete(v161);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v174, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          v174 = __str;
        MIL::IRNamedValueType::Make();
        v141.__r_.__value_.__r.__words[0] = v140.__r_.__value_.__r.__words[0];
        if (v140.__r_.__value_.__r.__words[0])
        {
          v80 = (_QWORD *)operator new();
          v81 = v140.__r_.__value_.__r.__words[0];
          *v80 = &unk_24BFE76D0;
          v80[1] = 0;
          v80[2] = 0;
          v80[3] = v81;
        }
        else
        {
          v80 = 0;
        }
        v141.__r_.__value_.__l.__size_ = (std::string::size_type)v80;
        v140.__r_.__value_.__r.__words[0] = 0;
        v82 = v184.i64[1];
        if (v184.i64[1] >= v185[0])
        {
          v83 = (v184.i64[1] - v184.i64[0]) >> 4;
          v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 60)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v85 = v185[0] - v184.i64[0];
          if ((v185[0] - v184.i64[0]) >> 3 > v84)
            v84 = v85 >> 3;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
            v86 = 0xFFFFFFFFFFFFFFFLL;
          else
            v86 = v84;
          v162 = v185;
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)v185, v86);
          v89 = &v87[16 * v83];
          *(_OWORD *)v89 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = 0uLL;
          v90 = (_QWORD *)v184.i64[1];
          v91 = (_QWORD *)v184.i64[0];
          if (v184.i64[1] == v184.i64[0])
          {
            v94 = vdupq_n_s64(v184.u64[1]);
            v92 = &v87[16 * v83];
          }
          else
          {
            v92 = &v87[16 * v83];
            do
            {
              v93 = *((_OWORD *)v90 - 1);
              v90 -= 2;
              *((_OWORD *)v92 - 1) = v93;
              v92 -= 16;
              *v90 = 0;
              v90[1] = 0;
            }
            while (v90 != v91);
            v94 = v184;
          }
          v98 = v89 + 16;
          v184.i64[0] = (uint64_t)v92;
          v184.i64[1] = (uint64_t)(v89 + 16);
          *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v94;
          v99 = (void *)v185[0];
          v185[0] = &v87[16 * v88];
          v161 = v99;
          __p.__r_.__value_.__r.__words[0] = v94.i64[0];
          std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
          v184.i64[1] = (uint64_t)v98;
          if (v141.__r_.__value_.__l.__size_)
          {
            v100 = (unint64_t *)(v141.__r_.__value_.__l.__size_ + 8);
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              (*(void (**)(std::string::size_type))(*(_QWORD *)v141.__r_.__value_.__l.__size_ + 16))(v141.__r_.__value_.__l.__size_);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v141.__r_.__value_.__l.__size_);
            }
          }
        }
        else
        {
          *(_QWORD *)v184.i64[1] = v141.__r_.__value_.__r.__words[0];
          *(_QWORD *)(v82 + 8) = v80;
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = 0uLL;
          v184.i64[1] = v82 + 16;
        }
        v102 = (MIL::IRNamedValueType *)v140.__r_.__value_.__r.__words[0];
        v140.__r_.__value_.__r.__words[0] = 0;
        if (v102)
        {
          MIL::IRNamedValueType::~IRNamedValueType(v102);
          MEMORY[0x20BCFF140]();
        }
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v174.__r_.__value_.__l.__data_);
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v97 = v176;
        if (!v176)
          goto LABEL_166;
        v177 = v176;
      }
      else
      {
        v60 = MIL::IRNamedValueType::GetName(v190);
        if (*(char *)(v60 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)v60, *(_QWORD *)(v60 + 8));
        }
        else
        {
          v61 = *(_OWORD *)v60;
          v173.__r_.__value_.__r.__words[2] = *(_QWORD *)(v60 + 16);
          *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v61;
        }
        MIL::IRNamedValueType::Make();
        v62 = v176;
        v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v176;
        if (v176)
        {
          v63 = (MIL::IRNamedValueType *)operator new();
          v64 = v176;
          *(_QWORD *)v63 = &unk_24BFE76D0;
          *((_QWORD *)v63 + 1) = 0;
          *((_QWORD *)v63 + 2) = 0;
          *((_QWORD *)v63 + 3) = v64;
        }
        else
        {
          v63 = 0;
        }
        v157.__r_.__value_.__l.__size_ = (std::string::size_type)v63;
        v176 = 0;
        v65 = v184.i64[1];
        if (v184.i64[1] >= v185[0])
        {
          v67 = (v184.i64[1] - v184.i64[0]) >> 4;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 60)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v69 = v185[0] - v184.i64[0];
          if ((v185[0] - v184.i64[0]) >> 3 > v68)
            v68 = v69 >> 3;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
            v70 = 0xFFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          v162 = v185;
          v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)v185, v70);
          v73 = (MIL::IRNamedValueType **)&v71[16 * v67];
          *v73 = v62;
          v73[1] = v63;
          *(_OWORD *)&v157.__r_.__value_.__l.__data_ = 0uLL;
          v74 = (_QWORD *)v184.i64[1];
          v75 = (_QWORD *)v184.i64[0];
          if (v184.i64[1] == v184.i64[0])
          {
            v78 = vdupq_n_s64(v184.u64[1]);
            v76 = &v71[16 * v67];
          }
          else
          {
            v76 = &v71[16 * v67];
            do
            {
              v77 = *((_OWORD *)v74 - 1);
              v74 -= 2;
              *((_OWORD *)v76 - 1) = v77;
              v76 -= 16;
              *v74 = 0;
              v74[1] = 0;
            }
            while (v74 != v75);
            v78 = v184;
          }
          v66 = v73 + 2;
          v184.i64[0] = (uint64_t)v76;
          v184.i64[1] = (uint64_t)(v73 + 2);
          *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v78;
          v95 = (void *)v185[0];
          v185[0] = &v71[16 * v72];
          v161 = v95;
          __p.__r_.__value_.__r.__words[0] = v78.i64[0];
          std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          *(_QWORD *)v184.i64[1] = v62;
          *(_QWORD *)(v65 + 8) = v63;
          v66 = (_QWORD *)(v65 + 16);
        }
        v184.i64[1] = (uint64_t)v66;
        v96 = v176;
        v176 = 0;
        if (v96)
        {
          MIL::IRNamedValueType::~IRNamedValueType(v96);
          MEMORY[0x20BCFF140]();
        }
        if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_166;
        v97 = (MIL::IRNamedValueType *)v173.__r_.__value_.__r.__words[0];
      }
      operator delete(v97);
LABEL_166:
      MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v193, (unsigned int **)&v178, &v176);
      (*(void (**)(ANEMachineIR::Utils *))(*(_QWORD *)v136 + 88))(v136);
      memset(&__p, 0, sizeof(__p));
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v176, (uint64_t)v177, (v177 - v176) >> 3);
      v103 = (ANEMachineIR::Utils *)MIL::IRTensorValueType::Make();
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      memset(&__str, 0, sizeof(__str));
      if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
      else
        __p = v189;
      LOBYTE(v161) = 1;
      v163 = 0;
      v164 = 0;
      v162 = 0;
      std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v162, v186, (uint64_t)v187, v187 - v186);
      v165 = 1;
      v166 = 0;
      v167 = 0;
      v168 = 0;
      v169 = 0;
      LOBYTE(v170) = 0;
      v172 = 0;
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      (*(void (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
      if (v184.i64[1] == v184.i64[0])
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v105 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v184.i64[0]);
      v106 = MIL::IRValueType::AsTensorType(v105);
      ANEMachineIR::Validators::ValidatePeReduce(LocationPtr, v103, v106, (uint64_t)&__p, (MIL::ValidationResult *)&v157);
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v157))
      {
        std::string::basic_string[abi:ne180100]<0>(&v155, "pe_reduce");
        MilTranslator::OpTranslator::AddOperation((uint64_t)this);
        if (v156 < 0)
          operator delete(v155);
        std::string::basic_string[abi:ne180100]<0>(&v152, "x");
        if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v151, v192.__r_.__value_.__l.__data_, v192.__r_.__value_.__l.__size_);
        else
          v151 = v192;
        MIL::Builder::OperationBuilder::AddInput();
        v117 = v154;
        if (v154)
        {
          v118 = (unint64_t *)&v154->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v151.__r_.__value_.__l.__data_);
        if (v153 < 0)
          operator delete(v152);
        std::string::basic_string[abi:ne180100]<0>(&v148, "reduction");
        if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v147, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
        else
          v147 = v189;
        MIL::Builder::OperationBuilder::AddInputString();
        v120 = v150;
        if (v150)
        {
          v121 = (unint64_t *)&v150->__shared_owners_;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
        }
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v147.__r_.__value_.__l.__data_);
        if (v149 < 0)
          operator delete(v148);
        std::string::basic_string[abi:ne180100]<0>(&v144, "reduction_axes");
        MIL::Builder::OperationBuilder::AddInputInt8();
        v123 = v146;
        if (v146)
        {
          v124 = (unint64_t *)&v146->__shared_owners_;
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
            std::__shared_weak_count::__release_weak(v123);
          }
        }
        if (v145 < 0)
          operator delete(v144);
        if (v184.i64[1] == v184.i64[0])
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        v126 = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)v184.i64[0]);
        if (*(char *)(v126 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)v126, *(_QWORD *)(v126 + 8));
        }
        else
        {
          v127 = *(_OWORD *)v126;
          v142.__r_.__value_.__r.__words[2] = *(_QWORD *)(v126 + 16);
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v127;
        }
        if (v184.i64[1] == v184.i64[0])
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v184.i64[0]);
        MIL::Builder::OperationBuilder::AddOutput();
        v128 = v143;
        if (v143)
        {
          v129 = (unint64_t *)&v143->__shared_owners_;
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v142.__r_.__value_.__l.__data_);
        *(_DWORD *)a3 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
        if (v141.__r_.__value_.__l.__size_)
        {
          v131 = (unint64_t *)(v141.__r_.__value_.__l.__size_ + 8);
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            (*(void (**)(std::string::size_type))(*(_QWORD *)v141.__r_.__value_.__l.__size_ + 16))(v141.__r_.__value_.__l.__size_);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v141.__r_.__value_.__l.__size_);
          }
        }
      }
      else
      {
        MIL::MILResult::GetMessage((MIL::MILResult *)&v157);
        std::operator+<char>();
        v107 = std::string::append(&v140, "; ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        v141.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v109 = &v141;
        else
          v109 = (std::string *)v141.__r_.__value_.__r.__words[0];
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v141.__r_.__value_.__r.__words[2]);
        else
          size = v141.__r_.__value_.__l.__size_;
        std::string::append(&__str, (const std::string::value_type *)v109, size);
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v141.__r_.__value_.__l.__data_);
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        *(_DWORD *)a3 = 6;
        v138 = a3 + 8;
        (*(void (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
        std::operator+<char>();
        v111 = std::string::append(&v140, "', violations: ");
        v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
        v141.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v112;
        v111->__r_.__value_.__l.__size_ = 0;
        v111->__r_.__value_.__r.__words[2] = 0;
        v111->__r_.__value_.__r.__words[0] = 0;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v113 = &__str;
        else
          v113 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v114 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v114 = __str.__r_.__value_.__l.__size_;
        v115 = std::string::append(&v141, (const std::string::value_type *)v113, v114);
        v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
        *(_QWORD *)(v138 + 16) = *((_QWORD *)&v115->__r_.__value_.__l + 2);
        *(_OWORD *)v138 = v116;
        v115->__r_.__value_.__l.__size_ = 0;
        v115->__r_.__value_.__r.__words[2] = 0;
        v115->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v141.__r_.__value_.__l.__data_);
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
      }
      MEMORY[0x20BCFEAEC](&v157);
      if (v172 && v171 < 0)
        operator delete(v170);
      if (v165 && v162)
      {
        v163 = v162;
        operator delete(v162);
      }
      if ((_BYTE)v161 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v176)
      {
        v177 = v176;
        operator delete(v176);
      }
      if (v178.__begin_)
      {
        v178.__end_ = v178.__begin_;
        operator delete(v178.__begin_);
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      if (v182)
      {
        v183 = v182;
        operator delete(v182);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
      std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v186)
      {
        v187 = v186;
        operator delete(v186);
      }
LABEL_264:
      if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v189.__r_.__value_.__l.__data_);
      v13 = v191;
      if (!v191)
        goto LABEL_271;
      goto LABEL_267;
    }
  }
  else if ((v18 & 1) != 0)
  {
    goto LABEL_15;
  }
  *(_DWORD *)a3 = 8;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "reduce_mean: keep_dim must be true.");
  if (v13)
  {
LABEL_267:
    v133 = (unint64_t *)&v13->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_271:
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v192.__r_.__value_.__l.__data_);
  if (v193[0])
  {
    v193[1] = v193[0];
    operator delete(v193[0]);
  }
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v194.__r_.__value_.__l.__data_);
}

void sub_2068B8E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v62;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;

  if (a39 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  MEMORY[0x20BCFEAEC](&a54);
  ANEMachineIR::Validators::PeReduceParamValues::~PeReduceParamValues((void **)&a62);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  v64 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v64;
    operator delete(v64);
  }
  v65 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v65;
    operator delete(v65);
  }
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  v66 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v66;
    operator delete(v66);
  }
  a54 = &STACK[0x2C0];
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  v67 = *(void **)(v62 - 240);
  if (v67)
  {
    *(_QWORD *)(v62 - 232) = v67;
    operator delete(v67);
  }
  if (*(char *)(v62 - 193) < 0)
    operator delete(*(void **)(v62 - 216));
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v62 - 192);
  if (*(char *)(v62 - 153) < 0)
    operator delete(*(void **)(v62 - 176));
  v68 = *(void **)(v62 - 152);
  if (v68)
  {
    *(_QWORD *)(v62 - 144) = v68;
    operator delete(v68);
  }
  if (*(char *)(v62 - 105) < 0)
    operator delete(*(void **)(v62 - 128));
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::PeReduceParamValues::~PeReduceParamValues(void **this)
{
  void *v2;

  if (*((_BYTE *)this + 104) && *((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((_BYTE *)this + 56))
  {
    v2 = this[4];
    if (v2)
    {
      this[5] = v2;
      operator delete(v2);
    }
  }
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*this);
  }
}

_QWORD *std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2068B9278(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ANEMachineIR::H2020::NeReduce::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char **v62;
  uint64_t v63;
  std::__shared_weak_count_vtbl *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  char *v86;
  char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  char **v95;
  _QWORD *v96;
  uint64_t v97;
  MIL::Validation::TensorDTypeConstraints *v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  void *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  void *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  MIL::Validation::TensorSymbolicShapeConstraints *v124;
  void *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  void *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  void *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  MIL::Validation::PossibleStringValuesConstraints *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  uint64_t i;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  uint64_t result;
  uint64_t v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  void *v172;
  char v173;
  void *v174;
  std::__shared_weak_count *v175;
  void *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  void *v184;
  char v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  void *v188[2];
  char v189;
  void *v190;
  char v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  void *v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202;
  char v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  char **v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  uint64_t v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char **v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count *v226;
  void *__p;
  void *v228;
  _QWORD *v229;
  std::__shared_weak_count *v230;
  _QWORD *v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD v235[3];
  uint64_t v236[3];
  _QWORD v237[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v239;
  uint64_t v240;
  _BYTE v241[24];
  _BYTE *v242;
  _QWORD v243[3];
  MIL::Validation::TensorDTypeConstraints *v244;
  std::__shared_weak_count_vtbl *v245;
  std::__shared_weak_count_vtbl *v246;
  void (__cdecl **v247)(std::__shared_weak_count *__hidden);
  uint64_t v248;

  v248 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v231 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v239 = (uint64_t)&v8->~__shared_weak_count_0;
  v240 = (uint64_t)&v8->~__shared_weak_count_0;
  v232 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v245 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v246 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v247 = &v10->~__shared_weak_count_0;
  v233 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v229 = v12 + 1;
  v228 = v12 + 1;
  v234 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v212);
  v13 = v212;
  v212 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v230;
  if (v230)
  {
    p_shared_owners = (unint64_t *)&v230->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v228 = __p;
    operator delete(__p);
  }
  if (v245)
  {
    v246 = v245;
    operator delete(v245);
  }
  if (Scalar)
  {
    v239 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v17, "reduction", (uint64_t *)&v232);
  v19 = v232;
  v232 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v226;
  if (v226)
  {
    v21 = (unint64_t *)&v226->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v231;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = operator new(8uLL);
  v232 = v25;
  *v25 = v24;
  v234 = (uint64_t)(v25 + 1);
  v233 = (uint64_t)(v25 + 1);
  v245 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v23, "reduction_axes", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = v225;
  if (v225)
  {
    v29 = (unint64_t *)&v225->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v232)
  {
    v233 = (uint64_t)v232;
    operator delete(v232);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v31 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v31, "bias", (uint64_t *)&v232);
  v33 = v232;
  v232 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = v224;
  if (v224)
  {
    v35 = (unint64_t *)&v224->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 48))(*((_QWORD *)v32 + 5), 1);
  v37 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v37, "acc_left_shift", (uint64_t *)&v232);
  v39 = v232;
  v232 = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = v223;
  if (v223)
  {
    v41 = (unint64_t *)&v223->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 48))(*((_QWORD *)v38 + 5), 1);
  v43 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v43, "acc_bias_shift", (uint64_t *)&v232);
  v45 = v232;
  v232 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = v222;
  if (v222)
  {
    v47 = (unint64_t *)&v222->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v49, "post_right_shift", (uint64_t *)&v232);
  v51 = v232;
  v232 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = v221;
  if (v221)
  {
    v53 = (unint64_t *)&v221->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 48))(*((_QWORD *)v50 + 5), 1);
  v55 = v231;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v55, "post_scale", (uint64_t *)&v232);
  v57 = v232;
  v232 = 0;
  if (v57)
    (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = v220;
  if (v220)
  {
    v59 = (unint64_t *)&v220->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 48))(*((_QWORD *)v56 + 5), 1);
  v219 = 0;
  v61 = operator new();
  *(_QWORD *)v61 = 0;
  *(_QWORD *)(v61 + 8) = 0;
  *(_QWORD *)(v61 + 16) = 0;
  v232 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, (void **)v61);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v232, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v219, 1uLL);
  v62 = v219;
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v245 = v64;
  v64->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v63;
  v246 = (std::__shared_weak_count_vtbl *)&v64->~__shared_weak_count_0;
  v247 = &v64->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  __p = v66;
  *v66 = v65;
  v229 = v66 + 1;
  v228 = v66 + 1;
  v239 = MIL::IRTensorValueType::MakeWithShape();
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v212 = v68;
  *v68 = v67;
  v213 = v68 + 1;
  v214 = v68 + 1;
  v240 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v69 = v216;
  v217 = v216;
  if (v216)
  {
    v70 = (_QWORD *)operator new();
    v71 = v216;
    *v70 = &unk_24BFE7320;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  v218 = v70;
  v216 = 0;
  v72 = v62[2];
  v73 = v62[1];
  if (v73 >= v72)
  {
    v75 = (v73 - *v62) >> 4;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v77 = v72 - *v62;
    if (v77 >> 3 > v76)
      v76 = v77 >> 3;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
      v78 = 0xFFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    v235[1] = v62 + 2;
    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v62 + 2), v78);
    v81 = &v79[16 * v75];
    *(_QWORD *)v81 = v69;
    *((_QWORD *)v81 + 1) = v70;
    v217 = 0;
    v218 = 0;
    v83 = *v62;
    v82 = v62[1];
    if (v82 == *v62)
    {
      v86 = v62[1];
      v84 = &v79[16 * v75];
    }
    else
    {
      v84 = &v79[16 * v75];
      do
      {
        v85 = *((_OWORD *)v82 - 1);
        v82 -= 16;
        *((_OWORD *)v84 - 1) = v85;
        v84 -= 16;
        *(_QWORD *)v82 = 0;
        *((_QWORD *)v82 + 1) = 0;
      }
      while (v82 != v83);
      v86 = *v62;
      v82 = v62[1];
    }
    v74 = v81 + 16;
    *v62 = v84;
    v233 = (uint64_t)v86;
    v62[1] = v81 + 16;
    v234 = (uint64_t)v82;
    v87 = v62[2];
    v62[2] = &v79[16 * v80];
    v235[0] = v87;
    v232 = v86;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v232);
  }
  else
  {
    *(_QWORD *)v73 = v69;
    *((_QWORD *)v73 + 1) = v70;
    v74 = v73 + 16;
    v217 = 0;
    v218 = 0;
  }
  v62[1] = v74;
  v88 = v216;
  v216 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v215;
  if (v215)
  {
    v90 = (unint64_t *)&v215->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (__p)
  {
    v228 = __p;
    operator delete(__p);
  }
  if (v245)
  {
    v246 = v245;
    operator delete(v245);
  }
  *(_OWORD *)v210 = *(_OWORD *)a2;
  v211 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v92 = (uint64_t)v231;
  v208 = (uint64_t)v231;
  if (v231)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v93 = 0;
  }
  v209 = v93;
  v231 = 0;
  v206 = v219;
  if (v219)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = v219;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = (std::__shared_weak_count_vtbl *)v95;
  }
  else
  {
    v94 = 0;
  }
  v207 = v94;
  v219 = 0;
  v243[0] = &unk_24BFE7440;
  v243[1] = ANEMachineIR::H2020::Validators::ValidateNeReduce;
  v244 = (MIL::Validation::TensorDTypeConstraints *)v243;
  v242 = 0;
  MIL::IROperator::Make();
  v96 = v242;
  if (v242 == v241)
  {
    v97 = 4;
    v96 = v241;
  }
  else
  {
    if (!v242)
      goto LABEL_106;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_106:
  v98 = v244;
  if (v244 == (MIL::Validation::TensorDTypeConstraints *)v243)
  {
    v99 = 4;
    v98 = (MIL::Validation::TensorDTypeConstraints *)v243;
    goto LABEL_110;
  }
  if (v244)
  {
    v99 = 5;
LABEL_110:
    v98 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v98 + 8 * v99))();
  }
  if (v207)
  {
    v100 = &v207->__shared_owners_;
    do
      v101 = __ldaxr((unint64_t *)v100);
    while (__stlxr(v101 - 1, (unint64_t *)v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  if (v209)
  {
    v102 = &v209->__shared_owners_;
    do
      v103 = __ldaxr((unint64_t *)v102);
    while (__stlxr(v103 - 1, (unint64_t *)v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  if (SHIBYTE(v211) < 0)
    operator delete(v210[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v98);
  v104 = v232;
  std::string::basic_string[abi:ne180100]<0>(&v202, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v204 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v205 = v105;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v200, "XDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v104 + 24))(v104, &v204, v200);
  if (v201 < 0)
    operator delete(v200[0]);
  v107 = v205;
  if (v205)
  {
    v108 = (unint64_t *)&v205->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  if (v203 < 0)
    operator delete(v202);
  v111 = v232;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v198 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v199 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v111 + 24))(v111, &v198, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v114 = v199;
  if (v199)
  {
    v115 = (unint64_t *)&v199->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  v118 = *a3;
  v194 = v232;
  if (v232)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)v232;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v195 = v119;
  v232 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v118 + 56))(v118, &v194);
  v121 = v195;
  if (v195)
  {
    v122 = (unint64_t *)&v195->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (MIL::Validation::TensorSymbolicShapeConstraints *)v232;
  v232 = 0;
  if (v124)
    v124 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v124 + 8))(v124);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v124);
  v125 = v232;
  std::string::basic_string[abi:ne180100]<0>(&v190, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v192 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v193 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v188, "XShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v125 + 40))(v125, &v192, v188);
  if (v189 < 0)
    operator delete(v188[0]);
  v128 = v193;
  if (v193)
  {
    v129 = (unint64_t *)&v193->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  if (v191 < 0)
    operator delete(v190);
  v132 = v232;
  std::string::basic_string[abi:ne180100]<0>(&v184, "reduction_axes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v186 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v187 = v133;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "NUM_REDUCTION_AXES");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v132 + 24))(v132, &v186, 0, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v135 = v187;
  if (v187)
  {
    v136 = (unint64_t *)&v187->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*((void (**)(std::__shared_weak_count_vtbl *))v138->~__shared_weak_count + 1))(v138);
  if (v185 < 0)
    operator delete(v184);
  v139 = v232;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v180 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v181 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "XReducedShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v139 + 40))(v139, &v180, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v142 = v181;
  if (v181)
  {
    v143 = (unint64_t *)&v181->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  v146 = *a3;
  v176 = v232;
  if (v232)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = (std::__shared_weak_count_vtbl *)v232;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v177 = v147;
  v232 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v146 + 56))(v146, &v176);
  v149 = v177;
  if (v177)
  {
    v150 = (unint64_t *)&v177->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = (MIL::Validation::PossibleStringValuesConstraints *)v232;
  v232 = 0;
  if (v152)
    v152 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v152 + 8))(v152);
  MIL::Validation::PossibleStringValuesConstraints::Make(v152);
  v153 = v245;
  std::string::basic_string[abi:ne180100]<0>(&v172, "reduction");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v174 = __p;
  if (__p)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)__p;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v175 = v154;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v232, "max");
  std::string::basic_string[abi:ne180100]<0>(v235, "mean");
  std::string::basic_string[abi:ne180100]<0>(v236, "min");
  std::string::basic_string[abi:ne180100]<0>(v237, "sum");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v232, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v153->~__shared_weak_count
   + 3))(v153, &v174, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v237[i + 2]) < 0)
      operator delete((void *)v237[i]);
  }
  v157 = v175;
  if (v175)
  {
    v158 = (unint64_t *)&v175->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = __p;
  __p = 0;
  if (v160)
    (*(void (**)(void *))(*(_QWORD *)v160 + 8))(v160);
  if (v173 < 0)
    operator delete(v172);
  v161 = *a3;
  v170 = v245;
  if (v245)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = v245;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v171 = v162;
  v245 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v161 + 56))(v161, &v170);
  v164 = v171;
  if (v171)
  {
    v165 = (unint64_t *)&v171->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v245;
  v245 = 0;
  if (v167)
    (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, 0);
  result = (uint64_t)v231;
  if (v231)
  {
    v169 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v231);
    return MEMORY[0x20BCFF140](v169, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068BA758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void **a71;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;

  v74 = *(_QWORD *)(v72 - 96);
  *(_QWORD *)(v72 - 96) = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = *v71;
  *v71 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a71, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x290], 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2020::PeReduce::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  char *v74;
  char *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  char **v83;
  _QWORD *v84;
  uint64_t v85;
  MIL::Validation::TensorDTypeConstraints *v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  void *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  void *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  MIL::Validation::TensorSymbolicShapeConstraints *v112;
  void *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  void *v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count_vtbl *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  MIL::Validation::PossibleStringValuesConstraints *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  uint64_t i;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  uint64_t j;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  uint64_t result;
  uint64_t v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  void *v168;
  char v169;
  void *v170;
  std::__shared_weak_count *v171;
  void *v172;
  char v173;
  void *v174;
  std::__shared_weak_count *v175;
  void *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  void *v184;
  char v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  void *v188[2];
  char v189;
  void *v190;
  char v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  void *v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202;
  char v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  char **v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  uint64_t v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char **v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  void *__p;
  void *v226;
  _QWORD *v227;
  std::__shared_weak_count *v228;
  _QWORD *v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD v233[3];
  _QWORD v234[3];
  _QWORD v235[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v237;
  uint64_t v238;
  _BYTE v239[24];
  _BYTE *v240;
  _QWORD v241[3];
  MIL::Validation::TensorDTypeConstraints *v242;
  std::__shared_weak_count_vtbl *v243;
  std::__shared_weak_count_vtbl *v244;
  void (__cdecl **v245)(std::__shared_weak_count *__hidden);
  uint64_t v246;

  v246 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v229 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v237 = (uint64_t)&v8->~__shared_weak_count_0;
  v238 = (uint64_t)&v8->~__shared_weak_count_0;
  v230 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v243 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v244 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v245 = &v10->~__shared_weak_count_0;
  v231 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v227 = v12 + 1;
  v226 = v12 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v212);
  v13 = v212;
  v212 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v228;
  if (v228)
  {
    p_shared_owners = (unint64_t *)&v228->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v226 = __p;
    operator delete(__p);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  if (Scalar)
  {
    v237 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v229;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v17, "reduction", (uint64_t *)&v230);
  v19 = v230;
  v230 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v224;
  if (v224)
  {
    v21 = (unint64_t *)&v224->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v229;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = operator new(8uLL);
  v230 = v25;
  *v25 = v24;
  v232 = (uint64_t)(v25 + 1);
  v231 = (uint64_t)(v25 + 1);
  v243 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v23, "reduction_axes", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = v223;
  if (v223)
  {
    v29 = (unint64_t *)&v223->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v230)
  {
    v231 = (uint64_t)v230;
    operator delete(v230);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v31 = v229;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v31, "reduction_scale", (uint64_t *)&v230);
  v33 = v230;
  v230 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = v222;
  if (v222)
  {
    v35 = (unint64_t *)&v222->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 48))(*((_QWORD *)v32 + 5), 1);
  v37 = v229;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v37, "reduction_epsilon", (uint64_t *)&v230);
  v39 = v230;
  v230 = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = v221;
  if (v221)
  {
    v41 = (unint64_t *)&v221->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 48))(*((_QWORD *)v38 + 5), 1);
  v43 = v229;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[26],std::unique_ptr<MIL::IRParameter>>(v43, "reduction_post_processing", (uint64_t *)&v230);
  v45 = v230;
  v230 = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = v220;
  if (v220)
  {
    v47 = (unint64_t *)&v220->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v219 = 0;
  v49 = operator new();
  *(_QWORD *)v49 = 0;
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 16) = 0;
  v230 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, (void **)v49);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v230, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v219, 1uLL);
  v50 = v219;
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v243 = v52;
  v52->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v51;
  v244 = (std::__shared_weak_count_vtbl *)&v52->~__shared_weak_count_0;
  v245 = &v52->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  __p = v54;
  *v54 = v53;
  v227 = v54 + 1;
  v226 = v54 + 1;
  v237 = MIL::IRTensorValueType::MakeWithShape();
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  v212 = v56;
  *v56 = v55;
  v213 = v56 + 1;
  v214 = v56 + 1;
  v238 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v57 = v216;
  v217 = v216;
  if (v216)
  {
    v58 = (_QWORD *)operator new();
    v59 = v216;
    *v58 = &unk_24BFE7320;
    v58[1] = 0;
    v58[2] = 0;
    v58[3] = v59;
  }
  else
  {
    v58 = 0;
  }
  v218 = v58;
  v216 = 0;
  v60 = v50[2];
  v61 = v50[1];
  if (v61 >= v60)
  {
    v63 = (v61 - *v50) >> 4;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v65 = v60 - *v50;
    if (v65 >> 3 > v64)
      v64 = v65 >> 3;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
      v66 = 0xFFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    v233[1] = v50 + 2;
    v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v50 + 2), v66);
    v69 = &v67[16 * v63];
    *(_QWORD *)v69 = v57;
    *((_QWORD *)v69 + 1) = v58;
    v218 = 0;
    v217 = 0;
    v71 = *v50;
    v70 = v50[1];
    if (v70 == *v50)
    {
      v74 = v50[1];
      v72 = &v67[16 * v63];
    }
    else
    {
      v72 = &v67[16 * v63];
      do
      {
        v73 = *((_OWORD *)v70 - 1);
        v70 -= 16;
        *((_OWORD *)v72 - 1) = v73;
        v72 -= 16;
        *(_QWORD *)v70 = 0;
        *((_QWORD *)v70 + 1) = 0;
      }
      while (v70 != v71);
      v74 = *v50;
      v70 = v50[1];
    }
    v62 = v69 + 16;
    *v50 = v72;
    v231 = (uint64_t)v74;
    v50[1] = v69 + 16;
    v232 = (uint64_t)v70;
    v75 = v50[2];
    v50[2] = &v67[16 * v68];
    v233[0] = v75;
    v230 = v74;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v230);
  }
  else
  {
    *(_QWORD *)v61 = v57;
    *((_QWORD *)v61 + 1) = v58;
    v62 = v61 + 16;
    v218 = 0;
    v217 = 0;
  }
  v50[1] = v62;
  v76 = v216;
  v216 = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v77 = v215;
  if (v215)
  {
    v78 = (unint64_t *)&v215->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (__p)
  {
    v226 = __p;
    operator delete(__p);
  }
  if (v243)
  {
    v244 = v243;
    operator delete(v243);
  }
  *(_OWORD *)v210 = *(_OWORD *)a2;
  v211 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v80 = (uint64_t)v229;
  v208 = (uint64_t)v229;
  if (v229)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v80;
  }
  else
  {
    v81 = 0;
  }
  v209 = v81;
  v229 = 0;
  v206 = v219;
  if (v219)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = v219;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = (std::__shared_weak_count_vtbl *)v83;
  }
  else
  {
    v82 = 0;
  }
  v207 = v82;
  v219 = 0;
  v241[0] = &unk_24BFE7440;
  v241[1] = ANEMachineIR::H2020::Validators::ValidatePeReduce;
  v242 = (MIL::Validation::TensorDTypeConstraints *)v241;
  v240 = 0;
  MIL::IROperator::Make();
  v84 = v240;
  if (v240 == v239)
  {
    v85 = 4;
    v84 = v239;
  }
  else
  {
    if (!v240)
      goto LABEL_92;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_92:
  v86 = v242;
  if (v242 == (MIL::Validation::TensorDTypeConstraints *)v241)
  {
    v87 = 4;
    v86 = (MIL::Validation::TensorDTypeConstraints *)v241;
    goto LABEL_96;
  }
  if (v242)
  {
    v87 = 5;
LABEL_96:
    v86 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v86 + 8 * v87))();
  }
  if (v207)
  {
    v88 = &v207->__shared_owners_;
    do
      v89 = __ldaxr((unint64_t *)v88);
    while (__stlxr(v89 - 1, (unint64_t *)v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  if (v209)
  {
    v90 = &v209->__shared_owners_;
    do
      v91 = __ldaxr((unint64_t *)v90);
    while (__stlxr(v91 - 1, (unint64_t *)v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  if (SHIBYTE(v211) < 0)
    operator delete(v210[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v86);
  v92 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v202, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v204 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v205 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v200, "XDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v92 + 24))(v92, &v204, v200);
  if (v201 < 0)
    operator delete(v200[0]);
  v95 = v205;
  if (v205)
  {
    v96 = (unint64_t *)&v205->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  if (v203 < 0)
    operator delete(v202);
  v99 = v230;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v198 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v199 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v99 + 24))(v99, &v198, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v102 = v199;
  if (v199)
  {
    v103 = (unint64_t *)&v199->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*((void (**)(std::__shared_weak_count_vtbl *))v105->~__shared_weak_count + 1))(v105);
  v106 = *a3;
  v194 = v230;
  if (v230)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = (std::__shared_weak_count_vtbl *)v230;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v195 = v107;
  v230 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v106 + 56))(v106, &v194);
  v109 = v195;
  if (v195)
  {
    v110 = (unint64_t *)&v195->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = (MIL::Validation::TensorSymbolicShapeConstraints *)v230;
  v230 = 0;
  if (v112)
    v112 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v112 + 8))(v112);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v112);
  v113 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v190, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v192 = Scalar;
  if (Scalar)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = Scalar;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v193 = v114;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v188, "XShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v113 + 40))(v113, &v192, v188);
  if (v189 < 0)
    operator delete(v188[0]);
  v116 = v193;
  if (v193)
  {
    v117 = (unint64_t *)&v193->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = Scalar;
  Scalar = 0;
  if (v119)
    (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
  if (v191 < 0)
    operator delete(v190);
  v120 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v184, "reduction_axes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v186 = Scalar;
  if (Scalar)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = Scalar;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v187 = v121;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "NUM_REDUCTION_AXES");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v120 + 24))(v120, &v186, 0, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v123 = v187;
  if (v187)
  {
    v124 = (unint64_t *)&v187->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = Scalar;
  Scalar = 0;
  if (v126)
    (*((void (**)(std::__shared_weak_count_vtbl *))v126->~__shared_weak_count + 1))(v126);
  if (v185 < 0)
    operator delete(v184);
  v127 = v230;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v180 = Scalar;
  if (Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v181 = v128;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "XReducedShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v127 + 40))(v127, &v180, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v130 = v181;
  if (v181)
  {
    v131 = (unint64_t *)&v181->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = Scalar;
  Scalar = 0;
  if (v133)
    (*((void (**)(std::__shared_weak_count_vtbl *))v133->~__shared_weak_count + 1))(v133);
  v134 = *a3;
  v176 = v230;
  if (v230)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)v230;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v177 = v135;
  v230 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v134 + 56))(v134, &v176);
  v137 = v177;
  if (v177)
  {
    v138 = (unint64_t *)&v177->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (MIL::Validation::PossibleStringValuesConstraints *)v230;
  v230 = 0;
  if (v140)
    v140 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v140 + 8))(v140);
  MIL::Validation::PossibleStringValuesConstraints::Make(v140);
  v141 = v243;
  std::string::basic_string[abi:ne180100]<0>(&v172, "reduction");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v174 = __p;
  if (__p)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = (std::__shared_weak_count_vtbl *)__p;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v175 = v142;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v230, "max");
  std::string::basic_string[abi:ne180100]<0>(v233, "mean");
  std::string::basic_string[abi:ne180100]<0>(v234, "min");
  std::string::basic_string[abi:ne180100]<0>(v235, "sum");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v230, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v141->~__shared_weak_count
   + 3))(v141, &v174, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v235[i + 2]) < 0)
      operator delete((void *)v235[i]);
  }
  v145 = v175;
  if (v175)
  {
    v146 = (unint64_t *)&v175->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = __p;
  __p = 0;
  if (v148)
    (*(void (**)(void *))(*(_QWORD *)v148 + 8))(v148);
  if (v173 < 0)
    operator delete(v172);
  v149 = v243;
  std::string::basic_string[abi:ne180100]<0>(&v168, "reduction_post_processing");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v170 = __p;
  if (__p)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = (std::__shared_weak_count_vtbl *)__p;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v171 = v150;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v230, "inv");
  std::string::basic_string[abi:ne180100]<0>(v233, "linear");
  std::string::basic_string[abi:ne180100]<0>(v234, "rsqrt");
  std::string::basic_string[abi:ne180100]<0>(v235, "sqrt");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v230, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v149->~__shared_weak_count
   + 3))(v149, &v170, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v235[j + 2]) < 0)
      operator delete((void *)v235[j]);
  }
  v153 = v171;
  if (v171)
  {
    v154 = (unint64_t *)&v171->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = __p;
  __p = 0;
  if (v156)
    (*(void (**)(void *))(*(_QWORD *)v156 + 8))(v156);
  if (v169 < 0)
    operator delete(v168);
  v157 = *a3;
  v166 = v243;
  if (v243)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = v243;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v167 = v158;
  v243 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v157 + 56))(v157, &v166);
  v160 = v167;
  if (v167)
  {
    v161 = (unint64_t *)&v167->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = v243;
  v243 = 0;
  if (v163)
    (*((void (**)(std::__shared_weak_count_vtbl *))v163->~__shared_weak_count + 1))(v163);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v219, 0);
  result = (uint64_t)v229;
  if (v229)
  {
    v165 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v229);
    return MEMORY[0x20BCFF140](v165, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068BC254(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x210], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x290], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Const::Make(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10[0] = &unk_24BFE7440;
  v10[1] = ANEMachineIR::H2022::Validators::ValidateConst;
  v11 = v10;
  v8[0] = &off_24BFEAC48;
  v9 = v8;
  MIL::IROperator::Make();
  v2 = v9;
  if (v9 == v8)
  {
    v3 = 4;
    v2 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v3))(v2);
LABEL_6:
  v4 = v11;
  if (v11 == v10)
  {
    v5 = 4;
    v4 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v5))(v4);
LABEL_11:
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_2068BCA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  uint64_t v24;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v26 = a24;
  if (a24 == &a21)
  {
    v27 = 4;
    v26 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  v28 = *(_QWORD **)(v24 - 32);
  if (v28 == (_QWORD *)(v24 - 56))
  {
    v29 = 4;
    v28 = (_QWORD *)(v24 - 56);
  }
  else
  {
    if (!v28)
      goto LABEL_11;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_11:
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__function::__func<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEAC48;
  return result;
}

void std::__function::__func<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEAC48;
}

void std::__function::__func<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()()
{
  void *__p;
  char v1;

  std::string::basic_string[abi:ne180100]<0>(&__p, "val");
  MIL::IRObject::TryGetAttributeSharedPtr();
  if (v1 < 0)
    operator delete(__p);
}

void sub_2068BCBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t ANEMachineIR::H2020::Validators::ValidateBaseNeMatmul@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2020::Validators::ValidateNeBatchMatmul(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeBatchMatmul(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidateNeMatmul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeMatmul(this, a2);
}

void ANEMachineIR::H2021::Const::Make(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10[0] = &unk_24BFE7440;
  v10[1] = ANEMachineIR::H2021::Validators::ValidateConst;
  v11 = v10;
  v8[0] = &off_24BFEACD8;
  v9 = v8;
  MIL::IROperator::Make();
  v2 = v9;
  if (v9 == v8)
  {
    v3 = 4;
    v2 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v3))(v2);
LABEL_6:
  v4 = v11;
  if (v11 == v10)
  {
    v5 = 4;
    v4 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v5))(v4);
LABEL_11:
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_2068BCDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  uint64_t v24;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v26 = a24;
  if (a24 == &a21)
  {
    v27 = 4;
    v26 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  v28 = *(_QWORD **)(v24 - 32);
  if (v28 == (_QWORD *)(v24 - 56))
  {
    v29 = 4;
    v28 = (_QWORD *)(v24 - 56);
  }
  else
  {
    if (!v28)
      goto LABEL_11;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_11:
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__function::__func<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEACD8;
  return result;
}

void std::__function::__func<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEACD8;
}

void std::__function::__func<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()()
{
  void *__p;
  char v1;

  std::string::basic_string[abi:ne180100]<0>(&__p, "val");
  MIL::IRObject::TryGetAttributeSharedPtr();
  if (v1 < 0)
    operator delete(__p);
}

void sub_2068BCF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void ANEMachineIR::H2021::Validators::ValidateReshape(MIL::IROperation *this@<X0>, uint64_t a2@<X8>)
{
  ANEMachineIR::Validators::ValidateReshape(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidateTranspose(MIL::IROperation *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateTranspose(this, a2);
}

uint64_t std::array<std::string,6ul>::~array(uint64_t a1)
{
  uint64_t i;

  for (i = 0; i != -144; i -= 24)
  {
    if (*(char *)(a1 + i + 143) < 0)
      operator delete(*(void **)(a1 + i + 120));
  }
  return a1;
}

void MilTranslator::OpTranslator::~OpTranslator(void **this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::~__hash_table((uint64_t)(this + 37));
  MilTranslator::WeightTranslator::~WeightTranslator((MilTranslator::WeightTranslator *)(this + 18));
  std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::~__hash_table((uint64_t)(this + 13));
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 10));
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

uint64_t MilTranslator::OpTranslator::OpTranslator(uint64_t a1, _QWORD *a2, _QWORD *a3, __int128 *a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  uint64_t *v24;
  unint64_t v25;
  char *OpsetString;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t Function;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  void *__p[2];
  char v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  uint64_t v95[7];
  uint64_t v96[7];
  uint64_t v97[7];
  uint64_t v98[7];
  uint64_t v99[7];
  uint64_t v100[7];
  uint64_t v101[7];
  uint64_t v102[7];
  uint64_t v103[7];
  uint64_t v104[7];
  _QWORD v105[9];

  v105[7] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = *a2;
  v11 = a2[1];
  *(_QWORD *)(a1 + 16) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(a1 + 24) = *a3;
  v14 = a3[1];
  *(_QWORD *)(a1 + 32) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v17 = *a4;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 40) = v17;
  }
  v18 = *(std::__shared_weak_count **)(a1 + 16);
  v90 = *(_QWORD *)(a1 + 8);
  v91 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  MIL::Builder::ProgramBuilder::Make();
  v21 = v92;
  *(_QWORD *)(a1 + 64) = v92;
  if (v21)
  {
    v22 = (_QWORD *)operator new();
    v23 = v92;
    *v22 = &unk_24BFEAEF8;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)(a1 + 72) = v22;
  v92 = 0;
  if (v91)
  {
    v24 = &v91->__shared_owners_;
    do
      v25 = __ldaxr((unint64_t *)v24);
    while (__stlxr(v25 - 1, (unint64_t *)v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  MIL::Builder::ProgramBuilder::AddFunction();
  OpsetString = ANEMachineIR::GetOpsetString(*a5);
  std::string::basic_string[abi:ne180100]<0>(__p, OpsetString);
  MIL::Builder::FunctionBuilder::AddBlock();
  if (v89 < 0)
    operator delete(__p[0]);
  v27 = v93;
  if (v93)
  {
    v28 = (unint64_t *)&v93->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)(a1 + 96) = a5;
  *(_QWORD *)&v86 = MilTranslator::OpTranslator::TranslateElementWiseBinary;
  *((_QWORD *)&v86 + 1) = 0;
  v87 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[4],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(&v92, "add", &v86);
  *(_QWORD *)&v84 = MilTranslator::OpTranslator::TranslateAvgPool;
  *((_QWORD *)&v84 + 1) = 0;
  v85 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[9],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v95, "avg_pool", &v84);
  *(_QWORD *)&v82 = MilTranslator::OpTranslator::TranslateConst;
  *((_QWORD *)&v82 + 1) = 0;
  v83 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[6],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v96, "const", &v82);
  *(_QWORD *)&v80 = MilTranslator::OpTranslator::TranslateConv;
  *((_QWORD *)&v80 + 1) = 0;
  v81 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[5],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v97, "conv", &v80);
  *(_QWORD *)&v78 = MilTranslator::OpTranslator::TranslateLinear;
  *((_QWORD *)&v78 + 1) = 0;
  v79 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[7],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v98, "linear", &v78);
  *(_QWORD *)&v76 = MilTranslator::OpTranslator::TranslateElementWiseBinary;
  *((_QWORD *)&v76 + 1) = 0;
  v77 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[8],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v99, "maximum", &v76);
  *(_QWORD *)&v74 = MilTranslator::OpTranslator::TranslateMaxPool;
  *((_QWORD *)&v74 + 1) = 0;
  v75 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[9],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v100, "max_pool", &v74);
  *(_QWORD *)&v72 = MilTranslator::OpTranslator::TranslateElementWiseBinary;
  *((_QWORD *)&v72 + 1) = 0;
  v73 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[4],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v101, "mul", &v72);
  *(_QWORD *)&v70 = MilTranslator::OpTranslator::TranslateReduceMean;
  *((_QWORD *)&v70 + 1) = 0;
  v71 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[12],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v102, "reduce_mean", &v70);
  *(_QWORD *)&v68 = MilTranslator::OpTranslator::TranslateActivation;
  *((_QWORD *)&v68 + 1) = 0;
  v69 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[5],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v103, "relu", &v68);
  *(_QWORD *)&v66 = MilTranslator::OpTranslator::TranslateReshape;
  *((_QWORD *)&v66 + 1) = 0;
  v67 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[8],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v104, "reshape", &v66);
  *(_QWORD *)&v64 = MilTranslator::OpTranslator::TranslateActivation;
  *((_QWORD *)&v64 + 1) = 0;
  v65 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[8],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v105, "sigmoid", &v64);
  std::unordered_map<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::unordered_map(a1 + 104, (unsigned __int8 *)&v92, 12);
  v30 = 84;
  do
  {
    v31 = *(void ***)((char *)&v91 + v30 * 8);
    if (&__p[v30 + 1] == v31)
    {
      v31 = &__p[v30 + 1];
      v32 = 4;
    }
    else
    {
      if (!v31)
        goto LABEL_34;
      v32 = 5;
    }
    (*((void (**)(void))*v31 + v32))();
LABEL_34:
    if (SHIBYTE(__p[v30]) < 0)
      operator delete(*(void **)((char *)&v86 + v30 * 8 + 8));
    v30 -= 7;
  }
  while (v30 * 8);
  Function = MIL::IRProgram::GetFunction();
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  v35 = *(std::__shared_weak_count **)(a1 + 80);
  v36 = *(std::__shared_weak_count **)(a1 + 88);
  *(_QWORD *)&v86 = v35;
  *((_QWORD *)&v86 + 1) = v36;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    v93 = v35;
    v94 = v36;
    do
      v39 = __ldxr(v37);
    while (__stxr(v39 + 1, v37));
  }
  else
  {
    v93 = v35;
    v94 = 0;
  }
  v92 = (void *)(v34 + 64);
  std::allocate_shared[abi:ne180100]<std::function<std::string ()(std::string const&)>,std::allocator<std::function<std::string ()(std::string const&)>>,ANEMachineIR::Utils::CheckedCounterNameGenerator,void>((uint64_t *)&v92, &v62);
  v40 = v94;
  if (v94)
  {
    v41 = (unint64_t *)&v94->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(std::__shared_weak_count **)(a1 + 88);
  v60 = *(_QWORD *)(a1 + 80);
  v61 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  MilTranslator::WeightTranslator::WeightTranslator(a1 + 144, a6, a7, &v62, &v60);
  v49 = v61;
  if (v61)
  {
    v50 = (unint64_t *)&v61->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v63;
  if (v63)
  {
    v53 = (unint64_t *)&v63->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  MIL::Builder::ProgramBuilder::GetFunction();
  v55 = ANEMachineIR::GetOpsetString(**(_DWORD **)(a1 + 96));
  std::string::basic_string[abi:ne180100]<0>(&v92, v55);
  MIL::Builder::FunctionBuilder::SetSpecialization();
  if (SHIBYTE(v94) < 0)
    operator delete(v92);
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  return a1;
}

void sub_2068BD6EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::~pair(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void MilTranslator::OpTranslator::Translate(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  uint64_t v9;
  std::string __p;

  ++*(_QWORD *)this;
  v6 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v7 = *(_OWORD *)v6;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
  }
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>((_QWORD *)this + 13, (unsigned __int8 *)&__p);
  if (v8)
  {
    v9 = *((_QWORD *)v8 + 8);
    if (!v9)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, const MIL::IROperation *))(*(_QWORD *)v9 + 48))(v9, a2);
  }
  else
  {
    *a3 = 1;
    std::operator+<char>();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2068BD9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MilTranslator::OpTranslator::Translate(MilTranslator::OpTranslator *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  const MIL::IROperation ****v7;
  const MIL::IROperation **v8;
  const MIL::IROperation **v9;
  _QWORD ***v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 **v24;
  std::string::size_type v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  ANEMachineIR::Utils *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  std::string::size_type size;
  char v34;
  std::string __p;
  int v36;
  unsigned __int8 v37;
  std::string v38;
  void *v39[3];
  std::string v40;
  uint64_t v41;
  std::string *v42;
  unint64_t v43;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v7 = (const MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  v8 = **v7;
  v9 = (*v7)[1];
  while (v8 != v9)
  {
    MilTranslator::OpTranslator::Translate(a1, *v8, (_DWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*(void **)(a3 + 8));
    v8 += 2;
  }
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v10 = (_QWORD ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  v11 = **v10;
  v12 = (*v10)[1];
  while (v11 != v12)
  {
    v13 = *v11;
    v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 56))(*v11);
    v15 = *(char *)(v14 + 23);
    if (v15 < 0)
    {
      if (*(_QWORD *)(v14 + 8) == 5)
      {
        v14 = *(_QWORD *)v14;
LABEL_13:
        if (*(_DWORD *)v14 == 1936617315 && *(_BYTE *)(v14 + 4) == 116)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v13 + 200))(&v40, v13);
          if (*(char *)(v40.__r_.__value_.__r.__words[0] + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v40.__r_.__value_.__l.__data_, *(_QWORD *)(v40.__r_.__value_.__r.__words[0] + 8));
          }
          else
          {
            v17 = *(_OWORD *)v40.__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40.__r_.__value_.__r.__words[0] + 16);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
          }
          v39[0] = &v40;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
          v18 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
          v20 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v18, *(_QWORD *)(v19 + 8), (unsigned __int8 **)&__p);
          if (v20 != *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6) + 8))
          {
            v21 = v42;
            if ((unint64_t)v42 >= v43)
            {
              v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v41, (__int128 *)&__p);
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v42, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else
              {
                v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v42->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
              }
              v23 = v21 + 1;
            }
            v42 = v23;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    else if (v15 == 5)
    {
      goto LABEL_13;
    }
    v11 += 2;
  }
  v24 = (__int128 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
  memset(&v40, 0, sizeof(v40));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, *v24, v24[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v24[1] - (char *)*v24) >> 3));
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 160))(v39, a2);
  v25 = v40.__r_.__value_.__r.__words[0];
  if (v40.__r_.__value_.__l.__size_ != v40.__r_.__value_.__r.__words[0])
  {
    v26 = 0;
    v27 = 0;
    do
    {
      v28 = (__int128 *)(v25 + v26);
      if (*((char *)v28 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
      }
      else
      {
        v29 = *v28;
        v38.__r_.__value_.__r.__words[2] = *((_QWORD *)v28 + 2);
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
      }
      v30 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(*((MIL::IRValueType **)v39[0] + v27));
      if (std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>((_QWORD *)a1 + 37, (unsigned __int8 *)&v38))
      {
        v31 = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>((_QWORD *)a1 + 37, (unsigned __int8 *)&v38);
        v32 = v31;
        if ((char)v31[63] < 0)
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v31 + 5), *((_QWORD *)v31 + 6));
        else
          __p = *(std::string *)(v31 + 40);
        v36 = *((_DWORD *)v32 + 16);
        v37 = v32[68];
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p.__r_.__value_.__l.__size_;
        if (size)
        {
          MilTranslator::OpTranslator::EnsureTransposeProducesChannelFirst((uint64_t)a1, (uint64_t)&v38, v30);
          v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        if (v34 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      ++v27;
      v25 = v40.__r_.__value_.__r.__words[0];
      v26 += 24;
    }
    while (v27 < 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v40.__r_.__value_.__l.__size_ - v40.__r_.__value_.__r.__words[0]) >> 3));
  }
  *(_DWORD *)a3 = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2068BDDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  if (a14 < 0)
    operator delete(__p);
  __p = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MilTranslator::OpTranslator::EnsureTransposeProducesChannelFirst(uint64_t a1, uint64_t a2, ANEMachineIR::Utils *a3)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  size_t v10;
  void *begin;
  const std::string::value_type *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::vector<int>::size_type v16;
  unsigned __int8 *v17;
  std::vector<int>::pointer v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  const MIL::IRTensorValueType *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string v33;
  std::__shared_weak_count *v34;
  void *v35[3];
  void *v36;
  char v37;
  std::__shared_weak_count *v38;
  std::string v39;
  void *v40;
  char v41;
  std::__shared_weak_count *v42;
  void *__p;
  char v44;
  std::__shared_weak_count *v45;
  std::vector<int> v46;
  std::string v47;
  uint64_t v48;
  std::string v49;
  std::string v50;

  v6 = (_QWORD *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)a3 + 96))(a3);
  v7 = (uint64_t)(v6[1] - *v6) >> 3;
  if (v8[23] < 0)
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  else
    v50 = *(std::string *)v8;
  if (v9[23] < 0)
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  else
    v49 = *(std::string *)v9;
  if (*(char *)(a2 + 23) >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  begin = &v46;
  std::string::basic_string[abi:ne180100]((uint64_t)&v46, v10 + 13);
  if (SHIBYTE(v46.__end_cap_.__value_) < 0)
    begin = v46.__begin_;
  if (v10)
  {
    if (*(char *)(a2 + 23) >= 0)
      v12 = (const std::string::value_type *)a2;
    else
      v12 = *(const std::string::value_type **)a2;
    memmove(begin, v12, v10);
  }
  strcpy((char *)begin + v10, "_channel_last");
  if (SHIBYTE(v46.__end_cap_.__value_) < 0)
    operator delete(v46.__begin_);
  v13 = (uint64_t *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)a3 + 96))(a3);
  v15 = *v13;
  v14 = v13[1];
  v16 = (v14 - *v13) >> 3;
  std::vector<int>::vector(&v46, v16);
  if (v14 != v15)
  {
    v17 = (unsigned __int8 *)&v48;
    v18 = v46.__begin_;
    do
    {
      v19 = *v17++;
      *v18++ = v19;
      --v16;
    }
    while (v16);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose");
  MilTranslator::OpTranslator::AddOperation(a1);
  if (v44 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&v40, "x");
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v39, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  else
    v39 = v47;
  MIL::Builder::OperationBuilder::AddInput();
  v20 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v41 < 0)
    operator delete(v40);
  std::string::basic_string[abi:ne180100]<0>(&v36, "perm");
  MIL::Builder::OperationBuilder::AddInputInt32();
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v37 < 0)
    operator delete(v36);
  ANEMachineIR::Utils::GetStaticTensorShape(a3, v23, (uint64_t)v35);
  (*(void (**)(ANEMachineIR::Utils *))(*(_QWORD *)a3 + 88))(a3);
  MIL::IRTensorValueType::Make();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v33 = *(std::string *)a2;
  MIL::Builder::OperationBuilder::AddOutput();
  v27 = v34;
  if (v34)
  {
    v28 = (unint64_t *)&v34->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  v30 = v45;
  if (v45)
  {
    v31 = (unint64_t *)&v45->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v46.__begin_)
  {
    v46.__end_ = v46.__begin_;
    operator delete(v46.__begin_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
}

void sub_2068BE2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  uint64_t v49;
  void *v51;

  if (a40 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  v51 = *(void **)(v49 - 184);
  if (v51)
  {
    *(_QWORD *)(v49 - 176) = v51;
    operator delete(v51);
  }
  if (*(char *)(v49 - 137) < 0)
    operator delete(*(void **)(v49 - 160));
  if (*(char *)(v49 - 105) < 0)
    operator delete(*(void **)(v49 - 128));
  if (*(char *)(v49 - 73) < 0)
    operator delete(*(void **)(v49 - 96));
  _Unwind_Resume(a1);
}

void MilTranslator::OpTranslator::AddOperation(uint64_t a1)
{
  char *OpsetString;
  std::__shared_weak_count *v2;
  void *v3;
  unint64_t *v4;
  unint64_t v5;
  void *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  void *__p[2];
  std::string::size_type v11;

  OpsetString = ANEMachineIR::GetOpsetString(**(_DWORD **)(a1 + 96));
  std::string::basic_string[abi:ne180100]<0>(__p, OpsetString);
  MIL::MILContext::GetOpset();
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  MIL::IROpset::TryGetOperatorSharedPtr();
  v3 = __p[0];
  v2 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v4 = (unint64_t *)((char *)__p[1] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v7 = std::string::append(&v9, "'");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v11 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x20BCFEF9C](exception, __p);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  MIL::Builder::BlockBuilder::AddOperation();
}

void sub_2068BE59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t MilTranslator::OpTranslator::GetBlockBuilder@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 88);
  *a2 = *(_QWORD *)(this + 80);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void MilTranslator::OpTranslator::ConstructProgram(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  _BYTE v24[56];
  std::string v25;
  std::__shared_weak_count *v26;

  MIL::Builder::ProgramBuilder::GetFunction();
  v12 = (_QWORD *)*a3;
  v10 = a3 + 1;
  v11 = v12;
  if (v12 != v10)
  {
    do
    {
      if (*((char *)v11 + 55) < 0)
        std::string::__init_copy_ctor_external(&v25, (const std::string::value_type *)v11[4], v11[5]);
      else
        v25 = *(std::string *)(v11 + 4);
      MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      v13 = (_QWORD *)v11[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v11[2];
          v15 = *v14 == (_QWORD)v11;
          v11 = v14;
        }
        while (!v15);
      }
      v11 = v14;
    }
    while (v14 != v10);
  }
  v17 = *a4;
  v16 = a4[1];
  while (v17 != v16)
  {
    MIL::Builder::BlockBuilder::AddOutput();
    v17 += 24;
  }
  MIL::Builder::ProgramBuilder::CreateProgram(*(MIL::Builder::ProgramBuilder **)(a1 + 64));
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)v24) & 1) != 0)
  {
    v18 = v23;
    v23 = 0;
    v19 = *a2;
    *a2 = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    *(_DWORD *)a5 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a5 + 8), (char *)&unk_2069A5097);
  }
  else
  {
    *(_DWORD *)a5 = 3;
    MIL::MILResult::GetMessageWithLocation((MIL::MILResult *)v24);
  }
  MEMORY[0x20BCFEAEC](v24);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_2068BE81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v22 - 80);
  _Unwind_Resume(a1);
}

_QWORD *MilTranslator::OpTranslator::InferTransposedShape@<X0>(uint64_t *a1@<X0>, unsigned int **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  _QWORD *result;
  unsigned int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;

  v4 = (a1[1] - *a1) >> 3;
  v6 = *a2;
  v5 = a2[1];
  if (v4 != v5 - *a2)
    MilTranslator::OpTranslator::InferTransposedShape();
  result = std::vector<unsigned long long>::vector(a3, v4);
  if (v5 != v6)
  {
    v10 = *a2;
    v11 = *a1;
    v12 = (_QWORD *)*a3;
    if (v4 <= 1)
      v13 = 1;
    else
      v13 = v4;
    do
    {
      v15 = *v10++;
      v14 = v15;
      if ((v15 & 0x80000000) != 0 || v4 <= v14)
        __assert_rtn("InferTransposedShape", "OpTranslator.cpp", 215, "positive_perm[i] >= 0 && positive_perm[i] < rank");
      *v12++ = *(_QWORD *)(v11 + 8 * v14);
      --v13;
    }
    while (v13);
  }
  return result;
}

void sub_2068BE938(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::OpTranslator::InferChannelLastTransposeInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  char *v10;
  char *v11;
  size_t v12;
  std::string *p_p;
  const void *v14;
  int v15;
  std::string __p;
  __int128 v17;
  uint64_t v18;
  int v19;
  char v20;
  std::string v21;
  std::string v22;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 21) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v7 = (_QWORD *)(a1 + 296);
  if (std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>((_QWORD *)(a1 + 296), (unsigned __int8 *)a2))
  {
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>(v7, (unsigned __int8 *)a2);
    std::string::operator=((std::string *)a4, (const std::string *)(v8 + 40));
    v9 = *((_DWORD *)v8 + 16);
    *(_BYTE *)(a4 + 28) = v8[68];
    *(_DWORD *)(a4 + 24) = v9;
  }
  else
  {
    if (v10[23] < 0)
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    else
      v22 = *(std::string *)v10;
    if (v11[23] < 0)
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    else
      v21 = *(std::string *)v11;
    if (*(char *)(a2 + 23) >= 0)
      v12 = *(unsigned __int8 *)(a2 + 23);
    else
      v12 = *(_QWORD *)(a2 + 8);
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v12 + 13);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v12)
    {
      if (*(char *)(a2 + 23) >= 0)
        v14 = (const void *)a2;
      else
        v14 = *(const void **)a2;
      memmove(p_p, v14, v12);
    }
    strcpy((char *)p_p + v12, "_channel_last");
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_OWORD *)a4 = v17;
    *(_QWORD *)(a4 + 16) = v18;
    HIBYTE(v18) = 0;
    LOBYTE(v17) = 0;
    *(_DWORD *)(a4 + 24) = v19;
    *(_BYTE *)(a4 + 28) = v20;
    if (v15 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_2068BEB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (*(char *)(v25 - 41) < 0)
    operator delete(*(void **)(v25 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::GetShapePermInfoFromAxisConvention@<X0>(std::string *__str@<X2>, uint64_t a2@<X0>, uint64_t *a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 21) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result = (uint64_t)std::string::operator=((std::string *)a4, __str);
  if (*(char *)(a2 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = *((unsigned __int8 *)a3 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = a3[1];
  if (v8 != v9)
    __assert_rtn("GetShapePermInfoFromAxisConvention", "OpTranslator.cpp", 39, "source.size() == target.size()");
  if (v8)
  {
    v10 = 0;
    v11 = a4 + 24;
    do
    {
      if (*((char *)a3 + 23) >= 0)
        v12 = a3;
      else
        v12 = (uint64_t *)*a3;
      result = std::string::find((const std::string *)a2, *((_BYTE *)v12 + v10), 0);
      *(_BYTE *)(v11 + v10++) = result;
    }
    while (v8 != v10);
  }
  return result;
}

void sub_2068BEC6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t MilTranslator::OpTranslator::IsTransposeRequired(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;

  v1 = a1[1];
  v2 = v1 - *a1;
  if (v1 == *a1)
  {
    v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = v2 >> 2;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      v4 |= v3 != *(int *)(*a1 + 4 * v3);
      ++v3;
    }
    while (v5 != v3);
  }
  return v4 & 1;
}

std::vector<int> *MilTranslator::OpTranslator::GetTransposeOpParamPerm@<X0>(std::vector<int>::size_type __n@<X2>, uint64_t a2@<X1>, std::vector<int> *a3@<X8>)
{
  std::vector<int>::size_type v3;
  std::vector<int> *result;
  unsigned __int8 *v6;
  std::vector<int>::pointer begin;
  int v8;

  v3 = __n;
  result = std::vector<int>::vector(a3, __n);
  if (v3)
  {
    v6 = (unsigned __int8 *)(a2 + 24);
    begin = result->__begin_;
    do
    {
      v8 = *v6++;
      *begin++ = v8;
      --v3;
    }
    while (v3);
  }
  return result;
}

void MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose(uint64_t a1@<X0>, uint64_t a2@<X1>, ANEMachineIR::Utils *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::vector<int>::size_type v17;
  unsigned __int8 *v18;
  std::vector<int>::pointer begin;
  int v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  const MIL::IRTensorValueType *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string v37;
  std::__shared_weak_count *v38;
  void *v39[3];
  void *v40;
  char v41;
  std::__shared_weak_count *v42;
  std::string v43;
  void *v44;
  char v45;
  std::__shared_weak_count *v46;
  void *__p;
  char v48;
  std::__shared_weak_count *v49;
  std::string v50;
  void *v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  char v56;
  std::vector<int> v57;
  std::string v58;
  uint64_t v59;

  v8 = (uint64_t *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)a3 + 96))(a3);
  v10 = *v8;
  v9 = v8[1];
  if (std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>((_QWORD *)(a1 + 296), (unsigned __int8 *)a2))
  {
    v11 = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>((_QWORD *)(a1 + 296), (unsigned __int8 *)a2);
    v12 = v11;
    if ((char)v11[63] < 0)
      std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)v11 + 5), *((_QWORD *)v11 + 6));
    else
      v50 = *(std::string *)(v11 + 40);
    LODWORD(v51) = *((_DWORD *)v12 + 16);
    BYTE4(v51) = v12[68];
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v50.__r_.__value_.__l.__size_)
      {
        std::string::__init_copy_ctor_external(a4, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v13 = (void *)v50.__r_.__value_.__r.__words[0];
        goto LABEL_82;
      }
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    else if (*((_BYTE *)&v50.__r_.__value_.__s + 23))
    {
      *a4 = v50;
      return;
    }
  }
  MilTranslator::OpTranslator::InferChannelLastTransposeInfo(a1, a2, (v9 - v10) >> 3, (uint64_t)&v58);
  v14 = (uint64_t *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)a3 + 96))(a3);
  v16 = *v14;
  v15 = v14[1];
  v17 = (v15 - *v14) >> 3;
  std::vector<int>::vector(&v57, v17);
  if (v15 != v16)
  {
    v18 = (unsigned __int8 *)&v59;
    begin = v57.__begin_;
    do
    {
      v20 = *v18++;
      *begin++ = v20;
      --v17;
    }
    while (v17);
  }
  if (v57.__end_ == v57.__begin_)
    goto LABEL_24;
  v21 = 0;
  v22 = 0;
  v23 = v57.__end_ - v57.__begin_;
  if (v23 <= 1)
    v23 = 1;
  do
  {
    v22 |= v21 != v57.__begin_[v21];
    ++v21;
  }
  while (v23 != v21);
  if ((v22 & 1) == 0)
  {
LABEL_24:
    v53 = 0uLL;
    v54 = 0;
    v55 = 50462976;
    v56 = 4;
    std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&v50, (__int128 *)a2, &v53);
    std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>(a1 + 296, (unsigned __int8 *)&v50, (__int128 *)&v50);
    if (v52 < 0)
      operator delete(v51);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    if (SHIBYTE(v54) < 0)
      operator delete((void *)v53);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "transpose");
    MilTranslator::OpTranslator::AddOperation(a1);
    if (v48 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&v44, "x");
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v43 = *(std::string *)a2;
    MIL::Builder::OperationBuilder::AddInput();
    v24 = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (v45 < 0)
      operator delete(v44);
    std::string::basic_string[abi:ne180100]<0>(&v40, "perm");
    memset(&v50, 0, sizeof(v50));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v50, v57.__begin_, (uint64_t)v57.__end_, v57.__end_ - v57.__begin_);
    MIL::Builder::OperationBuilder::AddInputInt32();
    v28 = v42;
    if (v42)
    {
      v29 = (unint64_t *)&v42->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v50.__r_.__value_.__r.__words[0])
    {
      v50.__r_.__value_.__l.__size_ = v50.__r_.__value_.__r.__words[0];
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (v41 < 0)
      operator delete(v40);
    ANEMachineIR::Utils::GetStaticTensorShape(a3, v27, (uint64_t)&v53);
    MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)&v53, (unsigned int **)&v57, v39);
    (*(void (**)(ANEMachineIR::Utils *))(*(_QWORD *)a3 + 88))(a3);
    MIL::IRTensorValueType::Make();
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v37, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
    else
      v37 = v58;
    MIL::Builder::OperationBuilder::AddOutput();
    v31 = v38;
    if (v38)
    {
      v32 = (unint64_t *)&v38->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&v50, (__int128 *)a2, (__int128 *)&v58);
    std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>(a1 + 296, (unsigned __int8 *)&v50, (__int128 *)&v50);
    if (v52 < 0)
      operator delete(v51);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(a4, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
    else
      *a4 = v58;
    if (v39[0])
    {
      v39[1] = v39[0];
      operator delete(v39[0]);
    }
    if ((_QWORD)v53)
    {
      *((_QWORD *)&v53 + 1) = v53;
      operator delete((void *)v53);
    }
    v34 = v49;
    if (v49)
    {
      v35 = (unint64_t *)&v49->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  if (v57.__begin_)
  {
    v57.__end_ = v57.__begin_;
    operator delete(v57.__begin_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = (void *)v58.__r_.__value_.__r.__words[0];
LABEL_82:
    operator delete(v13);
  }
}

void sub_2068BF284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;
  void *v59;

  if (a41 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  v59 = *(void **)(v57 - 136);
  if (v59)
  {
    *(_QWORD *)(v57 - 128) = v59;
    operator delete(v59);
  }
  if (*(char *)(v57 - 89) < 0)
    operator delete(*(void **)(v57 - 112));
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[4],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v5[6] = 0;
  v6 = (char *)operator new(0x20uLL);
  *(_QWORD *)v6 = &off_24BFEAD58;
  *(_OWORD *)(v6 + 8) = v8;
  *((_QWORD *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_2068BF440(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>>,TranslatorStatus ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>>,TranslatorStatus ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24BFEAD58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>>,TranslatorStatus ()(MIL::IROperation const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFEAD58;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>>,TranslatorStatus ()(MIL::IROperation const&)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t std::__function::__func<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>>,TranslatorStatus ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>>,TranslatorStatus ()(MIL::IROperation const&)>::target_type()
{
}

_QWORD *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[9],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v5[6] = 0;
  v6 = (char *)operator new(0x20uLL);
  *(_QWORD *)v6 = &off_24BFEAD58;
  *(_OWORD *)(v6 + 8) = v8;
  *((_QWORD *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_2068BF5AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[6],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v5[6] = 0;
  v6 = (char *)operator new(0x20uLL);
  *(_QWORD *)v6 = &off_24BFEAD58;
  *(_OWORD *)(v6 + 8) = v8;
  *((_QWORD *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_2068BF634(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[5],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v5[6] = 0;
  v6 = (char *)operator new(0x20uLL);
  *(_QWORD *)v6 = &off_24BFEAD58;
  *(_OWORD *)(v6 + 8) = v8;
  *((_QWORD *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_2068BF6BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[7],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v5[6] = 0;
  v6 = (char *)operator new(0x20uLL);
  *(_QWORD *)v6 = &off_24BFEAD58;
  *(_OWORD *)(v6 + 8) = v8;
  *((_QWORD *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_2068BF744(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[8],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v5[6] = 0;
  v6 = (char *)operator new(0x20uLL);
  *(_QWORD *)v6 = &off_24BFEAD58;
  *(_OWORD *)(v6 + 8) = v8;
  *((_QWORD *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_2068BF7CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[12],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v5[6] = 0;
  v6 = (char *)operator new(0x20uLL);
  *(_QWORD *)v6 = &off_24BFEAD58;
  *(_OWORD *)(v6 + 8) = v8;
  *((_QWORD *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_2068BF854(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<std::function<std::string ()(std::string const&)>,std::allocator<std::function<std::string ()(std::string const&)>>,ANEMachineIR::Utils::CheckedCounterNameGenerator,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x38uLL);
  result = std::__shared_ptr_emplace<std::function<std::string ()(std::string const&)>>::__shared_ptr_emplace[abi:ne180100]<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<std::function<std::string ()(std::string const&)>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2068BF8B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::function<std::string ()(std::string const&)>>::__shared_ptr_emplace[abi:ne180100]<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<std::function<std::string ()(std::string const&)>>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24BFEAE18;
  a1[1] = 0;
  std::allocator<std::function<std::string ()(std::string const&)>>::construct[abi:ne180100]<std::function<std::string ()(std::string const&)>,ANEMachineIR::Utils::CheckedCounterNameGenerator>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2068BF914(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::function<std::string ()(std::string const&)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEAE18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::function<std::string ()(std::string const&)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEAE18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__shared_ptr_emplace<std::function<std::string ()(std::string const&)>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 24);
  result = *(_QWORD **)(a1 + 48);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *std::allocator<std::function<std::string ()(std::string const&)>>::construct[abi:ne180100]<std::function<std::string ()(std::string const&)>,ANEMachineIR::Utils::CheckedCounterNameGenerator>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;

  v4 = *a3;
  v5 = a3[1];
  v6 = a3[2];
  a3[1] = 0;
  a3[2] = 0;
  *(_QWORD *)(a2 + 24) = 0;
  result = operator new(0x20uLL);
  *result = &off_24BFEAE68;
  result[1] = v4;
  result[2] = v5;
  result[3] = v6;
  *(_QWORD *)(a2 + 24) = result;
  return result;
}

void sub_2068BFA18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24BFEAE68;
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_24BFEAE68;
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x20BCFF140);
}

char *std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_24BFEAE68;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

_QWORD *std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = result[1];
  *a2 = &off_24BFEAE68;
  a2[1] = v2;
  v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

BOOL std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::operator()@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ANEMachineIR::Utils::CheckedCounterNameGenerator::operator()((MIL::Builder::BlockBuilder **)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::target_type()
{
}

BOOL ANEMachineIR::Utils::CheckedCounterNameGenerator::operator()@<W0>(MIL::Builder::BlockBuilder **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t i;
  _BOOL8 result;

  for (i = 0; ; ++i)
  {
    ANEMachineIR::Utils::CheckedCounterNameGenerator::Candidate(a2, i, (std::string *)a3);
    result = ANEMachineIR::Utils::CheckedCounterNameGenerator::NameExists(a1, a3);
    if (!result)
      break;
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
  }
  return result;
}

void sub_2068BFC14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Utils::CheckedCounterNameGenerator::Candidate(uint64_t a1@<X1>, unint64_t a2@<X2>, std::string *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const std::string::value_type *v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string __p;
  std::string v14;

  if (a2)
  {
    if (*(char *)(a1 + 23) >= 0)
      v6 = *(unsigned __int8 *)(a1 + 23);
    else
      v6 = *(_QWORD *)(a1 + 8);
    v7 = &v14;
    std::string::basic_string[abi:ne180100]((uint64_t)&v14, v6 + 1);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if (v6)
    {
      if (*(char *)(a1 + 23) >= 0)
        v8 = (const std::string::value_type *)a1;
      else
        v8 = *(const std::string::value_type **)a1;
      memmove(v7, v8, v6);
    }
    *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
    std::to_string(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void sub_2068BFD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL ANEMachineIR::Utils::CheckedCounterNameGenerator::NameExists(MIL::Builder::BlockBuilder **a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned __int8 *OutputName;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  void **v27[2];
  uint64_t v28;
  uint64_t v29;

  v4 = 1;
  if (!(*(uint64_t (**)(MIL::Builder::BlockBuilder *, uint64_t, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, a2, 1))
  {
    MIL::Builder::BlockBuilder::GetOperations(a1[1]);
    v5 = v28;
    if (v28 != v29)
    {
      while (1)
      {
        v6 = *(void ***)v5;
        v7 = *(std::__shared_weak_count **)(v5 + 8);
        v27[0] = *(void ***)v5;
        v27[1] = (void **)&v7->__vftable;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        OutputName = (unsigned __int8 *)MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder *)v6);
        v11 = OutputName[23];
        if ((v11 & 0x80u) == 0)
          v12 = OutputName[23];
        else
          v12 = *((_QWORD *)OutputName + 1);
        v13 = *(unsigned __int8 *)(a2 + 23);
        v14 = (char)v13;
        if ((v13 & 0x80u) != 0)
          v13 = *(_QWORD *)(a2 + 8);
        if (v12 != v13)
        {
          v4 = 0;
          if (v7)
            goto LABEL_28;
          goto LABEL_32;
        }
        v15 = v14 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
        if ((v11 & 0x80) != 0)
          break;
        if (OutputName[23])
        {
          v16 = v11 - 1;
          do
          {
            v18 = *OutputName++;
            v17 = v18;
            v20 = *v15++;
            v19 = v20;
            v22 = v16-- != 0;
            v4 = v17 == v19;
          }
          while (v17 == v19 && v22);
LABEL_27:
          if (v7)
            goto LABEL_28;
          goto LABEL_32;
        }
        v4 = 1;
        if (v7)
        {
LABEL_28:
          v23 = (unint64_t *)&v7->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
LABEL_32:
        v5 += 16;
        v25 = v5 == v29 || v4;
        if ((v25 & 1) != 0)
          goto LABEL_40;
      }
      v4 = memcmp(*(const void **)OutputName, v15, *((_QWORD *)OutputName + 1)) == 0;
      goto LABEL_27;
    }
    v4 = 0;
LABEL_40:
    v27[0] = (void **)&v28;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](v27);
  }
  return v4;
}

void sub_2068BFF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  a10 = (void **)&a12;
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__shared_ptr_pointer<MIL::Builder::ProgramBuilder  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::ProgramBuilder  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::ProgramBuilder  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::unordered_map<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>> const&>(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_2068C0184(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::__construct_node_hash<std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_2068C0400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::__construct_node_hash<std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2068C0474(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<TranslatorStatus ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_2068C04E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<TranslatorStatus ()(MIL::IROperation const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_2068C0868(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2068C0B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2068C0C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::vector<unsigned long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2068C0E30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::OpTranslator::InferTransposedShape()
{
  __assert_rtn("InferTransposedShape", "OpTranslator.cpp", 211, "shape.size() == positive_perm.size()");
}

uint64_t _GLOBAL__sub_I_OpTranslator_cpp()
{
  _QWORD *v0;
  _QWORD *v1;

  std::string::basic_string[abi:ne180100]<0>(v0 + 3, "C");
  std::string::basic_string[abi:ne180100]<0>(qword_253CF8170, "NC");
  std::string::basic_string[abi:ne180100]<0>(qword_253CF8188, "NCW");
  std::string::basic_string[abi:ne180100]<0>(qword_253CF81A0, "NCHW");
  std::string::basic_string[abi:ne180100]<0>(qword_253CF81B8, "NCDHW");
  std::string::basic_string[abi:ne180100]<0>(v1 + 3, "C");
  std::string::basic_string[abi:ne180100]<0>(qword_253CF8090, "NC");
  std::string::basic_string[abi:ne180100]<0>(qword_253CF80A8, "NWC");
  std::string::basic_string[abi:ne180100]<0>(qword_253CF80C0, "NHWC");
  std::string::basic_string[abi:ne180100]<0>(qword_253CF80D8, "NDHWC");
}

void sub_2068C0FD0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  _GLOBAL__sub_I_OpTranslator_cpp_cold_1(v1);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_OpTranslator_cpp_cold_1(_QWORD *a1)
{
  do
  {
    if (*((char *)a1 - 1) < 0)
      operator delete((void *)*(a1 - 3));
    a1 -= 3;
  }
}

void _GLOBAL__sub_I_OpTranslator_cpp_cold_2(_QWORD *a1)
{
  do
  {
    if (*((char *)a1 - 1) < 0)
      operator delete((void *)*(a1 - 3));
    a1 -= 3;
  }
}

void ANEMachineIR::H2021::Validators::ValidateBaseActivation(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateBaseActivation(this, a2);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateLinear@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateLinear(this, a2);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateLrelu@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateLrelu(this, a2);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateNePiecewiseV2@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateNePiecewiseV2(this, a2);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateRelu(ANEMachineIR::H2021::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateScaledActivation(ANEMachineIR::H2021::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateSigmoid(ANEMachineIR::H2021::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateSqrt(ANEMachineIR::H2021::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateTanh(ANEMachineIR::H2021::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 1);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateBasePeElementWiseBinary@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateBasePeElementWiseUnary@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateNeActivation@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

void ANEMachineIR::H2020::Validators::ValidateNeAdd(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeAdd(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidateNeMaximum(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeMaximum(this, a2);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateNeMinimum@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateNeMul@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateNeSquare@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

void ANEMachineIR::H2020::Validators::ValidatePeAbs(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseUnary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeSquare(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseUnary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeAdd(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeAddAbs(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeAddMul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeAddSquare(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeMaximum(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeMinimum(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeMul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeNotEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeLess(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeLessEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeGreater(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeGreaterEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2021::Opsets::aneflowh2021Opset::Register(ANEMachineIR::H2021::Opsets::aneflowh2021Opset *this, MIL::MILContext *a2)
{
  ANEMachineIR::H2021::Opsets::aneflowh2021Opset *v3;
  ANEMachineIR::H2021::Opsets::aneflowh2021Opset *v4;
  ANEMachineIR::H2021::Opsets::aneflowh2021Opset *v5;
  void *__p[2];
  char v7;

  v7 = 12;
  strcpy((char *)__p, "aneflowh2021");
  v3 = (ANEMachineIR::H2021::Opsets::aneflowh2021Opset *)operator new();
  ANEMachineIR::H2021::Opsets::aneflowh2021Opset::aneflowh2021Opset(v3, this);
  v5 = v3;
  (*(void (**)(ANEMachineIR::H2021::Opsets::aneflowh2021Opset *, void **, ANEMachineIR::H2021::Opsets::aneflowh2021Opset **))(*(_QWORD *)this + 32))(this, __p, &v5);
  v4 = v5;
  v5 = 0;
  if (v4)
    (*(void (**)(ANEMachineIR::H2021::Opsets::aneflowh2021Opset *))(*(_QWORD *)v4 + 8))(v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_2068C122C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MIL::IROpset *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18;

  v18 = a11;
  a11 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  std::unique_ptr<ANEMachineIR::H2021::Opsets::aneflowh2021Opset>::reset[abi:ne180100](&a10, 0);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const char *ANEMachineIR::H2021::Opsets::aneflowh2021Opset::GetOpsetName(ANEMachineIR::H2021::Opsets::aneflowh2021Opset *this)
{
  return "aneflowh2021";
}

ANEMachineIR::H2021::Opsets::aneflowh2021Opset *ANEMachineIR::H2021::Opsets::aneflowh2021Opset::aneflowh2021Opset(ANEMachineIR::H2021::Opsets::aneflowh2021Opset *this, MIL::MILContext *a2)
{
  _BYTE v4[40];

  ANEMachineIR::H2021::Opsets::aneflowh2021Opset::GetOps(a2, (uint64_t)v4);
  MIL::IROpset::IROpset();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v4);
  *(_QWORD *)this = &off_24BFEAF58;
  return this;
}

void sub_2068C12FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Opsets::aneflowh2021Opset::GetOps(ANEMachineIR::H2021::Opsets::aneflowh2021Opset *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  void *v80[2];
  char v81;
  void *v82[2];
  char v83;
  void *v84[2];
  char v85;
  void *v86[2];
  char v87;
  void *v88[2];
  char v89;
  void *v90[2];
  char v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  void *v96[2];
  char v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104[2];
  char v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110[2];
  char v111;
  void *v112[2];
  char v113;
  void *__p[2];
  char v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  void *v120[2];
  char v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  uint64_t v134;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v132, "base_ne_matmul");
  ANEMachineIR::H2021::BaseNeMatmul::Make(this, (uint64_t)v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "base_ne_matmul", &v134);
  v5 = v134;
  v134 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v133 < 0)
    operator delete(v132[0]);
  std::string::basic_string[abi:ne180100]<0>(v130, "const");
  ANEMachineIR::H2021::Const::Make((uint64_t)this, (uint64_t)v130);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "const", &v134);
  v6 = v134;
  v134 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v131 < 0)
    operator delete(v130[0]);
  std::string::basic_string[abi:ne180100]<0>(v128, "linear");
  ANEMachineIR::H2021::Linear::Make(this, (uint64_t)v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "linear", &v134);
  v7 = v134;
  v134 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v129 < 0)
    operator delete(v128[0]);
  std::string::basic_string[abi:ne180100]<0>(v126, "lrelu");
  ANEMachineIR::H2021::Lrelu::Make(this, (uint64_t)v126);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "lrelu", &v134);
  v8 = v134;
  v134 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v127 < 0)
    operator delete(v126[0]);
  std::string::basic_string[abi:ne180100]<0>(v124, "ne_activation");
  ANEMachineIR::H2021::NeActivation::Make(this, (uint64_t)v124, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_activation", &v134);
  v9 = v134;
  v134 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v125 < 0)
    operator delete(v124[0]);
  std::string::basic_string[abi:ne180100]<0>(v122, "ne_add");
  ANEMachineIR::H2021::NeAdd::Make(this, (uint64_t)v122, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_add", &v134);
  v10 = v134;
  v134 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v123 < 0)
    operator delete(v122[0]);
  std::string::basic_string[abi:ne180100]<0>(v120, "ne_avg_pool");
  ANEMachineIR::H2021::NeAvgPool::Make(this, (uint64_t)v120, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_avg_pool", &v134);
  v11 = v134;
  v134 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v121 < 0)
    operator delete(v120[0]);
  std::string::basic_string[abi:ne180100]<0>(v118, "ne_batch_matmul");
  ANEMachineIR::H2021::NeBatchMatmul::Make(this, (uint64_t)v118, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_batch_matmul", &v134);
  v12 = v134;
  v134 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v119 < 0)
    operator delete(v118[0]);
  std::string::basic_string[abi:ne180100]<0>(v116, "ne_conv");
  ANEMachineIR::H2021::NeConv::Make(this, (uint64_t)v116, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_conv", &v134);
  v13 = v134;
  v134 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v117 < 0)
    operator delete(v116[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ne_matmul");
  ANEMachineIR::H2021::NeMatmul::Make(this, (uint64_t)__p, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_matmul", &v134);
  v14 = v134;
  v134 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v115 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v112, "ne_max_pool");
  ANEMachineIR::H2021::NeMaxPool::Make(this, (uint64_t)v112, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_max_pool", &v134);
  v15 = v134;
  v134 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v113 < 0)
    operator delete(v112[0]);
  std::string::basic_string[abi:ne180100]<0>(v110, "ne_maximum");
  ANEMachineIR::H2021::NeMaximum::Make(this, (uint64_t)v110, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_maximum", &v134);
  v16 = v134;
  v134 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v111 < 0)
    operator delete(v110[0]);
  std::string::basic_string[abi:ne180100]<0>(v108, "ne_min_pool");
  ANEMachineIR::H2021::NeMinPool::Make(this, (uint64_t)v108, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_min_pool", &v134);
  v17 = v134;
  v134 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (v109 < 0)
    operator delete(v108[0]);
  std::string::basic_string[abi:ne180100]<0>(v106, "ne_minimum");
  ANEMachineIR::H2021::NeMinimum::Make(this, (uint64_t)v106, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_minimum", &v134);
  v18 = v134;
  v134 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v107 < 0)
    operator delete(v106[0]);
  std::string::basic_string[abi:ne180100]<0>(v104, "ne_mul");
  ANEMachineIR::H2021::NeMul::Make(this, (uint64_t)v104, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_mul", &v134);
  v19 = v134;
  v134 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (v105 < 0)
    operator delete(v104[0]);
  std::string::basic_string[abi:ne180100]<0>(v102, "ne_piecewise_v2");
  ANEMachineIR::H2021::NePiecewiseV2::Make(this, (uint64_t)v102, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_piecewise_v2", &v134);
  v20 = v134;
  v134 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (v103 < 0)
    operator delete(v102[0]);
  std::string::basic_string[abi:ne180100]<0>(v100, "ne_reduce");
  ANEMachineIR::H2021::NeReduce::Make(this, (uint64_t)v100, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_reduce", &v134);
  v21 = v134;
  v134 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (v101 < 0)
    operator delete(v100[0]);
  std::string::basic_string[abi:ne180100]<0>(v98, "ne_square");
  ANEMachineIR::H2021::NeSquare::Make(this, (uint64_t)v98, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_square", &v134);
  v22 = v134;
  v134 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (v99 < 0)
    operator delete(v98[0]);
  std::string::basic_string[abi:ne180100]<0>(v96, "pe_abs");
  ANEMachineIR::H2021::PeAbs::Make(this, (uint64_t)v96, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_abs", &v134);
  v23 = v134;
  v134 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (v97 < 0)
    operator delete(v96[0]);
  std::string::basic_string[abi:ne180100]<0>(v94, "pe_add");
  ANEMachineIR::H2021::PeAdd::Make(this, (uint64_t)v94, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_add", &v134);
  v24 = v134;
  v134 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (v95 < 0)
    operator delete(v94[0]);
  std::string::basic_string[abi:ne180100]<0>(v92, "pe_add_abs");
  ANEMachineIR::H2021::PeAddAbs::Make(this, (uint64_t)v92, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_add_abs", &v134);
  v25 = v134;
  v134 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (v93 < 0)
    operator delete(v92[0]);
  std::string::basic_string[abi:ne180100]<0>(v90, "pe_add_mul");
  ANEMachineIR::H2021::PeAddMul::Make(this, (uint64_t)v90, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_add_mul", &v134);
  v26 = v134;
  v134 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (v91 < 0)
    operator delete(v90[0]);
  std::string::basic_string[abi:ne180100]<0>(v88, "pe_add_square");
  ANEMachineIR::H2021::PeAddSquare::Make(this, (uint64_t)v88, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_add_square", &v134);
  v27 = v134;
  v134 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (v89 < 0)
    operator delete(v88[0]);
  std::string::basic_string[abi:ne180100]<0>(v86, "pe_avg_pool");
  ANEMachineIR::H2021::PeAvgPool::Make(this, (uint64_t)v86, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_avg_pool", &v134);
  v28 = v134;
  v134 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (v87 < 0)
    operator delete(v86[0]);
  std::string::basic_string[abi:ne180100]<0>(v84, "pe_equal");
  ANEMachineIR::H2021::PeEqual::Make(this, (uint64_t)v84, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_equal", &v134);
  v29 = v134;
  v134 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (v85 < 0)
    operator delete(v84[0]);
  std::string::basic_string[abi:ne180100]<0>(v82, "pe_greater");
  ANEMachineIR::H2021::PeGreater::Make(this, (uint64_t)v82, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_greater", &v134);
  v30 = v134;
  v134 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (v83 < 0)
    operator delete(v82[0]);
  std::string::basic_string[abi:ne180100]<0>(v80, "pe_greater_equal");
  ANEMachineIR::H2021::PeGreaterEqual::Make(this, (uint64_t)v80, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_greater_equal", &v134);
  v31 = v134;
  v134 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  if (v81 < 0)
    operator delete(v80[0]);
  std::string::basic_string[abi:ne180100]<0>(v78, "pe_less");
  ANEMachineIR::H2021::PeLess::Make(this, (uint64_t)v78, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_less", &v134);
  v32 = v134;
  v134 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  if (v79 < 0)
    operator delete(v78[0]);
  std::string::basic_string[abi:ne180100]<0>(v76, "pe_less_equal");
  ANEMachineIR::H2021::PeLessEqual::Make(this, (uint64_t)v76, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_less_equal", &v134);
  v33 = v134;
  v134 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  if (v77 < 0)
    operator delete(v76[0]);
  std::string::basic_string[abi:ne180100]<0>(v74, "pe_max_pool");
  ANEMachineIR::H2021::PeMaxPool::Make(this, (uint64_t)v74, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_max_pool", &v134);
  v34 = v134;
  v134 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if (v75 < 0)
    operator delete(v74[0]);
  std::string::basic_string[abi:ne180100]<0>(v72, "pe_maximum");
  ANEMachineIR::H2021::PeMaximum::Make(this, (uint64_t)v72, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_maximum", &v134);
  v35 = v134;
  v134 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (v73 < 0)
    operator delete(v72[0]);
  std::string::basic_string[abi:ne180100]<0>(v70, "pe_min_pool");
  ANEMachineIR::H2021::PeMinPool::Make(this, (uint64_t)v70, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_min_pool", &v134);
  v36 = v134;
  v134 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  if (v71 < 0)
    operator delete(v70[0]);
  std::string::basic_string[abi:ne180100]<0>(v68, "pe_minimum");
  ANEMachineIR::H2021::PeMinimum::Make(this, (uint64_t)v68, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_minimum", &v134);
  v37 = v134;
  v134 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (v69 < 0)
    operator delete(v68[0]);
  std::string::basic_string[abi:ne180100]<0>(v66, "pe_mul");
  ANEMachineIR::H2021::PeMul::Make(this, (uint64_t)v66, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_mul", &v134);
  v38 = v134;
  v134 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (v67 < 0)
    operator delete(v66[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "pe_not_equal");
  ANEMachineIR::H2021::PeNotEqual::Make(this, (uint64_t)v64, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_not_equal", &v134);
  v39 = v134;
  v134 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "pe_reduce");
  ANEMachineIR::H2021::PeReduce::Make(this, (uint64_t)v62, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_reduce", &v134);
  v40 = v134;
  v134 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v60, "pe_square");
  ANEMachineIR::H2021::PeSquare::Make(this, (uint64_t)v60, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_square", &v134);
  v41 = v134;
  v134 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  if (v61 < 0)
    operator delete(v60[0]);
  std::string::basic_string[abi:ne180100]<0>(v58, "relu");
  ANEMachineIR::H2021::Relu::Make(this, (uint64_t)v58);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "relu", &v134);
  v42 = v134;
  v134 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  if (v59 < 0)
    operator delete(v58[0]);
  std::string::basic_string[abi:ne180100]<0>(v56, "reshape");
  ANEMachineIR::H2021::Reshape::Make(this, (uint64_t)v56, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "reshape", &v134);
  v43 = v134;
  v134 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  if (v57 < 0)
    operator delete(v56[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "sigmoid");
  ANEMachineIR::H2021::Sigmoid::Make(this, (uint64_t)v54);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "sigmoid", &v134);
  v44 = v134;
  v134 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  if (v55 < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v52, "sqrt");
  ANEMachineIR::H2021::Sqrt::Make(this, (uint64_t)v52);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "sqrt", &v134);
  v45 = v134;
  v134 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  if (v53 < 0)
    operator delete(v52[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "tanh");
  ANEMachineIR::H2021::Tanh::Make(this, (uint64_t)v50);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "tanh", &v134);
  v46 = v134;
  v134 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v48, "transpose");
  ANEMachineIR::H2021::Transpose::Make(this, (uint64_t)v48, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "transpose", &v134);
  v47 = v134;
  v134 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  if (v49 < 0)
    operator delete(v48[0]);
}

