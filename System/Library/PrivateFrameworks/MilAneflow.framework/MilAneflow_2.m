void sub_2069378A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  v32 = *(void **)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<signed char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, char a10)
{
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Index;
  char v41;
  float v42;
  float v43;
  long double v44;
  double v45;
  uint64_t v46;
  float v47;
  char v48;
  int v49;
  const char *v50;
  int v51;
  const char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t *v62;
  uint64_t i;
  uint64_t j;
  char v65;
  unsigned int v66;
  uint64_t v67;
  void *__p;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  __int16 v75;
  int __e;
  int64x2_t __src;
  char v78[16];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v75 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v15 = *(const void **)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v17 = (v16 - *(_QWORD *)a3) >> 3;
  if (v17 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v50 = "x_rank == o_shape.size()";
    v51 = 189;
    goto LABEL_73;
  }
  v18 = v17 - 2;
  v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v50 = "kernel_sizes.size() == num_spatial_dims";
    v51 = 190;
    goto LABEL_73;
  }
  v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v50 = "strides.size() == num_spatial_dims";
    v51 = 191;
LABEL_73:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v51, v50);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        v21 = v20 + 2;
        v56 = (int)v20[1];
        v22 = v19 + 2;
        v67 = (int)v19[1];
        goto LABEL_13;
      }
      v52 = "sz == 1";
      v53 = 202;
    }
    else
    {
      v52 = "kd == 1";
      v53 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v53, v52);
  }
  if (v18 <= 1)
  {
    v25 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v25);
    v21 = (_DWORD *)((char *)v20 + v25);
    v67 = 1;
    v56 = 1;
  }
  else
  {
    v23 = 4 * v17 - 16;
    v67 = *(int *)((char *)v19 + v23);
    v24 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v24);
    v56 = *(int *)((char *)v20 + v23);
    v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_13:
  v58 = *v21;
  v66 = *v22;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v72, v15, v16, v17);
  __p = 0;
  v70 = 0;
  v71 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v72, (uint64_t)v72 + 8, __src.i8, v78, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v78, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v72, (char *)v72 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  v26 = *(_QWORD *)__p;
  v27 = *((_QWORD *)__p + 1);
  v57 = *((_QWORD *)__p + 2);
  v28 = *((_QWORD *)__p + 4);
  v59 = *((_QWORD *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v75);
  __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    v30 = 0;
    if (a10)
      v31 = 0x80;
    else
      v31 = 127;
    v65 = v31;
    v32 = v66;
    if (v66 <= 1)
      v32 = 1;
    v33 = v32;
    v62 = a9;
    v54 = v26;
    v55 = v27;
    v60 = v28;
    do
    {
      if (v27)
      {
        v34 = 0;
        do
        {
          if (v57)
          {
            for (i = 0; i != v57; ++i)
            {
              if (v59)
              {
                v35 = 0;
                for (j = 0; j != v59; ++j)
                {
                  if (v28)
                  {
                    v36 = 0;
                    do
                    {
                      v37 = v65;
                      if (v67)
                      {
                        v38 = 0;
                        v37 = v65;
                        do
                        {
                          if (v66)
                          {
                            v39 = 0;
                            do
                            {
                              v41 = *(_BYTE *)(a1 + Index);
                              if (v39 | v38)
                              {
                                if (a10)
                                {
                                  if (v37 <= v41)
                                    v37 = *(_BYTE *)(a1 + Index);
                                }
                                else if (v37 > v41)
                                {
                                  v37 = *(_BYTE *)(a1 + Index);
                                }
                              }
                              else
                              {
                                v37 = *(_BYTE *)(a1 + Index);
                              }
                              ++v39;
                            }
                            while (v33 != v39);
                          }
                          ++v38;
                        }
                        while (v38 != v67);
                      }
                      v42 = *(float *)(__src.i64[0] + 4 * v36) * (float)v37;
                      v43 = 0.0;
                      if (v42 != 0.0)
                      {
                        __e = 0;
                        v44 = frexp(v42, &__e);
                        v45 = ldexp(v44, 11);
                        v43 = ldexp(round(v45), __e - 11);
                      }
                      __e = LODWORD(v43);
                      v46 = *(_QWORD *)(a8 + 24);
                      v28 = v60;
                      if (!v46)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v47 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v46 + 48))(v46, &__e);
                      if (v47 == INFINITY)
                      {
                        v48 = 127;
                      }
                      else if (v47 == -INFINITY)
                      {
                        v48 = 0x80;
                      }
                      else
                      {
                        v49 = llroundf(v47);
                        if (v49 >= 127)
                          v49 = 127;
                        if (v49 <= -128)
                          v48 = 0x80;
                        else
                          v48 = v49;
                      }
                      *(_BYTE *)(*v62
                    }
                    while (v36 != v60);
                  }
                  v35 += v58;
                }
              }
            }
          }
          ++v34;
          v27 = v55;
        }
        while (v34 != v55);
      }
      ++v30;
    }
    while (v30 != v54);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    v70 = __p;
    operator delete(__p);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
}

void sub_206937EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  v32 = *(void **)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_206937FF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEB930;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEB930;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEB9B0;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEB9B0;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  MIL::Fp16 *Float;
  float v3;
  __int16 v5;

  v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0)
    v3 = 0.0;
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEBA30;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEBA30;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEBAB0;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEBAB0;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  MIL::Fp16 *Float;
  float v3;
  __int16 v5;

  v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0)
    v3 = 0.0;
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEBB30;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEBB30;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEBBB0;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEBBB0;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  MIL::Fp16 *Float;
  float v3;
  __int16 v5;

  v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0)
    v3 = 0.0;
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEBC30;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEBC30;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEBCB0;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEBCB0;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEBD30;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEBD30;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEBDB0;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEBDB0;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEBE30;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEBE30;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEBEB0;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEBEB0;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEBF30;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEBF30;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEBFB0;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEBFB0;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEC030;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEC030;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

uint64_t ANEMachineIR::H2020::BasePeElementWiseBinary::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  unsigned __int8 *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  unsigned __int8 *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  unsigned __int8 *v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  char **v81;
  uint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  __int128 v104;
  char *v105;
  char *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  char **v114;
  _QWORD *v115;
  uint64_t v116;
  MIL::Validation::TensorDTypeConstraints *v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  void *v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count_vtbl *v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  void *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  MIL::Validation::TensorSymbolicShapeConstraints *v150;
  void *v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count_vtbl *v157;
  void *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count_vtbl *v164;
  void *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  void *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count_vtbl *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  MIL::Validation::PossibleStringValuesConstraints *v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  uint64_t i;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void *v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count_vtbl *v196;
  uint64_t j;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count_vtbl *v208;
  uint64_t result;
  uint64_t v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  void *v213;
  char v214;
  void *v215;
  std::__shared_weak_count *v216;
  void *v217;
  char v218;
  void *v219;
  std::__shared_weak_count *v220;
  void *v221;
  std::__shared_weak_count *v222;
  void *v223[2];
  char v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  char v228;
  void *v229;
  char v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  void *v233[2];
  char v234;
  void *v235;
  char v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  void *v239[2];
  char v240;
  void *v241;
  char v242;
  std::__shared_weak_count_vtbl *v243;
  std::__shared_weak_count *v244;
  void *v245;
  std::__shared_weak_count *v246;
  void *v247[2];
  char v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  void *v251[2];
  char v252;
  void *v253;
  char v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  void *v257[2];
  char v258;
  void *v259;
  char v260;
  std::__shared_weak_count_vtbl *v261;
  std::__shared_weak_count *v262;
  char **v263;
  std::__shared_weak_count *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  uint64_t v268;
  void *v269;
  void *v270;
  _QWORD *v271;
  std::__shared_weak_count *v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  char **v276;
  std::__shared_weak_count *v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count *v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count *v281;
  std::__shared_weak_count *v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count *v284;
  std::__shared_weak_count *v285;
  void *__p;
  void *v287;
  _QWORD *v288;
  std::__shared_weak_count *v289;
  _QWORD *v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD v294[3];
  _QWORD v295[3];
  _QWORD v296[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v298;
  uint64_t v299;
  _BYTE v300[24];
  _BYTE *v301;
  _QWORD v302[3];
  MIL::Validation::TensorDTypeConstraints *v303;
  std::__shared_weak_count_vtbl *v304;
  std::__shared_weak_count_vtbl *v305;
  void (__cdecl **v306)(std::__shared_weak_count *__hidden);
  uint64_t v307;

  v307 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v290 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v298 = (uint64_t)&v10->~__shared_weak_count_0;
  v299 = (uint64_t)&v10->~__shared_weak_count_0;
  v291 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v304 = v12;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v305 = (std::__shared_weak_count_vtbl *)&v12->~__shared_weak_count_0;
  v306 = &v12->~__shared_weak_count_0;
  v292 = MIL::IRTensorValueType::MakeWithShape();
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v288 = v14 + 1;
  v287 = v14 + 1;
  v293 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v269);
  v15 = v269;
  v269 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = v289;
  if (v289)
  {
    p_shared_owners = (unint64_t *)&v289->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  if (v304)
  {
    v305 = v304;
    operator delete(v304);
  }
  if (Scalar)
  {
    v298 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v19 = v290;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v21;
  v21->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  v298 = (uint64_t)&v21->~__shared_weak_count_0;
  v299 = (uint64_t)&v21->~__shared_weak_count_0;
  v291 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v304 = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  v305 = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v306 = &v23->~__shared_weak_count_0;
  v292 = MIL::IRTensorValueType::MakeWithShape();
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = v24;
  v288 = v25 + 1;
  v287 = v25 + 1;
  v293 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v269);
  v26 = v269;
  v269 = 0;
  if (v26)
    (*(void (**)(void *))(*(_QWORD *)v26 + 8))(v26);
  v27 = v285;
  if (v285)
  {
    v28 = (unint64_t *)&v285->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  if (v304)
  {
    v305 = v304;
    operator delete(v304);
  }
  if (Scalar)
  {
    v298 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v30 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v30, "x_scale", (uint64_t *)&v291);
  v32 = v291;
  v291 = 0;
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  v33 = v284;
  if (v284)
  {
    v34 = (unint64_t *)&v284->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 48))(*((_QWORD *)v31 + 5), 1);
  v36 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v36, "y_scale", (uint64_t *)&v291);
  v38 = v291;
  v291 = 0;
  if (v38)
    (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
  v39 = v283;
  if (v283)
  {
    v40 = (unint64_t *)&v283->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 32))(*((_QWORD *)v37 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 48))(*((_QWORD *)v37 + 5), 1);
  v42 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v42, "post_scale", (uint64_t *)&v291);
  v44 = v291;
  v291 = 0;
  if (v44)
    (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
  v45 = v282;
  if (v282)
  {
    v46 = (unint64_t *)&v282->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 32))(*((_QWORD *)v43 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 48))(*((_QWORD *)v43 + 5), 1);
  v48 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v48, "reduction", (uint64_t *)&v291);
  v50 = v291;
  v291 = 0;
  if (v50)
    (*(void (**)(void *))(*(_QWORD *)v50 + 8))(v50);
  v51 = v281;
  if (v281)
  {
    v52 = (unint64_t *)&v281->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v49 + 5) + 32))(*((_QWORD *)v49 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v49 + 5) + 48))(*((_QWORD *)v49 + 5), 1);
  v54 = v290;
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v291 = v56;
  *v56 = v55;
  v293 = (uint64_t)(v56 + 1);
  v292 = (uint64_t)(v56 + 1);
  v304 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v54, "reduction_axes", (uint64_t *)&Scalar);
  v58 = Scalar;
  Scalar = 0;
  if (v58)
    (*((void (**)(std::__shared_weak_count_vtbl *))v58->~__shared_weak_count + 1))(v58);
  v59 = v280;
  if (v280)
  {
    v60 = (unint64_t *)&v280->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v291)
  {
    v292 = (uint64_t)v291;
    operator delete(v291);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 32))(*((_QWORD *)v57 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 48))(*((_QWORD *)v57 + 5), 1);
  v62 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v62, "reduction_scale", (uint64_t *)&v291);
  v64 = v291;
  v291 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = v279;
  if (v279)
  {
    v66 = (unint64_t *)&v279->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v68, "reduction_epsilon", (uint64_t *)&v291);
  v70 = v291;
  v291 = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  v71 = v278;
  if (v278)
  {
    v72 = (unint64_t *)&v278->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[26],std::unique_ptr<MIL::IRParameter>>(v74, "reduction_post_processing", (uint64_t *)&v291);
  v76 = v291;
  v291 = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  v77 = v277;
  if (v277)
  {
    v78 = (unint64_t *)&v277->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 32))(*((_QWORD *)v75 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 48))(*((_QWORD *)v75 + 5), 1);
  v276 = 0;
  v80 = operator new();
  *(_QWORD *)v80 = 0;
  *(_QWORD *)(v80 + 8) = 0;
  *(_QWORD *)(v80 + 16) = 0;
  v291 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v276, (void **)v80);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v291, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v276, 1uLL);
  v81 = v276;
  v82 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v83 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v304 = v83;
  v83->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v82;
  v305 = (std::__shared_weak_count_vtbl *)&v83->~__shared_weak_count_0;
  v306 = &v83->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v84 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v85 = operator new(8uLL);
  __p = v85;
  *v85 = v84;
  v288 = v85 + 1;
  v287 = v85 + 1;
  v298 = MIL::IRTensorValueType::MakeWithShape();
  v86 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v87 = operator new(8uLL);
  v269 = v87;
  *v87 = v86;
  v271 = v87 + 1;
  v270 = v87 + 1;
  v299 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v88 = v273;
  v274 = v273;
  if (v273)
  {
    v89 = (_QWORD *)operator new();
    v90 = v273;
    *v89 = &unk_24BFE7320;
    v89[1] = 0;
    v89[2] = 0;
    v89[3] = v90;
  }
  else
  {
    v89 = 0;
  }
  v275 = v89;
  v273 = 0;
  v91 = v81[2];
  v92 = v81[1];
  if (v92 >= v91)
  {
    v94 = (v92 - *v81) >> 4;
    v95 = v94 + 1;
    if ((unint64_t)(v94 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v96 = v91 - *v81;
    if (v96 >> 3 > v95)
      v95 = v96 >> 3;
    if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0)
      v97 = 0xFFFFFFFFFFFFFFFLL;
    else
      v97 = v95;
    v294[1] = v81 + 2;
    v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v81 + 2), v97);
    v100 = &v98[16 * v94];
    *(_QWORD *)v100 = v88;
    *((_QWORD *)v100 + 1) = v89;
    v275 = 0;
    v274 = 0;
    v102 = *v81;
    v101 = v81[1];
    if (v101 == *v81)
    {
      v105 = v81[1];
      v103 = &v98[16 * v94];
    }
    else
    {
      v103 = &v98[16 * v94];
      do
      {
        v104 = *((_OWORD *)v101 - 1);
        v101 -= 16;
        *((_OWORD *)v103 - 1) = v104;
        v103 -= 16;
        *(_QWORD *)v101 = 0;
        *((_QWORD *)v101 + 1) = 0;
      }
      while (v101 != v102);
      v105 = *v81;
      v101 = v81[1];
    }
    v93 = v100 + 16;
    *v81 = v103;
    v292 = (uint64_t)v105;
    v81[1] = v100 + 16;
    v293 = (uint64_t)v101;
    v106 = v81[2];
    v81[2] = &v98[16 * v99];
    v294[0] = v106;
    v291 = v105;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v291);
  }
  else
  {
    *(_QWORD *)v92 = v88;
    *((_QWORD *)v92 + 1) = v89;
    v93 = v92 + 16;
    v275 = 0;
    v274 = 0;
  }
  v81[1] = v93;
  v107 = v273;
  v273 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  v108 = v272;
  if (v272)
  {
    v109 = (unint64_t *)&v272->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (v269)
  {
    v270 = v269;
    operator delete(v269);
  }
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  if (v304)
  {
    v305 = v304;
    operator delete(v304);
  }
  *(_OWORD *)v267 = *(_OWORD *)a2;
  v268 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v111 = (uint64_t)v290;
  v265 = (uint64_t)v290;
  if (v290)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = (std::__shared_weak_count_vtbl *)v111;
  }
  else
  {
    v112 = 0;
  }
  v266 = v112;
  v290 = 0;
  v263 = v276;
  if (v276)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v276;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v264 = v113;
  v276 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v302, a3);
  }
  else
  {
    v302[0] = &unk_24BFE7440;
    v302[1] = ANEMachineIR::H2020::Validators::ValidateBasePeElementWiseBinary;
    v303 = (MIL::Validation::TensorDTypeConstraints *)v302;
  }
  v301 = 0;
  MIL::IROperator::Make();
  v115 = v301;
  if (v301 == v300)
  {
    v116 = 4;
    v115 = v300;
  }
  else
  {
    if (!v301)
      goto LABEL_129;
    v116 = 5;
  }
  (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_129:
  v117 = v303;
  if (v303 == (MIL::Validation::TensorDTypeConstraints *)v302)
  {
    v118 = 4;
    v117 = (MIL::Validation::TensorDTypeConstraints *)v302;
    goto LABEL_133;
  }
  if (v303)
  {
    v118 = 5;
LABEL_133:
    v117 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v117 + 8 * v118))();
  }
  if (v264)
  {
    v119 = &v264->__shared_owners_;
    do
      v120 = __ldaxr((unint64_t *)v119);
    while (__stlxr(v120 - 1, (unint64_t *)v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  if (v266)
  {
    v121 = &v266->__shared_owners_;
    do
      v122 = __ldaxr((unint64_t *)v121);
    while (__stlxr(v122 - 1, (unint64_t *)v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  if (SHIBYTE(v268) < 0)
    operator delete(v267[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v117);
  v123 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v259, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v261 = Scalar;
  if (Scalar)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = Scalar;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = v125;
  }
  else
  {
    v124 = 0;
  }
  v262 = v124;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v257, "XDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v123 + 24))(v123, &v261, v257);
  if (v258 < 0)
    operator delete(v257[0]);
  v126 = v262;
  if (v262)
  {
    v127 = (unint64_t *)&v262->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = Scalar;
  Scalar = 0;
  if (v129)
    (*((void (**)(std::__shared_weak_count_vtbl *))v129->~__shared_weak_count + 1))(v129);
  if (v260 < 0)
    operator delete(v259);
  v130 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v253, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v255 = Scalar;
  if (Scalar)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = Scalar;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v256 = v131;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v251, "YDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v130 + 24))(v130, &v255, v251);
  if (v252 < 0)
    operator delete(v251[0]);
  v133 = v256;
  if (v256)
  {
    v134 = (unint64_t *)&v256->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = Scalar;
  Scalar = 0;
  if (v136)
    (*((void (**)(std::__shared_weak_count_vtbl *))v136->~__shared_weak_count + 1))(v136);
  if (v254 < 0)
    operator delete(v253);
  v137 = v291;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v249 = Scalar;
  if (Scalar)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = Scalar;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v250 = v138;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v247, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v137 + 24))(v137, &v249, v247);
  if (v248 < 0)
    operator delete(v247[0]);
  v140 = v250;
  if (v250)
  {
    v141 = (unint64_t *)&v250->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = Scalar;
  Scalar = 0;
  if (v143)
    (*((void (**)(std::__shared_weak_count_vtbl *))v143->~__shared_weak_count + 1))(v143);
  v144 = *a4;
  v245 = v291;
  if (v291)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = (std::__shared_weak_count_vtbl *)v291;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v246 = v145;
  v291 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v144 + 56))(v144, &v245);
  v147 = v246;
  if (v246)
  {
    v148 = (unint64_t *)&v246->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = (MIL::Validation::TensorSymbolicShapeConstraints *)v291;
  v291 = 0;
  if (v150)
    v150 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v150 + 8))(v150);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v150);
  v151 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v241, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v243 = Scalar;
  if (Scalar)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = Scalar;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v244 = v152;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v239, "XShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v151 + 40))(v151, &v243, v239);
  if (v240 < 0)
    operator delete(v239[0]);
  v154 = v244;
  if (v244)
  {
    v155 = (unint64_t *)&v244->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = Scalar;
  Scalar = 0;
  if (v157)
    (*((void (**)(std::__shared_weak_count_vtbl *))v157->~__shared_weak_count + 1))(v157);
  if (v242 < 0)
    operator delete(v241);
  v158 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v235, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v237 = Scalar;
  if (Scalar)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = Scalar;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v238 = v159;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v233, "YShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v158 + 40))(v158, &v237, v233);
  if (v234 < 0)
    operator delete(v233[0]);
  v161 = v238;
  if (v238)
  {
    v162 = (unint64_t *)&v238->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = Scalar;
  Scalar = 0;
  if (v164)
    (*((void (**)(std::__shared_weak_count_vtbl *))v164->~__shared_weak_count + 1))(v164);
  if (v236 < 0)
    operator delete(v235);
  v165 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v229, "reduction_axes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v231 = Scalar;
  if (Scalar)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = Scalar;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v232 = v166;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v227, "NUM_REDUCTION_AXES");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v165 + 24))(v165, &v231, 0, v227);
  if (v228 < 0)
    operator delete(v227[0]);
  v168 = v232;
  if (v232)
  {
    v169 = (unint64_t *)&v232->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = Scalar;
  Scalar = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  if (v230 < 0)
    operator delete(v229);
  v172 = v291;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v225 = Scalar;
  if (Scalar)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = Scalar;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v226 = v173;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v223, "XYBroadcastReducedShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v172 + 40))(v172, &v225, v223);
  if (v224 < 0)
    operator delete(v223[0]);
  v175 = v226;
  if (v226)
  {
    v176 = (unint64_t *)&v226->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = Scalar;
  Scalar = 0;
  if (v178)
    (*((void (**)(std::__shared_weak_count_vtbl *))v178->~__shared_weak_count + 1))(v178);
  v179 = *a4;
  v221 = v291;
  if (v291)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = (std::__shared_weak_count_vtbl *)v291;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v222 = v180;
  v291 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v179 + 56))(v179, &v221);
  v182 = v222;
  if (v222)
  {
    v183 = (unint64_t *)&v222->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = (MIL::Validation::PossibleStringValuesConstraints *)v291;
  v291 = 0;
  if (v185)
    v185 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v185 + 8))(v185);
  MIL::Validation::PossibleStringValuesConstraints::Make(v185);
  v186 = v304;
  std::string::basic_string[abi:ne180100]<0>(&v217, "reduction");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v219 = __p;
  if (__p)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = (std::__shared_weak_count_vtbl *)__p;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v220 = v187;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v291, "max");
  std::string::basic_string[abi:ne180100]<0>(v294, "mean");
  std::string::basic_string[abi:ne180100]<0>(v295, "min");
  std::string::basic_string[abi:ne180100]<0>(v296, "sum");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v291, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v186->~__shared_weak_count
   + 3))(v186, &v219, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v296[i + 2]) < 0)
      operator delete((void *)v296[i]);
  }
  v190 = v220;
  if (v220)
  {
    v191 = (unint64_t *)&v220->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = __p;
  __p = 0;
  if (v193)
    (*(void (**)(void *))(*(_QWORD *)v193 + 8))(v193);
  if (v218 < 0)
    operator delete(v217);
  v194 = v304;
  std::string::basic_string[abi:ne180100]<0>(&v213, "reduction_post_processing");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v215 = __p;
  if (__p)
  {
    v195 = (std::__shared_weak_count *)operator new();
    v196 = (std::__shared_weak_count_vtbl *)__p;
    v195->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v195->__shared_owners_ = 0;
    v195->__shared_weak_owners_ = 0;
    v195[1].__vftable = v196;
  }
  else
  {
    v195 = 0;
  }
  v216 = v195;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v291, "inv");
  std::string::basic_string[abi:ne180100]<0>(v294, "linear");
  std::string::basic_string[abi:ne180100]<0>(v295, "rsqrt");
  std::string::basic_string[abi:ne180100]<0>(v296, "sqrt");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v291, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v194->~__shared_weak_count
   + 3))(v194, &v215, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v296[j + 2]) < 0)
      operator delete((void *)v296[j]);
  }
  v198 = v216;
  if (v216)
  {
    v199 = (unint64_t *)&v216->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = __p;
  __p = 0;
  if (v201)
    (*(void (**)(void *))(*(_QWORD *)v201 + 8))(v201);
  if (v214 < 0)
    operator delete(v213);
  v202 = *a4;
  v211 = v304;
  if (v304)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = v304;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v212 = v203;
  v304 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v202 + 56))(v202, &v211);
  v205 = v212;
  if (v212)
  {
    v206 = (unint64_t *)&v212->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = v304;
  v304 = 0;
  if (v208)
    (*((void (**)(std::__shared_weak_count_vtbl *))v208->~__shared_weak_count + 1))(v208);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v276, 0);
  result = (uint64_t)v290;
  if (v290)
  {
    v210 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v290);
    return MEMORY[0x20BCFF140](v210, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20693A4EC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x290], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x350], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeAdd::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeAdd;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693ADE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeAddAbs::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeAddAbs;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693AF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeAddMul::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeAddMul;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693B018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeAddSquare::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeAddSquare;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693B130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeEqual::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeEqual;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693B248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeGreater::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeGreater;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693B360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeGreaterEqual::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeGreaterEqual;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693B478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeLess::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeLess;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693B590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeLessEqual::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeLessEqual;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693B6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeMaximum::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeMaximum;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693B7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeMinimum::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeMinimum;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693B8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeMul::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeMul;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693B9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeNotEqual::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeNotEqual;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693BB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2020::BasePeElementWiseUnary::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  unsigned __int8 *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  uint64_t v59;
  std::__shared_weak_count_vtbl *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  char *v82;
  char *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  char **v91;
  _QWORD *v92;
  uint64_t v93;
  MIL::Validation::TensorDTypeConstraints *v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  void *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  MIL::Validation::TensorSymbolicShapeConstraints *v120;
  void *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  void *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  void *v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count_vtbl *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  MIL::Validation::PossibleStringValuesConstraints *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  uint64_t i;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  uint64_t j;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  uint64_t result;
  uint64_t v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  void *v176;
  char v177;
  void *v178;
  std::__shared_weak_count *v179;
  void *v180;
  char v181;
  void *v182;
  std::__shared_weak_count *v183;
  void *v184;
  std::__shared_weak_count *v185;
  void *v186[2];
  char v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  void *v190[2];
  char v191;
  void *v192;
  char v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  void *v198;
  char v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  void *v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  char v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  void *v208[2];
  char v209;
  void *v210;
  char v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  char **v214;
  std::__shared_weak_count *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  void *v218[2];
  uint64_t v219;
  void *v220;
  void *v221;
  _QWORD *v222;
  std::__shared_weak_count *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  char **v227;
  std::__shared_weak_count *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count *v233;
  void *__p;
  void *v235;
  _QWORD *v236;
  std::__shared_weak_count *v237;
  _QWORD *v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD v242[3];
  _QWORD v243[3];
  _QWORD v244[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v246;
  uint64_t v247;
  _BYTE v248[24];
  _BYTE *v249;
  _QWORD v250[3];
  MIL::Validation::TensorDTypeConstraints *v251;
  std::__shared_weak_count_vtbl *v252;
  std::__shared_weak_count_vtbl *v253;
  void (__cdecl **v254)(std::__shared_weak_count *__hidden);
  uint64_t v255;

  v255 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v238 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v246 = (uint64_t)&v10->~__shared_weak_count_0;
  v247 = (uint64_t)&v10->~__shared_weak_count_0;
  v239 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v252 = v12;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v253 = (std::__shared_weak_count_vtbl *)&v12->~__shared_weak_count_0;
  v254 = &v12->~__shared_weak_count_0;
  v240 = MIL::IRTensorValueType::MakeWithShape();
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v236 = v14 + 1;
  v235 = v14 + 1;
  v241 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v220);
  v15 = v220;
  v220 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = v237;
  if (v237)
  {
    p_shared_owners = (unint64_t *)&v237->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v235 = __p;
    operator delete(__p);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (Scalar)
  {
    v246 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v19 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v19, "post_scale", (uint64_t *)&v239);
  v21 = v239;
  v239 = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = v233;
  if (v233)
  {
    v23 = (unint64_t *)&v233->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 48))(*((_QWORD *)v20 + 5), 1);
  v25 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v25, "reduction", (uint64_t *)&v239);
  v27 = v239;
  v239 = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = v232;
  if (v232)
  {
    v29 = (unint64_t *)&v232->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v31 = v238;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = operator new(8uLL);
  v239 = v33;
  *v33 = v32;
  v241 = (uint64_t)(v33 + 1);
  v240 = (uint64_t)(v33 + 1);
  v252 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v31, "reduction_axes", (uint64_t *)&Scalar);
  v35 = Scalar;
  Scalar = 0;
  if (v35)
    (*((void (**)(std::__shared_weak_count_vtbl *))v35->~__shared_weak_count + 1))(v35);
  v36 = v231;
  if (v231)
  {
    v37 = (unint64_t *)&v231->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v239)
  {
    v240 = (uint64_t)v239;
    operator delete(v239);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 48))(*((_QWORD *)v34 + 5), 1);
  v39 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v39, "reduction_scale", (uint64_t *)&v239);
  v41 = v239;
  v239 = 0;
  if (v41)
    (*(void (**)(void *))(*(_QWORD *)v41 + 8))(v41);
  v42 = v230;
  if (v230)
  {
    v43 = (unint64_t *)&v230->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 32))(*((_QWORD *)v40 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 48))(*((_QWORD *)v40 + 5), 1);
  v45 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v45, "reduction_epsilon", (uint64_t *)&v239);
  v47 = v239;
  v239 = 0;
  if (v47)
    (*(void (**)(void *))(*(_QWORD *)v47 + 8))(v47);
  v48 = v229;
  if (v229)
  {
    v49 = (unint64_t *)&v229->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v46 + 5) + 32))(*((_QWORD *)v46 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v46 + 5) + 48))(*((_QWORD *)v46 + 5), 1);
  v51 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[26],std::unique_ptr<MIL::IRParameter>>(v51, "reduction_post_processing", (uint64_t *)&v239);
  v53 = v239;
  v239 = 0;
  if (v53)
    (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
  v54 = v228;
  if (v228)
  {
    v55 = (unint64_t *)&v228->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v52 + 5) + 32))(*((_QWORD *)v52 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v52 + 5) + 48))(*((_QWORD *)v52 + 5), 1);
  v227 = 0;
  v57 = operator new();
  *(_QWORD *)v57 = 0;
  *(_QWORD *)(v57 + 8) = 0;
  *(_QWORD *)(v57 + 16) = 0;
  v239 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v227, (void **)v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v239, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v227, 1uLL);
  v58 = v227;
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v252 = v60;
  v60->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v59;
  v253 = (std::__shared_weak_count_vtbl *)&v60->~__shared_weak_count_0;
  v254 = &v60->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  __p = v62;
  *v62 = v61;
  v236 = v62 + 1;
  v235 = v62 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape();
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v220 = v64;
  *v64 = v63;
  v221 = v64 + 1;
  v222 = v64 + 1;
  v247 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v65 = v224;
  v225 = v224;
  if (v224)
  {
    v66 = (_QWORD *)operator new();
    v67 = v224;
    *v66 = &unk_24BFE7320;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  v226 = v66;
  v224 = 0;
  v68 = v58[2];
  v69 = v58[1];
  if (v69 >= v68)
  {
    v71 = (v69 - *v58) >> 4;
    v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v73 = v68 - *v58;
    if (v73 >> 3 > v72)
      v72 = v73 >> 3;
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
      v74 = 0xFFFFFFFFFFFFFFFLL;
    else
      v74 = v72;
    v242[1] = v58 + 2;
    v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v58 + 2), v74);
    v77 = &v75[16 * v71];
    *(_QWORD *)v77 = v65;
    *((_QWORD *)v77 + 1) = v66;
    v226 = 0;
    v225 = 0;
    v79 = *v58;
    v78 = v58[1];
    if (v78 == *v58)
    {
      v82 = v58[1];
      v80 = &v75[16 * v71];
    }
    else
    {
      v80 = &v75[16 * v71];
      do
      {
        v81 = *((_OWORD *)v78 - 1);
        v78 -= 16;
        *((_OWORD *)v80 - 1) = v81;
        v80 -= 16;
        *(_QWORD *)v78 = 0;
        *((_QWORD *)v78 + 1) = 0;
      }
      while (v78 != v79);
      v82 = *v58;
      v78 = v58[1];
    }
    v70 = v77 + 16;
    *v58 = v80;
    v240 = (uint64_t)v82;
    v58[1] = v77 + 16;
    v241 = (uint64_t)v78;
    v83 = v58[2];
    v58[2] = &v75[16 * v76];
    v242[0] = v83;
    v239 = v82;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v239);
  }
  else
  {
    *(_QWORD *)v69 = v65;
    *((_QWORD *)v69 + 1) = v66;
    v70 = v69 + 16;
    v226 = 0;
    v225 = 0;
  }
  v58[1] = v70;
  v84 = v224;
  v224 = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  v85 = v223;
  if (v223)
  {
    v86 = (unint64_t *)&v223->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (__p)
  {
    v235 = __p;
    operator delete(__p);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  *(_OWORD *)v218 = *(_OWORD *)a2;
  v219 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v88 = (uint64_t)v238;
  v216 = (uint64_t)v238;
  if (v238)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = (std::__shared_weak_count_vtbl *)v88;
  }
  else
  {
    v89 = 0;
  }
  v217 = v89;
  v238 = 0;
  v214 = v227;
  if (v227)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v227;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v91;
  }
  else
  {
    v90 = 0;
  }
  v215 = v90;
  v227 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v250, a3);
  }
  else
  {
    v250[0] = &unk_24BFE7440;
    v250[1] = ANEMachineIR::H2020::Validators::ValidateBasePeElementWiseUnary;
    v251 = (MIL::Validation::TensorDTypeConstraints *)v250;
  }
  v249 = 0;
  MIL::IROperator::Make();
  v92 = v249;
  if (v249 == v248)
  {
    v93 = 4;
    v92 = v248;
  }
  else
  {
    if (!v249)
      goto LABEL_102;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_102:
  v94 = v251;
  if (v251 == (MIL::Validation::TensorDTypeConstraints *)v250)
  {
    v95 = 4;
    v94 = (MIL::Validation::TensorDTypeConstraints *)v250;
    goto LABEL_106;
  }
  if (v251)
  {
    v95 = 5;
LABEL_106:
    v94 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v94 + 8 * v95))();
  }
  if (v215)
  {
    v96 = &v215->__shared_owners_;
    do
      v97 = __ldaxr((unint64_t *)v96);
    while (__stlxr(v97 - 1, (unint64_t *)v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  if (v217)
  {
    v98 = &v217->__shared_owners_;
    do
      v99 = __ldaxr((unint64_t *)v98);
    while (__stlxr(v99 - 1, (unint64_t *)v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  if (SHIBYTE(v219) < 0)
    operator delete(v218[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v94);
  v100 = v239;
  std::string::basic_string[abi:ne180100]<0>(&v210, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v212 = Scalar;
  if (Scalar)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = Scalar;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v213 = v101;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v208, "XDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v100 + 24))(v100, &v212, v208);
  if (v209 < 0)
    operator delete(v208[0]);
  v103 = v213;
  if (v213)
  {
    v104 = (unint64_t *)&v213->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = Scalar;
  Scalar = 0;
  if (v106)
    (*((void (**)(std::__shared_weak_count_vtbl *))v106->~__shared_weak_count + 1))(v106);
  if (v211 < 0)
    operator delete(v210);
  v107 = v239;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v206 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v207 = v108;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v204, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v107 + 24))(v107, &v206, v204);
  if (v205 < 0)
    operator delete(v204[0]);
  v110 = v207;
  if (v207)
  {
    v111 = (unint64_t *)&v207->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  v114 = *a4;
  v202 = v239;
  if (v239)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)v239;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v203 = v115;
  v239 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v114 + 56))(v114, &v202);
  v117 = v203;
  if (v203)
  {
    v118 = (unint64_t *)&v203->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = (MIL::Validation::TensorSymbolicShapeConstraints *)v239;
  v239 = 0;
  if (v120)
    v120 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v120 + 8))(v120);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v120);
  v121 = v239;
  std::string::basic_string[abi:ne180100]<0>(&v198, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v200 = Scalar;
  if (Scalar)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = Scalar;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v201 = v122;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "XShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v121 + 40))(v121, &v200, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v124 = v201;
  if (v201)
  {
    v125 = (unint64_t *)&v201->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = Scalar;
  Scalar = 0;
  if (v127)
    (*((void (**)(std::__shared_weak_count_vtbl *))v127->~__shared_weak_count + 1))(v127);
  if (v199 < 0)
    operator delete(v198);
  v128 = v239;
  std::string::basic_string[abi:ne180100]<0>(&v192, "reduction_axes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v194 = Scalar;
  if (Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v195 = v129;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v190, "NUM_REDUCTION_AXES");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v128 + 24))(v128, &v194, 0, v190);
  if (v191 < 0)
    operator delete(v190[0]);
  v131 = v195;
  if (v195)
  {
    v132 = (unint64_t *)&v195->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = Scalar;
  Scalar = 0;
  if (v134)
    (*((void (**)(std::__shared_weak_count_vtbl *))v134->~__shared_weak_count + 1))(v134);
  if (v193 < 0)
    operator delete(v192);
  v135 = v239;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v188 = Scalar;
  if (Scalar)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = Scalar;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = v137;
  }
  else
  {
    v136 = 0;
  }
  v189 = v136;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v186, "XReducedShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v135 + 40))(v135, &v188, v186);
  if (v187 < 0)
    operator delete(v186[0]);
  v138 = v189;
  if (v189)
  {
    v139 = (unint64_t *)&v189->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = Scalar;
  Scalar = 0;
  if (v141)
    (*((void (**)(std::__shared_weak_count_vtbl *))v141->~__shared_weak_count + 1))(v141);
  v142 = *a4;
  v184 = v239;
  if (v239)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = (std::__shared_weak_count_vtbl *)v239;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v185 = v143;
  v239 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v142 + 56))(v142, &v184);
  v145 = v185;
  if (v185)
  {
    v146 = (unint64_t *)&v185->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = (MIL::Validation::PossibleStringValuesConstraints *)v239;
  v239 = 0;
  if (v148)
    v148 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v148 + 8))(v148);
  MIL::Validation::PossibleStringValuesConstraints::Make(v148);
  v149 = v252;
  std::string::basic_string[abi:ne180100]<0>(&v180, "reduction");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v182 = __p;
  if (__p)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = (std::__shared_weak_count_vtbl *)__p;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v183 = v150;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v239, "max");
  std::string::basic_string[abi:ne180100]<0>(v242, "mean");
  std::string::basic_string[abi:ne180100]<0>(v243, "min");
  std::string::basic_string[abi:ne180100]<0>(v244, "sum");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v239, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v149->~__shared_weak_count
   + 3))(v149, &v182, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v244[i + 2]) < 0)
      operator delete((void *)v244[i]);
  }
  v153 = v183;
  if (v183)
  {
    v154 = (unint64_t *)&v183->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = __p;
  __p = 0;
  if (v156)
    (*(void (**)(void *))(*(_QWORD *)v156 + 8))(v156);
  if (v181 < 0)
    operator delete(v180);
  v157 = v252;
  std::string::basic_string[abi:ne180100]<0>(&v176, "reduction_post_processing");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v178 = __p;
  if (__p)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = (std::__shared_weak_count_vtbl *)__p;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v179 = v158;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v239, "inv");
  std::string::basic_string[abi:ne180100]<0>(v242, "linear");
  std::string::basic_string[abi:ne180100]<0>(v243, "rsqrt");
  std::string::basic_string[abi:ne180100]<0>(v244, "sqrt");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v239, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v157->~__shared_weak_count
   + 3))(v157, &v178, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v244[j + 2]) < 0)
      operator delete((void *)v244[j]);
  }
  v161 = v179;
  if (v179)
  {
    v162 = (unint64_t *)&v179->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = __p;
  __p = 0;
  if (v164)
    (*(void (**)(void *))(*(_QWORD *)v164 + 8))(v164);
  if (v177 < 0)
    operator delete(v176);
  v165 = *a4;
  v174 = v252;
  if (v252)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = v252;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v175 = v166;
  v252 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v165 + 56))(v165, &v174);
  v168 = v175;
  if (v175)
  {
    v169 = (unint64_t *)&v175->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = v252;
  v252 = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v227, 0);
  result = (uint64_t)v238;
  if (v238)
  {
    v173 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v238);
    return MEMORY[0x20BCFF140](v173, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20693D0F0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x210], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2A0], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeAbs::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeAbs;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseUnary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693D874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeSquare::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeSquare;
  v8 = v7;
  ANEMachineIR::H2020::BasePeElementWiseUnary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20693D98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2020::NeActivation::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  void **v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  char **v63;
  _QWORD *v64;
  uint64_t v65;
  MIL::Validation::TensorDTypeConstraints *v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  void **v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count_vtbl *v78;
  void **v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  void **v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  MIL::Validation::TensorSymbolicShapeConstraints *v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  void **v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  void **v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void **v113;
  uint64_t result;
  uint64_t v115;
  void **v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124;
  char v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void **v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136;
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  char **v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  uint64_t v145;
  void *v146;
  void *v147;
  _QWORD *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  char **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  void *__p;
  void *v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  std::__shared_weak_count *v162;
  _QWORD *v163;
  _BYTE v164[24];
  _BYTE *v165;
  _QWORD v166[3];
  MIL::Validation::TensorDTypeConstraints *v167;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char **v175;
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v171 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v159 = v10;
  *v10 = v9;
  v160 = v10 + 1;
  v161 = v10 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v157 = v12 + 1;
  v158 = v12 + 1;
  v173 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v146);
  v13 = v146;
  v146 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v162;
  if (v162)
  {
    p_shared_owners = (unint64_t *)&v162->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v17, "post_right_shift", (uint64_t *)&v171);
  v19 = v171;
  v171 = 0;
  if (v19)
    (*((void (**)(void **))*v19 + 1))(v19);
  v20 = v155;
  if (v155)
  {
    v21 = (unint64_t *)&v155->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v163;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v23, "post_scale", (uint64_t *)&v171);
  v25 = v171;
  v171 = 0;
  if (v25)
    (*((void (**)(void **))*v25 + 1))(v25);
  v26 = v154;
  if (v154)
  {
    v27 = (unint64_t *)&v154->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 48))(*((_QWORD *)v24 + 5), 1);
  v153 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  v171 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v153, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v171, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v153, 1uLL);
  v30 = v153;
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v159 = v32;
  *v32 = v31;
  v160 = v32 + 1;
  v161 = v32 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  __p = v34;
  *v34 = v33;
  v157 = v34 + 1;
  v158 = v34 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape();
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v146 = v36;
  *v36 = v35;
  v147 = v36 + 1;
  v148 = v36 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v37 = v150;
  v151 = v150;
  if (v150)
  {
    v38 = (_QWORD *)operator new();
    v39 = v150;
    *v38 = &unk_24BFE7320;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v152 = v38;
  v150 = 0;
  v40 = v30[2];
  v41 = v30[1];
  if (v41 >= v40)
  {
    v43 = (v41 - *v30) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v45 = v40 - *v30;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v175 = v30 + 2;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v30 + 2), v46);
    v49 = &v47[16 * v43];
    *(_QWORD *)v49 = v37;
    *((_QWORD *)v49 + 1) = v38;
    v151 = 0;
    v152 = 0;
    v51 = *v30;
    v50 = v30[1];
    if (v50 == *v30)
    {
      v54 = (void **)v30[1];
      v52 = &v47[16 * v43];
    }
    else
    {
      v52 = &v47[16 * v43];
      do
      {
        v53 = *((_OWORD *)v50 - 1);
        v50 -= 16;
        *((_OWORD *)v52 - 1) = v53;
        v52 -= 16;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
      }
      while (v50 != v51);
      v54 = (void **)*v30;
      v50 = v30[1];
    }
    v42 = v49 + 16;
    *v30 = v52;
    v171 = v54;
    v172 = (uint64_t)v54;
    v30[1] = v49 + 16;
    v173 = (uint64_t)v50;
    v55 = v30[2];
    v30[2] = &v47[16 * v48];
    v174 = v55;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v171);
  }
  else
  {
    *(_QWORD *)v41 = v37;
    *((_QWORD *)v41 + 1) = v38;
    v42 = v41 + 16;
    v151 = 0;
    v152 = 0;
  }
  v30[1] = v42;
  v56 = v150;
  v150 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = v149;
  if (v149)
  {
    v58 = (unint64_t *)&v149->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  *(_OWORD *)v144 = *(_OWORD *)a2;
  v145 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v60 = (uint64_t)v163;
  v142 = (uint64_t)v163;
  if (v163)
  {
    v61 = (std::__shared_weak_count *)operator new();
    v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61[1].__vftable = (std::__shared_weak_count_vtbl *)v60;
  }
  else
  {
    v61 = 0;
  }
  v143 = v61;
  v163 = 0;
  v140 = v153;
  if (v153)
  {
    v62 = (std::__shared_weak_count *)operator new();
    v63 = v153;
    v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v62->__shared_owners_ = 0;
    v62->__shared_weak_owners_ = 0;
    v62[1].__vftable = (std::__shared_weak_count_vtbl *)v63;
  }
  else
  {
    v62 = 0;
  }
  v141 = v62;
  v153 = 0;
  v166[0] = &unk_24BFE7440;
  v166[1] = ANEMachineIR::H2020::Validators::ValidateNeActivation;
  v167 = (MIL::Validation::TensorDTypeConstraints *)v166;
  v165 = 0;
  MIL::IROperator::Make();
  v64 = v165;
  if (v165 == v164)
  {
    v65 = 4;
    v64 = v164;
  }
  else
  {
    if (!v165)
      goto LABEL_69;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_69:
  v66 = v167;
  if (v167 == (MIL::Validation::TensorDTypeConstraints *)v166)
  {
    v67 = 4;
    v66 = (MIL::Validation::TensorDTypeConstraints *)v166;
    goto LABEL_73;
  }
  if (v167)
  {
    v67 = 5;
LABEL_73:
    v66 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 8 * v67))();
  }
  if (v141)
  {
    v68 = &v141->__shared_owners_;
    do
      v69 = __ldaxr((unint64_t *)v68);
    while (__stlxr(v69 - 1, (unint64_t *)v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  if (v143)
  {
    v70 = &v143->__shared_owners_;
    do
      v71 = __ldaxr((unint64_t *)v70);
    while (__stlxr(v71 - 1, (unint64_t *)v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  if (SHIBYTE(v145) < 0)
    operator delete(v144[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v66);
  v72 = v171;
  std::string::basic_string[abi:ne180100]<0>(&v136, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v138 = Scalar;
  if (Scalar)
  {
    v73 = (std::__shared_weak_count *)operator new();
    v74 = Scalar;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = v74;
  }
  else
  {
    v73 = 0;
  }
  v139 = v73;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v72 + 3))(v72, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v75 = v139;
  if (v139)
  {
    v76 = (unint64_t *)&v139->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = Scalar;
  Scalar = 0;
  if (v78)
    (*((void (**)(std::__shared_weak_count_vtbl *))v78->~__shared_weak_count + 1))(v78);
  if (v137 < 0)
    operator delete(v136);
  v79 = v171;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v132 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v133 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v79 + 3))(v79, &v132, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v82 = v133;
  if (v133)
  {
    v83 = (unint64_t *)&v133->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  v86 = *a3;
  v128 = v171;
  if (v171)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = v171;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = (std::__shared_weak_count_vtbl *)v88;
  }
  else
  {
    v87 = 0;
  }
  v129 = v87;
  v171 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v86 + 56))(v86, &v128);
  v89 = v129;
  if (v129)
  {
    v90 = (unint64_t *)&v129->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = (MIL::Validation::TensorSymbolicShapeConstraints *)v171;
  v171 = 0;
  if (v92)
    v92 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v92 + 8))(v92);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v92);
  v93 = v171;
  std::string::basic_string[abi:ne180100]<0>(&v124, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v126 = Scalar;
  if (Scalar)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = Scalar;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v127 = v94;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v93 + 5))(v93, &v126, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v96 = v127;
  if (v127)
  {
    v97 = (unint64_t *)&v127->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = Scalar;
  Scalar = 0;
  if (v99)
    (*((void (**)(std::__shared_weak_count_vtbl *))v99->~__shared_weak_count + 1))(v99);
  if (v125 < 0)
    operator delete(v124);
  v100 = v171;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v120 = Scalar;
  if (Scalar)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = Scalar;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v121 = v101;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v118, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v100 + 5))(v100, &v120, v118);
  if (v119 < 0)
    operator delete(v118[0]);
  v103 = v121;
  if (v121)
  {
    v104 = (unint64_t *)&v121->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = Scalar;
  Scalar = 0;
  if (v106)
    (*((void (**)(std::__shared_weak_count_vtbl *))v106->~__shared_weak_count + 1))(v106);
  v107 = *a3;
  v116 = v171;
  if (v171)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = v171;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = (std::__shared_weak_count_vtbl *)v109;
  }
  else
  {
    v108 = 0;
  }
  v117 = v108;
  v171 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v107 + 56))(v107, &v116);
  v110 = v117;
  if (v117)
  {
    v111 = (unint64_t *)&v117->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v171;
  v171 = 0;
  if (v113)
    (*((void (**)(void **))*v113 + 1))(v113);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v153, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x20BCFF140](v115, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20693E75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void **a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;

  v57 = *(_QWORD *)(v55 - 112);
  *(_QWORD *)(v55 - 112) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *v54;
  *v54 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2020::NeAdd::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void **v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  unsigned __int8 *v65;
  void **v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  __int128 v94;
  void **v95;
  char *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  char **v104;
  _QWORD *v105;
  uint64_t v106;
  MIL::Validation::TensorDTypeConstraints *v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  void **v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count_vtbl *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void **v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  MIL::Validation::TensorSymbolicShapeConstraints *v140;
  void **v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count_vtbl *v147;
  void **v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count_vtbl *v154;
  void **v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count_vtbl *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  void **v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void **v168;
  uint64_t result;
  uint64_t v170;
  void **v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  void *v179;
  char v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  void *v183[2];
  char v184;
  void *v185;
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void **v189;
  std::__shared_weak_count *v190;
  void *v191[2];
  char v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  void *v197;
  char v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  char v202;
  void *v203;
  char v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  char **v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  uint64_t v212;
  void *v213;
  void *v214;
  _QWORD *v215;
  std::__shared_weak_count *v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  char **v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count *v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count *v228;
  void *__p;
  void *v230;
  _QWORD *v231;
  void *v232;
  void *v233;
  _QWORD *v234;
  std::__shared_weak_count *v235;
  _QWORD *v236;
  _BYTE v237[24];
  _BYTE *v238;
  _QWORD v239[3];
  MIL::Validation::TensorDTypeConstraints *v240;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v242;
  uint64_t v243;
  void **v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char **v248;
  uint64_t v249;

  v249 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v236 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v242 = (uint64_t)&v8->~__shared_weak_count_0;
  v243 = (uint64_t)&v8->~__shared_weak_count_0;
  v244 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v232 = v10;
  *v10 = v9;
  v233 = v10 + 1;
  v234 = v10 + 1;
  v245 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v231 = v12 + 1;
  v230 = v12 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v213);
  v13 = v213;
  v213 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v235;
  if (v235)
  {
    p_shared_owners = (unint64_t *)&v235->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (Scalar)
  {
    v242 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v236;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v242 = (uint64_t)&v19->~__shared_weak_count_0;
  v243 = (uint64_t)&v19->~__shared_weak_count_0;
  v244 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v232 = v21;
  *v21 = v20;
  v233 = v21 + 1;
  v234 = v21 + 1;
  v245 = MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v231 = v23 + 1;
  v230 = v23 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v213);
  v24 = v213;
  v213 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v228;
  if (v228)
  {
    v26 = (unint64_t *)&v228->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (Scalar)
  {
    v242 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v28 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v28, "x_scale", (uint64_t *)&v244);
  v30 = v244;
  v244 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = v227;
  if (v227)
  {
    v32 = (unint64_t *)&v227->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v34, "y_scale", (uint64_t *)&v244);
  v36 = v244;
  v244 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = v226;
  if (v226)
  {
    v38 = (unint64_t *)&v226->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v40 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v40, "bias", (uint64_t *)&v244);
  v42 = v244;
  v244 = 0;
  if (v42)
    (*((void (**)(void **))*v42 + 1))(v42);
  v43 = v225;
  if (v225)
  {
    v44 = (unint64_t *)&v225->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 48))(*((_QWORD *)v41 + 5), 1);
  v46 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v46, "acc_left_shift", (uint64_t *)&v244);
  v48 = v244;
  v244 = 0;
  if (v48)
    (*((void (**)(void **))*v48 + 1))(v48);
  v49 = v224;
  if (v224)
  {
    v50 = (unint64_t *)&v224->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 48))(*((_QWORD *)v47 + 5), 1);
  v52 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v52, "acc_bias_shift", (uint64_t *)&v244);
  v54 = v244;
  v244 = 0;
  if (v54)
    (*((void (**)(void **))*v54 + 1))(v54);
  v55 = v223;
  if (v223)
  {
    v56 = (unint64_t *)&v223->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v58 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v58, "post_right_shift", (uint64_t *)&v244);
  v60 = v244;
  v244 = 0;
  if (v60)
    (*((void (**)(void **))*v60 + 1))(v60);
  v61 = v222;
  if (v222)
  {
    v62 = (unint64_t *)&v222->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v64, "post_scale", (uint64_t *)&v244);
  v66 = v244;
  v244 = 0;
  if (v66)
    (*((void (**)(void **))*v66 + 1))(v66);
  v67 = v221;
  if (v221)
  {
    v68 = (unint64_t *)&v221->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v220 = 0;
  v70 = operator new();
  *(_QWORD *)v70 = 0;
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v70 + 16) = 0;
  v244 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v220, (void **)v70);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v244, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v220, 1uLL);
  v71 = v220;
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = operator new(8uLL);
  v232 = v73;
  *v73 = v72;
  v233 = v73 + 1;
  v234 = v73 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(8uLL);
  __p = v75;
  *v75 = v74;
  v231 = v75 + 1;
  v230 = v75 + 1;
  v242 = MIL::IRTensorValueType::MakeWithShape();
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = operator new(8uLL);
  v213 = v77;
  *v77 = v76;
  v214 = v77 + 1;
  v215 = v77 + 1;
  v243 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v78 = v217;
  v218 = v217;
  if (v217)
  {
    v79 = (_QWORD *)operator new();
    v80 = v217;
    *v79 = &unk_24BFE7320;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v80;
  }
  else
  {
    v79 = 0;
  }
  v219 = v79;
  v217 = 0;
  v81 = v71[2];
  v82 = v71[1];
  if (v82 >= v81)
  {
    v84 = (v82 - *v71) >> 4;
    v85 = v84 + 1;
    if ((unint64_t)(v84 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v86 = v81 - *v71;
    if (v86 >> 3 > v85)
      v85 = v86 >> 3;
    if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0)
      v87 = 0xFFFFFFFFFFFFFFFLL;
    else
      v87 = v85;
    v248 = v71 + 2;
    v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v71 + 2), v87);
    v90 = &v88[16 * v84];
    *(_QWORD *)v90 = v78;
    *((_QWORD *)v90 + 1) = v79;
    v218 = 0;
    v219 = 0;
    v92 = *v71;
    v91 = v71[1];
    if (v91 == *v71)
    {
      v95 = (void **)v71[1];
      v93 = &v88[16 * v84];
    }
    else
    {
      v93 = &v88[16 * v84];
      do
      {
        v94 = *((_OWORD *)v91 - 1);
        v91 -= 16;
        *((_OWORD *)v93 - 1) = v94;
        v93 -= 16;
        *(_QWORD *)v91 = 0;
        *((_QWORD *)v91 + 1) = 0;
      }
      while (v91 != v92);
      v95 = (void **)*v71;
      v91 = v71[1];
    }
    v83 = v90 + 16;
    *v71 = v93;
    v244 = v95;
    v245 = (uint64_t)v95;
    v71[1] = v90 + 16;
    v246 = (uint64_t)v91;
    v96 = v71[2];
    v71[2] = &v88[16 * v89];
    v247 = v96;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v244);
  }
  else
  {
    *(_QWORD *)v82 = v78;
    *((_QWORD *)v82 + 1) = v79;
    v83 = v82 + 16;
    v218 = 0;
    v219 = 0;
  }
  v71[1] = v83;
  v97 = v217;
  v217 = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = v216;
  if (v216)
  {
    v99 = (unint64_t *)&v216->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  *(_OWORD *)v211 = *(_OWORD *)a2;
  v212 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v101 = (uint64_t)v236;
  v209 = (uint64_t)v236;
  if (v236)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v102 = 0;
  }
  v210 = v102;
  v236 = 0;
  v207 = v220;
  if (v220)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = v220;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = (std::__shared_weak_count_vtbl *)v104;
  }
  else
  {
    v103 = 0;
  }
  v208 = v103;
  v220 = 0;
  v239[0] = &unk_24BFE7440;
  v239[1] = ANEMachineIR::H2020::Validators::ValidateNeAdd;
  v240 = (MIL::Validation::TensorDTypeConstraints *)v239;
  v238 = 0;
  MIL::IROperator::Make();
  v105 = v238;
  if (v238 == v237)
  {
    v106 = 4;
    v105 = v237;
  }
  else
  {
    if (!v238)
      goto LABEL_117;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_117:
  v107 = v240;
  if (v240 == (MIL::Validation::TensorDTypeConstraints *)v239)
  {
    v108 = 4;
    v107 = (MIL::Validation::TensorDTypeConstraints *)v239;
    goto LABEL_121;
  }
  if (v240)
  {
    v108 = 5;
LABEL_121:
    v107 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v107 + 8 * v108))();
  }
  if (v208)
  {
    v109 = &v208->__shared_owners_;
    do
      v110 = __ldaxr((unint64_t *)v109);
    while (__stlxr(v110 - 1, (unint64_t *)v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  if (v210)
  {
    v111 = &v210->__shared_owners_;
    do
      v112 = __ldaxr((unint64_t *)v111);
    while (__stlxr(v112 - 1, (unint64_t *)v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  if (SHIBYTE(v212) < 0)
    operator delete(v211[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v107);
  v113 = v244;
  std::string::basic_string[abi:ne180100]<0>(&v203, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v205 = Scalar;
  if (Scalar)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = Scalar;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v206 = v114;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v201, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v113 + 3))(v113, &v205, v201);
  if (v202 < 0)
    operator delete(v201[0]);
  v116 = v206;
  if (v206)
  {
    v117 = (unint64_t *)&v206->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = Scalar;
  Scalar = 0;
  if (v119)
    (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
  if (v204 < 0)
    operator delete(v203);
  v120 = v244;
  std::string::basic_string[abi:ne180100]<0>(&v197, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v199 = Scalar;
  if (Scalar)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = Scalar;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v200 = v121;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "YDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v120 + 3))(v120, &v199, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v123 = v200;
  if (v200)
  {
    v124 = (unint64_t *)&v200->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = Scalar;
  Scalar = 0;
  if (v126)
    (*((void (**)(std::__shared_weak_count_vtbl *))v126->~__shared_weak_count + 1))(v126);
  if (v198 < 0)
    operator delete(v197);
  v127 = v244;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v193 = Scalar;
  if (Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v194 = v128;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v191, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v127 + 3))(v127, &v193, v191);
  if (v192 < 0)
    operator delete(v191[0]);
  v130 = v194;
  if (v194)
  {
    v131 = (unint64_t *)&v194->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = Scalar;
  Scalar = 0;
  if (v133)
    (*((void (**)(std::__shared_weak_count_vtbl *))v133->~__shared_weak_count + 1))(v133);
  v134 = *a3;
  v189 = v244;
  if (v244)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = v244;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = (std::__shared_weak_count_vtbl *)v136;
  }
  else
  {
    v135 = 0;
  }
  v190 = v135;
  v244 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v134 + 56))(v134, &v189);
  v137 = v190;
  if (v190)
  {
    v138 = (unint64_t *)&v190->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (MIL::Validation::TensorSymbolicShapeConstraints *)v244;
  v244 = 0;
  if (v140)
    v140 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v140 + 8))(v140);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v140);
  v141 = v244;
  std::string::basic_string[abi:ne180100]<0>(&v185, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v187 = Scalar;
  if (Scalar)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = Scalar;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v188 = v142;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v183, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v141 + 5))(v141, &v187, v183);
  if (v184 < 0)
    operator delete(v183[0]);
  v144 = v188;
  if (v188)
  {
    v145 = (unint64_t *)&v188->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = Scalar;
  Scalar = 0;
  if (v147)
    (*((void (**)(std::__shared_weak_count_vtbl *))v147->~__shared_weak_count + 1))(v147);
  if (v186 < 0)
    operator delete(v185);
  v148 = v244;
  std::string::basic_string[abi:ne180100]<0>(&v179, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v181 = Scalar;
  if (Scalar)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = Scalar;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v182 = v149;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "YShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v148 + 5))(v148, &v181, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v151 = v182;
  if (v182)
  {
    v152 = (unint64_t *)&v182->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = Scalar;
  Scalar = 0;
  if (v154)
    (*((void (**)(std::__shared_weak_count_vtbl *))v154->~__shared_weak_count + 1))(v154);
  if (v180 < 0)
    operator delete(v179);
  v155 = v244;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v175 = Scalar;
  if (Scalar)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = Scalar;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v157;
  }
  else
  {
    v156 = 0;
  }
  v176 = v156;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "XYBroadcastShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v155 + 5))(v155, &v175, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v158 = v176;
  if (v176)
  {
    v159 = (unint64_t *)&v176->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = Scalar;
  Scalar = 0;
  if (v161)
    (*((void (**)(std::__shared_weak_count_vtbl *))v161->~__shared_weak_count + 1))(v161);
  v162 = *a3;
  v171 = v244;
  if (v244)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = v244;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = (std::__shared_weak_count_vtbl *)v164;
  }
  else
  {
    v163 = 0;
  }
  v172 = v163;
  v244 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v162 + 56))(v162, &v171);
  v165 = v172;
  if (v172)
  {
    v166 = (unint64_t *)&v172->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = v244;
  v244 = 0;
  if (v168)
    (*((void (**)(void **))*v168 + 1))(v168);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v220, 0);
  result = (uint64_t)v236;
  if (v236)
  {
    v170 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v236);
    return MEMORY[0x20BCFF140](v170, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20693FFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void **a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v73 = *(_QWORD *)(v71 - 112);
  *(_QWORD *)(v71 - 112) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v70;
  *v70 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2020::NeMaximum::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  void **v65;
  char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  char **v74;
  _QWORD *v75;
  uint64_t v76;
  MIL::Validation::TensorDTypeConstraints *v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  MIL::Validation::TensorSymbolicShapeConstraints *v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void **v138;
  uint64_t result;
  uint64_t v140;
  void **v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149;
  char v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155;
  char v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167;
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173;
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  char **v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  uint64_t v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  char **v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count *v193;
  void *__p;
  void *v195;
  _QWORD *v196;
  void *v197;
  void *v198;
  _QWORD *v199;
  std::__shared_weak_count *v200;
  _QWORD *v201;
  _BYTE v202[24];
  _BYTE *v203;
  _QWORD v204[3];
  MIL::Validation::TensorDTypeConstraints *v205;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v207;
  uint64_t v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char **v213;
  uint64_t v214;

  v214 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v201 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v207 = (uint64_t)&v8->~__shared_weak_count_0;
  v208 = (uint64_t)&v8->~__shared_weak_count_0;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v197 = v10;
  *v10 = v9;
  v198 = v10 + 1;
  v199 = v10 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v196 = v12 + 1;
  v195 = v12 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v183);
  v13 = v183;
  v183 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v200;
  if (v200)
  {
    p_shared_owners = (unint64_t *)&v200->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (Scalar)
  {
    v207 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v201;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v207 = (uint64_t)&v19->~__shared_weak_count_0;
  v208 = (uint64_t)&v19->~__shared_weak_count_0;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v197 = v21;
  *v21 = v20;
  v198 = v21 + 1;
  v199 = v21 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v196 = v23 + 1;
  v195 = v23 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v183);
  v24 = v183;
  v183 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v193;
  if (v193)
  {
    v26 = (unint64_t *)&v193->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (Scalar)
  {
    v207 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v28 = v201;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v28, "post_right_shift", (uint64_t *)&v209);
  v30 = v209;
  v209 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = v192;
  if (v192)
  {
    v32 = (unint64_t *)&v192->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v201;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v34, "post_scale", (uint64_t *)&v209);
  v36 = v209;
  v209 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = v191;
  if (v191)
  {
    v38 = (unint64_t *)&v191->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v190 = 0;
  v40 = operator new();
  *(_QWORD *)v40 = 0;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 0;
  v209 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, (void **)v40);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v209, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v190, 1uLL);
  v41 = v190;
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v197 = v43;
  *v43 = v42;
  v198 = v43 + 1;
  v199 = v43 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  __p = v45;
  *v45 = v44;
  v196 = v45 + 1;
  v195 = v45 + 1;
  v207 = MIL::IRTensorValueType::MakeWithShape();
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v183 = v47;
  *v47 = v46;
  v184 = v47 + 1;
  v185 = v47 + 1;
  v208 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v48 = v187;
  v188 = v187;
  if (v187)
  {
    v49 = (_QWORD *)operator new();
    v50 = v187;
    *v49 = &unk_24BFE7320;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  v189 = v49;
  v187 = 0;
  v51 = v41[2];
  v52 = v41[1];
  if (v52 >= v51)
  {
    v54 = (v52 - *v41) >> 4;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v56 = v51 - *v41;
    if (v56 >> 3 > v55)
      v55 = v56 >> 3;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
      v57 = 0xFFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    v213 = v41 + 2;
    v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v41 + 2), v57);
    v60 = &v58[16 * v54];
    *(_QWORD *)v60 = v48;
    *((_QWORD *)v60 + 1) = v49;
    v188 = 0;
    v189 = 0;
    v62 = *v41;
    v61 = v41[1];
    if (v61 == *v41)
    {
      v65 = (void **)v41[1];
      v63 = &v58[16 * v54];
    }
    else
    {
      v63 = &v58[16 * v54];
      do
      {
        v64 = *((_OWORD *)v61 - 1);
        v61 -= 16;
        *((_OWORD *)v63 - 1) = v64;
        v63 -= 16;
        *(_QWORD *)v61 = 0;
        *((_QWORD *)v61 + 1) = 0;
      }
      while (v61 != v62);
      v65 = (void **)*v41;
      v61 = v41[1];
    }
    v53 = v60 + 16;
    *v41 = v63;
    v209 = v65;
    v210 = (uint64_t)v65;
    v41[1] = v60 + 16;
    v211 = (uint64_t)v61;
    v66 = v41[2];
    v41[2] = &v58[16 * v59];
    v212 = v66;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v209);
  }
  else
  {
    *(_QWORD *)v52 = v48;
    *((_QWORD *)v52 + 1) = v49;
    v53 = v52 + 16;
    v188 = 0;
    v189 = 0;
  }
  v41[1] = v53;
  v67 = v187;
  v187 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = v186;
  if (v186)
  {
    v69 = (unint64_t *)&v186->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  *(_OWORD *)v181 = *(_OWORD *)a2;
  v182 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v71 = (uint64_t)v201;
  v179 = (uint64_t)v201;
  if (v201)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = (std::__shared_weak_count_vtbl *)v71;
  }
  else
  {
    v72 = 0;
  }
  v180 = v72;
  v201 = 0;
  v177 = v190;
  if (v190)
  {
    v73 = (std::__shared_weak_count *)operator new();
    v74 = v190;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = (std::__shared_weak_count_vtbl *)v74;
  }
  else
  {
    v73 = 0;
  }
  v178 = v73;
  v190 = 0;
  v204[0] = &unk_24BFE7440;
  v204[1] = ANEMachineIR::H2020::Validators::ValidateNeMaximum;
  v205 = (MIL::Validation::TensorDTypeConstraints *)v204;
  v203 = 0;
  MIL::IROperator::Make();
  v75 = v203;
  if (v203 == v202)
  {
    v76 = 4;
    v75 = v202;
  }
  else
  {
    if (!v203)
      goto LABEL_82;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_82:
  v77 = v205;
  if (v205 == (MIL::Validation::TensorDTypeConstraints *)v204)
  {
    v78 = 4;
    v77 = (MIL::Validation::TensorDTypeConstraints *)v204;
    goto LABEL_86;
  }
  if (v205)
  {
    v78 = 5;
LABEL_86:
    v77 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v77 + 8 * v78))();
  }
  if (v178)
  {
    v79 = &v178->__shared_owners_;
    do
      v80 = __ldaxr((unint64_t *)v79);
    while (__stlxr(v80 - 1, (unint64_t *)v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  if (v180)
  {
    v81 = &v180->__shared_owners_;
    do
      v82 = __ldaxr((unint64_t *)v81);
    while (__stlxr(v82 - 1, (unint64_t *)v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if (SHIBYTE(v182) < 0)
    operator delete(v181[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v77);
  v83 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v175 = Scalar;
  if (Scalar)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = Scalar;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v176 = v84;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v83 + 3))(v83, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v86 = v176;
  if (v176)
  {
    v87 = (unint64_t *)&v176->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v174 < 0)
    operator delete(v173);
  v90 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v167, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v169 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v170 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "YDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v93 = v170;
  if (v170)
  {
    v94 = (unint64_t *)&v170->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v168 < 0)
    operator delete(v167);
  v97 = v209;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v163 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v164 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v163, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v100 = v164;
  if (v164)
  {
    v101 = (unint64_t *)&v164->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = *a3;
  v159 = v209;
  if (v209)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v209;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v160 = v105;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v159);
  v107 = v160;
  if (v160)
  {
    v108 = (unint64_t *)&v160->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)v209;
  v209 = 0;
  if (v110)
    v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v110 + 8))(v110);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v110);
  v111 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v155, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v157 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v158 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 5))(v111, &v157, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v114 = v158;
  if (v158)
  {
    v115 = (unint64_t *)&v158->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v156 < 0)
    operator delete(v155);
  v118 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v149, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v151 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v152 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "YShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v118 + 5))(v118, &v151, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v121 = v152;
  if (v152)
  {
    v122 = (unint64_t *)&v152->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  if (v150 < 0)
    operator delete(v149);
  v125 = v209;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v145 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v146 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "XYBroadcastShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v125 + 5))(v125, &v145, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v128 = v146;
  if (v146)
  {
    v129 = (unint64_t *)&v146->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  v132 = *a3;
  v141 = v209;
  if (v209)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v209;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v142 = v133;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v141);
  v135 = v142;
  if (v142)
  {
    v136 = (unint64_t *)&v142->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v209;
  v209 = 0;
  if (v138)
    (*((void (**)(void **))*v138 + 1))(v138);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, 0);
  result = (uint64_t)v201;
  if (v201)
  {
    v140 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v201);
    return MEMORY[0x20BCFF140](v140, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2069416C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void **a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v73 = *(_QWORD *)(v71 - 112);
  *(_QWORD *)(v71 - 112) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v70;
  *v70 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2020::NeMinimum::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  void **v65;
  char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  char **v74;
  _QWORD *v75;
  uint64_t v76;
  MIL::Validation::TensorDTypeConstraints *v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  MIL::Validation::TensorSymbolicShapeConstraints *v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void **v138;
  uint64_t result;
  uint64_t v140;
  void **v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149;
  char v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155;
  char v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167;
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173;
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  char **v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  uint64_t v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  char **v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count *v193;
  void *__p;
  void *v195;
  _QWORD *v196;
  void *v197;
  void *v198;
  _QWORD *v199;
  std::__shared_weak_count *v200;
  _QWORD *v201;
  _BYTE v202[24];
  _BYTE *v203;
  _QWORD v204[3];
  MIL::Validation::TensorDTypeConstraints *v205;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v207;
  uint64_t v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char **v213;
  uint64_t v214;

  v214 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v201 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v207 = (uint64_t)&v8->~__shared_weak_count_0;
  v208 = (uint64_t)&v8->~__shared_weak_count_0;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v197 = v10;
  *v10 = v9;
  v198 = v10 + 1;
  v199 = v10 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v196 = v12 + 1;
  v195 = v12 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v183);
  v13 = v183;
  v183 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v200;
  if (v200)
  {
    p_shared_owners = (unint64_t *)&v200->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (Scalar)
  {
    v207 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v201;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v207 = (uint64_t)&v19->~__shared_weak_count_0;
  v208 = (uint64_t)&v19->~__shared_weak_count_0;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v197 = v21;
  *v21 = v20;
  v198 = v21 + 1;
  v199 = v21 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v196 = v23 + 1;
  v195 = v23 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v183);
  v24 = v183;
  v183 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v193;
  if (v193)
  {
    v26 = (unint64_t *)&v193->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (Scalar)
  {
    v207 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v28 = v201;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v28, "post_right_shift", (uint64_t *)&v209);
  v30 = v209;
  v209 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = v192;
  if (v192)
  {
    v32 = (unint64_t *)&v192->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v201;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v34, "post_scale", (uint64_t *)&v209);
  v36 = v209;
  v209 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = v191;
  if (v191)
  {
    v38 = (unint64_t *)&v191->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v190 = 0;
  v40 = operator new();
  *(_QWORD *)v40 = 0;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 0;
  v209 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, (void **)v40);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v209, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v190, 1uLL);
  v41 = v190;
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v197 = v43;
  *v43 = v42;
  v198 = v43 + 1;
  v199 = v43 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  __p = v45;
  *v45 = v44;
  v196 = v45 + 1;
  v195 = v45 + 1;
  v207 = MIL::IRTensorValueType::MakeWithShape();
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v183 = v47;
  *v47 = v46;
  v184 = v47 + 1;
  v185 = v47 + 1;
  v208 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v48 = v187;
  v188 = v187;
  if (v187)
  {
    v49 = (_QWORD *)operator new();
    v50 = v187;
    *v49 = &unk_24BFE7320;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  v189 = v49;
  v187 = 0;
  v51 = v41[2];
  v52 = v41[1];
  if (v52 >= v51)
  {
    v54 = (v52 - *v41) >> 4;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v56 = v51 - *v41;
    if (v56 >> 3 > v55)
      v55 = v56 >> 3;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
      v57 = 0xFFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    v213 = v41 + 2;
    v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v41 + 2), v57);
    v60 = &v58[16 * v54];
    *(_QWORD *)v60 = v48;
    *((_QWORD *)v60 + 1) = v49;
    v188 = 0;
    v189 = 0;
    v62 = *v41;
    v61 = v41[1];
    if (v61 == *v41)
    {
      v65 = (void **)v41[1];
      v63 = &v58[16 * v54];
    }
    else
    {
      v63 = &v58[16 * v54];
      do
      {
        v64 = *((_OWORD *)v61 - 1);
        v61 -= 16;
        *((_OWORD *)v63 - 1) = v64;
        v63 -= 16;
        *(_QWORD *)v61 = 0;
        *((_QWORD *)v61 + 1) = 0;
      }
      while (v61 != v62);
      v65 = (void **)*v41;
      v61 = v41[1];
    }
    v53 = v60 + 16;
    *v41 = v63;
    v209 = v65;
    v210 = (uint64_t)v65;
    v41[1] = v60 + 16;
    v211 = (uint64_t)v61;
    v66 = v41[2];
    v41[2] = &v58[16 * v59];
    v212 = v66;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v209);
  }
  else
  {
    *(_QWORD *)v52 = v48;
    *((_QWORD *)v52 + 1) = v49;
    v53 = v52 + 16;
    v188 = 0;
    v189 = 0;
  }
  v41[1] = v53;
  v67 = v187;
  v187 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = v186;
  if (v186)
  {
    v69 = (unint64_t *)&v186->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  *(_OWORD *)v181 = *(_OWORD *)a2;
  v182 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v71 = (uint64_t)v201;
  v179 = (uint64_t)v201;
  if (v201)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = (std::__shared_weak_count_vtbl *)v71;
  }
  else
  {
    v72 = 0;
  }
  v180 = v72;
  v201 = 0;
  v177 = v190;
  if (v190)
  {
    v73 = (std::__shared_weak_count *)operator new();
    v74 = v190;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = (std::__shared_weak_count_vtbl *)v74;
  }
  else
  {
    v73 = 0;
  }
  v178 = v73;
  v190 = 0;
  v204[0] = &unk_24BFE7440;
  v204[1] = ANEMachineIR::H2020::Validators::ValidateNeMinimum;
  v205 = (MIL::Validation::TensorDTypeConstraints *)v204;
  v203 = 0;
  MIL::IROperator::Make();
  v75 = v203;
  if (v203 == v202)
  {
    v76 = 4;
    v75 = v202;
  }
  else
  {
    if (!v203)
      goto LABEL_82;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_82:
  v77 = v205;
  if (v205 == (MIL::Validation::TensorDTypeConstraints *)v204)
  {
    v78 = 4;
    v77 = (MIL::Validation::TensorDTypeConstraints *)v204;
    goto LABEL_86;
  }
  if (v205)
  {
    v78 = 5;
LABEL_86:
    v77 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v77 + 8 * v78))();
  }
  if (v178)
  {
    v79 = &v178->__shared_owners_;
    do
      v80 = __ldaxr((unint64_t *)v79);
    while (__stlxr(v80 - 1, (unint64_t *)v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  if (v180)
  {
    v81 = &v180->__shared_owners_;
    do
      v82 = __ldaxr((unint64_t *)v81);
    while (__stlxr(v82 - 1, (unint64_t *)v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if (SHIBYTE(v182) < 0)
    operator delete(v181[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v77);
  v83 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v175 = Scalar;
  if (Scalar)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = Scalar;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v176 = v84;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v83 + 3))(v83, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v86 = v176;
  if (v176)
  {
    v87 = (unint64_t *)&v176->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v174 < 0)
    operator delete(v173);
  v90 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v167, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v169 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v170 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "YDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v93 = v170;
  if (v170)
  {
    v94 = (unint64_t *)&v170->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v168 < 0)
    operator delete(v167);
  v97 = v209;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v163 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v164 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v163, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v100 = v164;
  if (v164)
  {
    v101 = (unint64_t *)&v164->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = *a3;
  v159 = v209;
  if (v209)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v209;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v160 = v105;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v159);
  v107 = v160;
  if (v160)
  {
    v108 = (unint64_t *)&v160->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)v209;
  v209 = 0;
  if (v110)
    v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v110 + 8))(v110);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v110);
  v111 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v155, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v157 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v158 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 5))(v111, &v157, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v114 = v158;
  if (v158)
  {
    v115 = (unint64_t *)&v158->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v156 < 0)
    operator delete(v155);
  v118 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v149, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v151 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v152 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "YShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v118 + 5))(v118, &v151, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v121 = v152;
  if (v152)
  {
    v122 = (unint64_t *)&v152->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  if (v150 < 0)
    operator delete(v149);
  v125 = v209;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v145 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v146 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "XYBroadcastShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v125 + 5))(v125, &v145, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v128 = v146;
  if (v146)
  {
    v129 = (unint64_t *)&v146->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  v132 = *a3;
  v141 = v209;
  if (v209)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v209;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v142 = v133;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v141);
  v135 = v142;
  if (v142)
  {
    v136 = (unint64_t *)&v142->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v209;
  v209 = 0;
  if (v138)
    (*((void (**)(void **))*v138 + 1))(v138);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, 0);
  result = (uint64_t)v201;
  if (v201)
  {
    v140 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v201);
    return MEMORY[0x20BCFF140](v140, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206942C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void **a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v73 = *(_QWORD *)(v71 - 112);
  *(_QWORD *)(v71 - 112) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v70;
  *v70 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2020::NeMul::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char **v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  __int128 v82;
  void **v83;
  char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  char **v92;
  _QWORD *v93;
  uint64_t v94;
  MIL::Validation::TensorDTypeConstraints *v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  void **v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void **v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  MIL::Validation::TensorSymbolicShapeConstraints *v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count_vtbl *v135;
  void **v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count_vtbl *v142;
  void **v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void **v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void **v156;
  uint64_t result;
  uint64_t v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167;
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173;
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void **v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  void *v183[2];
  char v184;
  void *v185;
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191;
  char v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  char **v195;
  std::__shared_weak_count *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  void *v199[2];
  uint64_t v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  char **v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count *v214;
  void *__p;
  void *v216;
  _QWORD *v217;
  void *v218;
  void *v219;
  _QWORD *v220;
  std::__shared_weak_count *v221;
  _QWORD *v222;
  _BYTE v223[24];
  _BYTE *v224;
  _QWORD v225[3];
  MIL::Validation::TensorDTypeConstraints *v226;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v228;
  uint64_t v229;
  void **v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char **v234;
  uint64_t v235;

  v235 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v222 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v228 = (uint64_t)&v8->~__shared_weak_count_0;
  v229 = (uint64_t)&v8->~__shared_weak_count_0;
  v230 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v218 = v10;
  *v10 = v9;
  v219 = v10 + 1;
  v220 = v10 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v217 = v12 + 1;
  v216 = v12 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v201);
  v13 = v201;
  v201 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v221;
  if (v221)
  {
    p_shared_owners = (unint64_t *)&v221->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (Scalar)
  {
    v228 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v222;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v228 = (uint64_t)&v19->~__shared_weak_count_0;
  v229 = (uint64_t)&v19->~__shared_weak_count_0;
  v230 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v218 = v21;
  *v21 = v20;
  v219 = v21 + 1;
  v220 = v21 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v217 = v23 + 1;
  v216 = v23 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v201);
  v24 = v201;
  v201 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v214;
  if (v214)
  {
    v26 = (unint64_t *)&v214->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (Scalar)
  {
    v228 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v28 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v28, "bias", (uint64_t *)&v230);
  v30 = v230;
  v230 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = v213;
  if (v213)
  {
    v32 = (unint64_t *)&v213->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v34, "acc_left_shift", (uint64_t *)&v230);
  v36 = v230;
  v230 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = v212;
  if (v212)
  {
    v38 = (unint64_t *)&v212->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v40 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v40, "acc_bias_shift", (uint64_t *)&v230);
  v42 = v230;
  v230 = 0;
  if (v42)
    (*((void (**)(void **))*v42 + 1))(v42);
  v43 = v211;
  if (v211)
  {
    v44 = (unint64_t *)&v211->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 48))(*((_QWORD *)v41 + 5), 1);
  v46 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v46, "post_right_shift", (uint64_t *)&v230);
  v48 = v230;
  v230 = 0;
  if (v48)
    (*((void (**)(void **))*v48 + 1))(v48);
  v49 = v210;
  if (v210)
  {
    v50 = (unint64_t *)&v210->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 48))(*((_QWORD *)v47 + 5), 1);
  v52 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v52, "post_scale", (uint64_t *)&v230);
  v54 = v230;
  v230 = 0;
  if (v54)
    (*((void (**)(void **))*v54 + 1))(v54);
  v55 = v209;
  if (v209)
  {
    v56 = (unint64_t *)&v209->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v208 = 0;
  v58 = operator new();
  *(_QWORD *)v58 = 0;
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  v230 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v208, (void **)v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v230, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v208, 1uLL);
  v59 = v208;
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  v218 = v61;
  *v61 = v60;
  v219 = v61 + 1;
  v220 = v61 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  __p = v63;
  *v63 = v62;
  v217 = v63 + 1;
  v216 = v63 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape();
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(8uLL);
  v201 = v65;
  *v65 = v64;
  v202 = v65 + 1;
  v203 = v65 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v66 = v205;
  v206 = v205;
  if (v205)
  {
    v67 = (_QWORD *)operator new();
    v68 = v205;
    *v67 = &unk_24BFE7320;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  v207 = v67;
  v205 = 0;
  v69 = v59[2];
  v70 = v59[1];
  if (v70 >= v69)
  {
    v72 = (v70 - *v59) >> 4;
    v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v74 = v69 - *v59;
    if (v74 >> 3 > v73)
      v73 = v74 >> 3;
    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
      v75 = 0xFFFFFFFFFFFFFFFLL;
    else
      v75 = v73;
    v234 = v59 + 2;
    v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v59 + 2), v75);
    v78 = &v76[16 * v72];
    *(_QWORD *)v78 = v66;
    *((_QWORD *)v78 + 1) = v67;
    v206 = 0;
    v207 = 0;
    v80 = *v59;
    v79 = v59[1];
    if (v79 == *v59)
    {
      v83 = (void **)v59[1];
      v81 = &v76[16 * v72];
    }
    else
    {
      v81 = &v76[16 * v72];
      do
      {
        v82 = *((_OWORD *)v79 - 1);
        v79 -= 16;
        *((_OWORD *)v81 - 1) = v82;
        v81 -= 16;
        *(_QWORD *)v79 = 0;
        *((_QWORD *)v79 + 1) = 0;
      }
      while (v79 != v80);
      v83 = (void **)*v59;
      v79 = v59[1];
    }
    v71 = v78 + 16;
    *v59 = v81;
    v230 = v83;
    v231 = (uint64_t)v83;
    v59[1] = v78 + 16;
    v232 = (uint64_t)v79;
    v84 = v59[2];
    v59[2] = &v76[16 * v77];
    v233 = v84;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v230);
  }
  else
  {
    *(_QWORD *)v70 = v66;
    *((_QWORD *)v70 + 1) = v67;
    v71 = v70 + 16;
    v206 = 0;
    v207 = 0;
  }
  v59[1] = v71;
  v85 = v205;
  v205 = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = v204;
  if (v204)
  {
    v87 = (unint64_t *)&v204->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  *(_OWORD *)v199 = *(_OWORD *)a2;
  v200 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v89 = (uint64_t)v222;
  v197 = (uint64_t)v222;
  if (v222)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v90 = 0;
  }
  v198 = v90;
  v222 = 0;
  v195 = v208;
  if (v208)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v208;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v196 = v91;
  v208 = 0;
  v225[0] = &unk_24BFE7440;
  v225[1] = ANEMachineIR::H2020::Validators::ValidateNeMul;
  v226 = (MIL::Validation::TensorDTypeConstraints *)v225;
  v224 = 0;
  MIL::IROperator::Make();
  v93 = v224;
  if (v224 == v223)
  {
    v94 = 4;
    v93 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_103;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_103:
  v95 = v226;
  if (v226 == (MIL::Validation::TensorDTypeConstraints *)v225)
  {
    v96 = 4;
    v95 = (MIL::Validation::TensorDTypeConstraints *)v225;
    goto LABEL_107;
  }
  if (v226)
  {
    v96 = 5;
LABEL_107:
    v95 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v95 + 8 * v96))();
  }
  if (v196)
  {
    v97 = &v196->__shared_owners_;
    do
      v98 = __ldaxr((unint64_t *)v97);
    while (__stlxr(v98 - 1, (unint64_t *)v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  if (v198)
  {
    v99 = &v198->__shared_owners_;
    do
      v100 = __ldaxr((unint64_t *)v99);
    while (__stlxr(v100 - 1, (unint64_t *)v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  if (SHIBYTE(v200) < 0)
    operator delete(v199[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v95);
  v101 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v191, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v193 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v194 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v101 + 3))(v101, &v193, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v104 = v194;
  if (v194)
  {
    v105 = (unint64_t *)&v194->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v192 < 0)
    operator delete(v191);
  v108 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v185, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v187 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v188 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v183, "YDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v108 + 3))(v108, &v187, v183);
  if (v184 < 0)
    operator delete(v183[0]);
  v111 = v188;
  if (v188)
  {
    v112 = (unint64_t *)&v188->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v186 < 0)
    operator delete(v185);
  v115 = v230;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v181 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v182 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v115 + 3))(v115, &v181, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v118 = v182;
  if (v182)
  {
    v119 = (unint64_t *)&v182->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  v122 = *a3;
  v177 = v230;
  if (v230)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v230;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
  }
  else
  {
    v123 = 0;
  }
  v178 = v123;
  v230 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v122 + 56))(v122, &v177);
  v125 = v178;
  if (v178)
  {
    v126 = (unint64_t *)&v178->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (MIL::Validation::TensorSymbolicShapeConstraints *)v230;
  v230 = 0;
  if (v128)
    v128 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v128 + 8))(v128);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v128);
  v129 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v175 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v176 = v130;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v129 + 5))(v129, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v132 = v176;
  if (v176)
  {
    v133 = (unint64_t *)&v176->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*((void (**)(std::__shared_weak_count_vtbl *))v135->~__shared_weak_count + 1))(v135);
  if (v174 < 0)
    operator delete(v173);
  v136 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v167, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v169 = Scalar;
  if (Scalar)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = Scalar;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v170 = v137;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "YShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v136 + 5))(v136, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v139 = v170;
  if (v170)
  {
    v140 = (unint64_t *)&v170->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = Scalar;
  Scalar = 0;
  if (v142)
    (*((void (**)(std::__shared_weak_count_vtbl *))v142->~__shared_weak_count + 1))(v142);
  if (v168 < 0)
    operator delete(v167);
  v143 = v230;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v163 = Scalar;
  if (Scalar)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = Scalar;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v164 = v144;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "XYBroadcastShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v143 + 5))(v143, &v163, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v146 = v164;
  if (v164)
  {
    v147 = (unint64_t *)&v164->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*((void (**)(std::__shared_weak_count_vtbl *))v149->~__shared_weak_count + 1))(v149);
  v150 = *a3;
  v159 = v230;
  if (v230)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = v230;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = (std::__shared_weak_count_vtbl *)v152;
  }
  else
  {
    v151 = 0;
  }
  v160 = v151;
  v230 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v150 + 56))(v150, &v159);
  v153 = v160;
  if (v160)
  {
    v154 = (unint64_t *)&v160->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = v230;
  v230 = 0;
  if (v156)
    (*((void (**)(void **))*v156 + 1))(v156);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v208, 0);
  result = (uint64_t)v222;
  if (v222)
  {
    v158 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v222);
    return MEMORY[0x20BCFF140](v158, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2069444B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void **a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v73 = *(_QWORD *)(v71 - 112);
  *(_QWORD *)(v71 - 112) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v70;
  *v70 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2020::NeSquare::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void **v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  void **v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void **v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  void **v72;
  char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  char **v81;
  _QWORD *v82;
  uint64_t v83;
  MIL::Validation::TensorDTypeConstraints *v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  MIL::Validation::TensorSymbolicShapeConstraints *v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  void **v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void **v131;
  uint64_t result;
  uint64_t v133;
  void **v134;
  std::__shared_weak_count *v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void **v146;
  std::__shared_weak_count *v147;
  void *v148[2];
  char v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  void *v154;
  char v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  char **v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  uint64_t v163;
  void *v164;
  void *v165;
  _QWORD *v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  char **v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count *v176;
  void *__p;
  void *v178;
  _QWORD *v179;
  void *v180;
  void *v181;
  _QWORD *v182;
  std::__shared_weak_count *v183;
  _QWORD *v184;
  _BYTE v185[24];
  _BYTE *v186;
  _QWORD v187[3];
  MIL::Validation::TensorDTypeConstraints *v188;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v190;
  uint64_t v191;
  void **v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char **v196;
  uint64_t v197;

  v197 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v184 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v190 = (uint64_t)&v8->~__shared_weak_count_0;
  v191 = (uint64_t)&v8->~__shared_weak_count_0;
  v192 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v180 = v10;
  *v10 = v9;
  v181 = v10 + 1;
  v182 = v10 + 1;
  v193 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v178 = v12 + 1;
  v179 = v12 + 1;
  v194 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v164);
  v13 = v164;
  v164 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v183;
  if (v183)
  {
    p_shared_owners = (unint64_t *)&v183->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (Scalar)
  {
    v190 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "bias", (uint64_t *)&v192);
  v19 = v192;
  v192 = 0;
  if (v19)
    (*((void (**)(void **))*v19 + 1))(v19);
  v20 = v176;
  if (v176)
  {
    v21 = (unint64_t *)&v176->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v23, "acc_left_shift", (uint64_t *)&v192);
  v25 = v192;
  v192 = 0;
  if (v25)
    (*((void (**)(void **))*v25 + 1))(v25);
  v26 = v175;
  if (v175)
  {
    v27 = (unint64_t *)&v175->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 48))(*((_QWORD *)v24 + 5), 1);
  v29 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v29, "acc_bias_shift", (uint64_t *)&v192);
  v31 = v192;
  v192 = 0;
  if (v31)
    (*((void (**)(void **))*v31 + 1))(v31);
  v32 = v174;
  if (v174)
  {
    v33 = (unint64_t *)&v174->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 48))(*((_QWORD *)v30 + 5), 1);
  v35 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v35, "post_right_shift", (uint64_t *)&v192);
  v37 = v192;
  v192 = 0;
  if (v37)
    (*((void (**)(void **))*v37 + 1))(v37);
  v38 = v173;
  if (v173)
  {
    v39 = (unint64_t *)&v173->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 48))(*((_QWORD *)v36 + 5), 1);
  v41 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v41, "post_scale", (uint64_t *)&v192);
  v43 = v192;
  v192 = 0;
  if (v43)
    (*((void (**)(void **))*v43 + 1))(v43);
  v44 = v172;
  if (v172)
  {
    v45 = (unint64_t *)&v172->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v171 = 0;
  v47 = operator new();
  *(_QWORD *)v47 = 0;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  v192 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v171, (void **)v47);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v192, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v171, 1uLL);
  v48 = v171;
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v180 = v50;
  *v50 = v49;
  v181 = v50 + 1;
  v182 = v50 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  __p = v52;
  *v52 = v51;
  v178 = v52 + 1;
  v179 = v52 + 1;
  v190 = MIL::IRTensorValueType::MakeWithShape();
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v164 = v54;
  *v54 = v53;
  v165 = v54 + 1;
  v166 = v54 + 1;
  v191 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v55 = v168;
  v169 = v168;
  if (v168)
  {
    v56 = (_QWORD *)operator new();
    v57 = v168;
    *v56 = &unk_24BFE7320;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  v170 = v56;
  v168 = 0;
  v58 = v48[2];
  v59 = v48[1];
  if (v59 >= v58)
  {
    v61 = (v59 - *v48) >> 4;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v63 = v58 - *v48;
    if (v63 >> 3 > v62)
      v62 = v63 >> 3;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
      v64 = 0xFFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    v196 = v48 + 2;
    v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v48 + 2), v64);
    v67 = &v65[16 * v61];
    *(_QWORD *)v67 = v55;
    *((_QWORD *)v67 + 1) = v56;
    v169 = 0;
    v170 = 0;
    v69 = *v48;
    v68 = v48[1];
    if (v68 == *v48)
    {
      v72 = (void **)v48[1];
      v70 = &v65[16 * v61];
    }
    else
    {
      v70 = &v65[16 * v61];
      do
      {
        v71 = *((_OWORD *)v68 - 1);
        v68 -= 16;
        *((_OWORD *)v70 - 1) = v71;
        v70 -= 16;
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
      }
      while (v68 != v69);
      v72 = (void **)*v48;
      v68 = v48[1];
    }
    v60 = v67 + 16;
    *v48 = v70;
    v192 = v72;
    v193 = (uint64_t)v72;
    v48[1] = v67 + 16;
    v194 = (uint64_t)v68;
    v73 = v48[2];
    v48[2] = &v65[16 * v66];
    v195 = v73;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v192);
  }
  else
  {
    *(_QWORD *)v59 = v55;
    *((_QWORD *)v59 + 1) = v56;
    v60 = v59 + 16;
    v169 = 0;
    v170 = 0;
  }
  v48[1] = v60;
  v74 = v168;
  v168 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = v167;
  if (v167)
  {
    v76 = (unint64_t *)&v167->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  *(_OWORD *)v162 = *(_OWORD *)a2;
  v163 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v78 = (uint64_t)v184;
  v160 = (uint64_t)v184;
  if (v184)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = (std::__shared_weak_count_vtbl *)v78;
  }
  else
  {
    v79 = 0;
  }
  v161 = v79;
  v184 = 0;
  v158 = v171;
  if (v171)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = v171;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = (std::__shared_weak_count_vtbl *)v81;
  }
  else
  {
    v80 = 0;
  }
  v159 = v80;
  v171 = 0;
  v187[0] = &unk_24BFE7440;
  v187[1] = ANEMachineIR::H2020::Validators::ValidateNeSquare;
  v188 = (MIL::Validation::TensorDTypeConstraints *)v187;
  v186 = 0;
  MIL::IROperator::Make();
  v82 = v186;
  if (v186 == v185)
  {
    v83 = 4;
    v82 = v185;
  }
  else
  {
    if (!v186)
      goto LABEL_90;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_90:
  v84 = v188;
  if (v188 == (MIL::Validation::TensorDTypeConstraints *)v187)
  {
    v85 = 4;
    v84 = (MIL::Validation::TensorDTypeConstraints *)v187;
    goto LABEL_94;
  }
  if (v188)
  {
    v85 = 5;
LABEL_94:
    v84 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v84 + 8 * v85))();
  }
  if (v159)
  {
    v86 = &v159->__shared_owners_;
    do
      v87 = __ldaxr((unint64_t *)v86);
    while (__stlxr(v87 - 1, (unint64_t *)v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  if (v161)
  {
    v88 = &v161->__shared_owners_;
    do
      v89 = __ldaxr((unint64_t *)v88);
    while (__stlxr(v89 - 1, (unint64_t *)v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  if (SHIBYTE(v163) < 0)
    operator delete(v162[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v84);
  v90 = v192;
  std::string::basic_string[abi:ne180100]<0>(&v154, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v156 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v157 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v156, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v93 = v157;
  if (v157)
  {
    v94 = (unint64_t *)&v157->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v155 < 0)
    operator delete(v154);
  v97 = v192;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v150 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v151 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v148, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v150, v148);
  if (v149 < 0)
    operator delete(v148[0]);
  v100 = v151;
  if (v151)
  {
    v101 = (unint64_t *)&v151->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = *a3;
  v146 = v192;
  if (v192)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v192;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v147 = v105;
  v192 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v146);
  v107 = v147;
  if (v147)
  {
    v108 = (unint64_t *)&v147->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)v192;
  v192 = 0;
  if (v110)
    v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v110 + 8))(v110);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v110);
  v111 = v192;
  std::string::basic_string[abi:ne180100]<0>(&v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v144 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v145 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 5))(v111, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v114 = v145;
  if (v145)
  {
    v115 = (unint64_t *)&v145->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v143 < 0)
    operator delete(v142);
  v118 = v192;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v138 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v139 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v136, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v118 + 5))(v118, &v138, v136);
  if (v137 < 0)
    operator delete(v136[0]);
  v121 = v139;
  if (v139)
  {
    v122 = (unint64_t *)&v139->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  v125 = *a3;
  v134 = v192;
  if (v192)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = v192;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = (std::__shared_weak_count_vtbl *)v127;
  }
  else
  {
    v126 = 0;
  }
  v135 = v126;
  v192 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v125 + 56))(v125, &v134);
  v128 = v135;
  if (v135)
  {
    v129 = (unint64_t *)&v135->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v192;
  v192 = 0;
  if (v131)
    (*((void (**)(void **))*v131 + 1))(v131);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v171, 0);
  result = (uint64_t)v184;
  if (v184)
  {
    v133 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v184);
    return MEMORY[0x20BCFF140](v133, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2069459FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void **a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;

  v57 = *(_QWORD *)(v55 - 112);
  *(_QWORD *)(v55 - 112) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *v54;
  *v54 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 208), 0);
  _Unwind_Resume(a1);
}

void MilTranslator::Passes::FuseConvScale::Match(MIL::Builder::BlockBuilder **a1@<X1>, _QWORD *a2@<X8>)
{
  MIL::Builder::OperationBuilder **i;
  uint64_t Operator;
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  void **v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t ArgumentForParameter;
  uint64_t v27;
  uint64_t Output;
  MIL::Builder::Variable *v29;
  uint64_t Value;
  MIL::Builder::Variable *v31;
  MIL::IRValueType *Type;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  MIL::Builder::Variable *v46;
  MIL::IRValueType *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  MIL::Builder::Variable *v51;
  MIL::Builder::BlockBuilder *v52;
  unint64_t *v53;
  unint64_t v54;
  unsigned __int8 **OutputName;
  _BOOL4 IsBlockOutput;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t j;
  MIL::Builder::BlockBuilder *v64[2];
  _QWORD v65[2];
  void **p_p;
  std::__shared_weak_count *v67;
  MIL::Builder::OperationBuilder **v68;
  MIL::Builder::OperationBuilder **v69;
  uint64_t v70;
  uint64_t v71;
  MIL::Builder::OperationBuilder *v72;
  std::__shared_weak_count *v73;
  void *__p;
  std::__shared_weak_count *v75;
  void **v76;
  std::__shared_weak_count *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v72 = 0;
  v73 = 0;
  MIL::Builder::BlockBuilder::GetOperations(*a1);
  for (i = v68; i != v69; i += 2)
  {
    Operator = MIL::Builder::OperationBuilder::GetOperator(*i);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
    v7 = *(char *)(v6 + 23);
    if (v7 < 0)
    {
      if (*(_QWORD *)(v6 + 8) != 7)
        continue;
      v6 = *(_QWORD *)v6;
    }
    else if (v7 != 7)
    {
      continue;
    }
    if (*(_DWORD *)v6 == 1667196270 && *(_DWORD *)(v6 + 3) == 1986948963)
    {
      std::shared_ptr<MIL::IRNamedValueType>::operator=[abi:ne180100](&v72, (uint64_t *)i);
      break;
    }
  }
  __p = &v68;
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v72)
  {
    MIL::Builder::OperationBuilder::GetChildOperations(v72);
    if (v71 != 1
      || (MIL::Builder::OperationBuilder::GetBlocks(v72),
          v9 = (std::__shared_weak_count *)__p,
          v10 = v75,
          p_p = &__p,
          std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&p_p),
          v9 != v10))
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
LABEL_18:
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&v68);
      goto LABEL_20;
    }
    v15 = *(void ***)(v70 + 16);
    v14 = *(std::__shared_weak_count **)(v70 + 24);
    p_p = v15;
    v67 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v18 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v15);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    v20 = *(char *)(v19 + 23);
    if (v20 < 0)
    {
      if (*(_QWORD *)(v19 + 8) != 6)
        goto LABEL_38;
      v19 = *(_QWORD *)v19;
    }
    else if (v20 != 6)
    {
LABEL_38:
      v22 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v15);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
      v24 = *(char *)(v23 + 23);
      if (v24 < 0)
      {
        if (*(_QWORD *)(v23 + 8) != 6)
          goto LABEL_85;
        v23 = *(_QWORD *)v23;
      }
      else if (v24 != 6)
      {
        goto LABEL_85;
      }
      if (*(_DWORD *)v23 != 1834968432 || *(_WORD *)(v23 + 4) != 27765)
      {
LABEL_85:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        if (!v14)
          goto LABEL_18;
LABEL_86:
        v57 = (unint64_t *)&v14->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        goto LABEL_18;
      }
LABEL_48:
      std::string::basic_string[abi:ne180100]<0>(&__p, "x");
      ArgumentForParameter = MIL::Builder::OperationBuilder::GetArgumentForParameter();
      if (SHIBYTE(v76) < 0)
        operator delete(__p);
      std::string::basic_string[abi:ne180100]<0>(&__p, "y");
      v27 = MIL::Builder::OperationBuilder::GetArgumentForParameter();
      if (SHIBYTE(v76) < 0)
        operator delete(__p);
      if (ArgumentForParameter != MIL::Builder::OperationBuilder::GetOutput(v72)
        && v27 != MIL::Builder::OperationBuilder::GetOutput(v72))
      {
        goto LABEL_85;
      }
      Output = MIL::Builder::OperationBuilder::GetOutput(v72);
      v29 = (MIL::Builder::Variable *)(ArgumentForParameter == Output ? v27 : ArgumentForParameter);
      Value = MIL::Builder::Variable::TryGetValue(v29);
      if (!Value)
        goto LABEL_85;
      v31 = (MIL::Builder::Variable *)(ArgumentForParameter == Output ? ArgumentForParameter : v27);
      Type = (MIL::IRValueType *)MIL::Builder::Variable::TryGetType(v31);
      if (!Type)
        goto LABEL_85;
      v33 = MIL::IRValueType::AsTensorType(Type);
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Value + 32))(Value);
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
      if (!v33)
        goto LABEL_85;
      v36 = v35;
      if (!v35)
        goto LABEL_85;
      v37 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 96))(v33);
      v38 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 96))(v36);
      v39 = *v38;
      v40 = v38[1];
      if (*v38 != v40)
      {
        v41 = v37[1];
        if (v41 == *v37)
          goto LABEL_100;
        if (*(_QWORD *)(v41 - 8) != *(_QWORD *)(v40 - 8))
          goto LABEL_85;
        v42 = v40 - v39;
        if (v42 != 8)
        {
          v43 = 0;
          v44 = v42 >> 3;
          while (v44 > v43)
          {
            v45 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v39 + 8 * v43));
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 48))(v45) != 1)
              goto LABEL_85;
            ++v43;
            v39 = *v38;
            v44 = (v38[1] - *v38) >> 3;
            if (v43 >= v44 - 1)
              goto LABEL_72;
          }
LABEL_100:
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
      }
LABEL_72:
      v46 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v72);
      v47 = (MIL::IRValueType *)MIL::Builder::Variable::TryGetType(v46);
      if (!v47
        || (v48 = MIL::IRValueType::AsTensorType(v47),
            (*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 88))(v48) == 4))
      {
        v65[0] = v72;
        v65[1] = v73;
        if (v73)
        {
          v49 = (unint64_t *)&v73->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
        v51 = (MIL::Builder::Variable *)ANEMachineIR::Utils::TryGetArgumentForParameter();
        if (SHIBYTE(v76) < 0)
          operator delete(__p);
        std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)v65);
        if (!v51 || MIL::Builder::Variable::TryGetType(v51))
        {
          v52 = a1[1];
          v64[0] = *a1;
          v64[1] = v52;
          if (v52)
          {
            v53 = (unint64_t *)((char *)v52 + 8);
            do
              v54 = __ldxr(v53);
            while (__stxr(v54 + 1, v53));
          }
          OutputName = (unsigned __int8 **)MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder *)v15);
          IsBlockOutput = ANEMachineIR::Utils::IsBlockOutput(v64, OutputName);
          std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)v64);
          if (!IsBlockOutput)
          {
            __p = v72;
            v75 = v73;
            if (v73)
            {
              v59 = (unint64_t *)&v73->__shared_owners_;
              do
                v60 = __ldxr(v59);
              while (__stxr(v60 + 1, v59));
            }
            v76 = v15;
            v77 = v14;
            if (v14)
            {
              v61 = (unint64_t *)&v14->__shared_owners_;
              do
                v62 = __ldxr(v61);
              while (__stxr(v62 + 1, v61));
            }
            std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector[abi:ne180100](a2, &__p, 2uLL);
            for (j = 16; j != -16; j -= 16)
              std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&__p + j);
            v14 = v67;
            if (!v67)
              goto LABEL_18;
            goto LABEL_86;
          }
        }
      }
      goto LABEL_85;
    }
    if (*(_DWORD *)v19 == 1834968430 && *(_WORD *)(v19 + 4) == 27765)
      goto LABEL_48;
    goto LABEL_38;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
LABEL_20:
  v11 = v73;
  if (v73)
  {
    v12 = (unint64_t *)&v73->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_20694642C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t i;

  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v27 + i);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&a15);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector[abi:ne180100](_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__vallocate[abi:ne180100](a1, a3);
    v6 = &a2[2 * a3];
    v7 = (_QWORD *)a1[1];
    do
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    while (a2 != v6);
    a1[1] = v7;
  }
  return a1;
}

void sub_2069465AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void MilTranslator::Passes::FuseConvScale::Replace(uint64_t **a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  MIL::Builder::OperationBuilder *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  MIL::Builder::Variable *ArgumentForParameter;
  uint64_t Name;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  MIL::Builder::OperationBuilder *v188;
  MIL::Builder::Variable *v189;
  MIL::IRValue *Value;
  MIL::IRValue *v191;
  unint64_t *v192;
  unint64_t v193;
  MIL::Builder::Variable *v194;
  uint64_t *v195;
  unint64_t v196;
  MIL::IRValueType *Type;
  MIL::IRTensorValueType *v198;
  MIL::IRTensorValueType *v199;
  MIL::Fp16 *IsScalar;
  unint64_t v201;
  MIL::IRValue *v202;
  unint64_t v203;
  std::string::size_type v204;
  _WORD *v205;
  _WORD *v206;
  std::string::size_type size;
  std::string::size_type v208;
  void *v209;
  int64_t v210;
  uint64_t v211;
  std::string::size_type v212;
  uint64_t v213;
  char *v214;
  char *v215;
  __int16 v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  MIL::Fp16 *v220;
  uint64_t i;
  __int16 v222;
  std::string::size_type v223;
  std::string::size_type v224;
  int64_t v225;
  uint64_t v226;
  std::string::size_type v227;
  uint64_t v228;
  char *v229;
  char *v230;
  __int16 v231;
  uint64_t v232;
  int v233;
  MIL::IRTensorValueType *v234;
  MIL::Fp16 *v235;
  float v236;
  float v237;
  MIL::Fp16 *v238;
  float v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  MIL::IRTensorValueType *v243;
  char *v244;
  MIL::Fp16 *v245;
  float v246;
  unint64_t *v247;
  MIL::IRTensorValueType *v248;
  _BYTE *v249;
  MIL::Fp16 *Float;
  unsigned int v251;
  float v252;
  unint64_t *v253;
  char *v254;
  int v255;
  std::__shared_weak_count *v256;
  uint64_t v257;
  unint64_t v258;
  float v259;
  float v260;
  MIL::Fp16 *v261;
  __int16 v262;
  unint64_t *v263;
  std::__shared_weak_count *v264;
  uint64_t v265;
  unint64_t v266;
  float v267;
  float v268;
  MIL::Fp16 *v269;
  unsigned int v270;
  __int16 v271;
  unint64_t *v272;
  std::__shared_weak_count *v273;
  uint64_t v274;
  unint64_t v275;
  float v276;
  float v277;
  MIL::Fp16 *v278;
  MIL::Fp16 *v279;
  float v280;
  __int16 v281;
  unint64_t *v282;
  void **v283;
  MIL::Builder::OperationBuilder *v284;
  MIL::Builder::Variable *Output;
  uint64_t v286;
  __int128 v287;
  size_t v288;
  std::string *p_src;
  std::string *v290;
  MIL::Builder::Variable *v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t *v295;
  uint64_t *v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  std::string v317;
  std::string v318;
  std::__shared_weak_count *v319;
  MIL::Builder::OperationBuilder *v320;
  std::__shared_weak_count *v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  MIL::Builder::OperationBuilder *v324;
  std::__shared_weak_count *v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  MIL::Builder::OperationBuilder *v328;
  std::__shared_weak_count *v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  MIL::Builder::OperationBuilder *v332;
  std::__shared_weak_count *v333;
  uint64_t v334;
  std::__shared_weak_count *v335;
  MIL::Builder::OperationBuilder *v336;
  std::__shared_weak_count *v337;
  uint64_t v338;
  std::__shared_weak_count *v339;
  MIL::Builder::OperationBuilder *v340;
  std::__shared_weak_count *v341;
  uint64_t v342;
  std::__shared_weak_count *v343;
  MIL::Builder::OperationBuilder *v344;
  std::__shared_weak_count *v345;
  uint64_t v346;
  std::__shared_weak_count *v347;
  MIL::Builder::OperationBuilder *v348;
  std::__shared_weak_count *v349;
  uint64_t v350;
  std::__shared_weak_count *v351;
  MIL::Builder::OperationBuilder *v352;
  std::__shared_weak_count *v353;
  uint64_t v354;
  std::__shared_weak_count *v355;
  MIL::Builder::OperationBuilder *v356;
  std::__shared_weak_count *v357;
  uint64_t v358;
  std::__shared_weak_count *v359;
  MIL::Builder::OperationBuilder *v360;
  std::__shared_weak_count *v361;
  uint64_t v362;
  std::__shared_weak_count *v363;
  MIL::Builder::OperationBuilder *v364;
  std::__shared_weak_count *v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  MIL::Builder::OperationBuilder *v368;
  std::__shared_weak_count *v369;
  uint64_t v370;
  std::__shared_weak_count *v371;
  MIL::Builder::OperationBuilder *v372;
  std::__shared_weak_count *v373;
  uint64_t v374;
  std::__shared_weak_count *v375;
  MIL::Builder::OperationBuilder *v376;
  std::__shared_weak_count *v377;
  uint64_t v378;
  std::__shared_weak_count *v379;
  MIL::Builder::OperationBuilder *v380;
  std::__shared_weak_count *v381;
  uint64_t v382;
  std::__shared_weak_count *v383;
  MIL::Builder::OperationBuilder *v384;
  std::__shared_weak_count *v385;
  uint64_t v386;
  std::__shared_weak_count *v387;
  MIL::Builder::OperationBuilder *v388;
  std::__shared_weak_count *v389;
  uint64_t v390;
  std::__shared_weak_count *v391;
  MIL::Builder::OperationBuilder *v392;
  std::__shared_weak_count *v393;
  std::string v394;
  void *__p;
  char v396;
  std::__shared_weak_count *v397;
  MIL::Builder::OperationBuilder *v398;
  std::__shared_weak_count *v399;
  uint64_t v400;
  std::__shared_weak_count *v401;
  MIL::Builder::OperationBuilder *v402;
  std::__shared_weak_count *v403;
  MIL::Builder::OperationBuilder *v404;
  std::__shared_weak_count *v405;
  std::__shared_weak_count *v406;
  std::string __src;
  uint64_t Data;
  std::__shared_weak_count *v409;
  std::string v410;

  v3 = *a1;
  if ((char *)a1[1] - (char *)*a1 == 32)
  {
    v5 = (std::__shared_weak_count *)v3[1];
    v404 = (MIL::Builder::OperationBuilder *)*v3;
    v405 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v3 = *a1;
      if ((unint64_t)((char *)a1[1] - (char *)*a1) <= 0x10)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    v315 = a2;
    v9 = (MIL::Builder::OperationBuilder *)v3[2];
    v8 = (std::__shared_weak_count *)v3[3];
    v402 = v9;
    v403 = v8;
    if (v8)
    {
      v10 = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    std::string::basic_string[abi:ne180100]<0>(&v410, "ne_conv");
    v398 = v9;
    v399 = v8;
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    MIL::Builder::BlockBuilder::AddOperation();
    if (v399)
    {
      v14 = &v399->__shared_owners_;
      do
        v15 = __ldaxr((unint64_t *)v14);
      while (__stlxr(v15 - 1, (unint64_t *)v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
        std::__shared_weak_count::__release_weak(v399);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "x");
    std::string::basic_string[abi:ne180100]<0>(&v410, "x");
    ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
    Name = MIL::Builder::Variable::GetName(ArgumentForParameter);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v394, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
    }
    else
    {
      v18 = *(_OWORD *)Name;
      v394.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
      *(_OWORD *)&v394.__r_.__value_.__l.__data_ = v18;
    }
    MIL::Builder::OperationBuilder::AddInput();
    v21 = v397;
    if (v397)
    {
      v22 = (unint64_t *)&v397->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v394.__r_.__value_.__l.__data_);
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    if (v396 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&v410, "dense_kernel");
    v392 = v404;
    v393 = v405;
    if (v405)
    {
      v24 = (unint64_t *)&v405->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v390 = v400;
    v391 = v401;
    if (v401)
    {
      v26 = (unint64_t *)&v401->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v392);
    if (v391)
    {
      v28 = &v391->__shared_owners_;
      do
        v29 = __ldaxr((unint64_t *)v28);
      while (__stlxr(v29 - 1, (unint64_t *)v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
        std::__shared_weak_count::__release_weak(v391);
      }
    }
    v30 = v393;
    if (v393)
    {
      v31 = (unint64_t *)&v393->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "strides");
    v388 = v404;
    v389 = v405;
    if (v405)
    {
      v33 = (unint64_t *)&v405->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v386 = v400;
    v387 = v401;
    if (v401)
    {
      v35 = (unint64_t *)&v401->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v388);
    if (v387)
    {
      v37 = &v387->__shared_owners_;
      do
        v38 = __ldaxr((unint64_t *)v37);
      while (__stlxr(v38 - 1, (unint64_t *)v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
        std::__shared_weak_count::__release_weak(v387);
      }
    }
    v39 = v389;
    if (v389)
    {
      v40 = (unint64_t *)&v389->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "pad_mode");
    v384 = v404;
    v385 = v405;
    if (v405)
    {
      v42 = (unint64_t *)&v405->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v382 = v400;
    v383 = v401;
    if (v401)
    {
      v44 = (unint64_t *)&v401->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v384);
    if (v383)
    {
      v46 = &v383->__shared_owners_;
      do
        v47 = __ldaxr((unint64_t *)v46);
      while (__stlxr(v47 - 1, (unint64_t *)v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
        std::__shared_weak_count::__release_weak(v383);
      }
    }
    v48 = v385;
    if (v385)
    {
      v49 = (unint64_t *)&v385->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "pad");
    v380 = v404;
    v381 = v405;
    if (v405)
    {
      v51 = (unint64_t *)&v405->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v378 = v400;
    v379 = v401;
    if (v401)
    {
      v53 = (unint64_t *)&v401->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v380);
    if (v379)
    {
      v55 = &v379->__shared_owners_;
      do
        v56 = __ldaxr((unint64_t *)v55);
      while (__stlxr(v56 - 1, (unint64_t *)v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
        std::__shared_weak_count::__release_weak(v379);
      }
    }
    v57 = v381;
    if (v381)
    {
      v58 = (unint64_t *)&v381->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "dilations");
    v376 = v404;
    v377 = v405;
    if (v405)
    {
      v60 = (unint64_t *)&v405->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v374 = v400;
    v375 = v401;
    if (v401)
    {
      v62 = (unint64_t *)&v401->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v376);
    if (v375)
    {
      v64 = &v375->__shared_owners_;
      do
        v65 = __ldaxr((unint64_t *)v64);
      while (__stlxr(v65 - 1, (unint64_t *)v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
        std::__shared_weak_count::__release_weak(v375);
      }
    }
    v66 = v377;
    if (v377)
    {
      v67 = (unint64_t *)&v377->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "num_groups");
    v372 = v404;
    v373 = v405;
    if (v405)
    {
      v69 = (unint64_t *)&v405->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v370 = v400;
    v371 = v401;
    if (v401)
    {
      v71 = (unint64_t *)&v401->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v372);
    if (v371)
    {
      v73 = &v371->__shared_owners_;
      do
        v74 = __ldaxr((unint64_t *)v73);
      while (__stlxr(v74 - 1, (unint64_t *)v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
        std::__shared_weak_count::__release_weak(v371);
      }
    }
    v75 = v373;
    if (v373)
    {
      v76 = (unint64_t *)&v373->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "group_kernel_reuse");
    v368 = v404;
    v369 = v405;
    if (v405)
    {
      v78 = (unint64_t *)&v405->__shared_owners_;
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
    }
    v366 = v400;
    v367 = v401;
    if (v401)
    {
      v80 = (unint64_t *)&v401->__shared_owners_;
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v368);
    if (v367)
    {
      v82 = &v367->__shared_owners_;
      do
        v83 = __ldaxr((unint64_t *)v82);
      while (__stlxr(v83 - 1, (unint64_t *)v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
        std::__shared_weak_count::__release_weak(v367);
      }
    }
    v84 = v369;
    if (v369)
    {
      v85 = (unint64_t *)&v369->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "bias");
    v364 = v404;
    v365 = v405;
    if (v405)
    {
      v87 = (unint64_t *)&v405->__shared_owners_;
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    v362 = v400;
    v363 = v401;
    if (v401)
    {
      v89 = (unint64_t *)&v401->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v364);
    if (v363)
    {
      v91 = &v363->__shared_owners_;
      do
        v92 = __ldaxr((unint64_t *)v91);
      while (__stlxr(v92 - 1, (unint64_t *)v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
        std::__shared_weak_count::__release_weak(v363);
      }
    }
    v93 = v365;
    if (v365)
    {
      v94 = (unint64_t *)&v365->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "acc_left_shift");
    v360 = v404;
    v361 = v405;
    if (v405)
    {
      v96 = (unint64_t *)&v405->__shared_owners_;
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    v358 = v400;
    v359 = v401;
    if (v401)
    {
      v98 = (unint64_t *)&v401->__shared_owners_;
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v360);
    if (v359)
    {
      v100 = &v359->__shared_owners_;
      do
        v101 = __ldaxr((unint64_t *)v100);
      while (__stlxr(v101 - 1, (unint64_t *)v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
        std::__shared_weak_count::__release_weak(v359);
      }
    }
    v102 = v361;
    if (v361)
    {
      v103 = (unint64_t *)&v361->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "acc_bias_shift");
    v356 = v404;
    v357 = v405;
    if (v405)
    {
      v105 = (unint64_t *)&v405->__shared_owners_;
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    v354 = v400;
    v355 = v401;
    if (v401)
    {
      v107 = (unint64_t *)&v401->__shared_owners_;
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v356);
    if (v355)
    {
      v109 = &v355->__shared_owners_;
      do
        v110 = __ldaxr((unint64_t *)v109);
      while (__stlxr(v110 - 1, (unint64_t *)v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
        std::__shared_weak_count::__release_weak(v355);
      }
    }
    v111 = v357;
    if (v357)
    {
      v112 = (unint64_t *)&v357->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "post_right_shift");
    v352 = v404;
    v353 = v405;
    if (v405)
    {
      v114 = (unint64_t *)&v405->__shared_owners_;
      do
        v115 = __ldxr(v114);
      while (__stxr(v115 + 1, v114));
    }
    v350 = v400;
    v351 = v401;
    if (v401)
    {
      v116 = (unint64_t *)&v401->__shared_owners_;
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v352);
    if (v351)
    {
      v118 = &v351->__shared_owners_;
      do
        v119 = __ldaxr((unint64_t *)v118);
      while (__stlxr(v119 - 1, (unint64_t *)v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
        std::__shared_weak_count::__release_weak(v351);
      }
    }
    v120 = v353;
    if (v353)
    {
      v121 = (unint64_t *)&v353->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "transposed");
    v348 = v404;
    v349 = v405;
    if (v405)
    {
      v123 = (unint64_t *)&v405->__shared_owners_;
      do
        v124 = __ldxr(v123);
      while (__stxr(v124 + 1, v123));
    }
    v346 = v400;
    v347 = v401;
    if (v401)
    {
      v125 = (unint64_t *)&v401->__shared_owners_;
      do
        v126 = __ldxr(v125);
      while (__stxr(v126 + 1, v125));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v348);
    if (v347)
    {
      v127 = &v347->__shared_owners_;
      do
        v128 = __ldaxr((unint64_t *)v127);
      while (__stlxr(v128 - 1, (unint64_t *)v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
        std::__shared_weak_count::__release_weak(v347);
      }
    }
    v129 = v349;
    if (v349)
    {
      v130 = (unint64_t *)&v349->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "pre_relu");
    v344 = v404;
    v345 = v405;
    if (v405)
    {
      v132 = (unint64_t *)&v405->__shared_owners_;
      do
        v133 = __ldxr(v132);
      while (__stxr(v133 + 1, v132));
    }
    v342 = v400;
    v343 = v401;
    if (v401)
    {
      v134 = (unint64_t *)&v401->__shared_owners_;
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v344);
    if (v343)
    {
      v136 = &v343->__shared_owners_;
      do
        v137 = __ldaxr((unint64_t *)v136);
      while (__stlxr(v137 - 1, (unint64_t *)v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
        std::__shared_weak_count::__release_weak(v343);
      }
    }
    v138 = v345;
    if (v345)
    {
      v139 = (unint64_t *)&v345->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
        std::__shared_weak_count::__release_weak(v138);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "alternative_format_kernel_coefficients");
    v340 = v404;
    v341 = v405;
    if (v405)
    {
      v141 = (unint64_t *)&v405->__shared_owners_;
      do
        v142 = __ldxr(v141);
      while (__stxr(v142 + 1, v141));
    }
    v338 = v400;
    v339 = v401;
    if (v401)
    {
      v143 = (unint64_t *)&v401->__shared_owners_;
      do
        v144 = __ldxr(v143);
      while (__stxr(v144 + 1, v143));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v340);
    if (v339)
    {
      v145 = &v339->__shared_owners_;
      do
        v146 = __ldaxr((unint64_t *)v145);
      while (__stlxr(v146 - 1, (unint64_t *)v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
        std::__shared_weak_count::__release_weak(v339);
      }
    }
    v147 = v341;
    if (v341)
    {
      v148 = (unint64_t *)&v341->__shared_owners_;
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "sparse_mask");
    v336 = v404;
    v337 = v405;
    if (v405)
    {
      v150 = (unint64_t *)&v405->__shared_owners_;
      do
        v151 = __ldxr(v150);
      while (__stxr(v151 + 1, v150));
    }
    v334 = v400;
    v335 = v401;
    if (v401)
    {
      v152 = (unint64_t *)&v401->__shared_owners_;
      do
        v153 = __ldxr(v152);
      while (__stxr(v153 + 1, v152));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v336);
    if (v335)
    {
      v154 = &v335->__shared_owners_;
      do
        v155 = __ldaxr((unint64_t *)v154);
      while (__stlxr(v155 - 1, (unint64_t *)v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
        std::__shared_weak_count::__release_weak(v335);
      }
    }
    v156 = v337;
    if (v337)
    {
      v157 = (unint64_t *)&v337->__shared_owners_;
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "sparse_num_nonzero");
    v332 = v404;
    v333 = v405;
    if (v405)
    {
      v159 = (unint64_t *)&v405->__shared_owners_;
      do
        v160 = __ldxr(v159);
      while (__stxr(v160 + 1, v159));
    }
    v330 = v400;
    v331 = v401;
    if (v401)
    {
      v161 = (unint64_t *)&v401->__shared_owners_;
      do
        v162 = __ldxr(v161);
      while (__stxr(v162 + 1, v161));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v332);
    if (v331)
    {
      v163 = &v331->__shared_owners_;
      do
        v164 = __ldaxr((unint64_t *)v163);
      while (__stlxr(v164 - 1, (unint64_t *)v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
        std::__shared_weak_count::__release_weak(v331);
      }
    }
    v165 = v333;
    if (v333)
    {
      v166 = (unint64_t *)&v333->__shared_owners_;
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "sparse_num_nonzero_per_filter");
    v328 = v404;
    v329 = v405;
    if (v405)
    {
      v168 = (unint64_t *)&v405->__shared_owners_;
      do
        v169 = __ldxr(v168);
      while (__stxr(v169 + 1, v168));
    }
    v326 = v400;
    v327 = v401;
    if (v401)
    {
      v170 = (unint64_t *)&v401->__shared_owners_;
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v328);
    if (v327)
    {
      v172 = &v327->__shared_owners_;
      do
        v173 = __ldaxr((unint64_t *)v172);
      while (__stlxr(v173 - 1, (unint64_t *)v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
        std::__shared_weak_count::__release_weak(v327);
      }
    }
    v174 = v329;
    if (v329)
    {
      v175 = (unint64_t *)&v329->__shared_owners_;
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "palette_table");
    v324 = v404;
    v325 = v405;
    if (v405)
    {
      v177 = (unint64_t *)&v405->__shared_owners_;
      do
        v178 = __ldxr(v177);
      while (__stxr(v178 + 1, v177));
    }
    v322 = v400;
    v323 = v401;
    if (v401)
    {
      v179 = (unint64_t *)&v401->__shared_owners_;
      do
        v180 = __ldxr(v179);
      while (__stxr(v180 + 1, v179));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v410, (uint64_t *)&v324);
    if (v323)
    {
      v181 = &v323->__shared_owners_;
      do
        v182 = __ldaxr((unint64_t *)v181);
      while (__stlxr(v182 - 1, (unint64_t *)v181));
      if (!v182)
      {
        ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
        std::__shared_weak_count::__release_weak(v323);
      }
    }
    v183 = v325;
    if (v325)
    {
      v184 = (unint64_t *)&v325->__shared_owners_;
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
      {
        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
        std::__shared_weak_count::__release_weak(v183);
      }
    }
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "x");
    v186 = MIL::Builder::OperationBuilder::GetArgumentForParameter();
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v410, "y");
    v187 = MIL::Builder::OperationBuilder::GetArgumentForParameter();
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    v188 = v404;
    if (v186 == MIL::Builder::OperationBuilder::GetOutput(v404))
      v189 = (MIL::Builder::Variable *)v187;
    else
      v189 = (MIL::Builder::Variable *)v186;
    Value = (MIL::IRValue *)MIL::Builder::Variable::GetValue(v189);
    v191 = (MIL::IRValue *)MIL::IRValue::AsTensor(Value);
    v320 = v188;
    v321 = v405;
    if (v405)
    {
      v192 = (unint64_t *)&v405->__shared_owners_;
      do
        v193 = __ldxr(v192);
      while (__stxr(v193 + 1, v192));
    }
    std::string::basic_string[abi:ne180100]<0>(&v410, "post_scale");
    v194 = (MIL::Builder::Variable *)ANEMachineIR::Utils::TryGetArgumentForParameter();
    if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v410.__r_.__value_.__l.__data_);
    if (v321)
    {
      v195 = &v321->__shared_owners_;
      do
        v196 = __ldaxr((unint64_t *)v195);
      while (__stlxr(v196 - 1, (unint64_t *)v195));
      if (!v196)
      {
        ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
        std::__shared_weak_count::__release_weak(v321);
      }
    }
    memset(&v410, 0, sizeof(v410));
    if (v194)
    {
      Type = (MIL::IRValueType *)MIL::Builder::Variable::TryGetType(v194);
      v198 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(Type);
      if (MIL::IRTensorValueType::IsScalar(v198))
      {
        LOWORD(__src.__r_.__value_.__l.__data_) = MIL::Builder::Variable::GetScalarValue<MIL::Fp16>();
        std::vector<MIL::Fp16>::__assign_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>((char *)&v410, (char *)&__src, (uint64_t)__src.__r_.__value_.__r.__words + 2, 1uLL);
      }
      else
      {
        v201 = (*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)Type + 16))(Type);
        std::vector<MIL::Fp16>::reserve((void **)&v410.__r_.__value_.__l.__data_, v201);
        v202 = (MIL::IRValue *)MIL::Builder::Variable::GetValue(v194);
        MIL::IRValue::AsTensor(v202);
        v203 = 0;
        __src.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        __src.__r_.__value_.__l.__size_ = v204;
        while (v203 < (*(uint64_t (**)(MIL::IRValueType *))(*(_QWORD *)Type + 16))(Type))
        {
          v205 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&__src, v203);
          v206 = v205;
          size = v410.__r_.__value_.__l.__size_;
          if (v410.__r_.__value_.__l.__size_ >= v410.__r_.__value_.__r.__words[2])
          {
            v209 = (void *)v410.__r_.__value_.__r.__words[0];
            v210 = v410.__r_.__value_.__l.__size_ - v410.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v410.__r_.__value_.__l.__size_ - v410.__r_.__value_.__r.__words[0]) <= -3)
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            v211 = v210 >> 1;
            if (v410.__r_.__value_.__r.__words[2] - v410.__r_.__value_.__r.__words[0] <= (v210 >> 1) + 1)
              v212 = v211 + 1;
            else
              v212 = v410.__r_.__value_.__r.__words[2] - v410.__r_.__value_.__r.__words[0];
            if (v410.__r_.__value_.__r.__words[2] - v410.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFFELL)
              v213 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v213 = v212;
            if (v213)
            {
              v214 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v410.__r_.__value_.__r.__words[2], v213);
              size = v410.__r_.__value_.__l.__size_;
              v209 = (void *)v410.__r_.__value_.__r.__words[0];
            }
            else
            {
              v214 = 0;
            }
            v215 = &v214[2 * v211];
            *(_WORD *)v215 = *v206;
            v208 = (std::string::size_type)(v215 + 2);
            while ((void *)size != v209)
            {
              v216 = *(_WORD *)(size - 2);
              size -= 2;
              *((_WORD *)v215 - 1) = v216;
              v215 -= 2;
            }
            v410.__r_.__value_.__r.__words[0] = (std::string::size_type)v215;
            v410.__r_.__value_.__l.__size_ = v208;
            v410.__r_.__value_.__r.__words[2] = (std::string::size_type)&v214[2 * v213];
            if (v209)
              operator delete(v209);
          }
          else
          {
            *(_WORD *)v410.__r_.__value_.__l.__size_ = *v205;
            v208 = size + 2;
          }
          v410.__r_.__value_.__l.__size_ = v208;
          ++v203;
        }
      }
    }
    else
    {
      v199 = (MIL::IRTensorValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v191 + 32))(v191);
      IsScalar = (MIL::Fp16 *)MIL::IRTensorValueType::IsScalar(v199);
      if ((_DWORD)IsScalar)
      {
        LOWORD(__src.__r_.__value_.__l.__data_) = MIL::Fp16::FromFloat(IsScalar, 1.0);
        std::vector<MIL::Fp16>::__assign_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>((char *)&v410, (char *)&__src, (uint64_t)__src.__r_.__value_.__r.__words + 2, 1uLL);
      }
      else
      {
        v217 = MIL::IRValue::AsTensor(v191);
        v218 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v217 + 32))(v217);
        v219 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v218 + 16))(v218);
        std::vector<MIL::Fp16>::reserve((void **)&v410.__r_.__value_.__l.__data_, v219);
        if (v219)
        {
          for (i = 0; i != v219; ++i)
          {
            v220 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v220, 1.0);
            v222 = (__int16)v220;
            v223 = v410.__r_.__value_.__l.__size_;
            if (v410.__r_.__value_.__l.__size_ >= v410.__r_.__value_.__r.__words[2])
            {
              v220 = (MIL::Fp16 *)v410.__r_.__value_.__r.__words[0];
              v225 = v410.__r_.__value_.__l.__size_ - v410.__r_.__value_.__r.__words[0];
              if ((uint64_t)(v410.__r_.__value_.__l.__size_ - v410.__r_.__value_.__r.__words[0]) <= -3)
                std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
              v226 = v225 >> 1;
              if (v410.__r_.__value_.__r.__words[2] - v410.__r_.__value_.__r.__words[0] <= (v225 >> 1) + 1)
                v227 = v226 + 1;
              else
                v227 = v410.__r_.__value_.__r.__words[2] - v410.__r_.__value_.__r.__words[0];
              if (v410.__r_.__value_.__r.__words[2] - v410.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFFELL)
                v228 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v228 = v227;
              if (v228)
              {
                v229 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v410.__r_.__value_.__r.__words[2], v228);
                v223 = v410.__r_.__value_.__l.__size_;
                v220 = (MIL::Fp16 *)v410.__r_.__value_.__r.__words[0];
              }
              else
              {
                v229 = 0;
              }
              v230 = &v229[2 * v226];
              *(_WORD *)v230 = v222;
              v224 = (std::string::size_type)(v230 + 2);
              while ((MIL::Fp16 *)v223 != v220)
              {
                v231 = *(_WORD *)(v223 - 2);
                v223 -= 2;
                *((_WORD *)v230 - 1) = v231;
                v230 -= 2;
              }
              v410.__r_.__value_.__r.__words[0] = (std::string::size_type)v230;
              v410.__r_.__value_.__l.__size_ = v224;
              v410.__r_.__value_.__r.__words[2] = (std::string::size_type)&v229[2 * v228];
              if (v220)
                operator delete(v220);
            }
            else
            {
              *(_WORD *)v410.__r_.__value_.__l.__size_ = (_WORD)v220;
              v224 = v223 + 2;
            }
            v410.__r_.__value_.__l.__size_ = v224;
          }
        }
      }
    }
    v232 = (*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v191 + 32))(v191);
    v233 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v232 + 88))(v232);
    switch(v233)
    {
      case 14:
        v248 = (MIL::IRTensorValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v191 + 32))(v191);
        if (MIL::IRTensorValueType::IsScalar(v248))
        {
          v249 = (_BYTE *)MEMORY[0x20BCFEEB8](v191);
          std::string::basic_string[abi:ne180100]<0>(&__src, "post_scale");
          if (v410.__r_.__value_.__l.__size_ == v410.__r_.__value_.__r.__words[0])
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)v410.__r_.__value_.__l.__data_);
          LOBYTE(v251) = *v249;
          MIL::Fp16::FromFloat(Float, v252 * (float)v251);
          MIL::Builder::OperationBuilder::AddInputFloat16();
          v240 = v409;
          if (!v409)
            goto LABEL_468;
          v253 = (unint64_t *)&v409->__shared_owners_;
          do
            v242 = __ldaxr(v253);
          while (__stlxr(v242 - 1, v253));
        }
        else
        {
          Data = MIL::IRTensorValue::GetDataView<unsigned char>();
          v409 = v264;
          if (v264)
          {
            v265 = 0;
            v266 = 0;
            do
            {
              if (v266 >= (uint64_t)(v410.__r_.__value_.__l.__size_ - v410.__r_.__value_.__r.__words[0]) >> 1)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              MIL::Fp16::GetFloat((MIL::Fp16 *)(v410.__r_.__value_.__r.__words[0] + v265));
              v268 = v267;
              v269 = (MIL::Fp16 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(&Data, v266);
              LOBYTE(v270) = *(_BYTE *)v269;
              v271 = MIL::Fp16::FromFloat(v269, v268 * (float)v270);
              *(_WORD *)(v410.__r_.__value_.__r.__words[0] + 2 * v266++) = v271;
              v265 += 2;
            }
            while (v266 < (unint64_t)v409);
          }
          std::string::basic_string[abi:ne180100]<0>(&__src, "post_scale");
          MIL::Builder::OperationBuilder::AddInputFloat16();
          v240 = v406;
          if (!v406)
            goto LABEL_468;
          v272 = (unint64_t *)&v406->__shared_owners_;
          do
            v242 = __ldaxr(v272);
          while (__stlxr(v242 - 1, v272));
        }
        break;
      case 9:
        v243 = (MIL::IRTensorValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v191 + 32))(v191);
        if (MIL::IRTensorValueType::IsScalar(v243))
        {
          v244 = (char *)MEMORY[0x20BCFEE94](v191);
          std::string::basic_string[abi:ne180100]<0>(&__src, "post_scale");
          if (v410.__r_.__value_.__l.__size_ == v410.__r_.__value_.__r.__words[0])
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          v245 = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)v410.__r_.__value_.__l.__data_);
          MIL::Fp16::FromFloat(v245, v246 * (float)*v244);
          MIL::Builder::OperationBuilder::AddInputFloat16();
          v240 = v409;
          if (!v409)
            goto LABEL_468;
          v247 = (unint64_t *)&v409->__shared_owners_;
          do
            v242 = __ldaxr(v247);
          while (__stlxr(v242 - 1, v247));
        }
        else
        {
          Data = MIL::IRTensorValue::GetDataView<signed char>();
          v409 = v256;
          if (v256)
          {
            v257 = 0;
            v258 = 0;
            do
            {
              if (v258 >= (uint64_t)(v410.__r_.__value_.__l.__size_ - v410.__r_.__value_.__r.__words[0]) >> 1)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              MIL::Fp16::GetFloat((MIL::Fp16 *)(v410.__r_.__value_.__r.__words[0] + v257));
              v260 = v259;
              v261 = (MIL::Fp16 *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&Data, v258);
              v262 = MIL::Fp16::FromFloat(v261, v260 * (float)*(char *)v261);
              *(_WORD *)(v410.__r_.__value_.__r.__words[0] + 2 * v258++) = v262;
              v257 += 2;
            }
            while (v258 < (unint64_t)v409);
          }
          std::string::basic_string[abi:ne180100]<0>(&__src, "post_scale");
          MIL::Builder::OperationBuilder::AddInputFloat16();
          v240 = v406;
          if (!v406)
            goto LABEL_468;
          v263 = (unint64_t *)&v406->__shared_owners_;
          do
            v242 = __ldaxr(v263);
          while (__stlxr(v242 - 1, v263));
        }
        break;
      case 4:
        v234 = (MIL::IRTensorValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v191 + 32))(v191);
        if (MIL::IRTensorValueType::IsScalar(v234))
        {
          v235 = (MIL::Fp16 *)MEMORY[0x20BCFEE7C](v191);
          std::string::basic_string[abi:ne180100]<0>(&__src, "post_scale");
          if (v410.__r_.__value_.__l.__size_ == v410.__r_.__value_.__r.__words[0])
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          MIL::Fp16::GetFloat((MIL::Fp16 *)v410.__r_.__value_.__l.__data_);
          v237 = v236;
          v238 = (MIL::Fp16 *)MIL::Fp16::GetFloat(v235);
          MIL::Fp16::FromFloat(v238, v237 * v239);
          MIL::Builder::OperationBuilder::AddInputFloat16();
          v240 = v409;
          if (!v409)
            goto LABEL_468;
          v241 = (unint64_t *)&v409->__shared_owners_;
          do
            v242 = __ldaxr(v241);
          while (__stlxr(v242 - 1, v241));
        }
        else
        {
          Data = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v409 = v273;
          if (v273)
          {
            v274 = 0;
            v275 = 0;
            do
            {
              if (v275 >= (uint64_t)(v410.__r_.__value_.__l.__size_ - v410.__r_.__value_.__r.__words[0]) >> 1)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              MIL::Fp16::GetFloat((MIL::Fp16 *)(v410.__r_.__value_.__r.__words[0] + v274));
              v277 = v276;
              v278 = (MIL::Fp16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&Data, v275);
              v279 = (MIL::Fp16 *)MIL::Fp16::GetFloat(v278);
              v281 = MIL::Fp16::FromFloat(v279, v277 * v280);
              *(_WORD *)(v410.__r_.__value_.__r.__words[0] + 2 * v275++) = v281;
              v274 += 2;
            }
            while (v275 < (unint64_t)v409);
          }
          std::string::basic_string[abi:ne180100]<0>(&__src, "post_scale");
          MIL::Builder::OperationBuilder::AddInputFloat16();
          v240 = v406;
          if (!v406)
            goto LABEL_468;
          v282 = (unint64_t *)&v406->__shared_owners_;
          do
            v242 = __ldaxr(v282);
          while (__stlxr(v242 - 1, v282));
        }
        break;
      default:
        v254 = "Unsupported scale data type, must be one of [fp16, int8, uint8]";
        v255 = 11;
LABEL_471:
        *(_DWORD *)v315 = v255;
        v283 = (void **)(v315 + 8);
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v315 + 8), v254);
        if (v410.__r_.__value_.__r.__words[0])
        {
          v410.__r_.__value_.__l.__size_ = v410.__r_.__value_.__r.__words[0];
          operator delete(v410.__r_.__value_.__l.__data_);
        }
        if (!*(_DWORD *)v315)
        {
          if (*(char *)(v315 + 31) < 0)
            operator delete(*v283);
          v284 = v402;
          Output = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v402);
          v286 = MIL::Builder::Variable::GetName(Output);
          if (*(char *)(v286 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v410, *(const std::string::value_type **)v286, *(_QWORD *)(v286 + 8));
          }
          else
          {
            v287 = *(_OWORD *)v286;
            v410.__r_.__value_.__r.__words[2] = *(_QWORD *)(v286 + 16);
            *(_OWORD *)&v410.__r_.__value_.__l.__data_ = v287;
          }
          if ((v410.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v288 = HIBYTE(v410.__r_.__value_.__r.__words[2]);
          else
            v288 = v410.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&__src, v288 + 6);
          if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_src = &__src;
          else
            p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
          if (v288)
          {
            if ((v410.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v290 = &v410;
            else
              v290 = (std::string *)v410.__r_.__value_.__r.__words[0];
            memmove(p_src, v290, v288);
          }
          strcpy((char *)p_src + v288, "_fused");
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v318, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
          else
            v318 = __src;
          v291 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v284);
          MIL::Builder::Variable::TryGetType(v291);
          MIL::Builder::OperationBuilder::AddOutput();
          v292 = v319;
          if (v319)
          {
            v293 = (unint64_t *)&v319->__shared_owners_;
            do
              v294 = __ldaxr(v293);
            while (__stlxr(v294 - 1, v293));
            if (!v294)
            {
              ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
              std::__shared_weak_count::__release_weak(v292);
            }
          }
          if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v318.__r_.__value_.__l.__data_);
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v317, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
          else
            v317 = __src;
          MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
          if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v317.__r_.__value_.__l.__data_);
          v295 = *a1;
          v296 = a1[1];
          while (v295 != v296)
          {
            v297 = (std::__shared_weak_count *)v295[1];
            Data = *v295;
            v409 = v297;
            if (v297)
            {
              v298 = (unint64_t *)&v297->__shared_owners_;
              do
                v299 = __ldxr(v298);
              while (__stxr(v299 + 1, v298));
              v316 = v297;
              do
                v300 = __ldxr(v298);
              while (__stxr(v300 + 1, v298));
            }
            else
            {
              v316 = 0;
            }
            MIL::Builder::BlockBuilder::RemoveOperation();
            if (v316)
            {
              v301 = (unint64_t *)&v316->__shared_owners_;
              do
                v302 = __ldaxr(v301);
              while (__stlxr(v302 - 1, v301));
              if (!v302)
              {
                ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
                std::__shared_weak_count::__release_weak(v316);
              }
            }
            v303 = v409;
            if (v409)
            {
              v304 = (unint64_t *)&v409->__shared_owners_;
              do
                v305 = __ldaxr(v304);
              while (__stlxr(v305 - 1, v304));
              if (!v305)
              {
                ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                std::__shared_weak_count::__release_weak(v303);
              }
            }
            v295 += 2;
          }
          *(_DWORD *)v315 = 0;
          std::string::basic_string[abi:ne180100]<0>(v283, (char *)&unk_2069A5097);
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__src.__r_.__value_.__l.__data_);
          if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v410.__r_.__value_.__l.__data_);
        }
        v306 = v401;
        if (v401)
        {
          v307 = (unint64_t *)&v401->__shared_owners_;
          do
            v308 = __ldaxr(v307);
          while (__stlxr(v308 - 1, v307));
          if (!v308)
          {
            ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
            std::__shared_weak_count::__release_weak(v306);
          }
        }
        v309 = v403;
        if (v403)
        {
          v310 = (unint64_t *)&v403->__shared_owners_;
          do
            v311 = __ldaxr(v310);
          while (__stlxr(v311 - 1, v310));
          if (!v311)
          {
            ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
            std::__shared_weak_count::__release_weak(v309);
          }
        }
        v312 = v405;
        if (v405)
        {
          v313 = (unint64_t *)&v405->__shared_owners_;
          do
            v314 = __ldaxr(v313);
          while (__stlxr(v314 - 1, v313));
          if (!v314)
          {
            ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
            std::__shared_weak_count::__release_weak(v312);
          }
        }
        return;
    }
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
LABEL_468:
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__src.__r_.__value_.__l.__data_);
    v255 = 0;
    v254 = (char *)&unk_2069A5097;
    goto LABEL_471;
  }
  *(_DWORD *)a2 = 14;
  std::operator+<char>();
  v19 = std::string::append(&v410, "'s pattern");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 24) = *((_QWORD *)&v19->__r_.__value_.__l + 2);
  *(_OWORD *)(a2 + 8) = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v410.__r_.__value_.__l.__data_);
}

void sub_206948450(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  if (*(char *)(v1 - 161) < 0)
    operator delete(*(void **)(v1 - 184));
  v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(_QWORD *)(v1 - 136) = v3;
    operator delete(v3);
  }
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v1 - 248);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v1 - 232);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v1 - 216);
  _Unwind_Resume(a1);
}

void MilTranslator::Passes::FuseConvScale::~FuseConvScale(void **this)
{
  MilTranslator::Passes::Pass::~Pass(this);
  JUMPOUT(0x20BCFF140);
}

void MilTranslator::Passes::Pass::~Pass(void **this)
{
  *this = off_24BFEB6C8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

char *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void ANEMachineIR::H2022::Opsets::aneflowh2022Opset::Register(ANEMachineIR::H2022::Opsets::aneflowh2022Opset *this, MIL::MILContext *a2)
{
  ANEMachineIR::H2022::Opsets::aneflowh2022Opset *v3;
  ANEMachineIR::H2022::Opsets::aneflowh2022Opset *v4;
  ANEMachineIR::H2022::Opsets::aneflowh2022Opset *v5;
  void *__p[2];
  char v7;

  v7 = 12;
  strcpy((char *)__p, "aneflowh2022");
  v3 = (ANEMachineIR::H2022::Opsets::aneflowh2022Opset *)operator new();
  ANEMachineIR::H2022::Opsets::aneflowh2022Opset::aneflowh2022Opset(v3, this);
  v5 = v3;
  (*(void (**)(ANEMachineIR::H2022::Opsets::aneflowh2022Opset *, void **, ANEMachineIR::H2022::Opsets::aneflowh2022Opset **))(*(_QWORD *)this + 32))(this, __p, &v5);
  v4 = v5;
  v5 = 0;
  if (v4)
    (*(void (**)(ANEMachineIR::H2022::Opsets::aneflowh2022Opset *))(*(_QWORD *)v4 + 8))(v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_2069489DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MIL::IROpset *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18;

  v18 = a11;
  a11 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  std::unique_ptr<ANEMachineIR::H2021::Opsets::aneflowh2021Opset>::reset[abi:ne180100](&a10, 0);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const char *ANEMachineIR::H2022::Opsets::aneflowh2022Opset::GetOpsetName(ANEMachineIR::H2022::Opsets::aneflowh2022Opset *this)
{
  return "aneflowh2022";
}

ANEMachineIR::H2022::Opsets::aneflowh2022Opset *ANEMachineIR::H2022::Opsets::aneflowh2022Opset::aneflowh2022Opset(ANEMachineIR::H2022::Opsets::aneflowh2022Opset *this, MIL::MILContext *a2)
{
  _BYTE v4[40];

  ANEMachineIR::H2022::Opsets::aneflowh2022Opset::GetOps(a2, (uint64_t)v4);
  MIL::IROpset::IROpset();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v4);
  *(_QWORD *)this = &off_24BFEC100;
  return this;
}

void sub_206948AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Opsets::aneflowh2022Opset::GetOps(ANEMachineIR::H2022::Opsets::aneflowh2022Opset *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  void *v80[2];
  char v81;
  void *v82[2];
  char v83;
  void *v84[2];
  char v85;
  void *v86[2];
  char v87;
  void *v88[2];
  char v89;
  void *v90[2];
  char v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  void *v96[2];
  char v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104[2];
  char v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110[2];
  char v111;
  void *v112[2];
  char v113;
  void *__p[2];
  char v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  void *v120[2];
  char v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  uint64_t v134;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v132, "base_ne_matmul");
  ANEMachineIR::H2022::BaseNeMatmul::Make(this, (uint64_t)v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "base_ne_matmul", &v134);
  v5 = v134;
  v134 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v133 < 0)
    operator delete(v132[0]);
  std::string::basic_string[abi:ne180100]<0>(v130, "const");
  ANEMachineIR::H2022::Const::Make((uint64_t)this, (uint64_t)v130);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "const", &v134);
  v6 = v134;
  v134 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v131 < 0)
    operator delete(v130[0]);
  std::string::basic_string[abi:ne180100]<0>(v128, "linear");
  ANEMachineIR::H2022::Linear::Make(this, (uint64_t)v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "linear", &v134);
  v7 = v134;
  v134 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v129 < 0)
    operator delete(v128[0]);
  std::string::basic_string[abi:ne180100]<0>(v126, "lrelu");
  ANEMachineIR::H2022::Lrelu::Make(this, (uint64_t)v126);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "lrelu", &v134);
  v8 = v134;
  v134 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v127 < 0)
    operator delete(v126[0]);
  std::string::basic_string[abi:ne180100]<0>(v124, "ne_activation");
  ANEMachineIR::H2022::NeActivation::Make(this, (uint64_t)v124, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_activation", &v134);
  v9 = v134;
  v134 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v125 < 0)
    operator delete(v124[0]);
  std::string::basic_string[abi:ne180100]<0>(v122, "ne_add");
  ANEMachineIR::H2022::NeAdd::Make(this, (uint64_t)v122, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_add", &v134);
  v10 = v134;
  v134 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v123 < 0)
    operator delete(v122[0]);
  std::string::basic_string[abi:ne180100]<0>(v120, "ne_avg_pool");
  ANEMachineIR::H2022::NeAvgPool::Make(this, (uint64_t)v120, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_avg_pool", &v134);
  v11 = v134;
  v134 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v121 < 0)
    operator delete(v120[0]);
  std::string::basic_string[abi:ne180100]<0>(v118, "ne_batch_matmul");
  ANEMachineIR::H2022::NeBatchMatmul::Make(this, (uint64_t)v118, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_batch_matmul", &v134);
  v12 = v134;
  v134 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v119 < 0)
    operator delete(v118[0]);
  std::string::basic_string[abi:ne180100]<0>(v116, "ne_conv");
  ANEMachineIR::H2022::NeConv::Make(this, (uint64_t)v116, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_conv", &v134);
  v13 = v134;
  v134 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v117 < 0)
    operator delete(v116[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ne_matmul");
  ANEMachineIR::H2022::NeMatmul::Make(this, (uint64_t)__p, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_matmul", &v134);
  v14 = v134;
  v134 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v115 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v112, "ne_max_pool");
  ANEMachineIR::H2022::NeMaxPool::Make(this, (uint64_t)v112, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_max_pool", &v134);
  v15 = v134;
  v134 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v113 < 0)
    operator delete(v112[0]);
  std::string::basic_string[abi:ne180100]<0>(v110, "ne_maximum");
  ANEMachineIR::H2022::NeMaximum::Make(this, (uint64_t)v110, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_maximum", &v134);
  v16 = v134;
  v134 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v111 < 0)
    operator delete(v110[0]);
  std::string::basic_string[abi:ne180100]<0>(v108, "ne_min_pool");
  ANEMachineIR::H2022::NeMinPool::Make(this, (uint64_t)v108, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_min_pool", &v134);
  v17 = v134;
  v134 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (v109 < 0)
    operator delete(v108[0]);
  std::string::basic_string[abi:ne180100]<0>(v106, "ne_minimum");
  ANEMachineIR::H2022::NeMinimum::Make(this, (uint64_t)v106, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_minimum", &v134);
  v18 = v134;
  v134 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v107 < 0)
    operator delete(v106[0]);
  std::string::basic_string[abi:ne180100]<0>(v104, "ne_mul");
  ANEMachineIR::H2022::NeMul::Make(this, (uint64_t)v104, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_mul", &v134);
  v19 = v134;
  v134 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (v105 < 0)
    operator delete(v104[0]);
  std::string::basic_string[abi:ne180100]<0>(v102, "ne_piecewise_v2");
  ANEMachineIR::H2022::NePiecewiseV2::Make(this, (uint64_t)v102, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_piecewise_v2", &v134);
  v20 = v134;
  v134 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (v103 < 0)
    operator delete(v102[0]);
  std::string::basic_string[abi:ne180100]<0>(v100, "ne_reduce");
  ANEMachineIR::H2022::NeReduce::Make(this, (uint64_t)v100, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_reduce", &v134);
  v21 = v134;
  v134 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (v101 < 0)
    operator delete(v100[0]);
  std::string::basic_string[abi:ne180100]<0>(v98, "ne_square");
  ANEMachineIR::H2022::NeSquare::Make(this, (uint64_t)v98, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_square", &v134);
  v22 = v134;
  v134 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (v99 < 0)
    operator delete(v98[0]);
  std::string::basic_string[abi:ne180100]<0>(v96, "pe_abs");
  ANEMachineIR::H2022::PeAbs::Make(this, (uint64_t)v96, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_abs", &v134);
  v23 = v134;
  v134 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (v97 < 0)
    operator delete(v96[0]);
  std::string::basic_string[abi:ne180100]<0>(v94, "pe_add");
  ANEMachineIR::H2022::PeAdd::Make(this, (uint64_t)v94, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_add", &v134);
  v24 = v134;
  v134 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (v95 < 0)
    operator delete(v94[0]);
  std::string::basic_string[abi:ne180100]<0>(v92, "pe_add_abs");
  ANEMachineIR::H2022::PeAddAbs::Make(this, (uint64_t)v92, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_add_abs", &v134);
  v25 = v134;
  v134 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (v93 < 0)
    operator delete(v92[0]);
  std::string::basic_string[abi:ne180100]<0>(v90, "pe_add_mul");
  ANEMachineIR::H2022::PeAddMul::Make(this, (uint64_t)v90, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_add_mul", &v134);
  v26 = v134;
  v134 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (v91 < 0)
    operator delete(v90[0]);
  std::string::basic_string[abi:ne180100]<0>(v88, "pe_add_square");
  ANEMachineIR::H2022::PeAddSquare::Make(this, (uint64_t)v88, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_add_square", &v134);
  v27 = v134;
  v134 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (v89 < 0)
    operator delete(v88[0]);
  std::string::basic_string[abi:ne180100]<0>(v86, "pe_avg_pool");
  ANEMachineIR::H2022::PeAvgPool::Make(this, (uint64_t)v86, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_avg_pool", &v134);
  v28 = v134;
  v134 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (v87 < 0)
    operator delete(v86[0]);
  std::string::basic_string[abi:ne180100]<0>(v84, "pe_equal");
  ANEMachineIR::H2022::PeEqual::Make(this, (uint64_t)v84, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_equal", &v134);
  v29 = v134;
  v134 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (v85 < 0)
    operator delete(v84[0]);
  std::string::basic_string[abi:ne180100]<0>(v82, "pe_greater");
  ANEMachineIR::H2022::PeGreater::Make(this, (uint64_t)v82, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_greater", &v134);
  v30 = v134;
  v134 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (v83 < 0)
    operator delete(v82[0]);
  std::string::basic_string[abi:ne180100]<0>(v80, "pe_greater_equal");
  ANEMachineIR::H2022::PeGreaterEqual::Make(this, (uint64_t)v80, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_greater_equal", &v134);
  v31 = v134;
  v134 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  if (v81 < 0)
    operator delete(v80[0]);
  std::string::basic_string[abi:ne180100]<0>(v78, "pe_less");
  ANEMachineIR::H2022::PeLess::Make(this, (uint64_t)v78, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_less", &v134);
  v32 = v134;
  v134 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  if (v79 < 0)
    operator delete(v78[0]);
  std::string::basic_string[abi:ne180100]<0>(v76, "pe_less_equal");
  ANEMachineIR::H2022::PeLessEqual::Make(this, (uint64_t)v76, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_less_equal", &v134);
  v33 = v134;
  v134 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  if (v77 < 0)
    operator delete(v76[0]);
  std::string::basic_string[abi:ne180100]<0>(v74, "pe_max_pool");
  ANEMachineIR::H2022::PeMaxPool::Make(this, (uint64_t)v74, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_max_pool", &v134);
  v34 = v134;
  v134 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if (v75 < 0)
    operator delete(v74[0]);
  std::string::basic_string[abi:ne180100]<0>(v72, "pe_maximum");
  ANEMachineIR::H2022::PeMaximum::Make(this, (uint64_t)v72, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_maximum", &v134);
  v35 = v134;
  v134 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (v73 < 0)
    operator delete(v72[0]);
  std::string::basic_string[abi:ne180100]<0>(v70, "pe_min_pool");
  ANEMachineIR::H2022::PeMinPool::Make(this, (uint64_t)v70, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_min_pool", &v134);
  v36 = v134;
  v134 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  if (v71 < 0)
    operator delete(v70[0]);
  std::string::basic_string[abi:ne180100]<0>(v68, "pe_minimum");
  ANEMachineIR::H2022::PeMinimum::Make(this, (uint64_t)v68, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_minimum", &v134);
  v37 = v134;
  v134 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (v69 < 0)
    operator delete(v68[0]);
  std::string::basic_string[abi:ne180100]<0>(v66, "pe_mul");
  ANEMachineIR::H2022::PeMul::Make(this, (uint64_t)v66, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_mul", &v134);
  v38 = v134;
  v134 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (v67 < 0)
    operator delete(v66[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "pe_not_equal");
  ANEMachineIR::H2022::PeNotEqual::Make(this, (uint64_t)v64, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_not_equal", &v134);
  v39 = v134;
  v134 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "pe_reduce");
  ANEMachineIR::H2022::PeReduce::Make(this, (uint64_t)v62, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_reduce", &v134);
  v40 = v134;
  v134 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v60, "pe_square");
  ANEMachineIR::H2022::PeSquare::Make(this, (uint64_t)v60, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_square", &v134);
  v41 = v134;
  v134 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  if (v61 < 0)
    operator delete(v60[0]);
  std::string::basic_string[abi:ne180100]<0>(v58, "relu");
  ANEMachineIR::H2022::Relu::Make(this, (uint64_t)v58);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "relu", &v134);
  v42 = v134;
  v134 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  if (v59 < 0)
    operator delete(v58[0]);
  std::string::basic_string[abi:ne180100]<0>(v56, "reshape");
  ANEMachineIR::H2022::Reshape::Make(this, (uint64_t)v56, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "reshape", &v134);
  v43 = v134;
  v134 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  if (v57 < 0)
    operator delete(v56[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "sigmoid");
  ANEMachineIR::H2022::Sigmoid::Make(this, (uint64_t)v54);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "sigmoid", &v134);
  v44 = v134;
  v134 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  if (v55 < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v52, "sqrt");
  ANEMachineIR::H2022::Sqrt::Make(this, (uint64_t)v52);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "sqrt", &v134);
  v45 = v134;
  v134 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  if (v53 < 0)
    operator delete(v52[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "tanh");
  ANEMachineIR::H2022::Tanh::Make(this, (uint64_t)v50);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "tanh", &v134);
  v46 = v134;
  v134 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v48, "transpose");
  ANEMachineIR::H2022::Transpose::Make(this, (uint64_t)v48, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "transpose", &v134);
  v47 = v134;
  v134 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  if (v49 < 0)
    operator delete(v48[0]);
}

void sub_206949A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(_QWORD *)(v15 - 40);
  *(_QWORD *)(v15 - 40) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a14 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v14);
  _Unwind_Resume(a1);
}

const char *ANEMachineIR::H2022::Opsets::aneflowh2022Opset::GetName(ANEMachineIR::H2022::Opsets::aneflowh2022Opset *this)
{
  return "aneflowh2022";
}

void ANEMachineIR::H2022::Opsets::aneflowh2022Opset::~aneflowh2022Opset(ANEMachineIR::H2022::Opsets::aneflowh2022Opset *this)
{
  MIL::IROpset::~IROpset(this);
  JUMPOUT(0x20BCFF140);
}

uint64_t ANEMachineIR::Validators::ValidatePostRightShiftRange@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::Validators::BinaryPointFormatOffsets(ANEMachineIR::Validators *this, int a2)
{
  int v2;
  unsigned int v3;
  int v4;

  if ((_DWORD)this)
    v2 = 10;
  else
    v2 = 0;
  if ((_DWORD)this)
    v3 = 0;
  else
    v3 = 10;
  if (a2)
    v4 = v2 + 10;
  else
    v4 = v2;
  if (!a2)
    v3 += 10;
  return v4 & 0xFFFFE1FF | (((v3 >> 1) & 0xF) << 9);
}

BOOL ANEMachineIR::Validators::NeuralEngineComputedBinaryPointAndShiftLegal(ANEMachineIR::Validators *this, uint64_t a2, uint64_t a3)
{
  return (uint64_t)this + a2 + a3 < 32;
}

BOOL ANEMachineIR::Validators::NeuralEngineAccumulatorInitLegal(__int16 a1, char a2, char a3, char a4)
{
  float v4;
  float v5;
  float v6;
  double v7;
  double v8;
  __int16 v10;

  v10 = a1;
  v4 = (float)(1 << (a3 + a2 + a4));
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v10);
  v6 = v5 * v4;
  v7 = floor(v6 + 0.5);
  if (v6 >= 0.0)
    v8 = v7;
  else
    v8 = -v7;
  return (unint64_t)((uint64_t)v8 + 0x7FFFFFFF) < 0xFFFFFFFF;
}

BOOL ANEMachineIR::Validators::NeuralEngineBiasShifterExponentLegal(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = -14;
  if (((a1 >> 10) & 0x1F) != 0)
    v4 = ((a1 >> 10) & 0x1F) - 15;
  return (unint64_t)(a3 + a2 - a4 + 0x80000000 + v4) < 0x8000000C;
}

void MilTranslator::OpTranslator::TranslateElementWiseBinary(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  std::string *v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  MIL::IRValueType *ParameterType;
  ANEMachineIR::Utils *v15;
  MIL::IRValueType *v16;
  ANEMachineIR::Utils *v17;
  uint64_t *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  MIL::IRValueType *Type;
  ANEMachineIR::Utils *v25;
  const MIL::IRTensorValueType *v26;
  const MIL::IRTensorValueType *v27;
  const MIL::IRTensorValueType *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Name;
  __int128 v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  void *v38;
  MIL::Fp16 *IsTransposeRequired;
  __int128 *v40;
  std::string::size_type *LocationPtr;
  uint64_t v42;
  std::string *v43;
  __int128 v44;
  void **v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *size;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::string v64;
  std::__shared_weak_count *v65;
  std::string v66;
  void *v67;
  char v68;
  std::__shared_weak_count *v69;
  std::string v70;
  void *v71;
  char v72;
  std::__shared_weak_count *v73;
  std::string v74;
  void *v75[2];
  unsigned __int8 v76;
  std::string v77;
  std::string v78;
  std::string v79;
  int v80;
  char v81;
  std::string v82;
  void *__p;
  char v84;
  char v85;
  void *v86;
  void *v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  void *v93;
  char v94;
  char v95;
  std::string __str;
  void *v97[3];
  void *v98[3];
  void *v99[3];
  std::vector<int> v100;
  std::string __s;
  int v102;
  char v103;
  void *v104;
  _BYTE *v105;
  void *v106[3];
  void *v107[4];
  std::__shared_weak_count *v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;

  v6 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v112.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v7;
  }
  {
    *(_DWORD *)a3 = 4;
    std::operator+<char>();
    v9 = std::string::append(&v82, "' not implemented");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 24) = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)(a3 + 8) = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_138;
    v11 = (void *)v82.__r_.__value_.__r.__words[0];
    goto LABEL_137;
  }
  v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
  if ((char)v8[63] < 0)
    std::string::__init_copy_ctor_external(&v111, *((const std::string::value_type **)v8 + 5), *((_QWORD *)v8 + 6));
  else
    v111 = *(std::string *)(v8 + 40);
  std::string::basic_string[abi:ne180100]<0>(&v82, "x");
  v12 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, _QWORD))(*(_QWORD *)a2 + 120))(a2, &v82, 0);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v82, "y");
  v13 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, _QWORD))(*(_QWORD *)a2 + 120))(a2, &v82, 0);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v82, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v15 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v82, "y");
  v16 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v17 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v16);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v82.__r_.__value_.__l.__data_);
    if (!v12)
      goto LABEL_27;
  }
  else if (!v12)
  {
    goto LABEL_27;
  }
  if (v13)
  {
    MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, v12, v15, &v110);
    MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, v13, v17, &v109);
    v18 = (uint64_t *)(*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 176))(a2);
    v19 = *v18;
    if (v18[1] == *v18)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v21 = *(void **)v19;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    v107[3] = v21;
    v108 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType((MIL::IRNamedValueType *)v21);
    v25 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
    ANEMachineIR::Utils::GetStaticTensorShape(v15, v26, (uint64_t)v107);
    ANEMachineIR::Utils::GetStaticTensorShape(v17, v27, (uint64_t)v106);
    ANEMachineIR::Utils::GetStaticTensorShape(v25, v28, (uint64_t)&v104);
    v29 = (_QWORD *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)v15 + 96))(v15);
    MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, v12, (uint64_t)(v29[1] - *v29) >> 3, (uint64_t)&__s);
    MilTranslator::OpTranslator::GetTransposeOpParamPerm((v105 - (_BYTE *)v104) >> 3, (uint64_t)&__s, &v100);
    MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v107, (unsigned int **)&v100, v99);
    MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v106, (unsigned int **)&v100, v98);
    MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)&v104, (unsigned int **)&v100, v97);
    (*(void (**)(ANEMachineIR::Utils *))(*(_QWORD *)v15 + 88))(v15);
    v30 = MIL::IRTensorValueType::Make();
    (*(void (**)(ANEMachineIR::Utils *))(*(_QWORD *)v17 + 88))(v17);
    v31 = MIL::IRTensorValueType::Make();
    (*(void (**)(ANEMachineIR::Utils *))(*(_QWORD *)v25 + 88))(v25);
    v32 = MIL::IRTensorValueType::Make();
    Name = MIL::IRNamedValueType::GetName((MIL::IRNamedValueType *)v21);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
    }
    else
    {
      v34 = *(_OWORD *)Name;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v34;
    }
    IsTransposeRequired = (MIL::Fp16 *)MilTranslator::OpTranslator::IsTransposeRequired(&v100);
    if ((_DWORD)IsTransposeRequired)
    {
      std::string::append(&__str, "_channel_last");
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v79, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        v79 = __s;
      v80 = v102;
      v81 = v103;
      std::string::operator=(&v79, &__str);
      v40 = (__int128 *)MIL::IRNamedValueType::GetName((MIL::IRNamedValueType *)v21);
      std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&v82, v40, (__int128 *)&v79);
      IsTransposeRequired = (MIL::Fp16 *)std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>((uint64_t)this + 296, (unsigned __int8 *)&v82, (__int128 *)&v82);
      if (v84 < 0)
        operator delete(__p);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
    }
    LODWORD(v82.__r_.__value_.__l.__data_) = 1065353216;
    v82.__r_.__value_.__s.__data_[4] = 1;
    LODWORD(v82.__r_.__value_.__r.__words[1]) = 1065353216;
    v82.__r_.__value_.__s.__data_[12] = 1;
    LOWORD(v82.__r_.__value_.__r.__words[2]) = MIL::Fp16::FromFloat(IsTransposeRequired, 1.0);
    v82.__r_.__value_.__s.__data_[18] = 1;
    LOBYTE(__p) = 0;
    v85 = 0;
    LOBYTE(v86) = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    LOBYTE(v93) = 0;
    v95 = 0;
    LocationPtr = (std::string::size_type *)MIL::IRObject::GetLocationPtr(a2);
    ANEMachineIR::Validators::ValidatePeElementWiseBinary(LocationPtr, (uint64_t)&v111, v30, v31, v32, (MIL::ValidationResult *)&v79);
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v79) & 1) != 0)
    {
      MEMORY[0x20BCFEAEC](&v79);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v74, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      else
        v74 = v111;
      MilTranslator::OpTranslator::AddOperation((uint64_t)this);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v71, "x");
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v70, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
      else
        v70 = v110;
      MIL::Builder::OperationBuilder::AddInput();
      v49 = v73;
      if (v73)
      {
        v50 = (unint64_t *)&v73->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (v72 < 0)
        operator delete(v71);
      std::string::basic_string[abi:ne180100]<0>(&v67, "y");
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v66, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
      else
        v66 = v109;
      MIL::Builder::OperationBuilder::AddInput();
      v52 = v69;
      if (v69)
      {
        v53 = (unint64_t *)&v69->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (v68 < 0)
        operator delete(v67);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v64, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v64 = __str;
      MIL::Builder::OperationBuilder::AddOutput();
      v55 = v65;
      if (v65)
      {
        v56 = (unint64_t *)&v65->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      *(_DWORD *)a3 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
      size = (std::__shared_weak_count *)v79.__r_.__value_.__l.__size_;
      if (v79.__r_.__value_.__l.__size_)
      {
        v59 = (unint64_t *)(v79.__r_.__value_.__l.__size_ + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
    else
    {
      *(_DWORD *)a3 = 6;
      v42 = a3 + 8;
      (*(void (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
      std::operator+<char>();
      v43 = std::string::append(&v77, "', violations: ");
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      MIL::MILResult::GetMessageWithLocation((MIL::MILResult *)&v79);
      if ((v76 & 0x80u) == 0)
        v45 = v75;
      else
        v45 = (void **)v75[0];
      if ((v76 & 0x80u) == 0)
        v46 = v76;
      else
        v46 = (std::string::size_type)v75[1];
      v47 = std::string::append(&v78, (const std::string::value_type *)v45, v46);
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      *(_QWORD *)(v42 + 16) = *((_QWORD *)&v47->__r_.__value_.__l + 2);
      *(_OWORD *)v42 = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if ((char)v76 < 0)
        operator delete(v75[0]);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      MEMORY[0x20BCFEAEC](&v79);
    }
    if (v95 && v94 < 0)
      operator delete(v93);
    if (v88 && v86)
    {
      v87 = v86;
      operator delete(v86);
    }
    if (v85 && v84 < 0)
      operator delete(__p);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v97[0])
    {
      v97[1] = v97[0];
      operator delete(v97[0]);
    }
    if (v98[0])
    {
      v98[1] = v98[0];
      operator delete(v98[0]);
    }
    if (v99[0])
    {
      v99[1] = v99[0];
      operator delete(v99[0]);
    }
    if (v100.__begin_)
    {
      v100.__end_ = v100.__begin_;
      operator delete(v100.__begin_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (v104)
    {
      v105 = v104;
      operator delete(v104);
    }
    if (v106[0])
    {
      v106[1] = v106[0];
      operator delete(v106[0]);
    }
    if (v107[0])
    {
      v107[1] = v107[0];
      operator delete(v107[0]);
    }
    v61 = v108;
    if (v108)
    {
      v62 = (unint64_t *)&v108->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_135;
    v38 = (void *)v110.__r_.__value_.__r.__words[0];
    goto LABEL_134;
  }
LABEL_27:
  *(_DWORD *)a3 = 4;
  v35 = a3 + 8;
  (*(void (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
  std::operator+<char>();
  v36 = std::string::append(&v82, "' does not handle immediate values");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  *(_QWORD *)(v35 + 16) = *((_QWORD *)&v36->__r_.__value_.__l + 2);
  *(_OWORD *)v35 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
  {
    v38 = (void *)v82.__r_.__value_.__r.__words[0];
LABEL_134:
    operator delete(v38);
  }
LABEL_135:
  if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_138;
  v11 = (void *)v111.__r_.__value_.__r.__words[0];
LABEL_137:
  operator delete(v11);
LABEL_138:
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
}

void sub_20694AF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;
  char a73;
  void *a74;
  uint64_t v74;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  ANEMachineIR::Validators::PeElementWiseBinaryParamValues::~PeElementWiseBinaryParamValues((void **)&a55);
  if (a73 < 0)
    operator delete(a72);
  v76 = a74;
  if (a74)
  {
    STACK[0x200] = (unint64_t)a74;
    operator delete(v76);
  }
  v77 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v77;
    operator delete(v77);
  }
  v78 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v78;
    operator delete(v78);
  }
  v79 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v79;
    operator delete(v79);
  }
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  v80 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v80;
    operator delete(v80);
  }
  v81 = *(void **)(v74 - 256);
  if (v81)
  {
    *(_QWORD *)(v74 - 248) = v81;
    operator delete(v81);
  }
  v82 = *(void **)(v74 - 232);
  if (v82)
  {
    *(_QWORD *)(v74 - 224) = v82;
    operator delete(v82);
  }
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v74 - 208);
  if (*(char *)(v74 - 169) < 0)
    operator delete(*(void **)(v74 - 192));
  if (*(char *)(v74 - 145) < 0)
    operator delete(*(void **)(v74 - 168));
  if (*(char *)(v74 - 121) < 0)
    operator delete(*(void **)(v74 - 144));
  if (*(char *)(v74 - 89) < 0)
    operator delete(*(void **)(v74 - 112));
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_20694B290(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_20694B2E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, a2, (__int128 *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_20694B360(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20694B5DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20694B650(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_20694B6E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20694B97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_20694BA1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_TranslateElementWiseBinary_cpp()
{
  uint64_t i;
  unsigned __int8 *v1;
  unsigned __int8 v3[48];
  _QWORD v4[6];
  _QWORD v5[7];

  v5[6] = *MEMORY[0x24BDAC8D0];
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v3, "add", "pe_add");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v4, "mul", "pe_mul");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[11],0>(v5, "maximum", "pe_maximum");
  for (i = 0; i != -18; i -= 6)
  {
    v1 = &v3[i * 8];
    if (SHIBYTE(v5[i + 5]) < 0)
      operator delete(*((void **)v1 + 15));
    if ((char)v1[119] < 0)
      operator delete(*((void **)v1 + 12));
  }
}

void sub_20694BB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  _GLOBAL__sub_I_TranslateElementWiseBinary_cpp_cold_1((uint64_t)&a28, (uint64_t)&a10);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_TranslateElementWiseBinary_cpp_cold_1(uint64_t a1, uint64_t a2)
{
  do
  {
    if (*(char *)(a1 - 1) < 0)
      operator delete(*(void **)(a1 - 24));
    if (*(char *)(a1 - 25) < 0)
      operator delete(*(void **)(a1 - 48));
    a1 -= 48;
  }
  while (a1 != a2);
}

void _GLOBAL__sub_I_TranslateElementWiseBinary_cpp_cold_2(uint64_t a1, uint64_t a2)
{
  do
  {
    if (*(char *)(a1 - 1) < 0)
      operator delete(*(void **)(a1 - 24));
    if (*(char *)(a1 - 25) < 0)
      operator delete(*(void **)(a1 - 48));
    a1 -= 48;
  }
  while (a1 != a2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateNeConv@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateNeConv(this, a2);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateNeConv@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateNeConv(this, a2);
}

uint64_t ANEMachineIR::H2020::Reshape::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  void **v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  MIL::Validation::TensorDTypeConstraints *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  void **v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  void **v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  void **v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  MIL::Validation::TensorRankValueConstraints *v80;
  void **v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  void **v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void **v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  uint64_t result;
  uint64_t v103;
  void **v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  void *v108;
  char v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  void **v112;
  std::__shared_weak_count *v113;
  void *v114[2];
  char v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  void *v120;
  char v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  char **v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  uint64_t v129;
  void *v130;
  void *v131;
  _QWORD *v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  char **v137;
  void *__p;
  void *v139;
  _QWORD *v140;
  void *v141;
  void *v142;
  _QWORD *v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  _BYTE v146[24];
  _BYTE *v147;
  _QWORD v148[3];
  MIL::Validation::TensorDTypeConstraints *v149;
  std::__shared_weak_count_vtbl *v150;
  uint64_t v151;
  uint64_t v152;
  void **v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char **v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v145 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v150 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v151 = (uint64_t)&v8->~__shared_weak_count_0;
  v152 = (uint64_t)&v8->~__shared_weak_count_0;
  v153 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v141 = v10;
  *v10 = v9;
  v142 = v10 + 1;
  v143 = v10 + 1;
  v154 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v139 = v12 + 1;
  v140 = v12 + 1;
  v155 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v130);
  v13 = v130;
  v130 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v144;
  if (v144)
  {
    p_shared_owners = (unint64_t *)&v144->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v139 = __p;
    operator delete(__p);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  if (v150)
  {
    v151 = (uint64_t)v150;
    operator delete(v150);
  }
  v137 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v153 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v137, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v153, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v137, 1uLL);
  v18 = v137;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v141 = v20;
  *v20 = v19;
  v142 = v20 + 1;
  v143 = v20 + 1;
  v150 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v139 = v22 + 1;
  v140 = v22 + 1;
  v151 = MIL::IRTensorValueType::MakeWithShape();
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v130 = v24;
  *v24 = v23;
  v131 = v24 + 1;
  v132 = v24 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v25 = v134;
  v135 = v134;
  if (v134)
  {
    v26 = (_QWORD *)operator new();
    v27 = v134;
    *v26 = &unk_24BFE7320;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v136 = v26;
  v134 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v157 = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v18 + 2), v34);
    v37 = &v35[16 * v31];
    *(_QWORD *)v37 = v25;
    *((_QWORD *)v37 + 1) = v26;
    v135 = 0;
    v136 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = (void **)v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = (void **)*v18;
      v38 = v18[1];
    }
    v30 = v37 + 16;
    *v18 = v40;
    v153 = v42;
    v154 = (uint64_t)v42;
    v18[1] = v37 + 16;
    v155 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v156 = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v153);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v135 = 0;
    v136 = 0;
  }
  v18[1] = v30;
  v44 = v134;
  v134 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = v133;
  if (v133)
  {
    v46 = (unint64_t *)&v133->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  if (__p)
  {
    v139 = __p;
    operator delete(__p);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  *(_OWORD *)v128 = *(_OWORD *)a2;
  v129 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v145;
  v126 = v145;
  if (v145)
  {
    v49 = (std::__shared_weak_count *)operator new();
    v49->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v49->__shared_owners_ = 0;
    v49->__shared_weak_owners_ = 0;
    v49[1].__vftable = (std::__shared_weak_count_vtbl *)v48;
  }
  else
  {
    v49 = 0;
  }
  v127 = v49;
  v145 = 0;
  v124 = v137;
  if (v137)
  {
    v50 = (std::__shared_weak_count *)operator new();
    v51 = v137;
    v50->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v50->__shared_owners_ = 0;
    v50->__shared_weak_owners_ = 0;
    v50[1].__vftable = (std::__shared_weak_count_vtbl *)v51;
  }
  else
  {
    v50 = 0;
  }
  v125 = v50;
  v137 = 0;
  v148[0] = &unk_24BFE7440;
  v148[1] = ANEMachineIR::H2020::Validators::ValidateReshape;
  v149 = (MIL::Validation::TensorDTypeConstraints *)v148;
  v147 = 0;
  MIL::IROperator::Make();
  v52 = v147;
  if (v147 == v146)
  {
    v53 = 4;
    v52 = v146;
  }
  else
  {
    if (!v147)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v149;
  if (v149 == (MIL::Validation::TensorDTypeConstraints *)v148)
  {
    v55 = 4;
    v54 = (MIL::Validation::TensorDTypeConstraints *)v148;
    goto LABEL_59;
  }
  if (v149)
  {
    v55 = 5;
LABEL_59:
    v54 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v54 + 8 * v55))();
  }
  if (v125)
  {
    v56 = &v125->__shared_owners_;
    do
      v57 = __ldaxr((unint64_t *)v56);
    while (__stlxr(v57 - 1, (unint64_t *)v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  if (v127)
  {
    v58 = &v127->__shared_owners_;
    do
      v59 = __ldaxr((unint64_t *)v58);
    while (__stlxr(v59 - 1, (unint64_t *)v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  if (SHIBYTE(v129) < 0)
    operator delete(v128[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v54);
  v60 = v153;
  std::string::basic_string[abi:ne180100]<0>(&v120, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v122 = v150;
  if (v150)
  {
    v61 = (std::__shared_weak_count *)operator new();
    v62 = v150;
    v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61[1].__vftable = v62;
  }
  else
  {
    v61 = 0;
  }
  v123 = v61;
  v150 = 0;
  std::string::basic_string[abi:ne180100]<0>(v118, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v60 + 3))(v60, &v122, v118);
  if (v119 < 0)
    operator delete(v118[0]);
  v63 = v123;
  if (v123)
  {
    v64 = (unint64_t *)&v123->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v150;
  v150 = 0;
  if (v66)
    (*((void (**)(std::__shared_weak_count_vtbl *))v66->~__shared_weak_count + 1))(v66);
  if (v121 < 0)
    operator delete(v120);
  v67 = v153;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v116 = v150;
  if (v150)
  {
    v68 = (std::__shared_weak_count *)operator new();
    v69 = v150;
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v69;
  }
  else
  {
    v68 = 0;
  }
  v117 = v68;
  v150 = 0;
  std::string::basic_string[abi:ne180100]<0>(v114, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v67 + 3))(v67, &v116, v114);
  if (v115 < 0)
    operator delete(v114[0]);
  v70 = v117;
  if (v117)
  {
    v71 = (unint64_t *)&v117->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v150;
  v150 = 0;
  if (v73)
    (*((void (**)(std::__shared_weak_count_vtbl *))v73->~__shared_weak_count + 1))(v73);
  v74 = *a3;
  v112 = v153;
  if (v153)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v76 = v153;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = (std::__shared_weak_count_vtbl *)v76;
  }
  else
  {
    v75 = 0;
  }
  v113 = v75;
  v153 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v74 + 56))(v74, &v112);
  v77 = v113;
  if (v113)
  {
    v78 = (unint64_t *)&v113->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (MIL::Validation::TensorRankValueConstraints *)v153;
  v153 = 0;
  if (v80)
    v80 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v80 + 8))(v80);
  MIL::Validation::TensorRankValueConstraints::Make(v80);
  v81 = v153;
  std::string::basic_string[abi:ne180100]<0>(&v108, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v110 = v150;
  if (v150)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = v150;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v111 = v82;
  v150 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))*v81 + 4))(v81, &v110, 0, 5);
  v84 = v111;
  if (v111)
  {
    v85 = (unint64_t *)&v111->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v150;
  v150 = 0;
  if (v87)
    (*((void (**)(std::__shared_weak_count_vtbl *))v87->~__shared_weak_count + 1))(v87);
  if (v109 < 0)
    operator delete(v108);
  v88 = v153;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v106 = v150;
  if (v150)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = v150;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v107 = v89;
  v150 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))*v88 + 4))(v88, &v106, 0, 5);
  v91 = v107;
  if (v107)
  {
    v92 = (unint64_t *)&v107->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v150;
  v150 = 0;
  if (v94)
    (*((void (**)(std::__shared_weak_count_vtbl *))v94->~__shared_weak_count + 1))(v94);
  v95 = *a3;
  v104 = v153;
  if (v153)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = v153;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = (std::__shared_weak_count_vtbl *)v97;
  }
  else
  {
    v96 = 0;
  }
  v105 = v96;
  v153 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v95 + 56))(v95, &v104);
  v98 = v105;
  if (v105)
  {
    v99 = (unint64_t *)&v105->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v153;
  v153 = 0;
  if (v101)
    (*((void (**)(void **))*v101 + 1))(v101);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v137, 0);
  result = v145;
  if (v145)
  {
    v103 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v145);
    return MEMORY[0x20BCFF140](v103, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20694C7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48)
{
  uint64_t *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;

  v51 = *(_QWORD *)(v49 - 112);
  *(_QWORD *)(v49 - 112) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *v48;
  *v48 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v49 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2020::Transpose::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  void **v50;
  char *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  char **v59;
  _QWORD *v60;
  uint64_t v61;
  MIL::Validation::TensorDTypeConstraints *v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  void **v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  void **v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count_vtbl *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void **v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  MIL::Validation::TensorRankValueConstraints *v88;
  void **v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  void **v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void **v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  MIL::Validation::TensorSymbolicShapeConstraints *v109;
  void **v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count_vtbl *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  void **v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void **v123;
  uint64_t result;
  uint64_t v125;
  void **v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  void *v130;
  char v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  void *v138;
  char v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  void **v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  void *v148[2];
  char v149;
  void *v150;
  char v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  char **v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  void *v158[2];
  uint64_t v159;
  void *v160;
  void *v161;
  _QWORD *v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  char **v167;
  std::__shared_weak_count *v168;
  void *__p;
  void *v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  _QWORD *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _QWORD v176[3];
  MIL::Validation::TensorDTypeConstraints *v177;
  void *v178;
  void *v179;
  _QWORD *v180;
  std::__shared_weak_count_vtbl *v181;
  uint64_t v182;
  uint64_t v183;
  void **v184;
  void **v185;
  uint64_t v186;
  char *v187;
  char **v188;
  uint64_t v189;

  v189 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v173 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v181 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v182 = (uint64_t)&v8->~__shared_weak_count_0;
  v183 = (uint64_t)&v8->~__shared_weak_count_0;
  v184 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v178 = v10;
  *v10 = v9;
  v179 = v10 + 1;
  v180 = v10 + 1;
  v185 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v170 = v12 + 1;
  v171 = v12 + 1;
  v186 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v160);
  v13 = v160;
  v160 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v172;
  if (v172)
  {
    p_shared_owners = (unint64_t *)&v172->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  if (v181)
  {
    v182 = (uint64_t)v181;
    operator delete(v181);
  }
  v17 = v173;
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = (void **)operator new(8uLL);
  v184 = v19;
  *v19 = (void *)v18;
  v185 = v19 + 1;
  v186 = (uint64_t)(v19 + 1);
  v178 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "perm", (uint64_t *)&v181);
  v21 = v181;
  v181 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = v168;
  if (v168)
  {
    v23 = (unint64_t *)&v168->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 48))(*((_QWORD *)v20 + 5), 1);
  v167 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  v184 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v167, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v184, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v167, 1uLL);
  v26 = v167;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v178 = v28;
  *v28 = v27;
  v179 = v28 + 1;
  v180 = v28 + 1;
  v181 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  __p = v30;
  *v30 = v29;
  v170 = v30 + 1;
  v171 = v30 + 1;
  v182 = MIL::IRTensorValueType::MakeWithShape();
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v160 = v32;
  *v32 = v31;
  v161 = v32 + 1;
  v162 = v32 + 1;
  v183 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v33 = v164;
  v165 = v164;
  if (v164)
  {
    v34 = (_QWORD *)operator new();
    v35 = v164;
    *v34 = &unk_24BFE7320;
    v34[1] = 0;
    v34[2] = 0;
    v34[3] = v35;
  }
  else
  {
    v34 = 0;
  }
  v166 = v34;
  v164 = 0;
  v36 = v26[2];
  v37 = v26[1];
  if (v37 >= v36)
  {
    v39 = (v37 - *v26) >> 4;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v41 = v36 - *v26;
    if (v41 >> 3 > v40)
      v40 = v41 >> 3;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
      v42 = 0xFFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    v188 = v26 + 2;
    v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v26 + 2), v42);
    v45 = &v43[16 * v39];
    *(_QWORD *)v45 = v33;
    *((_QWORD *)v45 + 1) = v34;
    v165 = 0;
    v166 = 0;
    v47 = *v26;
    v46 = v26[1];
    if (v46 == *v26)
    {
      v50 = (void **)v26[1];
      v48 = &v43[16 * v39];
    }
    else
    {
      v48 = &v43[16 * v39];
      do
      {
        v49 = *((_OWORD *)v46 - 1);
        v46 -= 16;
        *((_OWORD *)v48 - 1) = v49;
        v48 -= 16;
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0;
      }
      while (v46 != v47);
      v50 = (void **)*v26;
      v46 = v26[1];
    }
    v38 = v45 + 16;
    *v26 = v48;
    v184 = v50;
    v185 = v50;
    v26[1] = v45 + 16;
    v186 = (uint64_t)v46;
    v51 = v26[2];
    v26[2] = &v43[16 * v44];
    v187 = v51;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v184);
  }
  else
  {
    *(_QWORD *)v37 = v33;
    *((_QWORD *)v37 + 1) = v34;
    v38 = v37 + 16;
    v165 = 0;
    v166 = 0;
  }
  v26[1] = v38;
  v52 = v164;
  v164 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = v163;
  if (v163)
  {
    v54 = (unint64_t *)&v163->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  *(_OWORD *)v158 = *(_OWORD *)a2;
  v159 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v56 = (uint64_t)v173;
  v156 = (uint64_t)v173;
  if (v173)
  {
    v57 = (std::__shared_weak_count *)operator new();
    v57->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v57->__shared_owners_ = 0;
    v57->__shared_weak_owners_ = 0;
    v57[1].__vftable = (std::__shared_weak_count_vtbl *)v56;
  }
  else
  {
    v57 = 0;
  }
  v157 = v57;
  v173 = 0;
  v154 = v167;
  if (v167)
  {
    v58 = (std::__shared_weak_count *)operator new();
    v59 = v167;
    v58->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v58->__shared_owners_ = 0;
    v58->__shared_weak_owners_ = 0;
    v58[1].__vftable = (std::__shared_weak_count_vtbl *)v59;
  }
  else
  {
    v58 = 0;
  }
  v155 = v58;
  v167 = 0;
  v176[0] = &unk_24BFE7440;
  v176[1] = ANEMachineIR::H2020::Validators::ValidateTranspose;
  v177 = (MIL::Validation::TensorDTypeConstraints *)v176;
  v175 = 0;
  MIL::IROperator::Make();
  v60 = v175;
  if (v175 == v174)
  {
    v61 = 4;
    v60 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_64;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_64:
  v62 = v177;
  if (v177 == (MIL::Validation::TensorDTypeConstraints *)v176)
  {
    v63 = 4;
    v62 = (MIL::Validation::TensorDTypeConstraints *)v176;
    goto LABEL_68;
  }
  if (v177)
  {
    v63 = 5;
LABEL_68:
    v62 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v62 + 8 * v63))();
  }
  if (v155)
  {
    v64 = &v155->__shared_owners_;
    do
      v65 = __ldaxr((unint64_t *)v64);
    while (__stlxr(v65 - 1, (unint64_t *)v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  if (v157)
  {
    v66 = &v157->__shared_owners_;
    do
      v67 = __ldaxr((unint64_t *)v66);
    while (__stlxr(v67 - 1, (unint64_t *)v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  if (SHIBYTE(v159) < 0)
    operator delete(v158[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v62);
  v68 = v184;
  std::string::basic_string[abi:ne180100]<0>(&v150, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v152 = v181;
  if (v181)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v70 = v181;
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = v70;
  }
  else
  {
    v69 = 0;
  }
  v153 = v69;
  v181 = 0;
  std::string::basic_string[abi:ne180100]<0>(v148, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v68 + 3))(v68, &v152, v148);
  if (v149 < 0)
    operator delete(v148[0]);
  v71 = v153;
  if (v153)
  {
    v72 = (unint64_t *)&v153->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v181;
  v181 = 0;
  if (v74)
    (*((void (**)(std::__shared_weak_count_vtbl *))v74->~__shared_weak_count + 1))(v74);
  if (v151 < 0)
    operator delete(v150);
  v75 = v184;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v146 = v181;
  if (v181)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = v181;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v147 = v76;
  v181 = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v75 + 3))(v75, &v146, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v78 = v147;
  if (v147)
  {
    v79 = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v181;
  v181 = 0;
  if (v81)
    (*((void (**)(std::__shared_weak_count_vtbl *))v81->~__shared_weak_count + 1))(v81);
  v82 = *a3;
  v142 = v184;
  if (v184)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = v184;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = (std::__shared_weak_count_vtbl *)v84;
  }
  else
  {
    v83 = 0;
  }
  v143 = v83;
  v184 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v82 + 56))(v82, &v142);
  v85 = v143;
  if (v143)
  {
    v86 = (unint64_t *)&v143->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (MIL::Validation::TensorRankValueConstraints *)v184;
  v184 = 0;
  if (v88)
    v88 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v88 + 8))(v88);
  MIL::Validation::TensorRankValueConstraints::Make(v88);
  v89 = v184;
  std::string::basic_string[abi:ne180100]<0>(&v138, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v140 = v181;
  if (v181)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v181;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v141 = v90;
  v181 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v89 + 4))(v89, &v140, 1, 5);
  v92 = v141;
  if (v141)
  {
    v93 = (unint64_t *)&v141->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v181;
  v181 = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  if (v139 < 0)
    operator delete(v138);
  v96 = v184;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v136 = v181;
  if (v181)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v181;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v137 = v97;
  v181 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v96 + 4))(v96, &v136, 1, 5);
  v99 = v137;
  if (v137)
  {
    v100 = (unint64_t *)&v137->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v181;
  v181 = 0;
  if (v102)
    (*((void (**)(std::__shared_weak_count_vtbl *))v102->~__shared_weak_count + 1))(v102);
  v103 = *a3;
  v134 = v184;
  if (v184)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = v184;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = (std::__shared_weak_count_vtbl *)v105;
  }
  else
  {
    v104 = 0;
  }
  v135 = v104;
  v184 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v103 + 56))(v103, &v134);
  v106 = v135;
  if (v135)
  {
    v107 = (unint64_t *)&v135->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = (MIL::Validation::TensorSymbolicShapeConstraints *)v184;
  v184 = 0;
  if (v109)
    v109 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v109 + 8))(v109);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v109);
  v110 = v184;
  std::string::basic_string[abi:ne180100]<0>(&v130, "perm");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v132 = v181;
  if (v181)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = v181;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v133 = v111;
  v181 = 0;
  std::string::basic_string[abi:ne180100]<0>(v128, "R");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v110 + 3))(v110, &v132, 0, v128);
  if (v129 < 0)
    operator delete(v128[0]);
  v113 = v133;
  if (v133)
  {
    v114 = (unint64_t *)&v133->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v181;
  v181 = 0;
  if (v116)
    (*((void (**)(std::__shared_weak_count_vtbl *))v116->~__shared_weak_count + 1))(v116);
  if (v131 < 0)
    operator delete(v130);
  v117 = *a3;
  v126 = v184;
  if (v184)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v184;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = (std::__shared_weak_count_vtbl *)v119;
  }
  else
  {
    v118 = 0;
  }
  v127 = v118;
  v184 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v117 + 56))(v117, &v126);
  v120 = v127;
  if (v127)
  {
    v121 = (unint64_t *)&v127->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v184;
  v184 = 0;
  if (v123)
    (*((void (**)(void **))*v123 + 1))(v123);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v167, 0);
  result = (uint64_t)v173;
  if (v173)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v173);
    return MEMORY[0x20BCFF140](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20694D9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 112);
  *(_QWORD *)(v59 - 112) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ValidateConst(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t Attribute;
  uint64_t v5;
  ANEMachineIR::Utils *v6;
  const MIL::IRValueType *v7;
  ANEMachineIR::Utils *OutputType;
  const MIL::IRValueType *v9;
  MIL::IRValueType *v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  MIL::IRValueType *Type;
  uint64_t v36;
  MIL::IRValueType *v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  void *v55[2];
  char v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  void *__p[2];
  char v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void *v63[2];
  char v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  void *v67[2];
  char v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  void *v75;
  char v76;

  std::string::basic_string[abi:ne180100]<0>(&v75, "val");
  Attribute = MIL::IRObject::TryGetAttribute();
  v5 = Attribute;
  if ((v76 & 0x80000000) == 0)
  {
    if (Attribute)
      goto LABEL_3;
LABEL_16:
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v20 = (std::__shared_weak_count *)LocationPtr[1];
    v73 = *LocationPtr;
    v74 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v71, "Attribute val is undefined for const op");
    MEMORY[0x20BCFEAD4](a2, &v73, 315, v71);
    if (v72 < 0)
      operator delete(v71[0]);
    v16 = v74;
    if (v74)
    {
      v23 = (unint64_t *)&v74->__shared_owners_;
      do
        v18 = __ldaxr(v23);
      while (__stlxr(v18 - 1, v23));
      goto LABEL_60;
    }
    return;
  }
  operator delete(v75);
  if (!v5)
    goto LABEL_16;
LABEL_3:
  v6 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  if ((ANEMachineIR::Utils::IsStaticTensorType(v6, v7) & 1) != 0)
  {
    OutputType = (ANEMachineIR::Utils *)MIL::IROperation::GetOutputType(a1);
    if ((ANEMachineIR::Utils::IsStaticTensorType(OutputType, v9) & 1) != 0)
    {
      v10 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      v11 = MIL::IRValueType::AsTensorType(v10);
      if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 80))(v11) + 24))
      {
        v12 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
        v13 = (std::__shared_weak_count *)v12[1];
        v61 = *v12;
        v62 = v13;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "Aneflow dialect's const output does not support type attributes.");
        MEMORY[0x20BCFEAD4](a2, &v61, 315, __p);
        if (v60 < 0)
          operator delete(__p[0]);
        v16 = v62;
        if (v62)
        {
          v17 = (unint64_t *)&v62->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
LABEL_60:
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      else
      {
        v34 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 176))(a1);
        if (*(_QWORD *)(v34 + 8) == *(_QWORD *)v34)
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v34);
        v36 = MIL::IRValueType::AsTensorType(Type);
        v37 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
        v38 = MIL::IRValueType::AsTensorType(v37);
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 88))(v36);
        if (v39 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 88))(v38))
        {
          v40 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 96))(v36);
          v41 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 96))(v38);
          v42 = *v40;
          v43 = v40[1];
          if (v43 - *v40 == v41[1] - *v41)
          {
            if (v43 == v42)
            {
LABEL_51:
              MIL::ValidationResult::ValidationResult(a2);
              return;
            }
            v44 = v41;
            v45 = 0;
            while (1)
            {
              v46 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v42 + 8 * v45));
              v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 48))(v46);
              if (v45 >= (uint64_t)(v44[1] - *v44) >> 3)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v48 = v47;
              v49 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v44 + 8 * v45));
              if (v48 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 48))(v49))
                break;
              ++v45;
              v42 = *v40;
              if (v45 >= (v40[1] - *v40) >> 3)
                goto LABEL_51;
            }
          }
        }
        v50 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
        v51 = (std::__shared_weak_count *)v50[1];
        v57 = *v50;
        v58 = v51;
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        std::string::basic_string[abi:ne180100]<0>(v55, "Attribute val has incompatible type with operation output");
        MEMORY[0x20BCFEAD4](a2, &v57, 306, v55);
        if (v56 < 0)
          operator delete(v55[0]);
        v16 = v58;
        if (v58)
        {
          v54 = (unint64_t *)&v58->__shared_owners_;
          do
            v18 = __ldaxr(v54);
          while (__stlxr(v18 - 1, v54));
          goto LABEL_60;
        }
      }
    }
    else
    {
      v29 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      v30 = (std::__shared_weak_count *)v29[1];
      v65 = *v29;
      v66 = v30;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      std::string::basic_string[abi:ne180100]<0>(v63, "Output must be tensor with static shape");
      MEMORY[0x20BCFEAD4](a2, &v65, 315, v63);
      if (v64 < 0)
        operator delete(v63[0]);
      v16 = v66;
      if (v66)
      {
        v33 = (unint64_t *)&v66->__shared_owners_;
        do
          v18 = __ldaxr(v33);
        while (__stlxr(v18 - 1, v33));
        goto LABEL_60;
      }
    }
  }
  else
  {
    v24 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v25 = (std::__shared_weak_count *)v24[1];
    v69 = *v24;
    v70 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    std::string::basic_string[abi:ne180100]<0>(v67, "Attribute val must be tensor with static shape");
    MEMORY[0x20BCFEAD4](a2, &v69, 315, v67);
    if (v68 < 0)
      operator delete(v67[0]);
    v16 = v70;
    if (v70)
    {
      v28 = (unint64_t *)&v70->__shared_owners_;
      do
        v18 = __ldaxr(v28);
      while (__stlxr(v18 - 1, v28));
      goto LABEL_60;
    }
  }
}

void sub_20694E238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Validators::ValidateNeReduce(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeReduce(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeReduce(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeReduce(this, a2);
}

uint64_t ANEMachineIR::H2021::Reshape::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  void **v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  MIL::Validation::TensorDTypeConstraints *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  void **v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  void **v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  void **v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  MIL::Validation::TensorRankValueConstraints *v80;
  void **v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  void **v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void **v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  uint64_t result;
  uint64_t v103;
  void **v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  void *v108;
  char v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  void **v112;
  std::__shared_weak_count *v113;
  void *v114[2];
  char v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  void *v120;
  char v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  char **v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  uint64_t v129;
  void *v130;
  void *v131;
  _QWORD *v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  char **v137;
  void *__p;
  void *v139;
  _QWORD *v140;
  void *v141;
  void *v142;
  _QWORD *v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  _BYTE v146[24];
  _BYTE *v147;
  _QWORD v148[3];
  MIL::Validation::TensorDTypeConstraints *v149;
  std::__shared_weak_count_vtbl *v150;
  uint64_t v151;
  uint64_t v152;
  void **v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char **v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v145 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v150 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v151 = (uint64_t)&v8->~__shared_weak_count_0;
  v152 = (uint64_t)&v8->~__shared_weak_count_0;
  v153 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v141 = v10;
  *v10 = v9;
  v142 = v10 + 1;
  v143 = v10 + 1;
  v154 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v139 = v12 + 1;
  v140 = v12 + 1;
  v155 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v130);
  v13 = v130;
  v130 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v144;
  if (v144)
  {
    p_shared_owners = (unint64_t *)&v144->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v139 = __p;
    operator delete(__p);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  if (v150)
  {
    v151 = (uint64_t)v150;
    operator delete(v150);
  }
  v137 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v153 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v137, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v153, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v137, 1uLL);
  v18 = v137;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v141 = v20;
  *v20 = v19;
  v142 = v20 + 1;
  v143 = v20 + 1;
  v150 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v139 = v22 + 1;
  v140 = v22 + 1;
  v151 = MIL::IRTensorValueType::MakeWithShape();
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v130 = v24;
  *v24 = v23;
  v131 = v24 + 1;
  v132 = v24 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v25 = v134;
  v135 = v134;
  if (v134)
  {
    v26 = (_QWORD *)operator new();
    v27 = v134;
    *v26 = &unk_24BFE7320;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v136 = v26;
  v134 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v157 = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v18 + 2), v34);
    v37 = &v35[16 * v31];
    *(_QWORD *)v37 = v25;
    *((_QWORD *)v37 + 1) = v26;
    v135 = 0;
    v136 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = (void **)v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = (void **)*v18;
      v38 = v18[1];
    }
    v30 = v37 + 16;
    *v18 = v40;
    v153 = v42;
    v154 = (uint64_t)v42;
    v18[1] = v37 + 16;
    v155 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v156 = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v153);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v135 = 0;
    v136 = 0;
  }
  v18[1] = v30;
  v44 = v134;
  v134 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = v133;
  if (v133)
  {
    v46 = (unint64_t *)&v133->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  if (__p)
  {
    v139 = __p;
    operator delete(__p);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  *(_OWORD *)v128 = *(_OWORD *)a2;
  v129 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v145;
  v126 = v145;
  if (v145)
  {
    v49 = (std::__shared_weak_count *)operator new();
    v49->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v49->__shared_owners_ = 0;
    v49->__shared_weak_owners_ = 0;
    v49[1].__vftable = (std::__shared_weak_count_vtbl *)v48;
  }
  else
  {
    v49 = 0;
  }
  v127 = v49;
  v145 = 0;
  v124 = v137;
  if (v137)
  {
    v50 = (std::__shared_weak_count *)operator new();
    v51 = v137;
    v50->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v50->__shared_owners_ = 0;
    v50->__shared_weak_owners_ = 0;
    v50[1].__vftable = (std::__shared_weak_count_vtbl *)v51;
  }
  else
  {
    v50 = 0;
  }
  v125 = v50;
  v137 = 0;
  v148[0] = &unk_24BFE7440;
  v148[1] = ANEMachineIR::H2021::Validators::ValidateReshape;
  v149 = (MIL::Validation::TensorDTypeConstraints *)v148;
  v147 = 0;
  MIL::IROperator::Make();
  v52 = v147;
  if (v147 == v146)
  {
    v53 = 4;
    v52 = v146;
  }
  else
  {
    if (!v147)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v149;
  if (v149 == (MIL::Validation::TensorDTypeConstraints *)v148)
  {
    v55 = 4;
    v54 = (MIL::Validation::TensorDTypeConstraints *)v148;
    goto LABEL_59;
  }
  if (v149)
  {
    v55 = 5;
LABEL_59:
    v54 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v54 + 8 * v55))();
  }
  if (v125)
  {
    v56 = &v125->__shared_owners_;
    do
      v57 = __ldaxr((unint64_t *)v56);
    while (__stlxr(v57 - 1, (unint64_t *)v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  if (v127)
  {
    v58 = &v127->__shared_owners_;
    do
      v59 = __ldaxr((unint64_t *)v58);
    while (__stlxr(v59 - 1, (unint64_t *)v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  if (SHIBYTE(v129) < 0)
    operator delete(v128[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v54);
  v60 = v153;
  std::string::basic_string[abi:ne180100]<0>(&v120, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v122 = v150;
  if (v150)
  {
    v61 = (std::__shared_weak_count *)operator new();
    v62 = v150;
    v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61[1].__vftable = v62;
  }
  else
  {
    v61 = 0;
  }
  v123 = v61;
  v150 = 0;
  std::string::basic_string[abi:ne180100]<0>(v118, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v60 + 3))(v60, &v122, v118);
  if (v119 < 0)
    operator delete(v118[0]);
  v63 = v123;
  if (v123)
  {
    v64 = (unint64_t *)&v123->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v150;
  v150 = 0;
  if (v66)
    (*((void (**)(std::__shared_weak_count_vtbl *))v66->~__shared_weak_count + 1))(v66);
  if (v121 < 0)
    operator delete(v120);
  v67 = v153;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v116 = v150;
  if (v150)
  {
    v68 = (std::__shared_weak_count *)operator new();
    v69 = v150;
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v69;
  }
  else
  {
    v68 = 0;
  }
  v117 = v68;
  v150 = 0;
  std::string::basic_string[abi:ne180100]<0>(v114, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v67 + 3))(v67, &v116, v114);
  if (v115 < 0)
    operator delete(v114[0]);
  v70 = v117;
  if (v117)
  {
    v71 = (unint64_t *)&v117->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v150;
  v150 = 0;
  if (v73)
    (*((void (**)(std::__shared_weak_count_vtbl *))v73->~__shared_weak_count + 1))(v73);
  v74 = *a3;
  v112 = v153;
  if (v153)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v76 = v153;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = (std::__shared_weak_count_vtbl *)v76;
  }
  else
  {
    v75 = 0;
  }
  v113 = v75;
  v153 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v74 + 56))(v74, &v112);
  v77 = v113;
  if (v113)
  {
    v78 = (unint64_t *)&v113->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (MIL::Validation::TensorRankValueConstraints *)v153;
  v153 = 0;
  if (v80)
    v80 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v80 + 8))(v80);
  MIL::Validation::TensorRankValueConstraints::Make(v80);
  v81 = v153;
  std::string::basic_string[abi:ne180100]<0>(&v108, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v110 = v150;
  if (v150)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = v150;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v111 = v82;
  v150 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))*v81 + 4))(v81, &v110, 0, 5);
  v84 = v111;
  if (v111)
  {
    v85 = (unint64_t *)&v111->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v150;
  v150 = 0;
  if (v87)
    (*((void (**)(std::__shared_weak_count_vtbl *))v87->~__shared_weak_count + 1))(v87);
  if (v109 < 0)
    operator delete(v108);
  v88 = v153;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v106 = v150;
  if (v150)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = v150;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v107 = v89;
  v150 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))*v88 + 4))(v88, &v106, 0, 5);
  v91 = v107;
  if (v107)
  {
    v92 = (unint64_t *)&v107->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v150;
  v150 = 0;
  if (v94)
    (*((void (**)(std::__shared_weak_count_vtbl *))v94->~__shared_weak_count + 1))(v94);
  v95 = *a3;
  v104 = v153;
  if (v153)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = v153;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = (std::__shared_weak_count_vtbl *)v97;
  }
  else
  {
    v96 = 0;
  }
  v105 = v96;
  v153 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v95 + 56))(v95, &v104);
  v98 = v105;
  if (v105)
  {
    v99 = (unint64_t *)&v105->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v153;
  v153 = 0;
  if (v101)
    (*((void (**)(void **))*v101 + 1))(v101);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v137, 0);
  result = v145;
  if (v145)
  {
    v103 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v145);
    return MEMORY[0x20BCFF140](v103, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20694EEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48)
{
  uint64_t *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;

  v51 = *(_QWORD *)(v49 - 112);
  *(_QWORD *)(v49 - 112) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *v48;
  *v48 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v49 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::Transpose::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  void **v50;
  char *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  char **v59;
  _QWORD *v60;
  uint64_t v61;
  MIL::Validation::TensorDTypeConstraints *v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  void **v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  void **v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count_vtbl *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void **v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  MIL::Validation::TensorRankValueConstraints *v88;
  void **v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  void **v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void **v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  MIL::Validation::TensorSymbolicShapeConstraints *v109;
  void **v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count_vtbl *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  void **v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void **v123;
  uint64_t result;
  uint64_t v125;
  void **v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  void *v130;
  char v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  void *v138;
  char v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  void **v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  void *v148[2];
  char v149;
  void *v150;
  char v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  char **v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  void *v158[2];
  uint64_t v159;
  void *v160;
  void *v161;
  _QWORD *v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  char **v167;
  std::__shared_weak_count *v168;
  void *__p;
  void *v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  _QWORD *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _QWORD v176[3];
  MIL::Validation::TensorDTypeConstraints *v177;
  void *v178;
  void *v179;
  _QWORD *v180;
  std::__shared_weak_count_vtbl *v181;
  uint64_t v182;
  uint64_t v183;
  void **v184;
  void **v185;
  uint64_t v186;
  char *v187;
  char **v188;
  uint64_t v189;

  v189 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v173 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v181 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v182 = (uint64_t)&v8->~__shared_weak_count_0;
  v183 = (uint64_t)&v8->~__shared_weak_count_0;
  v184 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v178 = v10;
  *v10 = v9;
  v179 = v10 + 1;
  v180 = v10 + 1;
  v185 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v170 = v12 + 1;
  v171 = v12 + 1;
  v186 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v160);
  v13 = v160;
  v160 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v172;
  if (v172)
  {
    p_shared_owners = (unint64_t *)&v172->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  if (v181)
  {
    v182 = (uint64_t)v181;
    operator delete(v181);
  }
  v17 = v173;
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = (void **)operator new(8uLL);
  v184 = v19;
  *v19 = (void *)v18;
  v185 = v19 + 1;
  v186 = (uint64_t)(v19 + 1);
  v178 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "perm", (uint64_t *)&v181);
  v21 = v181;
  v181 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = v168;
  if (v168)
  {
    v23 = (unint64_t *)&v168->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 48))(*((_QWORD *)v20 + 5), 1);
  v167 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  v184 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v167, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v184, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v167, 1uLL);
  v26 = v167;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v178 = v28;
  *v28 = v27;
  v179 = v28 + 1;
  v180 = v28 + 1;
  v181 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  __p = v30;
  *v30 = v29;
  v170 = v30 + 1;
  v171 = v30 + 1;
  v182 = MIL::IRTensorValueType::MakeWithShape();
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v160 = v32;
  *v32 = v31;
  v161 = v32 + 1;
  v162 = v32 + 1;
  v183 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v33 = v164;
  v165 = v164;
  if (v164)
  {
    v34 = (_QWORD *)operator new();
    v35 = v164;
    *v34 = &unk_24BFE7320;
    v34[1] = 0;
    v34[2] = 0;
    v34[3] = v35;
  }
  else
  {
    v34 = 0;
  }
  v166 = v34;
  v164 = 0;
  v36 = v26[2];
  v37 = v26[1];
  if (v37 >= v36)
  {
    v39 = (v37 - *v26) >> 4;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v41 = v36 - *v26;
    if (v41 >> 3 > v40)
      v40 = v41 >> 3;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
      v42 = 0xFFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    v188 = v26 + 2;
    v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v26 + 2), v42);
    v45 = &v43[16 * v39];
    *(_QWORD *)v45 = v33;
    *((_QWORD *)v45 + 1) = v34;
    v165 = 0;
    v166 = 0;
    v47 = *v26;
    v46 = v26[1];
    if (v46 == *v26)
    {
      v50 = (void **)v26[1];
      v48 = &v43[16 * v39];
    }
    else
    {
      v48 = &v43[16 * v39];
      do
      {
        v49 = *((_OWORD *)v46 - 1);
        v46 -= 16;
        *((_OWORD *)v48 - 1) = v49;
        v48 -= 16;
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0;
      }
      while (v46 != v47);
      v50 = (void **)*v26;
      v46 = v26[1];
    }
    v38 = v45 + 16;
    *v26 = v48;
    v184 = v50;
    v185 = v50;
    v26[1] = v45 + 16;
    v186 = (uint64_t)v46;
    v51 = v26[2];
    v26[2] = &v43[16 * v44];
    v187 = v51;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v184);
  }
  else
  {
    *(_QWORD *)v37 = v33;
    *((_QWORD *)v37 + 1) = v34;
    v38 = v37 + 16;
    v165 = 0;
    v166 = 0;
  }
  v26[1] = v38;
  v52 = v164;
  v164 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = v163;
  if (v163)
  {
    v54 = (unint64_t *)&v163->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  *(_OWORD *)v158 = *(_OWORD *)a2;
  v159 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v56 = (uint64_t)v173;
  v156 = (uint64_t)v173;
  if (v173)
  {
    v57 = (std::__shared_weak_count *)operator new();
    v57->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v57->__shared_owners_ = 0;
    v57->__shared_weak_owners_ = 0;
    v57[1].__vftable = (std::__shared_weak_count_vtbl *)v56;
  }
  else
  {
    v57 = 0;
  }
  v157 = v57;
  v173 = 0;
  v154 = v167;
  if (v167)
  {
    v58 = (std::__shared_weak_count *)operator new();
    v59 = v167;
    v58->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v58->__shared_owners_ = 0;
    v58->__shared_weak_owners_ = 0;
    v58[1].__vftable = (std::__shared_weak_count_vtbl *)v59;
  }
  else
  {
    v58 = 0;
  }
  v155 = v58;
  v167 = 0;
  v176[0] = &unk_24BFE7440;
  v176[1] = ANEMachineIR::H2021::Validators::ValidateTranspose;
  v177 = (MIL::Validation::TensorDTypeConstraints *)v176;
  v175 = 0;
  MIL::IROperator::Make();
  v60 = v175;
  if (v175 == v174)
  {
    v61 = 4;
    v60 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_64;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_64:
  v62 = v177;
  if (v177 == (MIL::Validation::TensorDTypeConstraints *)v176)
  {
    v63 = 4;
    v62 = (MIL::Validation::TensorDTypeConstraints *)v176;
    goto LABEL_68;
  }
  if (v177)
  {
    v63 = 5;
LABEL_68:
    v62 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v62 + 8 * v63))();
  }
  if (v155)
  {
    v64 = &v155->__shared_owners_;
    do
      v65 = __ldaxr((unint64_t *)v64);
    while (__stlxr(v65 - 1, (unint64_t *)v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  if (v157)
  {
    v66 = &v157->__shared_owners_;
    do
      v67 = __ldaxr((unint64_t *)v66);
    while (__stlxr(v67 - 1, (unint64_t *)v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  if (SHIBYTE(v159) < 0)
    operator delete(v158[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v62);
  v68 = v184;
  std::string::basic_string[abi:ne180100]<0>(&v150, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v152 = v181;
  if (v181)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v70 = v181;
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = v70;
  }
  else
  {
    v69 = 0;
  }
  v153 = v69;
  v181 = 0;
  std::string::basic_string[abi:ne180100]<0>(v148, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v68 + 3))(v68, &v152, v148);
  if (v149 < 0)
    operator delete(v148[0]);
  v71 = v153;
  if (v153)
  {
    v72 = (unint64_t *)&v153->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v181;
  v181 = 0;
  if (v74)
    (*((void (**)(std::__shared_weak_count_vtbl *))v74->~__shared_weak_count + 1))(v74);
  if (v151 < 0)
    operator delete(v150);
  v75 = v184;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v146 = v181;
  if (v181)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = v181;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v147 = v76;
  v181 = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v75 + 3))(v75, &v146, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v78 = v147;
  if (v147)
  {
    v79 = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v181;
  v181 = 0;
  if (v81)
    (*((void (**)(std::__shared_weak_count_vtbl *))v81->~__shared_weak_count + 1))(v81);
  v82 = *a3;
  v142 = v184;
  if (v184)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = v184;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = (std::__shared_weak_count_vtbl *)v84;
  }
  else
  {
    v83 = 0;
  }
  v143 = v83;
  v184 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v82 + 56))(v82, &v142);
  v85 = v143;
  if (v143)
  {
    v86 = (unint64_t *)&v143->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (MIL::Validation::TensorRankValueConstraints *)v184;
  v184 = 0;
  if (v88)
    v88 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v88 + 8))(v88);
  MIL::Validation::TensorRankValueConstraints::Make(v88);
  v89 = v184;
  std::string::basic_string[abi:ne180100]<0>(&v138, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v140 = v181;
  if (v181)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v181;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v141 = v90;
  v181 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v89 + 4))(v89, &v140, 1, 5);
  v92 = v141;
  if (v141)
  {
    v93 = (unint64_t *)&v141->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v181;
  v181 = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  if (v139 < 0)
    operator delete(v138);
  v96 = v184;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v136 = v181;
  if (v181)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v181;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v137 = v97;
  v181 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v96 + 4))(v96, &v136, 1, 5);
  v99 = v137;
  if (v137)
  {
    v100 = (unint64_t *)&v137->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v181;
  v181 = 0;
  if (v102)
    (*((void (**)(std::__shared_weak_count_vtbl *))v102->~__shared_weak_count + 1))(v102);
  v103 = *a3;
  v134 = v184;
  if (v184)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = v184;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = (std::__shared_weak_count_vtbl *)v105;
  }
  else
  {
    v104 = 0;
  }
  v135 = v104;
  v184 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v103 + 56))(v103, &v134);
  v106 = v135;
  if (v135)
  {
    v107 = (unint64_t *)&v135->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = (MIL::Validation::TensorSymbolicShapeConstraints *)v184;
  v184 = 0;
  if (v109)
    v109 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v109 + 8))(v109);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v109);
  v110 = v184;
  std::string::basic_string[abi:ne180100]<0>(&v130, "perm");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v132 = v181;
  if (v181)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = v181;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v133 = v111;
  v181 = 0;
  std::string::basic_string[abi:ne180100]<0>(v128, "R");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v110 + 3))(v110, &v132, 0, v128);
  if (v129 < 0)
    operator delete(v128[0]);
  v113 = v133;
  if (v133)
  {
    v114 = (unint64_t *)&v133->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v181;
  v181 = 0;
  if (v116)
    (*((void (**)(std::__shared_weak_count_vtbl *))v116->~__shared_weak_count + 1))(v116);
  if (v131 < 0)
    operator delete(v130);
  v117 = *a3;
  v126 = v184;
  if (v184)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v184;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = (std::__shared_weak_count_vtbl *)v119;
  }
  else
  {
    v118 = 0;
  }
  v127 = v118;
  v184 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v117 + 56))(v117, &v126);
  v120 = v127;
  if (v127)
  {
    v121 = (unint64_t *)&v127->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v184;
  v184 = 0;
  if (v123)
    (*((void (**)(void **))*v123 + 1))(v123);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v167, 0);
  result = (uint64_t)v173;
  if (v173)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v173);
    return MEMORY[0x20BCFF140](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2069500AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 112);
  *(_QWORD *)(v59 - 112) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Validators::ValidateNeReduce(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeReduce(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeReduce(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeReduce(this, a2);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateBasePeElementWiseBinary@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateBasePeElementWiseUnary@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateNeActivation@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

void ANEMachineIR::H2021::Validators::ValidateNeAdd(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeAdd(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidateNeMaximum(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeMaximum(this, a2);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateNeMinimum@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateNeMul@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateNeSquare@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

void ANEMachineIR::H2021::Validators::ValidatePeAbs(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseUnary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeSquare(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseUnary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeAdd(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeAddAbs(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeAddMul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeAddSquare(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeMaximum(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeMinimum(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeMul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeNotEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeLess(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeLessEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeGreater(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeGreaterEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

uint64_t ANEMachineIR::H2020::BaseNePool::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  unsigned __int8 *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void **v35;
  unsigned __int8 *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void **v43;
  unsigned __int8 *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void **v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char **v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  void **v86;
  char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  char **v95;
  _QWORD *v96;
  uint64_t v97;
  MIL::Validation::TensorDTypeConstraints *v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  void **v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void **v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  MIL::Validation::TensorRankValueConstraints *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  MIL::Validation::TensorSymbolicShapeConstraints *v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  void **v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count_vtbl *v152;
  void **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count_vtbl *v159;
  void **v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count_vtbl *v166;
  void **v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count_vtbl *v173;
  void **v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count_vtbl *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  void **v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void **v187;
  uint64_t result;
  uint64_t v189;
  void **v190;
  std::__shared_weak_count *v191;
  void *v192[2];
  char v193;
  void *v194;
  char v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  void *v198[2];
  char v199;
  void *v200;
  char v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  char v205;
  void *v206;
  char v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  char v211;
  void *v212;
  char v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  void *v218;
  char v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  void *v222[2];
  char v223;
  void *v224;
  char v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  void **v228;
  std::__shared_weak_count *v229;
  void *v230;
  char v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  void **v234;
  std::__shared_weak_count *v235;
  void *v236[2];
  char v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  void *v240[2];
  char v241;
  void *v242;
  char v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  char **v246;
  std::__shared_weak_count *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  void *v250[2];
  uint64_t v251;
  void *v252;
  void *v253;
  _QWORD *v254;
  std::__shared_weak_count *v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  char **v259;
  std::__shared_weak_count *v260;
  std::__shared_weak_count *v261;
  std::__shared_weak_count *v262;
  std::__shared_weak_count *v263;
  std::__shared_weak_count *v264;
  void *__p;
  void *v266;
  _QWORD *v267;
  std::__shared_weak_count *v268;
  _QWORD *v269;
  _BYTE v270[24];
  _BYTE *v271;
  _QWORD v272[3];
  MIL::Validation::TensorDTypeConstraints *v273;
  void *v274;
  void *v275;
  _QWORD *v276;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v279;
  void **v280;
  void **v281;
  uint64_t v282;
  char *v283;
  char **v284;
  uint64_t v285;

  v285 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v269 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v12->__get_deleter;
  v279 = (uint64_t)&v12->__get_deleter;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  Scalar = v12;
  v280 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x18uLL);
  v275 = v16 + 3;
  v276 = v16 + 3;
  *v16 = v13;
  v16[1] = v14;
  v16[2] = v15;
  v274 = v16;
  v281 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = operator new(0x18uLL);
  v267 = v20 + 3;
  *v20 = v17;
  v20[1] = v18;
  v20[2] = v19;
  __p = v20;
  v266 = v20 + 3;
  v282 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v252);
  v21 = v252;
  v252 = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = v268;
  if (v268)
  {
    p_shared_owners = (unint64_t *)&v268->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v266 = __p;
    operator delete(__p);
  }
  if (v274)
  {
    v275 = v274;
    operator delete(v274);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v25 = v269;
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (void **)operator new(8uLL);
  v280 = v27;
  *v27 = (void *)v26;
  v281 = v27 + 1;
  v282 = (uint64_t)(v27 + 1);
  v274 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v25, "kernel_sizes", (uint64_t *)&Scalar);
  v29 = Scalar;
  Scalar = 0;
  if (v29)
    (*((void (**)(std::__shared_weak_count_vtbl *))v29->~__shared_weak_count + 1))(v29);
  v30 = v264;
  if (v264)
  {
    v31 = (unint64_t *)&v264->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v33 = v269;
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = (void **)operator new(8uLL);
  v280 = v35;
  *v35 = (void *)v34;
  v281 = v35 + 1;
  v282 = (uint64_t)(v35 + 1);
  v274 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v33, "strides", (uint64_t *)&Scalar);
  v37 = Scalar;
  Scalar = 0;
  if (v37)
    (*((void (**)(std::__shared_weak_count_vtbl *))v37->~__shared_weak_count + 1))(v37);
  v38 = v263;
  if (v263)
  {
    v39 = (unint64_t *)&v263->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v269;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (void **)operator new(8uLL);
  v280 = v43;
  *v43 = (void *)v42;
  v281 = v43 + 1;
  v282 = (uint64_t)(v43 + 1);
  v274 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v41, "custom_pads", (uint64_t *)&Scalar);
  v45 = Scalar;
  Scalar = 0;
  if (v45)
    (*((void (**)(std::__shared_weak_count_vtbl *))v45->~__shared_weak_count + 1))(v45);
  v46 = v262;
  if (v262)
  {
    v47 = (unint64_t *)&v262->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v269;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v49, "post_right_shift", (uint64_t *)&v280);
  v51 = v280;
  v280 = 0;
  if (v51)
    (*((void (**)(void **))*v51 + 1))(v51);
  v52 = v261;
  if (v261)
  {
    v53 = (unint64_t *)&v261->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 48))(*((_QWORD *)v50 + 5), 1);
  v55 = v269;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v55, "post_scale", (uint64_t *)&v280);
  v57 = v280;
  v280 = 0;
  if (v57)
    (*((void (**)(void **))*v57 + 1))(v57);
  v58 = v260;
  if (v260)
  {
    v59 = (unint64_t *)&v260->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 48))(*((_QWORD *)v56 + 5), 1);
  v259 = 0;
  v61 = operator new();
  *(_QWORD *)v61 = 0;
  *(_QWORD *)(v61 + 8) = 0;
  *(_QWORD *)(v61 + 16) = 0;
  v280 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v259, (void **)v61);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v280, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v259, 1uLL);
  v62 = v259;
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v274 = v64;
  *v64 = v63;
  v275 = v64 + 1;
  v276 = v64 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  __p = v66;
  *v66 = v65;
  v267 = v66 + 1;
  v266 = v66 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v252 = v68;
  *v68 = v67;
  v254 = v68 + 1;
  v253 = v68 + 1;
  v279 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v69 = v256;
  v257 = v256;
  if (v256)
  {
    v70 = (_QWORD *)operator new();
    v71 = v256;
    *v70 = &unk_24BFE7320;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  v258 = v70;
  v256 = 0;
  v72 = v62[2];
  v73 = v62[1];
  if (v73 >= v72)
  {
    v75 = (v73 - *v62) >> 4;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v77 = v72 - *v62;
    if (v77 >> 3 > v76)
      v76 = v77 >> 3;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
      v78 = 0xFFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    v284 = v62 + 2;
    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v62 + 2), v78);
    v81 = &v79[16 * v75];
    *(_QWORD *)v81 = v69;
    *((_QWORD *)v81 + 1) = v70;
    v258 = 0;
    v257 = 0;
    v83 = *v62;
    v82 = v62[1];
    if (v82 == *v62)
    {
      v86 = (void **)v62[1];
      v84 = &v79[16 * v75];
    }
    else
    {
      v84 = &v79[16 * v75];
      do
      {
        v85 = *((_OWORD *)v82 - 1);
        v82 -= 16;
        *((_OWORD *)v84 - 1) = v85;
        v84 -= 16;
        *(_QWORD *)v82 = 0;
        *((_QWORD *)v82 + 1) = 0;
      }
      while (v82 != v83);
      v86 = (void **)*v62;
      v82 = v62[1];
    }
    v74 = v81 + 16;
    *v62 = v84;
    v280 = v86;
    v281 = v86;
    v62[1] = v81 + 16;
    v282 = (uint64_t)v82;
    v87 = v62[2];
    v62[2] = &v79[16 * v80];
    v283 = v87;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v280);
  }
  else
  {
    *(_QWORD *)v73 = v69;
    *((_QWORD *)v73 + 1) = v70;
    v74 = v73 + 16;
    v258 = 0;
    v257 = 0;
  }
  v62[1] = v74;
  v88 = v256;
  v256 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v255;
  if (v255)
  {
    v90 = (unint64_t *)&v255->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (__p)
  {
    v266 = __p;
    operator delete(__p);
  }
  if (v274)
  {
    v275 = v274;
    operator delete(v274);
  }
  *(_OWORD *)v250 = *(_OWORD *)a2;
  v251 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v92 = (uint64_t)v269;
  v248 = (uint64_t)v269;
  if (v269)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v93 = 0;
  }
  v249 = v93;
  v269 = 0;
  v246 = v259;
  if (v259)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = v259;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = (std::__shared_weak_count_vtbl *)v95;
  }
  else
  {
    v94 = 0;
  }
  v247 = v94;
  v259 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v272, a3);
  }
  else
  {
    v272[0] = &unk_24BFE7440;
    v272[1] = ANEMachineIR::H2020::Validators::ValidateBaseNePool;
    v273 = (MIL::Validation::TensorDTypeConstraints *)v272;
  }
  v271 = 0;
  MIL::IROperator::Make();
  v96 = v271;
  if (v271 == v270)
  {
    v97 = 4;
    v96 = v270;
  }
  else
  {
    if (!v271)
      goto LABEL_99;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_99:
  v98 = v273;
  if (v273 == (MIL::Validation::TensorDTypeConstraints *)v272)
  {
    v99 = 4;
    v98 = (MIL::Validation::TensorDTypeConstraints *)v272;
    goto LABEL_103;
  }
  if (v273)
  {
    v99 = 5;
LABEL_103:
    v98 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v98 + 8 * v99))();
  }
  if (v247)
  {
    v100 = &v247->__shared_owners_;
    do
      v101 = __ldaxr((unint64_t *)v100);
    while (__stlxr(v101 - 1, (unint64_t *)v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  if (v249)
  {
    v102 = &v249->__shared_owners_;
    do
      v103 = __ldaxr((unint64_t *)v102);
    while (__stlxr(v103 - 1, (unint64_t *)v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  if (SHIBYTE(v251) < 0)
    operator delete(v250[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v98);
  v104 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v242, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v244 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v245 = v105;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v240, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v104 + 3))(v104, &v244, v240);
  if (v241 < 0)
    operator delete(v240[0]);
  v107 = v245;
  if (v245)
  {
    v108 = (unint64_t *)&v245->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  if (v243 < 0)
    operator delete(v242);
  v111 = v280;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v238 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v239 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v236, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 3))(v111, &v238, v236);
  if (v237 < 0)
    operator delete(v236[0]);
  v114 = v239;
  if (v239)
  {
    v115 = (unint64_t *)&v239->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  v118 = *a4;
  v234 = v280;
  if (v280)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = v280;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = (std::__shared_weak_count_vtbl *)v120;
  }
  else
  {
    v119 = 0;
  }
  v235 = v119;
  v280 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v118 + 56))(v118, &v234);
  v121 = v235;
  if (v235)
  {
    v122 = (unint64_t *)&v235->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (MIL::Validation::TensorRankValueConstraints *)v280;
  v280 = 0;
  if (v124)
    v124 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v124 + 8))(v124);
  MIL::Validation::TensorRankValueConstraints::Make(v124);
  v125 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v230, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v232 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v233 = v126;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v125 + 4))(v125, &v232, 3, 5);
  v128 = v233;
  if (v233)
  {
    v129 = (unint64_t *)&v233->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  if (v231 < 0)
    operator delete(v230);
  v132 = *a4;
  v228 = v280;
  if (v280)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v280;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v229 = v133;
  v280 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v228);
  v135 = v229;
  if (v229)
  {
    v136 = (unint64_t *)&v229->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = (MIL::Validation::TensorSymbolicShapeConstraints *)v280;
  v280 = 0;
  if (v138)
    v138 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v138 + 8))(v138);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v138);
  v139 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v224, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v226 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v227 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v222, "Batch");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v139 + 3))(v139, &v226, 0, v222);
  if (v223 < 0)
    operator delete(v222[0]);
  v142 = v227;
  if (v227)
  {
    v143 = (unint64_t *)&v227->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  if (v225 < 0)
    operator delete(v224);
  v146 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v218, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v220 = Scalar;
  if (Scalar)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = Scalar;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v221 = v147;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v216, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))*v146 + 4))(v146, &v220, 1, -2, v216);
  if (v217 < 0)
    operator delete(v216[0]);
  v149 = v221;
  if (v221)
  {
    v150 = (unint64_t *)&v221->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = Scalar;
  Scalar = 0;
  if (v152)
    (*((void (**)(std::__shared_weak_count_vtbl *))v152->~__shared_weak_count + 1))(v152);
  if (v219 < 0)
    operator delete(v218);
  v153 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v212, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v214 = Scalar;
  if (Scalar)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = Scalar;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v215 = v154;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v210, "Cin");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v153 + 3))(v153, &v214, -1, v210);
  if (v211 < 0)
    operator delete(v210[0]);
  v156 = v215;
  if (v215)
  {
    v157 = (unint64_t *)&v215->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = Scalar;
  Scalar = 0;
  if (v159)
    (*((void (**)(std::__shared_weak_count_vtbl *))v159->~__shared_weak_count + 1))(v159);
  if (v213 < 0)
    operator delete(v212);
  v160 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v206, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v208 = Scalar;
  if (Scalar)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = Scalar;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v162;
  }
  else
  {
    v161 = 0;
  }
  v209 = v161;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v204, "NUM_SPATIAL_DIMS_PLUS_ONE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v160 + 3))(v160, &v208, 0, v204);
  if (v205 < 0)
    operator delete(v204[0]);
  v163 = v209;
  if (v209)
  {
    v164 = (unint64_t *)&v209->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = Scalar;
  Scalar = 0;
  if (v166)
    (*((void (**)(std::__shared_weak_count_vtbl *))v166->~__shared_weak_count + 1))(v166);
  if (v207 < 0)
    operator delete(v206);
  v167 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v200, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v202 = Scalar;
  if (Scalar)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = Scalar;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v203 = v168;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v198, "NUM_SPATIAL_DIMS_PLUS_ONE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v167 + 3))(v167, &v202, 0, v198);
  if (v199 < 0)
    operator delete(v198[0]);
  v170 = v203;
  if (v203)
  {
    v171 = (unint64_t *)&v203->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = Scalar;
  Scalar = 0;
  if (v173)
    (*((void (**)(std::__shared_weak_count_vtbl *))v173->~__shared_weak_count + 1))(v173);
  if (v201 < 0)
    operator delete(v200);
  v174 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v194, "custom_pads");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v196 = Scalar;
  if (Scalar)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = Scalar;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v197 = v175;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v192, "TWICE_NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v174 + 3))(v174, &v196, 0, v192);
  if (v193 < 0)
    operator delete(v192[0]);
  v177 = v197;
  if (v197)
  {
    v178 = (unint64_t *)&v197->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = Scalar;
  Scalar = 0;
  if (v180)
    (*((void (**)(std::__shared_weak_count_vtbl *))v180->~__shared_weak_count + 1))(v180);
  if (v195 < 0)
    operator delete(v194);
  v181 = *a4;
  v190 = v280;
  if (v280)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = v280;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = (std::__shared_weak_count_vtbl *)v183;
  }
  else
  {
    v182 = 0;
  }
  v191 = v182;
  v280 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v181 + 56))(v181, &v190);
  v184 = v191;
  if (v191)
  {
    v185 = (unint64_t *)&v191->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = v280;
  v280 = 0;
  if (v187)
    (*((void (**)(void **))*v187 + 1))(v187);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v259, 0);
  result = (uint64_t)v269;
  if (v269)
  {
    v189 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v269);
    return MEMORY[0x20BCFF140](v189, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206951C44(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2020::NeAvgPool::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void **v41;
  unsigned __int8 *v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  void **v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  unsigned __int8 *v66;
  void **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unsigned __int8 *v72;
  void **v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  unsigned __int8 *v78;
  void **v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  unsigned __int8 *v84;
  void **v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  char **v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  __int128 v113;
  void **v114;
  char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  char **v123;
  _QWORD *v124;
  uint64_t v125;
  MIL::Validation::TensorDTypeConstraints *v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  void **v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  void **v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  MIL::Validation::TensorRankValueConstraints *v152;
  void **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count_vtbl *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  void **v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  MIL::Validation::TensorSymbolicShapeConstraints *v166;
  void **v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count_vtbl *v173;
  void **v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count_vtbl *v180;
  void **v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count_vtbl *v187;
  void **v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count_vtbl *v194;
  void **v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count_vtbl *v201;
  void **v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count_vtbl *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  void **v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  void **v215;
  uint64_t result;
  uint64_t v217;
  void **v218;
  std::__shared_weak_count *v219;
  void *v220[2];
  char v221;
  void *v222;
  char v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  void *v226[2];
  char v227;
  void *v228;
  char v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  void *v232[2];
  char v233;
  void *v234;
  char v235;
  std::__shared_weak_count_vtbl *v236;
  std::__shared_weak_count *v237;
  void *v238[2];
  char v239;
  void *v240;
  char v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  char v245;
  void *v246;
  char v247;
  std::__shared_weak_count_vtbl *v248;
  std::__shared_weak_count *v249;
  void *v250[2];
  char v251;
  void *v252;
  char v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  void **v256;
  std::__shared_weak_count *v257;
  void *v258;
  char v259;
  std::__shared_weak_count_vtbl *v260;
  std::__shared_weak_count *v261;
  void **v262;
  std::__shared_weak_count *v263;
  void *v264[2];
  char v265;
  std::__shared_weak_count_vtbl *v266;
  std::__shared_weak_count *v267;
  void *v268[2];
  char v269;
  void *v270;
  char v271;
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  char **v274;
  std::__shared_weak_count *v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  void *v278[2];
  uint64_t v279;
  void *v280;
  void *v281;
  _QWORD *v282;
  std::__shared_weak_count *v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  char **v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count *v289;
  std::__shared_weak_count *v290;
  std::__shared_weak_count *v291;
  std::__shared_weak_count *v292;
  std::__shared_weak_count *v293;
  std::__shared_weak_count *v294;
  std::__shared_weak_count *v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count *v297;
  void *__p;
  void *v299;
  _QWORD *v300;
  std::__shared_weak_count *v301;
  _QWORD *v302;
  _BYTE v303[24];
  _BYTE *v304;
  _QWORD v305[3];
  MIL::Validation::TensorDTypeConstraints *v306;
  void *v307;
  void *v308;
  _QWORD *v309;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v312;
  void **v313;
  void **v314;
  uint64_t v315;
  char *v316;
  char **v317;
  uint64_t v318;

  v318 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v302 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v312 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v313 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v308 = v14 + 3;
  v309 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v307 = v14;
  v314 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v300 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v299 = v18 + 3;
  v315 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v280);
  v19 = v280;
  v280 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v301;
  if (v301)
  {
    p_shared_owners = (unint64_t *)&v301->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v299 = __p;
    operator delete(__p);
  }
  if (v307)
  {
    v308 = v307;
    operator delete(v307);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v302;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (void **)operator new(8uLL);
  v313 = v25;
  *v25 = (void *)v24;
  v314 = v25 + 1;
  v315 = (uint64_t)(v25 + 1);
  v307 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v23, "kernel_sizes", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = v297;
  if (v297)
  {
    v29 = (unint64_t *)&v297->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v313)
  {
    v314 = v313;
    operator delete(v313);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v31 = v302;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (void **)operator new(8uLL);
  v313 = v33;
  *v33 = (void *)v32;
  v314 = v33 + 1;
  v315 = (uint64_t)(v33 + 1);
  v307 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v31, "strides", (uint64_t *)&Scalar);
  v35 = Scalar;
  Scalar = 0;
  if (v35)
    (*((void (**)(std::__shared_weak_count_vtbl *))v35->~__shared_weak_count + 1))(v35);
  v36 = v296;
  if (v296)
  {
    v37 = (unint64_t *)&v296->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v313)
  {
    v314 = v313;
    operator delete(v313);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v39 = v302;
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = (void **)operator new(8uLL);
  v313 = v41;
  *v41 = (void *)v40;
  v314 = v41 + 1;
  v315 = (uint64_t)(v41 + 1);
  v307 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v39, "custom_pads", (uint64_t *)&Scalar);
  v43 = Scalar;
  Scalar = 0;
  if (v43)
    (*((void (**)(std::__shared_weak_count_vtbl *))v43->~__shared_weak_count + 1))(v43);
  v44 = v295;
  if (v295)
  {
    v45 = (unint64_t *)&v295->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v313)
  {
    v314 = v313;
    operator delete(v313);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v47 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v47, "post_right_shift", (uint64_t *)&v313);
  v49 = v313;
  v313 = 0;
  if (v49)
    (*((void (**)(void **))*v49 + 1))(v49);
  v50 = v294;
  if (v294)
  {
    v51 = (unint64_t *)&v294->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 48))(*((_QWORD *)v48 + 5), 1);
  v53 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v53, "post_scale", (uint64_t *)&v313);
  v55 = v313;
  v313 = 0;
  if (v55)
    (*((void (**)(void **))*v55 + 1))(v55);
  v56 = v293;
  if (v293)
  {
    v57 = (unint64_t *)&v293->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 48))(*((_QWORD *)v54 + 5), 1);
  v59 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v59, "bias", (uint64_t *)&v313);
  v61 = v313;
  v313 = 0;
  if (v61)
    (*((void (**)(void **))*v61 + 1))(v61);
  v62 = v292;
  if (v292)
  {
    v63 = (unint64_t *)&v292->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 48))(*((_QWORD *)v60 + 5), 1);
  v65 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v66 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v65, "acc_left_shift", (uint64_t *)&v313);
  v67 = v313;
  v313 = 0;
  if (v67)
    (*((void (**)(void **))*v67 + 1))(v67);
  v68 = v291;
  if (v291)
  {
    v69 = (unint64_t *)&v291->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 32))(*((_QWORD *)v66 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 48))(*((_QWORD *)v66 + 5), 1);
  v71 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v71, "acc_bias_shift", (uint64_t *)&v313);
  v73 = v313;
  v313 = 0;
  if (v73)
    (*((void (**)(void **))*v73 + 1))(v73);
  v74 = v290;
  if (v290)
  {
    v75 = (unint64_t *)&v290->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 32))(*((_QWORD *)v72 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 48))(*((_QWORD *)v72 + 5), 1);
  v77 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v78 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v77, "include_pads", (uint64_t *)&v313);
  v79 = v313;
  v313 = 0;
  if (v79)
    (*((void (**)(void **))*v79 + 1))(v79);
  v80 = v289;
  if (v289)
  {
    v81 = (unint64_t *)&v289->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v78 + 5) + 32))(*((_QWORD *)v78 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v78 + 5) + 48))(*((_QWORD *)v78 + 5), 1);
  v83 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v84 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v83, "pre_relu", (uint64_t *)&v313);
  v85 = v313;
  v313 = 0;
  if (v85)
    (*((void (**)(void **))*v85 + 1))(v85);
  v86 = v288;
  if (v288)
  {
    v87 = (unint64_t *)&v288->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v84 + 5) + 32))(*((_QWORD *)v84 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v84 + 5) + 48))(*((_QWORD *)v84 + 5), 1);
  v287 = 0;
  v89 = operator new();
  *(_QWORD *)v89 = 0;
  *(_QWORD *)(v89 + 8) = 0;
  *(_QWORD *)(v89 + 16) = 0;
  v313 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v287, (void **)v89);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v313, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v287, 1uLL);
  v90 = v287;
  v91 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v92 = operator new(8uLL);
  v307 = v92;
  *v92 = v91;
  v308 = v92 + 1;
  v309 = v92 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v93 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v94 = operator new(8uLL);
  __p = v94;
  *v94 = v93;
  v300 = v94 + 1;
  v299 = v94 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v95 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v96 = operator new(8uLL);
  v280 = v96;
  *v96 = v95;
  v282 = v96 + 1;
  v281 = v96 + 1;
  v312 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v97 = v284;
  v285 = v284;
  if (v284)
  {
    v98 = (_QWORD *)operator new();
    v99 = v284;
    *v98 = &unk_24BFE7320;
    v98[1] = 0;
    v98[2] = 0;
    v98[3] = v99;
  }
  else
  {
    v98 = 0;
  }
  v286 = v98;
  v284 = 0;
  v100 = v90[2];
  v101 = v90[1];
  if (v101 >= v100)
  {
    v103 = (v101 - *v90) >> 4;
    v104 = v103 + 1;
    if ((unint64_t)(v103 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v105 = v100 - *v90;
    if (v105 >> 3 > v104)
      v104 = v105 >> 3;
    if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF0)
      v106 = 0xFFFFFFFFFFFFFFFLL;
    else
      v106 = v104;
    v317 = v90 + 2;
    v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v90 + 2), v106);
    v109 = &v107[16 * v103];
    *(_QWORD *)v109 = v97;
    *((_QWORD *)v109 + 1) = v98;
    v286 = 0;
    v285 = 0;
    v111 = *v90;
    v110 = v90[1];
    if (v110 == *v90)
    {
      v114 = (void **)v90[1];
      v112 = &v107[16 * v103];
    }
    else
    {
      v112 = &v107[16 * v103];
      do
      {
        v113 = *((_OWORD *)v110 - 1);
        v110 -= 16;
        *((_OWORD *)v112 - 1) = v113;
        v112 -= 16;
        *(_QWORD *)v110 = 0;
        *((_QWORD *)v110 + 1) = 0;
      }
      while (v110 != v111);
      v114 = (void **)*v90;
      v110 = v90[1];
    }
    v102 = v109 + 16;
    *v90 = v112;
    v313 = v114;
    v314 = v114;
    v90[1] = v109 + 16;
    v315 = (uint64_t)v110;
    v115 = v90[2];
    v90[2] = &v107[16 * v108];
    v316 = v115;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v313);
  }
  else
  {
    *(_QWORD *)v101 = v97;
    *((_QWORD *)v101 + 1) = v98;
    v102 = v101 + 16;
    v286 = 0;
    v285 = 0;
  }
  v90[1] = v102;
  v116 = v284;
  v284 = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  v117 = v283;
  if (v283)
  {
    v118 = (unint64_t *)&v283->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  if (__p)
  {
    v299 = __p;
    operator delete(__p);
  }
  if (v307)
  {
    v308 = v307;
    operator delete(v307);
  }
  *(_OWORD *)v278 = *(_OWORD *)a2;
  v279 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v120 = (uint64_t)v302;
  v276 = (uint64_t)v302;
  if (v302)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = (std::__shared_weak_count_vtbl *)v120;
  }
  else
  {
    v121 = 0;
  }
  v277 = v121;
  v302 = 0;
  v274 = v287;
  if (v287)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = v287;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = (std::__shared_weak_count_vtbl *)v123;
  }
  else
  {
    v122 = 0;
  }
  v275 = v122;
  v287 = 0;
  v305[0] = &unk_24BFE7440;
  v305[1] = ANEMachineIR::H2020::Validators::ValidateNeAvgPool;
  v306 = (MIL::Validation::TensorDTypeConstraints *)v305;
  v304 = 0;
  MIL::IROperator::Make();
  v124 = v304;
  if (v304 == v303)
  {
    v125 = 4;
    v124 = v303;
  }
  else
  {
    if (!v304)
      goto LABEL_131;
    v125 = 5;
  }
  (*(void (**)(void))(*v124 + 8 * v125))();
LABEL_131:
  v126 = v306;
  if (v306 == (MIL::Validation::TensorDTypeConstraints *)v305)
  {
    v127 = 4;
    v126 = (MIL::Validation::TensorDTypeConstraints *)v305;
    goto LABEL_135;
  }
  if (v306)
  {
    v127 = 5;
LABEL_135:
    v126 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v126 + 8 * v127))();
  }
  if (v275)
  {
    v128 = &v275->__shared_owners_;
    do
      v129 = __ldaxr((unint64_t *)v128);
    while (__stlxr(v129 - 1, (unint64_t *)v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  if (v277)
  {
    v130 = &v277->__shared_owners_;
    do
      v131 = __ldaxr((unint64_t *)v130);
    while (__stlxr(v131 - 1, (unint64_t *)v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
      std::__shared_weak_count::__release_weak(v277);
    }
  }
  if (SHIBYTE(v279) < 0)
    operator delete(v278[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v126);
  v132 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v270, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v272 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v273 = v133;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v268, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v132 + 3))(v132, &v272, v268);
  if (v269 < 0)
    operator delete(v268[0]);
  v135 = v273;
  if (v273)
  {
    v136 = (unint64_t *)&v273->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*((void (**)(std::__shared_weak_count_vtbl *))v138->~__shared_weak_count + 1))(v138);
  if (v271 < 0)
    operator delete(v270);
  v139 = v313;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v266 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v267 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v264, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v139 + 3))(v139, &v266, v264);
  if (v265 < 0)
    operator delete(v264[0]);
  v142 = v267;
  if (v267)
  {
    v143 = (unint64_t *)&v267->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  v146 = *a3;
  v262 = v313;
  if (v313)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = v313;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = (std::__shared_weak_count_vtbl *)v148;
  }
  else
  {
    v147 = 0;
  }
  v263 = v147;
  v313 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v146 + 56))(v146, &v262);
  v149 = v263;
  if (v263)
  {
    v150 = (unint64_t *)&v263->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = (MIL::Validation::TensorRankValueConstraints *)v313;
  v313 = 0;
  if (v152)
    v152 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v152 + 8))(v152);
  MIL::Validation::TensorRankValueConstraints::Make(v152);
  v153 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v258, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v260 = Scalar;
  if (Scalar)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = Scalar;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v261 = v154;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v153 + 4))(v153, &v260, 3, 5);
  v156 = v261;
  if (v261)
  {
    v157 = (unint64_t *)&v261->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = Scalar;
  Scalar = 0;
  if (v159)
    (*((void (**)(std::__shared_weak_count_vtbl *))v159->~__shared_weak_count + 1))(v159);
  if (v259 < 0)
    operator delete(v258);
  v160 = *a3;
  v256 = v313;
  if (v313)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = v313;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = (std::__shared_weak_count_vtbl *)v162;
  }
  else
  {
    v161 = 0;
  }
  v257 = v161;
  v313 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v160 + 56))(v160, &v256);
  v163 = v257;
  if (v257)
  {
    v164 = (unint64_t *)&v257->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = (MIL::Validation::TensorSymbolicShapeConstraints *)v313;
  v313 = 0;
  if (v166)
    v166 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v166 + 8))(v166);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v166);
  v167 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v252, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v254 = Scalar;
  if (Scalar)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = Scalar;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v255 = v168;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v250, "Batch");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v167 + 3))(v167, &v254, 0, v250);
  if (v251 < 0)
    operator delete(v250[0]);
  v170 = v255;
  if (v255)
  {
    v171 = (unint64_t *)&v255->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = Scalar;
  Scalar = 0;
  if (v173)
    (*((void (**)(std::__shared_weak_count_vtbl *))v173->~__shared_weak_count + 1))(v173);
  if (v253 < 0)
    operator delete(v252);
  v174 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v246, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v248 = Scalar;
  if (Scalar)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = Scalar;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v249 = v175;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v244, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))*v174 + 4))(v174, &v248, 1, -2, v244);
  if (v245 < 0)
    operator delete(v244[0]);
  v177 = v249;
  if (v249)
  {
    v178 = (unint64_t *)&v249->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = Scalar;
  Scalar = 0;
  if (v180)
    (*((void (**)(std::__shared_weak_count_vtbl *))v180->~__shared_weak_count + 1))(v180);
  if (v247 < 0)
    operator delete(v246);
  v181 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v240, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v242 = Scalar;
  if (Scalar)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = Scalar;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v183;
  }
  else
  {
    v182 = 0;
  }
  v243 = v182;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v238, "Cin");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v181 + 3))(v181, &v242, -1, v238);
  if (v239 < 0)
    operator delete(v238[0]);
  v184 = v243;
  if (v243)
  {
    v185 = (unint64_t *)&v243->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = Scalar;
  Scalar = 0;
  if (v187)
    (*((void (**)(std::__shared_weak_count_vtbl *))v187->~__shared_weak_count + 1))(v187);
  if (v241 < 0)
    operator delete(v240);
  v188 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v234, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v236 = Scalar;
  if (Scalar)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = Scalar;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v190;
  }
  else
  {
    v189 = 0;
  }
  v237 = v189;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v232, "NUM_SPATIAL_DIMS_PLUS_ONE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v188 + 3))(v188, &v236, 0, v232);
  if (v233 < 0)
    operator delete(v232[0]);
  v191 = v237;
  if (v237)
  {
    v192 = (unint64_t *)&v237->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = Scalar;
  Scalar = 0;
  if (v194)
    (*((void (**)(std::__shared_weak_count_vtbl *))v194->~__shared_weak_count + 1))(v194);
  if (v235 < 0)
    operator delete(v234);
  v195 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v228, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v230 = Scalar;
  if (Scalar)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = Scalar;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v231 = v196;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v226, "NUM_SPATIAL_DIMS_PLUS_ONE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v195 + 3))(v195, &v230, 0, v226);
  if (v227 < 0)
    operator delete(v226[0]);
  v198 = v231;
  if (v231)
  {
    v199 = (unint64_t *)&v231->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = Scalar;
  Scalar = 0;
  if (v201)
    (*((void (**)(std::__shared_weak_count_vtbl *))v201->~__shared_weak_count + 1))(v201);
  if (v229 < 0)
    operator delete(v228);
  v202 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v222, "custom_pads");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v224 = Scalar;
  if (Scalar)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = Scalar;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v225 = v203;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v220, "TWICE_NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v202 + 3))(v202, &v224, 0, v220);
  if (v221 < 0)
    operator delete(v220[0]);
  v205 = v225;
  if (v225)
  {
    v206 = (unint64_t *)&v225->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = Scalar;
  Scalar = 0;
  if (v208)
    (*((void (**)(std::__shared_weak_count_vtbl *))v208->~__shared_weak_count + 1))(v208);
  if (v223 < 0)
    operator delete(v222);
  v209 = *a3;
  v218 = v313;
  if (v313)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v211 = v313;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = (std::__shared_weak_count_vtbl *)v211;
  }
  else
  {
    v210 = 0;
  }
  v219 = v210;
  v313 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v209 + 56))(v209, &v218);
  v212 = v219;
  if (v219)
  {
    v213 = (unint64_t *)&v219->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = v313;
  v313 = 0;
  if (v215)
    (*((void (**)(void **))*v215 + 1))(v215);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v287, 0);
  result = (uint64_t)v302;
  if (v302)
  {
    v217 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v302);
    return MEMORY[0x20BCFF140](v217, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206953D68(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NeMaxPool::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidateNeMaxPool;
  v8 = v7;
  ANEMachineIR::H2020::BaseNePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2069545EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NeMinPool::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidateNeMinPool;
  v8 = v7;
  ANEMachineIR::H2020::BaseNePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_206954704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2020::BasePePool::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  unsigned __int8 *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void **v35;
  unsigned __int8 *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void **v43;
  unsigned __int8 *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  void **v80;
  char *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  char **v89;
  _QWORD *v90;
  uint64_t v91;
  MIL::Validation::TensorDTypeConstraints *v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  void **v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void **v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  MIL::Validation::TensorRankValueConstraints *v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void **v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  MIL::Validation::TensorSymbolicShapeConstraints *v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count_vtbl *v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count_vtbl *v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count_vtbl *v153;
  void **v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count_vtbl *v160;
  void **v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  void **v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count_vtbl *v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  void **v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  void **v181;
  uint64_t result;
  uint64_t v183;
  void **v184;
  std::__shared_weak_count *v185;
  void *v186[2];
  char v187;
  void *v188;
  char v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  void *v192[2];
  char v193;
  void *v194;
  char v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  void *v198[2];
  char v199;
  void *v200;
  char v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  char v205;
  void *v206;
  char v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  char v211;
  void *v212;
  char v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  void *v218;
  char v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  void **v222;
  std::__shared_weak_count *v223;
  void *v224;
  char v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  void **v228;
  std::__shared_weak_count *v229;
  void *v230[2];
  char v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  void *v234[2];
  char v235;
  void *v236;
  char v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  char **v240;
  std::__shared_weak_count *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  uint64_t v245;
  void *v246;
  void *v247;
  _QWORD *v248;
  std::__shared_weak_count *v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  char **v253;
  std::__shared_weak_count *v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count *v256;
  std::__shared_weak_count *v257;
  void *__p;
  void *v259;
  _QWORD *v260;
  std::__shared_weak_count *v261;
  _QWORD *v262;
  _BYTE v263[24];
  _BYTE *v264;
  _QWORD v265[3];
  MIL::Validation::TensorDTypeConstraints *v266;
  void *v267;
  void *v268;
  _QWORD *v269;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v272;
  void **v273;
  void **v274;
  uint64_t v275;
  char *v276;
  char **v277;
  uint64_t v278;

  v278 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v262 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v12->__get_deleter;
  v272 = (uint64_t)&v12->__get_deleter;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  Scalar = v12;
  v273 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x18uLL);
  v268 = v16 + 3;
  v269 = v16 + 3;
  *v16 = v13;
  v16[1] = v14;
  v16[2] = v15;
  v267 = v16;
  v274 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = operator new(0x18uLL);
  v260 = v20 + 3;
  *v20 = v17;
  v20[1] = v18;
  v20[2] = v19;
  __p = v20;
  v259 = v20 + 3;
  v275 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v246);
  v21 = v246;
  v246 = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = v261;
  if (v261)
  {
    p_shared_owners = (unint64_t *)&v261->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v259 = __p;
    operator delete(__p);
  }
  if (v267)
  {
    v268 = v267;
    operator delete(v267);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v25 = v262;
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (void **)operator new(8uLL);
  v273 = v27;
  *v27 = (void *)v26;
  v274 = v27 + 1;
  v275 = (uint64_t)(v27 + 1);
  v267 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v25, "kernel_sizes", (uint64_t *)&Scalar);
  v29 = Scalar;
  Scalar = 0;
  if (v29)
    (*((void (**)(std::__shared_weak_count_vtbl *))v29->~__shared_weak_count + 1))(v29);
  v30 = v257;
  if (v257)
  {
    v31 = (unint64_t *)&v257->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v33 = v262;
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = (void **)operator new(8uLL);
  v273 = v35;
  *v35 = (void *)v34;
  v274 = v35 + 1;
  v275 = (uint64_t)(v35 + 1);
  v267 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v33, "strides", (uint64_t *)&Scalar);
  v37 = Scalar;
  Scalar = 0;
  if (v37)
    (*((void (**)(std::__shared_weak_count_vtbl *))v37->~__shared_weak_count + 1))(v37);
  v38 = v256;
  if (v256)
  {
    v39 = (unint64_t *)&v256->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v262;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (void **)operator new(8uLL);
  v273 = v43;
  *v43 = (void *)v42;
  v274 = v43 + 1;
  v275 = (uint64_t)(v43 + 1);
  v267 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v41, "custom_pads", (uint64_t *)&Scalar);
  v45 = Scalar;
  Scalar = 0;
  if (v45)
    (*((void (**)(std::__shared_weak_count_vtbl *))v45->~__shared_weak_count + 1))(v45);
  v46 = v255;
  if (v255)
  {
    v47 = (unint64_t *)&v255->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v262;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v49, "post_scale", (uint64_t *)&v273);
  v51 = v273;
  v273 = 0;
  if (v51)
    (*((void (**)(void **))*v51 + 1))(v51);
  v52 = v254;
  if (v254)
  {
    v53 = (unint64_t *)&v254->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 48))(*((_QWORD *)v50 + 5), 1);
  v253 = 0;
  v55 = operator new();
  *(_QWORD *)v55 = 0;
  *(_QWORD *)(v55 + 8) = 0;
  *(_QWORD *)(v55 + 16) = 0;
  v273 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v253, (void **)v55);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v273, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v253, 1uLL);
  v56 = v253;
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v267 = v58;
  *v58 = v57;
  v268 = v58 + 1;
  v269 = v58 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  __p = v60;
  *v60 = v59;
  v260 = v60 + 1;
  v259 = v60 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v246 = v62;
  *v62 = v61;
  v248 = v62 + 1;
  v247 = v62 + 1;
  v272 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v63 = v250;
  v251 = v250;
  if (v250)
  {
    v64 = (_QWORD *)operator new();
    v65 = v250;
    *v64 = &unk_24BFE7320;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  v252 = v64;
  v250 = 0;
  v66 = v56[2];
  v67 = v56[1];
  if (v67 >= v66)
  {
    v69 = (v67 - *v56) >> 4;
    v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v71 = v66 - *v56;
    if (v71 >> 3 > v70)
      v70 = v71 >> 3;
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0)
      v72 = 0xFFFFFFFFFFFFFFFLL;
    else
      v72 = v70;
    v277 = v56 + 2;
    v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v56 + 2), v72);
    v75 = &v73[16 * v69];
    *(_QWORD *)v75 = v63;
    *((_QWORD *)v75 + 1) = v64;
    v252 = 0;
    v251 = 0;
    v77 = *v56;
    v76 = v56[1];
    if (v76 == *v56)
    {
      v80 = (void **)v56[1];
      v78 = &v73[16 * v69];
    }
    else
    {
      v78 = &v73[16 * v69];
      do
      {
        v79 = *((_OWORD *)v76 - 1);
        v76 -= 16;
        *((_OWORD *)v78 - 1) = v79;
        v78 -= 16;
        *(_QWORD *)v76 = 0;
        *((_QWORD *)v76 + 1) = 0;
      }
      while (v76 != v77);
      v80 = (void **)*v56;
      v76 = v56[1];
    }
    v68 = v75 + 16;
    *v56 = v78;
    v273 = v80;
    v274 = v80;
    v56[1] = v75 + 16;
    v275 = (uint64_t)v76;
    v81 = v56[2];
    v56[2] = &v73[16 * v74];
    v276 = v81;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v273);
  }
  else
  {
    *(_QWORD *)v67 = v63;
    *((_QWORD *)v67 + 1) = v64;
    v68 = v67 + 16;
    v252 = 0;
    v251 = 0;
  }
  v56[1] = v68;
  v82 = v250;
  v250 = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = v249;
  if (v249)
  {
    v84 = (unint64_t *)&v249->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  if (__p)
  {
    v259 = __p;
    operator delete(__p);
  }
  if (v267)
  {
    v268 = v267;
    operator delete(v267);
  }
  *(_OWORD *)v244 = *(_OWORD *)a2;
  v245 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v86 = (uint64_t)v262;
  v242 = (uint64_t)v262;
  if (v262)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = (std::__shared_weak_count_vtbl *)v86;
  }
  else
  {
    v87 = 0;
  }
  v243 = v87;
  v262 = 0;
  v240 = v253;
  if (v253)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v253;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v241 = v88;
  v253 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v265, a3);
  }
  else
  {
    v265[0] = &unk_24BFE7440;
    v265[1] = ANEMachineIR::H2020::Validators::ValidateBasePePool;
    v266 = (MIL::Validation::TensorDTypeConstraints *)v265;
  }
  v264 = 0;
  MIL::IROperator::Make();
  v90 = v264;
  if (v264 == v263)
  {
    v91 = 4;
    v90 = v263;
  }
  else
  {
    if (!v264)
      goto LABEL_92;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_92:
  v92 = v266;
  if (v266 == (MIL::Validation::TensorDTypeConstraints *)v265)
  {
    v93 = 4;
    v92 = (MIL::Validation::TensorDTypeConstraints *)v265;
    goto LABEL_96;
  }
  if (v266)
  {
    v93 = 5;
LABEL_96:
    v92 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v92 + 8 * v93))();
  }
  if (v241)
  {
    v94 = &v241->__shared_owners_;
    do
      v95 = __ldaxr((unint64_t *)v94);
    while (__stlxr(v95 - 1, (unint64_t *)v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  if (v243)
  {
    v96 = &v243->__shared_owners_;
    do
      v97 = __ldaxr((unint64_t *)v96);
    while (__stlxr(v97 - 1, (unint64_t *)v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  if (SHIBYTE(v245) < 0)
    operator delete(v244[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v92);
  v98 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v236, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v238 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v239 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v234, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v98 + 3))(v98, &v238, v234);
  if (v235 < 0)
    operator delete(v234[0]);
  v101 = v239;
  if (v239)
  {
    v102 = (unint64_t *)&v239->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v237 < 0)
    operator delete(v236);
  v105 = v273;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v232 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v233 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v230, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v105 + 3))(v105, &v232, v230);
  if (v231 < 0)
    operator delete(v230[0]);
  v108 = v233;
  if (v233)
  {
    v109 = (unint64_t *)&v233->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  v112 = *a4;
  v228 = v273;
  if (v273)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v273;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v229 = v113;
  v273 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v112 + 56))(v112, &v228);
  v115 = v229;
  if (v229)
  {
    v116 = (unint64_t *)&v229->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = (MIL::Validation::TensorRankValueConstraints *)v273;
  v273 = 0;
  if (v118)
    v118 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v118 + 8))(v118);
  MIL::Validation::TensorRankValueConstraints::Make(v118);
  v119 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v224, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v226 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v227 = v120;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v119 + 4))(v119, &v226, 3, 5);
  v122 = v227;
  if (v227)
  {
    v123 = (unint64_t *)&v227->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  if (v225 < 0)
    operator delete(v224);
  v126 = *a4;
  v222 = v273;
  if (v273)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v273;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = (std::__shared_weak_count_vtbl *)v128;
  }
  else
  {
    v127 = 0;
  }
  v223 = v127;
  v273 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v126 + 56))(v126, &v222);
  v129 = v223;
  if (v223)
  {
    v130 = (unint64_t *)&v223->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (MIL::Validation::TensorSymbolicShapeConstraints *)v273;
  v273 = 0;
  if (v132)
    v132 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v132 + 8))(v132);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v132);
  v133 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v218, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v220 = Scalar;
  if (Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v221 = v134;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v216, "Batch");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v133 + 3))(v133, &v220, 0, v216);
  if (v217 < 0)
    operator delete(v216[0]);
  v136 = v221;
  if (v221)
  {
    v137 = (unint64_t *)&v221->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = Scalar;
  Scalar = 0;
  if (v139)
    (*((void (**)(std::__shared_weak_count_vtbl *))v139->~__shared_weak_count + 1))(v139);
  if (v219 < 0)
    operator delete(v218);
  v140 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v212, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v214 = Scalar;
  if (Scalar)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = Scalar;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v215 = v141;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v210, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))*v140 + 4))(v140, &v214, 1, -2, v210);
  if (v211 < 0)
    operator delete(v210[0]);
  v143 = v215;
  if (v215)
  {
    v144 = (unint64_t *)&v215->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = Scalar;
  Scalar = 0;
  if (v146)
    (*((void (**)(std::__shared_weak_count_vtbl *))v146->~__shared_weak_count + 1))(v146);
  if (v213 < 0)
    operator delete(v212);
  v147 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v206, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v208 = Scalar;
  if (Scalar)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = Scalar;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v209 = v148;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v204, "Cin");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v147 + 3))(v147, &v208, -1, v204);
  if (v205 < 0)
    operator delete(v204[0]);
  v150 = v209;
  if (v209)
  {
    v151 = (unint64_t *)&v209->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = Scalar;
  Scalar = 0;
  if (v153)
    (*((void (**)(std::__shared_weak_count_vtbl *))v153->~__shared_weak_count + 1))(v153);
  if (v207 < 0)
    operator delete(v206);
  v154 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v200, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v202 = Scalar;
  if (Scalar)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = Scalar;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v203 = v155;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v198, "NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v154 + 3))(v154, &v202, 0, v198);
  if (v199 < 0)
    operator delete(v198[0]);
  v157 = v203;
  if (v203)
  {
    v158 = (unint64_t *)&v203->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = Scalar;
  Scalar = 0;
  if (v160)
    (*((void (**)(std::__shared_weak_count_vtbl *))v160->~__shared_weak_count + 1))(v160);
  if (v201 < 0)
    operator delete(v200);
  v161 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v194, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v196 = Scalar;
  if (Scalar)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = Scalar;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v197 = v162;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v192, "NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v161 + 3))(v161, &v196, 0, v192);
  if (v193 < 0)
    operator delete(v192[0]);
  v164 = v197;
  if (v197)
  {
    v165 = (unint64_t *)&v197->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = Scalar;
  Scalar = 0;
  if (v167)
    (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
  if (v195 < 0)
    operator delete(v194);
  v168 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v188, "custom_pads");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v190 = Scalar;
  if (Scalar)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = Scalar;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = v170;
  }
  else
  {
    v169 = 0;
  }
  v191 = v169;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v186, "TWICE_NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v168 + 3))(v168, &v190, 0, v186);
  if (v187 < 0)
    operator delete(v186[0]);
  v171 = v191;
  if (v191)
  {
    v172 = (unint64_t *)&v191->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = Scalar;
  Scalar = 0;
  if (v174)
    (*((void (**)(std::__shared_weak_count_vtbl *))v174->~__shared_weak_count + 1))(v174);
  if (v189 < 0)
    operator delete(v188);
  v175 = *a4;
  v184 = v273;
  if (v273)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = v273;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = (std::__shared_weak_count_vtbl *)v177;
  }
  else
  {
    v176 = 0;
  }
  v185 = v176;
  v273 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v175 + 56))(v175, &v184);
  v178 = v185;
  if (v185)
  {
    v179 = (unint64_t *)&v185->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = v273;
  v273 = 0;
  if (v181)
    (*((void (**)(void **))*v181 + 1))(v181);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v253, 0);
  result = (uint64_t)v262;
  if (v262)
  {
    v183 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v262);
    return MEMORY[0x20BCFF140](v183, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206955D5C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2020::PeAvgPool::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void **v41;
  unsigned __int8 *v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  void **v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  void **v90;
  char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  char **v99;
  _QWORD *v100;
  uint64_t v101;
  MIL::Validation::TensorDTypeConstraints *v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t *v106;
  unint64_t v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void **v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  MIL::Validation::TensorRankValueConstraints *v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count_vtbl *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void **v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  MIL::Validation::TensorSymbolicShapeConstraints *v142;
  void **v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  void **v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count_vtbl *v156;
  void **v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  void **v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count_vtbl *v170;
  void **v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count_vtbl *v177;
  void **v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count_vtbl *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  void **v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void **v191;
  uint64_t result;
  uint64_t v193;
  void **v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  void *v198;
  char v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  void *v202[2];
  char v203;
  void *v204;
  char v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  void *v208[2];
  char v209;
  void *v210;
  char v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  void *v214[2];
  char v215;
  void *v216;
  char v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  void *v220[2];
  char v221;
  void *v222;
  char v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  void *v226[2];
  char v227;
  void *v228;
  char v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  void **v232;
  std::__shared_weak_count *v233;
  void *v234;
  char v235;
  std::__shared_weak_count_vtbl *v236;
  std::__shared_weak_count *v237;
  void **v238;
  std::__shared_weak_count *v239;
  void *v240[2];
  char v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  char v245;
  void *v246;
  char v247;
  std::__shared_weak_count_vtbl *v248;
  std::__shared_weak_count *v249;
  char **v250;
  std::__shared_weak_count *v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  void *v254[2];
  uint64_t v255;
  void *v256;
  void *v257;
  _QWORD *v258;
  std::__shared_weak_count *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char **v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count *v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count *v267;
  std::__shared_weak_count *v268;
  std::__shared_weak_count *v269;
  void *__p;
  void *v271;
  _QWORD *v272;
  std::__shared_weak_count *v273;
  _QWORD *v274;
  _BYTE v275[24];
  _BYTE *v276;
  _QWORD v277[3];
  MIL::Validation::TensorDTypeConstraints *v278;
  void *v279;
  void *v280;
  _QWORD *v281;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v284;
  void **v285;
  void **v286;
  uint64_t v287;
  char *v288;
  char **v289;
  uint64_t v290;

  v290 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v274 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v284 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v285 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v280 = v14 + 3;
  v281 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v279 = v14;
  v286 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v272 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v271 = v18 + 3;
  v287 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v256);
  v19 = v256;
  v256 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v273;
  if (v273)
  {
    p_shared_owners = (unint64_t *)&v273->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v271 = __p;
    operator delete(__p);
  }
  if (v279)
  {
    v280 = v279;
    operator delete(v279);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v274;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (void **)operator new(8uLL);
  v285 = v25;
  *v25 = (void *)v24;
  v286 = v25 + 1;
  v287 = (uint64_t)(v25 + 1);
  v279 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v23, "kernel_sizes", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = v269;
  if (v269)
  {
    v29 = (unint64_t *)&v269->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v285)
  {
    v286 = v285;
    operator delete(v285);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v31 = v274;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (void **)operator new(8uLL);
  v285 = v33;
  *v33 = (void *)v32;
  v286 = v33 + 1;
  v287 = (uint64_t)(v33 + 1);
  v279 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v31, "strides", (uint64_t *)&Scalar);
  v35 = Scalar;
  Scalar = 0;
  if (v35)
    (*((void (**)(std::__shared_weak_count_vtbl *))v35->~__shared_weak_count + 1))(v35);
  v36 = v268;
  if (v268)
  {
    v37 = (unint64_t *)&v268->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v285)
  {
    v286 = v285;
    operator delete(v285);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v39 = v274;
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = (void **)operator new(8uLL);
  v285 = v41;
  *v41 = (void *)v40;
  v286 = v41 + 1;
  v287 = (uint64_t)(v41 + 1);
  v279 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v39, "custom_pads", (uint64_t *)&Scalar);
  v43 = Scalar;
  Scalar = 0;
  if (v43)
    (*((void (**)(std::__shared_weak_count_vtbl *))v43->~__shared_weak_count + 1))(v43);
  v44 = v267;
  if (v267)
  {
    v45 = (unint64_t *)&v267->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v285)
  {
    v286 = v285;
    operator delete(v285);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v47 = v274;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v47, "post_scale", (uint64_t *)&v285);
  v49 = v285;
  v285 = 0;
  if (v49)
    (*((void (**)(void **))*v49 + 1))(v49);
  v50 = v266;
  if (v266)
  {
    v51 = (unint64_t *)&v266->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 48))(*((_QWORD *)v48 + 5), 1);
  v53 = v274;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v53, "include_pads", (uint64_t *)&v285);
  v55 = v285;
  v285 = 0;
  if (v55)
    (*((void (**)(void **))*v55 + 1))(v55);
  v56 = v265;
  if (v265)
  {
    v57 = (unint64_t *)&v265->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 48))(*((_QWORD *)v54 + 5), 1);
  v59 = v274;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v59, "pre_relu", (uint64_t *)&v285);
  v61 = v285;
  v285 = 0;
  if (v61)
    (*((void (**)(void **))*v61 + 1))(v61);
  v62 = v264;
  if (v264)
  {
    v63 = (unint64_t *)&v264->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 48))(*((_QWORD *)v60 + 5), 1);
  v263 = 0;
  v65 = operator new();
  *(_QWORD *)v65 = 0;
  *(_QWORD *)(v65 + 8) = 0;
  *(_QWORD *)(v65 + 16) = 0;
  v285 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v263, (void **)v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v285, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v263, 1uLL);
  v66 = v263;
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v279 = v68;
  *v68 = v67;
  v280 = v68 + 1;
  v281 = v68 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  __p = v70;
  *v70 = v69;
  v272 = v70 + 1;
  v271 = v70 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v256 = v72;
  *v72 = v71;
  v258 = v72 + 1;
  v257 = v72 + 1;
  v284 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v73 = v260;
  v261 = v260;
  if (v260)
  {
    v74 = (_QWORD *)operator new();
    v75 = v260;
    *v74 = &unk_24BFE7320;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  v262 = v74;
  v260 = 0;
  v76 = v66[2];
  v77 = v66[1];
  if (v77 >= v76)
  {
    v79 = (v77 - *v66) >> 4;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v81 = v76 - *v66;
    if (v81 >> 3 > v80)
      v80 = v81 >> 3;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
      v82 = 0xFFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    v289 = v66 + 2;
    v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v66 + 2), v82);
    v85 = &v83[16 * v79];
    *(_QWORD *)v85 = v73;
    *((_QWORD *)v85 + 1) = v74;
    v262 = 0;
    v261 = 0;
    v87 = *v66;
    v86 = v66[1];
    if (v86 == *v66)
    {
      v90 = (void **)v66[1];
      v88 = &v83[16 * v79];
    }
    else
    {
      v88 = &v83[16 * v79];
      do
      {
        v89 = *((_OWORD *)v86 - 1);
        v86 -= 16;
        *((_OWORD *)v88 - 1) = v89;
        v88 -= 16;
        *(_QWORD *)v86 = 0;
        *((_QWORD *)v86 + 1) = 0;
      }
      while (v86 != v87);
      v90 = (void **)*v66;
      v86 = v66[1];
    }
    v78 = v85 + 16;
    *v66 = v88;
    v285 = v90;
    v286 = v90;
    v66[1] = v85 + 16;
    v287 = (uint64_t)v86;
    v91 = v66[2];
    v66[2] = &v83[16 * v84];
    v288 = v91;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v285);
  }
  else
  {
    *(_QWORD *)v77 = v73;
    *((_QWORD *)v77 + 1) = v74;
    v78 = v77 + 16;
    v262 = 0;
    v261 = 0;
  }
  v66[1] = v78;
  v92 = v260;
  v260 = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  v93 = v259;
  if (v259)
  {
    v94 = (unint64_t *)&v259->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  if (__p)
  {
    v271 = __p;
    operator delete(__p);
  }
  if (v279)
  {
    v280 = v279;
    operator delete(v279);
  }
  *(_OWORD *)v254 = *(_OWORD *)a2;
  v255 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v96 = (uint64_t)v274;
  v252 = (uint64_t)v274;
  if (v274)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v97 = 0;
  }
  v253 = v97;
  v274 = 0;
  v250 = v263;
  if (v263)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v263;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v251 = v98;
  v263 = 0;
  v277[0] = &unk_24BFE7440;
  v277[1] = ANEMachineIR::H2020::Validators::ValidatePeAvgPool;
  v278 = (MIL::Validation::TensorDTypeConstraints *)v277;
  v276 = 0;
  MIL::IROperator::Make();
  v100 = v276;
  if (v276 == v275)
  {
    v101 = 4;
    v100 = v275;
  }
  else
  {
    if (!v276)
      goto LABEL_103;
    v101 = 5;
  }
  (*(void (**)(void))(*v100 + 8 * v101))();
LABEL_103:
  v102 = v278;
  if (v278 == (MIL::Validation::TensorDTypeConstraints *)v277)
  {
    v103 = 4;
    v102 = (MIL::Validation::TensorDTypeConstraints *)v277;
    goto LABEL_107;
  }
  if (v278)
  {
    v103 = 5;
LABEL_107:
    v102 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v102 + 8 * v103))();
  }
  if (v251)
  {
    v104 = &v251->__shared_owners_;
    do
      v105 = __ldaxr((unint64_t *)v104);
    while (__stlxr(v105 - 1, (unint64_t *)v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
  if (v253)
  {
    v106 = &v253->__shared_owners_;
    do
      v107 = __ldaxr((unint64_t *)v106);
    while (__stlxr(v107 - 1, (unint64_t *)v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  if (SHIBYTE(v255) < 0)
    operator delete(v254[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v102);
  v108 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v246, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v248 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v249 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v244, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v108 + 3))(v108, &v248, v244);
  if (v245 < 0)
    operator delete(v244[0]);
  v111 = v249;
  if (v249)
  {
    v112 = (unint64_t *)&v249->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v247 < 0)
    operator delete(v246);
  v115 = v285;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v242 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v243 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v240, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v115 + 3))(v115, &v242, v240);
  if (v241 < 0)
    operator delete(v240[0]);
  v118 = v243;
  if (v243)
  {
    v119 = (unint64_t *)&v243->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  v122 = *a3;
  v238 = v285;
  if (v285)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v285;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
  }
  else
  {
    v123 = 0;
  }
  v239 = v123;
  v285 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v122 + 56))(v122, &v238);
  v125 = v239;
  if (v239)
  {
    v126 = (unint64_t *)&v239->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (MIL::Validation::TensorRankValueConstraints *)v285;
  v285 = 0;
  if (v128)
    v128 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v128 + 8))(v128);
  MIL::Validation::TensorRankValueConstraints::Make(v128);
  v129 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v234, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v236 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v237 = v130;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v129 + 4))(v129, &v236, 3, 5);
  v132 = v237;
  if (v237)
  {
    v133 = (unint64_t *)&v237->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*((void (**)(std::__shared_weak_count_vtbl *))v135->~__shared_weak_count + 1))(v135);
  if (v235 < 0)
    operator delete(v234);
  v136 = *a3;
  v232 = v285;
  if (v285)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = v285;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = (std::__shared_weak_count_vtbl *)v138;
  }
  else
  {
    v137 = 0;
  }
  v233 = v137;
  v285 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v136 + 56))(v136, &v232);
  v139 = v233;
  if (v233)
  {
    v140 = (unint64_t *)&v233->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = (MIL::Validation::TensorSymbolicShapeConstraints *)v285;
  v285 = 0;
  if (v142)
    v142 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v142 + 8))(v142);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v142);
  v143 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v228, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v230 = Scalar;
  if (Scalar)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = Scalar;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v231 = v144;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v226, "Batch");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v143 + 3))(v143, &v230, 0, v226);
  if (v227 < 0)
    operator delete(v226[0]);
  v146 = v231;
  if (v231)
  {
    v147 = (unint64_t *)&v231->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*((void (**)(std::__shared_weak_count_vtbl *))v149->~__shared_weak_count + 1))(v149);
  if (v229 < 0)
    operator delete(v228);
  v150 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v222, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v224 = Scalar;
  if (Scalar)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = Scalar;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v152;
  }
  else
  {
    v151 = 0;
  }
  v225 = v151;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v220, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))*v150 + 4))(v150, &v224, 1, -2, v220);
  if (v221 < 0)
    operator delete(v220[0]);
  v153 = v225;
  if (v225)
  {
    v154 = (unint64_t *)&v225->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = Scalar;
  Scalar = 0;
  if (v156)
    (*((void (**)(std::__shared_weak_count_vtbl *))v156->~__shared_weak_count + 1))(v156);
  if (v223 < 0)
    operator delete(v222);
  v157 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v216, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v218 = Scalar;
  if (Scalar)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = Scalar;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v219 = v158;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v214, "Cin");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v157 + 3))(v157, &v218, -1, v214);
  if (v215 < 0)
    operator delete(v214[0]);
  v160 = v219;
  if (v219)
  {
    v161 = (unint64_t *)&v219->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = Scalar;
  Scalar = 0;
  if (v163)
    (*((void (**)(std::__shared_weak_count_vtbl *))v163->~__shared_weak_count + 1))(v163);
  if (v217 < 0)
    operator delete(v216);
  v164 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v210, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v212 = Scalar;
  if (Scalar)
  {
    v165 = (std::__shared_weak_count *)operator new();
    v166 = Scalar;
    v165->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v165->__shared_owners_ = 0;
    v165->__shared_weak_owners_ = 0;
    v165[1].__vftable = v166;
  }
  else
  {
    v165 = 0;
  }
  v213 = v165;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v208, "NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v164 + 3))(v164, &v212, 0, v208);
  if (v209 < 0)
    operator delete(v208[0]);
  v167 = v213;
  if (v213)
  {
    v168 = (unint64_t *)&v213->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = Scalar;
  Scalar = 0;
  if (v170)
    (*((void (**)(std::__shared_weak_count_vtbl *))v170->~__shared_weak_count + 1))(v170);
  if (v211 < 0)
    operator delete(v210);
  v171 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v204, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v206 = Scalar;
  if (Scalar)
  {
    v172 = (std::__shared_weak_count *)operator new();
    v173 = Scalar;
    v172->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v172->__shared_owners_ = 0;
    v172->__shared_weak_owners_ = 0;
    v172[1].__vftable = v173;
  }
  else
  {
    v172 = 0;
  }
  v207 = v172;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v202, "NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v171 + 3))(v171, &v206, 0, v202);
  if (v203 < 0)
    operator delete(v202[0]);
  v174 = v207;
  if (v207)
  {
    v175 = (unint64_t *)&v207->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = Scalar;
  Scalar = 0;
  if (v177)
    (*((void (**)(std::__shared_weak_count_vtbl *))v177->~__shared_weak_count + 1))(v177);
  if (v205 < 0)
    operator delete(v204);
  v178 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v198, "custom_pads");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v200 = Scalar;
  if (Scalar)
  {
    v179 = (std::__shared_weak_count *)operator new();
    v180 = Scalar;
    v179->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v179->__shared_owners_ = 0;
    v179->__shared_weak_owners_ = 0;
    v179[1].__vftable = v180;
  }
  else
  {
    v179 = 0;
  }
  v201 = v179;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "TWICE_NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v178 + 3))(v178, &v200, 0, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v181 = v201;
  if (v201)
  {
    v182 = (unint64_t *)&v201->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = Scalar;
  Scalar = 0;
  if (v184)
    (*((void (**)(std::__shared_weak_count_vtbl *))v184->~__shared_weak_count + 1))(v184);
  if (v199 < 0)
    operator delete(v198);
  v185 = *a3;
  v194 = v285;
  if (v285)
  {
    v186 = (std::__shared_weak_count *)operator new();
    v187 = v285;
    v186->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v186->__shared_owners_ = 0;
    v186->__shared_weak_owners_ = 0;
    v186[1].__vftable = (std::__shared_weak_count_vtbl *)v187;
  }
  else
  {
    v186 = 0;
  }
  v195 = v186;
  v285 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v185 + 56))(v185, &v194);
  v188 = v195;
  if (v195)
  {
    v189 = (unint64_t *)&v195->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = v285;
  v285 = 0;
  if (v191)
    (*((void (**)(void **))*v191 + 1))(v191);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v263, 0);
  result = (uint64_t)v274;
  if (v274)
  {
    v193 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v274);
    return MEMORY[0x20BCFF140](v193, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206957B4C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeMaxPool::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeMaxPool;
  v8 = v7;
  ANEMachineIR::H2020::BasePePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_206958300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeMinPool::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2020::Validators::ValidatePeMinPool;
  v8 = v7;
  ANEMachineIR::H2020::BasePePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_206958418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::BaseNeMatmul::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t result;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  void *v40[2];
  uint64_t v41;
  void *__p;
  void *v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  _QWORD *v49;
  _BYTE v50[24];
  _BYTE *v51;
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t Scalar;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  v49 = (_QWORD *)v4;
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v4, "acc_left_shift", (uint64_t *)&__p);
  v6 = __p;
  __p = 0;
  if (v6)
    (*(void (**)(void *))(*(_QWORD *)v6 + 8))(v6);
  v7 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v5 + 5) + 32))(*((_QWORD *)v5 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v5 + 5) + 48))(*((_QWORD *)v5 + 5), 1);
  v10 = v49;
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v10, "post_right_shift", (uint64_t *)&__p);
  v12 = __p;
  __p = 0;
  if (v12)
    (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
  v13 = v47;
  if (v47)
  {
    v14 = (unint64_t *)&v47->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 32))(*((_QWORD *)v11 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 48))(*((_QWORD *)v11 + 5), 1);
  v16 = v49;
  Scalar = MIL::IRTensorValueType::MakeScalar();
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v43 = v18 + 1;
  v44 = v18 + 1;
  v55 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v16, "post_scale", &v46);
  v20 = v46;
  v46 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v45;
  if (v45)
  {
    v22 = (unint64_t *)&v45->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v19 + 5) + 32))(*((_QWORD *)v19 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v19 + 5) + 48))(*((_QWORD *)v19 + 5), 1);
  __p = 0;
  *(_OWORD *)v40 = *(_OWORD *)a2;
  v41 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v24 = (uint64_t)v49;
  if (v49)
  {
    v25 = (std::__shared_weak_count *)operator new();
    v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v25->__shared_owners_ = 0;
    v25->__shared_weak_owners_ = 0;
    v25[1].__vftable = (std::__shared_weak_count_vtbl *)v24;
    v39 = v25;
    v49 = 0;
    if (__p)
    {
      v26 = (std::__shared_weak_count *)operator new();
      v27 = (std::__shared_weak_count_vtbl *)__p;
      v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
      v26->__shared_owners_ = 0;
      v26->__shared_weak_owners_ = 0;
      v26[1].__vftable = v27;
    }
    else
    {
      v26 = 0;
    }
  }
  else
  {
    v26 = 0;
    v39 = 0;
    v49 = 0;
  }
  v38 = v26;
  __p = 0;
  v52[0] = &unk_24BFE7440;
  v52[1] = ANEMachineIR::H2021::Validators::ValidateBaseNeMatmul;
  v53 = v52;
  v51 = 0;
  MIL::IROperator::Make();
  v28 = v51;
  if (v51 == v50)
  {
    v29 = 4;
    v28 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_34;
    v29 = 5;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v29))(v28);
LABEL_34:
  v30 = v53;
  if (v53 == v52)
  {
    v31 = 4;
    v30 = v52;
    goto LABEL_38;
  }
  if (v53)
  {
    v31 = 5;
LABEL_38:
    (*(void (**)(_QWORD *))(*v30 + 8 * v31))(v30);
  }
  if (v38)
  {
    v32 = (unint64_t *)&v38->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v39)
  {
    v34 = (unint64_t *)&v39->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v49;
  if (v49)
  {
    v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v49);
    return MEMORY[0x20BCFF140](v37, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206958990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a20, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a30, 0);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2021::NeBatchMatmul::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  void **v8;
  uint64_t *p_shared_owners;
  unint64_t v10;
  unsigned __int8 *v11;
  void **v12;
  uint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  uint64_t v16;
  void **v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count_vtbl *v57;
  unsigned __int8 *v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  char **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  void **v94;
  char *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  char **v103;
  _QWORD *v104;
  uint64_t v105;
  MIL::Validation::TensorDTypeConstraints *v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  unint64_t v111;
  void **v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  void **v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count_vtbl *v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count_vtbl *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void **v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  MIL::Validation::TensorRankValueConstraints *v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count_vtbl *v153;
  void **v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count_vtbl *v160;
  void **v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  void **v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  MIL::Validation::TensorSymbolicShapeConstraints *v174;
  void **v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count_vtbl *v181;
  void **v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count_vtbl *v188;
  void **v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count_vtbl *v195;
  void **v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count_vtbl *v202;
  void **v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count_vtbl *v209;
  void **v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count_vtbl *v216;
  void **v217;
  std::__shared_weak_count *v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count_vtbl *v223;
  void **v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count_vtbl *v230;
  void **v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count_vtbl *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count_vtbl *v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  void **v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  void **v244;
  std::__shared_weak_count_vtbl *result;
  uint64_t v246;
  void **v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  void *v253[2];
  char v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  void *v257[2];
  char v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263;
  char v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  char v268;
  void *v269;
  char v270;
  std::__shared_weak_count_vtbl *v271;
  std::__shared_weak_count *v272;
  void *v273[2];
  char v274;
  void *v275;
  char v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  void *v279[2];
  char v280;
  void *v281;
  char v282;
  std::__shared_weak_count_vtbl *v283;
  std::__shared_weak_count *v284;
  void *v285[2];
  char v286;
  void *v287;
  char v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count *v290;
  void *v291[2];
  char v292;
  void *v293;
  char v294;
  std::__shared_weak_count_vtbl *v295;
  std::__shared_weak_count *v296;
  void **v297;
  std::__shared_weak_count *v298;
  std::__shared_weak_count_vtbl *v299;
  std::__shared_weak_count *v300;
  void *v301;
  char v302;
  std::__shared_weak_count_vtbl *v303;
  std::__shared_weak_count *v304;
  void *v305;
  char v306;
  std::__shared_weak_count_vtbl *v307;
  std::__shared_weak_count *v308;
  void **v309;
  std::__shared_weak_count *v310;
  void *v311[2];
  char v312;
  std::__shared_weak_count_vtbl *v313;
  std::__shared_weak_count *v314;
  void *v315[2];
  char v316;
  void *v317;
  char v318;
  std::__shared_weak_count_vtbl *v319;
  std::__shared_weak_count *v320;
  void *v321[2];
  char v322;
  void *v323;
  char v324;
  std::__shared_weak_count_vtbl *v325;
  std::__shared_weak_count *v326;
  void *v327[2];
  char v328;
  void *v329;
  char v330;
  std::__shared_weak_count_vtbl *v331;
  std::__shared_weak_count *v332;
  char **v333;
  std::__shared_weak_count *v334;
  std::__shared_weak_count_vtbl *v335;
  std::__shared_weak_count *v336;
  void *v337[2];
  uint64_t v338;
  void *v339;
  void *v340;
  _QWORD *v341;
  std::__shared_weak_count *v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  char **v346;
  std::__shared_weak_count *v347;
  std::__shared_weak_count *v348;
  void *__p;
  void *v350;
  _QWORD *v351;
  void *v352;
  void *v353;
  _QWORD *v354;
  std::__shared_weak_count *v355;
  std::__shared_weak_count *v356;
  std::__shared_weak_count *v357;
  std::__shared_weak_count *v358;
  std::__shared_weak_count_vtbl *v359;
  _BYTE v360[24];
  _BYTE *v361;
  _QWORD v362[3];
  MIL::Validation::TensorDTypeConstraints *v363;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v366;
  void **v367;
  void **v368;
  uint64_t v369;
  char *v370;
  char **v371;
  uint64_t v372;

  v372 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v359 = (std::__shared_weak_count_vtbl *)v6;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "acc_left_shift", (uint64_t *)&v367);
  v8 = v367;
  v367 = 0;
  if (v8)
    (*((void (**)(void **))*v8 + 1))(v8);
  if (v358)
  {
    p_shared_owners = &v358->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v10 - 1, (unint64_t *)p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
      std::__shared_weak_count::__release_weak(v358);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v7 + 5) + 32))(*((_QWORD *)v7 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v7 + 5) + 48))(*((_QWORD *)v7 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v359, "post_right_shift", (uint64_t *)&v367);
  v12 = v367;
  v367 = 0;
  if (v12)
    (*((void (**)(void **))*v12 + 1))(v12);
  if (v357)
  {
    v13 = &v357->__shared_owners_;
    do
      v14 = __ldaxr((unint64_t *)v13);
    while (__stlxr(v14 - 1, (unint64_t *)v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 32))(*((_QWORD *)v11 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 48))(*((_QWORD *)v11 + 5), 1);
  v15 = v359;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = (void **)operator new(8uLL);
  v367 = v17;
  *v17 = (void *)v16;
  v368 = v17 + 1;
  v369 = (uint64_t)(v17 + 1);
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v15, "post_scale", (uint64_t *)&v352);
  v19 = v352;
  v352 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v356;
  if (v356)
  {
    v21 = (unint64_t *)&v356->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v367)
  {
    v368 = v367;
    operator delete(v367);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v359;
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v27->__get_deleter;
  v366 = (uint64_t)&v27->__get_deleter;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v27->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  Scalar = v27;
  v367 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = operator new(0x18uLL);
  v354 = v31 + 3;
  *v31 = v28;
  v31[1] = v29;
  v31[2] = v30;
  v352 = v31;
  v353 = v31 + 3;
  v368 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = operator new(0x18uLL);
  v351 = v35 + 3;
  *v35 = v32;
  v35[1] = v33;
  v35[2] = v34;
  __p = v35;
  v350 = v35 + 3;
  v369 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v23, "x", (uint64_t *)&v339);
  v36 = v339;
  v339 = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  v37 = v355;
  if (v355)
  {
    v38 = (unint64_t *)&v355->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (__p)
  {
    v350 = __p;
    operator delete(__p);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v40 = v359;
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v44->__get_deleter;
  v366 = (uint64_t)&v44->__get_deleter;
  v44->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v41;
  v44->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v42;
  v44->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v43;
  Scalar = v44;
  v367 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = operator new(0x18uLL);
  v354 = v48 + 3;
  *v48 = v45;
  v48[1] = v46;
  v48[2] = v47;
  v352 = v48;
  v353 = v48 + 3;
  v368 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = operator new(0x18uLL);
  v351 = v52 + 3;
  *v52 = v49;
  v52[1] = v50;
  v52[2] = v51;
  __p = v52;
  v350 = v52 + 3;
  v369 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v40, "y", (uint64_t *)&v339);
  v53 = v339;
  v339 = 0;
  if (v53)
    (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
  v54 = v348;
  if (v348)
  {
    v55 = (unint64_t *)&v348->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (__p)
  {
    v350 = __p;
    operator delete(__p);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v57 = v359;
  v367 = (void **)MIL::IRTensorValueType::MakeScalar();
  v368 = (void **)MIL::IRTensorValueType::MakeScalar();
  v369 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v58 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v57, "matrix_vector_bias", (uint64_t *)&Scalar);
  v59 = Scalar;
  Scalar = 0;
  if (v59)
    (*((void (**)(std::__shared_weak_count_vtbl *))v59->~__shared_weak_count + 1))(v59);
  v60 = v347;
  if (v347)
  {
    v61 = (unint64_t *)&v347->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v58 + 5) + 32))(*((_QWORD *)v58 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v58 + 5) + 48))(*((_QWORD *)v58 + 5), 1);
  v346 = 0;
  v63 = operator new();
  *(_QWORD *)v63 = 0;
  *(_QWORD *)(v63 + 8) = 0;
  *(_QWORD *)(v63 + 16) = 0;
  v367 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v346, (void **)v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v367, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v346, 1uLL);
  v64 = v346;
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = operator new(0x18uLL);
  v354 = v68 + 3;
  *v68 = v65;
  v68[1] = v66;
  v68[2] = v67;
  v352 = v68;
  v353 = v68 + 3;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = MIL::IRUnknownDimension::Make(a1, 0);
  v72 = operator new(0x18uLL);
  v351 = v72 + 3;
  *v72 = v69;
  v72[1] = v70;
  v72[2] = v71;
  __p = v72;
  v350 = v72 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = MIL::IRUnknownDimension::Make(a1, 0);
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = operator new(0x18uLL);
  v341 = v76 + 3;
  *v76 = v73;
  v76[1] = v74;
  v76[2] = v75;
  v339 = v76;
  v340 = v76 + 3;
  v366 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v77 = v343;
  v344 = v343;
  if (v343)
  {
    v78 = (_QWORD *)operator new();
    v79 = v343;
    *v78 = &unk_24BFE7320;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v79;
  }
  else
  {
    v78 = 0;
  }
  v345 = v78;
  v343 = 0;
  v80 = v64[2];
  v81 = v64[1];
  if (v81 >= v80)
  {
    v83 = (v81 - *v64) >> 4;
    v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v85 = v80 - *v64;
    if (v85 >> 3 > v84)
      v84 = v85 >> 3;
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
      v86 = 0xFFFFFFFFFFFFFFFLL;
    else
      v86 = v84;
    v371 = v64 + 2;
    v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v64 + 2), v86);
    v89 = &v87[16 * v83];
    *(_QWORD *)v89 = v77;
    *((_QWORD *)v89 + 1) = v78;
    v345 = 0;
    v344 = 0;
    v91 = *v64;
    v90 = v64[1];
    if (v90 == *v64)
    {
      v94 = (void **)v64[1];
      v92 = &v87[16 * v83];
    }
    else
    {
      v92 = &v87[16 * v83];
      do
      {
        v93 = *((_OWORD *)v90 - 1);
        v90 -= 16;
        *((_OWORD *)v92 - 1) = v93;
        v92 -= 16;
        *(_QWORD *)v90 = 0;
        *((_QWORD *)v90 + 1) = 0;
      }
      while (v90 != v91);
      v94 = (void **)*v64;
      v90 = v64[1];
    }
    v82 = v89 + 16;
    *v64 = v92;
    v367 = v94;
    v368 = v94;
    v64[1] = v89 + 16;
    v369 = (uint64_t)v90;
    v95 = v64[2];
    v64[2] = &v87[16 * v88];
    v370 = v95;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v367);
  }
  else
  {
    *(_QWORD *)v81 = v77;
    *((_QWORD *)v81 + 1) = v78;
    v82 = v81 + 16;
    v345 = 0;
    v344 = 0;
  }
  v64[1] = v82;
  v96 = v343;
  v343 = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = v342;
  if (v342)
  {
    v98 = (unint64_t *)&v342->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (v339)
  {
    v340 = v339;
    operator delete(v339);
  }
  if (__p)
  {
    v350 = __p;
    operator delete(__p);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  *(_OWORD *)v337 = *(_OWORD *)a2;
  v338 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v100 = v359;
  v335 = v359;
  if (v359)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v100;
  }
  else
  {
    v101 = 0;
  }
  v336 = v101;
  v359 = 0;
  v333 = v346;
  if (v346)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v346;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v334 = v102;
  v346 = 0;
  v362[0] = &unk_24BFE7440;
  v362[1] = ANEMachineIR::H2021::Validators::ValidateNeBatchMatmul;
  v363 = (MIL::Validation::TensorDTypeConstraints *)v362;
  v361 = 0;
  MIL::IROperator::Make();
  v104 = v361;
  if (v361 == v360)
  {
    v105 = 4;
    v104 = v360;
  }
  else
  {
    if (!v361)
      goto LABEL_98;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_98:
  v106 = v363;
  if (v363 == (MIL::Validation::TensorDTypeConstraints *)v362)
  {
    v107 = 4;
    v106 = (MIL::Validation::TensorDTypeConstraints *)v362;
    goto LABEL_102;
  }
  if (v363)
  {
    v107 = 5;
LABEL_102:
    v106 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v106 + 8 * v107))();
  }
  if (v334)
  {
    v108 = &v334->__shared_owners_;
    do
      v109 = __ldaxr((unint64_t *)v108);
    while (__stlxr(v109 - 1, (unint64_t *)v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
      std::__shared_weak_count::__release_weak(v334);
    }
  }
  if (v336)
  {
    v110 = &v336->__shared_owners_;
    do
      v111 = __ldaxr((unint64_t *)v110);
    while (__stlxr(v111 - 1, (unint64_t *)v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
      std::__shared_weak_count::__release_weak(v336);
    }
  }
  if (SHIBYTE(v338) < 0)
    operator delete(v337[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v106);
  v112 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v329, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v331 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v332 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v327, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v112 + 3))(v112, &v331, v327);
  if (v328 < 0)
    operator delete(v327[0]);
  v115 = v332;
  if (v332)
  {
    v116 = (unint64_t *)&v332->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*((void (**)(std::__shared_weak_count_vtbl *))v118->~__shared_weak_count + 1))(v118);
  if (v330 < 0)
    operator delete(v329);
  v119 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v323, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v325 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v326 = v120;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v321, "KernelT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v119 + 3))(v119, &v325, v321);
  if (v322 < 0)
    operator delete(v321[0]);
  v122 = v326;
  if (v326)
  {
    v123 = (unint64_t *)&v326->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  if (v324 < 0)
    operator delete(v323);
  v126 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v317, "matrix_vector_bias");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v319 = Scalar;
  if (Scalar)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = Scalar;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v320 = v127;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v315, "KernelT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v126 + 3))(v126, &v319, v315);
  if (v316 < 0)
    operator delete(v315[0]);
  v129 = v320;
  if (v320)
  {
    v130 = (unint64_t *)&v320->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = Scalar;
  Scalar = 0;
  if (v132)
    (*((void (**)(std::__shared_weak_count_vtbl *))v132->~__shared_weak_count + 1))(v132);
  if (v318 < 0)
    operator delete(v317);
  v133 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v313 = Scalar;
  if (Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v314 = v134;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v311, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v133 + 3))(v133, &v313, v311);
  if (v312 < 0)
    operator delete(v311[0]);
  v136 = v314;
  if (v314)
  {
    v137 = (unint64_t *)&v314->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = Scalar;
  Scalar = 0;
  if (v139)
    (*((void (**)(std::__shared_weak_count_vtbl *))v139->~__shared_weak_count + 1))(v139);
  v140 = *a3;
  v309 = v367;
  if (v367)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = v367;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = (std::__shared_weak_count_vtbl *)v142;
  }
  else
  {
    v141 = 0;
  }
  v310 = v141;
  v367 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v140 + 56))(v140, &v309);
  v143 = v310;
  if (v310)
  {
    v144 = (unint64_t *)&v310->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = (MIL::Validation::TensorRankValueConstraints *)v367;
  v367 = 0;
  if (v146)
    v146 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v146 + 8))(v146);
  MIL::Validation::TensorRankValueConstraints::Make(v146);
  v147 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v305, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v307 = Scalar;
  if (Scalar)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = Scalar;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v308 = v148;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v147 + 4))(v147, &v307, 3, 5);
  v150 = v308;
  if (v308)
  {
    v151 = (unint64_t *)&v308->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = Scalar;
  Scalar = 0;
  if (v153)
    (*((void (**)(std::__shared_weak_count_vtbl *))v153->~__shared_weak_count + 1))(v153);
  if (v306 < 0)
    operator delete(v305);
  v154 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v301, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v303 = Scalar;
  if (Scalar)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = Scalar;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v304 = v155;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v154 + 4))(v154, &v303, 3, 5);
  v157 = v304;
  if (v304)
  {
    v158 = (unint64_t *)&v304->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = Scalar;
  Scalar = 0;
  if (v160)
    (*((void (**)(std::__shared_weak_count_vtbl *))v160->~__shared_weak_count + 1))(v160);
  if (v302 < 0)
    operator delete(v301);
  v161 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v299 = Scalar;
  if (Scalar)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = Scalar;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v300 = v162;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v161 + 4))(v161, &v299, 3, 5);
  v164 = v300;
  if (v300)
  {
    v165 = (unint64_t *)&v300->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = Scalar;
  Scalar = 0;
  if (v167)
    (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
  v168 = *a3;
  v297 = v367;
  if (v367)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = v367;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = (std::__shared_weak_count_vtbl *)v170;
  }
  else
  {
    v169 = 0;
  }
  v298 = v169;
  v367 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v168 + 56))(v168, &v297);
  v171 = v298;
  if (v298)
  {
    v172 = (unint64_t *)&v298->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = (MIL::Validation::TensorSymbolicShapeConstraints *)v367;
  v367 = 0;
  if (v174)
    v174 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v174 + 8))(v174);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v174);
  v175 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v293, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v295 = Scalar;
  if (Scalar)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = Scalar;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = v177;
  }
  else
  {
    v176 = 0;
  }
  v296 = v176;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v291, "BatchX");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t, void **))*v175 + 4))(v175, &v295, 0, -3, v291);
  if (v292 < 0)
    operator delete(v291[0]);
  v178 = v296;
  if (v296)
  {
    v179 = (unint64_t *)&v296->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = Scalar;
  Scalar = 0;
  if (v181)
    (*((void (**)(std::__shared_weak_count_vtbl *))v181->~__shared_weak_count + 1))(v181);
  if (v294 < 0)
    operator delete(v293);
  v182 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v287, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v289 = Scalar;
  if (Scalar)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v184 = Scalar;
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = v184;
  }
  else
  {
    v183 = 0;
  }
  v290 = v183;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v285, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v182 + 3))(v182, &v289, -2, v285);
  if (v286 < 0)
    operator delete(v285[0]);
  v185 = v290;
  if (v290)
  {
    v186 = (unint64_t *)&v290->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = Scalar;
  Scalar = 0;
  if (v188)
    (*((void (**)(std::__shared_weak_count_vtbl *))v188->~__shared_weak_count + 1))(v188);
  if (v288 < 0)
    operator delete(v287);
  v189 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v281, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v283 = Scalar;
  if (Scalar)
  {
    v190 = (std::__shared_weak_count *)operator new();
    v191 = Scalar;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v190->__shared_owners_ = 0;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = v191;
  }
  else
  {
    v190 = 0;
  }
  v284 = v190;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v279, "M");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v189 + 3))(v189, &v283, -1, v279);
  if (v280 < 0)
    operator delete(v279[0]);
  v192 = v284;
  if (v284)
  {
    v193 = (unint64_t *)&v284->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = Scalar;
  Scalar = 0;
  if (v195)
    (*((void (**)(std::__shared_weak_count_vtbl *))v195->~__shared_weak_count + 1))(v195);
  if (v282 < 0)
    operator delete(v281);
  v196 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v275, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v277 = Scalar;
  if (Scalar)
  {
    v197 = (std::__shared_weak_count *)operator new();
    v198 = Scalar;
    v197->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v197->__shared_owners_ = 0;
    v197->__shared_weak_owners_ = 0;
    v197[1].__vftable = v198;
  }
  else
  {
    v197 = 0;
  }
  v278 = v197;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v273, "BatchY");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t, void **))*v196 + 4))(v196, &v277, 0, -3, v273);
  if (v274 < 0)
    operator delete(v273[0]);
  v199 = v278;
  if (v278)
  {
    v200 = (unint64_t *)&v278->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = Scalar;
  Scalar = 0;
  if (v202)
    (*((void (**)(std::__shared_weak_count_vtbl *))v202->~__shared_weak_count + 1))(v202);
  if (v276 < 0)
    operator delete(v275);
  v203 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v269, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v271 = Scalar;
  if (Scalar)
  {
    v204 = (std::__shared_weak_count *)operator new();
    v205 = Scalar;
    v204->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v204->__shared_owners_ = 0;
    v204->__shared_weak_owners_ = 0;
    v204[1].__vftable = v205;
  }
  else
  {
    v204 = 0;
  }
  v272 = v204;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v267, "M2");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v203 + 3))(v203, &v271, -2, v267);
  if (v268 < 0)
    operator delete(v267[0]);
  v206 = v272;
  if (v272)
  {
    v207 = (unint64_t *)&v272->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = Scalar;
  Scalar = 0;
  if (v209)
    (*((void (**)(std::__shared_weak_count_vtbl *))v209->~__shared_weak_count + 1))(v209);
  if (v270 < 0)
    operator delete(v269);
  v210 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v263, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v265 = Scalar;
  if (Scalar)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = Scalar;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = v212;
  }
  else
  {
    v211 = 0;
  }
  v266 = v211;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v210 + 3))(v210, &v265, -1, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v213 = v266;
  if (v266)
  {
    v214 = (unint64_t *)&v266->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = Scalar;
  Scalar = 0;
  if (v216)
    (*((void (**)(std::__shared_weak_count_vtbl *))v216->~__shared_weak_count + 1))(v216);
  if (v264 < 0)
    operator delete(v263);
  v217 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v259 = Scalar;
  if (Scalar)
  {
    v218 = (std::__shared_weak_count *)operator new();
    v219 = Scalar;
    v218->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v218->__shared_owners_ = 0;
    v218->__shared_weak_owners_ = 0;
    v218[1].__vftable = v219;
  }
  else
  {
    v218 = 0;
  }
  v260 = v218;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v257, "BatchXBatchYBroadcasted");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t, void **))*v217 + 4))(v217, &v259, 0, -3, v257);
  if (v258 < 0)
    operator delete(v257[0]);
  v220 = v260;
  if (v260)
  {
    v221 = (unint64_t *)&v260->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = Scalar;
  Scalar = 0;
  if (v223)
    (*((void (**)(std::__shared_weak_count_vtbl *))v223->~__shared_weak_count + 1))(v223);
  v224 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v255 = Scalar;
  if (Scalar)
  {
    v225 = (std::__shared_weak_count *)operator new();
    v226 = Scalar;
    v225->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v225->__shared_owners_ = 0;
    v225->__shared_weak_owners_ = 0;
    v225[1].__vftable = v226;
  }
  else
  {
    v225 = 0;
  }
  v256 = v225;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v253, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v224 + 3))(v224, &v255, -2, v253);
  if (v254 < 0)
    operator delete(v253[0]);
  v227 = v256;
  if (v256)
  {
    v228 = (unint64_t *)&v256->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v230 = Scalar;
  Scalar = 0;
  if (v230)
    (*((void (**)(std::__shared_weak_count_vtbl *))v230->~__shared_weak_count + 1))(v230);
  v231 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v251 = Scalar;
  if (Scalar)
  {
    v232 = (std::__shared_weak_count *)operator new();
    v233 = Scalar;
    v232->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v232->__shared_owners_ = 0;
    v232->__shared_weak_owners_ = 0;
    v232[1].__vftable = v233;
  }
  else
  {
    v232 = 0;
  }
  v252 = v232;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v231 + 3))(v231, &v251, -1, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v234 = v252;
  if (v252)
  {
    v235 = (unint64_t *)&v252->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v237 = Scalar;
  Scalar = 0;
  if (v237)
    (*((void (**)(std::__shared_weak_count_vtbl *))v237->~__shared_weak_count + 1))(v237);
  v238 = *a3;
  v247 = v367;
  if (v367)
  {
    v239 = (std::__shared_weak_count *)operator new();
    v240 = v367;
    v239->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v239->__shared_owners_ = 0;
    v239->__shared_weak_owners_ = 0;
    v239[1].__vftable = (std::__shared_weak_count_vtbl *)v240;
  }
  else
  {
    v239 = 0;
  }
  v248 = v239;
  v367 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v238 + 56))(v238, &v247);
  v241 = v248;
  if (v248)
  {
    v242 = (unint64_t *)&v248->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = v367;
  v367 = 0;
  if (v244)
    (*((void (**)(void **))*v244 + 1))(v244);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v346, 0);
  result = v359;
  if (v359)
  {
    v246 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v359);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v246, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20695A978(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3E8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 208), 0);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2021::NeMatmul::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  void **v8;
  uint64_t *p_shared_owners;
  unint64_t v10;
  unsigned __int8 *v11;
  void **v12;
  uint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  uint64_t v16;
  void **v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  uint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count_vtbl *v64;
  unsigned __int8 *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  __int128 v97;
  void **v98;
  char *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  char **v107;
  _QWORD *v108;
  uint64_t v109;
  MIL::Validation::TensorDTypeConstraints *v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  void **v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  void **v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count_vtbl *v129;
  void **v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  void **v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  void **v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  void **v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  MIL::Validation::TensorSymbolicShapeConstraints *v157;
  void **v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count_vtbl *v164;
  void **v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  void **v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count_vtbl *v178;
  void **v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count_vtbl *v185;
  void **v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count_vtbl *v192;
  void **v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count_vtbl *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  void **v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void **v206;
  std::__shared_weak_count_vtbl *result;
  uint64_t v208;
  void **v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  char v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  void *v215[2];
  char v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  void *v219[2];
  char v220;
  void *v221;
  char v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  void *v225[2];
  char v226;
  void *v227;
  char v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  void *v231[2];
  char v232;
  void *v233;
  char v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  void *v237[2];
  char v238;
  void *v239;
  char v240;
  std::__shared_weak_count_vtbl *v241;
  std::__shared_weak_count *v242;
  void **v243;
  std::__shared_weak_count *v244;
  void *v245[2];
  char v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  void *v251;
  char v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  char v256;
  void *v257;
  char v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263;
  char v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  char v268;
  void *v269;
  char v270;
  std::__shared_weak_count_vtbl *v271;
  std::__shared_weak_count *v272;
  char **v273;
  std::__shared_weak_count *v274;
  std::__shared_weak_count_vtbl *v275;
  std::__shared_weak_count *v276;
  void *v277[2];
  uint64_t v278;
  void *v279;
  void *v280;
  _QWORD *v281;
  std::__shared_weak_count *v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  char **v286;
  std::__shared_weak_count *v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count *v289;
  void *__p;
  void *v291;
  _QWORD *v292;
  void *v293;
  void *v294;
  _QWORD *v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count *v297;
  std::__shared_weak_count *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count_vtbl *v300;
  _BYTE v301[24];
  _BYTE *v302;
  _QWORD v303[3];
  MIL::Validation::TensorDTypeConstraints *v304;
  void **v305;
  void **v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v313;
  uint64_t v314;

  v314 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v300 = (std::__shared_weak_count_vtbl *)v6;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "acc_left_shift", (uint64_t *)&v305);
  v8 = v305;
  v305 = 0;
  if (v8)
    (*((void (**)(void **))*v8 + 1))(v8);
  if (v299)
  {
    p_shared_owners = &v299->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v10 - 1, (unint64_t *)p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v7 + 5) + 32))(*((_QWORD *)v7 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v7 + 5) + 48))(*((_QWORD *)v7 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v300, "post_right_shift", (uint64_t *)&v305);
  v12 = v305;
  v305 = 0;
  if (v12)
    (*((void (**)(void **))*v12 + 1))(v12);
  if (v298)
  {
    v13 = &v298->__shared_owners_;
    do
      v14 = __ldaxr((unint64_t *)v13);
    while (__stlxr(v14 - 1, (unint64_t *)v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 32))(*((_QWORD *)v11 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 48))(*((_QWORD *)v11 + 5), 1);
  v15 = v300;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = (void **)operator new(8uLL);
  v305 = v17;
  *v17 = (void *)v16;
  v306 = v17 + 1;
  v307 = (uint64_t)(v17 + 1);
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v15, "post_scale", (uint64_t *)&v293);
  v19 = v293;
  v293 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v297;
  if (v297)
  {
    v21 = (unint64_t *)&v297->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v300;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v26->__on_zero_shared;
  v313 = (uint64_t)&v26->__on_zero_shared;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v26->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  Scalar = v26;
  v305 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(0x10uLL);
  v295 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  v293 = v29;
  v294 = v29 + 2;
  v306 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x10uLL);
  v292 = v32 + 2;
  *v32 = v30;
  v32[1] = v31;
  __p = v32;
  v291 = v32 + 2;
  v307 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v23, "x", (uint64_t *)&v279);
  v33 = v279;
  v279 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = v296;
  if (v296)
  {
    v35 = (unint64_t *)&v296->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (__p)
  {
    v291 = __p;
    operator delete(__p);
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v37 = v300;
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v40->__on_zero_shared;
  v313 = (uint64_t)&v40->__on_zero_shared;
  v40->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
  v40->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
  Scalar = v40;
  v305 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x10uLL);
  v295 = v43 + 2;
  *v43 = v41;
  v43[1] = v42;
  v293 = v43;
  v294 = v43 + 2;
  v306 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = operator new(0x10uLL);
  v292 = v46 + 2;
  *v46 = v44;
  v46[1] = v45;
  __p = v46;
  v291 = v46 + 2;
  v307 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v37, "y", (uint64_t *)&v279);
  v48 = v279;
  v279 = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = v289;
  if (v289)
  {
    v50 = (unint64_t *)&v289->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (__p)
  {
    v291 = __p;
    operator delete(__p);
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v300;
  v305 = (void **)MIL::IRTensorValueType::MakeScalar();
  v306 = (void **)MIL::IRTensorValueType::MakeScalar();
  v307 = MIL::IRTensorValueType::MakeScalar();
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v54;
  v54->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v53;
  p_on_zero_shared = (uint64_t)&v54->~__shared_weak_count_0;
  v313 = (uint64_t)&v54->~__shared_weak_count_0;
  v308 = MIL::IRTensorValueType::MakeWithShape();
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v293 = v56;
  *v56 = v55;
  v295 = v56 + 1;
  v294 = v56 + 1;
  v309 = MIL::IRTensorValueType::MakeWithShape();
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v292 = v58 + 1;
  v291 = v58 + 1;
  v310 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v52, "bias", (uint64_t *)&v279);
  v60 = v279;
  v279 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = v288;
  if (v288)
  {
    v62 = (unint64_t *)&v288->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v291 = __p;
    operator delete(__p);
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v300;
  v305 = (void **)MIL::IRTensorValueType::MakeScalar();
  v306 = (void **)MIL::IRTensorValueType::MakeScalar();
  v307 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v64, "matrix_vector_bias", (uint64_t *)&Scalar);
  v66 = Scalar;
  Scalar = 0;
  if (v66)
    (*((void (**)(std::__shared_weak_count_vtbl *))v66->~__shared_weak_count + 1))(v66);
  v67 = v287;
  if (v287)
  {
    v68 = (unint64_t *)&v287->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v286 = 0;
  v70 = operator new();
  *(_QWORD *)v70 = 0;
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v70 + 16) = 0;
  v305 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v286, (void **)v70);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v305, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v286, 1uLL);
  v71 = v286;
  v72 = MIL::IRUnknownDimension::Make(a1, 0);
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = operator new(0x10uLL);
  v295 = v74 + 2;
  *v74 = v72;
  v74[1] = v73;
  v293 = v74;
  v294 = v74 + 2;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = operator new(0x10uLL);
  v292 = v77 + 2;
  *v77 = v75;
  v77[1] = v76;
  __p = v77;
  v291 = v77 + 2;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape();
  v78 = MIL::IRUnknownDimension::Make(a1, 0);
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = operator new(0x10uLL);
  v281 = v80 + 2;
  *v80 = v78;
  v80[1] = v79;
  v279 = v80;
  v280 = v80 + 2;
  v313 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v81 = v283;
  v284 = v283;
  if (v283)
  {
    v82 = (_QWORD *)operator new();
    v83 = v283;
    *v82 = &unk_24BFE7320;
    v82[1] = 0;
    v82[2] = 0;
    v82[3] = v83;
  }
  else
  {
    v82 = 0;
  }
  v285 = v82;
  v283 = 0;
  v84 = v71[2];
  v85 = v71[1];
  if (v85 >= v84)
  {
    v87 = (v85 - *v71) >> 4;
    v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v89 = v84 - *v71;
    if (v89 >> 3 > v88)
      v88 = v89 >> 3;
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF0)
      v90 = 0xFFFFFFFFFFFFFFFLL;
    else
      v90 = v88;
    v309 = (uint64_t)(v71 + 2);
    v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v71 + 2), v90);
    v93 = &v91[16 * v87];
    *(_QWORD *)v93 = v81;
    *((_QWORD *)v93 + 1) = v82;
    v285 = 0;
    v284 = 0;
    v95 = *v71;
    v94 = v71[1];
    if (v94 == *v71)
    {
      v98 = (void **)v71[1];
      v96 = &v91[16 * v87];
    }
    else
    {
      v96 = &v91[16 * v87];
      do
      {
        v97 = *((_OWORD *)v94 - 1);
        v94 -= 16;
        *((_OWORD *)v96 - 1) = v97;
        v96 -= 16;
        *(_QWORD *)v94 = 0;
        *((_QWORD *)v94 + 1) = 0;
      }
      while (v94 != v95);
      v98 = (void **)*v71;
      v94 = v71[1];
    }
    v86 = v93 + 16;
    *v71 = v96;
    v305 = v98;
    v306 = v98;
    v71[1] = v93 + 16;
    v307 = (uint64_t)v94;
    v99 = v71[2];
    v71[2] = &v91[16 * v92];
    v308 = (uint64_t)v99;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v305);
  }
  else
  {
    *(_QWORD *)v85 = v81;
    *((_QWORD *)v85 + 1) = v82;
    v86 = v85 + 16;
    v285 = 0;
    v284 = 0;
  }
  v71[1] = v86;
  v100 = v283;
  v283 = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  v101 = v282;
  if (v282)
  {
    v102 = (unint64_t *)&v282->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if (v279)
  {
    v280 = v279;
    operator delete(v279);
  }
  if (__p)
  {
    v291 = __p;
    operator delete(__p);
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  *(_OWORD *)v277 = *(_OWORD *)a2;
  v278 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v104 = v300;
  v275 = v300;
  if (v300)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v104;
  }
  else
  {
    v105 = 0;
  }
  v276 = v105;
  v300 = 0;
  v273 = v286;
  if (v286)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v286;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v274 = v106;
  v286 = 0;
  v303[0] = &unk_24BFE7440;
  v303[1] = ANEMachineIR::H2021::Validators::ValidateNeMatmul;
  v304 = (MIL::Validation::TensorDTypeConstraints *)v303;
  v302 = 0;
  MIL::IROperator::Make();
  v108 = v302;
  if (v302 == v301)
  {
    v109 = 4;
    v108 = v301;
  }
  else
  {
    if (!v302)
      goto LABEL_111;
    v109 = 5;
  }
  (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_111:
  v110 = v304;
  if (v304 == (MIL::Validation::TensorDTypeConstraints *)v303)
  {
    v111 = 4;
    v110 = (MIL::Validation::TensorDTypeConstraints *)v303;
    goto LABEL_115;
  }
  if (v304)
  {
    v111 = 5;
LABEL_115:
    v110 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v110 + 8 * v111))();
  }
  if (v274)
  {
    v112 = &v274->__shared_owners_;
    do
      v113 = __ldaxr((unint64_t *)v112);
    while (__stlxr(v113 - 1, (unint64_t *)v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
      std::__shared_weak_count::__release_weak(v274);
    }
  }
  if (v276)
  {
    v114 = &v276->__shared_owners_;
    do
      v115 = __ldaxr((unint64_t *)v114);
    while (__stlxr(v115 - 1, (unint64_t *)v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  if (SHIBYTE(v278) < 0)
    operator delete(v277[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v110);
  v116 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v269, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v271 = Scalar;
  if (Scalar)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = Scalar;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v272 = v117;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v267, "KernelT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v116 + 3))(v116, &v271, v267);
  if (v268 < 0)
    operator delete(v267[0]);
  v119 = v272;
  if (v272)
  {
    v120 = (unint64_t *)&v272->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = Scalar;
  Scalar = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v270 < 0)
    operator delete(v269);
  v123 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v263, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v265 = Scalar;
  if (Scalar)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = Scalar;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = v125;
  }
  else
  {
    v124 = 0;
  }
  v266 = v124;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v123 + 3))(v123, &v265, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v126 = v266;
  if (v266)
  {
    v127 = (unint64_t *)&v266->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = Scalar;
  Scalar = 0;
  if (v129)
    (*((void (**)(std::__shared_weak_count_vtbl *))v129->~__shared_weak_count + 1))(v129);
  if (v264 < 0)
    operator delete(v263);
  v130 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v257, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v259 = Scalar;
  if (Scalar)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = Scalar;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v260 = v131;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v255, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v130 + 3))(v130, &v259, v255);
  if (v256 < 0)
    operator delete(v255[0]);
  v133 = v260;
  if (v260)
  {
    v134 = (unint64_t *)&v260->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = Scalar;
  Scalar = 0;
  if (v136)
    (*((void (**)(std::__shared_weak_count_vtbl *))v136->~__shared_weak_count + 1))(v136);
  if (v258 < 0)
    operator delete(v257);
  v137 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v251, "matrix_vector_bias");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v253 = Scalar;
  if (Scalar)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = Scalar;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v254 = v138;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "KernelT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v137 + 3))(v137, &v253, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v140 = v254;
  if (v254)
  {
    v141 = (unint64_t *)&v254->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = Scalar;
  Scalar = 0;
  if (v143)
    (*((void (**)(std::__shared_weak_count_vtbl *))v143->~__shared_weak_count + 1))(v143);
  if (v252 < 0)
    operator delete(v251);
  v144 = v305;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v247 = Scalar;
  if (Scalar)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = Scalar;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v248 = v145;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v245, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v144 + 3))(v144, &v247, v245);
  if (v246 < 0)
    operator delete(v245[0]);
  v147 = v248;
  if (v248)
  {
    v148 = (unint64_t *)&v248->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = Scalar;
  Scalar = 0;
  if (v150)
    (*((void (**)(std::__shared_weak_count_vtbl *))v150->~__shared_weak_count + 1))(v150);
  v151 = *a3;
  v243 = v305;
  if (v305)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = v305;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = (std::__shared_weak_count_vtbl *)v153;
  }
  else
  {
    v152 = 0;
  }
  v244 = v152;
  v305 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v151 + 56))(v151, &v243);
  v154 = v244;
  if (v244)
  {
    v155 = (unint64_t *)&v244->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = (MIL::Validation::TensorSymbolicShapeConstraints *)v305;
  v305 = 0;
  if (v157)
    v157 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v157 + 8))(v157);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v157);
  v158 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v239, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v241 = Scalar;
  if (Scalar)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = Scalar;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v242 = v159;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v237, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v158 + 3))(v158, &v241, 0, v237);
  if (v238 < 0)
    operator delete(v237[0]);
  v161 = v242;
  if (v242)
  {
    v162 = (unint64_t *)&v242->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = Scalar;
  Scalar = 0;
  if (v164)
    (*((void (**)(std::__shared_weak_count_vtbl *))v164->~__shared_weak_count + 1))(v164);
  if (v240 < 0)
    operator delete(v239);
  v165 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v233, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v235 = Scalar;
  if (Scalar)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = Scalar;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v236 = v166;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v231, "M");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v165 + 3))(v165, &v235, 1, v231);
  if (v232 < 0)
    operator delete(v231[0]);
  v168 = v236;
  if (v236)
  {
    v169 = (unint64_t *)&v236->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = Scalar;
  Scalar = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  if (v234 < 0)
    operator delete(v233);
  v172 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v227, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v229 = Scalar;
  if (Scalar)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = Scalar;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v230 = v173;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v225, "M");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v172 + 3))(v172, &v229, 0, v225);
  if (v226 < 0)
    operator delete(v225[0]);
  v175 = v230;
  if (v230)
  {
    v176 = (unint64_t *)&v230->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = Scalar;
  Scalar = 0;
  if (v178)
    (*((void (**)(std::__shared_weak_count_vtbl *))v178->~__shared_weak_count + 1))(v178);
  if (v228 < 0)
    operator delete(v227);
  v179 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v221, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v223 = Scalar;
  if (Scalar)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = Scalar;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v224 = v180;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v219, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v179 + 3))(v179, &v223, 1, v219);
  if (v220 < 0)
    operator delete(v219[0]);
  v182 = v224;
  if (v224)
  {
    v183 = (unint64_t *)&v224->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = Scalar;
  Scalar = 0;
  if (v185)
    (*((void (**)(std::__shared_weak_count_vtbl *))v185->~__shared_weak_count + 1))(v185);
  if (v222 < 0)
    operator delete(v221);
  v186 = v305;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v217 = Scalar;
  if (Scalar)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = Scalar;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v218 = v187;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v215, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v186 + 3))(v186, &v217, 0, v215);
  if (v216 < 0)
    operator delete(v215[0]);
  v189 = v218;
  if (v218)
  {
    v190 = (unint64_t *)&v218->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = Scalar;
  Scalar = 0;
  if (v192)
    (*((void (**)(std::__shared_weak_count_vtbl *))v192->~__shared_weak_count + 1))(v192);
  v193 = v305;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v213 = Scalar;
  if (Scalar)
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = Scalar;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = v195;
  }
  else
  {
    v194 = 0;
  }
  v214 = v194;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v211, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v193 + 3))(v193, &v213, 1, v211);
  if (v212 < 0)
    operator delete(v211[0]);
  v196 = v214;
  if (v214)
  {
    v197 = (unint64_t *)&v214->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = Scalar;
  Scalar = 0;
  if (v199)
    (*((void (**)(std::__shared_weak_count_vtbl *))v199->~__shared_weak_count + 1))(v199);
  v200 = *a3;
  v209 = v305;
  if (v305)
  {
    v201 = (std::__shared_weak_count *)operator new();
    v202 = v305;
    v201->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v201->__shared_owners_ = 0;
    v201->__shared_weak_owners_ = 0;
    v201[1].__vftable = (std::__shared_weak_count_vtbl *)v202;
  }
  else
  {
    v201 = 0;
  }
  v210 = v201;
  v305 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v200 + 56))(v200, &v209);
  v203 = v210;
  if (v210)
  {
    v204 = (unint64_t *)&v210->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = v305;
  v305 = 0;
  if (v206)
    (*((void (**)(void **))*v206 + 1))(v206);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v286, 0);
  result = v300;
  if (v300)
  {
    v208 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v300);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v208, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20695CC4C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 144);
  *(_QWORD *)(v2 - 144) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x320], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 216), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ValidateNeAdd(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t v4;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  MIL::IRValueType *ParameterType;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  MIL::IRValueType *v15;
  uint64_t v16;
  MIL::IRValueType *v17;
  uint64_t v18;
  uint64_t v19;
  MIL::IRValueType *Type;
  uint64_t v21;
  std::string::size_type *v22;
  uint64_t v23;
  MIL::Fp16 *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  MIL::Fp16 *v31;
  MIL::Fp16 *v32;
  MIL::Fp16 *v33;
  _BOOL4 v34;
  __int16 v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49[2];
  char v50;
  _QWORD v51[2];
  void *v52[2];
  char v53;
  _QWORD v54[2];
  void *__p[2];
  char v56;
  _QWORD v57[2];
  char v58;
  __int16 v59;
  char v60;
  __int16 v61;
  char v62;
  char v63;
  char v64;
  __int16 v65[7];
  std::__shared_weak_count *v66;
  __int16 v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  void *v70[2];
  char v71;
  void *v72[2];
  char v73;
  uint64_t v74;

  v4 = 0;
  v74 = *MEMORY[0x24BDAC8D0];
  v72[0] = "x";
  v72[1] = "y";
  do
  {
    std::string::basic_string[abi:ne180100]<0>(v70, (char *)v72[v4]);
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v6 = (std::__shared_weak_count *)LocationPtr[1];
    v68 = *LocationPtr;
    v69 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    v10 = MIL::IRValueType::AsTensorType(ParameterType);
    v11 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v68, v10, (uint64_t)v70, v11, a2);
    v12 = v69;
    if (v69)
    {
      v13 = (unint64_t *)&v69->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (!MIL::ValidationResult::IsGood(a2))
    {
      if (v71 < 0)
        operator delete(v70[0]);
      return;
    }
    MEMORY[0x20BCFEAEC](a2);
    if (v71 < 0)
      operator delete(v70[0]);
    ++v4;
  }
  while (v4 != 2);
  std::string::basic_string[abi:ne180100]<0>(v70, "x");
  v15 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v16 = MIL::IRValueType::AsTensorType(v15);
  if (v71 < 0)
    operator delete(v70[0]);
  std::string::basic_string[abi:ne180100]<0>(v70, "y");
  v17 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v18 = MIL::IRValueType::AsTensorType(v17);
  if (v71 < 0)
    operator delete(v70[0]);
  v19 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 176))(a1);
  if (*(_QWORD *)(v19 + 8) == *(_QWORD *)v19)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v19);
  v21 = MIL::IRValueType::AsTensorType(Type);
  v22 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(a1);
  v23 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
  std::string::basic_string[abi:ne180100]<0>(v70, "x");
  std::string::basic_string[abi:ne180100]<0>(v72, "y");
  if (v73 < 0)
    operator delete(v72[0]);
  if (v71 < 0)
    operator delete(v70[0]);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x20BCFEAEC](a2);
    v67 = 0;
    std::string::basic_string[abi:ne180100]<0>(v70, "post_right_shift");
    MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v67, (_BYTE *)&v67 + 1, a2);
    if (v71 < 0)
      operator delete(v70[0]);
    if (MIL::ValidationResult::IsGood(a2))
    {
      v24 = (MIL::Fp16 *)MEMORY[0x20BCFEAEC](a2);
      if ((_BYTE)v67)
      {
        v25 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
        v26 = (std::__shared_weak_count *)v25[1];
        *(_QWORD *)&v65[3] = *v25;
        v66 = v26;
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        ANEMachineIR::Validators::ValidatePostRightShiftRange(a2);
        if (v66)
        {
          v29 = &v66->__shared_owners_;
          do
            v30 = __ldaxr((unint64_t *)v29);
          while (__stlxr(v30 - 1, (unint64_t *)v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        if (!MIL::ValidationResult::IsGood(a2))
          return;
        v24 = (MIL::Fp16 *)MEMORY[0x20BCFEAEC](a2);
      }
      LOWORD(v72[0]) = MIL::Fp16::FromFloat(v24, 1.0);
      HIBYTE(v65[2]) = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "post_scale");
      MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(a1, (_BYTE *)&v65[2] + 1, v72, a2);
      if (v71 < 0)
        operator delete(v70[0]);
      if (MIL::ValidationResult::IsGood(a2))
      {
        v31 = (MIL::Fp16 *)MEMORY[0x20BCFEAEC](a2);
        v65[1] = MIL::Fp16::FromFloat(v31, 0.0);
        HIBYTE(v65[0]) = 0;
        std::string::basic_string[abi:ne180100]<0>(v70, "bias");
        MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(a1, (_BYTE *)v65 + 1, &v65[1], a2);
        if (v71 < 0)
          operator delete(v70[0]);
        if (MIL::ValidationResult::IsGood(a2))
        {
          MEMORY[0x20BCFEAEC](a2);
          LOBYTE(v65[0]) = 0;
          v64 = 0;
          std::string::basic_string[abi:ne180100]<0>(v70, "acc_left_shift");
          MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v64, v65, a2);
          if (v71 < 0)
            operator delete(v70[0]);
          if (MIL::ValidationResult::IsGood(a2))
          {
            MEMORY[0x20BCFEAEC](a2);
            v63 = 0;
            v62 = 0;
            std::string::basic_string[abi:ne180100]<0>(v70, "acc_bias_shift");
            MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v62, &v63, a2);
            if (v71 < 0)
              operator delete(v70[0]);
            if (MIL::ValidationResult::IsGood(a2))
            {
              v32 = (MIL::Fp16 *)MEMORY[0x20BCFEAEC](a2);
              v61 = MIL::Fp16::FromFloat(v32, 1.0);
              v60 = 0;
              std::string::basic_string[abi:ne180100]<0>(v70, "x_scale");
              MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(a1, &v60, &v61, a2);
              if (v71 < 0)
                operator delete(v70[0]);
              if (MIL::ValidationResult::IsGood(a2))
              {
                v33 = (MIL::Fp16 *)MEMORY[0x20BCFEAEC](a2);
                v59 = MIL::Fp16::FromFloat(v33, 1.0);
                v58 = 0;
                std::string::basic_string[abi:ne180100]<0>(v70, "y_scale");
                MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(a1, &v58, &v59, a2);
                if (v71 < 0)
                  operator delete(v70[0]);
                if (MIL::ValidationResult::IsGood(a2))
                {
                  MEMORY[0x20BCFEAEC](a2);
                  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 88))(v16) == 4;
                  v35 = ANEMachineIR::Validators::BinaryPointFormatOffsets((ANEMachineIR::Validators *)1, v34);
                  if (ANEMachineIR::Validators::NeuralEngineComputedBinaryPointAndShiftLegal((ANEMachineIR::Validators *)SLOBYTE(v65[0]), SHIBYTE(v67), (char)v35))
                  {
                    if (ANEMachineIR::Validators::NeuralEngineBiasShifterExponentLegal((unsigned __int16)v65[1], v63, SLOBYTE(v65[0]), SHIBYTE(v35)))
                    {
                      if (ANEMachineIR::Validators::NeuralEngineAccumulatorInitLegal(v65[1], v63, v65[0], v35))
                      {
                        MIL::ValidationResult::ValidationResult(a2);
                        return;
                      }
                      v45 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
                      v46 = v45[1];
                      v51[0] = *v45;
                      v51[1] = v46;
                      if (v46)
                      {
                        v47 = (unint64_t *)(v46 + 8);
                        do
                          v48 = __ldxr(v47);
                        while (__stxr(v48 + 1, v47));
                      }
                      std::string::basic_string[abi:ne180100]<0>(v49, "Initialized bias out of bounds of hardware constraints.");
                      MEMORY[0x20BCFEAD4](a2, v51, 309, v49);
                      if (v50 < 0)
                        operator delete(v49[0]);
                      v40 = v51;
                    }
                    else
                    {
                      v41 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
                      v42 = v41[1];
                      v54[0] = *v41;
                      v54[1] = v42;
                      if (v42)
                      {
                        v43 = (unint64_t *)(v42 + 8);
                        do
                          v44 = __ldxr(v43);
                        while (__stxr(v44 + 1, v43));
                      }
                      std::string::basic_string[abi:ne180100]<0>(v52, "Bias shift exponent outside of hardware capabilities. Computed shift must 32 bit and be <= 11.");
                      MEMORY[0x20BCFEAD4](a2, v54, 309, v52);
                      if (v53 < 0)
                        operator delete(v52[0]);
                      v40 = v54;
                    }
                  }
                  else
                  {
                    v36 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
                    v37 = v36[1];
                    v57[0] = *v36;
                    v57[1] = v37;
                    if (v37)
                    {
                      v38 = (unint64_t *)(v37 + 8);
                      do
                        v39 = __ldxr(v38);
                      while (__stxr(v39 + 1, v38));
                    }
                    std::string::basic_string[abi:ne180100]<0>(__p, "Computed binary point plus post-right shift bounded by accumulator dest size. See op definition.");
                    MEMORY[0x20BCFEAD4](a2, v57, 309, __p);
                    if (v56 < 0)
                      operator delete(__p[0]);
                    v40 = v57;
                  }
                  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)v40);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_20695DB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ValidateCompatibleNeInterleavableShapes(std::string::size_type *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, MIL::ValidationResult *a8@<X8>)
{
  int v16;
  std::string::size_type v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  __int128 v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::string::size_type v39;
  unint64_t *v40;
  unint64_t v41;
  std::string *v42;
  __int128 v43;
  int v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  int v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  unint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  std::string::size_type v62;
  unint64_t *v63;
  unint64_t v64;
  std::string *v65;
  __int128 v66;
  int v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  unint64_t *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  std::string *v87;
  __int128 v88;
  int v89;
  const std::string::value_type *v90;
  std::string::size_type v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  std::string *p_p;
  std::string::size_type size;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  int v102;
  const std::string::value_type *v103;
  std::string::size_type v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  __int128 v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  MIL::ValidationResult *v112;
  std::string __p;
  std::string v114;
  std::string v115;
  std::string v116;
  std::string v117;
  std::string v118;
  std::string v119;
  std::string v120;
  __int128 v121;
  std::string::size_type v122;
  std::string::size_type v123;
  std::__shared_weak_count *v124;

  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 88))(a4);
  if (v16 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a6 + 88))(a6))
  {
    if (a4 == a6)
    {
      v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 96))(a7);
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 96))(a4);
      v61 = *(_QWORD *)(v59 + 8) - *(_QWORD *)v59;
      if (v61 == *(_QWORD *)(v60 + 8) - *(_QWORD *)v60 && !memcmp(*(const void **)v59, *(const void **)v60, v61))
      {
        v75 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 96))(a4);
        v76 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 96))(a4);
        v77 = v75[1];
        if (v77 == *v75)
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        v78 = v76;
        v79 = ((uint64_t)(v76[1] - *v76) >> 3) - 1;
        v80 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v77 - 8));
        v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 48))(v80);
        if (v79 >= (uint64_t)(v78[1] - *v78) >> 3)
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        v82 = v81;
        v83 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v78 + 8 * v79));
        if ((unint64_t)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 48))(v83) + v82) <= 0x10000)
        {
          MIL::ValidationResult::ValidationResult(a8);
        }
        else
        {
          v84 = (std::__shared_weak_count *)a1[1];
          v123 = *a1;
          v124 = v84;
          if (v84)
          {
            p_shared_owners = (unint64_t *)&v84->__shared_owners_;
            do
              v86 = __ldxr(p_shared_owners);
            while (__stxr(v86 + 1, p_shared_owners));
          }
          std::operator+<char>();
          v87 = std::string::append(&v114, "\" and \"");
          v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
          v115.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v88;
          v87->__r_.__value_.__l.__size_ = 0;
          v87->__r_.__value_.__r.__words[2] = 0;
          v87->__r_.__value_.__r.__words[0] = 0;
          v89 = *(char *)(a5 + 23);
          if (v89 >= 0)
            v90 = (const std::string::value_type *)a5;
          else
            v90 = *(const std::string::value_type **)a5;
          if (v89 >= 0)
            v91 = *(unsigned __int8 *)(a5 + 23);
          else
            v91 = *(_QWORD *)(a5 + 8);
          v92 = std::string::append(&v115, v90, v91);
          v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
          v116.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v93;
          v92->__r_.__value_.__l.__size_ = 0;
          v92->__r_.__value_.__r.__words[2] = 0;
          v92->__r_.__value_.__r.__words[0] = 0;
          v94 = std::string::append(&v116, "\" must be less than ");
          v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
          v117.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v95;
          v94->__r_.__value_.__l.__size_ = 0;
          v94->__r_.__value_.__r.__words[2] = 0;
          v94->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&__p, 0x10000uLL);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          v98 = std::string::append(&v117, (const std::string::value_type *)p_p, size);
          v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
          v118.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v99;
          v98->__r_.__value_.__l.__size_ = 0;
          v98->__r_.__value_.__r.__words[2] = 0;
          v98->__r_.__value_.__r.__words[0] = 0;
          v100 = std::string::append(&v118, " in operation \"");
          v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
          v119.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v101;
          v100->__r_.__value_.__l.__size_ = 0;
          v100->__r_.__value_.__r.__words[2] = 0;
          v100->__r_.__value_.__r.__words[0] = 0;
          v102 = *(char *)(a2 + 23);
          if (v102 >= 0)
            v103 = (const std::string::value_type *)a2;
          else
            v103 = *(const std::string::value_type **)a2;
          if (v102 >= 0)
            v104 = *(unsigned __int8 *)(a2 + 23);
          else
            v104 = *(_QWORD *)(a2 + 8);
          v105 = std::string::append(&v119, v103, v104);
          v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
          v120.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v106;
          v105->__r_.__value_.__l.__size_ = 0;
          v105->__r_.__value_.__r.__words[2] = 0;
          v105->__r_.__value_.__r.__words[0] = 0;
          v107 = std::string::append(&v120, "\".");
          v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
          v122 = v107->__r_.__value_.__r.__words[2];
          v121 = v108;
          v107->__r_.__value_.__l.__size_ = 0;
          v107->__r_.__value_.__r.__words[2] = 0;
          v107->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x20BCFEAD4](a8, &v123, 309, &v121);
          if (SHIBYTE(v122) < 0)
            operator delete((void *)v121);
          if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v120.__r_.__value_.__l.__data_);
          if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v119.__r_.__value_.__l.__data_);
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v118.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v117.__r_.__value_.__l.__data_);
          if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v116.__r_.__value_.__l.__data_);
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v115.__r_.__value_.__l.__data_);
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v114.__r_.__value_.__l.__data_);
          v109 = v124;
          if (v124)
          {
            v110 = (unint64_t *)&v124->__shared_owners_;
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
        }
        if (MIL::ValidationResult::IsGood(a8))
        {
          v112 = (MIL::ValidationResult *)MEMORY[0x20BCFEAEC](a8);
          MIL::ValidationResult::ValidationResult(v112);
        }
      }
      else
      {
        v62 = a1[1];
        v117.__r_.__value_.__r.__words[0] = *a1;
        v117.__r_.__value_.__l.__size_ = v62;
        if (v62)
        {
          v63 = (unint64_t *)(v62 + 8);
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        std::operator+<char>();
        v65 = std::string::append(&v118, "\" operation requires identical shape for \"");
        v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        v119.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        v67 = *(char *)(a3 + 23);
        if (v67 >= 0)
          v68 = (const std::string::value_type *)a3;
        else
          v68 = *(const std::string::value_type **)a3;
        if (v67 >= 0)
          v69 = *(unsigned __int8 *)(a3 + 23);
        else
          v69 = *(_QWORD *)(a3 + 8);
        v70 = std::string::append(&v119, v68, v69);
        v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        v120.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        v72 = std::string::append(&v120, "\" and output.");
        v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        v122 = v72->__r_.__value_.__r.__words[2];
        v121 = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x20BCFEAD4](a8, &v117, 313, &v121);
        if (SHIBYTE(v122) < 0)
          operator delete((void *)v121);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v120.__r_.__value_.__l.__data_);
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v119.__r_.__value_.__l.__data_);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v118.__r_.__value_.__l.__data_);
        v36 = (std::__shared_weak_count *)v117.__r_.__value_.__l.__size_;
        if (v117.__r_.__value_.__l.__size_)
        {
          v74 = (unint64_t *)(v117.__r_.__value_.__l.__size_ + 8);
          do
            v38 = __ldaxr(v74);
          while (__stlxr(v38 - 1, v74));
          goto LABEL_87;
        }
      }
    }
    else
    {
      v17 = a1[1];
      v115.__r_.__value_.__r.__words[0] = *a1;
      v115.__r_.__value_.__l.__size_ = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      std::operator+<char>();
      v20 = std::string::append(&v116, "\" operation requires identical shapes for \"");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v117.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      v22 = *(char *)(a3 + 23);
      if (v22 >= 0)
        v23 = (const std::string::value_type *)a3;
      else
        v23 = *(const std::string::value_type **)a3;
      if (v22 >= 0)
        v24 = *(unsigned __int8 *)(a3 + 23);
      else
        v24 = *(_QWORD *)(a3 + 8);
      v25 = std::string::append(&v117, v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v118.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v27 = std::string::append(&v118, "\" and \"");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v119.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = *(char *)(a5 + 23);
      if (v29 >= 0)
        v30 = (const std::string::value_type *)a5;
      else
        v30 = *(const std::string::value_type **)a5;
      if (v29 >= 0)
        v31 = *(unsigned __int8 *)(a5 + 23);
      else
        v31 = *(_QWORD *)(a5 + 8);
      v32 = std::string::append(&v119, v30, v31);
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v120.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      v34 = std::string::append(&v120, "\".");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v122 = v34->__r_.__value_.__r.__words[2];
      v121 = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x20BCFEAD4](a8, &v115, 304, &v121);
      if (SHIBYTE(v122) < 0)
        operator delete((void *)v121);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v120.__r_.__value_.__l.__data_);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v118.__r_.__value_.__l.__data_);
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v117.__r_.__value_.__l.__data_);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      v36 = (std::__shared_weak_count *)v115.__r_.__value_.__l.__size_;
      if (v115.__r_.__value_.__l.__size_)
      {
        v37 = (unint64_t *)(v115.__r_.__value_.__l.__size_ + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
LABEL_87:
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
  }
  else
  {
    v39 = a1[1];
    v115.__r_.__value_.__r.__words[0] = *a1;
    v115.__r_.__value_.__l.__size_ = v39;
    if (v39)
    {
      v40 = (unint64_t *)(v39 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    std::operator+<char>();
    v42 = std::string::append(&v116, "\" operation requires identical data types for \"");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v117.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = *(char *)(a3 + 23);
    if (v44 >= 0)
      v45 = (const std::string::value_type *)a3;
    else
      v45 = *(const std::string::value_type **)a3;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(a3 + 23);
    else
      v46 = *(_QWORD *)(a3 + 8);
    v47 = std::string::append(&v117, v45, v46);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v118.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::string::append(&v118, "\" and \"");
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v119.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = *(char *)(a5 + 23);
    if (v51 >= 0)
      v52 = (const std::string::value_type *)a5;
    else
      v52 = *(const std::string::value_type **)a5;
    if (v51 >= 0)
      v53 = *(unsigned __int8 *)(a5 + 23);
    else
      v53 = *(_QWORD *)(a5 + 8);
    v54 = std::string::append(&v119, v52, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v120.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = std::string::append(&v120, "\".");
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v122 = v56->__r_.__value_.__r.__words[2];
    v121 = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x20BCFEAD4](a8, &v115, 304, &v121);
    if (SHIBYTE(v122) < 0)
      operator delete((void *)v121);
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v120.__r_.__value_.__l.__data_);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v118.__r_.__value_.__l.__data_);
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v117.__r_.__value_.__l.__data_);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v116.__r_.__value_.__l.__data_);
    v36 = (std::__shared_weak_count *)v115.__r_.__value_.__l.__size_;
    if (v115.__r_.__value_.__l.__size_)
    {
      v58 = (unint64_t *)(v115.__r_.__value_.__l.__size_ + 8);
      do
        v38 = __ldaxr(v58);
      while (__stlxr(v38 - 1, v58));
      goto LABEL_87;
    }
  }
}

void ANEMachineIR::Validators::ValidateNeMaximum(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t v4;
  _QWORD *LocationPtr;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  MIL::IRValueType *ParameterType;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  MIL::IRValueType *v15;
  uint64_t v16;
  MIL::IRValueType *v17;
  uint64_t v18;
  uint64_t v19;
  MIL::IRValueType *Type;
  uint64_t v21;
  std::string::size_type *v22;
  uint64_t v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  _BOOL4 v30;
  char v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39[2];
  char v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  char v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _WORD v46[5];
  std::__shared_weak_count *v47;
  void *__p[2];
  char v49;
  void *v50[2];
  char v51;
  uint64_t v52;

  v4 = 0;
  v52 = *MEMORY[0x24BDAC8D0];
  v50[0] = "x";
  v50[1] = "y";
  do
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)v50[v4]);
    LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
    v6 = (std::__shared_weak_count *)LocationPtr[1];
    *(_QWORD *)&v46[1] = *LocationPtr;
    v47 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    v10 = MIL::IRValueType::AsTensorType(ParameterType);
    v11 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v46[1], v10, (uint64_t)__p, v11, a2);
    v12 = v47;
    if (v47)
    {
      v13 = (unint64_t *)&v47->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (!MIL::ValidationResult::IsGood(a2))
    {
      if (v49 < 0)
        operator delete(__p[0]);
      return;
    }
    MEMORY[0x20BCFEAEC](a2);
    if (v49 < 0)
      operator delete(__p[0]);
    ++v4;
  }
  while (v4 != 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  v15 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v16 = MIL::IRValueType::AsTensorType(v15);
  if (v49 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  v17 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v18 = MIL::IRValueType::AsTensorType(v17);
  if (v49 < 0)
    operator delete(__p[0]);
  v19 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 176))(a1);
  if (*(_QWORD *)(v19 + 8) == *(_QWORD *)v19)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v19);
  v21 = MIL::IRValueType::AsTensorType(Type);
  v22 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(a1);
  v23 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  std::string::basic_string[abi:ne180100]<0>(v50, "y");
  if (v51 < 0)
    operator delete(v50[0]);
  if (v49 < 0)
    operator delete(__p[0]);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x20BCFEAEC](a2);
    v46[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "post_right_shift");
    MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, v46, (_BYTE *)v46 + 1, a2);
    if (v49 < 0)
      operator delete(__p[0]);
    if (MIL::ValidationResult::IsGood(a2))
    {
      MEMORY[0x20BCFEAEC](a2);
      if (!LOBYTE(v46[0]))
      {
LABEL_38:
        LOWORD(v50[0]) = 0;
        v43 = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "post_scale");
        MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(a1, &v43, v50, a2);
        if (v49 < 0)
          operator delete(__p[0]);
        if (MIL::ValidationResult::IsGood(a2))
        {
          MEMORY[0x20BCFEAEC](a2);
          v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 88))(v16) == 4;
          v31 = ANEMachineIR::Validators::BinaryPointFormatOffsets((ANEMachineIR::Validators *)1, v30);
          if (ANEMachineIR::Validators::NeuralEngineComputedBinaryPointAndShiftLegal(0, SHIBYTE(v46[0]), v31))
          {
            MIL::ValidationResult::ValidationResult(a2);
          }
          else
          {
            v32 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
            v33 = (std::__shared_weak_count *)v32[1];
            v41 = *v32;
            v42 = v33;
            if (v33)
            {
              v34 = (unint64_t *)&v33->__shared_owners_;
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            std::string::basic_string[abi:ne180100]<0>(v39, "Computed binary point plus post-right shift bounded by accumulator dest size. See op definition.");
            MEMORY[0x20BCFEAD4](a2, &v41, 309, v39);
            if (v40 < 0)
              operator delete(v39[0]);
            v36 = v42;
            if (v42)
            {
              v37 = (unint64_t *)&v42->__shared_owners_;
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
          }
        }
        return;
      }
      v24 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      v25 = (std::__shared_weak_count *)v24[1];
      v44 = *v24;
      v45 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      ANEMachineIR::Validators::ValidatePostRightShiftRange(a2);
      if (v45)
      {
        v28 = &v45->__shared_owners_;
        do
          v29 = __ldaxr((unint64_t *)v28);
        while (__stlxr(v29 - 1, (unint64_t *)v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      if (MIL::ValidationResult::IsGood(a2))
      {
        MEMORY[0x20BCFEAEC](a2);
        goto LABEL_38;
      }
    }
  }
}

void sub_20695ECC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::Validators::ParsePeElementWiseUnaryParamValues@<X0>(ANEMachineIR::Validators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t result;
  MIL::Fp16 *v8;
  __int16 v9;
  void *__p;
  char v11;
  char v12;
  __int16 v13;

  v13 = 0;
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
  MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(this, &v12, &v13, a3);
  if (v11 < 0)
    operator delete(__p);
  result = MIL::ValidationResult::IsGood(a3);
  if ((_DWORD)result)
  {
    v8 = (MIL::Fp16 *)MEMORY[0x20BCFEAEC](a3);
    if (v12)
      v9 = v13;
    else
      v9 = MIL::Fp16::FromFloat(v8, 1.0);
    if (!*((_BYTE *)a2 + 2))
      *((_BYTE *)a2 + 2) = 1;
    *(_WORD *)a2 = v9;
    return MIL::ValidationResult::ValidationResult(a3);
  }
  return result;
}

uint64_t ANEMachineIR::Validators::ParsePeElementWiseBinaryParamValues@<X0>(ANEMachineIR::Validators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t result;
  MIL::Fp16 *v8;
  __int16 v9;
  int v10;
  float v11;
  int v12;
  float v13;
  unsigned __int8 v14;
  float v15;
  unsigned __int8 v16;
  float v17;
  void *__p[2];
  char v19;
  char v20;
  __int16 v21;

  v21 = 0;
  v20 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "post_scale");
  MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(this, &v20, &v21, a3);
  if (v19 < 0)
    operator delete(__p[0]);
  result = MIL::ValidationResult::IsGood(a3);
  if ((_DWORD)result)
  {
    v8 = (MIL::Fp16 *)MEMORY[0x20BCFEAEC](a3);
    if (v20)
      v9 = v21;
    else
      v9 = MIL::Fp16::FromFloat(v8, 1.0);
    if (!*((_BYTE *)a2 + 18))
      *((_BYTE *)a2 + 18) = 1;
    *((_WORD *)a2 + 8) = v9;
    v17 = 0.0;
    v16 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "x_scale");
    MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<float>(this, &v16, &v17, a3);
    if (v19 < 0)
      operator delete(__p[0]);
    result = MIL::ValidationResult::IsGood(a3);
    if ((_DWORD)result)
    {
      MEMORY[0x20BCFEAEC](a3);
      v10 = v16;
      v11 = v17;
      if (!*((_BYTE *)a2 + 4))
        *((_BYTE *)a2 + 4) = 1;
      if (!v10)
        v11 = 1.0;
      *(float *)a2 = v11;
      v15 = 0.0;
      v14 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "y_scale");
      MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<float>(this, &v14, &v15, a3);
      if (v19 < 0)
        operator delete(__p[0]);
      result = MIL::ValidationResult::IsGood(a3);
      if ((_DWORD)result)
      {
        MEMORY[0x20BCFEAEC](a3);
        v12 = v14;
        v13 = v15;
        if (!*((_BYTE *)a2 + 12))
          *((_BYTE *)a2 + 12) = 1;
        if (!v12)
          v13 = 1.0;
        *((float *)a2 + 2) = v13;
        return MIL::ValidationResult::ValidationResult(a3);
      }
    }
  }
  return result;
}

void sub_20695F024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  MEMORY[0x20BCFEAEC](v16);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::Validators::ValidatePeElementWiseUnary@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t result;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  MIL::ValidationResult *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v10 = (std::__shared_weak_count *)a1[1];
  v28 = *a1;
  v29 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v28, a3, (uint64_t)__p, a2, a5);
  if (v27 < 0)
    operator delete(__p[0]);
  v13 = v29;
  if (v29)
  {
    v14 = (unint64_t *)&v29->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  result = MIL::ValidationResult::IsGood(a5);
  if ((_DWORD)result)
  {
    MEMORY[0x20BCFEAEC](a5);
    v17 = (std::__shared_weak_count *)a1[1];
    v24 = *a1;
    v25 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "output");
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v24, a4, (uint64_t)__p, a2, a5);
    if (v27 < 0)
      operator delete(__p[0]);
    v20 = v25;
    if (v25)
    {
      v21 = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    result = MIL::ValidationResult::IsGood(a5);
    if ((_DWORD)result)
    {
      v23 = (MIL::ValidationResult *)MEMORY[0x20BCFEAEC](a5);
      return MIL::ValidationResult::ValidationResult(v23);
    }
  }
  return result;
}

void sub_20695F1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  MEMORY[0x20BCFEAEC](v18);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::Validators::ValidatePeElementWiseBinary@<X0>(std::string::size_type *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, MIL::ValidationResult *a6@<X8>)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t result;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  std::string::size_type v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *size;
  unint64_t *v36;
  unint64_t v37;
  char StaticTensorShape;
  void *v39;
  BOOL v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string *v44;
  __int128 v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::string *v64;
  __int128 v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  const std::string::value_type *v72;
  std::string::size_type v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  unint64_t *v78;
  MIL::ValidationResult *v79;
  void *v80;
  std::string::size_type v81;
  unsigned __int8 v82;
  void *v83;
  std::string::size_type v84;
  unsigned __int8 v85;
  std::string::size_type v86;
  std::__shared_weak_count *v87;
  std::string::size_type v88;
  std::__shared_weak_count *v89;
  std::string::size_type v90;
  std::__shared_weak_count *v91;
  std::string v92;
  std::string::size_type v93;
  std::__shared_weak_count *v94;
  std::string __s1;
  __int128 __p;
  std::string::size_type v97;
  std::string v98;
  std::string v99;
  std::string v100;

  v12 = (std::__shared_weak_count *)a1[1];
  v90 = *a1;
  v91 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v90, a3, (uint64_t)&__p, a2, a6);
  if (SHIBYTE(v97) < 0)
    operator delete((void *)__p);
  v15 = v91;
  if (v91)
  {
    v16 = (unint64_t *)&v91->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  result = MIL::ValidationResult::IsGood(a6);
  if ((_DWORD)result)
  {
    MEMORY[0x20BCFEAEC](a6);
    v19 = (std::__shared_weak_count *)a1[1];
    v88 = *a1;
    v89 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "y");
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v88, a4, (uint64_t)&__p, a2, a6);
    if (SHIBYTE(v97) < 0)
      operator delete((void *)__p);
    v22 = v89;
    if (v89)
    {
      v23 = (unint64_t *)&v89->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    result = MIL::ValidationResult::IsGood(a6);
    if ((_DWORD)result)
    {
      MEMORY[0x20BCFEAEC](a6);
      v25 = (std::__shared_weak_count *)a1[1];
      v86 = *a1;
      v87 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "output");
      ANEMachineIR::Validators::ValidateLiveTensorSize(&v86, a5, (uint64_t)&__p, a2, a6);
      if (SHIBYTE(v97) < 0)
        operator delete((void *)__p);
      v28 = v87;
      if (v87)
      {
        v29 = (unint64_t *)&v87->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      result = MIL::ValidationResult::IsGood(a6);
      if ((_DWORD)result)
      {
        MEMORY[0x20BCFEAEC](a6);
        std::string::basic_string[abi:ne180100]<0>(&v83, "x");
        std::string::basic_string[abi:ne180100]<0>(&v80, "y");
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 88))(a3);
        if (v31 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 88))(a4))
        {
          memset(&v100, 0, sizeof(v100));
          memset(&v99, 0, sizeof(v99));
          if ((ANEMachineIR::Utils::TryGetStaticTensorShape(a3, (uint64_t)&v100) & 1) != 0
            && ANEMachineIR::Utils::TryGetStaticTensorShape(a4, (uint64_t)&v99))
          {
            memset(&v98, 0, sizeof(v98));
            v32 = a1[1];
            v92.__r_.__value_.__r.__words[0] = *a1;
            v92.__r_.__value_.__l.__size_ = v32;
            if (v32)
            {
              v33 = (unint64_t *)(v32 + 8);
              do
                v34 = __ldxr(v33);
              while (__stxr(v34 + 1, v33));
            }
            ANEMachineIR::Utils::BroadcastShapes((uint64_t *)&v92, (uint64_t)&v100, (uint64_t)&v99, &v98.__r_.__value_.__l.__data_, (MIL::ValidationResult *)&__p);
            size = (std::__shared_weak_count *)v92.__r_.__value_.__l.__size_;
            if (v92.__r_.__value_.__l.__size_)
            {
              v36 = (unint64_t *)(v92.__r_.__value_.__l.__size_ + 8);
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p) & 1) != 0)
            {
              memset(&__s1, 0, sizeof(__s1));
              StaticTensorShape = ANEMachineIR::Utils::TryGetStaticTensorShape(a5, (uint64_t)&__s1);
              v39 = (void *)__s1.__r_.__value_.__r.__words[0];
              v40 = (StaticTensorShape & 1) != 0
                 && __s1.__r_.__value_.__l.__size_ - __s1.__r_.__value_.__r.__words[0] == v98.__r_.__value_.__l.__size_
                                                                                        - v98.__r_.__value_.__r.__words[0]
                 && memcmp(__s1.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_ - __s1.__r_.__value_.__r.__words[0]) == 0;
              if (v39)
              {
                __s1.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
                operator delete(v39);
              }
            }
            else
            {
              v40 = 0;
            }
            MEMORY[0x20BCFEAEC](&__p);
            if (v98.__r_.__value_.__r.__words[0])
            {
              v98.__r_.__value_.__l.__size_ = v98.__r_.__value_.__r.__words[0];
              operator delete(v98.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            v40 = 0;
          }
          if (v99.__r_.__value_.__r.__words[0])
          {
            v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
            operator delete(v99.__r_.__value_.__l.__data_);
          }
          if (v100.__r_.__value_.__r.__words[0])
          {
            v100.__r_.__value_.__l.__size_ = v100.__r_.__value_.__r.__words[0];
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (v40)
          {
            MIL::ValidationResult::ValidationResult(a6);
LABEL_119:
            if ((char)v82 < 0)
              operator delete(v80);
            if ((char)v85 < 0)
              operator delete(v83);
            result = MIL::ValidationResult::IsGood(a6);
            if ((_DWORD)result)
            {
              v79 = (MIL::ValidationResult *)MEMORY[0x20BCFEAEC](a6);
              return MIL::ValidationResult::ValidationResult(v79);
            }
            return result;
          }
          v61 = (std::__shared_weak_count *)a1[1];
          v93 = *a1;
          v94 = v61;
          if (v61)
          {
            v62 = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldxr(v62);
            while (__stxr(v63 + 1, v62));
          }
          std::operator+<char>();
          v64 = std::string::append(&v92, "\" operation requires broadcastable shape for \"");
          v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
          __s1.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v65;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          if ((v85 & 0x80u) == 0)
            v66 = (const std::string::value_type *)&v83;
          else
            v66 = (const std::string::value_type *)v83;
          if ((v85 & 0x80u) == 0)
            v67 = v85;
          else
            v67 = v84;
          v68 = std::string::append(&__s1, v66, v67);
          v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
          v98.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v69;
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          v70 = std::string::append(&v98, "\", \"");
          v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
          v99.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v71;
          v70->__r_.__value_.__l.__size_ = 0;
          v70->__r_.__value_.__r.__words[2] = 0;
          v70->__r_.__value_.__r.__words[0] = 0;
          if ((v82 & 0x80u) == 0)
            v72 = (const std::string::value_type *)&v80;
          else
            v72 = (const std::string::value_type *)v80;
          if ((v82 & 0x80u) == 0)
            v73 = v82;
          else
            v73 = v81;
          v74 = std::string::append(&v99, v72, v73);
          v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          v100.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          v76 = std::string::append(&v100, "\", and output.");
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v97 = v76->__r_.__value_.__r.__words[2];
          __p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x20BCFEAD4](a6, &v93, 313, &__p);
          if (SHIBYTE(v97) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v98.__r_.__value_.__l.__data_);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v92.__r_.__value_.__l.__data_);
          v58 = v94;
          if (!v94)
            goto LABEL_119;
          v78 = (unint64_t *)&v94->__shared_owners_;
          do
            v60 = __ldaxr(v78);
          while (__stlxr(v60 - 1, v78));
        }
        else
        {
          v41 = (std::__shared_weak_count *)a1[1];
          v93 = *a1;
          v94 = v41;
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          std::operator+<char>();
          v44 = std::string::append(&v92, "\" operation requires identical data types for \"");
          v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          __s1.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          if ((v85 & 0x80u) == 0)
            v46 = (const std::string::value_type *)&v83;
          else
            v46 = (const std::string::value_type *)v83;
          if ((v85 & 0x80u) == 0)
            v47 = v85;
          else
            v47 = v84;
          v48 = std::string::append(&__s1, v46, v47);
          v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v98.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          v50 = std::string::append(&v98, "\" and \"");
          v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v99.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          if ((v82 & 0x80u) == 0)
            v52 = (const std::string::value_type *)&v80;
          else
            v52 = (const std::string::value_type *)v80;
          if ((v82 & 0x80u) == 0)
            v53 = v82;
          else
            v53 = v81;
          v54 = std::string::append(&v99, v52, v53);
          v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
          v100.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v55;
          v54->__r_.__value_.__l.__size_ = 0;
          v54->__r_.__value_.__r.__words[2] = 0;
          v54->__r_.__value_.__r.__words[0] = 0;
          v56 = std::string::append(&v100, "\".");
          v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          v97 = v56->__r_.__value_.__r.__words[2];
          __p = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x20BCFEAD4](a6, &v93, 304, &__p);
          if (SHIBYTE(v97) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v98.__r_.__value_.__l.__data_);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v92.__r_.__value_.__l.__data_);
          v58 = v94;
          if (!v94)
            goto LABEL_119;
          v59 = (unint64_t *)&v94->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
        }
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
        goto LABEL_119;
      }
    }
  }
  return result;
}

void sub_20695FA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  void *v50;
  void *v51;
  void *v52;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BCFEAEC](&a43);
  v50 = *(void **)(v48 - 176);
  if (v50)
  {
    *(_QWORD *)(v48 - 168) = v50;
    operator delete(v50);
  }
  v51 = *(void **)(v48 - 144);
  if (v51)
  {
    *(_QWORD *)(v48 - 136) = v51;
    operator delete(v51);
  }
  v52 = *(void **)(v48 - 112);
  if (v52)
  {
    *(_QWORD *)(v48 - 104) = v52;
    operator delete(v52);
  }
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ValidatePeElementWiseUnary(ANEMachineIR::Validators *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v5;
  uint64_t v6;
  MIL::IRValueType *Type;
  uint64_t v8;
  uint64_t *LocationPtr;
  uint64_t v10;
  void *__p;
  char v12;
  _BYTE v13[8];
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;

  v13[0] = 0;
  v13[2] = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  LOBYTE(v23) = 0;
  v25 = 0;
  ANEMachineIR::Validators::ParsePeElementWiseUnaryParamValues(a1, (const MIL::IROperation *)v13, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x20BCFEAEC](a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "x");
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    v5 = MIL::IRValueType::AsTensorType(ParameterType);
    if (v12 < 0)
      operator delete(__p);
    v6 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(_QWORD *)a1 + 176))(a1);
    if (*(_QWORD *)(v6 + 8) == *(_QWORD *)v6)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v6);
    v8 = MIL::IRValueType::AsTensorType(Type);
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v10 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(_QWORD *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidatePeElementWiseUnary(LocationPtr, v10, v5, v8, a2);
  }
  if (v25 && v24 < 0)
    operator delete(v23);
  if (v18 && v17)
    operator delete(v17);
  if (v16)
  {
    if (v15 < 0)
      operator delete(v14);
  }
}

void sub_20695FD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  ANEMachineIR::Validators::PeElementWiseUnaryParamValues::~PeElementWiseUnaryParamValues(&a15);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::PeElementWiseUnaryParamValues::~PeElementWiseUnaryParamValues(void **this)
{
  void *v2;

  if (*((_BYTE *)this + 112) && *((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((_BYTE *)this + 64))
  {
    v2 = this[5];
    if (v2)
    {
      this[6] = v2;
      operator delete(v2);
    }
  }
  if (*((_BYTE *)this + 32))
  {
    if (*((char *)this + 31) < 0)
      operator delete(this[1]);
  }
}

void ANEMachineIR::Validators::ValidatePeElementWiseBinary(ANEMachineIR::Validators *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v5;
  MIL::IRValueType *v6;
  uint64_t v7;
  uint64_t v8;
  MIL::IRValueType *Type;
  uint64_t v10;
  std::string::size_type *LocationPtr;
  uint64_t v12;
  void *__p[2];
  char v14;
  _BYTE v15[24];
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  void *v25;
  char v26;
  char v27;

  v15[0] = 0;
  v15[4] = 0;
  v15[8] = 0;
  v15[12] = 0;
  v15[16] = 0;
  v15[18] = 0;
  LOBYTE(v16) = 0;
  v18 = 0;
  LOBYTE(v19) = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  ANEMachineIR::Validators::ParsePeElementWiseBinaryParamValues(a1, (const MIL::IROperation *)v15, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x20BCFEAEC](a2);
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    v5 = MIL::IRValueType::AsTensorType(ParameterType);
    if (v14 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "y");
    v6 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    v7 = MIL::IRValueType::AsTensorType(v6);
    if (v14 < 0)
      operator delete(__p[0]);
    v8 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(_QWORD *)a1 + 176))(a1);
    if (*(_QWORD *)(v8 + 8) == *(_QWORD *)v8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v8);
    v10 = MIL::IRValueType::AsTensorType(Type);
    LocationPtr = (std::string::size_type *)MIL::IRObject::GetLocationPtr(a1);
    v12 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(_QWORD *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidatePeElementWiseBinary(LocationPtr, v12, v5, v7, v10, a2);
  }
  if (v27 && v26 < 0)
    operator delete(v25);
  if (v20 && v19)
    operator delete(v19);
  if (v18)
  {
    if (v17 < 0)
      operator delete(v16);
  }
}

void sub_20695FFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  ANEMachineIR::Validators::PeElementWiseBinaryParamValues::~PeElementWiseBinaryParamValues(&a15);
  _Unwind_Resume(a1);
}

void MilTranslator::Passes::FuseConvActivation::Match(MIL::Builder::BlockBuilder **a1@<X1>, _QWORD *a2@<X8>)
{
  MIL::Builder::OperationBuilder **i;
  uint64_t Operator;
  uint64_t v5;
  int v6;
  void **v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  void **v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int64_t v21;
  std::__shared_weak_count *v22;
  void **v23;
  unint64_t *v24;
  unint64_t v25;
  int64_t v26;
  MIL::Builder::Variable *Output;
  MIL::IRValueType *Type;
  MIL::Builder::Variable *v29;
  uint64_t v30;
  MIL::IRValueType *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t j;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  void ***v45;
  std::__shared_weak_count *v46;
  void ***v47;
  std::__shared_weak_count *v48;
  MIL::Builder::OperationBuilder **v49;
  MIL::Builder::OperationBuilder **v50;
  uint64_t v51;
  uint64_t v52;
  MIL::Builder::OperationBuilder *v53;
  std::__shared_weak_count *v54;
  void ***v55;
  void **v56;
  std::__shared_weak_count *v57;
  void **v58;
  std::__shared_weak_count *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v53 = 0;
  v54 = 0;
  MIL::Builder::BlockBuilder::GetOperations(*a1);
  for (i = v49; i != v50; i += 2)
  {
    Operator = MIL::Builder::OperationBuilder::GetOperator(*i);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
    v6 = *(char *)(v5 + 23);
    if (v6 < 0)
    {
      if (*(_QWORD *)(v5 + 8) != 7)
        continue;
      v5 = *(_QWORD *)v5;
    }
    else if (v6 != 7)
    {
      continue;
    }
    if (*(_DWORD *)v5 == 1667196270 && *(_DWORD *)(v5 + 3) == 1986948963)
    {
      std::shared_ptr<MIL::IRNamedValueType>::operator=[abi:ne180100](&v53, (uint64_t *)i);
      break;
    }
  }
  v56 = (void **)&v49;
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&v56);
  if (v53)
  {
    MIL::Builder::OperationBuilder::GetChildOperations(v53);
    if (v52 != 1
      || (MIL::Builder::OperationBuilder::GetBlocks(v53),
          v8 = v56,
          v9 = (void **)&v57->__vftable,
          v47 = &v56,
          std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47),
          v8 != v9))
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
LABEL_18:
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&v49);
      goto LABEL_20;
    }
    v14 = *(void ***)(v51 + 16);
    v13 = *(std::__shared_weak_count **)(v51 + 24);
    v47 = (void ***)v14;
    v48 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v14);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    v19 = *(char *)(v18 + 23);
    if (v19 < 0)
    {
      if (*(_QWORD *)(v18 + 8) != 13)
        goto LABEL_57;
      v18 = *(_QWORD *)v18;
    }
    else if (v19 != 13)
    {
      goto LABEL_57;
    }
    if (*(_QWORD *)v18 == 0x76697463615F656ELL && *(_QWORD *)(v18 + 5) == 0x6E6F697461766974)
    {
      MIL::Builder::OperationBuilder::GetBlocks((MIL::Builder::OperationBuilder *)v14);
      v21 = (char *)v57 - (char *)v56;
      v45 = &v56;
      std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
      if (v21 == 16)
      {
        MIL::Builder::OperationBuilder::GetBlocks((MIL::Builder::OperationBuilder *)v14);
        v23 = (void **)*v56;
        v22 = (std::__shared_weak_count *)v56[1];
        v45 = (void ***)*v56;
        v46 = v22;
        if (v22)
        {
          v24 = (unint64_t *)&v22->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v55 = &v56;
        std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
        MIL::Builder::BlockBuilder::GetOperations((MIL::Builder::BlockBuilder *)v23);
        v26 = (char *)v57 - (char *)v56;
        v55 = &v56;
        std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
        if (v26 != 16)
          goto LABEL_62;
        Output = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v53);
        Type = (MIL::IRValueType *)MIL::Builder::Variable::TryGetType(Output);
        v29 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput((MIL::Builder::OperationBuilder *)v14);
        v30 = MIL::Builder::Variable::TryGetType(v29);
        if (!Type)
          goto LABEL_62;
        v31 = (MIL::IRValueType *)v30;
        if (v30
          && (v32 = MIL::IRValueType::AsTensorType(Type),
              v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 88))(v32),
              v34 = MIL::IRValueType::AsTensorType(v31),
              v33 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 88))(v34))
          && (v35 = MIL::IRValueType::AsTensorType(v31),
              (*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 88))(v35) == 4))
        {
          v56 = (void **)v53;
          v57 = v54;
          if (v54)
          {
            v36 = (unint64_t *)&v54->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          v58 = v14;
          v59 = v13;
          if (v13)
          {
            v38 = (unint64_t *)&v13->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector[abi:ne180100](a2, &v56, 2uLL);
          for (j = 2; j != -2; j -= 2)
            std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&(&v56)[j]);
          v22 = v46;
        }
        else
        {
LABEL_62:
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
        }
        if (v22)
        {
          v43 = (unint64_t *)&v22->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v13 = v48;
        if (!v48)
          goto LABEL_18;
        goto LABEL_58;
      }
    }
LABEL_57:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (!v13)
      goto LABEL_18;
LABEL_58:
    v41 = (unint64_t *)&v13->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    goto LABEL_18;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
LABEL_20:
  v10 = v54;
  if (v54)
  {
    v11 = (unint64_t *)&v54->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20696044C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v2 + i);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)va2);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  _Unwind_Resume(a1);
}

void MilTranslator::Passes::FuseConvActivation::Replace(MIL::Builder::BlockBuilder **a1@<X1>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  MIL::Builder::OperationBuilder *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  MIL::Builder::Variable *ArgumentForParameter;
  uint64_t Name;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  MIL::Builder::OperationBuilder *v189;
  unint64_t *v190;
  unint64_t v191;
  MIL::Builder::Variable *v192;
  uint64_t v193;
  __int128 v194;
  MIL::Builder::Variable *v195;
  uint64_t Operator;
  unint64_t *v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  MIL::Builder::OperationBuilder *v206;
  uint64_t v207;
  __int128 v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  MIL::Builder::OperationBuilder *v212;
  MIL::Builder::Variable *Output;
  uint64_t v214;
  __int128 v215;
  size_t size;
  std::string *v217;
  std::string *v218;
  MIL::Builder::Variable *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t *v223;
  uint64_t *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  std::__shared_weak_count *v252;
  std::string v253;
  std::string v254;
  std::__shared_weak_count *v255;
  std::string v256;
  std::__shared_weak_count *v257;
  MIL::Builder::OperationBuilder *v258;
  std::__shared_weak_count *v259;
  MIL::Builder::OperationBuilder *v260;
  std::__shared_weak_count *v261;
  uint64_t v262;
  uint64_t v263;
  MIL::Builder::OperationBuilder *p_p;
  std::__shared_weak_count *v265;
  std::string v266;
  std::string __p;
  MIL::Builder::OperationBuilder *v268;
  std::__shared_weak_count *v269;
  std::__shared_weak_count *v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  uint64_t v279;
  std::__shared_weak_count *v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  uint64_t v301;
  std::__shared_weak_count *v302;
  uint64_t v303;
  std::__shared_weak_count *v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  uint64_t v307;
  std::__shared_weak_count *v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  uint64_t v319;
  std::__shared_weak_count *v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  uint64_t v329;
  std::__shared_weak_count *v330;
  uint64_t v331;
  std::__shared_weak_count *v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  uint64_t v337;
  std::__shared_weak_count *v338;
  uint64_t v339;
  std::__shared_weak_count *v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  std::string v343;
  void *v344;
  char v345;
  std::__shared_weak_count *v346;
  MIL::Builder::OperationBuilder *v347;
  std::__shared_weak_count *v348;
  uint64_t v349;
  std::__shared_weak_count *v350;
  MIL::Builder::OperationBuilder *v351;
  std::__shared_weak_count *v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  std::string v355;

  v4 = *a2;
  if ((char *)a2[1] - (char *)*a2 == 32)
  {
    v7 = (std::__shared_weak_count *)v4[1];
    v353 = *v4;
    v354 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v4 = *a2;
      if ((unint64_t)((char *)a2[1] - (char *)*a2) <= 0x10)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    v11 = (MIL::Builder::OperationBuilder *)v4[2];
    v10 = (std::__shared_weak_count *)v4[3];
    v351 = v11;
    v352 = v10;
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::string::basic_string[abi:ne180100]<0>(&v355, "ne_conv");
    v347 = v11;
    v348 = v10;
    if (v10)
    {
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    MIL::Builder::BlockBuilder::AddOperation();
    if (v348)
    {
      v16 = &v348->__shared_owners_;
      do
        v17 = __ldaxr((unint64_t *)v16);
      while (__stlxr(v17 - 1, (unint64_t *)v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
        std::__shared_weak_count::__release_weak(v348);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v344, "x");
    std::string::basic_string[abi:ne180100]<0>(&v355, "x");
    ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
    Name = MIL::Builder::Variable::GetName(ArgumentForParameter);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v343, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
    }
    else
    {
      v20 = *(_OWORD *)Name;
      v343.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
      *(_OWORD *)&v343.__r_.__value_.__l.__data_ = v20;
    }
    MIL::Builder::OperationBuilder::AddInput();
    v23 = v346;
    if (v346)
    {
      v24 = (unint64_t *)&v346->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v343.__r_.__value_.__l.__data_);
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    if (v345 < 0)
      operator delete(v344);
    std::string::basic_string[abi:ne180100]<0>(&v355, "dense_kernel");
    v341 = v353;
    v342 = v354;
    if (v354)
    {
      v26 = (unint64_t *)&v354->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v339 = v349;
    v340 = v350;
    if (v350)
    {
      v28 = (unint64_t *)&v350->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v341);
    if (v340)
    {
      v30 = &v340->__shared_owners_;
      do
        v31 = __ldaxr((unint64_t *)v30);
      while (__stlxr(v31 - 1, (unint64_t *)v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
        std::__shared_weak_count::__release_weak(v340);
      }
    }
    v32 = v342;
    if (v342)
    {
      v33 = (unint64_t *)&v342->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "strides");
    v337 = v353;
    v338 = v354;
    if (v354)
    {
      v35 = (unint64_t *)&v354->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v335 = v349;
    v336 = v350;
    if (v350)
    {
      v37 = (unint64_t *)&v350->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v337);
    if (v336)
    {
      v39 = &v336->__shared_owners_;
      do
        v40 = __ldaxr((unint64_t *)v39);
      while (__stlxr(v40 - 1, (unint64_t *)v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
        std::__shared_weak_count::__release_weak(v336);
      }
    }
    v41 = v338;
    if (v338)
    {
      v42 = (unint64_t *)&v338->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "pad_mode");
    v333 = v353;
    v334 = v354;
    if (v354)
    {
      v44 = (unint64_t *)&v354->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v331 = v349;
    v332 = v350;
    if (v350)
    {
      v46 = (unint64_t *)&v350->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v333);
    if (v332)
    {
      v48 = &v332->__shared_owners_;
      do
        v49 = __ldaxr((unint64_t *)v48);
      while (__stlxr(v49 - 1, (unint64_t *)v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
        std::__shared_weak_count::__release_weak(v332);
      }
    }
    v50 = v334;
    if (v334)
    {
      v51 = (unint64_t *)&v334->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "pad");
    v329 = v353;
    v330 = v354;
    if (v354)
    {
      v53 = (unint64_t *)&v354->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v327 = v349;
    v328 = v350;
    if (v350)
    {
      v55 = (unint64_t *)&v350->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v329);
    if (v328)
    {
      v57 = &v328->__shared_owners_;
      do
        v58 = __ldaxr((unint64_t *)v57);
      while (__stlxr(v58 - 1, (unint64_t *)v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
        std::__shared_weak_count::__release_weak(v328);
      }
    }
    v59 = v330;
    if (v330)
    {
      v60 = (unint64_t *)&v330->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "dilations");
    v325 = v353;
    v326 = v354;
    if (v354)
    {
      v62 = (unint64_t *)&v354->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    v323 = v349;
    v324 = v350;
    if (v350)
    {
      v64 = (unint64_t *)&v350->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v325);
    if (v324)
    {
      v66 = &v324->__shared_owners_;
      do
        v67 = __ldaxr((unint64_t *)v66);
      while (__stlxr(v67 - 1, (unint64_t *)v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
        std::__shared_weak_count::__release_weak(v324);
      }
    }
    v68 = v326;
    if (v326)
    {
      v69 = (unint64_t *)&v326->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "num_groups");
    v321 = v353;
    v322 = v354;
    if (v354)
    {
      v71 = (unint64_t *)&v354->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    v319 = v349;
    v320 = v350;
    if (v350)
    {
      v73 = (unint64_t *)&v350->__shared_owners_;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v321);
    if (v320)
    {
      v75 = &v320->__shared_owners_;
      do
        v76 = __ldaxr((unint64_t *)v75);
      while (__stlxr(v76 - 1, (unint64_t *)v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
        std::__shared_weak_count::__release_weak(v320);
      }
    }
    v77 = v322;
    if (v322)
    {
      v78 = (unint64_t *)&v322->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "group_kernel_reuse");
    v317 = v353;
    v318 = v354;
    if (v354)
    {
      v80 = (unint64_t *)&v354->__shared_owners_;
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    v315 = v349;
    v316 = v350;
    if (v350)
    {
      v82 = (unint64_t *)&v350->__shared_owners_;
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v317);
    if (v316)
    {
      v84 = &v316->__shared_owners_;
      do
        v85 = __ldaxr((unint64_t *)v84);
      while (__stlxr(v85 - 1, (unint64_t *)v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
        std::__shared_weak_count::__release_weak(v316);
      }
    }
    v86 = v318;
    if (v318)
    {
      v87 = (unint64_t *)&v318->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "bias");
    v313 = v353;
    v314 = v354;
    if (v354)
    {
      v89 = (unint64_t *)&v354->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v311 = v349;
    v312 = v350;
    if (v350)
    {
      v91 = (unint64_t *)&v350->__shared_owners_;
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v313);
    if (v312)
    {
      v93 = &v312->__shared_owners_;
      do
        v94 = __ldaxr((unint64_t *)v93);
      while (__stlxr(v94 - 1, (unint64_t *)v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
        std::__shared_weak_count::__release_weak(v312);
      }
    }
    v95 = v314;
    if (v314)
    {
      v96 = (unint64_t *)&v314->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "acc_left_shift");
    v309 = v353;
    v310 = v354;
    if (v354)
    {
      v98 = (unint64_t *)&v354->__shared_owners_;
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    v307 = v349;
    v308 = v350;
    if (v350)
    {
      v100 = (unint64_t *)&v350->__shared_owners_;
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v309);
    if (v308)
    {
      v102 = &v308->__shared_owners_;
      do
        v103 = __ldaxr((unint64_t *)v102);
      while (__stlxr(v103 - 1, (unint64_t *)v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
        std::__shared_weak_count::__release_weak(v308);
      }
    }
    v104 = v310;
    if (v310)
    {
      v105 = (unint64_t *)&v310->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "acc_bias_shift");
    v305 = v353;
    v306 = v354;
    if (v354)
    {
      v107 = (unint64_t *)&v354->__shared_owners_;
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
    }
    v303 = v349;
    v304 = v350;
    if (v350)
    {
      v109 = (unint64_t *)&v350->__shared_owners_;
      do
        v110 = __ldxr(v109);
      while (__stxr(v110 + 1, v109));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v305);
    if (v304)
    {
      v111 = &v304->__shared_owners_;
      do
        v112 = __ldaxr((unint64_t *)v111);
      while (__stlxr(v112 - 1, (unint64_t *)v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
        std::__shared_weak_count::__release_weak(v304);
      }
    }
    v113 = v306;
    if (v306)
    {
      v114 = (unint64_t *)&v306->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "post_right_shift");
    v301 = v353;
    v302 = v354;
    if (v354)
    {
      v116 = (unint64_t *)&v354->__shared_owners_;
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
    }
    v299 = v349;
    v300 = v350;
    if (v350)
    {
      v118 = (unint64_t *)&v350->__shared_owners_;
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 1, v118));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v301);
    if (v300)
    {
      v120 = &v300->__shared_owners_;
      do
        v121 = __ldaxr((unint64_t *)v120);
      while (__stlxr(v121 - 1, (unint64_t *)v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
        std::__shared_weak_count::__release_weak(v300);
      }
    }
    v122 = v302;
    if (v302)
    {
      v123 = (unint64_t *)&v302->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "transposed");
    v297 = v353;
    v298 = v354;
    if (v354)
    {
      v125 = (unint64_t *)&v354->__shared_owners_;
      do
        v126 = __ldxr(v125);
      while (__stxr(v126 + 1, v125));
    }
    v295 = v349;
    v296 = v350;
    if (v350)
    {
      v127 = (unint64_t *)&v350->__shared_owners_;
      do
        v128 = __ldxr(v127);
      while (__stxr(v128 + 1, v127));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v297);
    if (v296)
    {
      v129 = &v296->__shared_owners_;
      do
        v130 = __ldaxr((unint64_t *)v129);
      while (__stlxr(v130 - 1, (unint64_t *)v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
        std::__shared_weak_count::__release_weak(v296);
      }
    }
    v131 = v298;
    if (v298)
    {
      v132 = (unint64_t *)&v298->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "pre_relu");
    v293 = v353;
    v294 = v354;
    if (v354)
    {
      v134 = (unint64_t *)&v354->__shared_owners_;
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
    }
    v291 = v349;
    v292 = v350;
    if (v350)
    {
      v136 = (unint64_t *)&v350->__shared_owners_;
      do
        v137 = __ldxr(v136);
      while (__stxr(v137 + 1, v136));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v293);
    if (v292)
    {
      v138 = &v292->__shared_owners_;
      do
        v139 = __ldaxr((unint64_t *)v138);
      while (__stlxr(v139 - 1, (unint64_t *)v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
        std::__shared_weak_count::__release_weak(v292);
      }
    }
    v140 = v294;
    if (v294)
    {
      v141 = (unint64_t *)&v294->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "alternative_format_kernel_coefficients");
    v289 = v353;
    v290 = v354;
    if (v354)
    {
      v143 = (unint64_t *)&v354->__shared_owners_;
      do
        v144 = __ldxr(v143);
      while (__stxr(v144 + 1, v143));
    }
    v287 = v349;
    v288 = v350;
    if (v350)
    {
      v145 = (unint64_t *)&v350->__shared_owners_;
      do
        v146 = __ldxr(v145);
      while (__stxr(v146 + 1, v145));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v289);
    if (v288)
    {
      v147 = &v288->__shared_owners_;
      do
        v148 = __ldaxr((unint64_t *)v147);
      while (__stlxr(v148 - 1, (unint64_t *)v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
        std::__shared_weak_count::__release_weak(v288);
      }
    }
    v149 = v290;
    if (v290)
    {
      v150 = (unint64_t *)&v290->__shared_owners_;
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "sparse_mask");
    v285 = v353;
    v286 = v354;
    if (v354)
    {
      v152 = (unint64_t *)&v354->__shared_owners_;
      do
        v153 = __ldxr(v152);
      while (__stxr(v153 + 1, v152));
    }
    v283 = v349;
    v284 = v350;
    if (v350)
    {
      v154 = (unint64_t *)&v350->__shared_owners_;
      do
        v155 = __ldxr(v154);
      while (__stxr(v155 + 1, v154));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v285);
    if (v284)
    {
      v156 = &v284->__shared_owners_;
      do
        v157 = __ldaxr((unint64_t *)v156);
      while (__stlxr(v157 - 1, (unint64_t *)v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
        std::__shared_weak_count::__release_weak(v284);
      }
    }
    v158 = v286;
    if (v286)
    {
      v159 = (unint64_t *)&v286->__shared_owners_;
      do
        v160 = __ldaxr(v159);
      while (__stlxr(v160 - 1, v159));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "sparse_num_nonzero");
    v281 = v353;
    v282 = v354;
    if (v354)
    {
      v161 = (unint64_t *)&v354->__shared_owners_;
      do
        v162 = __ldxr(v161);
      while (__stxr(v162 + 1, v161));
    }
    v279 = v349;
    v280 = v350;
    if (v350)
    {
      v163 = (unint64_t *)&v350->__shared_owners_;
      do
        v164 = __ldxr(v163);
      while (__stxr(v164 + 1, v163));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v281);
    if (v280)
    {
      v165 = &v280->__shared_owners_;
      do
        v166 = __ldaxr((unint64_t *)v165);
      while (__stlxr(v166 - 1, (unint64_t *)v165));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
        std::__shared_weak_count::__release_weak(v280);
      }
    }
    v167 = v282;
    if (v282)
    {
      v168 = (unint64_t *)&v282->__shared_owners_;
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      if (!v169)
      {
        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
        std::__shared_weak_count::__release_weak(v167);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "sparse_num_nonzero_per_filter");
    v277 = v353;
    v278 = v354;
    if (v354)
    {
      v170 = (unint64_t *)&v354->__shared_owners_;
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
    }
    v275 = v349;
    v276 = v350;
    if (v350)
    {
      v172 = (unint64_t *)&v350->__shared_owners_;
      do
        v173 = __ldxr(v172);
      while (__stxr(v173 + 1, v172));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v277);
    if (v276)
    {
      v174 = &v276->__shared_owners_;
      do
        v175 = __ldaxr((unint64_t *)v174);
      while (__stlxr(v175 - 1, (unint64_t *)v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
        std::__shared_weak_count::__release_weak(v276);
      }
    }
    v176 = v278;
    if (v278)
    {
      v177 = (unint64_t *)&v278->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v355, "palette_table");
    v273 = v353;
    v274 = v354;
    if (v354)
    {
      v179 = (unint64_t *)&v354->__shared_owners_;
      do
        v180 = __ldxr(v179);
      while (__stxr(v180 + 1, v179));
    }
    v271 = v349;
    v272 = v350;
    if (v350)
    {
      v181 = (unint64_t *)&v350->__shared_owners_;
      do
        v182 = __ldxr(v181);
      while (__stxr(v182 + 1, v181));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, &v273);
    if (v272)
    {
      v183 = &v272->__shared_owners_;
      do
        v184 = __ldaxr((unint64_t *)v183);
      while (__stlxr(v184 - 1, (unint64_t *)v183));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
        std::__shared_weak_count::__release_weak(v272);
      }
    }
    v185 = v274;
    if (v274)
    {
      v186 = (unint64_t *)&v274->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    MIL::Builder::BlockBuilder::GetOpsetName(*a1);
    MIL::Builder::OperationBuilder::AddBlock();
    MIL::Builder::OperationBuilder::GetBlocks(v351);
    MIL::Builder::BlockBuilder::GetOperations(*(MIL::Builder::BlockBuilder **)__p.__r_.__value_.__l.__data_);
    v189 = *(MIL::Builder::OperationBuilder **)v355.__r_.__value_.__l.__data_;
    v188 = *(std::__shared_weak_count **)(v355.__r_.__value_.__r.__words[0] + 8);
    v268 = *(MIL::Builder::OperationBuilder **)v355.__r_.__value_.__l.__data_;
    v269 = v188;
    if (v188)
    {
      v190 = (unint64_t *)&v188->__shared_owners_;
      do
        v191 = __ldxr(v190);
      while (__stxr(v191 + 1, v190));
    }
    p_p = (MIL::Builder::OperationBuilder *)&v355;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    p_p = (MIL::Builder::OperationBuilder *)&__p;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    std::string::basic_string[abi:ne180100]<0>(&v355, "x");
    v192 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
    v193 = MIL::Builder::Variable::GetName(v192);
    if (*(char *)(v193 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v266, *(const std::string::value_type **)v193, *(_QWORD *)(v193 + 8));
    }
    else
    {
      v194 = *(_OWORD *)v193;
      v266.__r_.__value_.__r.__words[2] = *(_QWORD *)(v193 + 16);
      *(_OWORD *)&v266.__r_.__value_.__l.__data_ = v194;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "x");
    v195 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
    MIL::Builder::Variable::TryGetType(v195);
    MIL::Builder::BlockBuilder::AddInput();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v266.__r_.__value_.__l.__data_);
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    Operator = MIL::Builder::OperationBuilder::GetOperator(v189);
    (*(void (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
    v262 = 0;
    v263 = 0;
    MIL::Builder::BlockBuilder::AddOperation();
    std::string::basic_string[abi:ne180100]<0>(&v355, "x");
    v260 = v268;
    v261 = v269;
    if (v269)
    {
      v197 = (unint64_t *)&v269->__shared_owners_;
      do
        v198 = __ldxr(v197);
      while (__stxr(v198 + 1, v197));
    }
    v258 = p_p;
    v259 = v265;
    if (v265)
    {
      v199 = (unint64_t *)&v265->__shared_owners_;
      do
        v200 = __ldxr(v199);
      while (__stxr(v200 + 1, v199));
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)&v355, (uint64_t *)&v260);
    if (v259)
    {
      v201 = &v259->__shared_owners_;
      do
        v202 = __ldaxr((unint64_t *)v201);
      while (__stlxr(v202 - 1, (unint64_t *)v201));
      if (!v202)
      {
        ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
        std::__shared_weak_count::__release_weak(v259);
      }
    }
    v203 = v261;
    if (v261)
    {
      v204 = (unint64_t *)&v261->__shared_owners_;
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
      }
    }
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    v206 = v268;
    MIL::Builder::OperationBuilder::GetOutputs(v268);
    v207 = MIL::Builder::Variable::GetName(*(MIL::Builder::Variable **)v355.__r_.__value_.__l.__data_);
    if (*(char *)(v207 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v256, *(const std::string::value_type **)v207, *(_QWORD *)(v207 + 8));
    }
    else
    {
      v208 = *(_OWORD *)v207;
      v256.__r_.__value_.__r.__words[2] = *(_QWORD *)(v207 + 16);
      *(_OWORD *)&v256.__r_.__value_.__l.__data_ = v208;
    }
    MIL::Builder::OperationBuilder::GetOutputs(v206);
    MIL::Builder::Variable::TryGetType(*(MIL::Builder::Variable **)__p.__r_.__value_.__l.__data_);
    MIL::Builder::OperationBuilder::AddOutput();
    v209 = v257;
    if (v257)
    {
      v210 = (unint64_t *)&v257->__shared_owners_;
      do
        v211 = __ldaxr(v210);
      while (__stlxr(v211 - 1, v210));
      if (!v211)
      {
        ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
        std::__shared_weak_count::__release_weak(v209);
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v256.__r_.__value_.__l.__data_);
    if (v355.__r_.__value_.__r.__words[0])
    {
      v355.__r_.__value_.__l.__size_ = v355.__r_.__value_.__r.__words[0];
      operator delete(v355.__r_.__value_.__l.__data_);
    }
    MIL::Builder::OperationBuilder::GetOutputs(p_p);
    MIL::Builder::Variable::GetName(*(MIL::Builder::Variable **)v355.__r_.__value_.__l.__data_);
    MIL::Builder::BlockBuilder::AddOutput();
    if (v355.__r_.__value_.__r.__words[0])
    {
      v355.__r_.__value_.__l.__size_ = v355.__r_.__value_.__r.__words[0];
      operator delete(v355.__r_.__value_.__l.__data_);
    }
    v212 = v351;
    Output = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v351);
    v214 = MIL::Builder::Variable::GetName(Output);
    if (*(char *)(v214 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v355, *(const std::string::value_type **)v214, *(_QWORD *)(v214 + 8));
    }
    else
    {
      v215 = *(_OWORD *)v214;
      v355.__r_.__value_.__r.__words[2] = *(_QWORD *)(v214 + 16);
      *(_OWORD *)&v355.__r_.__value_.__l.__data_ = v215;
    }
    if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v355.__r_.__value_.__r.__words[2]);
    else
      size = v355.__r_.__value_.__l.__size_;
    v217 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 6);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v217 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v218 = &v355;
      else
        v218 = (std::string *)v355.__r_.__value_.__r.__words[0];
      memmove(v217, v218, size);
    }
    strcpy((char *)v217 + size, "_fused");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v254, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v254 = __p;
    v219 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v212);
    MIL::Builder::Variable::TryGetType(v219);
    MIL::Builder::OperationBuilder::AddOutput();
    v220 = v255;
    if (v255)
    {
      v221 = (unint64_t *)&v255->__shared_owners_;
      do
        v222 = __ldaxr(v221);
      while (__stlxr(v222 - 1, v221));
      if (!v222)
      {
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
      }
    }
    if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v254.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v253, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v253 = __p;
    MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v253.__r_.__value_.__l.__data_);
    v223 = *a2;
    v224 = a2[1];
    while (v223 != v224)
    {
      v225 = (std::__shared_weak_count *)v223[1];
      v252 = v225;
      if (v225)
      {
        v226 = (unint64_t *)&v225->__shared_owners_;
        do
          v227 = __ldxr(v226);
        while (__stxr(v227 + 1, v226));
        v251 = v225;
        do
          v228 = __ldxr(v226);
        while (__stxr(v228 + 1, v226));
      }
      else
      {
        v251 = 0;
      }
      MIL::Builder::BlockBuilder::RemoveOperation();
      if (v251)
      {
        v229 = (unint64_t *)&v251->__shared_owners_;
        do
          v230 = __ldaxr(v229);
        while (__stlxr(v230 - 1, v229));
        if (!v230)
        {
          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
          std::__shared_weak_count::__release_weak(v251);
        }
      }
      if (v252)
      {
        v231 = (unint64_t *)&v252->__shared_owners_;
        do
          v232 = __ldaxr(v231);
        while (__stlxr(v232 - 1, v231));
        if (!v232)
        {
          ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
          std::__shared_weak_count::__release_weak(v252);
        }
      }
      v223 += 2;
    }
    *(_DWORD *)a3 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    v233 = v265;
    if (v265)
    {
      v234 = (unint64_t *)&v265->__shared_owners_;
      do
        v235 = __ldaxr(v234);
      while (__stlxr(v235 - 1, v234));
      if (!v235)
      {
        ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
        std::__shared_weak_count::__release_weak(v233);
      }
    }
    v236 = v269;
    if (v269)
    {
      v237 = (unint64_t *)&v269->__shared_owners_;
      do
        v238 = __ldaxr(v237);
      while (__stlxr(v238 - 1, v237));
      if (!v238)
      {
        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
        std::__shared_weak_count::__release_weak(v236);
      }
    }
    v239 = v270;
    if (v270)
    {
      v240 = (unint64_t *)&v270->__shared_owners_;
      do
        v241 = __ldaxr(v240);
      while (__stlxr(v241 - 1, v240));
      if (!v241)
      {
        ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
        std::__shared_weak_count::__release_weak(v239);
      }
    }
    v242 = v350;
    if (v350)
    {
      v243 = (unint64_t *)&v350->__shared_owners_;
      do
        v244 = __ldaxr(v243);
      while (__stlxr(v244 - 1, v243));
      if (!v244)
      {
        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
        std::__shared_weak_count::__release_weak(v242);
      }
    }
    v245 = v352;
    if (v352)
    {
      v246 = (unint64_t *)&v352->__shared_owners_;
      do
        v247 = __ldaxr(v246);
      while (__stlxr(v247 - 1, v246));
      if (!v247)
      {
        ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
        std::__shared_weak_count::__release_weak(v245);
      }
    }
    v248 = v354;
    if (v354)
    {
      v249 = (unint64_t *)&v354->__shared_owners_;
      do
        v250 = __ldaxr(v249);
      while (__stlxr(v250 - 1, v249));
      if (!v250)
      {
        ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
        std::__shared_weak_count::__release_weak(v248);
      }
    }
  }
  else
  {
    *(_DWORD *)a3 = 14;
    std::operator+<char>();
    v21 = std::string::append(&v355, "'s pattern");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 24) = *((_QWORD *)&v21->__r_.__value_.__l + 2);
    *(_OWORD *)(a3 + 8) = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
  }
}

void sub_206961F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void MilTranslator::Passes::FuseConvActivation::~FuseConvActivation(void **this)
{
  MilTranslator::Passes::Pass::~Pass(this);
  JUMPOUT(0x20BCFF140);
}

void ANEMachineIR::H2022::Validators::ValidateNeReduce(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeReduce(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeReduce(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeReduce(this, a2);
}

_QWORD *MIL::ANEMachineIR::Interpreter::ConstCpu::Run@<X0>(_DWORD *a1@<X8>)
{
  uint64_t Attribute;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  void *__p;
  char v9;

  std::string::basic_string[abi:ne180100]<0>(&__p, "val");
  Attribute = MIL::IRObject::TryGetAttribute();
  v3 = Attribute;
  if ((v9 & 0x80000000) == 0)
  {
    if (Attribute)
      goto LABEL_3;
LABEL_6:
    *a1 = 2;
    v6 = "No value.";
    v5 = a1 + 2;
    return std::string::basic_string[abi:ne180100]<0>(v5, v6);
  }
  operator delete(__p);
  if (!v3)
    goto LABEL_6;
LABEL_3:
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v5 = a1 + 2;
  if (v4)
  {
    *a1 = 0;
    v6 = (char *)&unk_2069A5097;
  }
  else
  {
    *a1 = 3;
    v6 = "Value is not a tensor.";
  }
  return std::string::basic_string[abi:ne180100]<0>(v5, v6);
}

void sub_206962418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::ConstCpu::~ConstCpu(MIL::ANEMachineIR::Interpreter::ConstCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateBaseNeMatmul@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2022::Validators::ValidateNeBatchMatmul(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeBatchMatmul(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidateNeMatmul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeMatmul(this, a2);
}

void ANEMachineIR::H2020::Const::Make(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10[0] = &unk_24BFE7440;
  v10[1] = ANEMachineIR::H2020::Validators::ValidateConst;
  v11 = v10;
  v8[0] = &off_24BFEC1D0;
  v9 = v8;
  MIL::IROperator::Make();
  v2 = v9;
  if (v9 == v8)
  {
    v3 = 4;
    v2 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v3))(v2);
LABEL_6:
  v4 = v11;
  if (v11 == v10)
  {
    v5 = 4;
    v4 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v5))(v4);
LABEL_11:
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_206962608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  uint64_t v24;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v26 = a24;
  if (a24 == &a21)
  {
    v27 = 4;
    v26 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  v28 = *(_QWORD **)(v24 - 32);
  if (v28 == (_QWORD *)(v24 - 56))
  {
    v29 = 4;
    v28 = (_QWORD *)(v24 - 56);
  }
  else
  {
    if (!v28)
      goto LABEL_11;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_11:
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__function::__func<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEC1D0;
  return result;
}

void std::__function::__func<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEC1D0;
}

void std::__function::__func<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()()
{
  void *__p;
  char v1;

  std::string::basic_string[abi:ne180100]<0>(&__p, "val");
  MIL::IRObject::TryGetAttributeSharedPtr();
  if (v1 < 0)
    operator delete(__p);
}

void sub_206962740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void ANEMachineIR::Validators::ValidateReshape(MIL::IROperation *a1@<X0>, uint64_t a2@<X8>)
{
  ANEMachineIR::Utils *OutputType;
  const MIL::IRValueType *v5;
  const MIL::IRValueType *v6;
  ANEMachineIR::Utils *ParameterType;
  uint64_t v8;
  _QWORD *v9;
  MIL::IRValueType *v10;
  uint64_t v11;
  _QWORD *v12;
  MIL::IRValueType *v13;
  ANEMachineIR::Utils *v14;
  const MIL::IRTensorValueType *v15;
  uint64_t NumberOfElementsFromStaticTensorShape;
  ANEMachineIR::Utils *v17;
  const MIL::IRTensorValueType *v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  MIL::IRValueType *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t *v66;
  __int128 *v67;
  uint64_t v68;
  _QWORD v69[3];
  uint64_t v70;
  std::__shared_weak_count *v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  void *__p;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  void *v84[2];
  char v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  void *v88[2];
  char v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void *v92[2];
  char v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  void *v96[2];
  char v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  void *v100[2];
  char v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void **v104;

  OutputType = (ANEMachineIR::Utils *)MIL::IROperation::GetOutputType(a1);
  if ((ANEMachineIR::Utils::IsStaticTensorType(OutputType, v5) & 1) == 0)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v40 = (std::__shared_weak_count *)LocationPtr[1];
    v102 = *LocationPtr;
    v103 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(p_shared_owners);
      while (__stxr(v42 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v100, "Output must be tensor with static shape");
    MEMORY[0x20BCFEAD4](a2, &v102, 315, v100);
    if (v101 < 0)
      operator delete(v100[0]);
    v43 = v103;
    if (!v103)
      return;
    v44 = (unint64_t *)&v103->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
LABEL_73:
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  ParameterType = (ANEMachineIR::Utils *)MIL::IROperation::GetParameterType();
  if (SHIBYTE(v80) < 0)
    operator delete(__p);
  if ((ANEMachineIR::Utils::IsStaticTensorType(ParameterType, v6) & 1) == 0)
  {
    v46 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v47 = (std::__shared_weak_count *)v46[1];
    v98 = *v46;
    v99 = v47;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    std::string::basic_string[abi:ne180100]<0>(v96, "'x' must be tensor with static shape");
    MEMORY[0x20BCFEAD4](a2, &v98, 315, v96);
    if (v97 < 0)
      operator delete(v96[0]);
    v43 = v99;
    if (!v99)
      return;
    v50 = (unint64_t *)&v99->__shared_owners_;
    do
      v45 = __ldaxr(v50);
    while (__stlxr(v45 - 1, v50));
    goto LABEL_73;
  }
  v8 = MIL::IRValueType::AsTensorType(ParameterType);
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
  if (v9[1] == *v9)
  {
    v51 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v52 = (std::__shared_weak_count *)v51[1];
    v94 = *v51;
    v95 = v52;
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    std::string::basic_string[abi:ne180100]<0>(v92, "'x' cannot be scalar");
    MEMORY[0x20BCFEAD4](a2, &v94, 315, v92);
    if (v93 < 0)
      operator delete(v92[0]);
    v43 = v95;
    if (!v95)
      return;
    v55 = (unint64_t *)&v95->__shared_owners_;
    do
      v45 = __ldaxr(v55);
    while (__stlxr(v45 - 1, v55));
    goto LABEL_73;
  }
  v10 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v11 = MIL::IRValueType::AsTensorType(v10);
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
  if (v12[1] == *v12)
  {
    v56 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v57 = (std::__shared_weak_count *)v56[1];
    v90 = *v56;
    v91 = v57;
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    std::string::basic_string[abi:ne180100]<0>(v88, "Output cannot be scalar");
    MEMORY[0x20BCFEAD4](a2, &v90, 315, v88);
    if (v89 < 0)
      operator delete(v88[0]);
    v43 = v91;
    if (!v91)
      return;
    v60 = (unint64_t *)&v91->__shared_owners_;
    do
      v45 = __ldaxr(v60);
    while (__stlxr(v45 - 1, v60));
    goto LABEL_73;
  }
  v13 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v14 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v13);
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(v14, v15);
  v17 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (NumberOfElementsFromStaticTensorShape == ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(v17, v18))
  {
    v19 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v20 = (std::__shared_weak_count *)v19[1];
    v77 = *v19;
    v78 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = MIL::IRValueType::AsTensorType(ParameterType);
    std::string::basic_string[abi:ne180100]<0>(&v72, "x");
    v24 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v77, v23, (uint64_t)&v72, v24, (MIL::ValidationResult *)&__p);
    if (SHIBYTE(v73) < 0)
      operator delete(v72);
    v25 = v78;
    if (v78)
    {
      v26 = (unint64_t *)&v78->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v29 = (std::__shared_weak_count *)v28[1];
    v70 = *v28;
    v71 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    v33 = MIL::IRValueType::AsTensorType(v32);
    (*(void (**)(_QWORD *__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(v69, a1);
    v34 = v69[0];
    v35 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v70, v33, v34, v35, (MIL::ValidationResult *)&v72);
    v104 = (void **)v69;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v104);
    v36 = v71;
    if (v71)
    {
      v37 = (unint64_t *)&v71->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p) & 1) != 0)
    {
      if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v72) & 1) != 0)
      {
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
LABEL_79:
        MEMORY[0x20BCFEAEC](&v72);
        MEMORY[0x20BCFEAEC](&__p);
        return;
      }
      v66 = &v76;
      *(_OWORD *)(a2 + 8) = v73;
      v73 = 0uLL;
      v67 = &v74;
      *(_OWORD *)(a2 + 24) = v74;
      v68 = v75;
    }
    else
    {
      v66 = &v83;
      *(_OWORD *)(a2 + 8) = v80;
      v80 = 0uLL;
      v67 = &v81;
      *(_OWORD *)(a2 + 24) = v81;
      v68 = v82;
    }
    *(_QWORD *)(a2 + 40) = v68;
    *(_QWORD *)v67 = 0;
    *((_QWORD *)v67 + 1) = 0;
    *((_QWORD *)v67 + 2) = 0;
    *(_QWORD *)a2 = MEMORY[0x24BE620D8] + 16;
    *(_DWORD *)(a2 + 48) = *(_DWORD *)v66;
    goto LABEL_79;
  }
  v61 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  v62 = (std::__shared_weak_count *)v61[1];
  v86 = *v61;
  v87 = v62;
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  std::string::basic_string[abi:ne180100]<0>(v84, "'x' and output must have equal number of elements.");
  MEMORY[0x20BCFEAD4](a2, &v86, 315, v84);
  if (v85 < 0)
    operator delete(v84[0]);
  v43 = v87;
  if (v87)
  {
    v65 = (unint64_t *)&v87->__shared_owners_;
    do
      v45 = __ldaxr(v65);
    while (__stlxr(v45 - 1, v65));
    goto LABEL_73;
  }
}

void sub_206962D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a39 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_206962E7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  JUMPOUT(0x206962E74);
}

void ANEMachineIR::Validators::ValidateTranspose(MIL::IROperation *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Utils *OutputType;
  const MIL::IRValueType *v5;
  const MIL::IRValueType *v6;
  ANEMachineIR::Utils *ParameterType;
  char IsStaticTensorType;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  ANEMachineIR::Utils *v18;
  const MIL::IRTensorValueType *v19;
  _BYTE *v20;
  _BYTE *v21;
  MIL::IRValue *ParameterValue;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  char *v37;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  MIL::IRValueType *v51;
  ANEMachineIR::Utils *v52;
  const MIL::IRTensorValueType *v53;
  unint64_t v54;
  int *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  std::string::size_type size;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  uint64_t *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  std::string::size_type v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  __int128 v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  __int128 v121;
  std::string *v122;
  std::string::size_type v123;
  std::string *v124;
  __int128 v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  std::string::size_type v129;
  std::string *v130;
  __int128 v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  std::string::size_type v135;
  std::string *v136;
  __int128 v137;
  std::string *v138;
  __int128 v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  MIL::IRValueType *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  MIL::ValidationResult *v151;
  _QWORD v152[2];
  void *__p[2];
  std::string::size_type v154;
  _QWORD v155[2];
  void *v156[2];
  std::string::size_type v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  std::string v160;
  std::string v161;
  std::string v162;
  std::string v163;
  std::string v164;
  void *v165[2];
  std::string::size_type v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  std::string v169;
  std::string v170;
  std::string v171;
  std::string v172;
  std::string v173;
  std::string v174;
  std::string v175;
  std::string v176;
  void *v177[2];
  std::string::size_type v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t Data;
  unint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  void *v188[2];
  char v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  void *v192;
  _BYTE *v193;
  char v194;
  void *v195[2];
  char v196;
  uint64_t v197;
  std::__shared_weak_count *v198;

  OutputType = (ANEMachineIR::Utils *)MIL::IROperation::GetOutputType(a1);
  if ((ANEMachineIR::Utils::IsStaticTensorType(OutputType, v5) & 1) == 0)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v39 = (std::__shared_weak_count *)LocationPtr[1];
    v197 = *LocationPtr;
    v198 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(p_shared_owners);
      while (__stxr(v41 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v195, "Output must be tensor with static shape");
    MEMORY[0x20BCFEAD4](a2, &v197, 315, v195);
    if (v196 < 0)
      operator delete(v195[0]);
    v42 = v198;
    if (!v198)
      return;
    v43 = (unint64_t *)&v198->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
LABEL_55:
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v192, "x");
  ParameterType = (ANEMachineIR::Utils *)MIL::IROperation::GetParameterType();
  if (v194 < 0)
    operator delete(v192);
  IsStaticTensorType = ANEMachineIR::Utils::IsStaticTensorType(ParameterType, v6);
  v9 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  if ((IsStaticTensorType & 1) == 0)
  {
    v45 = (std::__shared_weak_count *)v9[1];
    v190 = *v9;
    v191 = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    std::string::basic_string[abi:ne180100]<0>(v188, "'x' must be tensor with static shape");
    MEMORY[0x20BCFEAD4](a2, &v190, 315, v188);
    if (v189 < 0)
      operator delete(v188[0]);
    v42 = v191;
    if (!v191)
      return;
    v48 = (unint64_t *)&v191->__shared_owners_;
    do
      v44 = __ldaxr(v48);
    while (__stlxr(v44 - 1, v48));
    goto LABEL_55;
  }
  v10 = (std::__shared_weak_count *)v9[1];
  v186 = *v9;
  v187 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = MIL::IRValueType::AsTensorType(ParameterType);
  std::string::basic_string[abi:ne180100]<0>(&v192, "x");
  v14 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v186, v13, (uint64_t)&v192, v14, a2);
  if (v194 < 0)
    operator delete(v192);
  v15 = v187;
  if (v187)
  {
    v16 = (unint64_t *)&v187->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x20BCFEAEC](a2);
    v18 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
    ANEMachineIR::Utils::GetStaticTensorShape(v18, v19, (uint64_t)&v192);
    v21 = v192;
    v20 = v193;
    std::string::basic_string[abi:ne180100]<0>(&v181, "perm");
    ParameterValue = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue();
    MIL::IRValue::AsTensor(ParameterValue);
    Data = MIL::IRTensorValue::GetDataView<int>();
    v185 = v23;
    if (SHIBYTE(v183) < 0)
    {
      operator delete(v181);
      v23 = v185;
    }
    v181 = 0;
    v182 = 0;
    v183 = 0;
    if (v23)
    {
      v24 = 0;
      do
      {
        v25 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v24);
        v26 = v25;
        v27 = v182;
        if (v182 >= v183)
        {
          v29 = v181;
          v30 = (v182 - v181) >> 2;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 62)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v32 = v183 - v181;
          if ((v183 - v181) >> 1 > v31)
            v31 = v32 >> 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
            v33 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v183, v33);
            v29 = v181;
            v27 = v182;
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[4 * v30];
          *(_DWORD *)v35 = *v26;
          v28 = v35 + 4;
          while (v27 != v29)
          {
            v36 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          v181 = v35;
          v182 = v28;
          v183 = &v34[4 * v33];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_DWORD *)v182 = *v25;
          v28 = v27 + 4;
        }
        v182 = v28;
        ++v24;
      }
      while (v185 > v24);
      v37 = v181;
    }
    else
    {
      v37 = 0;
      v28 = 0;
    }
    if ((v28 - v37) >> 2 == (v193 - (_BYTE *)v192) >> 3)
    {
      ANEMachineIR::Utils::InferPositiveAxes((uint64_t)&v181, &v176);
      memset(&v175, 0, sizeof(v175));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v175, v176.__r_.__value_.__l.__data_, v176.__r_.__value_.__l.__size_, (uint64_t)(v176.__r_.__value_.__l.__size_ - v176.__r_.__value_.__r.__words[0]) >> 2);
      std::__sort<std::__less<int,int> &,int *>();
      if (v175.__r_.__value_.__l.__size_ == v175.__r_.__value_.__r.__words[0])
      {
LABEL_64:
        v51 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        v52 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v51);
        ANEMachineIR::Utils::GetStaticTensorShape(v52, v53, (uint64_t)&v174);
        v54 = (v193 - (_BYTE *)v192) >> 3;
        if (v54 != (uint64_t)(v176.__r_.__value_.__l.__size_ - v176.__r_.__value_.__r.__words[0]) >> 2)
          __assert_rtn("InferTransposeOutputShape", "ShapeValidators.cpp", 97, "input_shape.size() == perm_positive.size()");
        memset(&v173, 0, sizeof(v173));
        std::vector<unsigned long long>::resize((uint64_t)&v173, v54);
        v55 = (int *)v176.__r_.__value_.__r.__words[0];
        if (v176.__r_.__value_.__l.__size_ != v176.__r_.__value_.__r.__words[0])
        {
          v56 = (uint64_t)(v176.__r_.__value_.__l.__size_ - v176.__r_.__value_.__r.__words[0]) >> 2;
          v57 = v192;
          v58 = (v193 - (_BYTE *)v192) >> 3;
          v59 = (_QWORD *)v173.__r_.__value_.__r.__words[0];
          if (v56 <= 1)
            v56 = 1;
          do
          {
            v61 = *v55++;
            v60 = v61;
            if (v58 <= v61)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            *v59++ = v57[v60];
            --v56;
          }
          while (v56);
        }
        if (v173.__r_.__value_.__l.__size_ - v173.__r_.__value_.__r.__words[0] == v174.__r_.__value_.__l.__size_
                                                                                 - v174.__r_.__value_.__r.__words[0])
        {
          if (!memcmp(v173.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_ - v173.__r_.__value_.__r.__words[0]))
          {
            v143 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
            v144 = v143[1];
            v152[0] = *v143;
            v152[1] = v144;
            if (v144)
            {
              v145 = (unint64_t *)(v144 + 8);
              do
                v146 = __ldxr(v145);
              while (__stxr(v146 + 1, v145));
            }
            v147 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            v148 = MIL::IRValueType::AsTensorType(v147);
            (*(void (**)(std::string *__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v172, a1);
            v149 = v172.__r_.__value_.__r.__words[0];
            v150 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
            ANEMachineIR::Validators::ValidateLiveTensorSize(v152, v148, v149, v150, a2);
            v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v171);
            std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)v152);
            if (MIL::ValidationResult::IsGood(a2))
            {
              v151 = (MIL::ValidationResult *)MEMORY[0x20BCFEAEC](a2);
              MIL::ValidationResult::ValidationResult(v151);
            }
          }
          else
          {
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v174);
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v173);
            v62 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
            v63 = v62[1];
            v155[0] = *v62;
            v155[1] = v63;
            if (v63)
            {
              v64 = (unint64_t *)(v63 + 8);
              do
                v65 = __ldxr(v64);
              while (__stxr(v65 + 1, v64));
            }
            std::operator+<char>();
            v66 = std::string::append(&v164, " does not match inferred shape ");
            v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
            v169.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v67;
            v66->__r_.__value_.__l.__size_ = 0;
            v66->__r_.__value_.__r.__words[2] = 0;
            v66->__r_.__value_.__r.__words[0] = 0;
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v68 = &v171;
            else
              v68 = (std::string *)v171.__r_.__value_.__r.__words[0];
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v171.__r_.__value_.__r.__words[2]);
            else
              size = v171.__r_.__value_.__l.__size_;
            v70 = std::string::append(&v169, (const std::string::value_type *)v68, size);
            v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            v170.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            v72 = std::string::append(&v170, ".");
            v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            v154 = v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            MEMORY[0x20BCFEAD4](a2, v155, 313, __p);
            if (SHIBYTE(v154) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v170.__r_.__value_.__l.__data_);
            if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v169.__r_.__value_.__l.__data_);
            if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v164.__r_.__value_.__l.__data_);
            std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)v155);
            if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v171.__r_.__value_.__l.__data_);
            if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v172.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          v97 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
          v98 = (std::__shared_weak_count *)v97[1];
          v158 = *v97;
          v159 = v98;
          if (v98)
          {
            v99 = (unint64_t *)&v98->__shared_owners_;
            do
              v100 = __ldxr(v99);
            while (__stxr(v100 + 1, v99));
          }
          std::to_string(&v169, (uint64_t)(v174.__r_.__value_.__l.__size_ - v174.__r_.__value_.__r.__words[0]) >> 3);
          v101 = std::string::insert(&v169, 0, "Output rank ");
          v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
          v170.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v102;
          v101->__r_.__value_.__l.__size_ = 0;
          v101->__r_.__value_.__r.__words[2] = 0;
          v101->__r_.__value_.__r.__words[0] = 0;
          v103 = std::string::append(&v170, " does not match rank of inferred shape ");
          v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
          v171.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v104;
          v103->__r_.__value_.__l.__size_ = 0;
          v103->__r_.__value_.__r.__words[2] = 0;
          v103->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v164, (uint64_t)(v173.__r_.__value_.__l.__size_ - v173.__r_.__value_.__r.__words[0]) >> 3);
          if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v105 = &v164;
          else
            v105 = (std::string *)v164.__r_.__value_.__r.__words[0];
          if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v106 = HIBYTE(v164.__r_.__value_.__r.__words[2]);
          else
            v106 = v164.__r_.__value_.__l.__size_;
          v107 = std::string::append(&v171, (const std::string::value_type *)v105, v106);
          v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
          v172.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v108;
          v107->__r_.__value_.__l.__size_ = 0;
          v107->__r_.__value_.__r.__words[2] = 0;
          v107->__r_.__value_.__r.__words[0] = 0;
          v109 = std::string::append(&v172, ".");
          v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
          v157 = v109->__r_.__value_.__r.__words[2];
          *(_OWORD *)v156 = v110;
          v109->__r_.__value_.__l.__size_ = 0;
          v109->__r_.__value_.__r.__words[2] = 0;
          v109->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x20BCFEAD4](a2, &v158, 313, v156);
          if (SHIBYTE(v157) < 0)
            operator delete(v156[0]);
          if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v172.__r_.__value_.__l.__data_);
          if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v164.__r_.__value_.__l.__data_);
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v171.__r_.__value_.__l.__data_);
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v170.__r_.__value_.__l.__data_);
          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v169.__r_.__value_.__l.__data_);
          v111 = v159;
          if (v159)
          {
            v112 = (unint64_t *)&v159->__shared_owners_;
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
        }
        if (v173.__r_.__value_.__r.__words[0])
        {
          v173.__r_.__value_.__l.__size_ = v173.__r_.__value_.__r.__words[0];
          operator delete(v173.__r_.__value_.__l.__data_);
        }
        if (v174.__r_.__value_.__r.__words[0])
        {
          v174.__r_.__value_.__l.__size_ = v174.__r_.__value_.__r.__words[0];
          operator delete(v174.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        v49 = 0;
        v50 = (uint64_t)(v175.__r_.__value_.__l.__size_ - v175.__r_.__value_.__r.__words[0]) >> 2;
        if (v50 <= 1)
          v50 = 1;
        while (v49 == *(_DWORD *)(v175.__r_.__value_.__r.__words[0] + 4 * v49))
        {
          if (v50 == ++v49)
            goto LABEL_64;
        }
        v114 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
        v115 = (std::__shared_weak_count *)v114[1];
        v167 = *v114;
        v168 = v115;
        if (v115)
        {
          v116 = (unint64_t *)&v115->__shared_owners_;
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
        }
        std::string::basic_string[abi:ne180100]<0>(&v163, "perm");
        v118 = std::string::insert(&v163, 0, "Values of '");
        v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
        v164.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v119;
        v118->__r_.__value_.__l.__size_ = 0;
        v118->__r_.__value_.__r.__words[2] = 0;
        v118->__r_.__value_.__r.__words[0] = 0;
        v120 = std::string::append(&v164, "' ");
        v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
        v169.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v121;
        v120->__r_.__value_.__l.__size_ = 0;
        v120->__r_.__value_.__r.__words[2] = 0;
        v120->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v162, (v182 - v181) >> 2);
        if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v122 = &v162;
        else
          v122 = (std::string *)v162.__r_.__value_.__r.__words[0];
        if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v123 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
        else
          v123 = v162.__r_.__value_.__l.__size_;
        v124 = std::string::append(&v169, (const std::string::value_type *)v122, v123);
        v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
        v170.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v125;
        v124->__r_.__value_.__l.__size_ = 0;
        v124->__r_.__value_.__r.__words[2] = 0;
        v124->__r_.__value_.__r.__words[0] = 0;
        v126 = std::string::append(&v170, " must be in range [-");
        v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
        v171.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v127;
        v126->__r_.__value_.__l.__size_ = 0;
        v126->__r_.__value_.__r.__words[2] = 0;
        v126->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v161, (v20 - v21) >> 3);
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v128 = &v161;
        else
          v128 = (std::string *)v161.__r_.__value_.__r.__words[0];
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v129 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
        else
          v129 = v161.__r_.__value_.__l.__size_;
        v130 = std::string::append(&v171, (const std::string::value_type *)v128, v129);
        v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
        v172.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v131;
        v130->__r_.__value_.__l.__size_ = 0;
        v130->__r_.__value_.__r.__words[2] = 0;
        v130->__r_.__value_.__r.__words[0] = 0;
        v132 = std::string::append(&v172, ", ");
        v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
        v173.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v133;
        v132->__r_.__value_.__l.__size_ = 0;
        v132->__r_.__value_.__r.__words[2] = 0;
        v132->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v160, (v20 - v21) >> 3);
        if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v134 = &v160;
        else
          v134 = (std::string *)v160.__r_.__value_.__r.__words[0];
        if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v135 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
        else
          v135 = v160.__r_.__value_.__l.__size_;
        v136 = std::string::append(&v173, (const std::string::value_type *)v134, v135);
        v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
        v174.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v137;
        v136->__r_.__value_.__l.__size_ = 0;
        v136->__r_.__value_.__r.__words[2] = 0;
        v136->__r_.__value_.__r.__words[0] = 0;
        v138 = std::string::append(&v174, ")");
        v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
        v166 = v138->__r_.__value_.__r.__words[2];
        *(_OWORD *)v165 = v139;
        v138->__r_.__value_.__l.__size_ = 0;
        v138->__r_.__value_.__r.__words[2] = 0;
        v138->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x20BCFEAD4](a2, &v167, 315, v165);
        if (SHIBYTE(v166) < 0)
          operator delete(v165[0]);
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v174.__r_.__value_.__l.__data_);
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v160.__r_.__value_.__l.__data_);
        if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v173.__r_.__value_.__l.__data_);
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v172.__r_.__value_.__l.__data_);
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v161.__r_.__value_.__l.__data_);
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v171.__r_.__value_.__l.__data_);
        if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v170.__r_.__value_.__l.__data_);
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v162.__r_.__value_.__l.__data_);
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v169.__r_.__value_.__l.__data_);
        if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v164.__r_.__value_.__l.__data_);
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v163.__r_.__value_.__l.__data_);
        v140 = v168;
        if (v168)
        {
          v141 = (unint64_t *)&v168->__shared_owners_;
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
      }
      if (v175.__r_.__value_.__r.__words[0])
      {
        v175.__r_.__value_.__l.__size_ = v175.__r_.__value_.__r.__words[0];
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      if (v176.__r_.__value_.__r.__words[0])
      {
        v176.__r_.__value_.__l.__size_ = v176.__r_.__value_.__r.__words[0];
        operator delete(v176.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v74 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      v75 = (std::__shared_weak_count *)v74[1];
      v179 = *v74;
      v180 = v75;
      if (v75)
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
      }
      std::string::basic_string[abi:ne180100]<0>(&v171, "perm");
      v78 = std::string::insert(&v171, 0, "Size of '");
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v172.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      v80 = std::string::append(&v172, "' ");
      v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v173.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v170, (v182 - v181) >> 2);
      if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = &v170;
      else
        v82 = (std::string *)v170.__r_.__value_.__r.__words[0];
      if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = HIBYTE(v170.__r_.__value_.__r.__words[2]);
      else
        v83 = v170.__r_.__value_.__l.__size_;
      v84 = std::string::append(&v173, (const std::string::value_type *)v82, v83);
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v174.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      v86 = std::string::append(&v174, " does not match rank of x ");
      v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
      v175.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v87;
      v86->__r_.__value_.__l.__size_ = 0;
      v86->__r_.__value_.__r.__words[2] = 0;
      v86->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v169, (v20 - v21) >> 3);
      if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v88 = &v169;
      else
        v88 = (std::string *)v169.__r_.__value_.__r.__words[0];
      if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v89 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
      else
        v89 = v169.__r_.__value_.__l.__size_;
      v90 = std::string::append(&v175, (const std::string::value_type *)v88, v89);
      v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v176.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v176.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      v92 = std::string::append(&v176, ".");
      v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v178 = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)v177 = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x20BCFEAD4](a2, &v179, 315, v177);
      if (SHIBYTE(v178) < 0)
        operator delete(v177[0]);
      if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v176.__r_.__value_.__l.__data_);
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v175.__r_.__value_.__l.__data_);
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v174.__r_.__value_.__l.__data_);
      if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v173.__r_.__value_.__l.__data_);
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v171.__r_.__value_.__l.__data_);
      v94 = v180;
      if (v180)
      {
        v95 = (unint64_t *)&v180->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
    }
    if (v181)
    {
      v182 = v181;
      operator delete(v181);
    }
    if (v192)
    {
      v193 = v192;
      operator delete(v192);
    }
  }
}

void std::vector<unsigned long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned long long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t ANEMachineIR::H2020::Validators::ValidateNeConv@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateNeConv(this, a2);
}

uint64_t ANEMachineIR::H2020::BaseNeMatmul::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t result;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  void *v40[2];
  uint64_t v41;
  void *__p;
  void *v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  _QWORD *v49;
  _BYTE v50[24];
  _BYTE *v51;
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t Scalar;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  v49 = (_QWORD *)v4;
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v4, "acc_left_shift", (uint64_t *)&__p);
  v6 = __p;
  __p = 0;
  if (v6)
    (*(void (**)(void *))(*(_QWORD *)v6 + 8))(v6);
  v7 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v5 + 5) + 32))(*((_QWORD *)v5 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v5 + 5) + 48))(*((_QWORD *)v5 + 5), 1);
  v10 = v49;
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v10, "post_right_shift", (uint64_t *)&__p);
  v12 = __p;
  __p = 0;
  if (v12)
    (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
  v13 = v47;
  if (v47)
  {
    v14 = (unint64_t *)&v47->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 32))(*((_QWORD *)v11 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 48))(*((_QWORD *)v11 + 5), 1);
  v16 = v49;
  Scalar = MIL::IRTensorValueType::MakeScalar();
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v43 = v18 + 1;
  v44 = v18 + 1;
  v55 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v16, "post_scale", &v46);
  v20 = v46;
  v46 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v45;
  if (v45)
  {
    v22 = (unint64_t *)&v45->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v19 + 5) + 32))(*((_QWORD *)v19 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v19 + 5) + 48))(*((_QWORD *)v19 + 5), 1);
  __p = 0;
  *(_OWORD *)v40 = *(_OWORD *)a2;
  v41 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v24 = (uint64_t)v49;
  if (v49)
  {
    v25 = (std::__shared_weak_count *)operator new();
    v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v25->__shared_owners_ = 0;
    v25->__shared_weak_owners_ = 0;
    v25[1].__vftable = (std::__shared_weak_count_vtbl *)v24;
    v39 = v25;
    v49 = 0;
    if (__p)
    {
      v26 = (std::__shared_weak_count *)operator new();
      v27 = (std::__shared_weak_count_vtbl *)__p;
      v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
      v26->__shared_owners_ = 0;
      v26->__shared_weak_owners_ = 0;
      v26[1].__vftable = v27;
    }
    else
    {
      v26 = 0;
    }
  }
  else
  {
    v26 = 0;
    v39 = 0;
    v49 = 0;
  }
  v38 = v26;
  __p = 0;
  v52[0] = &unk_24BFE7440;
  v52[1] = ANEMachineIR::H2020::Validators::ValidateBaseNeMatmul;
  v53 = v52;
  v51 = 0;
  MIL::IROperator::Make();
  v28 = v51;
  if (v51 == v50)
  {
    v29 = 4;
    v28 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_34;
    v29 = 5;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v29))(v28);
LABEL_34:
  v30 = v53;
  if (v53 == v52)
  {
    v31 = 4;
    v30 = v52;
    goto LABEL_38;
  }
  if (v53)
  {
    v31 = 5;
LABEL_38:
    (*(void (**)(_QWORD *))(*v30 + 8 * v31))(v30);
  }
  if (v38)
  {
    v32 = (unint64_t *)&v38->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v39)
  {
    v34 = (unint64_t *)&v39->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v49;
  if (v49)
  {
    v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v49);
    return MEMORY[0x20BCFF140](v37, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206964894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a20, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a30, 0);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2020::NeBatchMatmul::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  void **v8;
  uint64_t *p_shared_owners;
  unint64_t v10;
  unsigned __int8 *v11;
  void **v12;
  uint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  uint64_t v16;
  void **v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count_vtbl *v57;
  unsigned __int8 *v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  char **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  void **v94;
  char *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  char **v103;
  _QWORD *v104;
  uint64_t v105;
  MIL::Validation::TensorDTypeConstraints *v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  unint64_t v111;
  void **v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  void **v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count_vtbl *v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count_vtbl *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void **v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  MIL::Validation::TensorRankValueConstraints *v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count_vtbl *v153;
  void **v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count_vtbl *v160;
  void **v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  void **v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  MIL::Validation::TensorSymbolicShapeConstraints *v174;
  void **v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count_vtbl *v181;
  void **v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count_vtbl *v188;
  void **v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count_vtbl *v195;
  void **v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count_vtbl *v202;
  void **v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count_vtbl *v209;
  void **v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count_vtbl *v216;
  void **v217;
  std::__shared_weak_count *v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count_vtbl *v223;
  void **v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count_vtbl *v230;
  void **v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count_vtbl *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count_vtbl *v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  void **v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  void **v244;
  std::__shared_weak_count_vtbl *result;
  uint64_t v246;
  void **v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  void *v253[2];
  char v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  void *v257[2];
  char v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263;
  char v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  char v268;
  void *v269;
  char v270;
  std::__shared_weak_count_vtbl *v271;
  std::__shared_weak_count *v272;
  void *v273[2];
  char v274;
  void *v275;
  char v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  void *v279[2];
  char v280;
  void *v281;
  char v282;
  std::__shared_weak_count_vtbl *v283;
  std::__shared_weak_count *v284;
  void *v285[2];
  char v286;
  void *v287;
  char v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count *v290;
  void *v291[2];
  char v292;
  void *v293;
  char v294;
  std::__shared_weak_count_vtbl *v295;
  std::__shared_weak_count *v296;
  void **v297;
  std::__shared_weak_count *v298;
  std::__shared_weak_count_vtbl *v299;
  std::__shared_weak_count *v300;
  void *v301;
  char v302;
  std::__shared_weak_count_vtbl *v303;
  std::__shared_weak_count *v304;
  void *v305;
  char v306;
  std::__shared_weak_count_vtbl *v307;
  std::__shared_weak_count *v308;
  void **v309;
  std::__shared_weak_count *v310;
  void *v311[2];
  char v312;
  std::__shared_weak_count_vtbl *v313;
  std::__shared_weak_count *v314;
  void *v315[2];
  char v316;
  void *v317;
  char v318;
  std::__shared_weak_count_vtbl *v319;
  std::__shared_weak_count *v320;
  void *v321[2];
  char v322;
  void *v323;
  char v324;
  std::__shared_weak_count_vtbl *v325;
  std::__shared_weak_count *v326;
  void *v327[2];
  char v328;
  void *v329;
  char v330;
  std::__shared_weak_count_vtbl *v331;
  std::__shared_weak_count *v332;
  char **v333;
  std::__shared_weak_count *v334;
  std::__shared_weak_count_vtbl *v335;
  std::__shared_weak_count *v336;
  void *v337[2];
  uint64_t v338;
  void *v339;
  void *v340;
  _QWORD *v341;
  std::__shared_weak_count *v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  char **v346;
  std::__shared_weak_count *v347;
  std::__shared_weak_count *v348;
  void *__p;
  void *v350;
  _QWORD *v351;
  void *v352;
  void *v353;
  _QWORD *v354;
  std::__shared_weak_count *v355;
  std::__shared_weak_count *v356;
  std::__shared_weak_count *v357;
  std::__shared_weak_count *v358;
  std::__shared_weak_count_vtbl *v359;
  _BYTE v360[24];
  _BYTE *v361;
  _QWORD v362[3];
  MIL::Validation::TensorDTypeConstraints *v363;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v366;
  void **v367;
  void **v368;
  uint64_t v369;
  char *v370;
  char **v371;
  uint64_t v372;

  v372 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v359 = (std::__shared_weak_count_vtbl *)v6;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "acc_left_shift", (uint64_t *)&v367);
  v8 = v367;
  v367 = 0;
  if (v8)
    (*((void (**)(void **))*v8 + 1))(v8);
  if (v358)
  {
    p_shared_owners = &v358->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v10 - 1, (unint64_t *)p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
      std::__shared_weak_count::__release_weak(v358);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v7 + 5) + 32))(*((_QWORD *)v7 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v7 + 5) + 48))(*((_QWORD *)v7 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v359, "post_right_shift", (uint64_t *)&v367);
  v12 = v367;
  v367 = 0;
  if (v12)
    (*((void (**)(void **))*v12 + 1))(v12);
  if (v357)
  {
    v13 = &v357->__shared_owners_;
    do
      v14 = __ldaxr((unint64_t *)v13);
    while (__stlxr(v14 - 1, (unint64_t *)v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 32))(*((_QWORD *)v11 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 48))(*((_QWORD *)v11 + 5), 1);
  v15 = v359;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = (void **)operator new(8uLL);
  v367 = v17;
  *v17 = (void *)v16;
  v368 = v17 + 1;
  v369 = (uint64_t)(v17 + 1);
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v15, "post_scale", (uint64_t *)&v352);
  v19 = v352;
  v352 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v356;
  if (v356)
  {
    v21 = (unint64_t *)&v356->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v367)
  {
    v368 = v367;
    operator delete(v367);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v359;
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v27->__get_deleter;
  v366 = (uint64_t)&v27->__get_deleter;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v27->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  Scalar = v27;
  v367 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = operator new(0x18uLL);
  v354 = v31 + 3;
  *v31 = v28;
  v31[1] = v29;
  v31[2] = v30;
  v352 = v31;
  v353 = v31 + 3;
  v368 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = operator new(0x18uLL);
  v351 = v35 + 3;
  *v35 = v32;
  v35[1] = v33;
  v35[2] = v34;
  __p = v35;
  v350 = v35 + 3;
  v369 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v23, "x", (uint64_t *)&v339);
  v36 = v339;
  v339 = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  v37 = v355;
  if (v355)
  {
    v38 = (unint64_t *)&v355->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (__p)
  {
    v350 = __p;
    operator delete(__p);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v40 = v359;
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v44->__get_deleter;
  v366 = (uint64_t)&v44->__get_deleter;
  v44->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v41;
  v44->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v42;
  v44->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v43;
  Scalar = v44;
  v367 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = operator new(0x18uLL);
  v354 = v48 + 3;
  *v48 = v45;
  v48[1] = v46;
  v48[2] = v47;
  v352 = v48;
  v353 = v48 + 3;
  v368 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = operator new(0x18uLL);
  v351 = v52 + 3;
  *v52 = v49;
  v52[1] = v50;
  v52[2] = v51;
  __p = v52;
  v350 = v52 + 3;
  v369 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v40, "y", (uint64_t *)&v339);
  v53 = v339;
  v339 = 0;
  if (v53)
    (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
  v54 = v348;
  if (v348)
  {
    v55 = (unint64_t *)&v348->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (__p)
  {
    v350 = __p;
    operator delete(__p);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v57 = v359;
  v367 = (void **)MIL::IRTensorValueType::MakeScalar();
  v368 = (void **)MIL::IRTensorValueType::MakeScalar();
  v369 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v58 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v57, "matrix_vector_bias", (uint64_t *)&Scalar);
  v59 = Scalar;
  Scalar = 0;
  if (v59)
    (*((void (**)(std::__shared_weak_count_vtbl *))v59->~__shared_weak_count + 1))(v59);
  v60 = v347;
  if (v347)
  {
    v61 = (unint64_t *)&v347->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v58 + 5) + 32))(*((_QWORD *)v58 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v58 + 5) + 48))(*((_QWORD *)v58 + 5), 1);
  v346 = 0;
  v63 = operator new();
  *(_QWORD *)v63 = 0;
  *(_QWORD *)(v63 + 8) = 0;
  *(_QWORD *)(v63 + 16) = 0;
  v367 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v346, (void **)v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v367, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v346, 1uLL);
  v64 = v346;
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = operator new(0x18uLL);
  v354 = v68 + 3;
  *v68 = v65;
  v68[1] = v66;
  v68[2] = v67;
  v352 = v68;
  v353 = v68 + 3;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = MIL::IRUnknownDimension::Make(a1, 0);
  v72 = operator new(0x18uLL);
  v351 = v72 + 3;
  *v72 = v69;
  v72[1] = v70;
  v72[2] = v71;
  __p = v72;
  v350 = v72 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = MIL::IRUnknownDimension::Make(a1, 0);
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = operator new(0x18uLL);
  v341 = v76 + 3;
  *v76 = v73;
  v76[1] = v74;
  v76[2] = v75;
  v339 = v76;
  v340 = v76 + 3;
  v366 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v77 = v343;
  v344 = v343;
  if (v343)
  {
    v78 = (_QWORD *)operator new();
    v79 = v343;
    *v78 = &unk_24BFE7320;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v79;
  }
  else
  {
    v78 = 0;
  }
  v345 = v78;
  v343 = 0;
  v80 = v64[2];
  v81 = v64[1];
  if (v81 >= v80)
  {
    v83 = (v81 - *v64) >> 4;
    v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v85 = v80 - *v64;
    if (v85 >> 3 > v84)
      v84 = v85 >> 3;
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
      v86 = 0xFFFFFFFFFFFFFFFLL;
    else
      v86 = v84;
    v371 = v64 + 2;
    v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v64 + 2), v86);
    v89 = &v87[16 * v83];
    *(_QWORD *)v89 = v77;
    *((_QWORD *)v89 + 1) = v78;
    v345 = 0;
    v344 = 0;
    v91 = *v64;
    v90 = v64[1];
    if (v90 == *v64)
    {
      v94 = (void **)v64[1];
      v92 = &v87[16 * v83];
    }
    else
    {
      v92 = &v87[16 * v83];
      do
      {
        v93 = *((_OWORD *)v90 - 1);
        v90 -= 16;
        *((_OWORD *)v92 - 1) = v93;
        v92 -= 16;
        *(_QWORD *)v90 = 0;
        *((_QWORD *)v90 + 1) = 0;
      }
      while (v90 != v91);
      v94 = (void **)*v64;
      v90 = v64[1];
    }
    v82 = v89 + 16;
    *v64 = v92;
    v367 = v94;
    v368 = v94;
    v64[1] = v89 + 16;
    v369 = (uint64_t)v90;
    v95 = v64[2];
    v64[2] = &v87[16 * v88];
    v370 = v95;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v367);
  }
  else
  {
    *(_QWORD *)v81 = v77;
    *((_QWORD *)v81 + 1) = v78;
    v82 = v81 + 16;
    v345 = 0;
    v344 = 0;
  }
  v64[1] = v82;
  v96 = v343;
  v343 = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = v342;
  if (v342)
  {
    v98 = (unint64_t *)&v342->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (v339)
  {
    v340 = v339;
    operator delete(v339);
  }
  if (__p)
  {
    v350 = __p;
    operator delete(__p);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  *(_OWORD *)v337 = *(_OWORD *)a2;
  v338 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v100 = v359;
  v335 = v359;
  if (v359)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v100;
  }
  else
  {
    v101 = 0;
  }
  v336 = v101;
  v359 = 0;
  v333 = v346;
  if (v346)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v346;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v334 = v102;
  v346 = 0;
  v362[0] = &unk_24BFE7440;
  v362[1] = ANEMachineIR::H2020::Validators::ValidateNeBatchMatmul;
  v363 = (MIL::Validation::TensorDTypeConstraints *)v362;
  v361 = 0;
  MIL::IROperator::Make();
  v104 = v361;
  if (v361 == v360)
  {
    v105 = 4;
    v104 = v360;
  }
  else
  {
    if (!v361)
      goto LABEL_98;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_98:
  v106 = v363;
  if (v363 == (MIL::Validation::TensorDTypeConstraints *)v362)
  {
    v107 = 4;
    v106 = (MIL::Validation::TensorDTypeConstraints *)v362;
    goto LABEL_102;
  }
  if (v363)
  {
    v107 = 5;
LABEL_102:
    v106 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v106 + 8 * v107))();
  }
  if (v334)
  {
    v108 = &v334->__shared_owners_;
    do
      v109 = __ldaxr((unint64_t *)v108);
    while (__stlxr(v109 - 1, (unint64_t *)v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
      std::__shared_weak_count::__release_weak(v334);
    }
  }
  if (v336)
  {
    v110 = &v336->__shared_owners_;
    do
      v111 = __ldaxr((unint64_t *)v110);
    while (__stlxr(v111 - 1, (unint64_t *)v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
      std::__shared_weak_count::__release_weak(v336);
    }
  }
  if (SHIBYTE(v338) < 0)
    operator delete(v337[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v106);
  v112 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v329, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v331 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v332 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v327, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v112 + 3))(v112, &v331, v327);
  if (v328 < 0)
    operator delete(v327[0]);
  v115 = v332;
  if (v332)
  {
    v116 = (unint64_t *)&v332->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*((void (**)(std::__shared_weak_count_vtbl *))v118->~__shared_weak_count + 1))(v118);
  if (v330 < 0)
    operator delete(v329);
  v119 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v323, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v325 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v326 = v120;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v321, "KernelT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v119 + 3))(v119, &v325, v321);
  if (v322 < 0)
    operator delete(v321[0]);
  v122 = v326;
  if (v326)
  {
    v123 = (unint64_t *)&v326->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  if (v324 < 0)
    operator delete(v323);
  v126 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v317, "matrix_vector_bias");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v319 = Scalar;
  if (Scalar)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = Scalar;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v320 = v127;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v315, "KernelT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v126 + 3))(v126, &v319, v315);
  if (v316 < 0)
    operator delete(v315[0]);
  v129 = v320;
  if (v320)
  {
    v130 = (unint64_t *)&v320->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = Scalar;
  Scalar = 0;
  if (v132)
    (*((void (**)(std::__shared_weak_count_vtbl *))v132->~__shared_weak_count + 1))(v132);
  if (v318 < 0)
    operator delete(v317);
  v133 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v313 = Scalar;
  if (Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v314 = v134;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v311, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v133 + 3))(v133, &v313, v311);
  if (v312 < 0)
    operator delete(v311[0]);
  v136 = v314;
  if (v314)
  {
    v137 = (unint64_t *)&v314->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = Scalar;
  Scalar = 0;
  if (v139)
    (*((void (**)(std::__shared_weak_count_vtbl *))v139->~__shared_weak_count + 1))(v139);
  v140 = *a3;
  v309 = v367;
  if (v367)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = v367;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = (std::__shared_weak_count_vtbl *)v142;
  }
  else
  {
    v141 = 0;
  }
  v310 = v141;
  v367 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v140 + 56))(v140, &v309);
  v143 = v310;
  if (v310)
  {
    v144 = (unint64_t *)&v310->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = (MIL::Validation::TensorRankValueConstraints *)v367;
  v367 = 0;
  if (v146)
    v146 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v146 + 8))(v146);
  MIL::Validation::TensorRankValueConstraints::Make(v146);
  v147 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v305, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v307 = Scalar;
  if (Scalar)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = Scalar;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v308 = v148;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v147 + 4))(v147, &v307, 3, 5);
  v150 = v308;
  if (v308)
  {
    v151 = (unint64_t *)&v308->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = Scalar;
  Scalar = 0;
  if (v153)
    (*((void (**)(std::__shared_weak_count_vtbl *))v153->~__shared_weak_count + 1))(v153);
  if (v306 < 0)
    operator delete(v305);
  v154 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v301, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v303 = Scalar;
  if (Scalar)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = Scalar;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v304 = v155;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v154 + 4))(v154, &v303, 3, 5);
  v157 = v304;
  if (v304)
  {
    v158 = (unint64_t *)&v304->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = Scalar;
  Scalar = 0;
  if (v160)
    (*((void (**)(std::__shared_weak_count_vtbl *))v160->~__shared_weak_count + 1))(v160);
  if (v302 < 0)
    operator delete(v301);
  v161 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v299 = Scalar;
  if (Scalar)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = Scalar;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v300 = v162;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v161 + 4))(v161, &v299, 3, 5);
  v164 = v300;
  if (v300)
  {
    v165 = (unint64_t *)&v300->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = Scalar;
  Scalar = 0;
  if (v167)
    (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
  v168 = *a3;
  v297 = v367;
  if (v367)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = v367;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = (std::__shared_weak_count_vtbl *)v170;
  }
  else
  {
    v169 = 0;
  }
  v298 = v169;
  v367 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v168 + 56))(v168, &v297);
  v171 = v298;
  if (v298)
  {
    v172 = (unint64_t *)&v298->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = (MIL::Validation::TensorSymbolicShapeConstraints *)v367;
  v367 = 0;
  if (v174)
    v174 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v174 + 8))(v174);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v174);
  v175 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v293, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v295 = Scalar;
  if (Scalar)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = Scalar;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = v177;
  }
  else
  {
    v176 = 0;
  }
  v296 = v176;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v291, "BatchX");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t, void **))*v175 + 4))(v175, &v295, 0, -3, v291);
  if (v292 < 0)
    operator delete(v291[0]);
  v178 = v296;
  if (v296)
  {
    v179 = (unint64_t *)&v296->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = Scalar;
  Scalar = 0;
  if (v181)
    (*((void (**)(std::__shared_weak_count_vtbl *))v181->~__shared_weak_count + 1))(v181);
  if (v294 < 0)
    operator delete(v293);
  v182 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v287, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v289 = Scalar;
  if (Scalar)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v184 = Scalar;
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = v184;
  }
  else
  {
    v183 = 0;
  }
  v290 = v183;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v285, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v182 + 3))(v182, &v289, -2, v285);
  if (v286 < 0)
    operator delete(v285[0]);
  v185 = v290;
  if (v290)
  {
    v186 = (unint64_t *)&v290->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = Scalar;
  Scalar = 0;
  if (v188)
    (*((void (**)(std::__shared_weak_count_vtbl *))v188->~__shared_weak_count + 1))(v188);
  if (v288 < 0)
    operator delete(v287);
  v189 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v281, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v283 = Scalar;
  if (Scalar)
  {
    v190 = (std::__shared_weak_count *)operator new();
    v191 = Scalar;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v190->__shared_owners_ = 0;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = v191;
  }
  else
  {
    v190 = 0;
  }
  v284 = v190;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v279, "M");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v189 + 3))(v189, &v283, -1, v279);
  if (v280 < 0)
    operator delete(v279[0]);
  v192 = v284;
  if (v284)
  {
    v193 = (unint64_t *)&v284->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = Scalar;
  Scalar = 0;
  if (v195)
    (*((void (**)(std::__shared_weak_count_vtbl *))v195->~__shared_weak_count + 1))(v195);
  if (v282 < 0)
    operator delete(v281);
  v196 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v275, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v277 = Scalar;
  if (Scalar)
  {
    v197 = (std::__shared_weak_count *)operator new();
    v198 = Scalar;
    v197->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v197->__shared_owners_ = 0;
    v197->__shared_weak_owners_ = 0;
    v197[1].__vftable = v198;
  }
  else
  {
    v197 = 0;
  }
  v278 = v197;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v273, "BatchY");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t, void **))*v196 + 4))(v196, &v277, 0, -3, v273);
  if (v274 < 0)
    operator delete(v273[0]);
  v199 = v278;
  if (v278)
  {
    v200 = (unint64_t *)&v278->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = Scalar;
  Scalar = 0;
  if (v202)
    (*((void (**)(std::__shared_weak_count_vtbl *))v202->~__shared_weak_count + 1))(v202);
  if (v276 < 0)
    operator delete(v275);
  v203 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v269, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v271 = Scalar;
  if (Scalar)
  {
    v204 = (std::__shared_weak_count *)operator new();
    v205 = Scalar;
    v204->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v204->__shared_owners_ = 0;
    v204->__shared_weak_owners_ = 0;
    v204[1].__vftable = v205;
  }
  else
  {
    v204 = 0;
  }
  v272 = v204;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v267, "M2");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v203 + 3))(v203, &v271, -2, v267);
  if (v268 < 0)
    operator delete(v267[0]);
  v206 = v272;
  if (v272)
  {
    v207 = (unint64_t *)&v272->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = Scalar;
  Scalar = 0;
  if (v209)
    (*((void (**)(std::__shared_weak_count_vtbl *))v209->~__shared_weak_count + 1))(v209);
  if (v270 < 0)
    operator delete(v269);
  v210 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v263, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v265 = Scalar;
  if (Scalar)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = Scalar;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = v212;
  }
  else
  {
    v211 = 0;
  }
  v266 = v211;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v210 + 3))(v210, &v265, -1, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v213 = v266;
  if (v266)
  {
    v214 = (unint64_t *)&v266->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = Scalar;
  Scalar = 0;
  if (v216)
    (*((void (**)(std::__shared_weak_count_vtbl *))v216->~__shared_weak_count + 1))(v216);
  if (v264 < 0)
    operator delete(v263);
  v217 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v259 = Scalar;
  if (Scalar)
  {
    v218 = (std::__shared_weak_count *)operator new();
    v219 = Scalar;
    v218->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v218->__shared_owners_ = 0;
    v218->__shared_weak_owners_ = 0;
    v218[1].__vftable = v219;
  }
  else
  {
    v218 = 0;
  }
  v260 = v218;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v257, "BatchXBatchYBroadcasted");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t, void **))*v217 + 4))(v217, &v259, 0, -3, v257);
  if (v258 < 0)
    operator delete(v257[0]);
  v220 = v260;
  if (v260)
  {
    v221 = (unint64_t *)&v260->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = Scalar;
  Scalar = 0;
  if (v223)
    (*((void (**)(std::__shared_weak_count_vtbl *))v223->~__shared_weak_count + 1))(v223);
  v224 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v255 = Scalar;
  if (Scalar)
  {
    v225 = (std::__shared_weak_count *)operator new();
    v226 = Scalar;
    v225->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v225->__shared_owners_ = 0;
    v225->__shared_weak_owners_ = 0;
    v225[1].__vftable = v226;
  }
  else
  {
    v225 = 0;
  }
  v256 = v225;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v253, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v224 + 3))(v224, &v255, -2, v253);
  if (v254 < 0)
    operator delete(v253[0]);
  v227 = v256;
  if (v256)
  {
    v228 = (unint64_t *)&v256->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v230 = Scalar;
  Scalar = 0;
  if (v230)
    (*((void (**)(std::__shared_weak_count_vtbl *))v230->~__shared_weak_count + 1))(v230);
  v231 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v251 = Scalar;
  if (Scalar)
  {
    v232 = (std::__shared_weak_count *)operator new();
    v233 = Scalar;
    v232->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v232->__shared_owners_ = 0;
    v232->__shared_weak_owners_ = 0;
    v232[1].__vftable = v233;
  }
  else
  {
    v232 = 0;
  }
  v252 = v232;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v231 + 3))(v231, &v251, -1, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v234 = v252;
  if (v252)
  {
    v235 = (unint64_t *)&v252->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v237 = Scalar;
  Scalar = 0;
  if (v237)
    (*((void (**)(std::__shared_weak_count_vtbl *))v237->~__shared_weak_count + 1))(v237);
  v238 = *a3;
  v247 = v367;
  if (v367)
  {
    v239 = (std::__shared_weak_count *)operator new();
    v240 = v367;
    v239->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v239->__shared_owners_ = 0;
    v239->__shared_weak_owners_ = 0;
    v239[1].__vftable = (std::__shared_weak_count_vtbl *)v240;
  }
  else
  {
    v239 = 0;
  }
  v248 = v239;
  v367 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v238 + 56))(v238, &v247);
  v241 = v248;
  if (v248)
  {
    v242 = (unint64_t *)&v248->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = v367;
  v367 = 0;
  if (v244)
    (*((void (**)(void **))*v244 + 1))(v244);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v346, 0);
  result = v359;
  if (v359)
  {
    v246 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v359);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v246, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_20696687C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3E8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 208), 0);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2020::NeMatmul::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  void **v8;
  uint64_t *p_shared_owners;
  unint64_t v10;
  unsigned __int8 *v11;
  void **v12;
  uint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  uint64_t v16;
  void **v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  uint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count_vtbl *v64;
  unsigned __int8 *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  __int128 v97;
  void **v98;
  char *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  char **v107;
  _QWORD *v108;
  uint64_t v109;
  MIL::Validation::TensorDTypeConstraints *v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  void **v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  void **v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count_vtbl *v129;
  void **v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  void **v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  void **v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  void **v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  MIL::Validation::TensorSymbolicShapeConstraints *v157;
  void **v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count_vtbl *v164;
  void **v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  void **v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count_vtbl *v178;
  void **v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count_vtbl *v185;
  void **v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count_vtbl *v192;
  void **v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count_vtbl *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  void **v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void **v206;
  std::__shared_weak_count_vtbl *result;
  uint64_t v208;
  void **v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  char v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  void *v215[2];
  char v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  void *v219[2];
  char v220;
  void *v221;
  char v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  void *v225[2];
  char v226;
  void *v227;
  char v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  void *v231[2];
  char v232;
  void *v233;
  char v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  void *v237[2];
  char v238;
  void *v239;
  char v240;
  std::__shared_weak_count_vtbl *v241;
  std::__shared_weak_count *v242;
  void **v243;
  std::__shared_weak_count *v244;
  void *v245[2];
  char v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  void *v251;
  char v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  char v256;
  void *v257;
  char v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263;
  char v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  char v268;
  void *v269;
  char v270;
  std::__shared_weak_count_vtbl *v271;
  std::__shared_weak_count *v272;
  char **v273;
  std::__shared_weak_count *v274;
  std::__shared_weak_count_vtbl *v275;
  std::__shared_weak_count *v276;
  void *v277[2];
  uint64_t v278;
  void *v279;
  void *v280;
  _QWORD *v281;
  std::__shared_weak_count *v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  char **v286;
  std::__shared_weak_count *v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count *v289;
  void *__p;
  void *v291;
  _QWORD *v292;
  void *v293;
  void *v294;
  _QWORD *v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count *v297;
  std::__shared_weak_count *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count_vtbl *v300;
  _BYTE v301[24];
  _BYTE *v302;
  _QWORD v303[3];
  MIL::Validation::TensorDTypeConstraints *v304;
  void **v305;
  void **v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v313;
  uint64_t v314;

  v314 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v300 = (std::__shared_weak_count_vtbl *)v6;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "acc_left_shift", (uint64_t *)&v305);
  v8 = v305;
  v305 = 0;
  if (v8)
    (*((void (**)(void **))*v8 + 1))(v8);
  if (v299)
  {
    p_shared_owners = &v299->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v10 - 1, (unint64_t *)p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v7 + 5) + 32))(*((_QWORD *)v7 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v7 + 5) + 48))(*((_QWORD *)v7 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v300, "post_right_shift", (uint64_t *)&v305);
  v12 = v305;
  v305 = 0;
  if (v12)
    (*((void (**)(void **))*v12 + 1))(v12);
  if (v298)
  {
    v13 = &v298->__shared_owners_;
    do
      v14 = __ldaxr((unint64_t *)v13);
    while (__stlxr(v14 - 1, (unint64_t *)v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 32))(*((_QWORD *)v11 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 48))(*((_QWORD *)v11 + 5), 1);
  v15 = v300;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = (void **)operator new(8uLL);
  v305 = v17;
  *v17 = (void *)v16;
  v306 = v17 + 1;
  v307 = (uint64_t)(v17 + 1);
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v15, "post_scale", (uint64_t *)&v293);
  v19 = v293;
  v293 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v297;
  if (v297)
  {
    v21 = (unint64_t *)&v297->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v300;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v26->__on_zero_shared;
  v313 = (uint64_t)&v26->__on_zero_shared;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v26->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  Scalar = v26;
  v305 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(0x10uLL);
  v295 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  v293 = v29;
  v294 = v29 + 2;
  v306 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x10uLL);
  v292 = v32 + 2;
  *v32 = v30;
  v32[1] = v31;
  __p = v32;
  v291 = v32 + 2;
  v307 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v23, "x", (uint64_t *)&v279);
  v33 = v279;
  v279 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = v296;
  if (v296)
  {
    v35 = (unint64_t *)&v296->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (__p)
  {
    v291 = __p;
    operator delete(__p);
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v37 = v300;
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v40->__on_zero_shared;
  v313 = (uint64_t)&v40->__on_zero_shared;
  v40->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
  v40->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
  Scalar = v40;
  v305 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x10uLL);
  v295 = v43 + 2;
  *v43 = v41;
  v43[1] = v42;
  v293 = v43;
  v294 = v43 + 2;
  v306 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = operator new(0x10uLL);
  v292 = v46 + 2;
  *v46 = v44;
  v46[1] = v45;
  __p = v46;
  v291 = v46 + 2;
  v307 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v37, "y", (uint64_t *)&v279);
  v48 = v279;
  v279 = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = v289;
  if (v289)
  {
    v50 = (unint64_t *)&v289->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (__p)
  {
    v291 = __p;
    operator delete(__p);
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v300;
  v305 = (void **)MIL::IRTensorValueType::MakeScalar();
  v306 = (void **)MIL::IRTensorValueType::MakeScalar();
  v307 = MIL::IRTensorValueType::MakeScalar();
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v54;
  v54->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v53;
  p_on_zero_shared = (uint64_t)&v54->~__shared_weak_count_0;
  v313 = (uint64_t)&v54->~__shared_weak_count_0;
  v308 = MIL::IRTensorValueType::MakeWithShape();
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v293 = v56;
  *v56 = v55;
  v295 = v56 + 1;
  v294 = v56 + 1;
  v309 = MIL::IRTensorValueType::MakeWithShape();
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v292 = v58 + 1;
  v291 = v58 + 1;
  v310 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v52, "bias", (uint64_t *)&v279);
  v60 = v279;
  v279 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = v288;
  if (v288)
  {
    v62 = (unint64_t *)&v288->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v291 = __p;
    operator delete(__p);
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v300;
  v305 = (void **)MIL::IRTensorValueType::MakeScalar();
  v306 = (void **)MIL::IRTensorValueType::MakeScalar();
  v307 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v64, "matrix_vector_bias", (uint64_t *)&Scalar);
  v66 = Scalar;
  Scalar = 0;
  if (v66)
    (*((void (**)(std::__shared_weak_count_vtbl *))v66->~__shared_weak_count + 1))(v66);
  v67 = v287;
  if (v287)
  {
    v68 = (unint64_t *)&v287->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v286 = 0;
  v70 = operator new();
  *(_QWORD *)v70 = 0;
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v70 + 16) = 0;
  v305 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v286, (void **)v70);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v305, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v286, 1uLL);
  v71 = v286;
  v72 = MIL::IRUnknownDimension::Make(a1, 0);
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = operator new(0x10uLL);
  v295 = v74 + 2;
  *v74 = v72;
  v74[1] = v73;
  v293 = v74;
  v294 = v74 + 2;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = operator new(0x10uLL);
  v292 = v77 + 2;
  *v77 = v75;
  v77[1] = v76;
  __p = v77;
  v291 = v77 + 2;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape();
  v78 = MIL::IRUnknownDimension::Make(a1, 0);
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = operator new(0x10uLL);
  v281 = v80 + 2;
  *v80 = v78;
  v80[1] = v79;
  v279 = v80;
  v280 = v80 + 2;
  v313 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v81 = v283;
  v284 = v283;
  if (v283)
  {
    v82 = (_QWORD *)operator new();
    v83 = v283;
    *v82 = &unk_24BFE7320;
    v82[1] = 0;
    v82[2] = 0;
    v82[3] = v83;
  }
  else
  {
    v82 = 0;
  }
  v285 = v82;
  v283 = 0;
  v84 = v71[2];
  v85 = v71[1];
  if (v85 >= v84)
  {
    v87 = (v85 - *v71) >> 4;
    v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v89 = v84 - *v71;
    if (v89 >> 3 > v88)
      v88 = v89 >> 3;
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF0)
      v90 = 0xFFFFFFFFFFFFFFFLL;
    else
      v90 = v88;
    v309 = (uint64_t)(v71 + 2);
    v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v71 + 2), v90);
    v93 = &v91[16 * v87];
    *(_QWORD *)v93 = v81;
    *((_QWORD *)v93 + 1) = v82;
    v285 = 0;
    v284 = 0;
    v95 = *v71;
    v94 = v71[1];
    if (v94 == *v71)
    {
      v98 = (void **)v71[1];
      v96 = &v91[16 * v87];
    }
    else
    {
      v96 = &v91[16 * v87];
      do
      {
        v97 = *((_OWORD *)v94 - 1);
        v94 -= 16;
        *((_OWORD *)v96 - 1) = v97;
        v96 -= 16;
        *(_QWORD *)v94 = 0;
        *((_QWORD *)v94 + 1) = 0;
      }
      while (v94 != v95);
      v98 = (void **)*v71;
      v94 = v71[1];
    }
    v86 = v93 + 16;
    *v71 = v96;
    v305 = v98;
    v306 = v98;
    v71[1] = v93 + 16;
    v307 = (uint64_t)v94;
    v99 = v71[2];
    v71[2] = &v91[16 * v92];
    v308 = (uint64_t)v99;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v305);
  }
  else
  {
    *(_QWORD *)v85 = v81;
    *((_QWORD *)v85 + 1) = v82;
    v86 = v85 + 16;
    v285 = 0;
    v284 = 0;
  }
  v71[1] = v86;
  v100 = v283;
  v283 = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  v101 = v282;
  if (v282)
  {
    v102 = (unint64_t *)&v282->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if (v279)
  {
    v280 = v279;
    operator delete(v279);
  }
  if (__p)
  {
    v291 = __p;
    operator delete(__p);
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  *(_OWORD *)v277 = *(_OWORD *)a2;
  v278 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v104 = v300;
  v275 = v300;
  if (v300)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v104;
  }
  else
  {
    v105 = 0;
  }
  v276 = v105;
  v300 = 0;
  v273 = v286;
  if (v286)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v286;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v274 = v106;
  v286 = 0;
  v303[0] = &unk_24BFE7440;
  v303[1] = ANEMachineIR::H2020::Validators::ValidateNeMatmul;
  v304 = (MIL::Validation::TensorDTypeConstraints *)v303;
  v302 = 0;
  MIL::IROperator::Make();
  v108 = v302;
  if (v302 == v301)
  {
    v109 = 4;
    v108 = v301;
  }
  else
  {
    if (!v302)
      goto LABEL_111;
    v109 = 5;
  }
  (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_111:
  v110 = v304;
  if (v304 == (MIL::Validation::TensorDTypeConstraints *)v303)
  {
    v111 = 4;
    v110 = (MIL::Validation::TensorDTypeConstraints *)v303;
    goto LABEL_115;
  }
  if (v304)
  {
    v111 = 5;
LABEL_115:
    v110 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v110 + 8 * v111))();
  }
  if (v274)
  {
    v112 = &v274->__shared_owners_;
    do
      v113 = __ldaxr((unint64_t *)v112);
    while (__stlxr(v113 - 1, (unint64_t *)v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
      std::__shared_weak_count::__release_weak(v274);
    }
  }
  if (v276)
  {
    v114 = &v276->__shared_owners_;
    do
      v115 = __ldaxr((unint64_t *)v114);
    while (__stlxr(v115 - 1, (unint64_t *)v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  if (SHIBYTE(v278) < 0)
    operator delete(v277[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v110);
  v116 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v269, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v271 = Scalar;
  if (Scalar)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = Scalar;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v272 = v117;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v267, "KernelT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v116 + 3))(v116, &v271, v267);
  if (v268 < 0)
    operator delete(v267[0]);
  v119 = v272;
  if (v272)
  {
    v120 = (unint64_t *)&v272->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = Scalar;
  Scalar = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v270 < 0)
    operator delete(v269);
  v123 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v263, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v265 = Scalar;
  if (Scalar)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = Scalar;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = v125;
  }
  else
  {
    v124 = 0;
  }
  v266 = v124;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v123 + 3))(v123, &v265, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v126 = v266;
  if (v266)
  {
    v127 = (unint64_t *)&v266->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = Scalar;
  Scalar = 0;
  if (v129)
    (*((void (**)(std::__shared_weak_count_vtbl *))v129->~__shared_weak_count + 1))(v129);
  if (v264 < 0)
    operator delete(v263);
  v130 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v257, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v259 = Scalar;
  if (Scalar)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = Scalar;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v260 = v131;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v255, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v130 + 3))(v130, &v259, v255);
  if (v256 < 0)
    operator delete(v255[0]);
  v133 = v260;
  if (v260)
  {
    v134 = (unint64_t *)&v260->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = Scalar;
  Scalar = 0;
  if (v136)
    (*((void (**)(std::__shared_weak_count_vtbl *))v136->~__shared_weak_count + 1))(v136);
  if (v258 < 0)
    operator delete(v257);
  v137 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v251, "matrix_vector_bias");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v253 = Scalar;
  if (Scalar)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = Scalar;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v254 = v138;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "KernelT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v137 + 3))(v137, &v253, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v140 = v254;
  if (v254)
  {
    v141 = (unint64_t *)&v254->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = Scalar;
  Scalar = 0;
  if (v143)
    (*((void (**)(std::__shared_weak_count_vtbl *))v143->~__shared_weak_count + 1))(v143);
  if (v252 < 0)
    operator delete(v251);
  v144 = v305;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v247 = Scalar;
  if (Scalar)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = Scalar;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v248 = v145;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v245, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v144 + 3))(v144, &v247, v245);
  if (v246 < 0)
    operator delete(v245[0]);
  v147 = v248;
  if (v248)
  {
    v148 = (unint64_t *)&v248->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = Scalar;
  Scalar = 0;
  if (v150)
    (*((void (**)(std::__shared_weak_count_vtbl *))v150->~__shared_weak_count + 1))(v150);
  v151 = *a3;
  v243 = v305;
  if (v305)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = v305;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = (std::__shared_weak_count_vtbl *)v153;
  }
  else
  {
    v152 = 0;
  }
  v244 = v152;
  v305 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v151 + 56))(v151, &v243);
  v154 = v244;
  if (v244)
  {
    v155 = (unint64_t *)&v244->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = (MIL::Validation::TensorSymbolicShapeConstraints *)v305;
  v305 = 0;
  if (v157)
    v157 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v157 + 8))(v157);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v157);
  v158 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v239, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v241 = Scalar;
  if (Scalar)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = Scalar;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v242 = v159;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v237, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v158 + 3))(v158, &v241, 0, v237);
  if (v238 < 0)
    operator delete(v237[0]);
  v161 = v242;
  if (v242)
  {
    v162 = (unint64_t *)&v242->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = Scalar;
  Scalar = 0;
  if (v164)
    (*((void (**)(std::__shared_weak_count_vtbl *))v164->~__shared_weak_count + 1))(v164);
  if (v240 < 0)
    operator delete(v239);
  v165 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v233, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v235 = Scalar;
  if (Scalar)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = Scalar;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v236 = v166;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v231, "M");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v165 + 3))(v165, &v235, 1, v231);
  if (v232 < 0)
    operator delete(v231[0]);
  v168 = v236;
  if (v236)
  {
    v169 = (unint64_t *)&v236->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = Scalar;
  Scalar = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  if (v234 < 0)
    operator delete(v233);
  v172 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v227, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v229 = Scalar;
  if (Scalar)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = Scalar;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v230 = v173;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v225, "M");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v172 + 3))(v172, &v229, 0, v225);
  if (v226 < 0)
    operator delete(v225[0]);
  v175 = v230;
  if (v230)
  {
    v176 = (unint64_t *)&v230->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = Scalar;
  Scalar = 0;
  if (v178)
    (*((void (**)(std::__shared_weak_count_vtbl *))v178->~__shared_weak_count + 1))(v178);
  if (v228 < 0)
    operator delete(v227);
  v179 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v221, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v223 = Scalar;
  if (Scalar)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = Scalar;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v224 = v180;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v219, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v179 + 3))(v179, &v223, 1, v219);
  if (v220 < 0)
    operator delete(v219[0]);
  v182 = v224;
  if (v224)
  {
    v183 = (unint64_t *)&v224->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = Scalar;
  Scalar = 0;
  if (v185)
    (*((void (**)(std::__shared_weak_count_vtbl *))v185->~__shared_weak_count + 1))(v185);
  if (v222 < 0)
    operator delete(v221);
  v186 = v305;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v217 = Scalar;
  if (Scalar)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = Scalar;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v218 = v187;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v215, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v186 + 3))(v186, &v217, 0, v215);
  if (v216 < 0)
    operator delete(v215[0]);
  v189 = v218;
  if (v218)
  {
    v190 = (unint64_t *)&v218->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = Scalar;
  Scalar = 0;
  if (v192)
    (*((void (**)(std::__shared_weak_count_vtbl *))v192->~__shared_weak_count + 1))(v192);
  v193 = v305;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v213 = Scalar;
  if (Scalar)
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = Scalar;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = v195;
  }
  else
  {
    v194 = 0;
  }
  v214 = v194;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v211, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v193 + 3))(v193, &v213, 1, v211);
  if (v212 < 0)
    operator delete(v211[0]);
  v196 = v214;
  if (v214)
  {
    v197 = (unint64_t *)&v214->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = Scalar;
  Scalar = 0;
  if (v199)
    (*((void (**)(std::__shared_weak_count_vtbl *))v199->~__shared_weak_count + 1))(v199);
  v200 = *a3;
  v209 = v305;
  if (v305)
  {
    v201 = (std::__shared_weak_count *)operator new();
    v202 = v305;
    v201->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v201->__shared_owners_ = 0;
    v201->__shared_weak_owners_ = 0;
    v201[1].__vftable = (std::__shared_weak_count_vtbl *)v202;
  }
  else
  {
    v201 = 0;
  }
  v210 = v201;
  v305 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v200 + 56))(v200, &v209);
  v203 = v210;
  if (v210)
  {
    v204 = (unint64_t *)&v210->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = v305;
  v305 = 0;
  if (v206)
    (*((void (**)(void **))*v206 + 1))(v206);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v286, 0);
  result = v300;
  if (v300)
  {
    v208 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v300);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v208, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206968B50(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 144);
  *(_QWORD *)(v2 - 144) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x320], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 216), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateBasePeElementWiseBinary@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateBasePeElementWiseUnary@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateNeActivation@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

void ANEMachineIR::H2022::Validators::ValidateNeAdd(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeAdd(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidateNeMaximum(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNeMaximum(this, a2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateNeMinimum@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateNeMul@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateNeSquare@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

void ANEMachineIR::H2022::Validators::ValidatePeAbs(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseUnary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeSquare(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseUnary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeAdd(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeAddAbs(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeAddMul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeAddSquare(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeMaximum(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeMinimum(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeMul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeNotEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeLess(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeLessEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeGreater(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeGreaterEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePeElementWiseBinary(this, a2);
}

void MilTranslator::OpTranslator::TranslateActivation(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  std::string *v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  MIL::IRValueType *ParameterType;
  ANEMachineIR::Utils *v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  MIL::IRNamedValueType *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  MIL::IRValueType *Type;
  ANEMachineIR::Utils *v24;
  const MIL::IRTensorValueType *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t Name;
  __int128 v29;
  __int128 *v30;
  _QWORD *v31;
  MIL::IRNamedValueType *v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  MIL::IRNamedValueType *v36;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t Message;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  MIL::IRNamedValueType *v49;
  uint64_t v50;
  char *v51;
  size_t v52;
  std::string *v53;
  char *v54;
  std::string *v55;
  std::string::value_type *v56;
  std::string::size_type size;
  int v58;
  uint64_t v59;
  char *v60;
  size_t v61;
  std::string *v62;
  char *v63;
  std::string *v64;
  __int128 v65;
  char *OpsetString;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::string v88;
  std::__shared_weak_count *v89;
  std::string v90;
  std::__shared_weak_count *v91;
  std::string v92;
  void *v93;
  char v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  uint64_t v97;
  std::string v98;
  std::__shared_weak_count *v99;
  _DWORD v100[2];
  std::string v101;
  void *v102;
  char v103;
  std::__shared_weak_count *v104;
  void *v105;
  char v106;
  MIL::IRNamedValueType *v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::string v111;
  std::string v112;
  void *__p;
  char v114;
  std::string v115;
  int v116;
  char v117;
  std::string __str;
  void *v119;
  _BYTE *v120;
  std::vector<int> v121;
  std::string __sz;
  int v123;
  char v124;
  void *v125;
  _BYTE *v126;
  MIL::IRNamedValueType *v127;
  std::__shared_weak_count *v128;
  std::string v129;
  std::string v130;
  std::string v131;
  std::string v132;
  std::string v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v132.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v7;
  }
  {
    *(_DWORD *)a3 = 4;
    std::operator+<char>();
    v9 = std::string::append(&v112, "' not implemented");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 24) = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)(a3 + 8) = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_182;
    v11 = (void *)v112.__r_.__value_.__r.__words[0];
    goto LABEL_181;
  }
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
  if ((char)v8[63] < 0)
    std::string::__init_copy_ctor_external(&v131, *((const std::string::value_type **)v8 + 5), *((_QWORD *)v8 + 6));
  else
    v131 = *(std::string *)(v8 + 40);
  std::string::basic_string[abi:ne180100]<0>(&v112, "x");
  v12 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, _QWORD))(*(_QWORD *)a2 + 120))(a2, &v112, 0);
  v13 = v12;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v112.__r_.__value_.__l.__data_);
    if (v13)
    {
LABEL_12:
      if (*(char *)(v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v13;
        v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
        *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v14;
      }
      std::string::basic_string[abi:ne180100]<0>(&v112, "x");
      ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
      v16 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, (uint64_t)&v130, v16, &v129);
      v17 = (uint64_t *)(*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 176))(a2);
      v18 = *v17;
      if (v17[1] == *v17)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v20 = *(MIL::IRNamedValueType **)v18;
      v19 = *(std::__shared_weak_count **)(v18 + 8);
      v127 = v20;
      v128 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v20);
      v24 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
      ANEMachineIR::Utils::GetStaticTensorShape(v24, v25, (uint64_t)&v125);
      v26 = (_QWORD *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)v16 + 96))(v16);
      MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, (uint64_t)&v130, (uint64_t)(v26[1] - *v26) >> 3, (uint64_t)&__sz);
      MilTranslator::OpTranslator::GetTransposeOpParamPerm((v126 - (_BYTE *)v125) >> 3, (uint64_t)&__sz, &v121);
      MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)&v125, (unsigned int **)&v121, &v119);
      (*(void (**)(ANEMachineIR::Utils *))(*(_QWORD *)v24 + 88))(v24);
      v27 = MIL::IRTensorValueType::Make();
      Name = MIL::IRNamedValueType::GetName(v20);
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
      }
      else
      {
        v29 = *(_OWORD *)Name;
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v29;
      }
      if (MilTranslator::OpTranslator::IsTransposeRequired(&v121))
      {
        std::string::append(&__str, "_channel_last");
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v115, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        else
          v115 = __sz;
        v116 = v123;
        v117 = v124;
        std::string::operator=(&v115, &__str);
        v30 = (__int128 *)MIL::IRNamedValueType::GetName(v20);
        std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&v112, v30, (__int128 *)&v115);
        std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>((uint64_t)this + 296, (unsigned __int8 *)&v112, (__int128 *)&v112);
        if (v114 < 0)
          operator delete(__p);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v115.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v111, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v111 = __str;
      MIL::IRNamedValueType::Make();
      v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
      if (v107)
      {
        v31 = (_QWORD *)operator new();
        v32 = v107;
        *v31 = &unk_24BFE76D0;
        v31[1] = 0;
        v31[2] = 0;
        v31[3] = v32;
      }
      else
      {
        v31 = 0;
      }
      v133.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
      v107 = 0;
      memset(&v115, 0, sizeof(v115));
      v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
      v112.__r_.__value_.__s.__data_[8] = 0;
      v33 = operator new(0x10uLL);
      v115.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      v115.__r_.__value_.__r.__words[2] = (std::string::size_type)(v33 + 2);
      *v33 = v133.__r_.__value_.__r.__words[0];
      v33[1] = v31;
      if (v31)
      {
        v34 = v31 + 1;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v115.__r_.__value_.__l.__size_ = (std::string::size_type)(v33 + 2);
      std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&v133);
      v36 = v107;
      v107 = 0;
      if (v36)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v36);
        MEMORY[0x20BCFF140]();
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      v38 = (std::__shared_weak_count *)LocationPtr[1];
      v109 = *LocationPtr;
      v110 = v38;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      std::string::basic_string[abi:ne180100]<0>(&v133, "ne_activation");
      ANEMachineIR::Validators::ValidateLiveTensorSize(&v109, v27, (uint64_t)&__str, (uint64_t)&v133, (MIL::ValidationResult *)&v112);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      v41 = v110;
      if (v110)
      {
        v42 = (unint64_t *)&v110->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v112) & 1) == 0)
      {
        *(_DWORD *)a3 = 12;
        Message = MIL::MILResult::GetMessage((MIL::MILResult *)&v112);
        if (*(char *)(Message + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(a3 + 8), *(const std::string::value_type **)Message, *(_QWORD *)(Message + 8));
        }
        else
        {
          v45 = *(_OWORD *)Message;
          *(_QWORD *)(a3 + 24) = *(_QWORD *)(Message + 16);
          *(_OWORD *)(a3 + 8) = v45;
        }
        MEMORY[0x20BCFEAEC](&v112);
LABEL_160:
        v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
        std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v119)
        {
          v120 = v119;
          operator delete(v119);
        }
        if (v121.__begin_)
        {
          v121.__end_ = v121.__begin_;
          operator delete(v121.__begin_);
        }
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__sz.__r_.__value_.__l.__data_);
        if (v125)
        {
          v126 = v125;
          operator delete(v125);
        }
        v85 = v128;
        if (v128)
        {
          v86 = (unint64_t *)&v128->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v129.__r_.__value_.__l.__data_);
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v130.__r_.__value_.__l.__data_);
        goto LABEL_179;
      }
      MEMORY[0x20BCFEAEC](&v112);
      std::string::basic_string[abi:ne180100]<0>(&v105, "ne_activation");
      MilTranslator::OpTranslator::AddOperation((uint64_t)this);
      if (v106 < 0)
        operator delete(v105);
      std::string::basic_string[abi:ne180100]<0>(&v102, "x");
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v101, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
      else
        v101 = v129;
      MIL::Builder::OperationBuilder::AddInput();
      v46 = v104;
      if (v104)
      {
        v47 = (unint64_t *)&v104->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v101.__r_.__value_.__l.__data_);
      if (v103 < 0)
        operator delete(v102);
      v49 = v127;
      v50 = MIL::IRNamedValueType::GetName(v127);
      v51 = (char *)v50;
      if (*(char *)(v50 + 23) >= 0)
        v52 = *(unsigned __int8 *)(v50 + 23);
      else
        v52 = *(_QWORD *)(v50 + 8);
      v53 = &v112;
      std::string::basic_string[abi:ne180100]((uint64_t)&v112, v52 + 1);
      if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v53 = (std::string *)v112.__r_.__value_.__r.__words[0];
      if (v52)
      {
        if (v51[23] >= 0)
          v54 = v51;
        else
          v54 = *(char **)v51;
        memmove(v53, v54, v52);
      }
      *(_WORD *)((char *)&v53->__r_.__value_.__l.__data_ + v52) = 95;
      v55 = std::string::append(&v112, "pre_activation");
      v56 = (std::string::value_type *)v55->__r_.__value_.__r.__words[0];
      size = v55->__r_.__value_.__l.__size_;
      v100[0] = v55->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v100 + 3) = *(_DWORD *)((char *)&v55->__r_.__value_.__r.__words[2] + 3);
      v58 = SHIBYTE(v55->__r_.__value_.__r.__words[2]);
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      v59 = MIL::IRNamedValueType::GetName(v49);
      v60 = (char *)v59;
      if (*(char *)(v59 + 23) >= 0)
        v61 = *(unsigned __int8 *)(v59 + 23);
      else
        v61 = *(_QWORD *)(v59 + 8);
      v62 = &v133;
      std::string::basic_string[abi:ne180100]((uint64_t)&v133, v61 + 1);
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v62 = (std::string *)v133.__r_.__value_.__r.__words[0];
      if (v61)
      {
        if (v60[23] >= 0)
          v63 = v60;
        else
          v63 = *(char **)v60;
        memmove(v62, v63, v61);
      }
      *(_WORD *)((char *)&v62->__r_.__value_.__l.__data_ + v61) = 95;
      v64 = std::string::append(&v133, "post_activation");
      v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      memset(&v133, 0, sizeof(v133));
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v133, v119, (uint64_t)v120, (v120 - (_BYTE *)v119) >> 3);
      MIL::IRTensorValueType::Make();
      if (v133.__r_.__value_.__r.__words[0])
      {
        v133.__r_.__value_.__l.__size_ = v133.__r_.__value_.__r.__words[0];
        operator delete(v133.__r_.__value_.__l.__data_);
      }
      OpsetString = ANEMachineIR::GetOpsetString(**((_DWORD **)this + 12));
      std::string::basic_string[abi:ne180100]<0>(&v133, OpsetString);
      MIL::Builder::OperationBuilder::AddBlock();
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      if (v58 < 0)
      {
        std::string::__init_copy_ctor_external(&v98, v56, size);
      }
      else
      {
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
        v98.__r_.__value_.__l.__size_ = size;
        LODWORD(v98.__r_.__value_.__r.__words[2]) = v100[0];
        *(_DWORD *)((char *)&v98.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v100 + 3);
        *((_BYTE *)&v98.__r_.__value_.__s + 23) = v58;
      }
      MIL::Builder::BlockBuilder::AddInput();
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      v96 = 0;
      v97 = 0;
      MIL::Builder::BlockBuilder::AddOperation();
      std::string::basic_string[abi:ne180100]<0>(&v93, "x");
      if (v58 < 0)
      {
        std::string::__init_copy_ctor_external(&v92, v56, size);
      }
      else
      {
        v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
        v92.__r_.__value_.__l.__size_ = size;
        LODWORD(v92.__r_.__value_.__r.__words[2]) = v100[0];
        *(_DWORD *)((char *)&v92.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v100 + 3);
        *((_BYTE *)&v92.__r_.__value_.__s + 23) = v58;
      }
      MIL::Builder::OperationBuilder::AddInput();
      v67 = v95;
      if (v95)
      {
        v68 = (unint64_t *)&v95->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      if (v94 < 0)
        operator delete(v93);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v90, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
      else
        v90 = v112;
      MIL::Builder::OperationBuilder::AddOutput();
      v70 = v91;
      if (v91)
      {
        v71 = (unint64_t *)&v91->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      MIL::Builder::BlockBuilder::AddOutput();
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v88, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v88 = __str;
      MIL::Builder::OperationBuilder::AddOutput();
      v73 = v89;
      if (v89)
      {
        v74 = (unint64_t *)&v89->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      *(_DWORD *)a3 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
      v76 = (std::__shared_weak_count *)v133.__r_.__value_.__l.__size_;
      if (v133.__r_.__value_.__l.__size_)
      {
        v77 = (unint64_t *)(v133.__r_.__value_.__l.__size_ + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = v99;
      if (v99)
      {
        v80 = (unint64_t *)&v99->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v112.__r_.__value_.__l.__data_);
        if ((v58 & 0x80000000) == 0)
          goto LABEL_155;
      }
      else if ((v58 & 0x80000000) == 0)
      {
LABEL_155:
        v82 = v108;
        if (v108)
        {
          v83 = (unint64_t *)&v108->__shared_owners_;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        goto LABEL_160;
      }
      operator delete(v56);
      goto LABEL_155;
    }
  }
  else if (v12)
  {
    goto LABEL_12;
  }
  *(_DWORD *)a3 = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Immediate value inputs not handled.");
LABEL_179:
  if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_182;
  v11 = (void *)v131.__r_.__value_.__r.__words[0];
LABEL_181:
  operator delete(v11);
LABEL_182:
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
}

void sub_20696A074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a71;
  void *a72;
  char a73;
  void *v73;
  int v74;
  uint64_t v75;
  void *v77;
  void *v78;
  void *v79;

  if (a29 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v75 - 128);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (a65 < 0)
    operator delete(a60);
  if (v74 < 0)
    operator delete(v73);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  a60 = &a71;
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a60);
  if (a73 < 0)
    operator delete(a72);
  v77 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v77;
    operator delete(v77);
  }
  v78 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v78;
    operator delete(v78);
  }
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  v79 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v79;
    operator delete(v79);
  }
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x268]);
  if (*(char *)(v75 - 225) < 0)
    operator delete(*(void **)(v75 - 248));
  if (*(char *)(v75 - 201) < 0)
    operator delete(*(void **)(v75 - 224));
  if (*(char *)(v75 - 169) < 0)
    operator delete(*(void **)(v75 - 192));
  if (*(char *)(v75 - 137) < 0)
    operator delete(*(void **)(v75 - 160));
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_20696A438(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_20696A488(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_TranslateActivation_cpp()
{
  uint64_t i;
  unsigned __int8 *v1;
  unsigned __int8 v3[48];
  _QWORD v4[7];

  v4[6] = *MEMORY[0x24BDAC8D0];
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v3, "relu", "relu");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v4, "sigmoid", "sigmoid");
  for (i = 0; i != -12; i -= 6)
  {
    v1 = &v3[i * 8];
    if (SHIBYTE(v4[i + 5]) < 0)
      operator delete(*((void **)v1 + 9));
    if ((char)v1[71] < 0)
      operator delete(*((void **)v1 + 6));
  }
}

void sub_20696A594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  _GLOBAL__sub_I_TranslateActivation_cpp_cold_1((uint64_t)&a28, (uint64_t)&a10);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_TranslateActivation_cpp_cold_1(uint64_t a1, uint64_t a2)
{
  do
  {
    if (*(char *)(a1 - 1) < 0)
      operator delete(*(void **)(a1 - 24));
    if (*(char *)(a1 - 25) < 0)
      operator delete(*(void **)(a1 - 48));
    a1 -= 48;
  }
  while (a1 != a2);
}

uint64_t MilTranslator::Passes::PassManager::Register(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;

  v6 = a1[3];
  result = (uint64_t)(a1 + 3);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (int64x2_t *)(result - 16);
    v11 = *(_QWORD *)(result - 16);
    v12 = ((uint64_t)v7 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v13 = v5 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v28 = result;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(result, v15);
    else
      v16 = 0;
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    v27 = v18;
    v19 = *a2;
    *a2 = 0;
    *(_QWORD *)v17 = v19;
    v9 = v17 + 8;
    v26.i64[1] = (uint64_t)(v17 + 8);
    v21 = (_QWORD *)a1[1];
    v20 = (_QWORD *)a1[2];
    if (v20 == v21)
    {
      v23 = vdupq_n_s64((unint64_t)v20);
    }
    else
    {
      do
      {
        v22 = *--v20;
        *v20 = 0;
        *((_QWORD *)v17 - 1) = v22;
        v17 -= 8;
      }
      while (v20 != v21);
      v23 = *v10;
      v9 = (_QWORD *)v26.i64[1];
      v18 = v27;
    }
    a1[1] = v17;
    a1[2] = v9;
    v26 = v23;
    v24 = (char *)a1[3];
    a1[3] = v18;
    v27 = v24;
    v25 = v23.i64[0];
    result = std::__split_buffer<std::unique_ptr<MilTranslator::Passes::Pass>>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *v7 = v8;
    v9 = v7 + 1;
  }
  a1[2] = v9;
  return result;
}

uint64_t MilTranslator::Passes::PassManager::Run@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  void **v7;
  unsigned __int8 *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  _OWORD v36[2];
  int v37;

  memset(v36, 0, sizeof(v36));
  v37 = 1065353216;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 16);
  if (v4 == v5)
  {
LABEL_23:
    *(_DWORD *)a3 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
  }
  else
  {
    v7 = (void **)(a3 + 8);
    while (1)
    {
      std::unordered_set<std::string>::unordered_set((uint64_t)&v35, *v4 + 32);
      v8 = (unsigned __int8 *)v35.__r_.__value_.__r.__words[2];
      if (v35.__r_.__value_.__r.__words[2])
        break;
LABEL_6:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v35);
      v9 = *v4;
      v10 = (std::__shared_weak_count *)a2[1];
      v29 = *a2;
      v30 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v29);
      v13 = v30;
      if (v30)
      {
        v14 = (unint64_t *)&v30->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (*(_DWORD *)a3)
        return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v36);
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v7);
      v16 = *v4;
      if (*(char *)(*v4 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v16 + 8), *(_QWORD *)(v16 + 16));
      }
      else
      {
        v17 = *(_OWORD *)(v16 + 8);
        v35.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 24);
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v17;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v36, (unsigned __int8 *)&v35, (uint64_t)&v35);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (++v4 == v5)
        goto LABEL_23;
    }
    while (std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>(v36, v8 + 16))
    {
      v8 = *(unsigned __int8 **)v8;
      if (!v8)
        goto LABEL_6;
    }
    *(_DWORD *)a3 = 15;
    std::operator+<char>();
    v18 = std::string::append(&v32, "' needs to be run before '");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *v4;
    if (*(char *)(*v4 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v20 + 8), *(_QWORD *)(v20 + 16));
    }
    else
    {
      v21 = *(_OWORD *)(v20 + 8);
      v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 24);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v21;
    }
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v31;
    else
      v22 = (std::string *)v31.__r_.__value_.__r.__words[0];
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    else
      size = v31.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v33, (const std::string::value_type *)v22, size);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v34, "'");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 24) = *((_QWORD *)&v26->__r_.__value_.__l + 2);
    *(_OWORD *)v7 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v35);
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v36);
}

void sub_20696AA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a28 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a37);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v42 - 112);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<MilTranslator::Passes::Pass>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_QWORD *)i + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v23 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_20696AD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::Utils::ShapeString(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;
  char v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v4 = 91;
    do
    {
      v9 = v4;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
      std::ostream::operator<<();
      v2 += 8;
      v4 = 44;
    }
    while (v2 != v3);
  }
  v9 = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BCFF0C8](&v8);
}

void sub_20696AE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Utils::BroadcastShapes(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *p_p;
  std::string::size_type size;
  std::string *v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  unint64_t *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  void **v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  void **v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  unint64_t *v90;
  void *v91[2];
  unsigned __int8 v92;
  void *v93[2];
  unsigned __int8 v94;
  std::string v95;
  void *v96[2];
  std::string::size_type v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  void *v100[2];
  std::string::size_type v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  std::string __p;
  std::string v105;
  std::string v106;
  std::string v107;
  __int128 v108;
  std::string::size_type v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  _QWORD *v112;
  _BYTE *v113;
  uint64_t v114;
  _QWORD *v115;
  _BYTE *v116;
  uint64_t v117;

  a4[1] = *a4;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v115, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v112 = 0;
  v113 = 0;
  v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v112, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  v10 = v115;
  v9 = v116;
  v11 = (v116 - (_BYTE *)v115) >> 3;
  if (v116 != (_BYTE *)v115)
  {
    v12 = 0;
    if (v11 <= 1)
      v13 = 1;
    else
      v13 = (v116 - (_BYTE *)v115) >> 3;
    do
    {
      if (!v115[v12])
      {
        v47 = (std::__shared_weak_count *)a1[1];
        v110 = *a1;
        v111 = v47;
        if (v47)
        {
          p_shared_owners = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldxr(p_shared_owners);
          while (__stxr(v49 + 1, p_shared_owners));
        }
        std::to_string(&v105, v12);
        v50 = std::string::insert(&v105, 0, "Zero detected for 'x' at dimension ");
        v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v106.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        v52 = std::string::append(&v106, " in shape ");
        v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v107.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        ANEMachineIR::Utils::ShapeString((uint64_t *)&v115);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v56 = std::string::append(&v107, (const std::string::value_type *)p_p, size);
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v109 = v56->__r_.__value_.__r.__words[2];
        v108 = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x20BCFEAD4](a5, &v110, 319, &v108);
        if (SHIBYTE(v109) < 0)
          operator delete((void *)v108);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        v58 = v111;
        if (v111)
        {
          v59 = (unint64_t *)&v111->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          goto LABEL_153;
        }
        goto LABEL_155;
      }
      ++v12;
    }
    while (v13 != v12);
  }
  v14 = (v113 - (_BYTE *)v112) >> 3;
  if (v113 == (_BYTE *)v112)
  {
LABEL_13:
    if (v14 > v11)
    {
      v106.__r_.__value_.__r.__words[0] = 1;
      std::vector<unsigned long long>::vector(&v107, v14 - v11, &v106);
      std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long *>,std::__wrap_iter<unsigned long long *>>((uint64_t)&v115, (uint64_t)v115, v107.__r_.__value_.__l.__data_, (char *)v107.__r_.__value_.__l.__size_, (uint64_t)(v107.__r_.__value_.__l.__size_ - v107.__r_.__value_.__r.__words[0]) >> 3);
      if (v107.__r_.__value_.__r.__words[0])
      {
        v107.__r_.__value_.__l.__size_ = v107.__r_.__value_.__r.__words[0];
        operator delete(v107.__r_.__value_.__l.__data_);
      }
      v10 = v115;
      v9 = v116;
      v14 = (v113 - (_BYTE *)v112) >> 3;
      v11 = (v116 - (_BYTE *)v115) >> 3;
    }
    if (v11 > v14)
    {
      v106.__r_.__value_.__r.__words[0] = 1;
      std::vector<unsigned long long>::vector(&v107, v11 - v14, &v106);
      std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long *>,std::__wrap_iter<unsigned long long *>>((uint64_t)&v112, (uint64_t)v112, v107.__r_.__value_.__l.__data_, (char *)v107.__r_.__value_.__l.__size_, (uint64_t)(v107.__r_.__value_.__l.__size_ - v107.__r_.__value_.__r.__words[0]) >> 3);
      if (v107.__r_.__value_.__r.__words[0])
      {
        v107.__r_.__value_.__l.__size_ = v107.__r_.__value_.__r.__words[0];
        operator delete(v107.__r_.__value_.__l.__data_);
      }
      v10 = v115;
      v9 = v116;
    }
    if (v9 == v10)
    {
LABEL_72:
      MIL::ValidationResult::ValidationResult(a5);
      goto LABEL_155;
    }
    v17 = 0;
    while (1)
    {
      v18 = v10[v17];
      v19 = v112;
      if (v18 == 1)
      {
        v21 = a4[1];
        v20 = (unint64_t)a4[2];
        if ((unint64_t)v21 >= v20)
        {
          v26 = *a4;
          v32 = (v21 - *a4) >> 3;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61)
            goto LABEL_160;
          v34 = v20 - (_QWORD)v26;
          if (v34 >> 2 > v33)
            v33 = v34 >> 2;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v35);
            v26 = *a4;
            v21 = a4[1];
          }
          else
          {
            v36 = 0;
          }
          v41 = &v36[8 * v32];
          *(_QWORD *)v41 = v19[v17];
          v22 = v41 + 8;
          while (v21 != v26)
          {
            v42 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v41 - 1) = v42;
            v41 -= 8;
          }
          v43 = &v36[8 * v35];
          *a4 = v41;
          goto LABEL_69;
        }
        *(_QWORD *)v21 = v112[v17];
        v22 = v21 + 8;
      }
      else
      {
        v23 = v112[v17];
        if (v23 == 1)
        {
          v25 = a4[1];
          v24 = (unint64_t)a4[2];
          if ((unint64_t)v25 >= v24)
          {
            v26 = *a4;
            v27 = (v25 - *a4) >> 3;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61)
              goto LABEL_160;
            v29 = v24 - (_QWORD)v26;
            if (v29 >> 2 > v28)
              v28 = v29 >> 2;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
              v30 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
            {
              v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v30);
              v26 = *a4;
              v25 = a4[1];
              v18 = v10[v17];
            }
            else
            {
              v31 = 0;
            }
            v44 = &v31[8 * v27];
            *(_QWORD *)v44 = v18;
            v22 = v44 + 8;
            while (v25 != v26)
            {
              v45 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *((_QWORD *)v44 - 1) = v45;
              v44 -= 8;
            }
            goto LABEL_68;
          }
        }
        else
        {
          if (v18 != v23)
          {
            v73 = (std::__shared_weak_count *)a1[1];
            v98 = *a1;
            v99 = v73;
            if (v73)
            {
              v74 = (unint64_t *)&v73->__shared_owners_;
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 1, v74));
            }
            std::to_string(&v95, v17);
            v76 = std::string::insert(&v95, 0, "Incompatible at dimension ");
            v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v77;
            v76->__r_.__value_.__l.__size_ = 0;
            v76->__r_.__value_.__r.__words[2] = 0;
            v76->__r_.__value_.__r.__words[0] = 0;
            v78 = std::string::append(&__p, " in shapes ");
            v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
            v105.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v79;
            v78->__r_.__value_.__l.__size_ = 0;
            v78->__r_.__value_.__r.__words[2] = 0;
            v78->__r_.__value_.__r.__words[0] = 0;
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v115);
            if ((v94 & 0x80u) == 0)
              v80 = v93;
            else
              v80 = (void **)v93[0];
            if ((v94 & 0x80u) == 0)
              v81 = v94;
            else
              v81 = (std::string::size_type)v93[1];
            v82 = std::string::append(&v105, (const std::string::value_type *)v80, v81);
            v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
            v106.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v83;
            v82->__r_.__value_.__l.__size_ = 0;
            v82->__r_.__value_.__r.__words[2] = 0;
            v82->__r_.__value_.__r.__words[0] = 0;
            v84 = std::string::append(&v106, " vs. ");
            v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
            v107.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v85;
            v84->__r_.__value_.__l.__size_ = 0;
            v84->__r_.__value_.__r.__words[2] = 0;
            v84->__r_.__value_.__r.__words[0] = 0;
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v112);
            if ((v92 & 0x80u) == 0)
              v86 = v91;
            else
              v86 = (void **)v91[0];
            if ((v92 & 0x80u) == 0)
              v87 = v92;
            else
              v87 = (std::string::size_type)v91[1];
            v88 = std::string::append(&v107, (const std::string::value_type *)v86, v87);
            v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
            v97 = v88->__r_.__value_.__r.__words[2];
            *(_OWORD *)v96 = v89;
            v88->__r_.__value_.__l.__size_ = 0;
            v88->__r_.__value_.__r.__words[2] = 0;
            v88->__r_.__value_.__r.__words[0] = 0;
            MEMORY[0x20BCFEAD4](a5, &v98, 319, v96);
            if (SHIBYTE(v97) < 0)
              operator delete(v96[0]);
            if ((char)v92 < 0)
              operator delete(v91[0]);
            if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v107.__r_.__value_.__l.__data_);
            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v106.__r_.__value_.__l.__data_);
            if ((char)v94 < 0)
              operator delete(v93[0]);
            if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v105.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v95.__r_.__value_.__l.__data_);
            v58 = v99;
            if (v99)
            {
              v90 = (unint64_t *)&v99->__shared_owners_;
              do
                v60 = __ldaxr(v90);
              while (__stlxr(v60 - 1, v90));
LABEL_153:
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            goto LABEL_155;
          }
          v25 = a4[1];
          v37 = (unint64_t)a4[2];
          if ((unint64_t)v25 >= v37)
          {
            v26 = *a4;
            v38 = (v25 - *a4) >> 3;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 61)
LABEL_160:
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            v40 = v37 - (_QWORD)v26;
            if (v40 >> 2 > v39)
              v39 = v40 >> 2;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
              v30 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v30 = v39;
            if (v30)
            {
              v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v30);
              v26 = *a4;
              v25 = a4[1];
              v18 = v10[v17];
            }
            else
            {
              v31 = 0;
            }
            v44 = &v31[8 * v38];
            *(_QWORD *)v44 = v18;
            v22 = v44 + 8;
            while (v25 != v26)
            {
              v46 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *((_QWORD *)v44 - 1) = v46;
              v44 -= 8;
            }
LABEL_68:
            v43 = &v31[8 * v30];
            *a4 = v44;
LABEL_69:
            a4[1] = v22;
            a4[2] = v43;
            if (v26)
              operator delete(v26);
            goto LABEL_71;
          }
        }
        *(_QWORD *)v25 = v18;
        v22 = v25 + 8;
      }
LABEL_71:
      a4[1] = v22;
      ++v17;
      v10 = v115;
      if (v17 >= (v116 - (_BYTE *)v115) >> 3)
        goto LABEL_72;
    }
  }
  v15 = 0;
  if (v14 <= 1)
    v16 = 1;
  else
    v16 = (v113 - (_BYTE *)v112) >> 3;
  while (v112[v15])
  {
    if (v16 == ++v15)
      goto LABEL_13;
  }
  v61 = (std::__shared_weak_count *)a1[1];
  v102 = *a1;
  v103 = v61;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  std::to_string(&v105, v15);
  v64 = std::string::insert(&v105, 0, "Zero detected for 'y' at dimension ");
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v106.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  v66 = std::string::append(&v106, " in shape ");
  v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v107.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  ANEMachineIR::Utils::ShapeString((uint64_t *)&v112);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = &__p;
  else
    v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v69 = __p.__r_.__value_.__l.__size_;
  v70 = std::string::append(&v107, (const std::string::value_type *)v68, v69);
  v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v101 = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)v100 = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x20BCFEAD4](a5, &v102, 319, v100);
  if (SHIBYTE(v101) < 0)
    operator delete(v100[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  v58 = v103;
  if (v103)
  {
    v72 = (unint64_t *)&v103->__shared_owners_;
    do
      v60 = __ldaxr(v72);
    while (__stlxr(v60 - 1, v72));
    goto LABEL_153;
  }
LABEL_155:
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
}

void sub_20696B720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;
  void *v64;
  void *v65;

  if (a33 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v62 - 201) < 0)
    operator delete(*(void **)(v62 - 224));
  if (a62 < 0)
    operator delete(a57);
  if (a21 < 0)
    operator delete(a16);
  if (a55 < 0)
    operator delete(a50);
  if (a48 < 0)
    operator delete(a43);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  v64 = *(void **)(v62 - 144);
  if (v64)
  {
    *(_QWORD *)(v62 - 136) = v64;
    operator delete(v64);
  }
  v65 = *(void **)(v62 - 120);
  if (v65)
  {
    *(_QWORD *)(v62 - 112) = v65;
    operator delete(v65);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::Utils::GetStaticTensorShape(ANEMachineIR::Utils *this@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  MIL::IRDimension ***v4;
  MIL::IRDimension **v5;
  MIL::IRDimension **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;

  v4 = (MIL::IRDimension ***)(*(uint64_t (**)(ANEMachineIR::Utils *, const MIL::IRTensorValueType *))(*(_QWORD *)this + 96))(this, a2);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::vector<unsigned long long>::reserve((void **)a3, v4[1] - *v4);
  v5 = *v4;
  v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      v7 = MIL::IRDimension::AsConstant(*v5);
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      v9 = v8;
      v11 = *(uint64_t **)(a3 + 8);
      v10 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(uint64_t **)a3;
        v14 = ((uint64_t)v11 - *(_QWORD *)a3) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a3 + 16, v17);
          v13 = *(uint64_t **)a3;
          v11 = *(uint64_t **)(a3 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *--v11;
          *--v19 = v20;
        }
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 16) = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a3 + 8) = v12;
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_20696BA9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ANEMachineIR::Utils::TryGetStaticTensorShape(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  std::vector<unsigned long long>::reserve((void **)a2, (uint64_t)(v3[1] - *v3) >> 3);
  v4 = (_QWORD *)*v3;
  v5 = (_QWORD *)v3[1];
  if ((_QWORD *)*v3 == v5)
    return 1;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    if (!result)
      break;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    v8 = v7;
    v10 = *(uint64_t **)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v10 >= v9)
    {
      v12 = *(uint64_t **)a2;
      v13 = ((uint64_t)v10 - *(_QWORD *)a2) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
      v15 = v9 - (_QWORD)v12;
      if (v15 >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a2 + 16, v16);
        v12 = *(uint64_t **)a2;
        v10 = *(uint64_t **)(a2 + 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (uint64_t *)&v17[8 * v13];
      *v18 = v8;
      v11 = v18 + 1;
      while (v10 != v12)
      {
        v19 = *--v10;
        *--v18 = v19;
      }
      *(_QWORD *)a2 = v18;
      *(_QWORD *)(a2 + 8) = v11;
      *(_QWORD *)(a2 + 16) = &v17[8 * v16];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v10 = v7;
      v11 = v10 + 1;
    }
    *(_QWORD *)(a2 + 8) = v11;
    if (++v4 == v5)
      return 1;
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  return result;
}

uint64_t ANEMachineIR::Utils::IsStaticTensorType(ANEMachineIR::Utils *this, const MIL::IRValueType *a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = (*(uint64_t (**)(ANEMachineIR::Utils *, const MIL::IRValueType *))(*(_QWORD *)this + 24))(this, a2);
  if (result)
  {
    v4 = MIL::IRValueType::AsTensorType(this);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    v6 = v5[1];
    if (*v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = *v5 + 8;
      do
      {
        v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 - 8) + 16))(*(_QWORD *)(v7 - 8));
        v9 = v8 == 0;
        result = v8 != 0;
        v9 = v9 || v7 == v6;
        v7 += 8;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(ANEMachineIR::Utils *this, const MIL::IRTensorValueType *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;

  ANEMachineIR::Utils::GetStaticTensorShape(this, a2, (uint64_t)&v6);
  v2 = 1;
  if (v6 != v7)
  {
    v3 = v6;
    do
    {
      v4 = *v3++;
      v2 *= v4;
    }
    while (v3 != v7);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  return v2;
}

uint64_t ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;

  v1 = *a1;
  v2 = a1[1];
  result = 1;
  while (v1 != v2)
  {
    v4 = *v1++;
    result *= v4;
  }
  return result;
}

_QWORD *ANEMachineIR::Utils::InferPositiveAxes@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v6;
  _QWORD *result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;

  v3 = *(_DWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v4)
  {
LABEL_5:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a2, v3, v4, (v4 - (uint64_t)v3) >> 2);
  }
  else
  {
    v6 = *(_DWORD **)a1;
    while ((*v6 & 0x80000000) == 0)
    {
      if (++v6 == (_DWORD *)v4)
        goto LABEL_5;
    }
    v8 = v4 - (_QWORD)v3;
    v9 = (v4 - (uint64_t)v3) >> 2;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a2, v3, v4, v9);
    if (v8 << 30)
    {
      v10 = (int)(v8 >> 2);
      v11 = *(_DWORD **)a1;
      v12 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
      v13 = (_DWORD *)*a2;
      if (v10 <= 1)
        v10 = 1;
      do
      {
        if (!v12)
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        if ((*v11 & 0x80000000) != 0)
          *v13 = *v11 + v9;
        --v12;
        ++v11;
        ++v13;
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

void sub_20696BDF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20696BE78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long *>,std::__wrap_iter<unsigned long long *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<unsigned long long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_20696C068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t register_aneflow_opsets(ANEMachineIR::H2020::Opsets *a1, MIL::MILContext *a2)
{
  MIL::MILContext *v3;
  MIL::MILContext *v4;

  ANEMachineIR::H2020::Opsets::RegisterMilAneflowOpsets(a1, a2);
  ANEMachineIR::H2021::Opsets::RegisterMilAneflowOpsets(a1, v3);
  ANEMachineIR::H2022::Opsets::RegisterMilAneflowOpsets(a1, v4);
  return 1;
}

_QWORD *make_milaneflow_context(MIL::MILContext *a1)
{
  MIL::MILContext *v1;
  MIL::MILContext *v2;
  MIL::MILContext *v3;
  _QWORD *v4;
  ANEMachineIR::H2020::Opsets *v6;

  MIL::MILContext::Make(a1);
  ANEMachineIR::H2020::Opsets::RegisterMilAneflowOpsets(v6, v1);
  ANEMachineIR::H2021::Opsets::RegisterMilAneflowOpsets(v6, v2);
  ANEMachineIR::H2022::Opsets::RegisterMilAneflowOpsets(v6, v3);
  v4 = (_QWORD *)operator new();
  std::shared_ptr<MIL::MILContext>::shared_ptr[abi:ne180100]<MIL::MILContext,void>(v4, (uint64_t)v6);
  return v4;
}

void sub_20696C15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  MEMORY[0x20BCFF140](v10, 0x20C40A4A59CD2);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

uint64_t milaneflow_free_context(uint64_t result)
{
  if (result)
  {
    std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x20BCFF140);
  }
  return result;
}

uint64_t milaneflow_error_message_size(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0)
      return *(_QWORD *)(result + 8);
    else
      return *(unsigned __int8 *)(result + 23);
  }
  return result;
}

uint64_t milaneflow_copy_error_message(uint64_t __src, char *__dst)
{
  uint64_t v2;
  size_t v3;
  const char *v4;

  if (__src)
  {
    v2 = __src;
    if (*(char *)(__src + 23) < 0)
    {
      v4 = *(const char **)__src;
      v3 = *(_QWORD *)(__src + 8);
    }
    else
    {
      v3 = *(unsigned __int8 *)(__src + 23);
      v4 = (const char *)__src;
    }
    strncpy(__dst, v4, v3);
    if (*(char *)(v2 + 23) < 0)
      return *(_QWORD *)(v2 + 8);
    else
      return *(unsigned __int8 *)(v2 + 23);
  }
  return __src;
}

uint64_t milaneflow_location_message_size(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 47) < 0)
      return *(_QWORD *)(result + 32);
    else
      return *(unsigned __int8 *)(result + 47);
  }
  return result;
}

uint64_t milaneflow_copy_location_message(uint64_t result, char *__dst)
{
  uint64_t v2;
  const char *v3;
  size_t v4;

  if (result)
  {
    v2 = result;
    if (*(char *)(result + 47) < 0)
    {
      v3 = *(const char **)(result + 24);
      v4 = *(_QWORD *)(result + 32);
    }
    else
    {
      v3 = (const char *)(result + 24);
      v4 = *(unsigned __int8 *)(result + 47);
    }
    strncpy(__dst, v3, v4);
    if (*(char *)(v2 + 47) < 0)
      return *(_QWORD *)(v2 + 32);
    else
      return *(unsigned __int8 *)(v2 + 47);
  }
  return result;
}

void milaneflow_free_execution_result(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x20BCFF140);
  }
}

_QWORD *milaneflow_try_program_from_file(uint64_t *a1, char *a2, char *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v3 = (std::__shared_weak_count *)a1[1];
  v13 = *a1;
  v14 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = v14;
  if (v14)
  {
    v7 = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (!v15)
    return (_QWORD *)v16;
  v9 = (_QWORD *)operator new();
  v10 = v15;
  v15 = 0;
  std::shared_ptr<MIL::IRProgram>::shared_ptr[abi:ne180100]<MIL::IRProgram,void>(v9, v10);
  v11 = v15;
  v15 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return v9;
}

void sub_20696C3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  MEMORY[0x20BCFF140](v12, 0x20C40A4A59CD2);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::ParseProgramShared(MIL::ParserOptions *a1, char *a2, int a3, char *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t result;
  void *v17;
  char v18;
  __int128 v19;
  __int128 v20;
  void *v21[2];
  char v22;
  void *__p[2];
  char v24;
  uint64_t v25;

  MIL::ParserOptions::Make(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 64))(v25, 1);
  if (a4)
  {
    v10 = v25;
    std::string::basic_string[abi:ne180100]<0>(__p, a4);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 48))(v10, __p);
    if (v24 < 0)
      operator delete(__p[0]);
  }
  *a5 = 0;
  if (a3)
  {
    v11 = v25;
    std::string::basic_string[abi:ne180100]<0>(v21, a2);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v11 + 32))(v11, v21, 1);
    if (v22 < 0)
      operator delete(v21[0]);
    v20 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    MIL::Text::ParseProgramFromFile();
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      goto LABEL_16;
    }
  }
  else
  {
    v19 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v17, a2);
    MIL::Text::ParseProgram();
    if (v18 < 0)
      operator delete(v17);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v14 = __ldaxr(v15);
      while (__stlxr(v14 - 1, v15));
LABEL_16:
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  result = v25;
  v25 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20696C5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  char *v42;

  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  v37 = *(_QWORD *)(v34 - 72);
  *(_QWORD *)(v34 - 72) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (a2 == 2)
  {
    v38 = __cxa_begin_catch(a1);
    v39 = (_QWORD *)operator new();
    (*(void (**)(void *))(*(_QWORD *)v38 + 24))(v38);
    v40 = (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 40))(v38);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    v41 = __cxa_begin_catch(a1);
    v39 = (_QWORD *)operator new();
    v42 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
    std::string::basic_string[abi:ne180100]<0>(v39, v42);
    std::string::basic_string[abi:ne180100]<0>(v39 + 3, "Unknown location");
  }
  *v32 = v39;
  *v33 = 0;
  __cxa_end_catch();
  JUMPOUT(0x20696C5E0);
}

_QWORD *milaneflow_try_program_from_string(uint64_t *a1, char *a2, char *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v3 = (std::__shared_weak_count *)a1[1];
  v13 = *a1;
  v14 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = v14;
  if (v14)
  {
    v7 = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (!v15)
    return (_QWORD *)v16;
  v9 = (_QWORD *)operator new();
  v10 = v15;
  v15 = 0;
  std::shared_ptr<MIL::IRProgram>::shared_ptr[abi:ne180100]<MIL::IRProgram,void>(v9, v10);
  v11 = v15;
  v15 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return v9;
}

void sub_20696C8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  MEMORY[0x20BCFF140](v12, 0x20C40A4A59CD2);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(a1);
}

uint64_t milaneflow_free_program_handle(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](result);
    result = MEMORY[0x20BCFF140](v3, 0x20C40A4A59CD2);
  }
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x20BCFF140);
  }
  return result;
}

uint64_t milaneflow_free_function_handle(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  if (result)
  {
    v3 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 64);
    if (v4)
    {
      v5 = *(_QWORD *)(result + 72);
      v6 = *(void **)(result + 64);
      if (v5 != v4)
      {
        do
        {
          v5 -= 88;
        }
        while (v5 != v4);
        v6 = (void *)v3[8];
      }
      v3[9] = v4;
      operator delete(v6);
    }
    v7 = v3[5];
    if (v7)
    {
      v8 = v3[6];
      v9 = (void *)v3[5];
      if (v8 != v7)
      {
        do
        {
          v8 -= 88;
        }
        while (v8 != v7);
        v9 = (void *)v3[5];
      }
      v3[6] = v7;
      operator delete(v9);
    }
    v10 = std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)v3);
    result = MEMORY[0x20BCFF140](v10, 0x1060C4098404D11);
  }
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x20BCFF140);
  }
  return result;
}

uint64_t milaneflow_try_function(uint64_t a1, int a2, char *__s, char *a4)
{
  MIL::IRObject *v7;
  uint64_t v8;
  MIL::IRObject *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  uint64_t Location;
  uint64_t v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  std::string __p;

  v7 = *(MIL::IRObject **)a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v8 = (*(uint64_t (**)(MIL::IRObject *, std::string *))(*(_QWORD *)v7 + 56))(v7, &__p);
  v9 = (MIL::IRObject *)v8;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_3;
LABEL_12:
    v18 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v19 = std::string::insert(&__p, 0, "Cannot resolve function name ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(_QWORD *)(v18 + 16) = *((_QWORD *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)v18 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    Location = MIL::IRObject::GetLocation(*(MIL::IRObject **)a1);
    (*(void (**)(uint64_t))(*(_QWORD *)Location + 24))(Location);
    goto LABEL_17;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v9)
    goto LABEL_12;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&__p, a4);
  v10 = (*(uint64_t (**)(MIL::IRObject *, std::string *))(*(_QWORD *)v9 + 64))(v9, &__p);
  v11 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v11)
      goto LABEL_5;
LABEL_14:
    v22 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, a4);
    v23 = std::string::insert(&__p, 0, "Cannot resolve opset name ");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(_QWORD *)(v22 + 16) = *((_QWORD *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)v22 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = MIL::IRObject::GetLocation(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
    goto LABEL_17;
  }
  if (!v10)
    goto LABEL_14;
LABEL_5:
  v30 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, a4);
  v12 = ANEMachineIR::LookupOpsetString((uint64_t *)&__p, &v30);
  v13 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v13 & 1) != 0)
      goto LABEL_7;
  }
  else if ((v12 & 1) != 0)
  {
LABEL_7:
    result = operator new();
    *(_QWORD *)result = *(_QWORD *)a1;
    v15 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(result + 8) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    *(_QWORD *)(result + 16) = v9;
    *(_QWORD *)(result + 24) = v11;
    *(_DWORD *)(result + 32) = v30;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    return result;
  }
  v26 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, a4);
  v27 = std::string::insert(&__p, 0, "Opset name is not an AneFlow opset: ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(_QWORD *)(v26 + 16) = *((_QWORD *)&v27->__r_.__value_.__l + 2);
  *(_OWORD *)v26 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = MIL::IRObject::GetLocation(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_20696CD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x20BCFF140](v15, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t milaneflow_function_name_list(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v3 = v1;
    v4 = operator new[]();
    v5 = *(uint64_t **)(v3 + 16);
    if (v5)
    {
      v6 = (_QWORD *)v4;
      do
      {
        v7 = v5 + 2;
        if (*((char *)v5 + 39) < 0)
          v7 = (_QWORD *)*v7;
        *v6++ = v7;
        v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
  }
  return v2;
}

uint64_t milaneflow_opset_name_list(uint64_t *a1, int a2, char *__s)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  void *__p;
  char *v14;
  char v15;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v3 + 56))(v3, &__p);
  v5 = v4;
  if ((v15 & 0x80000000) == 0)
  {
    if (v4)
      goto LABEL_3;
LABEL_11:
    v8 = 0;
    return v8 >> 3;
  }
  operator delete(__p);
  if (!v5)
    goto LABEL_11;
LABEL_3:
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v5 + 56))(&__p, v5);
  v6 = (char *)__p;
  v7 = v14;
  v8 = v14 - (_BYTE *)__p;
  if (v14 == __p)
  {
    if (!__p)
      return v8 >> 3;
LABEL_13:
    operator delete(v6);
    return v8 >> 3;
  }
  v9 = (_QWORD *)operator new[]();
  v10 = v6;
  do
  {
    v11 = *(_QWORD **)v10;
    if (*(char *)(*(_QWORD *)v10 + 23) < 0)
      v11 = (_QWORD *)*v11;
    *v9++ = v11;
    v10 += 8;
  }
  while (v10 != v7);
  if (v6)
    goto LABEL_13;
  return v8 >> 3;
}

void sub_20696CF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (v15)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

uint64_t milaneflow_function_input_name_list(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  v1 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (_QWORD *)v1;
    v4 = operator new[]();
    v7 = (_QWORD *)*v3;
    v6 = v3 + 1;
    v5 = v7;
    if (v7 != v6)
    {
      v8 = 0;
      do
      {
        v9 = v5 + 4;
        if (*((char *)v5 + 55) < 0)
          v9 = (_QWORD *)*v9;
        *(_QWORD *)(v4 + 8 * v8) = v9;
        v10 = (_QWORD *)v5[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v5[2];
            v12 = *v11 == (_QWORD)v5;
            v5 = v11;
          }
          while (!v12);
        }
        ++v8;
        v5 = v11;
      }
      while (v11 != v6);
    }
  }
  return v2;
}

unint64_t milaneflow_function_output_name_list(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;

  v1 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
  v2 = (char *)v1[1] - (char *)*v1;
  v3 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
  if (v2)
  {
    v4 = v1;
    v5 = operator new[]();
    v6 = *v4;
    v7 = v4[1];
    if (*v4 != v7)
    {
      v8 = (_QWORD *)v5;
      do
      {
        v9 = v6;
        if (*((char *)v6 + 23) < 0)
          v9 = (uint64_t *)*v6;
        *v8++ = v9;
        v6 += 3;
      }
      while (v6 != v7);
    }
  }
  return v3;
}

void milaneflow_free_name_list(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BCFF128);
}

uint64_t milaneflow_try_input_io_handle(uint64_t a1, int a2, char *__s)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t Location;
  std::string __p;

  v5 = *(_QWORD *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v6 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 152))(v5, &__p);
  v7 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
      return v7;
  }
  else if (v6)
  {
    return v7;
  }
  v8 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v9 = std::string::insert(&__p, 0, "Cannot resolve input name ");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)v8 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  Location = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 16));
  (*(void (**)(uint64_t))(*(_QWORD *)Location + 24))(Location);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_20696D250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x20BCFF140](v15, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t milaneflow_try_output_io_handle(uint64_t a1, int a2, char *__s)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t Location;
  std::string __p;

  v5 = *(_QWORD *)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v6 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)(v5 + 64) + 24))(v5 + 64, &__p, 1);
  v7 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
      return v7;
  }
  else if (v6)
  {
    return v7;
  }
  v8 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v9 = std::string::insert(&__p, 0, "Cannot resolve output name ");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)v8 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  Location = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 16));
  (*(void (**)(uint64_t))(*(_QWORD *)Location + 24))(Location);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_20696D3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x20BCFF140](v15, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

void milaneflow_free_io_handle(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x20BCFF140);
  }
}

uint64_t milaneflow_function_io_dtype(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (!v4)
    return 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
  if (v5 == 4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  if (v5 == 9)
  {
    v7 = 2;
    goto LABEL_9;
  }
  v6 = 0;
  if (v5 == 14)
  {
    v7 = 1;
LABEL_9:
    *a3 = v7;
    return 1;
  }
  return v6;
}

BOOL milaneflow_function_io_rank(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v5 = v4;
  if (v4)
  {
    v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    *a3 = (uint64_t)(v6[1] - *v6) >> 3;
  }
  return v5 != 0;
}

uint64_t milaneflow_function_io_dim_size(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (result)
  {
    v7 = result;
    v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
    if (a3 >= (uint64_t)(v8[1] - *v8) >> 3)
    {
      return 0;
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
      if (a3 >= (uint64_t)(v9[1] - *v9) >> 3)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v9 + 8 * a3) + 16))(*(_QWORD *)(*v9 + 8 * a3));
      if (result)
      {
        *a4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
        return 1;
      }
    }
  }
  return result;
}

double milaneflow_make_strided_bind_options(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  double result;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  char *v25;

  if (a1 - 6 > 0xFFFFFFFFFFFFFFFALL)
  {
    if (a4)
    {
      if (a1 - 1 >= a3 || a4 == 1)
      {
        __p[0] = 0;
        __p[1] = 0;
        v25 = 0;
        std::vector<unsigned long long>::reserve(__p, a1);
        v12 = 0;
        v13 = (char *)__p[1];
        do
        {
          if (v13 >= v25)
          {
            v15 = (char *)__p[0];
            v16 = (v13 - (char *)__p[0]) >> 3;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61)
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            v18 = v25 - (char *)__p[0];
            if ((v25 - (char *)__p[0]) >> 2 > v17)
              v17 = v18 >> 2;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            if (v19)
            {
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v25, v19);
              v15 = (char *)__p[0];
              v13 = (char *)__p[1];
            }
            else
            {
              v20 = 0;
            }
            v21 = &v20[8 * v16];
            *(_QWORD *)v21 = *(_QWORD *)(a2 + 8 * v12);
            v14 = v21 + 8;
            while (v13 != v15)
            {
              v22 = *((_QWORD *)v13 - 1);
              v13 -= 8;
              *((_QWORD *)v21 - 1) = v22;
              v21 -= 8;
            }
            __p[0] = v21;
            __p[1] = v14;
            v25 = &v20[8 * v19];
            if (v15)
              operator delete(v15);
          }
          else
          {
            *(_QWORD *)v13 = *(_QWORD *)(a2 + 8 * v12);
            v14 = v13 + 8;
          }
          __p[1] = v14;
          ++v12;
          v13 = (char *)v14;
        }
        while (v12 != a1);
        v23 = operator new();
        result = *(double *)__p;
        *(_OWORD *)v23 = *(_OWORD *)__p;
        *(_QWORD *)(v23 + 16) = v25;
        *(_QWORD *)(v23 + 24) = a3;
        *(_QWORD *)(v23 + 32) = a4;
      }
      else
      {
        v10 = (_QWORD *)operator new();
        std::string::basic_string[abi:ne180100]<0>(v10, "Interleave dim must be less thank (rank - 1) if interleave_amount is > 1.Unknown location");
        v10[3] = 0;
        v10[4] = 0;
        v10[5] = 0;
      }
    }
    else
    {
      v11 = (_QWORD *)operator new();
      std::string::basic_string[abi:ne180100]<0>(v11, "Interleave amount must be non-zero. 1 is effectively no interleave");
      std::string::basic_string[abi:ne180100]<0>(v11 + 3, "Unknown location");
    }
  }
  else
  {
    v4 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v4, "Rank must be in [1, 5] for strided options.");
    std::string::basic_string[abi:ne180100]<0>(v4 + 3, "Unknown location");
  }
  return result;
}

void sub_20696D84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  MEMORY[0x20BCFF140](v10, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

void **milaneflow_free_strided_bind_options(void **result, uint64_t a2)
{
  void **v3;
  void *v4;

  if (result)
  {
    v3 = result;
    v4 = *result;
    if (v4)
    {
      v3[1] = v4;
      operator delete(v4);
    }
    result = (void **)MEMORY[0x20BCFF140](v3, 0x1010C401C72BCECLL);
  }
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x20BCFF140);
  }
  return result;
}

void milaneflow_free_bind_result(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x20BCFF140);
  }
}

uint64_t milaneflow_bind_function_input(uint64_t a1, int a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  uint64_t Location;
  uint64_t v25;
  std::string *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::string::size_type size;
  std::string::size_type v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  std::string::size_type v55;
  uint64_t v56;
  std::string::size_type v57;
  std::string::size_type v58;
  unint64_t v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  int v67;
  uint64_t v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  __int128 v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  unsigned int v101;
  void *v102;
  void *v103;
  uint64_t v104;
  std::string v105;
  std::string v106;
  std::string v107;
  std::string __p;
  __int128 v109;
  uint64_t v110;
  void *v111[2];
  uint64_t v112;
  __int128 v113;
  std::string v114;

  v10 = *(_QWORD *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v11 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 152))(v10, &__p);
  v12 = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
      goto LABEL_3;
LABEL_12:
    v18 = operator new();
    v19 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v114, "Function input '");
    v20 = std::string::append(v19, __s);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&__p, "' does not resolve.");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    *(_QWORD *)(v18 + 16) = *((_QWORD *)&v22->__r_.__value_.__l + 2);
    *(_OWORD *)v18 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    Location = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 16));
    (*(void (**)(uint64_t))(*(_QWORD *)Location + 24))(Location);
    goto LABEL_14;
  }
  if (!v11)
    goto LABEL_12;
LABEL_3:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  if (v13)
  {
    v14 = v13;
    memset(&__p, 0, sizeof(__p));
    v111[0] = 0;
    v111[1] = 0;
    v112 = 0;
    MEMORY[0x20BCFEFFC](&__p, __s);
    LOBYTE(v113) = 1;
    *(_QWORD *)&v109 = v14;
    *((_QWORD *)&v113 + 1) = a6;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14);
    if (v15 == 4)
    {
      v17 = 2;
    }
    else
    {
      if (v15 != 9 && v15 != 14)
      {
        v33 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v107, "Function input '");
        v34 = std::string::append(&v107, __s);
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v114.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        v36 = std::string::append(&v114, "' has unsupported dtype.");
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        *(_QWORD *)(v33 + 16) = *((_QWORD *)&v36->__r_.__value_.__l + 2);
        *(_OWORD *)v33 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 16));
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v114.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        v32 = 0;
LABEL_100:
        if (v111[0])
        {
          v111[1] = v111[0];
          operator delete(v111[0]);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return v32;
      }
      v17 = 1;
    }
    v101 = v17;
    memset(&v114, 0, sizeof(v114));
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 96))(v14);
    v40 = *(_QWORD **)v39;
    v41 = *(_QWORD **)(v39 + 8);
    if (*(_QWORD **)v39 != v41)
    {
      while (1)
      {
        v42 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v40 + 16))(*v40);
        if (!v42)
          break;
        v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42);
        v44 = v43;
        size = v114.__r_.__value_.__l.__size_;
        if (v114.__r_.__value_.__l.__size_ >= v114.__r_.__value_.__r.__words[2])
        {
          v47 = (void *)v114.__r_.__value_.__r.__words[0];
          v48 = (uint64_t)(v114.__r_.__value_.__l.__size_ - v114.__r_.__value_.__r.__words[0]) >> 3;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 61)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v50 = v114.__r_.__value_.__r.__words[2] - v114.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v114.__r_.__value_.__r.__words[2] - v114.__r_.__value_.__r.__words[0]) >> 2 > v49)
            v49 = v50 >> 2;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
            v51 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v114.__r_.__value_.__r.__words[2], v51);
            size = v114.__r_.__value_.__l.__size_;
            v47 = (void *)v114.__r_.__value_.__r.__words[0];
          }
          else
          {
            v52 = 0;
          }
          v53 = (uint64_t *)&v52[8 * v48];
          *v53 = v44;
          v46 = (std::string::size_type)(v53 + 1);
          while ((void *)size != v47)
          {
            v54 = *(_QWORD *)(size - 8);
            size -= 8;
            *--v53 = v54;
          }
          v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          v114.__r_.__value_.__l.__size_ = v46;
          v114.__r_.__value_.__r.__words[2] = (std::string::size_type)&v52[8 * v51];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_QWORD *)v114.__r_.__value_.__l.__size_ = v43;
          v46 = size + 8;
        }
        v114.__r_.__value_.__l.__size_ = v46;
        if (++v40 == v41)
          goto LABEL_46;
      }
      v68 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&v106, "Function input '");
      v69 = std::string::append(&v106, __s);
      v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      v71 = std::string::append(&v107, "' has non-static shape.");
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      *(_QWORD *)(v68 + 16) = *((_QWORD *)&v71->__r_.__value_.__l + 2);
      *(_OWORD *)v68 = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      v73 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
      v32 = 0;
      goto LABEL_98;
    }
    v46 = v114.__r_.__value_.__l.__size_;
LABEL_46:
    memset(&v107, 0, sizeof(v107));
    v106.__r_.__value_.__r.__words[0] = 0;
    std::vector<unsigned long long>::assign(&v107.__r_.__value_.__l.__data_, (uint64_t)(v46 - v114.__r_.__value_.__r.__words[0]) >> 3, &v106);
    v55 = v114.__r_.__value_.__r.__words[0];
    if ((uint64_t)(v114.__r_.__value_.__l.__size_ - v114.__r_.__value_.__r.__words[0]) >= 9)
    {
      v56 = v101;
      v57 = v107.__r_.__value_.__r.__words[0];
      v58 = ((v114.__r_.__value_.__l.__size_ - v114.__r_.__value_.__r.__words[0]) >> 3) - 1;
      do
      {
        v56 *= *(_QWORD *)(v55 + 8 * v58);
        *(_QWORD *)(v57 + 8 * v58) = v56;
        v59 = v58-- + 1;
      }
      while (v59 > 2);
    }
    if (a4)
    {
      v60 = v107.__r_.__value_.__l.__size_ - v107.__r_.__value_.__r.__words[0];
      v61 = (uint64_t)(v107.__r_.__value_.__l.__size_ - v107.__r_.__value_.__r.__words[0]) >> 3;
      v63 = *(void **)a4;
      v62 = *(_QWORD *)(a4 + 8);
      v64 = v62 - *(_QWORD *)a4;
      if (v61 != v64 >> 3)
      {
        v74 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v105, "Strides do not match rank for '");
        v75 = std::string::append(&v105, __s);
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v106.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        v77 = std::string::append(&v106, "'.");
        v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        *(_QWORD *)(v74 + 16) = *((_QWORD *)&v77->__r_.__value_.__l + 2);
        *(_OWORD *)v74 = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        v79 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 16));
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
LABEL_71:
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
LABEL_82:
        v32 = 0;
LABEL_96:
        if (v107.__r_.__value_.__r.__words[0])
        {
          v107.__r_.__value_.__l.__size_ = v107.__r_.__value_.__r.__words[0];
          operator delete(v107.__r_.__value_.__l.__data_);
        }
LABEL_98:
        if (v114.__r_.__value_.__r.__words[0])
        {
          v114.__r_.__value_.__l.__size_ = v114.__r_.__value_.__r.__words[0];
          operator delete(v114.__r_.__value_.__l.__data_);
        }
        goto LABEL_100;
      }
      v65 = *(_QWORD *)(a4 + 32);
      *((_QWORD *)&v109 + 1) = v65;
      v110 = *(_QWORD *)(a4 + 24);
      v67 = v64 == v60 && !memcmp(v63, v107.__r_.__value_.__l.__data_, v60) && v65 == 1;
      LOBYTE(v113) = v67;
      if (v111 != (void **)a4)
      {
        std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v111, (char *)v63, v62, v61);
        v67 = v113;
      }
      if (!v67)
      {
        v92 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 24));
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v92 + 24))(&v106);
        v102 = 0;
        v103 = 0;
        v104 = 0;
        std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v102, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_, (uint64_t)(v114.__r_.__value_.__l.__size_ - v114.__r_.__value_.__r.__words[0]) >> 3);
        if (v102)
        {
          v103 = v102;
          operator delete(v102);
        }
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if (v93)
          goto LABEL_82;
      }
    }
    else
    {
      LOBYTE(v113) = 1;
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v111, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_, (uint64_t)(v107.__r_.__value_.__l.__size_ - v107.__r_.__value_.__r.__words[0]) >> 3);
    }
    v81 = *(char **)(a1 + 40);
    v80 = *(char **)(a1 + 48);
    if (v81 == v80)
    {
      v88 = *(_QWORD *)(a1 + 56);
      if ((unint64_t)v81 >= v88)
      {
        v94 = 0x2E8BA2E8BA2E8BA3 * ((v80 - v81) >> 3);
        v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) > 0x2E8BA2E8BA2E8BALL)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v96 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v88 - (_QWORD)v81) >> 3);
        if (2 * v96 > v95)
          v95 = 2 * v96;
        if (v96 >= 0x1745D1745D1745DLL)
          v97 = 0x2E8BA2E8BA2E8BALL;
        else
          v97 = v95;
        if (v97)
        {
          if (v97 > 0x2E8BA2E8BA2E8BALL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v98 = (char *)operator new(88 * v97);
        }
        else
        {
          v98 = 0;
        }
        v99 = &v98[88 * v94];
        *(std::string *)v99 = __p;
        memset(&__p, 0, sizeof(__p));
        *(_OWORD *)(v99 + 24) = v109;
        *((_QWORD *)v99 + 5) = v110;
        *((_OWORD *)v99 + 3) = *(_OWORD *)v111;
        *((_QWORD *)v99 + 8) = v112;
        v111[1] = 0;
        v112 = 0;
        v111[0] = 0;
        *(_OWORD *)(v99 + 72) = v113;
        v91 = v99 + 88;
        *(_QWORD *)(a1 + 40) = v99;
        *(_QWORD *)(a1 + 48) = v99 + 88;
        *(_QWORD *)(a1 + 56) = &v98[88 * v97];
        if (v81)
          operator delete(v81);
      }
      else
      {
        v89 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((_QWORD *)v81 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v81 = v89;
        memset(&__p, 0, sizeof(__p));
        v90 = v110;
        *(_OWORD *)(v81 + 24) = v109;
        *((_QWORD *)v81 + 5) = v90;
        *((_QWORD *)v81 + 6) = 0;
        *((_QWORD *)v81 + 7) = 0;
        *((_QWORD *)v81 + 8) = 0;
        *((_OWORD *)v81 + 3) = *(_OWORD *)v111;
        *((_QWORD *)v81 + 8) = v112;
        v111[0] = 0;
        v111[1] = 0;
        v112 = 0;
        *(_OWORD *)(v81 + 72) = v113;
        v91 = v81 + 88;
      }
      *(_QWORD *)(a1 + 48) = v91;
      v32 = 1;
      goto LABEL_96;
    }
    v82 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v105, "Function input '");
    v83 = std::string::append(&v105, __s);
    v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    v85 = std::string::append(&v106, "' already bound.");
    v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    *(_QWORD *)(v82 + 16) = *((_QWORD *)&v85->__r_.__value_.__l + 2);
    *(_OWORD *)v82 = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    v87 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 16));
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 24))(v87);
    goto LABEL_71;
  }
  v25 = operator new();
  v26 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v114, "Function input '");
  v27 = std::string::append(v26, __s);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&__p, "' is not a tensor.");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  *(_QWORD *)(v25 + 16) = *((_QWORD *)&v29->__r_.__value_.__l + 2);
  *(_OWORD *)v25 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 16));
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  return 0;
}

void sub_20696E304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  void *v41;

  if (__p)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a27)
    operator delete(a27);
  v41 = *(void **)(v39 - 112);
  if (v41)
  {
    *(_QWORD *)(v39 - 104) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::CheckCustomStrides<unsigned char const>(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, uint64_t a5)
{
  unint64_t v6;
  _QWORD *v7;
  std::string *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *p_p;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string __p;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;

  v6 = *(_QWORD *)(a5 + 32);
  if (v6 && (v6 == 1 || *(_QWORD *)(a5 + 40) < (unint64_t)(a2 - 1)))
  {
    if (*(_BYTE *)(a5 + 72))
      return 0;
    v9 = a2 - 1;
    if (a2 - 1 < 0)
    {
      return 0;
    }
    else
    {
      v10 = v6 * a4;
      while (1)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 8 * v9);
        if (v11 < v10)
          break;
        if (v9)
        {
          v12 = *(_QWORD *)(*a3 + 8 * v9);
          v10 = v12 * v11;
          if (*(_QWORD *)(a5 + 40) == v9)
          {
            if (v12 % v6)
              v13 = *(_QWORD *)(a5 + 32);
            else
              v13 = 0;
            v10 = v13 + v10 / v6;
          }
          if (v9-- > 0)
            continue;
        }
        return 0;
      }
      v7 = (_QWORD *)operator new();
      std::to_string(&v28, v9);
      v16 = std::string::insert(&v28, 0, "Invalid stride for dimension ");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v18 = std::string::append(&v29, ". Must be at least ");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&__p, v10);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v22 = std::string::append(&v30, (const std::string::value_type *)p_p, size);
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v24 = std::string::append(&v31, " bytes.");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v7[2] = *((_QWORD *)&v24->__r_.__value_.__l + 2);
      *(_OWORD *)v7 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v26 = (std::string *)(v7 + 3);
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        v7[5] = *(_QWORD *)(a1 + 16);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v7 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid interleave dimension. Interleave > 1 requires dimension to be specified in the range [0, rank - 1).");
    v8 = (std::string *)(v7 + 3);
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      v7[5] = *(_QWORD *)(a1 + 16);
    }
  }
  return v7;
}

void sub_20696E7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  if (*(char *)(v34 - 41) < 0)
    operator delete(*(void **)(v34 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  MEMORY[0x20BCFF140](v33, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::BindTask<unsigned char const>::~BindTask(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t milaneflow_bind_function_output(uint64_t a1, int a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  uint64_t Location;
  uint64_t v25;
  std::string *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::string::size_type size;
  std::string::size_type v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  std::string::size_type v55;
  uint64_t v56;
  std::string::size_type v57;
  std::string::size_type v58;
  unint64_t v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  int v67;
  uint64_t v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  __int128 v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  unsigned int v101;
  void *v102;
  void *v103;
  uint64_t v104;
  std::string v105;
  std::string v106;
  std::string v107;
  std::string __p;
  _BYTE v109[24];
  void *v110[2];
  uint64_t v111;
  __int128 v112;
  std::string v113;

  v10 = *(_QWORD *)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v11 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)(v10 + 64) + 24))(v10 + 64, &__p, 1);
  v12 = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
      goto LABEL_3;
LABEL_12:
    v18 = operator new();
    v19 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v113, "Function output '");
    v20 = std::string::append(v19, __s);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&__p, "' does not resolve.");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    *(_QWORD *)(v18 + 16) = *((_QWORD *)&v22->__r_.__value_.__l + 2);
    *(_OWORD *)v18 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    Location = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 24));
    (*(void (**)(uint64_t))(*(_QWORD *)Location + 24))(Location);
    goto LABEL_14;
  }
  if (!v11)
    goto LABEL_12;
LABEL_3:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  if (v13)
  {
    v14 = v13;
    memset(&__p, 0, sizeof(__p));
    v110[0] = 0;
    v110[1] = 0;
    v111 = 0;
    MEMORY[0x20BCFEFFC](&__p, __s);
    LOBYTE(v112) = 1;
    *(_QWORD *)v109 = v14;
    *((_QWORD *)&v112 + 1) = a6;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14);
    if (v15 == 4)
    {
      v17 = 2;
    }
    else
    {
      if (v15 != 9 && v15 != 14)
      {
        v33 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v107, "Function output '");
        v34 = std::string::append(&v107, __s);
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v113.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        v36 = std::string::append(&v113, "' has unsupported dtype.");
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        *(_QWORD *)(v33 + 16) = *((_QWORD *)&v36->__r_.__value_.__l + 2);
        *(_OWORD *)v33 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 24));
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        v32 = 0;
LABEL_100:
        if (v110[0])
        {
          v110[1] = v110[0];
          operator delete(v110[0]);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return v32;
      }
      v17 = 1;
    }
    v101 = v17;
    memset(&v113, 0, sizeof(v113));
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 96))(v14);
    v40 = *(_QWORD **)v39;
    v41 = *(_QWORD **)(v39 + 8);
    if (*(_QWORD **)v39 != v41)
    {
      while (1)
      {
        v42 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v40 + 16))(*v40);
        if (!v42)
          break;
        v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42);
        v44 = v43;
        size = v113.__r_.__value_.__l.__size_;
        if (v113.__r_.__value_.__l.__size_ >= v113.__r_.__value_.__r.__words[2])
        {
          v47 = (void *)v113.__r_.__value_.__r.__words[0];
          v48 = (uint64_t)(v113.__r_.__value_.__l.__size_ - v113.__r_.__value_.__r.__words[0]) >> 3;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 61)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v50 = v113.__r_.__value_.__r.__words[2] - v113.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v113.__r_.__value_.__r.__words[2] - v113.__r_.__value_.__r.__words[0]) >> 2 > v49)
            v49 = v50 >> 2;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
            v51 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v113.__r_.__value_.__r.__words[2], v51);
            size = v113.__r_.__value_.__l.__size_;
            v47 = (void *)v113.__r_.__value_.__r.__words[0];
          }
          else
          {
            v52 = 0;
          }
          v53 = (uint64_t *)&v52[8 * v48];
          *v53 = v44;
          v46 = (std::string::size_type)(v53 + 1);
          while ((void *)size != v47)
          {
            v54 = *(_QWORD *)(size - 8);
            size -= 8;
            *--v53 = v54;
          }
          v113.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          v113.__r_.__value_.__l.__size_ = v46;
          v113.__r_.__value_.__r.__words[2] = (std::string::size_type)&v52[8 * v51];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_QWORD *)v113.__r_.__value_.__l.__size_ = v43;
          v46 = size + 8;
        }
        v113.__r_.__value_.__l.__size_ = v46;
        if (++v40 == v41)
          goto LABEL_46;
      }
      v68 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&v106, "Function output '");
      v69 = std::string::append(&v106, __s);
      v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      v71 = std::string::append(&v107, "' has non-static shape.");
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      *(_QWORD *)(v68 + 16) = *((_QWORD *)&v71->__r_.__value_.__l + 2);
      *(_OWORD *)v68 = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      v73 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 24));
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
      v32 = 0;
      goto LABEL_98;
    }
    v46 = v113.__r_.__value_.__l.__size_;
LABEL_46:
    memset(&v107, 0, sizeof(v107));
    v106.__r_.__value_.__r.__words[0] = 0;
    std::vector<unsigned long long>::assign(&v107.__r_.__value_.__l.__data_, (uint64_t)(v46 - v113.__r_.__value_.__r.__words[0]) >> 3, &v106);
    v55 = v113.__r_.__value_.__r.__words[0];
    if ((uint64_t)(v113.__r_.__value_.__l.__size_ - v113.__r_.__value_.__r.__words[0]) >= 9)
    {
      v56 = v101;
      v57 = v107.__r_.__value_.__r.__words[0];
      v58 = ((v113.__r_.__value_.__l.__size_ - v113.__r_.__value_.__r.__words[0]) >> 3) - 1;
      do
      {
        v56 *= *(_QWORD *)(v55 + 8 * v58);
        *(_QWORD *)(v57 + 8 * v58) = v56;
        v59 = v58-- + 1;
      }
      while (v59 > 2);
    }
    if (a4)
    {
      v60 = v107.__r_.__value_.__l.__size_ - v107.__r_.__value_.__r.__words[0];
      v61 = (uint64_t)(v107.__r_.__value_.__l.__size_ - v107.__r_.__value_.__r.__words[0]) >> 3;
      v63 = *(void **)a4;
      v62 = *(_QWORD *)(a4 + 8);
      v64 = v62 - *(_QWORD *)a4;
      if (v61 != v64 >> 3)
      {
        v74 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v105, "Strides do not match rank for '");
        v75 = std::string::append(&v105, __s);
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v106.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        v77 = std::string::append(&v106, "'.");
        v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        *(_QWORD *)(v74 + 16) = *((_QWORD *)&v77->__r_.__value_.__l + 2);
        *(_OWORD *)v74 = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        v79 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 16));
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
LABEL_71:
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
LABEL_82:
        v32 = 0;
LABEL_96:
        if (v107.__r_.__value_.__r.__words[0])
        {
          v107.__r_.__value_.__l.__size_ = v107.__r_.__value_.__r.__words[0];
          operator delete(v107.__r_.__value_.__l.__data_);
        }
LABEL_98:
        if (v113.__r_.__value_.__r.__words[0])
        {
          v113.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        goto LABEL_100;
      }
      v65 = *(_QWORD *)(a4 + 32);
      *(_QWORD *)&v109[8] = v65;
      *(_QWORD *)&v109[16] = *(_QWORD *)(a4 + 24);
      v67 = v64 == v60 && !memcmp(v63, v107.__r_.__value_.__l.__data_, v60) && v65 == 1;
      LOBYTE(v112) = v67;
      if (v110 != (void **)a4)
      {
        std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v110, (char *)v63, v62, v61);
        v67 = v112;
      }
      if (!v67)
      {
        v92 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 24));
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v92 + 24))(&v106);
        v102 = 0;
        v103 = 0;
        v104 = 0;
        std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v102, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_, (uint64_t)(v113.__r_.__value_.__l.__size_ - v113.__r_.__value_.__r.__words[0]) >> 3);
        if (v102)
        {
          v103 = v102;
          operator delete(v102);
        }
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if (v93)
          goto LABEL_82;
      }
    }
    else
    {
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v110, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_, (uint64_t)(v107.__r_.__value_.__l.__size_ - v107.__r_.__value_.__r.__words[0]) >> 3);
      LOBYTE(v112) = 1;
      *(_OWORD *)&v109[8] = xmmword_2069A4E90;
    }
    v81 = *(char **)(a1 + 64);
    v80 = *(char **)(a1 + 72);
    if (v81 == v80)
    {
      v88 = *(_QWORD *)(a1 + 80);
      if ((unint64_t)v81 >= v88)
      {
        v94 = 0x2E8BA2E8BA2E8BA3 * ((v80 - v81) >> 3);
        v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) > 0x2E8BA2E8BA2E8BALL)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v96 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v88 - (_QWORD)v81) >> 3);
        if (2 * v96 > v95)
          v95 = 2 * v96;
        if (v96 >= 0x1745D1745D1745DLL)
          v97 = 0x2E8BA2E8BA2E8BALL;
        else
          v97 = v95;
        if (v97)
        {
          if (v97 > 0x2E8BA2E8BA2E8BALL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v98 = (char *)operator new(88 * v97);
        }
        else
        {
          v98 = 0;
        }
        v99 = &v98[88 * v94];
        *(std::string *)v99 = __p;
        memset(&__p, 0, sizeof(__p));
        *(_OWORD *)(v99 + 24) = *(_OWORD *)v109;
        *((_QWORD *)v99 + 5) = *(_QWORD *)&v109[16];
        *((_OWORD *)v99 + 3) = *(_OWORD *)v110;
        *((_QWORD *)v99 + 8) = v111;
        v110[1] = 0;
        v111 = 0;
        v110[0] = 0;
        *(_OWORD *)(v99 + 72) = v112;
        v91 = v99 + 88;
        *(_QWORD *)(a1 + 64) = v99;
        *(_QWORD *)(a1 + 72) = v99 + 88;
        *(_QWORD *)(a1 + 80) = &v98[88 * v97];
        if (v81)
          operator delete(v81);
      }
      else
      {
        v89 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((_QWORD *)v81 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v81 = v89;
        memset(&__p, 0, sizeof(__p));
        v90 = *(_QWORD *)&v109[16];
        *(_OWORD *)(v81 + 24) = *(_OWORD *)v109;
        *((_QWORD *)v81 + 5) = v90;
        *((_QWORD *)v81 + 6) = 0;
        *((_QWORD *)v81 + 7) = 0;
        *((_QWORD *)v81 + 8) = 0;
        *((_OWORD *)v81 + 3) = *(_OWORD *)v110;
        *((_QWORD *)v81 + 8) = v111;
        v110[0] = 0;
        v110[1] = 0;
        v111 = 0;
        *(_OWORD *)(v81 + 72) = v112;
        v91 = v81 + 88;
      }
      *(_QWORD *)(a1 + 72) = v91;
      v32 = 1;
      goto LABEL_96;
    }
    v82 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v105, "Function output '");
    v83 = std::string::append(&v105, __s);
    v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    v85 = std::string::append(&v106, "' already bound.");
    v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    *(_QWORD *)(v82 + 16) = *((_QWORD *)&v85->__r_.__value_.__l + 2);
    *(_OWORD *)v82 = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    v87 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 24));
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 24))(v87);
    goto LABEL_71;
  }
  v25 = operator new();
  v26 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v113, "Function output '");
  v27 = std::string::append(v26, __s);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&__p, "' has non tensor type.");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  *(_QWORD *)(v25 + 16) = *((_QWORD *)&v29->__r_.__value_.__l + 2);
  *(_OWORD *)v25 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 24));
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  return 0;
}

void sub_20696F270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  void *v41;

  if (__p)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a27)
    operator delete(a27);
  v41 = *(void **)(v39 - 112);
  if (v41)
  {
    *(_QWORD *)(v39 - 104) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::CheckCustomStrides<unsigned char>(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, uint64_t a5)
{
  unint64_t v6;
  _QWORD *v7;
  std::string *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *p_p;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string __p;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;

  v6 = *(_QWORD *)(a5 + 32);
  if (v6 && (v6 == 1 || *(_QWORD *)(a5 + 40) < (unint64_t)(a2 - 1)))
  {
    if (*(_BYTE *)(a5 + 72))
      return 0;
    v9 = a2 - 1;
    if (a2 - 1 < 0)
    {
      return 0;
    }
    else
    {
      v10 = v6 * a4;
      while (1)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 8 * v9);
        if (v11 < v10)
          break;
        if (v9)
        {
          v12 = *(_QWORD *)(*a3 + 8 * v9);
          v10 = v12 * v11;
          if (*(_QWORD *)(a5 + 40) == v9)
          {
            if (v12 % v6)
              v13 = *(_QWORD *)(a5 + 32);
            else
              v13 = 0;
            v10 = v13 + v10 / v6;
          }
          if (v9-- > 0)
            continue;
        }
        return 0;
      }
      v7 = (_QWORD *)operator new();
      std::to_string(&v28, v9);
      v16 = std::string::insert(&v28, 0, "Invalid stride for dimension ");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v18 = std::string::append(&v29, ". Must be at least ");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&__p, v10);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v22 = std::string::append(&v30, (const std::string::value_type *)p_p, size);
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v24 = std::string::append(&v31, " bytes.");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v7[2] = *((_QWORD *)&v24->__r_.__value_.__l + 2);
      *(_OWORD *)v7 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v26 = (std::string *)(v7 + 3);
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        v7[5] = *(_QWORD *)(a1 + 16);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v7 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid interleave dimension. Interleave > 1 requires dimension to be specified in the range [0, rank - 1).");
    v8 = (std::string *)(v7 + 3);
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      v7[5] = *(_QWORD *)(a1 + 16);
    }
  }
  return v7;
}

void sub_20696F758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  if (*(char *)(v34 - 41) < 0)
    operator delete(*(void **)(v34 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  MEMORY[0x20BCFF140](v33, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t milaneflow_execute_function(uint64_t a1)
{
  __int128 v1;
  unint64_t v2;
  const MIL::IRTensorValueType *v3;
  unsigned __int8 *v4;
  const MIL::IRTensorValueType *v5;
  unint64_t NumberOfElementsFromStaticTensorShape;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  char *v36;
  _BYTE *v37;
  char v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  __int16 v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int16 v53;
  void *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  size_t v81;
  char *v82;
  char *v83;
  _BYTE *v84;
  char v85;
  unsigned __int8 *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  size_t v102;
  char *v103;
  char *v104;
  _BYTE *v105;
  char v106;
  void *v107;
  void *v108;
  void *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  __int16 v131;
  void *v132;
  _QWORD *v133;
  uint64_t Location;
  const MIL::IRTensorValueType *v135;
  uint64_t v136;
  std::string *v137;
  uint64_t v138;
  uint64_t v139;
  const MIL::IRTensorValueType *v140;
  uint64_t v141;
  int v142;
  const void *Data;
  void *v144;
  size_t v145;
  uint64_t v146;
  std::string *v147;
  int v148;
  const std::string::value_type *v149;
  std::string::size_type v150;
  std::string *v151;
  __int128 v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  void *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _BYTE *v182;
  uint64_t v183;
  _BYTE *v184;
  void *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  _BYTE *v196;
  uint64_t v197;
  _BYTE *v198;
  void *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  _WORD *v210;
  uint64_t v211;
  _WORD *v212;
  _QWORD *v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *p_shared_owners;
  unint64_t v217;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned __int8 *v222;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned __int8 *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *__p;
  __int128 v285;
  std::string::size_type v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  uint64_t (**v289)();
  __int128 v290;
  _QWORD v291[2];
  int v292;
  _OWORD v293[2];
  int v294;
  void *v295;
  void *v296;
  const MIL::IRTensorValueType *v297;
  char v298;
  char *v299;
  char *v300;
  _QWORD v301[2];

  memset(v293, 0, sizeof(v293));
  v294 = 1065353216;
  MIL::ANEMachineIR::Interpreter::DelegateByNameOp::MakeWithDefaultTable(&__p);
  v1 = v285;
  v285 = 0uLL;
  v289 = &off_24BFEB138;
  v290 = v1;
  v291[0] = v286;
  v291[1] = v287;
  v292 = (int)v288;
  if (v287)
  {
    v2 = *(_QWORD *)(v286 + 8);
    if ((*((_QWORD *)&v1 + 1) & (*((_QWORD *)&v1 + 1) - 1)) != 0)
    {
      if (v2 >= *((_QWORD *)&v1 + 1))
        v2 %= *((_QWORD *)&v1 + 1);
    }
    else
    {
      v2 &= *((_QWORD *)&v1 + 1) - 1;
    }
    *(_QWORD *)(v1 + 8 * v2) = v291;
    v286 = 0;
    v287 = 0;
  }
  __p = &off_24BFEB138;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::~__hash_table((uint64_t)&v285);
  v4 = *(unsigned __int8 **)(a1 + 40);
  v222 = *(unsigned __int8 **)(a1 + 48);
  if (v4 != v222)
  {
    v221 = 3;
    while (1)
    {
      ANEMachineIR::Utils::GetStaticTensorShape(*((ANEMachineIR::Utils **)v4 + 3), v3, (uint64_t)&__p);
      NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(*((ANEMachineIR::Utils **)v4 + 3), v5);
      v233 = v4;
      if (v4[72])
      {
        v296 = 0;
        v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 3) + 88))(*((_QWORD *)v4 + 3));
        if (v7 == 4)
        {
          v299 = 0;
          v300 = 0;
          v301[0] = 0;
          std::vector<MIL::Fp16>::reserve((void **)&v299, NumberOfElementsFromStaticTensorShape);
          if (NumberOfElementsFromStaticTensorShape)
          {
            v42 = 0;
            v43 = v300;
            do
            {
              v44 = *(_WORD *)(*((_QWORD *)v4 + 10) + 2 * v42);
              if ((unint64_t)v43 >= v301[0])
              {
                v46 = v299;
                v47 = v43 - v299;
                if (v43 - v299 <= -3)
                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                v48 = v47 >> 1;
                if (v301[0] - (_QWORD)v299 <= (unint64_t)((v47 >> 1) + 1))
                  v49 = v48 + 1;
                else
                  v49 = v301[0] - (_QWORD)v299;
                if (v301[0] - (_QWORD)v299 >= 0x7FFFFFFFFFFFFFFEuLL)
                  v50 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v50 = v49;
                if (v50)
                {
                  v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)v301, v50);
                  v46 = v299;
                  v43 = v300;
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[2 * v48];
                *(_WORD *)v52 = v44;
                v45 = v52 + 2;
                while (v43 != v46)
                {
                  v53 = *((_WORD *)v43 - 1);
                  v43 -= 2;
                  *((_WORD *)v52 - 1) = v53;
                  v52 -= 2;
                }
                v299 = v52;
                v300 = v45;
                v301[0] = &v51[2 * v50];
                if (v46)
                  operator delete(v46);
              }
              else
              {
                *(_WORD *)v43 = v44;
                v45 = v43 + 2;
              }
              v300 = v45;
              ++v42;
              v43 = v45;
            }
            while (v42 != NumberOfElementsFromStaticTensorShape);
          }
          MIL::IRTensorValueType::MakeFloat16Value();
          v296 = v295;
        }
        else
        {
          if (v7 == 9)
          {
            v299 = 0;
            v300 = 0;
            v301[0] = 0;
            std::vector<unsigned char>::reserve((unint64_t *)&v299, NumberOfElementsFromStaticTensorShape);
            if (NumberOfElementsFromStaticTensorShape)
            {
              v26 = 0;
              v27 = v300;
              do
              {
                v28 = *((_QWORD *)v4 + 10);
                if ((unint64_t)v27 >= v301[0])
                {
                  v30 = (unint64_t)v299;
                  v31 = v27 - v299;
                  v32 = v27 - v299 + 1;
                  if (v32 < 0)
                    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                  v33 = v301[0] - (_QWORD)v299;
                  if (2 * (v301[0] - (_QWORD)v299) > (unint64_t)v32)
                    v32 = 2 * v33;
                  if (v33 >= 0x3FFFFFFFFFFFFFFFLL)
                    v34 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v34 = v32;
                  if (v34)
                    v35 = (char *)operator new(v34);
                  else
                    v35 = 0;
                  v36 = &v35[v31];
                  v35[v31] = *(_BYTE *)(v28 + v26);
                  v29 = (uint64_t)&v35[v31 + 1];
                  if (v27 != (_BYTE *)v30)
                  {
                    v37 = &v27[~v30];
                    do
                    {
                      v38 = *--v27;
                      (v37--)[(_QWORD)v35] = v38;
                    }
                    while (v27 != (_BYTE *)v30);
                    v27 = v299;
                    v36 = v35;
                  }
                  v299 = v36;
                  v300 = &v35[v31 + 1];
                  v301[0] = &v35[v34];
                  if (v27)
                    operator delete(v27);
                  v4 = v233;
                }
                else
                {
                  *v27 = *(_BYTE *)(v28 + v26);
                  v29 = (uint64_t)(v27 + 1);
                }
                v300 = (char *)v29;
                ++v26;
                v27 = (_BYTE *)v29;
              }
              while (v26 != NumberOfElementsFromStaticTensorShape);
            }
            MIL::IRTensorValueType::MakeInt8Value();
          }
          else
          {
            if (v7 != 14)
              goto LABEL_253;
            v299 = 0;
            v300 = 0;
            v301[0] = 0;
            std::vector<unsigned char>::reserve((unint64_t *)&v299, NumberOfElementsFromStaticTensorShape);
            if (NumberOfElementsFromStaticTensorShape)
            {
              v8 = 0;
              v9 = v300;
              do
              {
                v10 = *((_QWORD *)v4 + 10);
                if ((unint64_t)v9 >= v301[0])
                {
                  v12 = (unint64_t)v299;
                  v13 = v9 - v299;
                  v14 = v9 - v299 + 1;
                  if (v14 < 0)
                    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                  v15 = v301[0] - (_QWORD)v299;
                  if (2 * (v301[0] - (_QWORD)v299) > (unint64_t)v14)
                    v14 = 2 * v15;
                  if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
                    v16 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v16 = v14;
                  if (v16)
                    v17 = (char *)operator new(v16);
                  else
                    v17 = 0;
                  v18 = &v17[v13];
                  v17[v13] = *(_BYTE *)(v10 + v8);
                  v11 = (uint64_t)&v17[v13 + 1];
                  if (v9 != (_BYTE *)v12)
                  {
                    v19 = &v9[~v12];
                    do
                    {
                      v20 = *--v9;
                      (v19--)[(_QWORD)v17] = v20;
                    }
                    while (v9 != (_BYTE *)v12);
                    v9 = v299;
                    v18 = v17;
                  }
                  v299 = v18;
                  v300 = &v17[v13 + 1];
                  v301[0] = &v17[v16];
                  if (v9)
                    operator delete(v9);
                  v4 = v233;
                }
                else
                {
                  *v9 = *(_BYTE *)(v10 + v8);
                  v11 = (uint64_t)(v9 + 1);
                }
                v300 = (char *)v11;
                ++v8;
                v9 = (_BYTE *)v11;
              }
              while (v8 != NumberOfElementsFromStaticTensorShape);
            }
            MIL::IRTensorValueType::MakeUInt8Value();
          }
          v40 = v295;
          v39 = v296;
          v295 = 0;
          v296 = v40;
          if (v39)
          {
            (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
            v41 = v295;
            v295 = 0;
            if (v41)
              (*(void (**)(void *))(*(_QWORD *)v41 + 8))(v41);
          }
        }
        if (v299)
        {
          v300 = v299;
          operator delete(v299);
        }
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)v293, v4, (uint64_t *)&v296);
        v54 = v296;
        v296 = 0;
        if (v54)
          (*(void (**)(void *))(*(_QWORD *)v54 + 8))(v54);
        v55 = 1;
        goto LABEL_254;
      }
      v296 = 0;
      v21 = v285 - (_QWORD)__p;
      v22 = (uint64_t)(v285 - (_QWORD)__p) >> 3;
      if ((_QWORD)v285 - (_QWORD)__p >= 0x28uLL)
        break;
      if (v21 >= 0x20)
      {
        v24 = 1;
        goto LABEL_94;
      }
      if (v21 >= 0x18)
      {
        v25 = 1;
        v24 = 1;
        goto LABEL_95;
      }
      v23 = 1;
      v24 = 1;
      v25 = 1;
      v257 = 1;
      v227 = 1;
      v241 = 1;
      v279 = 1;
      if (v21 >= 0x10)
        goto LABEL_96;
LABEL_97:
      v56 = *((_QWORD *)__p + v22 - 1);
      v57 = *((_QWORD *)v4 + 6);
      v58 = *((_QWORD *)v4 + 7) - v57;
      v59 = (uint64_t)v58 >> 3;
      if (v58 >= 0x28)
      {
        v61 = *(_QWORD *)(v57 + 8 * v59 - 40);
LABEL_104:
        v62 = *(_QWORD *)(v57 + 8 * v59 - 32);
        goto LABEL_105;
      }
      if (v58 >= 0x20)
      {
        v61 = 1;
        goto LABEL_104;
      }
      if (v58 < 0x18)
      {
        v60 = 1;
        v61 = 1;
        v62 = 1;
        v249 = 1;
        v224 = 1;
        v235 = 1;
        v275 = 1;
        if (v58 < 0x10)
          goto LABEL_107;
        goto LABEL_106;
      }
      v62 = 1;
      v61 = 1;
LABEL_105:
      v60 = *(_QWORD *)(v57 + 8 * v59 - 24);
LABEL_106:
      v275 = *(_QWORD *)(v57 + 8 * v59 - 16);
      v249 = v60;
      v224 = v61;
      v235 = v62;
LABEL_107:
      v63 = *(_QWORD *)(v57 + 8 * v59 - 8);
      v64 = *((_QWORD *)v4 + 5);
      v65 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 3) + 88))(*((_QWORD *)v4 + 3));
      v281 = v64 - v22 + 5;
      if (v65 == 4)
      {
        v299 = 0;
        v300 = 0;
        v301[0] = 0;
        std::vector<MIL::Fp16>::reserve((void **)&v299, NumberOfElementsFromStaticTensorShape);
        if (v227)
        {
          v110 = 0;
          v111 = *((_QWORD *)v4 + 4);
          v239 = *((_QWORD *)v4 + 10);
          v112 = v111 - 1;
          while (1)
          {
            if (v281)
            {
              v113 = v110;
            }
            else
            {
              v112 = (v112 + 1) % v111;
              v113 = v110 / v111;
            }
            v247 = v110;
            if (v241)
              break;
LABEL_246:
            v110 = v247 + 1;
            if (v247 + 1 == v227)
              goto LABEL_247;
          }
          v263 = 0;
          v255 = v239 + v113 * v224;
          while (1)
          {
            if (v281 == 1)
            {
              v112 = (v112 + 1) % v111;
              v114 = v263 / v111;
            }
            else
            {
              v114 = v263;
            }
            if (v257)
              break;
LABEL_245:
            if (++v263 == v241)
              goto LABEL_246;
          }
          v115 = 0;
          v267 = v255 + v114 * v235;
          while (1)
          {
            if (v281 == 2)
            {
              v112 = (v112 + 1) % v111;
              v116 = v115 / v111;
            }
            else
            {
              v116 = v115;
            }
            if (v279)
              break;
LABEL_244:
            if (++v115 == v257)
              goto LABEL_245;
          }
          v117 = 0;
          v273 = v267 + v116 * v249;
          while (2)
          {
            if (v281 == 3)
            {
              v112 = (v112 + 1) % v111;
              v118 = v117 / v111;
              if (!v56)
                goto LABEL_243;
            }
            else
            {
              v118 = v117;
              if (!v56)
                goto LABEL_243;
            }
            v119 = 0;
            v120 = v273 + v118 * v275 + 2 * v112;
            v121 = v300;
            do
            {
              v122 = v119 * v63;
              if ((unint64_t)v121 >= v301[0])
              {
                v124 = v299;
                v125 = v121 - v299;
                if (v121 - v299 <= -3)
                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                v126 = v125 >> 1;
                if (v301[0] - (_QWORD)v299 <= (unint64_t)((v125 >> 1) + 1))
                  v127 = v126 + 1;
                else
                  v127 = v301[0] - (_QWORD)v299;
                if (v301[0] - (_QWORD)v299 >= 0x7FFFFFFFFFFFFFFEuLL)
                  v128 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v128 = v127;
                if (v128)
                {
                  v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)v301, v128);
                  v124 = v299;
                  v121 = v300;
                }
                else
                {
                  v129 = 0;
                }
                v130 = &v129[2 * v126];
                *(_WORD *)v130 = *(_WORD *)(v120 + v122);
                v123 = v130 + 2;
                while (v121 != v124)
                {
                  v131 = *((_WORD *)v121 - 1);
                  v121 -= 2;
                  *((_WORD *)v130 - 1) = v131;
                  v130 -= 2;
                }
                v299 = v130;
                v300 = v123;
                v301[0] = &v129[2 * v128];
                if (v124)
                  operator delete(v124);
              }
              else
              {
                *(_WORD *)v121 = *(_WORD *)(v120 + v122);
                v123 = v121 + 2;
              }
              v300 = v123;
              ++v119;
              v121 = v123;
            }
            while (v119 != v56);
LABEL_243:
            if (++v117 == v279)
              goto LABEL_244;
            continue;
          }
        }
LABEL_247:
        v86 = v233;
        MIL::IRTensorValueType::MakeFloat16Value();
        v296 = v295;
      }
      else
      {
        if (v65 == 9)
        {
          v299 = 0;
          v300 = 0;
          v301[0] = 0;
          std::vector<unsigned char>::reserve((unint64_t *)&v299, NumberOfElementsFromStaticTensorShape);
          if (v227)
          {
            v226 = 0;
            v220 = *((_QWORD *)v4 + 10);
            v262 = *((_QWORD *)v4 + 4);
            v272 = v262 - 1;
            while (1)
            {
              if (v281)
              {
                v87 = v226;
              }
              else
              {
                v272 = (v272 + 1) % v262;
                v87 = v226 / v262;
              }
              if (v241)
                break;
LABEL_198:
              if (++v226 == v227)
                goto LABEL_199;
            }
            v238 = 0;
            v229 = v220 + v87 * v224;
            while (1)
            {
              if (v281 == 1)
              {
                v272 = (v272 + 1) % v262;
                v88 = v238 / v262;
              }
              else
              {
                v88 = v238;
              }
              if (v257)
                break;
LABEL_197:
              if (++v238 == v241)
                goto LABEL_198;
            }
            v89 = 0;
            v246 = v229 + v88 * v235;
            while (1)
            {
              if (v281 == 2)
              {
                v272 = (v272 + 1) % v262;
                v90 = v89 / v262;
              }
              else
              {
                v90 = v89;
              }
              v254 = v89;
              if (v279)
                break;
LABEL_196:
              v89 = v254 + 1;
              if (v254 + 1 == v257)
                goto LABEL_197;
            }
            v91 = 0;
            v266 = v246 + v90 * v249;
            while (2)
            {
              if (v281 == 3)
              {
                v272 = (v272 + 1) % v262;
                v92 = v91 / v262;
                if (!v56)
                  goto LABEL_195;
              }
              else
              {
                v92 = v91;
                if (!v56)
                  goto LABEL_195;
              }
              v93 = 0;
              v94 = v266 + v92 * v275 + v272;
              v95 = v300;
              do
              {
                v96 = v93 * v63;
                if ((unint64_t)v95 >= v301[0])
                {
                  v98 = (unint64_t)v299;
                  v99 = v95 - v299;
                  v100 = v95 - v299 + 1;
                  if (v100 < 0)
                    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                  v101 = v301[0] - (_QWORD)v299;
                  if (2 * (v301[0] - (_QWORD)v299) > (unint64_t)v100)
                    v100 = 2 * v101;
                  if (v101 >= 0x3FFFFFFFFFFFFFFFLL)
                    v102 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v102 = v100;
                  if (v102)
                    v103 = (char *)operator new(v102);
                  else
                    v103 = 0;
                  v104 = &v103[v99];
                  v103[v99] = *(_BYTE *)(v94 + v96);
                  v97 = (uint64_t)&v103[v99 + 1];
                  if (v95 != (_BYTE *)v98)
                  {
                    v105 = &v95[~v98];
                    do
                    {
                      v106 = *--v95;
                      (v105--)[(_QWORD)v103] = v106;
                    }
                    while (v95 != (_BYTE *)v98);
                    v95 = v299;
                    v104 = v103;
                  }
                  v299 = v104;
                  v300 = &v103[v99 + 1];
                  v301[0] = &v103[v102];
                  if (v95)
                    operator delete(v95);
                }
                else
                {
                  *v95 = *(_BYTE *)(v94 + v96);
                  v97 = (uint64_t)(v95 + 1);
                }
                v300 = (char *)v97;
                ++v93;
                v95 = (_BYTE *)v97;
              }
              while (v93 != v56);
LABEL_195:
              if (++v91 == v279)
                goto LABEL_196;
              continue;
            }
          }
LABEL_199:
          v86 = v233;
          MIL::IRTensorValueType::MakeInt8Value();
        }
        else
        {
          if (v65 != 14)
          {
LABEL_253:
            v133 = (_QWORD *)operator new();
            std::string::basic_string[abi:ne180100]<0>(v133, "Found unsupported dtype for binding.");
            Location = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 16));
            (*(void (**)(uint64_t))(*(_QWORD *)Location + 24))(Location);
            v55 = 0;
            goto LABEL_254;
          }
          v299 = 0;
          v300 = 0;
          v301[0] = 0;
          std::vector<unsigned char>::reserve((unint64_t *)&v299, NumberOfElementsFromStaticTensorShape);
          if (v227)
          {
            v225 = 0;
            v219 = *((_QWORD *)v4 + 10);
            v261 = *((_QWORD *)v4 + 4);
            v271 = v261 - 1;
            while (1)
            {
              if (v281)
              {
                v66 = v225;
              }
              else
              {
                v271 = (v271 + 1) % v261;
                v66 = v225 / v261;
              }
              if (v241)
                break;
LABEL_153:
              if (++v225 == v227)
                goto LABEL_154;
            }
            v237 = 0;
            v228 = v219 + v66 * v224;
            while (1)
            {
              if (v281 == 1)
              {
                v271 = (v271 + 1) % v261;
                v67 = v237 / v261;
              }
              else
              {
                v67 = v237;
              }
              if (v257)
                break;
LABEL_152:
              if (++v237 == v241)
                goto LABEL_153;
            }
            v68 = 0;
            v245 = v228 + v67 * v235;
            while (1)
            {
              if (v281 == 2)
              {
                v271 = (v271 + 1) % v261;
                v69 = v68 / v261;
              }
              else
              {
                v69 = v68;
              }
              v253 = v68;
              if (v279)
                break;
LABEL_151:
              v68 = v253 + 1;
              if (v253 + 1 == v257)
                goto LABEL_152;
            }
            v70 = 0;
            v265 = v245 + v69 * v249;
            while (2)
            {
              if (v281 == 3)
              {
                v271 = (v271 + 1) % v261;
                v71 = v70 / v261;
                if (!v56)
                  goto LABEL_150;
              }
              else
              {
                v71 = v70;
                if (!v56)
                  goto LABEL_150;
              }
              v72 = 0;
              v73 = v265 + v71 * v275 + v271;
              v74 = v300;
              do
              {
                v75 = v72 * v63;
                if ((unint64_t)v74 >= v301[0])
                {
                  v77 = (unint64_t)v299;
                  v78 = v74 - v299;
                  v79 = v74 - v299 + 1;
                  if (v79 < 0)
                    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                  v80 = v301[0] - (_QWORD)v299;
                  if (2 * (v301[0] - (_QWORD)v299) > (unint64_t)v79)
                    v79 = 2 * v80;
                  if (v80 >= 0x3FFFFFFFFFFFFFFFLL)
                    v81 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v81 = v79;
                  if (v81)
                    v82 = (char *)operator new(v81);
                  else
                    v82 = 0;
                  v83 = &v82[v78];
                  v82[v78] = *(_BYTE *)(v73 + v75);
                  v76 = (uint64_t)&v82[v78 + 1];
                  if (v74 != (_BYTE *)v77)
                  {
                    v84 = &v74[~v77];
                    do
                    {
                      v85 = *--v74;
                      (v84--)[(_QWORD)v82] = v85;
                    }
                    while (v74 != (_BYTE *)v77);
                    v74 = v299;
                    v83 = v82;
                  }
                  v299 = v83;
                  v300 = &v82[v78 + 1];
                  v301[0] = &v82[v81];
                  if (v74)
                    operator delete(v74);
                }
                else
                {
                  *v74 = *(_BYTE *)(v73 + v75);
                  v76 = (uint64_t)(v74 + 1);
                }
                v300 = (char *)v76;
                ++v72;
                v74 = (_BYTE *)v76;
              }
              while (v72 != v56);
LABEL_150:
              if (++v70 == v279)
                goto LABEL_151;
              continue;
            }
          }
LABEL_154:
          v86 = v233;
          MIL::IRTensorValueType::MakeUInt8Value();
        }
        v108 = v295;
        v107 = v296;
        v295 = 0;
        v296 = v108;
        if (v107)
        {
          (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
          v109 = v295;
          v295 = 0;
          if (v109)
            (*(void (**)(void *))(*(_QWORD *)v109 + 8))(v109);
        }
      }
      if (v299)
      {
        v300 = v299;
        operator delete(v299);
      }
      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)v293, v86, (uint64_t *)&v296);
      v132 = v296;
      v296 = 0;
      if (v132)
        (*(void (**)(void *))(*(_QWORD *)v132 + 8))(v132);
      v55 = 1;
      v4 = v233;
LABEL_254:
      if (__p)
      {
        *(_QWORD *)&v285 = __p;
        operator delete(__p);
      }
      if ((v55 & 1) == 0)
        goto LABEL_417;
      v4 += 88;
      if (v4 == v222)
        goto LABEL_261;
    }
    v24 = *((_QWORD *)__p + v22 - 5);
LABEL_94:
    v25 = *((_QWORD *)__p + v22 - 4);
LABEL_95:
    v23 = *((_QWORD *)__p + v22 - 3);
LABEL_96:
    v279 = *((_QWORD *)__p + v22 - 2);
    v257 = v23;
    v227 = v24;
    v241 = v25;
    goto LABEL_97;
  }
LABEL_261:
  MIL::ANEMachineIR::Interpreter::FunctionInterpreter::Call((uint64_t)&v289, *(MIL::IRObject **)(a1 + 16), *(_DWORD *)(a1 + 32), v293, (uint64_t)&__p);
  if ((_DWORD)__p)
  {
    v136 = 1;
    if ((_DWORD)__p == 2)
      v136 = 2;
    v221 = v136;
    v137 = (std::string *)operator new();
    if (SHIBYTE(v286) < 0)
    {
      std::string::__init_copy_ctor_external(v137, (const std::string::value_type *)v285, *((std::string::size_type *)&v285 + 1));
    }
    else
    {
      *(_OWORD *)&v137->__r_.__value_.__l.__data_ = v285;
      v137->__r_.__value_.__r.__words[2] = v286;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v287 + 24))(v287);
    goto LABEL_410;
  }
  v138 = *(_QWORD *)(a1 + 64);
  v139 = *(_QWORD *)(a1 + 72);
  if (v138 != v139)
  {
    v221 = 4;
    v234 = *(_QWORD *)(a1 + 72);
    while (1)
    {
      ANEMachineIR::Utils::GetStaticTensorShape(*(ANEMachineIR::Utils **)(v138 + 24), v135, (uint64_t)&v299);
      v141 = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(*(ANEMachineIR::Utils **)(v138 + 24), v140);
      if (!MIL::ANEMachineIR::Interpreter::ComputedValueStore::TryGetValue(v293, (unsigned __int8 *)v138))
      {
        v146 = operator new();
        v147 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v296, "Did not find value for output ");
        v148 = *(char *)(v138 + 23);
        if (v148 >= 0)
          v149 = (const std::string::value_type *)v138;
        else
          v149 = *(const std::string::value_type **)v138;
        if (v148 >= 0)
          v150 = *(unsigned __int8 *)(v138 + 23);
        else
          v150 = *(_QWORD *)(v138 + 8);
        v151 = std::string::append(v147, v149, v150);
        v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
        *(_QWORD *)(v146 + 16) = *((_QWORD *)&v151->__r_.__value_.__l + 2);
        *(_OWORD *)v146 = v152;
        v151->__r_.__value_.__l.__size_ = 0;
        v151->__r_.__value_.__r.__words[2] = 0;
        v151->__r_.__value_.__r.__words[0] = 0;
        v153 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 24));
        (*(void (**)(uint64_t))(*(_QWORD *)v153 + 24))(v153);
        if (v298 < 0)
          operator delete(v296);
        goto LABEL_395;
      }
      if (!*(_BYTE *)(v138 + 72))
        break;
      v142 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v138 + 24) + 88))(*(_QWORD *)(v138 + 24));
      switch(v142)
      {
        case 14:
          Data = (const void *)MIL::IRTensorValue::GetDataView<unsigned char>();
          goto LABEL_290;
        case 9:
          Data = (const void *)MIL::IRTensorValue::GetDataView<signed char>();
LABEL_290:
          v144 = *(void **)(v138 + 80);
          v145 = v141;
          goto LABEL_291;
        case 4:
          Data = (const void *)MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v144 = *(void **)(v138 + 80);
          v145 = 2 * v141;
LABEL_291:
          memcpy(v144, Data, v145);
          v159 = 1;
          goto LABEL_396;
      }
LABEL_394:
      v213 = (_QWORD *)operator new();
      std::string::basic_string[abi:ne180100]<0>(v213, "Found unsupported dtype for output binding.");
      v214 = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)v214 + 24))(v214);
LABEL_395:
      v159 = 0;
LABEL_396:
      if (v299)
      {
        v300 = v299;
        operator delete(v299);
      }
      if ((v159 & 1) == 0)
        goto LABEL_410;
      v138 += 88;
      if (v138 == v139)
        goto LABEL_409;
    }
    v154 = v300 - v299;
    v155 = (v300 - v299) >> 3;
    if ((unint64_t)(v300 - v299) >= 0x28)
    {
      v157 = *(_QWORD *)&v299[8 * v155 - 40];
    }
    else
    {
      if (v154 < 0x20)
      {
        if (v154 < 0x18)
        {
          v156 = 1;
          v157 = 1;
          v158 = 1;
          v280 = 1;
          v248 = 1;
          v264 = 1;
          v283 = 1;
          if (v154 < 0x10)
          {
LABEL_297:
            v160 = *(_QWORD *)(v138 + 48);
            v161 = *(_QWORD *)(v138 + 56) - v160;
            v162 = (uint64_t)v161 >> 3;
            if (v161 >= 0x28)
            {
              v164 = *(_QWORD *)(v160 + 8 * v162 - 40);
            }
            else
            {
              if (v161 < 0x20)
              {
                if (v161 < 0x18)
                {
                  v163 = 1;
                  v164 = 1;
                  v165 = 1;
                  v274 = 1;
                  v240 = 1;
                  v256 = 1;
                  v282 = 1;
                  if (v161 < 0x10)
                    goto LABEL_307;
                  goto LABEL_306;
                }
                v165 = 1;
                v164 = 1;
LABEL_305:
                v163 = *(_QWORD *)(v160 + 8 * v162 - 24);
LABEL_306:
                v282 = *(_QWORD *)(v160 + 8 * v162 - 16);
                v274 = v163;
                v240 = v164;
                v256 = v165;
LABEL_307:
                v166 = *(_QWORD *)&v299[8 * v155 - 8];
                v167 = *(_QWORD *)(v160 + 8 * v162 - 8);
                v168 = *(_QWORD *)(v138 + 40);
                v169 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v138 + 24) + 88))(*(_QWORD *)(v138 + 24));
                v170 = v168 - v155 + 5;
                switch(v169)
                {
                  case 4:
                    v199 = (void *)MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                    v200 = *(_QWORD *)(v138 + 32);
                    v236 = v138;
                    v232 = *(_QWORD *)(v138 + 80);
                    v296 = v199;
                    v297 = v135;
                    if (v248)
                    {
                      v244 = 0;
                      v201 = 0;
                      v202 = v200 - 1;
                      while (1)
                      {
                        if (v170)
                        {
                          v203 = v244;
                        }
                        else
                        {
                          v202 = (v202 + 1) % v200;
                          v203 = v244 / v200;
                        }
                        if (v264)
                          break;
LABEL_392:
                        if (++v244 == v248)
                          goto LABEL_393;
                      }
                      v260 = 0;
                      v252 = v232 + v203 * v240;
                      while (1)
                      {
                        if (v170 == 1)
                        {
                          v202 = (v202 + 1) % v200;
                          v204 = v260 / v200;
                        }
                        else
                        {
                          v204 = v260;
                        }
                        if (v280)
                          break;
LABEL_391:
                        if (++v260 == v264)
                          goto LABEL_392;
                      }
                      v205 = 0;
                      v270 = v252 + v204 * v256;
                      while (1)
                      {
                        if (v170 == 2)
                        {
                          v202 = (v202 + 1) % v200;
                          v206 = v205 / v200;
                        }
                        else
                        {
                          v206 = v205;
                        }
                        v278 = v205;
                        if (v283)
                          break;
LABEL_390:
                        v205 = v278 + 1;
                        if (v278 + 1 == v280)
                          goto LABEL_391;
                      }
                      v207 = 0;
                      v208 = v270 + v206 * v274;
                      while (2)
                      {
                        if (v170 == 3)
                        {
                          v202 = (v202 + 1) % v200;
                          v209 = v207 / v200;
                          if (!v166)
                            goto LABEL_389;
                        }
                        else
                        {
                          v209 = v207;
                          if (!v166)
                            goto LABEL_389;
                        }
                        v210 = (_WORD *)(v208 + v209 * v282 + 2 * v202);
                        v211 = v166;
                        do
                        {
                          v212 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::operator[](&v296, v201++);
                          *v210 = *v212;
                          v210 = (_WORD *)((char *)v210 + v167);
                          --v211;
                        }
                        while (v211);
LABEL_389:
                        if (++v207 == v283)
                          goto LABEL_390;
                        continue;
                      }
                    }
LABEL_393:
                    v159 = 1;
                    v139 = v234;
                    v138 = v236;
                    goto LABEL_396;
                  case 9:
                    v185 = (void *)MIL::IRTensorValue::GetDataView<signed char>();
                    v186 = *(_QWORD *)(v138 + 32);
                    v236 = v138;
                    v231 = *(_QWORD *)(v138 + 80);
                    v296 = v185;
                    v297 = v135;
                    if (v248)
                    {
                      v243 = 0;
                      v187 = 0;
                      v188 = v186 - 1;
                      while (1)
                      {
                        if (v170)
                        {
                          v189 = v243;
                        }
                        else
                        {
                          v188 = (v188 + 1) % v186;
                          v189 = v243 / v186;
                        }
                        if (v264)
                          break;
LABEL_364:
                        if (++v243 == v248)
                          goto LABEL_393;
                      }
                      v259 = 0;
                      v251 = v231 + v189 * v240;
                      while (1)
                      {
                        if (v170 == 1)
                        {
                          v188 = (v188 + 1) % v186;
                          v190 = v259 / v186;
                        }
                        else
                        {
                          v190 = v259;
                        }
                        if (v280)
                          break;
LABEL_363:
                        if (++v259 == v264)
                          goto LABEL_364;
                      }
                      v191 = 0;
                      v269 = v251 + v190 * v256;
                      while (1)
                      {
                        if (v170 == 2)
                        {
                          v188 = (v188 + 1) % v186;
                          v192 = v191 / v186;
                        }
                        else
                        {
                          v192 = v191;
                        }
                        v277 = v191;
                        if (v283)
                          break;
LABEL_362:
                        v191 = v277 + 1;
                        if (v277 + 1 == v280)
                          goto LABEL_363;
                      }
                      v193 = 0;
                      v194 = v269 + v192 * v274;
                      while (2)
                      {
                        if (v170 == 3)
                        {
                          v188 = (v188 + 1) % v186;
                          v195 = v193 / v186;
                          if (!v166)
                            goto LABEL_361;
                        }
                        else
                        {
                          v195 = v193;
                          if (!v166)
                            goto LABEL_361;
                        }
                        v196 = (_BYTE *)(v194 + v195 * v282 + v188);
                        v197 = v166;
                        do
                        {
                          v198 = (_BYTE *)MIL::Util::Span<signed char const,18446744073709551615ul>::operator[](&v296, v187++);
                          *v196 = *v198;
                          v196 += v167;
                          --v197;
                        }
                        while (v197);
LABEL_361:
                        if (++v193 == v283)
                          goto LABEL_362;
                        continue;
                      }
                    }
                    goto LABEL_393;
                  case 14:
                    v171 = (void *)MIL::IRTensorValue::GetDataView<unsigned char>();
                    v172 = *(_QWORD *)(v138 + 32);
                    v236 = v138;
                    v230 = *(_QWORD *)(v138 + 80);
                    v296 = v171;
                    v297 = v135;
                    if (v248)
                    {
                      v242 = 0;
                      v173 = 0;
                      v174 = v172 - 1;
                      while (1)
                      {
                        if (v170)
                        {
                          v175 = v242;
                        }
                        else
                        {
                          v174 = (v174 + 1) % v172;
                          v175 = v242 / v172;
                        }
                        if (v264)
                          break;
LABEL_336:
                        if (++v242 == v248)
                          goto LABEL_393;
                      }
                      v258 = 0;
                      v250 = v230 + v175 * v240;
                      while (1)
                      {
                        if (v170 == 1)
                        {
                          v174 = (v174 + 1) % v172;
                          v176 = v258 / v172;
                        }
                        else
                        {
                          v176 = v258;
                        }
                        if (v280)
                          break;
LABEL_335:
                        if (++v258 == v264)
                          goto LABEL_336;
                      }
                      v177 = 0;
                      v268 = v250 + v176 * v256;
                      while (1)
                      {
                        if (v170 == 2)
                        {
                          v174 = (v174 + 1) % v172;
                          v178 = v177 / v172;
                        }
                        else
                        {
                          v178 = v177;
                        }
                        v276 = v177;
                        if (v283)
                          break;
LABEL_334:
                        v177 = v276 + 1;
                        if (v276 + 1 == v280)
                          goto LABEL_335;
                      }
                      v179 = 0;
                      v180 = v268 + v178 * v274;
                      while (2)
                      {
                        if (v170 == 3)
                        {
                          v174 = (v174 + 1) % v172;
                          v181 = v179 / v172;
                          if (!v166)
                            goto LABEL_333;
                        }
                        else
                        {
                          v181 = v179;
                          if (!v166)
                            goto LABEL_333;
                        }
                        v182 = (_BYTE *)(v180 + v181 * v282 + v174);
                        v183 = v166;
                        do
                        {
                          v184 = (_BYTE *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::operator[](&v296, v173++);
                          *v182 = *v184;
                          v182 += v167;
                          --v183;
                        }
                        while (v183);
LABEL_333:
                        if (++v179 == v283)
                          goto LABEL_334;
                        continue;
                      }
                    }
                    goto LABEL_393;
                }
                goto LABEL_394;
              }
              v164 = 1;
            }
            v165 = *(_QWORD *)(v160 + 8 * v162 - 32);
            goto LABEL_305;
          }
LABEL_296:
          v283 = *(_QWORD *)&v299[8 * v155 - 16];
          v280 = v156;
          v248 = v157;
          v264 = v158;
          goto LABEL_297;
        }
        v158 = 1;
        v157 = 1;
LABEL_295:
        v156 = *(_QWORD *)&v299[8 * v155 - 24];
        goto LABEL_296;
      }
      v157 = 1;
    }
    v158 = *(_QWORD *)&v299[8 * v155 - 32];
    goto LABEL_295;
  }
LABEL_409:
  v221 = 0;
LABEL_410:
  v215 = v288;
  if (v288)
  {
    p_shared_owners = (unint64_t *)&v288->__shared_owners_;
    do
      v217 = __ldaxr(p_shared_owners);
    while (__stlxr(v217 - 1, p_shared_owners));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  if (SHIBYTE(v286) < 0)
    operator delete((void *)v285);
LABEL_417:
  v289 = &off_24BFEB138;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::~__hash_table((uint64_t)&v290);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::~__hash_table((uint64_t)v293);
  return v221;
}

void sub_2069710D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t (**a39)())
{
  uint64_t v39;
  uint64_t v40;
  void *v42;

  MEMORY[0x20BCFF140](v39, 0x1012C403467C318);
  v42 = *(void **)(v40 - 112);
  if (v42)
  {
    *(_QWORD *)(v40 - 104) = v42;
    operator delete(v42);
  }
  MIL::ANEMachineIR::Interpreter::FunctionInterpretStatus::~FunctionInterpretStatus(&__p);
  a39 = &off_24BFEB138;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::~__hash_table(a11);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::~__hash_table(v40 - 192);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::FunctionInterpretStatus::~FunctionInterpretStatus(void **this)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void std::allocator_traits<std::allocator<`anonymous namespace'::BindTask<unsigned char>>>::destroy[abi:ne180100]<`anonymous namespace'::BindTask<unsigned char>,void>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRTensorValue const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::shared_ptr<MIL::MILContext>::shared_ptr[abi:ne180100]<MIL::MILContext,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24BFEC250;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_206971448(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MIL::MILContext *,std::shared_ptr<MIL::MILContext>::__shared_ptr_default_delete<MIL::MILContext,MIL::MILContext>,std::allocator<MIL::MILContext>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext *,std::shared_ptr<MIL::MILContext>::__shared_ptr_default_delete<MIL::MILContext,MIL::MILContext>,std::allocator<MIL::MILContext>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext *,std::shared_ptr<MIL::MILContext>::__shared_ptr_default_delete<MIL::MILContext,MIL::MILContext>,std::allocator<MIL::MILContext>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<MIL::IRProgram>::shared_ptr[abi:ne180100]<MIL::IRProgram,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24BFEC2B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_206971540(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MIL::IRProgram *,std::shared_ptr<MIL::IRProgram>::__shared_ptr_default_delete<MIL::IRProgram,MIL::IRProgram>,std::allocator<MIL::IRProgram>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram *,std::shared_ptr<MIL::IRProgram>::__shared_ptr_default_delete<MIL::IRProgram,MIL::IRProgram>,std::allocator<MIL::IRProgram>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram *,std::shared_ptr<MIL::IRProgram>::__shared_ptr_default_delete<MIL::IRProgram,MIL::IRProgram>,std::allocator<MIL::IRProgram>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t MIL::IROperator::Make()
{
  return MEMORY[0x24BE615C8]();
}

{
  return MEMORY[0x24BE615D0]();
}

uint64_t MIL::MILContext::Make(MIL::MILContext *this)
{
  return MEMORY[0x24BE615D8](this);
}

uint64_t MIL::Validation::TensorDTypeConstraints::Make(MIL::Validation::TensorDTypeConstraints *this)
{
  return MEMORY[0x24BE615E8](this);
}

uint64_t MIL::Validation::OpOutputConstraintTarget::Make(MIL::Validation::OpOutputConstraintTarget *this)
{
  return MEMORY[0x24BE615F0](this);
}

uint64_t MIL::Validation::TensorRankValueConstraints::Make(MIL::Validation::TensorRankValueConstraints *this)
{
  return MEMORY[0x24BE615F8](this);
}

uint64_t MIL::Validation::OpParameterConstraintTarget::Make()
{
  return MEMORY[0x24BE61600]();
}

uint64_t MIL::Validation::TensorSymbolicShapeConstraints::Make(MIL::Validation::TensorSymbolicShapeConstraints *this)
{
  return MEMORY[0x24BE61608](this);
}

uint64_t MIL::Validation::PossibleStringValuesConstraints::Make(MIL::Validation::PossibleStringValuesConstraints *this)
{
  return MEMORY[0x24BE61610](this);
}

uint64_t MIL::IRParameter::MakeTypeSet()
{
  return MEMORY[0x24BE61620]();
}

uint64_t MIL::IRParameter::Make()
{
  return MEMORY[0x24BE61630]();
}

uint64_t MIL::ParserOptions::Make(MIL::ParserOptions *this)
{
  return MEMORY[0x24BE61648](this);
}

uint64_t MIL::IRNamedValueType::Make()
{
  return MEMORY[0x24BE61658]();
}

void MIL::IRNamedValueType::~IRNamedValueType(MIL::IRNamedValueType *this)
{
  MEMORY[0x24BE61660](this);
}

uint64_t MIL::ValidationResult::ValidationResult()
{
  return MEMORY[0x24BE616A8]();
}

uint64_t MIL::ValidationResult::ValidationResult(MIL::ValidationResult *this)
{
  return MEMORY[0x24BE616B0](this);
}

void MIL::ValidationResult::~ValidationResult(MIL::ValidationResult *this)
{
  MEMORY[0x24BE616C0](this);
}

uint64_t MIL::IRTensorValueType::MakeScalar()
{
  return MEMORY[0x24BE616D8]();
}

uint64_t MIL::IRTensorValueType::MakeWithShape()
{
  return MEMORY[0x24BE616E0]();
}

uint64_t MIL::IRTensorValueType::Make()
{
  return MEMORY[0x24BE616F0]();
}

uint64_t MIL::IRUnknownDimension::Make(MIL::IRUnknownDimension *this, MIL::MILContext *a2)
{
  return MEMORY[0x24BE61708](this, a2);
}

uint64_t MIL::Blob::StorageWriter::WriteData<MIL::Fp16>()
{
  return MEMORY[0x24BE61748]();
}

uint64_t MIL::Blob::StorageWriter::WriteData<unsigned char>()
{
  return MEMORY[0x24BE61750]();
}

uint64_t MIL::Blob::StorageWriter::StorageWriter()
{
  return MEMORY[0x24BE61758]();
}

void MIL::Blob::StorageWriter::~StorageWriter(MIL::Blob::StorageWriter *this)
{
  MEMORY[0x24BE61760](this);
}

uint64_t MIL::Fp16::FromFloat(MIL::Fp16 *this, float a2)
{
  return MEMORY[0x24BE61770](this, a2);
}

uint64_t MIL::Text::ParseProgram()
{
  return MEMORY[0x24BE61778]();
}

uint64_t MIL::Text::ParseProgramFromFile()
{
  return MEMORY[0x24BE61790]();
}

uint64_t MIL::Builder::BlockBuilder::GetContext(MIL::Builder::BlockBuilder *this)
{
  return MEMORY[0x24BE617D0](this);
}

uint64_t MIL::Builder::BlockBuilder::AddOperation()
{
  return MEMORY[0x24BE617D8]();
}

uint64_t MIL::Builder::BlockBuilder::GetOperations(MIL::Builder::BlockBuilder *this)
{
  return MEMORY[0x24BE617E0](this);
}

uint64_t MIL::Builder::BlockBuilder::RemoveOperation()
{
  return MEMORY[0x24BE617E8]();
}

uint64_t MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable()
{
  return MEMORY[0x24BE617F0]();
}

uint64_t MIL::Builder::BlockBuilder::AddInput()
{
  return MEMORY[0x24BE617F8]();
}

uint64_t MIL::Builder::BlockBuilder::AddOutput()
{
  return MEMORY[0x24BE61800]();
}

uint64_t MIL::Builder::ProgramBuilder::AddFunction()
{
  return MEMORY[0x24BE61808]();
}

uint64_t MIL::Builder::ProgramBuilder::GetFunction()
{
  return MEMORY[0x24BE61810]();
}

uint64_t MIL::Builder::ProgramBuilder::CreateProgram(MIL::Builder::ProgramBuilder *this)
{
  return MEMORY[0x24BE61818](this);
}

uint64_t MIL::Builder::ProgramBuilder::Make()
{
  return MEMORY[0x24BE61820]();
}

uint64_t MIL::Builder::FunctionBuilder::SetSpecialization()
{
  return MEMORY[0x24BE61828]();
}

uint64_t MIL::Builder::FunctionBuilder::AddBlock()
{
  return MEMORY[0x24BE61830]();
}

uint64_t MIL::Builder::FunctionBuilder::AddInput()
{
  return MEMORY[0x24BE61838]();
}

uint64_t MIL::Builder::OperationBuilder::AddInputBool()
{
  return MEMORY[0x24BE61840]();
}

uint64_t MIL::Builder::OperationBuilder::AddInputInt8()
{
  return MEMORY[0x24BE61848]();
}

uint64_t MIL::Builder::OperationBuilder::SetAttribute()
{
  return MEMORY[0x24BE61850]();
}

uint64_t MIL::Builder::OperationBuilder::AddInputInt32()
{
  return MEMORY[0x24BE61858]();
}

{
  return MEMORY[0x24BE61860]();
}

uint64_t MIL::Builder::OperationBuilder::AddInputString()
{
  return MEMORY[0x24BE61868]();
}

uint64_t MIL::Builder::OperationBuilder::AddInputFloat16()
{
  return MEMORY[0x24BE61870]();
}

{
  return MEMORY[0x24BE61878]();
}

uint64_t MIL::Builder::OperationBuilder::GetChildOperations(MIL::Builder::OperationBuilder *this)
{
  return MEMORY[0x24BE61880](this);
}

uint64_t MIL::Builder::OperationBuilder::AddBlock()
{
  return MEMORY[0x24BE61888]();
}

uint64_t MIL::Builder::OperationBuilder::AddInput()
{
  return MEMORY[0x24BE61890]();
}

{
  return MEMORY[0x24BE61898]();
}

uint64_t MIL::Builder::OperationBuilder::AddOutput()
{
  return MEMORY[0x24BE618A0]();
}

uint64_t MIL::Builder::OperationBuilder::GetBlocks(MIL::Builder::OperationBuilder *this)
{
  return MEMORY[0x24BE618A8](this);
}

uint64_t MIL::IROpset::IROpset()
{
  return MEMORY[0x24BE618C0]();
}

void MIL::IROpset::~IROpset(MIL::IROpset *this)
{
  MEMORY[0x24BE618D8](this);
}

uint64_t MIL::MILContext::GetOpset()
{
  return MEMORY[0x24BE61958]();
}

uint64_t MIL::IRDimension::AsConstant(MIL::IRDimension *this)
{
  return MEMORY[0x24BE61960](this);
}

uint64_t MIL::IROperation::GetOutputType(MIL::IROperation *this)
{
  return MEMORY[0x24BE61978](this);
}

uint64_t MIL::IROperation::GetParameterType()
{
  return MEMORY[0x24BE61998]();
}

uint64_t MIL::IROperation::GetParameterValue()
{
  return MEMORY[0x24BE619B8]();
}

uint64_t MIL::IROperation::TryGetParameterType()
{
  return MEMORY[0x24BE619C8]();
}

uint64_t MIL::IROperation::TryGetParameterValue()
{
  return MEMORY[0x24BE619D8]();
}

uint64_t MIL::IRValueType::AsTensorType(MIL::IRValueType *this)
{
  return MEMORY[0x24BE619E8](this);
}

uint64_t MIL::IRTensorValue::GetDataView<MIL::Fp16>()
{
  return MEMORY[0x24BE61A30]();
}

uint64_t MIL::IRTensorValue::GetDataView<signed char>()
{
  return MEMORY[0x24BE61A88]();
}

uint64_t MIL::IRTensorValue::GetDataView<unsigned char>()
{
  return MEMORY[0x24BE61AB8]();
}

uint64_t MIL::IRTensorValue::GetDataView<int>()
{
  return MEMORY[0x24BE61AC8]();
}

uint64_t MIL::IRNamedValueType::GetName(MIL::IRNamedValueType *this)
{
  return MEMORY[0x24BE61BD8](this);
}

uint64_t MIL::IRNamedValueType::GetType(MIL::IRNamedValueType *this)
{
  return MEMORY[0x24BE61BE8](this);
}

uint64_t MIL::ValidationResult::IsGood(MIL::ValidationResult *this)
{
  return MEMORY[0x24BE61C00](this);
}

uint64_t MIL::IRTensorValueType::MakeInt8Value()
{
  return MEMORY[0x24BE61C30]();
}

uint64_t MIL::IRTensorValueType::MakeUInt8Value()
{
  return MEMORY[0x24BE61C50]();
}

uint64_t MIL::IRTensorValueType::MakeFloat16Value()
{
  return MEMORY[0x24BE61C80]();
}

uint64_t MIL::IRTensorValueType::MakeValueFromBlobFile()
{
  return MEMORY[0x24BE61C98]();
}

uint64_t MIL::IRTensorValueType::IsScalar(MIL::IRTensorValueType *this)
{
  return MEMORY[0x24BE61CB8](this);
}

uint64_t MIL::Fp16::GetFloat(MIL::Fp16 *this)
{
  return MEMORY[0x24BE61E18](this);
}

uint64_t MIL::Builder::BlockBuilder::GetOpsetName(MIL::Builder::BlockBuilder *this)
{
  return MEMORY[0x24BE61E60](this);
}

uint64_t MIL::Builder::BlockBuilder::GetOutputNames(MIL::Builder::BlockBuilder *this)
{
  return MEMORY[0x24BE61E68](this);
}

uint64_t MIL::Builder::OperationBuilder::GetOutputs(MIL::Builder::OperationBuilder *this)
{
  return MEMORY[0x24BE61E70](this);
}

uint64_t MIL::Builder::OperationBuilder::GetOperator(MIL::Builder::OperationBuilder *this)
{
  return MEMORY[0x24BE61E78](this);
}

uint64_t MIL::Builder::OperationBuilder::GetOutputName(MIL::Builder::OperationBuilder *this)
{
  return MEMORY[0x24BE61E80](this);
}

uint64_t MIL::Builder::OperationBuilder::GetArgumentForParameter()
{
  return MEMORY[0x24BE61E88]();
}

uint64_t MIL::Builder::OperationBuilder::GetOutput(MIL::Builder::OperationBuilder *this)
{
  return MEMORY[0x24BE61E90](this);
}

uint64_t MIL::Builder::Variable::TryGetType(MIL::Builder::Variable *this)
{
  return MEMORY[0x24BE61E98](this);
}

uint64_t MIL::Builder::Variable::TryGetValue(MIL::Builder::Variable *this)
{
  return MEMORY[0x24BE61EA0](this);
}

uint64_t MIL::Builder::Variable::GetScalarValue<MIL::Fp16>()
{
  return MEMORY[0x24BE61EA8]();
}

uint64_t MIL::Builder::Variable::GetName(MIL::Builder::Variable *this)
{
  return MEMORY[0x24BE61EB0](this);
}

uint64_t MIL::Builder::Variable::GetValue(MIL::Builder::Variable *this)
{
  return MEMORY[0x24BE61EB8](this);
}

uint64_t MIL::IROpset::TryGetOperatorSharedPtr()
{
  return MEMORY[0x24BE61EC8]();
}

uint64_t MIL::IRValue::TryGetScalar<MIL::Fp16>()
{
  return MEMORY[0x24BE61EE8]();
}

uint64_t MIL::IRValue::TryGetScalar<std::string>()
{
  return MEMORY[0x24BE61F00]();
}

uint64_t MIL::IRValue::TryGetScalar<signed char>()
{
  return MEMORY[0x24BE61F08]();
}

uint64_t MIL::IRValue::TryGetScalar<BOOL>()
{
  return MEMORY[0x24BE61F10]();
}

uint64_t MIL::IRValue::TryGetScalar<float>()
{
  return MEMORY[0x24BE61F28]();
}

uint64_t MIL::IRValue::TryGetScalar<unsigned char>()
{
  return MEMORY[0x24BE61F30]();
}

uint64_t MIL::IRValue::TryGetScalar<int>()
{
  return MEMORY[0x24BE61F40]();
}

uint64_t MIL::IRValue::AsTensor(MIL::IRValue *this)
{
  return MEMORY[0x24BE61F88](this);
}

uint64_t MIL::IRValue::GetScalar<std::string>()
{
  return MEMORY[0x24BE61F98]();
}

uint64_t MIL::IRValue::GetScalar<BOOL>()
{
  return MEMORY[0x24BE61FB8]();
}

uint64_t MIL::IRObject::GetLocation(MIL::IRObject *this)
{
  return MEMORY[0x24BE62030](this);
}

uint64_t MIL::IRObject::GetAttributes(MIL::IRObject *this)
{
  return MEMORY[0x24BE62050](this);
}

uint64_t MIL::IRObject::GetLocationPtr(MIL::IRObject *this)
{
  return MEMORY[0x24BE62058](this);
}

uint64_t MIL::IRObject::TryGetAttribute()
{
  return MEMORY[0x24BE62070]();
}

uint64_t MIL::IRObject::TryGetAttributeSharedPtr()
{
  return MEMORY[0x24BE62078]();
}

uint64_t MIL::IRProgram::GetFunction()
{
  return MEMORY[0x24BE62088]();
}

uint64_t MIL::MILResult::GetMessage(MIL::MILResult *this)
{
  return MEMORY[0x24BE62090](this);
}

uint64_t MIL::MILResult::GetMessageWithLocation(MIL::MILResult *this)
{
  return MEMORY[0x24BE62098](this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x24BEDA9B0](this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB48](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB40](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB60](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF80]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x24BEDB3B0]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

{
  return (std::string *)MEMORY[0x24BEDB630](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB628](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24BFE7120();
}

void operator delete(void *__p)
{
  off_24BFE7128(__p);
}

uint64_t operator delete()
{
  return off_24BFE7130();
}

uint64_t operator new[]()
{
  return off_24BFE7138();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24BFE7140(__sz);
}

uint64_t operator new()
{
  return off_24BFE7148();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x24BEDB938](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x24BDAE278](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

long double frexp(long double __x, int *__e)
{
  long double result;

  MEMORY[0x24BDAE480](__e, __x);
  return result;
}

float frexpf(float a1, int *a2)
{
  float result;

  MEMORY[0x24BDAE488](a2, a1);
  return result;
}

int ilogbf(float a1)
{
  return MEMORY[0x24BDAE870](a1);
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x24BDAEA30](*(_QWORD *)&__e, __x);
  return result;
}

float ldexpf(float a1, int a2)
{
  float result;

  MEMORY[0x24BDAEA38](*(_QWORD *)&a2, a1);
  return result;
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

float modff(float a1, float *a2)
{
  float result;

  MEMORY[0x24BDAEFB8](a2, a1);
  return result;
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

float tanhf(float a1)
{
  float result;

  MEMORY[0x24BDB0150](a1);
  return result;
}
