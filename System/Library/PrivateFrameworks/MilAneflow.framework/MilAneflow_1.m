void sub_2068C22C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(_QWORD *)(v15 - 40);
  *(_QWORD *)(v15 - 40) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a14 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v14);
  _Unwind_Resume(a1);
}

const char *ANEMachineIR::H2021::Opsets::aneflowh2021Opset::GetName(ANEMachineIR::H2021::Opsets::aneflowh2021Opset *this)
{
  return "aneflowh2021";
}

void ANEMachineIR::H2021::Opsets::aneflowh2021Opset::~aneflowh2021Opset(ANEMachineIR::H2021::Opsets::aneflowh2021Opset *this)
{
  MIL::IROpset::~IROpset(this);
  JUMPOUT(0x20BCFF140);
}

MIL::IROpset *std::unique_ptr<ANEMachineIR::H2021::Opsets::aneflowh2021Opset>::reset[abi:ne180100](MIL::IROpset **a1, MIL::IROpset *a2)
{
  MIL::IROpset *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::IROpset::~IROpset(result);
    JUMPOUT(0x20BCFF140);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[15],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068C2D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[15],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[15],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068C2DA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[15],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068C2DF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_24BFEAF98;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = (uint64_t)v5;
  *a2 = 0;
  return a1;
}

void std::__shared_ptr_pointer<MIL::IROperator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::IROperator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IROperator  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[6],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068C2F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[6],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[6],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068C2FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[6],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068C3040(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[7],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068C30B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[7],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[7],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068C3150(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[7],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068C319C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[14],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068C3214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[14],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[14],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068C32AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[14],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068C32F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[12],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068C3370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[12],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[12],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068C3408(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[12],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068C3454(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[16],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068C34CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[16],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[16],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068C3564(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[16],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068C35B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[8],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068C3628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[8],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[8],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068C36C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[8],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068C370C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[10],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068C3784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[10],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[10],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068C381C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[10],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068C3868(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[11],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068C38E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[11],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[11],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068C3978(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[11],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068C39C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[9],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068C3A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[9],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[9],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068C3AD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[9],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068C3B20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[17],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068C3B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[17],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[17],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068C3C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[17],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068C3C7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[13],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068C3CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[13],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068C3D8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068C3DD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[5],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_2068C3E50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[5],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_2068C3EE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IROperator>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_2068C3F34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateBaseNePool@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2020::Validators::ValidateNeAvgPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNePool(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidateNeMaxPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNePool(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidateNeMinPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNePool(this, a2);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateBasePePool@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2020::Validators::ValidatePeAvgPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePePool(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeMaxPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePePool(this, a2);
}

void ANEMachineIR::H2020::Validators::ValidatePeMinPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePePool(this, a2);
}

uint64_t ANEMachineIR::H2021::BasePeElementWiseBinary::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  unsigned __int8 *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  unsigned __int8 *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  unsigned __int8 *v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  char **v81;
  uint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  __int128 v104;
  char *v105;
  char *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  char **v114;
  _QWORD *v115;
  uint64_t v116;
  MIL::Validation::TensorDTypeConstraints *v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  void *v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count_vtbl *v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  void *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  MIL::Validation::TensorSymbolicShapeConstraints *v150;
  void *v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count_vtbl *v157;
  void *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count_vtbl *v164;
  void *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  void *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count_vtbl *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  MIL::Validation::PossibleStringValuesConstraints *v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  uint64_t i;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void *v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count_vtbl *v196;
  uint64_t j;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count_vtbl *v208;
  uint64_t result;
  uint64_t v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  void *v213;
  char v214;
  void *v215;
  std::__shared_weak_count *v216;
  void *v217;
  char v218;
  void *v219;
  std::__shared_weak_count *v220;
  void *v221;
  std::__shared_weak_count *v222;
  void *v223[2];
  char v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  char v228;
  void *v229;
  char v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  void *v233[2];
  char v234;
  void *v235;
  char v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  void *v239[2];
  char v240;
  void *v241;
  char v242;
  std::__shared_weak_count_vtbl *v243;
  std::__shared_weak_count *v244;
  void *v245;
  std::__shared_weak_count *v246;
  void *v247[2];
  char v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  void *v251[2];
  char v252;
  void *v253;
  char v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  void *v257[2];
  char v258;
  void *v259;
  char v260;
  std::__shared_weak_count_vtbl *v261;
  std::__shared_weak_count *v262;
  char **v263;
  std::__shared_weak_count *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  uint64_t v268;
  void *v269;
  void *v270;
  _QWORD *v271;
  std::__shared_weak_count *v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  char **v276;
  std::__shared_weak_count *v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count *v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count *v281;
  std::__shared_weak_count *v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count *v284;
  std::__shared_weak_count *v285;
  void *__p;
  void *v287;
  _QWORD *v288;
  std::__shared_weak_count *v289;
  _QWORD *v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD v294[3];
  _QWORD v295[3];
  _QWORD v296[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v298;
  uint64_t v299;
  _BYTE v300[24];
  _BYTE *v301;
  _QWORD v302[3];
  MIL::Validation::TensorDTypeConstraints *v303;
  std::__shared_weak_count_vtbl *v304;
  std::__shared_weak_count_vtbl *v305;
  void (__cdecl **v306)(std::__shared_weak_count *__hidden);
  uint64_t v307;

  v307 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v290 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v298 = (uint64_t)&v10->~__shared_weak_count_0;
  v299 = (uint64_t)&v10->~__shared_weak_count_0;
  v291 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v304 = v12;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v305 = (std::__shared_weak_count_vtbl *)&v12->~__shared_weak_count_0;
  v306 = &v12->~__shared_weak_count_0;
  v292 = MIL::IRTensorValueType::MakeWithShape();
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v288 = v14 + 1;
  v287 = v14 + 1;
  v293 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v269);
  v15 = v269;
  v269 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = v289;
  if (v289)
  {
    p_shared_owners = (unint64_t *)&v289->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  if (v304)
  {
    v305 = v304;
    operator delete(v304);
  }
  if (Scalar)
  {
    v298 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v19 = v290;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v21;
  v21->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  v298 = (uint64_t)&v21->~__shared_weak_count_0;
  v299 = (uint64_t)&v21->~__shared_weak_count_0;
  v291 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v304 = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  v305 = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v306 = &v23->~__shared_weak_count_0;
  v292 = MIL::IRTensorValueType::MakeWithShape();
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = v24;
  v288 = v25 + 1;
  v287 = v25 + 1;
  v293 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v269);
  v26 = v269;
  v269 = 0;
  if (v26)
    (*(void (**)(void *))(*(_QWORD *)v26 + 8))(v26);
  v27 = v285;
  if (v285)
  {
    v28 = (unint64_t *)&v285->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  if (v304)
  {
    v305 = v304;
    operator delete(v304);
  }
  if (Scalar)
  {
    v298 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v30 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v30, "x_scale", (uint64_t *)&v291);
  v32 = v291;
  v291 = 0;
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  v33 = v284;
  if (v284)
  {
    v34 = (unint64_t *)&v284->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 48))(*((_QWORD *)v31 + 5), 1);
  v36 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v36, "y_scale", (uint64_t *)&v291);
  v38 = v291;
  v291 = 0;
  if (v38)
    (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
  v39 = v283;
  if (v283)
  {
    v40 = (unint64_t *)&v283->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 32))(*((_QWORD *)v37 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 48))(*((_QWORD *)v37 + 5), 1);
  v42 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v42, "post_scale", (uint64_t *)&v291);
  v44 = v291;
  v291 = 0;
  if (v44)
    (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
  v45 = v282;
  if (v282)
  {
    v46 = (unint64_t *)&v282->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 32))(*((_QWORD *)v43 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 48))(*((_QWORD *)v43 + 5), 1);
  v48 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v48, "reduction", (uint64_t *)&v291);
  v50 = v291;
  v291 = 0;
  if (v50)
    (*(void (**)(void *))(*(_QWORD *)v50 + 8))(v50);
  v51 = v281;
  if (v281)
  {
    v52 = (unint64_t *)&v281->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v49 + 5) + 32))(*((_QWORD *)v49 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v49 + 5) + 48))(*((_QWORD *)v49 + 5), 1);
  v54 = v290;
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v291 = v56;
  *v56 = v55;
  v293 = (uint64_t)(v56 + 1);
  v292 = (uint64_t)(v56 + 1);
  v304 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v54, "reduction_axes", (uint64_t *)&Scalar);
  v58 = Scalar;
  Scalar = 0;
  if (v58)
    (*((void (**)(std::__shared_weak_count_vtbl *))v58->~__shared_weak_count + 1))(v58);
  v59 = v280;
  if (v280)
  {
    v60 = (unint64_t *)&v280->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v291)
  {
    v292 = (uint64_t)v291;
    operator delete(v291);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 32))(*((_QWORD *)v57 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 48))(*((_QWORD *)v57 + 5), 1);
  v62 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v62, "reduction_scale", (uint64_t *)&v291);
  v64 = v291;
  v291 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = v279;
  if (v279)
  {
    v66 = (unint64_t *)&v279->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v68, "reduction_epsilon", (uint64_t *)&v291);
  v70 = v291;
  v291 = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  v71 = v278;
  if (v278)
  {
    v72 = (unint64_t *)&v278->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[26],std::unique_ptr<MIL::IRParameter>>(v74, "reduction_post_processing", (uint64_t *)&v291);
  v76 = v291;
  v291 = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  v77 = v277;
  if (v277)
  {
    v78 = (unint64_t *)&v277->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 32))(*((_QWORD *)v75 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 48))(*((_QWORD *)v75 + 5), 1);
  v276 = 0;
  v80 = operator new();
  *(_QWORD *)v80 = 0;
  *(_QWORD *)(v80 + 8) = 0;
  *(_QWORD *)(v80 + 16) = 0;
  v291 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v276, (void **)v80);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v291, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v276, 1uLL);
  v81 = v276;
  v82 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v83 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v304 = v83;
  v83->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v82;
  v305 = (std::__shared_weak_count_vtbl *)&v83->~__shared_weak_count_0;
  v306 = &v83->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v84 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v85 = operator new(8uLL);
  __p = v85;
  *v85 = v84;
  v288 = v85 + 1;
  v287 = v85 + 1;
  v298 = MIL::IRTensorValueType::MakeWithShape();
  v86 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v87 = operator new(8uLL);
  v269 = v87;
  *v87 = v86;
  v271 = v87 + 1;
  v270 = v87 + 1;
  v299 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v88 = v273;
  v274 = v273;
  if (v273)
  {
    v89 = (_QWORD *)operator new();
    v90 = v273;
    *v89 = &unk_24BFE7320;
    v89[1] = 0;
    v89[2] = 0;
    v89[3] = v90;
  }
  else
  {
    v89 = 0;
  }
  v275 = v89;
  v273 = 0;
  v91 = v81[2];
  v92 = v81[1];
  if (v92 >= v91)
  {
    v94 = (v92 - *v81) >> 4;
    v95 = v94 + 1;
    if ((unint64_t)(v94 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v96 = v91 - *v81;
    if (v96 >> 3 > v95)
      v95 = v96 >> 3;
    if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0)
      v97 = 0xFFFFFFFFFFFFFFFLL;
    else
      v97 = v95;
    v294[1] = v81 + 2;
    v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v81 + 2), v97);
    v100 = &v98[16 * v94];
    *(_QWORD *)v100 = v88;
    *((_QWORD *)v100 + 1) = v89;
    v275 = 0;
    v274 = 0;
    v102 = *v81;
    v101 = v81[1];
    if (v101 == *v81)
    {
      v105 = v81[1];
      v103 = &v98[16 * v94];
    }
    else
    {
      v103 = &v98[16 * v94];
      do
      {
        v104 = *((_OWORD *)v101 - 1);
        v101 -= 16;
        *((_OWORD *)v103 - 1) = v104;
        v103 -= 16;
        *(_QWORD *)v101 = 0;
        *((_QWORD *)v101 + 1) = 0;
      }
      while (v101 != v102);
      v105 = *v81;
      v101 = v81[1];
    }
    v93 = v100 + 16;
    *v81 = v103;
    v292 = (uint64_t)v105;
    v81[1] = v100 + 16;
    v293 = (uint64_t)v101;
    v106 = v81[2];
    v81[2] = &v98[16 * v99];
    v294[0] = v106;
    v291 = v105;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v291);
  }
  else
  {
    *(_QWORD *)v92 = v88;
    *((_QWORD *)v92 + 1) = v89;
    v93 = v92 + 16;
    v275 = 0;
    v274 = 0;
  }
  v81[1] = v93;
  v107 = v273;
  v273 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  v108 = v272;
  if (v272)
  {
    v109 = (unint64_t *)&v272->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (v269)
  {
    v270 = v269;
    operator delete(v269);
  }
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  if (v304)
  {
    v305 = v304;
    operator delete(v304);
  }
  *(_OWORD *)v267 = *(_OWORD *)a2;
  v268 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v111 = (uint64_t)v290;
  v265 = (uint64_t)v290;
  if (v290)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = (std::__shared_weak_count_vtbl *)v111;
  }
  else
  {
    v112 = 0;
  }
  v266 = v112;
  v290 = 0;
  v263 = v276;
  if (v276)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v276;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v264 = v113;
  v276 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v302, a3);
  }
  else
  {
    v302[0] = &unk_24BFE7440;
    v302[1] = ANEMachineIR::H2021::Validators::ValidateBasePeElementWiseBinary;
    v303 = (MIL::Validation::TensorDTypeConstraints *)v302;
  }
  v301 = 0;
  MIL::IROperator::Make();
  v115 = v301;
  if (v301 == v300)
  {
    v116 = 4;
    v115 = v300;
  }
  else
  {
    if (!v301)
      goto LABEL_129;
    v116 = 5;
  }
  (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_129:
  v117 = v303;
  if (v303 == (MIL::Validation::TensorDTypeConstraints *)v302)
  {
    v118 = 4;
    v117 = (MIL::Validation::TensorDTypeConstraints *)v302;
    goto LABEL_133;
  }
  if (v303)
  {
    v118 = 5;
LABEL_133:
    v117 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v117 + 8 * v118))();
  }
  if (v264)
  {
    v119 = &v264->__shared_owners_;
    do
      v120 = __ldaxr((unint64_t *)v119);
    while (__stlxr(v120 - 1, (unint64_t *)v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  if (v266)
  {
    v121 = &v266->__shared_owners_;
    do
      v122 = __ldaxr((unint64_t *)v121);
    while (__stlxr(v122 - 1, (unint64_t *)v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  if (SHIBYTE(v268) < 0)
    operator delete(v267[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v117);
  v123 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v259, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v261 = Scalar;
  if (Scalar)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = Scalar;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = v125;
  }
  else
  {
    v124 = 0;
  }
  v262 = v124;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v257, "XDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v123 + 24))(v123, &v261, v257);
  if (v258 < 0)
    operator delete(v257[0]);
  v126 = v262;
  if (v262)
  {
    v127 = (unint64_t *)&v262->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = Scalar;
  Scalar = 0;
  if (v129)
    (*((void (**)(std::__shared_weak_count_vtbl *))v129->~__shared_weak_count + 1))(v129);
  if (v260 < 0)
    operator delete(v259);
  v130 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v253, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v255 = Scalar;
  if (Scalar)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = Scalar;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v256 = v131;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v251, "YDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v130 + 24))(v130, &v255, v251);
  if (v252 < 0)
    operator delete(v251[0]);
  v133 = v256;
  if (v256)
  {
    v134 = (unint64_t *)&v256->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = Scalar;
  Scalar = 0;
  if (v136)
    (*((void (**)(std::__shared_weak_count_vtbl *))v136->~__shared_weak_count + 1))(v136);
  if (v254 < 0)
    operator delete(v253);
  v137 = v291;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v249 = Scalar;
  if (Scalar)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = Scalar;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v250 = v138;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v247, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v137 + 24))(v137, &v249, v247);
  if (v248 < 0)
    operator delete(v247[0]);
  v140 = v250;
  if (v250)
  {
    v141 = (unint64_t *)&v250->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = Scalar;
  Scalar = 0;
  if (v143)
    (*((void (**)(std::__shared_weak_count_vtbl *))v143->~__shared_weak_count + 1))(v143);
  v144 = *a4;
  v245 = v291;
  if (v291)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = (std::__shared_weak_count_vtbl *)v291;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v246 = v145;
  v291 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v144 + 56))(v144, &v245);
  v147 = v246;
  if (v246)
  {
    v148 = (unint64_t *)&v246->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = (MIL::Validation::TensorSymbolicShapeConstraints *)v291;
  v291 = 0;
  if (v150)
    v150 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v150 + 8))(v150);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v150);
  v151 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v241, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v243 = Scalar;
  if (Scalar)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = Scalar;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v244 = v152;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v239, "XShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v151 + 40))(v151, &v243, v239);
  if (v240 < 0)
    operator delete(v239[0]);
  v154 = v244;
  if (v244)
  {
    v155 = (unint64_t *)&v244->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = Scalar;
  Scalar = 0;
  if (v157)
    (*((void (**)(std::__shared_weak_count_vtbl *))v157->~__shared_weak_count + 1))(v157);
  if (v242 < 0)
    operator delete(v241);
  v158 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v235, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v237 = Scalar;
  if (Scalar)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = Scalar;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v238 = v159;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v233, "YShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v158 + 40))(v158, &v237, v233);
  if (v234 < 0)
    operator delete(v233[0]);
  v161 = v238;
  if (v238)
  {
    v162 = (unint64_t *)&v238->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = Scalar;
  Scalar = 0;
  if (v164)
    (*((void (**)(std::__shared_weak_count_vtbl *))v164->~__shared_weak_count + 1))(v164);
  if (v236 < 0)
    operator delete(v235);
  v165 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v229, "reduction_axes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v231 = Scalar;
  if (Scalar)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = Scalar;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v232 = v166;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v227, "NUM_REDUCTION_AXES");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v165 + 24))(v165, &v231, 0, v227);
  if (v228 < 0)
    operator delete(v227[0]);
  v168 = v232;
  if (v232)
  {
    v169 = (unint64_t *)&v232->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = Scalar;
  Scalar = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  if (v230 < 0)
    operator delete(v229);
  v172 = v291;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v225 = Scalar;
  if (Scalar)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = Scalar;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v226 = v173;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v223, "XYBroadcastReducedShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v172 + 40))(v172, &v225, v223);
  if (v224 < 0)
    operator delete(v223[0]);
  v175 = v226;
  if (v226)
  {
    v176 = (unint64_t *)&v226->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = Scalar;
  Scalar = 0;
  if (v178)
    (*((void (**)(std::__shared_weak_count_vtbl *))v178->~__shared_weak_count + 1))(v178);
  v179 = *a4;
  v221 = v291;
  if (v291)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = (std::__shared_weak_count_vtbl *)v291;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v222 = v180;
  v291 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v179 + 56))(v179, &v221);
  v182 = v222;
  if (v222)
  {
    v183 = (unint64_t *)&v222->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = (MIL::Validation::PossibleStringValuesConstraints *)v291;
  v291 = 0;
  if (v185)
    v185 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v185 + 8))(v185);
  MIL::Validation::PossibleStringValuesConstraints::Make(v185);
  v186 = v304;
  std::string::basic_string[abi:ne180100]<0>(&v217, "reduction");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v219 = __p;
  if (__p)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = (std::__shared_weak_count_vtbl *)__p;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v220 = v187;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v291, "max");
  std::string::basic_string[abi:ne180100]<0>(v294, "mean");
  std::string::basic_string[abi:ne180100]<0>(v295, "min");
  std::string::basic_string[abi:ne180100]<0>(v296, "sum");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v291, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v186->~__shared_weak_count
   + 3))(v186, &v219, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v296[i + 2]) < 0)
      operator delete((void *)v296[i]);
  }
  v190 = v220;
  if (v220)
  {
    v191 = (unint64_t *)&v220->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = __p;
  __p = 0;
  if (v193)
    (*(void (**)(void *))(*(_QWORD *)v193 + 8))(v193);
  if (v218 < 0)
    operator delete(v217);
  v194 = v304;
  std::string::basic_string[abi:ne180100]<0>(&v213, "reduction_post_processing");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v215 = __p;
  if (__p)
  {
    v195 = (std::__shared_weak_count *)operator new();
    v196 = (std::__shared_weak_count_vtbl *)__p;
    v195->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v195->__shared_owners_ = 0;
    v195->__shared_weak_owners_ = 0;
    v195[1].__vftable = v196;
  }
  else
  {
    v195 = 0;
  }
  v216 = v195;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v291, "inv");
  std::string::basic_string[abi:ne180100]<0>(v294, "linear");
  std::string::basic_string[abi:ne180100]<0>(v295, "rsqrt");
  std::string::basic_string[abi:ne180100]<0>(v296, "sqrt");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v291, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v194->~__shared_weak_count
   + 3))(v194, &v215, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v296[j + 2]) < 0)
      operator delete((void *)v296[j]);
  }
  v198 = v216;
  if (v216)
  {
    v199 = (unint64_t *)&v216->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = __p;
  __p = 0;
  if (v201)
    (*(void (**)(void *))(*(_QWORD *)v201 + 8))(v201);
  if (v214 < 0)
    operator delete(v213);
  v202 = *a4;
  v211 = v304;
  if (v304)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = v304;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v212 = v203;
  v304 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v202 + 56))(v202, &v211);
  v205 = v212;
  if (v212)
  {
    v206 = (unint64_t *)&v212->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = v304;
  v304 = 0;
  if (v208)
    (*((void (**)(std::__shared_weak_count_vtbl *))v208->~__shared_weak_count + 1))(v208);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v276, 0);
  result = (uint64_t)v290;
  if (v290)
  {
    v210 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v290);
    return MEMORY[0x20BCFF140](v210, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068C5A10(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x290], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x350], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeAdd::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeAdd;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C630C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeAddAbs::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeAddAbs;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C6424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeAddMul::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeAddMul;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeAddSquare::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeAddSquare;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C6654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeEqual::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeEqual;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C676C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeGreater::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeGreater;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C6884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeGreaterEqual::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeGreaterEqual;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeLess::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeLess;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C6AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeLessEqual::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeLessEqual;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C6BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeMaximum::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeMaximum;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C6CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeMinimum::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeMinimum;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C6DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeMul::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeMul;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C6F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeNotEqual::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeNotEqual;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C702C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::BasePeElementWiseUnary::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  unsigned __int8 *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  uint64_t v59;
  std::__shared_weak_count_vtbl *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  char *v82;
  char *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  char **v91;
  _QWORD *v92;
  uint64_t v93;
  MIL::Validation::TensorDTypeConstraints *v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  void *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  MIL::Validation::TensorSymbolicShapeConstraints *v120;
  void *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  void *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  void *v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count_vtbl *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  MIL::Validation::PossibleStringValuesConstraints *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  uint64_t i;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  uint64_t j;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  uint64_t result;
  uint64_t v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  void *v176;
  char v177;
  void *v178;
  std::__shared_weak_count *v179;
  void *v180;
  char v181;
  void *v182;
  std::__shared_weak_count *v183;
  void *v184;
  std::__shared_weak_count *v185;
  void *v186[2];
  char v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  void *v190[2];
  char v191;
  void *v192;
  char v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  void *v198;
  char v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  void *v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  char v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  void *v208[2];
  char v209;
  void *v210;
  char v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  char **v214;
  std::__shared_weak_count *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  void *v218[2];
  uint64_t v219;
  void *v220;
  void *v221;
  _QWORD *v222;
  std::__shared_weak_count *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  char **v227;
  std::__shared_weak_count *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count *v233;
  void *__p;
  void *v235;
  _QWORD *v236;
  std::__shared_weak_count *v237;
  _QWORD *v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD v242[3];
  _QWORD v243[3];
  _QWORD v244[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v246;
  uint64_t v247;
  _BYTE v248[24];
  _BYTE *v249;
  _QWORD v250[3];
  MIL::Validation::TensorDTypeConstraints *v251;
  std::__shared_weak_count_vtbl *v252;
  std::__shared_weak_count_vtbl *v253;
  void (__cdecl **v254)(std::__shared_weak_count *__hidden);
  uint64_t v255;

  v255 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v238 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v246 = (uint64_t)&v10->~__shared_weak_count_0;
  v247 = (uint64_t)&v10->~__shared_weak_count_0;
  v239 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v252 = v12;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v253 = (std::__shared_weak_count_vtbl *)&v12->~__shared_weak_count_0;
  v254 = &v12->~__shared_weak_count_0;
  v240 = MIL::IRTensorValueType::MakeWithShape();
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v236 = v14 + 1;
  v235 = v14 + 1;
  v241 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v220);
  v15 = v220;
  v220 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = v237;
  if (v237)
  {
    p_shared_owners = (unint64_t *)&v237->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v235 = __p;
    operator delete(__p);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (Scalar)
  {
    v246 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v19 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v19, "post_scale", (uint64_t *)&v239);
  v21 = v239;
  v239 = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = v233;
  if (v233)
  {
    v23 = (unint64_t *)&v233->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 48))(*((_QWORD *)v20 + 5), 1);
  v25 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v25, "reduction", (uint64_t *)&v239);
  v27 = v239;
  v239 = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = v232;
  if (v232)
  {
    v29 = (unint64_t *)&v232->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v31 = v238;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = operator new(8uLL);
  v239 = v33;
  *v33 = v32;
  v241 = (uint64_t)(v33 + 1);
  v240 = (uint64_t)(v33 + 1);
  v252 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v31, "reduction_axes", (uint64_t *)&Scalar);
  v35 = Scalar;
  Scalar = 0;
  if (v35)
    (*((void (**)(std::__shared_weak_count_vtbl *))v35->~__shared_weak_count + 1))(v35);
  v36 = v231;
  if (v231)
  {
    v37 = (unint64_t *)&v231->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v239)
  {
    v240 = (uint64_t)v239;
    operator delete(v239);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 48))(*((_QWORD *)v34 + 5), 1);
  v39 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v39, "reduction_scale", (uint64_t *)&v239);
  v41 = v239;
  v239 = 0;
  if (v41)
    (*(void (**)(void *))(*(_QWORD *)v41 + 8))(v41);
  v42 = v230;
  if (v230)
  {
    v43 = (unint64_t *)&v230->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 32))(*((_QWORD *)v40 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 48))(*((_QWORD *)v40 + 5), 1);
  v45 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v45, "reduction_epsilon", (uint64_t *)&v239);
  v47 = v239;
  v239 = 0;
  if (v47)
    (*(void (**)(void *))(*(_QWORD *)v47 + 8))(v47);
  v48 = v229;
  if (v229)
  {
    v49 = (unint64_t *)&v229->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v46 + 5) + 32))(*((_QWORD *)v46 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v46 + 5) + 48))(*((_QWORD *)v46 + 5), 1);
  v51 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[26],std::unique_ptr<MIL::IRParameter>>(v51, "reduction_post_processing", (uint64_t *)&v239);
  v53 = v239;
  v239 = 0;
  if (v53)
    (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
  v54 = v228;
  if (v228)
  {
    v55 = (unint64_t *)&v228->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v52 + 5) + 32))(*((_QWORD *)v52 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v52 + 5) + 48))(*((_QWORD *)v52 + 5), 1);
  v227 = 0;
  v57 = operator new();
  *(_QWORD *)v57 = 0;
  *(_QWORD *)(v57 + 8) = 0;
  *(_QWORD *)(v57 + 16) = 0;
  v239 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v227, (void **)v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v239, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v227, 1uLL);
  v58 = v227;
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v252 = v60;
  v60->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v59;
  v253 = (std::__shared_weak_count_vtbl *)&v60->~__shared_weak_count_0;
  v254 = &v60->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  __p = v62;
  *v62 = v61;
  v236 = v62 + 1;
  v235 = v62 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape();
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v220 = v64;
  *v64 = v63;
  v221 = v64 + 1;
  v222 = v64 + 1;
  v247 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v65 = v224;
  v225 = v224;
  if (v224)
  {
    v66 = (_QWORD *)operator new();
    v67 = v224;
    *v66 = &unk_24BFE7320;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  v226 = v66;
  v224 = 0;
  v68 = v58[2];
  v69 = v58[1];
  if (v69 >= v68)
  {
    v71 = (v69 - *v58) >> 4;
    v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v73 = v68 - *v58;
    if (v73 >> 3 > v72)
      v72 = v73 >> 3;
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
      v74 = 0xFFFFFFFFFFFFFFFLL;
    else
      v74 = v72;
    v242[1] = v58 + 2;
    v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v58 + 2), v74);
    v77 = &v75[16 * v71];
    *(_QWORD *)v77 = v65;
    *((_QWORD *)v77 + 1) = v66;
    v226 = 0;
    v225 = 0;
    v79 = *v58;
    v78 = v58[1];
    if (v78 == *v58)
    {
      v82 = v58[1];
      v80 = &v75[16 * v71];
    }
    else
    {
      v80 = &v75[16 * v71];
      do
      {
        v81 = *((_OWORD *)v78 - 1);
        v78 -= 16;
        *((_OWORD *)v80 - 1) = v81;
        v80 -= 16;
        *(_QWORD *)v78 = 0;
        *((_QWORD *)v78 + 1) = 0;
      }
      while (v78 != v79);
      v82 = *v58;
      v78 = v58[1];
    }
    v70 = v77 + 16;
    *v58 = v80;
    v240 = (uint64_t)v82;
    v58[1] = v77 + 16;
    v241 = (uint64_t)v78;
    v83 = v58[2];
    v58[2] = &v75[16 * v76];
    v242[0] = v83;
    v239 = v82;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v239);
  }
  else
  {
    *(_QWORD *)v69 = v65;
    *((_QWORD *)v69 + 1) = v66;
    v70 = v69 + 16;
    v226 = 0;
    v225 = 0;
  }
  v58[1] = v70;
  v84 = v224;
  v224 = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  v85 = v223;
  if (v223)
  {
    v86 = (unint64_t *)&v223->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (__p)
  {
    v235 = __p;
    operator delete(__p);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  *(_OWORD *)v218 = *(_OWORD *)a2;
  v219 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v88 = (uint64_t)v238;
  v216 = (uint64_t)v238;
  if (v238)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = (std::__shared_weak_count_vtbl *)v88;
  }
  else
  {
    v89 = 0;
  }
  v217 = v89;
  v238 = 0;
  v214 = v227;
  if (v227)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v227;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v91;
  }
  else
  {
    v90 = 0;
  }
  v215 = v90;
  v227 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v250, a3);
  }
  else
  {
    v250[0] = &unk_24BFE7440;
    v250[1] = ANEMachineIR::H2021::Validators::ValidateBasePeElementWiseUnary;
    v251 = (MIL::Validation::TensorDTypeConstraints *)v250;
  }
  v249 = 0;
  MIL::IROperator::Make();
  v92 = v249;
  if (v249 == v248)
  {
    v93 = 4;
    v92 = v248;
  }
  else
  {
    if (!v249)
      goto LABEL_102;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_102:
  v94 = v251;
  if (v251 == (MIL::Validation::TensorDTypeConstraints *)v250)
  {
    v95 = 4;
    v94 = (MIL::Validation::TensorDTypeConstraints *)v250;
    goto LABEL_106;
  }
  if (v251)
  {
    v95 = 5;
LABEL_106:
    v94 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v94 + 8 * v95))();
  }
  if (v215)
  {
    v96 = &v215->__shared_owners_;
    do
      v97 = __ldaxr((unint64_t *)v96);
    while (__stlxr(v97 - 1, (unint64_t *)v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  if (v217)
  {
    v98 = &v217->__shared_owners_;
    do
      v99 = __ldaxr((unint64_t *)v98);
    while (__stlxr(v99 - 1, (unint64_t *)v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  if (SHIBYTE(v219) < 0)
    operator delete(v218[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v94);
  v100 = v239;
  std::string::basic_string[abi:ne180100]<0>(&v210, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v212 = Scalar;
  if (Scalar)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = Scalar;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v213 = v101;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v208, "XDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v100 + 24))(v100, &v212, v208);
  if (v209 < 0)
    operator delete(v208[0]);
  v103 = v213;
  if (v213)
  {
    v104 = (unint64_t *)&v213->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = Scalar;
  Scalar = 0;
  if (v106)
    (*((void (**)(std::__shared_weak_count_vtbl *))v106->~__shared_weak_count + 1))(v106);
  if (v211 < 0)
    operator delete(v210);
  v107 = v239;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v206 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v207 = v108;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v204, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v107 + 24))(v107, &v206, v204);
  if (v205 < 0)
    operator delete(v204[0]);
  v110 = v207;
  if (v207)
  {
    v111 = (unint64_t *)&v207->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  v114 = *a4;
  v202 = v239;
  if (v239)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)v239;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v203 = v115;
  v239 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v114 + 56))(v114, &v202);
  v117 = v203;
  if (v203)
  {
    v118 = (unint64_t *)&v203->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = (MIL::Validation::TensorSymbolicShapeConstraints *)v239;
  v239 = 0;
  if (v120)
    v120 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v120 + 8))(v120);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v120);
  v121 = v239;
  std::string::basic_string[abi:ne180100]<0>(&v198, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v200 = Scalar;
  if (Scalar)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = Scalar;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v201 = v122;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "XShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v121 + 40))(v121, &v200, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v124 = v201;
  if (v201)
  {
    v125 = (unint64_t *)&v201->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = Scalar;
  Scalar = 0;
  if (v127)
    (*((void (**)(std::__shared_weak_count_vtbl *))v127->~__shared_weak_count + 1))(v127);
  if (v199 < 0)
    operator delete(v198);
  v128 = v239;
  std::string::basic_string[abi:ne180100]<0>(&v192, "reduction_axes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v194 = Scalar;
  if (Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v195 = v129;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v190, "NUM_REDUCTION_AXES");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v128 + 24))(v128, &v194, 0, v190);
  if (v191 < 0)
    operator delete(v190[0]);
  v131 = v195;
  if (v195)
  {
    v132 = (unint64_t *)&v195->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = Scalar;
  Scalar = 0;
  if (v134)
    (*((void (**)(std::__shared_weak_count_vtbl *))v134->~__shared_weak_count + 1))(v134);
  if (v193 < 0)
    operator delete(v192);
  v135 = v239;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v188 = Scalar;
  if (Scalar)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = Scalar;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = v137;
  }
  else
  {
    v136 = 0;
  }
  v189 = v136;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v186, "XReducedShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v135 + 40))(v135, &v188, v186);
  if (v187 < 0)
    operator delete(v186[0]);
  v138 = v189;
  if (v189)
  {
    v139 = (unint64_t *)&v189->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = Scalar;
  Scalar = 0;
  if (v141)
    (*((void (**)(std::__shared_weak_count_vtbl *))v141->~__shared_weak_count + 1))(v141);
  v142 = *a4;
  v184 = v239;
  if (v239)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = (std::__shared_weak_count_vtbl *)v239;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v185 = v143;
  v239 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v142 + 56))(v142, &v184);
  v145 = v185;
  if (v185)
  {
    v146 = (unint64_t *)&v185->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = (MIL::Validation::PossibleStringValuesConstraints *)v239;
  v239 = 0;
  if (v148)
    v148 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v148 + 8))(v148);
  MIL::Validation::PossibleStringValuesConstraints::Make(v148);
  v149 = v252;
  std::string::basic_string[abi:ne180100]<0>(&v180, "reduction");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v182 = __p;
  if (__p)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = (std::__shared_weak_count_vtbl *)__p;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v183 = v150;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v239, "max");
  std::string::basic_string[abi:ne180100]<0>(v242, "mean");
  std::string::basic_string[abi:ne180100]<0>(v243, "min");
  std::string::basic_string[abi:ne180100]<0>(v244, "sum");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v239, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v149->~__shared_weak_count
   + 3))(v149, &v182, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v244[i + 2]) < 0)
      operator delete((void *)v244[i]);
  }
  v153 = v183;
  if (v183)
  {
    v154 = (unint64_t *)&v183->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = __p;
  __p = 0;
  if (v156)
    (*(void (**)(void *))(*(_QWORD *)v156 + 8))(v156);
  if (v181 < 0)
    operator delete(v180);
  v157 = v252;
  std::string::basic_string[abi:ne180100]<0>(&v176, "reduction_post_processing");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v178 = __p;
  if (__p)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = (std::__shared_weak_count_vtbl *)__p;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v179 = v158;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v239, "inv");
  std::string::basic_string[abi:ne180100]<0>(v242, "linear");
  std::string::basic_string[abi:ne180100]<0>(v243, "rsqrt");
  std::string::basic_string[abi:ne180100]<0>(v244, "sqrt");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v239, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v157->~__shared_weak_count
   + 3))(v157, &v178, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v244[j + 2]) < 0)
      operator delete((void *)v244[j]);
  }
  v161 = v179;
  if (v179)
  {
    v162 = (unint64_t *)&v179->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = __p;
  __p = 0;
  if (v164)
    (*(void (**)(void *))(*(_QWORD *)v164 + 8))(v164);
  if (v177 < 0)
    operator delete(v176);
  v165 = *a4;
  v174 = v252;
  if (v252)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = v252;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v175 = v166;
  v252 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v165 + 56))(v165, &v174);
  v168 = v175;
  if (v175)
  {
    v169 = (unint64_t *)&v175->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = v252;
  v252 = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v227, 0);
  result = (uint64_t)v238;
  if (v238)
  {
    v173 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v238);
    return MEMORY[0x20BCFF140](v173, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068C8614(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x210], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2A0], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeAbs::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeAbs;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseUnary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C8D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeSquare::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2021::Validators::ValidatePeSquare;
  v8 = v7;
  ANEMachineIR::H2021::BasePeElementWiseUnary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068C8EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::NeActivation::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  void **v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  char **v63;
  _QWORD *v64;
  uint64_t v65;
  MIL::Validation::TensorDTypeConstraints *v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  void **v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count_vtbl *v78;
  void **v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  void **v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  MIL::Validation::TensorSymbolicShapeConstraints *v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  void **v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  void **v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void **v113;
  uint64_t result;
  uint64_t v115;
  void **v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124;
  char v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void **v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136;
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  char **v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  uint64_t v145;
  void *v146;
  void *v147;
  _QWORD *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  char **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  void *__p;
  void *v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  std::__shared_weak_count *v162;
  _QWORD *v163;
  _BYTE v164[24];
  _BYTE *v165;
  _QWORD v166[3];
  MIL::Validation::TensorDTypeConstraints *v167;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char **v175;
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v171 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v159 = v10;
  *v10 = v9;
  v160 = v10 + 1;
  v161 = v10 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v157 = v12 + 1;
  v158 = v12 + 1;
  v173 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v146);
  v13 = v146;
  v146 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v162;
  if (v162)
  {
    p_shared_owners = (unint64_t *)&v162->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v17, "post_right_shift", (uint64_t *)&v171);
  v19 = v171;
  v171 = 0;
  if (v19)
    (*((void (**)(void **))*v19 + 1))(v19);
  v20 = v155;
  if (v155)
  {
    v21 = (unint64_t *)&v155->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v163;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v23, "post_scale", (uint64_t *)&v171);
  v25 = v171;
  v171 = 0;
  if (v25)
    (*((void (**)(void **))*v25 + 1))(v25);
  v26 = v154;
  if (v154)
  {
    v27 = (unint64_t *)&v154->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 48))(*((_QWORD *)v24 + 5), 1);
  v153 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  v171 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v153, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v171, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v153, 1uLL);
  v30 = v153;
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v159 = v32;
  *v32 = v31;
  v160 = v32 + 1;
  v161 = v32 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  __p = v34;
  *v34 = v33;
  v157 = v34 + 1;
  v158 = v34 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape();
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v146 = v36;
  *v36 = v35;
  v147 = v36 + 1;
  v148 = v36 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v37 = v150;
  v151 = v150;
  if (v150)
  {
    v38 = (_QWORD *)operator new();
    v39 = v150;
    *v38 = &unk_24BFE7320;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v152 = v38;
  v150 = 0;
  v40 = v30[2];
  v41 = v30[1];
  if (v41 >= v40)
  {
    v43 = (v41 - *v30) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v45 = v40 - *v30;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v175 = v30 + 2;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v30 + 2), v46);
    v49 = &v47[16 * v43];
    *(_QWORD *)v49 = v37;
    *((_QWORD *)v49 + 1) = v38;
    v151 = 0;
    v152 = 0;
    v51 = *v30;
    v50 = v30[1];
    if (v50 == *v30)
    {
      v54 = (void **)v30[1];
      v52 = &v47[16 * v43];
    }
    else
    {
      v52 = &v47[16 * v43];
      do
      {
        v53 = *((_OWORD *)v50 - 1);
        v50 -= 16;
        *((_OWORD *)v52 - 1) = v53;
        v52 -= 16;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
      }
      while (v50 != v51);
      v54 = (void **)*v30;
      v50 = v30[1];
    }
    v42 = v49 + 16;
    *v30 = v52;
    v171 = v54;
    v172 = (uint64_t)v54;
    v30[1] = v49 + 16;
    v173 = (uint64_t)v50;
    v55 = v30[2];
    v30[2] = &v47[16 * v48];
    v174 = v55;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v171);
  }
  else
  {
    *(_QWORD *)v41 = v37;
    *((_QWORD *)v41 + 1) = v38;
    v42 = v41 + 16;
    v151 = 0;
    v152 = 0;
  }
  v30[1] = v42;
  v56 = v150;
  v150 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = v149;
  if (v149)
  {
    v58 = (unint64_t *)&v149->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  *(_OWORD *)v144 = *(_OWORD *)a2;
  v145 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v60 = (uint64_t)v163;
  v142 = (uint64_t)v163;
  if (v163)
  {
    v61 = (std::__shared_weak_count *)operator new();
    v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61[1].__vftable = (std::__shared_weak_count_vtbl *)v60;
  }
  else
  {
    v61 = 0;
  }
  v143 = v61;
  v163 = 0;
  v140 = v153;
  if (v153)
  {
    v62 = (std::__shared_weak_count *)operator new();
    v63 = v153;
    v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v62->__shared_owners_ = 0;
    v62->__shared_weak_owners_ = 0;
    v62[1].__vftable = (std::__shared_weak_count_vtbl *)v63;
  }
  else
  {
    v62 = 0;
  }
  v141 = v62;
  v153 = 0;
  v166[0] = &unk_24BFE7440;
  v166[1] = ANEMachineIR::H2021::Validators::ValidateNeActivation;
  v167 = (MIL::Validation::TensorDTypeConstraints *)v166;
  v165 = 0;
  MIL::IROperator::Make();
  v64 = v165;
  if (v165 == v164)
  {
    v65 = 4;
    v64 = v164;
  }
  else
  {
    if (!v165)
      goto LABEL_69;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_69:
  v66 = v167;
  if (v167 == (MIL::Validation::TensorDTypeConstraints *)v166)
  {
    v67 = 4;
    v66 = (MIL::Validation::TensorDTypeConstraints *)v166;
    goto LABEL_73;
  }
  if (v167)
  {
    v67 = 5;
LABEL_73:
    v66 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 8 * v67))();
  }
  if (v141)
  {
    v68 = &v141->__shared_owners_;
    do
      v69 = __ldaxr((unint64_t *)v68);
    while (__stlxr(v69 - 1, (unint64_t *)v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  if (v143)
  {
    v70 = &v143->__shared_owners_;
    do
      v71 = __ldaxr((unint64_t *)v70);
    while (__stlxr(v71 - 1, (unint64_t *)v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  if (SHIBYTE(v145) < 0)
    operator delete(v144[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v66);
  v72 = v171;
  std::string::basic_string[abi:ne180100]<0>(&v136, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v138 = Scalar;
  if (Scalar)
  {
    v73 = (std::__shared_weak_count *)operator new();
    v74 = Scalar;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = v74;
  }
  else
  {
    v73 = 0;
  }
  v139 = v73;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v72 + 3))(v72, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v75 = v139;
  if (v139)
  {
    v76 = (unint64_t *)&v139->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = Scalar;
  Scalar = 0;
  if (v78)
    (*((void (**)(std::__shared_weak_count_vtbl *))v78->~__shared_weak_count + 1))(v78);
  if (v137 < 0)
    operator delete(v136);
  v79 = v171;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v132 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v133 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v79 + 3))(v79, &v132, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v82 = v133;
  if (v133)
  {
    v83 = (unint64_t *)&v133->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  v86 = *a3;
  v128 = v171;
  if (v171)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = v171;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = (std::__shared_weak_count_vtbl *)v88;
  }
  else
  {
    v87 = 0;
  }
  v129 = v87;
  v171 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v86 + 56))(v86, &v128);
  v89 = v129;
  if (v129)
  {
    v90 = (unint64_t *)&v129->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = (MIL::Validation::TensorSymbolicShapeConstraints *)v171;
  v171 = 0;
  if (v92)
    v92 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v92 + 8))(v92);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v92);
  v93 = v171;
  std::string::basic_string[abi:ne180100]<0>(&v124, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v126 = Scalar;
  if (Scalar)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = Scalar;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v127 = v94;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v93 + 5))(v93, &v126, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v96 = v127;
  if (v127)
  {
    v97 = (unint64_t *)&v127->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = Scalar;
  Scalar = 0;
  if (v99)
    (*((void (**)(std::__shared_weak_count_vtbl *))v99->~__shared_weak_count + 1))(v99);
  if (v125 < 0)
    operator delete(v124);
  v100 = v171;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v120 = Scalar;
  if (Scalar)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = Scalar;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v121 = v101;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v118, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v100 + 5))(v100, &v120, v118);
  if (v119 < 0)
    operator delete(v118[0]);
  v103 = v121;
  if (v121)
  {
    v104 = (unint64_t *)&v121->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = Scalar;
  Scalar = 0;
  if (v106)
    (*((void (**)(std::__shared_weak_count_vtbl *))v106->~__shared_weak_count + 1))(v106);
  v107 = *a3;
  v116 = v171;
  if (v171)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = v171;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = (std::__shared_weak_count_vtbl *)v109;
  }
  else
  {
    v108 = 0;
  }
  v117 = v108;
  v171 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v107 + 56))(v107, &v116);
  v110 = v117;
  if (v117)
  {
    v111 = (unint64_t *)&v117->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v171;
  v171 = 0;
  if (v113)
    (*((void (**)(void **))*v113 + 1))(v113);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v153, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x20BCFF140](v115, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068C9C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void **a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;

  v57 = *(_QWORD *)(v55 - 112);
  *(_QWORD *)(v55 - 112) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *v54;
  *v54 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::NeAdd::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void **v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  unsigned __int8 *v65;
  void **v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  __int128 v94;
  void **v95;
  char *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  char **v104;
  _QWORD *v105;
  uint64_t v106;
  MIL::Validation::TensorDTypeConstraints *v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  void **v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count_vtbl *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void **v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  MIL::Validation::TensorSymbolicShapeConstraints *v140;
  void **v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count_vtbl *v147;
  void **v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count_vtbl *v154;
  void **v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count_vtbl *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  void **v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void **v168;
  uint64_t result;
  uint64_t v170;
  void **v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  void *v179;
  char v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  void *v183[2];
  char v184;
  void *v185;
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void **v189;
  std::__shared_weak_count *v190;
  void *v191[2];
  char v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  void *v197;
  char v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  char v202;
  void *v203;
  char v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  char **v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  uint64_t v212;
  void *v213;
  void *v214;
  _QWORD *v215;
  std::__shared_weak_count *v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  char **v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count *v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count *v228;
  void *__p;
  void *v230;
  _QWORD *v231;
  void *v232;
  void *v233;
  _QWORD *v234;
  std::__shared_weak_count *v235;
  _QWORD *v236;
  _BYTE v237[24];
  _BYTE *v238;
  _QWORD v239[3];
  MIL::Validation::TensorDTypeConstraints *v240;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v242;
  uint64_t v243;
  void **v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char **v248;
  uint64_t v249;

  v249 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v236 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v242 = (uint64_t)&v8->~__shared_weak_count_0;
  v243 = (uint64_t)&v8->~__shared_weak_count_0;
  v244 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v232 = v10;
  *v10 = v9;
  v233 = v10 + 1;
  v234 = v10 + 1;
  v245 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v231 = v12 + 1;
  v230 = v12 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v213);
  v13 = v213;
  v213 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v235;
  if (v235)
  {
    p_shared_owners = (unint64_t *)&v235->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (Scalar)
  {
    v242 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v236;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v242 = (uint64_t)&v19->~__shared_weak_count_0;
  v243 = (uint64_t)&v19->~__shared_weak_count_0;
  v244 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v232 = v21;
  *v21 = v20;
  v233 = v21 + 1;
  v234 = v21 + 1;
  v245 = MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v231 = v23 + 1;
  v230 = v23 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v213);
  v24 = v213;
  v213 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v228;
  if (v228)
  {
    v26 = (unint64_t *)&v228->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (Scalar)
  {
    v242 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v28 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v28, "x_scale", (uint64_t *)&v244);
  v30 = v244;
  v244 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = v227;
  if (v227)
  {
    v32 = (unint64_t *)&v227->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v34, "y_scale", (uint64_t *)&v244);
  v36 = v244;
  v244 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = v226;
  if (v226)
  {
    v38 = (unint64_t *)&v226->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v40 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v40, "bias", (uint64_t *)&v244);
  v42 = v244;
  v244 = 0;
  if (v42)
    (*((void (**)(void **))*v42 + 1))(v42);
  v43 = v225;
  if (v225)
  {
    v44 = (unint64_t *)&v225->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 48))(*((_QWORD *)v41 + 5), 1);
  v46 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v46, "acc_left_shift", (uint64_t *)&v244);
  v48 = v244;
  v244 = 0;
  if (v48)
    (*((void (**)(void **))*v48 + 1))(v48);
  v49 = v224;
  if (v224)
  {
    v50 = (unint64_t *)&v224->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 48))(*((_QWORD *)v47 + 5), 1);
  v52 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v52, "acc_bias_shift", (uint64_t *)&v244);
  v54 = v244;
  v244 = 0;
  if (v54)
    (*((void (**)(void **))*v54 + 1))(v54);
  v55 = v223;
  if (v223)
  {
    v56 = (unint64_t *)&v223->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v58 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v58, "post_right_shift", (uint64_t *)&v244);
  v60 = v244;
  v244 = 0;
  if (v60)
    (*((void (**)(void **))*v60 + 1))(v60);
  v61 = v222;
  if (v222)
  {
    v62 = (unint64_t *)&v222->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v64, "post_scale", (uint64_t *)&v244);
  v66 = v244;
  v244 = 0;
  if (v66)
    (*((void (**)(void **))*v66 + 1))(v66);
  v67 = v221;
  if (v221)
  {
    v68 = (unint64_t *)&v221->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v220 = 0;
  v70 = operator new();
  *(_QWORD *)v70 = 0;
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v70 + 16) = 0;
  v244 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v220, (void **)v70);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v244, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v220, 1uLL);
  v71 = v220;
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = operator new(8uLL);
  v232 = v73;
  *v73 = v72;
  v233 = v73 + 1;
  v234 = v73 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(8uLL);
  __p = v75;
  *v75 = v74;
  v231 = v75 + 1;
  v230 = v75 + 1;
  v242 = MIL::IRTensorValueType::MakeWithShape();
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = operator new(8uLL);
  v213 = v77;
  *v77 = v76;
  v214 = v77 + 1;
  v215 = v77 + 1;
  v243 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v78 = v217;
  v218 = v217;
  if (v217)
  {
    v79 = (_QWORD *)operator new();
    v80 = v217;
    *v79 = &unk_24BFE7320;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v80;
  }
  else
  {
    v79 = 0;
  }
  v219 = v79;
  v217 = 0;
  v81 = v71[2];
  v82 = v71[1];
  if (v82 >= v81)
  {
    v84 = (v82 - *v71) >> 4;
    v85 = v84 + 1;
    if ((unint64_t)(v84 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v86 = v81 - *v71;
    if (v86 >> 3 > v85)
      v85 = v86 >> 3;
    if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0)
      v87 = 0xFFFFFFFFFFFFFFFLL;
    else
      v87 = v85;
    v248 = v71 + 2;
    v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v71 + 2), v87);
    v90 = &v88[16 * v84];
    *(_QWORD *)v90 = v78;
    *((_QWORD *)v90 + 1) = v79;
    v218 = 0;
    v219 = 0;
    v92 = *v71;
    v91 = v71[1];
    if (v91 == *v71)
    {
      v95 = (void **)v71[1];
      v93 = &v88[16 * v84];
    }
    else
    {
      v93 = &v88[16 * v84];
      do
      {
        v94 = *((_OWORD *)v91 - 1);
        v91 -= 16;
        *((_OWORD *)v93 - 1) = v94;
        v93 -= 16;
        *(_QWORD *)v91 = 0;
        *((_QWORD *)v91 + 1) = 0;
      }
      while (v91 != v92);
      v95 = (void **)*v71;
      v91 = v71[1];
    }
    v83 = v90 + 16;
    *v71 = v93;
    v244 = v95;
    v245 = (uint64_t)v95;
    v71[1] = v90 + 16;
    v246 = (uint64_t)v91;
    v96 = v71[2];
    v71[2] = &v88[16 * v89];
    v247 = v96;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v244);
  }
  else
  {
    *(_QWORD *)v82 = v78;
    *((_QWORD *)v82 + 1) = v79;
    v83 = v82 + 16;
    v218 = 0;
    v219 = 0;
  }
  v71[1] = v83;
  v97 = v217;
  v217 = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = v216;
  if (v216)
  {
    v99 = (unint64_t *)&v216->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  *(_OWORD *)v211 = *(_OWORD *)a2;
  v212 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v101 = (uint64_t)v236;
  v209 = (uint64_t)v236;
  if (v236)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v102 = 0;
  }
  v210 = v102;
  v236 = 0;
  v207 = v220;
  if (v220)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = v220;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = (std::__shared_weak_count_vtbl *)v104;
  }
  else
  {
    v103 = 0;
  }
  v208 = v103;
  v220 = 0;
  v239[0] = &unk_24BFE7440;
  v239[1] = ANEMachineIR::H2021::Validators::ValidateNeAdd;
  v240 = (MIL::Validation::TensorDTypeConstraints *)v239;
  v238 = 0;
  MIL::IROperator::Make();
  v105 = v238;
  if (v238 == v237)
  {
    v106 = 4;
    v105 = v237;
  }
  else
  {
    if (!v238)
      goto LABEL_117;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_117:
  v107 = v240;
  if (v240 == (MIL::Validation::TensorDTypeConstraints *)v239)
  {
    v108 = 4;
    v107 = (MIL::Validation::TensorDTypeConstraints *)v239;
    goto LABEL_121;
  }
  if (v240)
  {
    v108 = 5;
LABEL_121:
    v107 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v107 + 8 * v108))();
  }
  if (v208)
  {
    v109 = &v208->__shared_owners_;
    do
      v110 = __ldaxr((unint64_t *)v109);
    while (__stlxr(v110 - 1, (unint64_t *)v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  if (v210)
  {
    v111 = &v210->__shared_owners_;
    do
      v112 = __ldaxr((unint64_t *)v111);
    while (__stlxr(v112 - 1, (unint64_t *)v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  if (SHIBYTE(v212) < 0)
    operator delete(v211[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v107);
  v113 = v244;
  std::string::basic_string[abi:ne180100]<0>(&v203, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v205 = Scalar;
  if (Scalar)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = Scalar;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v206 = v114;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v201, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v113 + 3))(v113, &v205, v201);
  if (v202 < 0)
    operator delete(v201[0]);
  v116 = v206;
  if (v206)
  {
    v117 = (unint64_t *)&v206->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = Scalar;
  Scalar = 0;
  if (v119)
    (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
  if (v204 < 0)
    operator delete(v203);
  v120 = v244;
  std::string::basic_string[abi:ne180100]<0>(&v197, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v199 = Scalar;
  if (Scalar)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = Scalar;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v200 = v121;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "YDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v120 + 3))(v120, &v199, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v123 = v200;
  if (v200)
  {
    v124 = (unint64_t *)&v200->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = Scalar;
  Scalar = 0;
  if (v126)
    (*((void (**)(std::__shared_weak_count_vtbl *))v126->~__shared_weak_count + 1))(v126);
  if (v198 < 0)
    operator delete(v197);
  v127 = v244;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v193 = Scalar;
  if (Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v194 = v128;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v191, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v127 + 3))(v127, &v193, v191);
  if (v192 < 0)
    operator delete(v191[0]);
  v130 = v194;
  if (v194)
  {
    v131 = (unint64_t *)&v194->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = Scalar;
  Scalar = 0;
  if (v133)
    (*((void (**)(std::__shared_weak_count_vtbl *))v133->~__shared_weak_count + 1))(v133);
  v134 = *a3;
  v189 = v244;
  if (v244)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = v244;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = (std::__shared_weak_count_vtbl *)v136;
  }
  else
  {
    v135 = 0;
  }
  v190 = v135;
  v244 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v134 + 56))(v134, &v189);
  v137 = v190;
  if (v190)
  {
    v138 = (unint64_t *)&v190->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (MIL::Validation::TensorSymbolicShapeConstraints *)v244;
  v244 = 0;
  if (v140)
    v140 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v140 + 8))(v140);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v140);
  v141 = v244;
  std::string::basic_string[abi:ne180100]<0>(&v185, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v187 = Scalar;
  if (Scalar)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = Scalar;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v188 = v142;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v183, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v141 + 5))(v141, &v187, v183);
  if (v184 < 0)
    operator delete(v183[0]);
  v144 = v188;
  if (v188)
  {
    v145 = (unint64_t *)&v188->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = Scalar;
  Scalar = 0;
  if (v147)
    (*((void (**)(std::__shared_weak_count_vtbl *))v147->~__shared_weak_count + 1))(v147);
  if (v186 < 0)
    operator delete(v185);
  v148 = v244;
  std::string::basic_string[abi:ne180100]<0>(&v179, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v181 = Scalar;
  if (Scalar)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = Scalar;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v182 = v149;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "YShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v148 + 5))(v148, &v181, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v151 = v182;
  if (v182)
  {
    v152 = (unint64_t *)&v182->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = Scalar;
  Scalar = 0;
  if (v154)
    (*((void (**)(std::__shared_weak_count_vtbl *))v154->~__shared_weak_count + 1))(v154);
  if (v180 < 0)
    operator delete(v179);
  v155 = v244;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v175 = Scalar;
  if (Scalar)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = Scalar;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v157;
  }
  else
  {
    v156 = 0;
  }
  v176 = v156;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "XYBroadcastShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v155 + 5))(v155, &v175, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v158 = v176;
  if (v176)
  {
    v159 = (unint64_t *)&v176->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = Scalar;
  Scalar = 0;
  if (v161)
    (*((void (**)(std::__shared_weak_count_vtbl *))v161->~__shared_weak_count + 1))(v161);
  v162 = *a3;
  v171 = v244;
  if (v244)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = v244;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = (std::__shared_weak_count_vtbl *)v164;
  }
  else
  {
    v163 = 0;
  }
  v172 = v163;
  v244 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v162 + 56))(v162, &v171);
  v165 = v172;
  if (v172)
  {
    v166 = (unint64_t *)&v172->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = v244;
  v244 = 0;
  if (v168)
    (*((void (**)(void **))*v168 + 1))(v168);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v220, 0);
  result = (uint64_t)v236;
  if (v236)
  {
    v170 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v236);
    return MEMORY[0x20BCFF140](v170, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068CB508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void **a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v73 = *(_QWORD *)(v71 - 112);
  *(_QWORD *)(v71 - 112) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v70;
  *v70 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::NeMaximum::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  void **v65;
  char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  char **v74;
  _QWORD *v75;
  uint64_t v76;
  MIL::Validation::TensorDTypeConstraints *v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  MIL::Validation::TensorSymbolicShapeConstraints *v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void **v138;
  uint64_t result;
  uint64_t v140;
  void **v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149;
  char v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155;
  char v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167;
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173;
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  char **v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  uint64_t v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  char **v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count *v193;
  void *__p;
  void *v195;
  _QWORD *v196;
  void *v197;
  void *v198;
  _QWORD *v199;
  std::__shared_weak_count *v200;
  _QWORD *v201;
  _BYTE v202[24];
  _BYTE *v203;
  _QWORD v204[3];
  MIL::Validation::TensorDTypeConstraints *v205;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v207;
  uint64_t v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char **v213;
  uint64_t v214;

  v214 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v201 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v207 = (uint64_t)&v8->~__shared_weak_count_0;
  v208 = (uint64_t)&v8->~__shared_weak_count_0;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v197 = v10;
  *v10 = v9;
  v198 = v10 + 1;
  v199 = v10 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v196 = v12 + 1;
  v195 = v12 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v183);
  v13 = v183;
  v183 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v200;
  if (v200)
  {
    p_shared_owners = (unint64_t *)&v200->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (Scalar)
  {
    v207 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v201;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v207 = (uint64_t)&v19->~__shared_weak_count_0;
  v208 = (uint64_t)&v19->~__shared_weak_count_0;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v197 = v21;
  *v21 = v20;
  v198 = v21 + 1;
  v199 = v21 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v196 = v23 + 1;
  v195 = v23 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v183);
  v24 = v183;
  v183 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v193;
  if (v193)
  {
    v26 = (unint64_t *)&v193->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (Scalar)
  {
    v207 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v28 = v201;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v28, "post_right_shift", (uint64_t *)&v209);
  v30 = v209;
  v209 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = v192;
  if (v192)
  {
    v32 = (unint64_t *)&v192->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v201;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v34, "post_scale", (uint64_t *)&v209);
  v36 = v209;
  v209 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = v191;
  if (v191)
  {
    v38 = (unint64_t *)&v191->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v190 = 0;
  v40 = operator new();
  *(_QWORD *)v40 = 0;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 0;
  v209 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, (void **)v40);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v209, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v190, 1uLL);
  v41 = v190;
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v197 = v43;
  *v43 = v42;
  v198 = v43 + 1;
  v199 = v43 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  __p = v45;
  *v45 = v44;
  v196 = v45 + 1;
  v195 = v45 + 1;
  v207 = MIL::IRTensorValueType::MakeWithShape();
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v183 = v47;
  *v47 = v46;
  v184 = v47 + 1;
  v185 = v47 + 1;
  v208 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v48 = v187;
  v188 = v187;
  if (v187)
  {
    v49 = (_QWORD *)operator new();
    v50 = v187;
    *v49 = &unk_24BFE7320;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  v189 = v49;
  v187 = 0;
  v51 = v41[2];
  v52 = v41[1];
  if (v52 >= v51)
  {
    v54 = (v52 - *v41) >> 4;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v56 = v51 - *v41;
    if (v56 >> 3 > v55)
      v55 = v56 >> 3;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
      v57 = 0xFFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    v213 = v41 + 2;
    v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v41 + 2), v57);
    v60 = &v58[16 * v54];
    *(_QWORD *)v60 = v48;
    *((_QWORD *)v60 + 1) = v49;
    v188 = 0;
    v189 = 0;
    v62 = *v41;
    v61 = v41[1];
    if (v61 == *v41)
    {
      v65 = (void **)v41[1];
      v63 = &v58[16 * v54];
    }
    else
    {
      v63 = &v58[16 * v54];
      do
      {
        v64 = *((_OWORD *)v61 - 1);
        v61 -= 16;
        *((_OWORD *)v63 - 1) = v64;
        v63 -= 16;
        *(_QWORD *)v61 = 0;
        *((_QWORD *)v61 + 1) = 0;
      }
      while (v61 != v62);
      v65 = (void **)*v41;
      v61 = v41[1];
    }
    v53 = v60 + 16;
    *v41 = v63;
    v209 = v65;
    v210 = (uint64_t)v65;
    v41[1] = v60 + 16;
    v211 = (uint64_t)v61;
    v66 = v41[2];
    v41[2] = &v58[16 * v59];
    v212 = v66;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v209);
  }
  else
  {
    *(_QWORD *)v52 = v48;
    *((_QWORD *)v52 + 1) = v49;
    v53 = v52 + 16;
    v188 = 0;
    v189 = 0;
  }
  v41[1] = v53;
  v67 = v187;
  v187 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = v186;
  if (v186)
  {
    v69 = (unint64_t *)&v186->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  *(_OWORD *)v181 = *(_OWORD *)a2;
  v182 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v71 = (uint64_t)v201;
  v179 = (uint64_t)v201;
  if (v201)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = (std::__shared_weak_count_vtbl *)v71;
  }
  else
  {
    v72 = 0;
  }
  v180 = v72;
  v201 = 0;
  v177 = v190;
  if (v190)
  {
    v73 = (std::__shared_weak_count *)operator new();
    v74 = v190;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = (std::__shared_weak_count_vtbl *)v74;
  }
  else
  {
    v73 = 0;
  }
  v178 = v73;
  v190 = 0;
  v204[0] = &unk_24BFE7440;
  v204[1] = ANEMachineIR::H2021::Validators::ValidateNeMaximum;
  v205 = (MIL::Validation::TensorDTypeConstraints *)v204;
  v203 = 0;
  MIL::IROperator::Make();
  v75 = v203;
  if (v203 == v202)
  {
    v76 = 4;
    v75 = v202;
  }
  else
  {
    if (!v203)
      goto LABEL_82;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_82:
  v77 = v205;
  if (v205 == (MIL::Validation::TensorDTypeConstraints *)v204)
  {
    v78 = 4;
    v77 = (MIL::Validation::TensorDTypeConstraints *)v204;
    goto LABEL_86;
  }
  if (v205)
  {
    v78 = 5;
LABEL_86:
    v77 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v77 + 8 * v78))();
  }
  if (v178)
  {
    v79 = &v178->__shared_owners_;
    do
      v80 = __ldaxr((unint64_t *)v79);
    while (__stlxr(v80 - 1, (unint64_t *)v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  if (v180)
  {
    v81 = &v180->__shared_owners_;
    do
      v82 = __ldaxr((unint64_t *)v81);
    while (__stlxr(v82 - 1, (unint64_t *)v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if (SHIBYTE(v182) < 0)
    operator delete(v181[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v77);
  v83 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v175 = Scalar;
  if (Scalar)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = Scalar;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v176 = v84;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v83 + 3))(v83, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v86 = v176;
  if (v176)
  {
    v87 = (unint64_t *)&v176->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v174 < 0)
    operator delete(v173);
  v90 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v167, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v169 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v170 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "YDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v93 = v170;
  if (v170)
  {
    v94 = (unint64_t *)&v170->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v168 < 0)
    operator delete(v167);
  v97 = v209;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v163 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v164 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v163, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v100 = v164;
  if (v164)
  {
    v101 = (unint64_t *)&v164->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = *a3;
  v159 = v209;
  if (v209)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v209;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v160 = v105;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v159);
  v107 = v160;
  if (v160)
  {
    v108 = (unint64_t *)&v160->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)v209;
  v209 = 0;
  if (v110)
    v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v110 + 8))(v110);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v110);
  v111 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v155, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v157 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v158 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 5))(v111, &v157, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v114 = v158;
  if (v158)
  {
    v115 = (unint64_t *)&v158->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v156 < 0)
    operator delete(v155);
  v118 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v149, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v151 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v152 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "YShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v118 + 5))(v118, &v151, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v121 = v152;
  if (v152)
  {
    v122 = (unint64_t *)&v152->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  if (v150 < 0)
    operator delete(v149);
  v125 = v209;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v145 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v146 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "XYBroadcastShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v125 + 5))(v125, &v145, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v128 = v146;
  if (v146)
  {
    v129 = (unint64_t *)&v146->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  v132 = *a3;
  v141 = v209;
  if (v209)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v209;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v142 = v133;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v141);
  v135 = v142;
  if (v142)
  {
    v136 = (unint64_t *)&v142->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v209;
  v209 = 0;
  if (v138)
    (*((void (**)(void **))*v138 + 1))(v138);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, 0);
  result = (uint64_t)v201;
  if (v201)
  {
    v140 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v201);
    return MEMORY[0x20BCFF140](v140, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068CCBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void **a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v73 = *(_QWORD *)(v71 - 112);
  *(_QWORD *)(v71 - 112) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v70;
  *v70 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::NeMinimum::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  void **v65;
  char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  char **v74;
  _QWORD *v75;
  uint64_t v76;
  MIL::Validation::TensorDTypeConstraints *v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  MIL::Validation::TensorSymbolicShapeConstraints *v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void **v138;
  uint64_t result;
  uint64_t v140;
  void **v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149;
  char v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155;
  char v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167;
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173;
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  char **v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  uint64_t v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  char **v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count *v193;
  void *__p;
  void *v195;
  _QWORD *v196;
  void *v197;
  void *v198;
  _QWORD *v199;
  std::__shared_weak_count *v200;
  _QWORD *v201;
  _BYTE v202[24];
  _BYTE *v203;
  _QWORD v204[3];
  MIL::Validation::TensorDTypeConstraints *v205;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v207;
  uint64_t v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char **v213;
  uint64_t v214;

  v214 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v201 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v207 = (uint64_t)&v8->~__shared_weak_count_0;
  v208 = (uint64_t)&v8->~__shared_weak_count_0;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v197 = v10;
  *v10 = v9;
  v198 = v10 + 1;
  v199 = v10 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v196 = v12 + 1;
  v195 = v12 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v183);
  v13 = v183;
  v183 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v200;
  if (v200)
  {
    p_shared_owners = (unint64_t *)&v200->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (Scalar)
  {
    v207 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v201;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v207 = (uint64_t)&v19->~__shared_weak_count_0;
  v208 = (uint64_t)&v19->~__shared_weak_count_0;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v197 = v21;
  *v21 = v20;
  v198 = v21 + 1;
  v199 = v21 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v196 = v23 + 1;
  v195 = v23 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v183);
  v24 = v183;
  v183 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v193;
  if (v193)
  {
    v26 = (unint64_t *)&v193->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (Scalar)
  {
    v207 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v28 = v201;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v28, "post_right_shift", (uint64_t *)&v209);
  v30 = v209;
  v209 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = v192;
  if (v192)
  {
    v32 = (unint64_t *)&v192->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v201;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v34, "post_scale", (uint64_t *)&v209);
  v36 = v209;
  v209 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = v191;
  if (v191)
  {
    v38 = (unint64_t *)&v191->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v190 = 0;
  v40 = operator new();
  *(_QWORD *)v40 = 0;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 0;
  v209 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, (void **)v40);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v209, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v190, 1uLL);
  v41 = v190;
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v197 = v43;
  *v43 = v42;
  v198 = v43 + 1;
  v199 = v43 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  __p = v45;
  *v45 = v44;
  v196 = v45 + 1;
  v195 = v45 + 1;
  v207 = MIL::IRTensorValueType::MakeWithShape();
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v183 = v47;
  *v47 = v46;
  v184 = v47 + 1;
  v185 = v47 + 1;
  v208 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v48 = v187;
  v188 = v187;
  if (v187)
  {
    v49 = (_QWORD *)operator new();
    v50 = v187;
    *v49 = &unk_24BFE7320;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  v189 = v49;
  v187 = 0;
  v51 = v41[2];
  v52 = v41[1];
  if (v52 >= v51)
  {
    v54 = (v52 - *v41) >> 4;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v56 = v51 - *v41;
    if (v56 >> 3 > v55)
      v55 = v56 >> 3;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
      v57 = 0xFFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    v213 = v41 + 2;
    v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v41 + 2), v57);
    v60 = &v58[16 * v54];
    *(_QWORD *)v60 = v48;
    *((_QWORD *)v60 + 1) = v49;
    v188 = 0;
    v189 = 0;
    v62 = *v41;
    v61 = v41[1];
    if (v61 == *v41)
    {
      v65 = (void **)v41[1];
      v63 = &v58[16 * v54];
    }
    else
    {
      v63 = &v58[16 * v54];
      do
      {
        v64 = *((_OWORD *)v61 - 1);
        v61 -= 16;
        *((_OWORD *)v63 - 1) = v64;
        v63 -= 16;
        *(_QWORD *)v61 = 0;
        *((_QWORD *)v61 + 1) = 0;
      }
      while (v61 != v62);
      v65 = (void **)*v41;
      v61 = v41[1];
    }
    v53 = v60 + 16;
    *v41 = v63;
    v209 = v65;
    v210 = (uint64_t)v65;
    v41[1] = v60 + 16;
    v211 = (uint64_t)v61;
    v66 = v41[2];
    v41[2] = &v58[16 * v59];
    v212 = v66;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v209);
  }
  else
  {
    *(_QWORD *)v52 = v48;
    *((_QWORD *)v52 + 1) = v49;
    v53 = v52 + 16;
    v188 = 0;
    v189 = 0;
  }
  v41[1] = v53;
  v67 = v187;
  v187 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = v186;
  if (v186)
  {
    v69 = (unint64_t *)&v186->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  *(_OWORD *)v181 = *(_OWORD *)a2;
  v182 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v71 = (uint64_t)v201;
  v179 = (uint64_t)v201;
  if (v201)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = (std::__shared_weak_count_vtbl *)v71;
  }
  else
  {
    v72 = 0;
  }
  v180 = v72;
  v201 = 0;
  v177 = v190;
  if (v190)
  {
    v73 = (std::__shared_weak_count *)operator new();
    v74 = v190;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = (std::__shared_weak_count_vtbl *)v74;
  }
  else
  {
    v73 = 0;
  }
  v178 = v73;
  v190 = 0;
  v204[0] = &unk_24BFE7440;
  v204[1] = ANEMachineIR::H2021::Validators::ValidateNeMinimum;
  v205 = (MIL::Validation::TensorDTypeConstraints *)v204;
  v203 = 0;
  MIL::IROperator::Make();
  v75 = v203;
  if (v203 == v202)
  {
    v76 = 4;
    v75 = v202;
  }
  else
  {
    if (!v203)
      goto LABEL_82;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_82:
  v77 = v205;
  if (v205 == (MIL::Validation::TensorDTypeConstraints *)v204)
  {
    v78 = 4;
    v77 = (MIL::Validation::TensorDTypeConstraints *)v204;
    goto LABEL_86;
  }
  if (v205)
  {
    v78 = 5;
LABEL_86:
    v77 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v77 + 8 * v78))();
  }
  if (v178)
  {
    v79 = &v178->__shared_owners_;
    do
      v80 = __ldaxr((unint64_t *)v79);
    while (__stlxr(v80 - 1, (unint64_t *)v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  if (v180)
  {
    v81 = &v180->__shared_owners_;
    do
      v82 = __ldaxr((unint64_t *)v81);
    while (__stlxr(v82 - 1, (unint64_t *)v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if (SHIBYTE(v182) < 0)
    operator delete(v181[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v77);
  v83 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v175 = Scalar;
  if (Scalar)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = Scalar;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v176 = v84;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v83 + 3))(v83, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v86 = v176;
  if (v176)
  {
    v87 = (unint64_t *)&v176->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v174 < 0)
    operator delete(v173);
  v90 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v167, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v169 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v170 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "YDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v93 = v170;
  if (v170)
  {
    v94 = (unint64_t *)&v170->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v168 < 0)
    operator delete(v167);
  v97 = v209;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v163 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v164 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v163, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v100 = v164;
  if (v164)
  {
    v101 = (unint64_t *)&v164->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = *a3;
  v159 = v209;
  if (v209)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v209;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v160 = v105;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v159);
  v107 = v160;
  if (v160)
  {
    v108 = (unint64_t *)&v160->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)v209;
  v209 = 0;
  if (v110)
    v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v110 + 8))(v110);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v110);
  v111 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v155, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v157 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v158 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 5))(v111, &v157, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v114 = v158;
  if (v158)
  {
    v115 = (unint64_t *)&v158->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v156 < 0)
    operator delete(v155);
  v118 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v149, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v151 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v152 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "YShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v118 + 5))(v118, &v151, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v121 = v152;
  if (v152)
  {
    v122 = (unint64_t *)&v152->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  if (v150 < 0)
    operator delete(v149);
  v125 = v209;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v145 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v146 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "XYBroadcastShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v125 + 5))(v125, &v145, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v128 = v146;
  if (v146)
  {
    v129 = (unint64_t *)&v146->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  v132 = *a3;
  v141 = v209;
  if (v209)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v209;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v142 = v133;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v141);
  v135 = v142;
  if (v142)
  {
    v136 = (unint64_t *)&v142->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v209;
  v209 = 0;
  if (v138)
    (*((void (**)(void **))*v138 + 1))(v138);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, 0);
  result = (uint64_t)v201;
  if (v201)
  {
    v140 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v201);
    return MEMORY[0x20BCFF140](v140, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068CE1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void **a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v73 = *(_QWORD *)(v71 - 112);
  *(_QWORD *)(v71 - 112) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v70;
  *v70 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::NeMul::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char **v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  __int128 v82;
  void **v83;
  char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  char **v92;
  _QWORD *v93;
  uint64_t v94;
  MIL::Validation::TensorDTypeConstraints *v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  void **v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void **v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  MIL::Validation::TensorSymbolicShapeConstraints *v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count_vtbl *v135;
  void **v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count_vtbl *v142;
  void **v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void **v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void **v156;
  uint64_t result;
  uint64_t v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167;
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173;
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void **v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  void *v183[2];
  char v184;
  void *v185;
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191;
  char v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  char **v195;
  std::__shared_weak_count *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  void *v199[2];
  uint64_t v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  char **v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count *v214;
  void *__p;
  void *v216;
  _QWORD *v217;
  void *v218;
  void *v219;
  _QWORD *v220;
  std::__shared_weak_count *v221;
  _QWORD *v222;
  _BYTE v223[24];
  _BYTE *v224;
  _QWORD v225[3];
  MIL::Validation::TensorDTypeConstraints *v226;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v228;
  uint64_t v229;
  void **v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char **v234;
  uint64_t v235;

  v235 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v222 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v228 = (uint64_t)&v8->~__shared_weak_count_0;
  v229 = (uint64_t)&v8->~__shared_weak_count_0;
  v230 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v218 = v10;
  *v10 = v9;
  v219 = v10 + 1;
  v220 = v10 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v217 = v12 + 1;
  v216 = v12 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v201);
  v13 = v201;
  v201 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v221;
  if (v221)
  {
    p_shared_owners = (unint64_t *)&v221->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (Scalar)
  {
    v228 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v222;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v228 = (uint64_t)&v19->~__shared_weak_count_0;
  v229 = (uint64_t)&v19->~__shared_weak_count_0;
  v230 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v218 = v21;
  *v21 = v20;
  v219 = v21 + 1;
  v220 = v21 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v217 = v23 + 1;
  v216 = v23 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v201);
  v24 = v201;
  v201 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v214;
  if (v214)
  {
    v26 = (unint64_t *)&v214->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (Scalar)
  {
    v228 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v28 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v28, "bias", (uint64_t *)&v230);
  v30 = v230;
  v230 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = v213;
  if (v213)
  {
    v32 = (unint64_t *)&v213->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v34, "acc_left_shift", (uint64_t *)&v230);
  v36 = v230;
  v230 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = v212;
  if (v212)
  {
    v38 = (unint64_t *)&v212->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v40 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v40, "acc_bias_shift", (uint64_t *)&v230);
  v42 = v230;
  v230 = 0;
  if (v42)
    (*((void (**)(void **))*v42 + 1))(v42);
  v43 = v211;
  if (v211)
  {
    v44 = (unint64_t *)&v211->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 48))(*((_QWORD *)v41 + 5), 1);
  v46 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v46, "post_right_shift", (uint64_t *)&v230);
  v48 = v230;
  v230 = 0;
  if (v48)
    (*((void (**)(void **))*v48 + 1))(v48);
  v49 = v210;
  if (v210)
  {
    v50 = (unint64_t *)&v210->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 48))(*((_QWORD *)v47 + 5), 1);
  v52 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v52, "post_scale", (uint64_t *)&v230);
  v54 = v230;
  v230 = 0;
  if (v54)
    (*((void (**)(void **))*v54 + 1))(v54);
  v55 = v209;
  if (v209)
  {
    v56 = (unint64_t *)&v209->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v208 = 0;
  v58 = operator new();
  *(_QWORD *)v58 = 0;
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  v230 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v208, (void **)v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v230, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v208, 1uLL);
  v59 = v208;
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  v218 = v61;
  *v61 = v60;
  v219 = v61 + 1;
  v220 = v61 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  __p = v63;
  *v63 = v62;
  v217 = v63 + 1;
  v216 = v63 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape();
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(8uLL);
  v201 = v65;
  *v65 = v64;
  v202 = v65 + 1;
  v203 = v65 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v66 = v205;
  v206 = v205;
  if (v205)
  {
    v67 = (_QWORD *)operator new();
    v68 = v205;
    *v67 = &unk_24BFE7320;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  v207 = v67;
  v205 = 0;
  v69 = v59[2];
  v70 = v59[1];
  if (v70 >= v69)
  {
    v72 = (v70 - *v59) >> 4;
    v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v74 = v69 - *v59;
    if (v74 >> 3 > v73)
      v73 = v74 >> 3;
    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
      v75 = 0xFFFFFFFFFFFFFFFLL;
    else
      v75 = v73;
    v234 = v59 + 2;
    v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v59 + 2), v75);
    v78 = &v76[16 * v72];
    *(_QWORD *)v78 = v66;
    *((_QWORD *)v78 + 1) = v67;
    v206 = 0;
    v207 = 0;
    v80 = *v59;
    v79 = v59[1];
    if (v79 == *v59)
    {
      v83 = (void **)v59[1];
      v81 = &v76[16 * v72];
    }
    else
    {
      v81 = &v76[16 * v72];
      do
      {
        v82 = *((_OWORD *)v79 - 1);
        v79 -= 16;
        *((_OWORD *)v81 - 1) = v82;
        v81 -= 16;
        *(_QWORD *)v79 = 0;
        *((_QWORD *)v79 + 1) = 0;
      }
      while (v79 != v80);
      v83 = (void **)*v59;
      v79 = v59[1];
    }
    v71 = v78 + 16;
    *v59 = v81;
    v230 = v83;
    v231 = (uint64_t)v83;
    v59[1] = v78 + 16;
    v232 = (uint64_t)v79;
    v84 = v59[2];
    v59[2] = &v76[16 * v77];
    v233 = v84;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v230);
  }
  else
  {
    *(_QWORD *)v70 = v66;
    *((_QWORD *)v70 + 1) = v67;
    v71 = v70 + 16;
    v206 = 0;
    v207 = 0;
  }
  v59[1] = v71;
  v85 = v205;
  v205 = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = v204;
  if (v204)
  {
    v87 = (unint64_t *)&v204->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  *(_OWORD *)v199 = *(_OWORD *)a2;
  v200 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v89 = (uint64_t)v222;
  v197 = (uint64_t)v222;
  if (v222)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v90 = 0;
  }
  v198 = v90;
  v222 = 0;
  v195 = v208;
  if (v208)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v208;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v196 = v91;
  v208 = 0;
  v225[0] = &unk_24BFE7440;
  v225[1] = ANEMachineIR::H2021::Validators::ValidateNeMul;
  v226 = (MIL::Validation::TensorDTypeConstraints *)v225;
  v224 = 0;
  MIL::IROperator::Make();
  v93 = v224;
  if (v224 == v223)
  {
    v94 = 4;
    v93 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_103;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_103:
  v95 = v226;
  if (v226 == (MIL::Validation::TensorDTypeConstraints *)v225)
  {
    v96 = 4;
    v95 = (MIL::Validation::TensorDTypeConstraints *)v225;
    goto LABEL_107;
  }
  if (v226)
  {
    v96 = 5;
LABEL_107:
    v95 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v95 + 8 * v96))();
  }
  if (v196)
  {
    v97 = &v196->__shared_owners_;
    do
      v98 = __ldaxr((unint64_t *)v97);
    while (__stlxr(v98 - 1, (unint64_t *)v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  if (v198)
  {
    v99 = &v198->__shared_owners_;
    do
      v100 = __ldaxr((unint64_t *)v99);
    while (__stlxr(v100 - 1, (unint64_t *)v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  if (SHIBYTE(v200) < 0)
    operator delete(v199[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v95);
  v101 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v191, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v193 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v194 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v101 + 3))(v101, &v193, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v104 = v194;
  if (v194)
  {
    v105 = (unint64_t *)&v194->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v192 < 0)
    operator delete(v191);
  v108 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v185, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v187 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v188 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v183, "YDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v108 + 3))(v108, &v187, v183);
  if (v184 < 0)
    operator delete(v183[0]);
  v111 = v188;
  if (v188)
  {
    v112 = (unint64_t *)&v188->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v186 < 0)
    operator delete(v185);
  v115 = v230;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v181 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v182 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v115 + 3))(v115, &v181, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v118 = v182;
  if (v182)
  {
    v119 = (unint64_t *)&v182->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  v122 = *a3;
  v177 = v230;
  if (v230)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v230;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
  }
  else
  {
    v123 = 0;
  }
  v178 = v123;
  v230 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v122 + 56))(v122, &v177);
  v125 = v178;
  if (v178)
  {
    v126 = (unint64_t *)&v178->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (MIL::Validation::TensorSymbolicShapeConstraints *)v230;
  v230 = 0;
  if (v128)
    v128 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v128 + 8))(v128);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v128);
  v129 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v175 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v176 = v130;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v129 + 5))(v129, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v132 = v176;
  if (v176)
  {
    v133 = (unint64_t *)&v176->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*((void (**)(std::__shared_weak_count_vtbl *))v135->~__shared_weak_count + 1))(v135);
  if (v174 < 0)
    operator delete(v173);
  v136 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v167, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v169 = Scalar;
  if (Scalar)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = Scalar;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v170 = v137;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "YShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v136 + 5))(v136, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v139 = v170;
  if (v170)
  {
    v140 = (unint64_t *)&v170->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = Scalar;
  Scalar = 0;
  if (v142)
    (*((void (**)(std::__shared_weak_count_vtbl *))v142->~__shared_weak_count + 1))(v142);
  if (v168 < 0)
    operator delete(v167);
  v143 = v230;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v163 = Scalar;
  if (Scalar)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = Scalar;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v164 = v144;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "XYBroadcastShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v143 + 5))(v143, &v163, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v146 = v164;
  if (v164)
  {
    v147 = (unint64_t *)&v164->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*((void (**)(std::__shared_weak_count_vtbl *))v149->~__shared_weak_count + 1))(v149);
  v150 = *a3;
  v159 = v230;
  if (v230)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = v230;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = (std::__shared_weak_count_vtbl *)v152;
  }
  else
  {
    v151 = 0;
  }
  v160 = v151;
  v230 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v150 + 56))(v150, &v159);
  v153 = v160;
  if (v160)
  {
    v154 = (unint64_t *)&v160->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = v230;
  v230 = 0;
  if (v156)
    (*((void (**)(void **))*v156 + 1))(v156);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v208, 0);
  result = (uint64_t)v222;
  if (v222)
  {
    v158 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v222);
    return MEMORY[0x20BCFF140](v158, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068CF9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void **a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v73 = *(_QWORD *)(v71 - 112);
  *(_QWORD *)(v71 - 112) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v70;
  *v70 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::NeSquare::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void **v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  void **v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void **v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  void **v72;
  char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  char **v81;
  _QWORD *v82;
  uint64_t v83;
  MIL::Validation::TensorDTypeConstraints *v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  MIL::Validation::TensorSymbolicShapeConstraints *v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  void **v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void **v131;
  uint64_t result;
  uint64_t v133;
  void **v134;
  std::__shared_weak_count *v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void **v146;
  std::__shared_weak_count *v147;
  void *v148[2];
  char v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  void *v154;
  char v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  char **v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  uint64_t v163;
  void *v164;
  void *v165;
  _QWORD *v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  char **v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count *v176;
  void *__p;
  void *v178;
  _QWORD *v179;
  void *v180;
  void *v181;
  _QWORD *v182;
  std::__shared_weak_count *v183;
  _QWORD *v184;
  _BYTE v185[24];
  _BYTE *v186;
  _QWORD v187[3];
  MIL::Validation::TensorDTypeConstraints *v188;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v190;
  uint64_t v191;
  void **v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char **v196;
  uint64_t v197;

  v197 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v184 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v190 = (uint64_t)&v8->~__shared_weak_count_0;
  v191 = (uint64_t)&v8->~__shared_weak_count_0;
  v192 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v180 = v10;
  *v10 = v9;
  v181 = v10 + 1;
  v182 = v10 + 1;
  v193 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v178 = v12 + 1;
  v179 = v12 + 1;
  v194 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v164);
  v13 = v164;
  v164 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v183;
  if (v183)
  {
    p_shared_owners = (unint64_t *)&v183->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (Scalar)
  {
    v190 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "bias", (uint64_t *)&v192);
  v19 = v192;
  v192 = 0;
  if (v19)
    (*((void (**)(void **))*v19 + 1))(v19);
  v20 = v176;
  if (v176)
  {
    v21 = (unint64_t *)&v176->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v23, "acc_left_shift", (uint64_t *)&v192);
  v25 = v192;
  v192 = 0;
  if (v25)
    (*((void (**)(void **))*v25 + 1))(v25);
  v26 = v175;
  if (v175)
  {
    v27 = (unint64_t *)&v175->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 48))(*((_QWORD *)v24 + 5), 1);
  v29 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v29, "acc_bias_shift", (uint64_t *)&v192);
  v31 = v192;
  v192 = 0;
  if (v31)
    (*((void (**)(void **))*v31 + 1))(v31);
  v32 = v174;
  if (v174)
  {
    v33 = (unint64_t *)&v174->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 48))(*((_QWORD *)v30 + 5), 1);
  v35 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v35, "post_right_shift", (uint64_t *)&v192);
  v37 = v192;
  v192 = 0;
  if (v37)
    (*((void (**)(void **))*v37 + 1))(v37);
  v38 = v173;
  if (v173)
  {
    v39 = (unint64_t *)&v173->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 48))(*((_QWORD *)v36 + 5), 1);
  v41 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v41, "post_scale", (uint64_t *)&v192);
  v43 = v192;
  v192 = 0;
  if (v43)
    (*((void (**)(void **))*v43 + 1))(v43);
  v44 = v172;
  if (v172)
  {
    v45 = (unint64_t *)&v172->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v171 = 0;
  v47 = operator new();
  *(_QWORD *)v47 = 0;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  v192 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v171, (void **)v47);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v192, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v171, 1uLL);
  v48 = v171;
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v180 = v50;
  *v50 = v49;
  v181 = v50 + 1;
  v182 = v50 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  __p = v52;
  *v52 = v51;
  v178 = v52 + 1;
  v179 = v52 + 1;
  v190 = MIL::IRTensorValueType::MakeWithShape();
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v164 = v54;
  *v54 = v53;
  v165 = v54 + 1;
  v166 = v54 + 1;
  v191 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v55 = v168;
  v169 = v168;
  if (v168)
  {
    v56 = (_QWORD *)operator new();
    v57 = v168;
    *v56 = &unk_24BFE7320;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  v170 = v56;
  v168 = 0;
  v58 = v48[2];
  v59 = v48[1];
  if (v59 >= v58)
  {
    v61 = (v59 - *v48) >> 4;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v63 = v58 - *v48;
    if (v63 >> 3 > v62)
      v62 = v63 >> 3;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
      v64 = 0xFFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    v196 = v48 + 2;
    v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v48 + 2), v64);
    v67 = &v65[16 * v61];
    *(_QWORD *)v67 = v55;
    *((_QWORD *)v67 + 1) = v56;
    v169 = 0;
    v170 = 0;
    v69 = *v48;
    v68 = v48[1];
    if (v68 == *v48)
    {
      v72 = (void **)v48[1];
      v70 = &v65[16 * v61];
    }
    else
    {
      v70 = &v65[16 * v61];
      do
      {
        v71 = *((_OWORD *)v68 - 1);
        v68 -= 16;
        *((_OWORD *)v70 - 1) = v71;
        v70 -= 16;
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
      }
      while (v68 != v69);
      v72 = (void **)*v48;
      v68 = v48[1];
    }
    v60 = v67 + 16;
    *v48 = v70;
    v192 = v72;
    v193 = (uint64_t)v72;
    v48[1] = v67 + 16;
    v194 = (uint64_t)v68;
    v73 = v48[2];
    v48[2] = &v65[16 * v66];
    v195 = v73;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v192);
  }
  else
  {
    *(_QWORD *)v59 = v55;
    *((_QWORD *)v59 + 1) = v56;
    v60 = v59 + 16;
    v169 = 0;
    v170 = 0;
  }
  v48[1] = v60;
  v74 = v168;
  v168 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = v167;
  if (v167)
  {
    v76 = (unint64_t *)&v167->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  *(_OWORD *)v162 = *(_OWORD *)a2;
  v163 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v78 = (uint64_t)v184;
  v160 = (uint64_t)v184;
  if (v184)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = (std::__shared_weak_count_vtbl *)v78;
  }
  else
  {
    v79 = 0;
  }
  v161 = v79;
  v184 = 0;
  v158 = v171;
  if (v171)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = v171;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = (std::__shared_weak_count_vtbl *)v81;
  }
  else
  {
    v80 = 0;
  }
  v159 = v80;
  v171 = 0;
  v187[0] = &unk_24BFE7440;
  v187[1] = ANEMachineIR::H2021::Validators::ValidateNeSquare;
  v188 = (MIL::Validation::TensorDTypeConstraints *)v187;
  v186 = 0;
  MIL::IROperator::Make();
  v82 = v186;
  if (v186 == v185)
  {
    v83 = 4;
    v82 = v185;
  }
  else
  {
    if (!v186)
      goto LABEL_90;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_90:
  v84 = v188;
  if (v188 == (MIL::Validation::TensorDTypeConstraints *)v187)
  {
    v85 = 4;
    v84 = (MIL::Validation::TensorDTypeConstraints *)v187;
    goto LABEL_94;
  }
  if (v188)
  {
    v85 = 5;
LABEL_94:
    v84 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v84 + 8 * v85))();
  }
  if (v159)
  {
    v86 = &v159->__shared_owners_;
    do
      v87 = __ldaxr((unint64_t *)v86);
    while (__stlxr(v87 - 1, (unint64_t *)v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  if (v161)
  {
    v88 = &v161->__shared_owners_;
    do
      v89 = __ldaxr((unint64_t *)v88);
    while (__stlxr(v89 - 1, (unint64_t *)v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  if (SHIBYTE(v163) < 0)
    operator delete(v162[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v84);
  v90 = v192;
  std::string::basic_string[abi:ne180100]<0>(&v154, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v156 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v157 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v156, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v93 = v157;
  if (v157)
  {
    v94 = (unint64_t *)&v157->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v155 < 0)
    operator delete(v154);
  v97 = v192;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v150 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v151 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v148, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v150, v148);
  if (v149 < 0)
    operator delete(v148[0]);
  v100 = v151;
  if (v151)
  {
    v101 = (unint64_t *)&v151->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = *a3;
  v146 = v192;
  if (v192)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v192;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v147 = v105;
  v192 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v146);
  v107 = v147;
  if (v147)
  {
    v108 = (unint64_t *)&v147->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)v192;
  v192 = 0;
  if (v110)
    v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v110 + 8))(v110);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v110);
  v111 = v192;
  std::string::basic_string[abi:ne180100]<0>(&v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v144 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v145 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 5))(v111, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v114 = v145;
  if (v145)
  {
    v115 = (unint64_t *)&v145->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v143 < 0)
    operator delete(v142);
  v118 = v192;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v138 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v139 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v136, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v118 + 5))(v118, &v138, v136);
  if (v137 < 0)
    operator delete(v136[0]);
  v121 = v139;
  if (v139)
  {
    v122 = (unint64_t *)&v139->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  v125 = *a3;
  v134 = v192;
  if (v192)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = v192;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = (std::__shared_weak_count_vtbl *)v127;
  }
  else
  {
    v126 = 0;
  }
  v135 = v126;
  v192 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v125 + 56))(v125, &v134);
  v128 = v135;
  if (v135)
  {
    v129 = (unint64_t *)&v135->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v192;
  v192 = 0;
  if (v131)
    (*((void (**)(void **))*v131 + 1))(v131);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v171, 0);
  result = (uint64_t)v184;
  if (v184)
  {
    v133 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v184);
    return MEMORY[0x20BCFF140](v133, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068D0F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void **a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;

  v57 = *(_QWORD *)(v55 - 112);
  *(_QWORD *)(v55 - 112) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *v54;
  *v54 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NeActivation::Make()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  OUTLINED_FUNCTION_2_1();
  if (v2)
  {
    v3 = 4;
    goto LABEL_5;
  }
  if (v1)
  {
    OUTLINED_FUNCTION_5();
LABEL_5:
    OUTLINED_FUNCTION_0_0(v0, v3);
  }
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_0();
}

void ANEMachineIR::H2022::Validators::ValidateReshape(MIL::IROperation *this@<X0>, uint64_t a2@<X8>)
{
  ANEMachineIR::Validators::ValidateReshape(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidateTranspose(MIL::IROperation *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateTranspose(this, a2);
}

void ANEMachineIR::H2020::Opsets::aneflowh2020Opset::Register(ANEMachineIR::H2020::Opsets::aneflowh2020Opset *this, MIL::MILContext *a2)
{
  ANEMachineIR::H2020::Opsets::aneflowh2020Opset *v3;
  ANEMachineIR::H2020::Opsets::aneflowh2020Opset *v4;
  ANEMachineIR::H2020::Opsets::aneflowh2020Opset *v5;
  void *__p[2];
  char v7;

  v7 = 12;
  strcpy((char *)__p, "aneflowh2020");
  v3 = (ANEMachineIR::H2020::Opsets::aneflowh2020Opset *)operator new();
  ANEMachineIR::H2020::Opsets::aneflowh2020Opset::aneflowh2020Opset(v3, this);
  v5 = v3;
  (*(void (**)(ANEMachineIR::H2020::Opsets::aneflowh2020Opset *, void **, ANEMachineIR::H2020::Opsets::aneflowh2020Opset **))(*(_QWORD *)this + 32))(this, __p, &v5);
  v4 = v5;
  v5 = 0;
  if (v4)
    (*(void (**)(ANEMachineIR::H2020::Opsets::aneflowh2020Opset *))(*(_QWORD *)v4 + 8))(v4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_2068D14B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MIL::IROpset *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18;

  v18 = a11;
  a11 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  std::unique_ptr<ANEMachineIR::H2021::Opsets::aneflowh2021Opset>::reset[abi:ne180100](&a10, 0);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const char *ANEMachineIR::H2020::Opsets::aneflowh2020Opset::GetOpsetName(ANEMachineIR::H2020::Opsets::aneflowh2020Opset *this)
{
  return "aneflowh2020";
}

ANEMachineIR::H2020::Opsets::aneflowh2020Opset *ANEMachineIR::H2020::Opsets::aneflowh2020Opset::aneflowh2020Opset(ANEMachineIR::H2020::Opsets::aneflowh2020Opset *this, MIL::MILContext *a2)
{
  _BYTE v4[40];

  ANEMachineIR::H2020::Opsets::aneflowh2020Opset::GetOps(a2, (uint64_t)v4);
  MIL::IROpset::IROpset();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v4);
  *(_QWORD *)this = &off_24BFEAFF8;
  return this;
}

void sub_2068D1580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Opsets::aneflowh2020Opset::GetOps(ANEMachineIR::H2020::Opsets::aneflowh2020Opset *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  void *v80[2];
  char v81;
  void *v82[2];
  char v83;
  void *v84[2];
  char v85;
  void *v86[2];
  char v87;
  void *v88[2];
  char v89;
  void *v90[2];
  char v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  void *v96[2];
  char v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104[2];
  char v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110[2];
  char v111;
  void *v112[2];
  char v113;
  void *__p[2];
  char v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  void *v120[2];
  char v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  uint64_t v134;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v132, "base_ne_matmul");
  ANEMachineIR::H2020::BaseNeMatmul::Make(this, (uint64_t)v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "base_ne_matmul", &v134);
  v5 = v134;
  v134 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v133 < 0)
    operator delete(v132[0]);
  std::string::basic_string[abi:ne180100]<0>(v130, "const");
  ANEMachineIR::H2020::Const::Make((uint64_t)this, (uint64_t)v130);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "const", &v134);
  v6 = v134;
  v134 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v131 < 0)
    operator delete(v130[0]);
  std::string::basic_string[abi:ne180100]<0>(v128, "linear");
  ANEMachineIR::H2020::Linear::Make(this, (uint64_t)v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "linear", &v134);
  v7 = v134;
  v134 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v129 < 0)
    operator delete(v128[0]);
  std::string::basic_string[abi:ne180100]<0>(v126, "lrelu");
  ANEMachineIR::H2020::Lrelu::Make(this, (uint64_t)v126);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "lrelu", &v134);
  v8 = v134;
  v134 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v127 < 0)
    operator delete(v126[0]);
  std::string::basic_string[abi:ne180100]<0>(v124, "ne_activation");
  ANEMachineIR::H2020::NeActivation::Make(this, (uint64_t)v124, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_activation", &v134);
  v9 = v134;
  v134 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v125 < 0)
    operator delete(v124[0]);
  std::string::basic_string[abi:ne180100]<0>(v122, "ne_add");
  ANEMachineIR::H2020::NeAdd::Make(this, (uint64_t)v122, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_add", &v134);
  v10 = v134;
  v134 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v123 < 0)
    operator delete(v122[0]);
  std::string::basic_string[abi:ne180100]<0>(v120, "ne_avg_pool");
  ANEMachineIR::H2020::NeAvgPool::Make(this, (uint64_t)v120, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_avg_pool", &v134);
  v11 = v134;
  v134 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v121 < 0)
    operator delete(v120[0]);
  std::string::basic_string[abi:ne180100]<0>(v118, "ne_batch_matmul");
  ANEMachineIR::H2020::NeBatchMatmul::Make(this, (uint64_t)v118, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_batch_matmul", &v134);
  v12 = v134;
  v134 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v119 < 0)
    operator delete(v118[0]);
  std::string::basic_string[abi:ne180100]<0>(v116, "ne_conv");
  ANEMachineIR::H2020::NeConv::Make(this, (uint64_t)v116, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_conv", &v134);
  v13 = v134;
  v134 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v117 < 0)
    operator delete(v116[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ne_matmul");
  ANEMachineIR::H2020::NeMatmul::Make(this, (uint64_t)__p, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_matmul", &v134);
  v14 = v134;
  v134 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v115 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v112, "ne_max_pool");
  ANEMachineIR::H2020::NeMaxPool::Make(this, (uint64_t)v112, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_max_pool", &v134);
  v15 = v134;
  v134 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v113 < 0)
    operator delete(v112[0]);
  std::string::basic_string[abi:ne180100]<0>(v110, "ne_maximum");
  ANEMachineIR::H2020::NeMaximum::Make(this, (uint64_t)v110, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_maximum", &v134);
  v16 = v134;
  v134 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v111 < 0)
    operator delete(v110[0]);
  std::string::basic_string[abi:ne180100]<0>(v108, "ne_min_pool");
  ANEMachineIR::H2020::NeMinPool::Make(this, (uint64_t)v108, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_min_pool", &v134);
  v17 = v134;
  v134 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (v109 < 0)
    operator delete(v108[0]);
  std::string::basic_string[abi:ne180100]<0>(v106, "ne_minimum");
  ANEMachineIR::H2020::NeMinimum::Make(this, (uint64_t)v106, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_minimum", &v134);
  v18 = v134;
  v134 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v107 < 0)
    operator delete(v106[0]);
  std::string::basic_string[abi:ne180100]<0>(v104, "ne_mul");
  ANEMachineIR::H2020::NeMul::Make(this, (uint64_t)v104, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_mul", &v134);
  v19 = v134;
  v134 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (v105 < 0)
    operator delete(v104[0]);
  std::string::basic_string[abi:ne180100]<0>(v102, "ne_piecewise_v2");
  ANEMachineIR::H2020::NePiecewiseV2::Make(this, (uint64_t)v102, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_piecewise_v2", &v134);
  v20 = v134;
  v134 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (v103 < 0)
    operator delete(v102[0]);
  std::string::basic_string[abi:ne180100]<0>(v100, "ne_reduce");
  ANEMachineIR::H2020::NeReduce::Make(this, (uint64_t)v100, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_reduce", &v134);
  v21 = v134;
  v134 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (v101 < 0)
    operator delete(v100[0]);
  std::string::basic_string[abi:ne180100]<0>(v98, "ne_square");
  ANEMachineIR::H2020::NeSquare::Make(this, (uint64_t)v98, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "ne_square", &v134);
  v22 = v134;
  v134 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (v99 < 0)
    operator delete(v98[0]);
  std::string::basic_string[abi:ne180100]<0>(v96, "pe_abs");
  ANEMachineIR::H2020::PeAbs::Make(this, (uint64_t)v96, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_abs", &v134);
  v23 = v134;
  v134 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (v97 < 0)
    operator delete(v96[0]);
  std::string::basic_string[abi:ne180100]<0>(v94, "pe_add");
  ANEMachineIR::H2020::PeAdd::Make(this, (uint64_t)v94, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_add", &v134);
  v24 = v134;
  v134 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (v95 < 0)
    operator delete(v94[0]);
  std::string::basic_string[abi:ne180100]<0>(v92, "pe_add_abs");
  ANEMachineIR::H2020::PeAddAbs::Make(this, (uint64_t)v92, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_add_abs", &v134);
  v25 = v134;
  v134 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (v93 < 0)
    operator delete(v92[0]);
  std::string::basic_string[abi:ne180100]<0>(v90, "pe_add_mul");
  ANEMachineIR::H2020::PeAddMul::Make(this, (uint64_t)v90, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_add_mul", &v134);
  v26 = v134;
  v134 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (v91 < 0)
    operator delete(v90[0]);
  std::string::basic_string[abi:ne180100]<0>(v88, "pe_add_square");
  ANEMachineIR::H2020::PeAddSquare::Make(this, (uint64_t)v88, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_add_square", &v134);
  v27 = v134;
  v134 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (v89 < 0)
    operator delete(v88[0]);
  std::string::basic_string[abi:ne180100]<0>(v86, "pe_avg_pool");
  ANEMachineIR::H2020::PeAvgPool::Make(this, (uint64_t)v86, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_avg_pool", &v134);
  v28 = v134;
  v134 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (v87 < 0)
    operator delete(v86[0]);
  std::string::basic_string[abi:ne180100]<0>(v84, "pe_equal");
  ANEMachineIR::H2020::PeEqual::Make(this, (uint64_t)v84, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_equal", &v134);
  v29 = v134;
  v134 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (v85 < 0)
    operator delete(v84[0]);
  std::string::basic_string[abi:ne180100]<0>(v82, "pe_greater");
  ANEMachineIR::H2020::PeGreater::Make(this, (uint64_t)v82, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_greater", &v134);
  v30 = v134;
  v134 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (v83 < 0)
    operator delete(v82[0]);
  std::string::basic_string[abi:ne180100]<0>(v80, "pe_greater_equal");
  ANEMachineIR::H2020::PeGreaterEqual::Make(this, (uint64_t)v80, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_greater_equal", &v134);
  v31 = v134;
  v134 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  if (v81 < 0)
    operator delete(v80[0]);
  std::string::basic_string[abi:ne180100]<0>(v78, "pe_less");
  ANEMachineIR::H2020::PeLess::Make(this, (uint64_t)v78, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_less", &v134);
  v32 = v134;
  v134 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  if (v79 < 0)
    operator delete(v78[0]);
  std::string::basic_string[abi:ne180100]<0>(v76, "pe_less_equal");
  ANEMachineIR::H2020::PeLessEqual::Make(this, (uint64_t)v76, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_less_equal", &v134);
  v33 = v134;
  v134 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  if (v77 < 0)
    operator delete(v76[0]);
  std::string::basic_string[abi:ne180100]<0>(v74, "pe_max_pool");
  ANEMachineIR::H2020::PeMaxPool::Make(this, (uint64_t)v74, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_max_pool", &v134);
  v34 = v134;
  v134 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if (v75 < 0)
    operator delete(v74[0]);
  std::string::basic_string[abi:ne180100]<0>(v72, "pe_maximum");
  ANEMachineIR::H2020::PeMaximum::Make(this, (uint64_t)v72, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_maximum", &v134);
  v35 = v134;
  v134 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (v73 < 0)
    operator delete(v72[0]);
  std::string::basic_string[abi:ne180100]<0>(v70, "pe_min_pool");
  ANEMachineIR::H2020::PeMinPool::Make(this, (uint64_t)v70, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_min_pool", &v134);
  v36 = v134;
  v134 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  if (v71 < 0)
    operator delete(v70[0]);
  std::string::basic_string[abi:ne180100]<0>(v68, "pe_minimum");
  ANEMachineIR::H2020::PeMinimum::Make(this, (uint64_t)v68, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_minimum", &v134);
  v37 = v134;
  v134 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (v69 < 0)
    operator delete(v68[0]);
  std::string::basic_string[abi:ne180100]<0>(v66, "pe_mul");
  ANEMachineIR::H2020::PeMul::Make(this, (uint64_t)v66, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_mul", &v134);
  v38 = v134;
  v134 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (v67 < 0)
    operator delete(v66[0]);
  std::string::basic_string[abi:ne180100]<0>(v64, "pe_not_equal");
  ANEMachineIR::H2020::PeNotEqual::Make(this, (uint64_t)v64, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_not_equal", &v134);
  v39 = v134;
  v134 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (v65 < 0)
    operator delete(v64[0]);
  std::string::basic_string[abi:ne180100]<0>(v62, "pe_reduce");
  ANEMachineIR::H2020::PeReduce::Make(this, (uint64_t)v62, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_reduce", &v134);
  v40 = v134;
  v134 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  if (v63 < 0)
    operator delete(v62[0]);
  std::string::basic_string[abi:ne180100]<0>(v60, "pe_square");
  ANEMachineIR::H2020::PeSquare::Make(this, (uint64_t)v60, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "pe_square", &v134);
  v41 = v134;
  v134 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  if (v61 < 0)
    operator delete(v60[0]);
  std::string::basic_string[abi:ne180100]<0>(v58, "relu");
  ANEMachineIR::H2020::Relu::Make(this, (uint64_t)v58);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "relu", &v134);
  v42 = v134;
  v134 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  if (v59 < 0)
    operator delete(v58[0]);
  std::string::basic_string[abi:ne180100]<0>(v56, "reshape");
  ANEMachineIR::H2020::Reshape::Make(this, (uint64_t)v56, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "reshape", &v134);
  v43 = v134;
  v134 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  if (v57 < 0)
    operator delete(v56[0]);
  std::string::basic_string[abi:ne180100]<0>(v54, "sigmoid");
  ANEMachineIR::H2020::Sigmoid::Make(this, (uint64_t)v54);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "sigmoid", &v134);
  v44 = v134;
  v134 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  if (v55 < 0)
    operator delete(v54[0]);
  std::string::basic_string[abi:ne180100]<0>(v52, "sqrt");
  ANEMachineIR::H2020::Sqrt::Make(this, (uint64_t)v52);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "sqrt", &v134);
  v45 = v134;
  v134 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  if (v53 < 0)
    operator delete(v52[0]);
  std::string::basic_string[abi:ne180100]<0>(v50, "tanh");
  ANEMachineIR::H2020::Tanh::Make(this, (uint64_t)v50);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "tanh", &v134);
  v46 = v134;
  v134 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v48, "transpose");
  ANEMachineIR::H2020::Transpose::Make(this, (uint64_t)v48, &v134);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>((_QWORD *)a2, "transpose", &v134);
  v47 = v134;
  v134 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  if (v49 < 0)
    operator delete(v48[0]);
}

void sub_2068D2548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(_QWORD *)(v15 - 40);
  *(_QWORD *)(v15 - 40) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a14 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v14);
  _Unwind_Resume(a1);
}

const char *ANEMachineIR::H2020::Opsets::aneflowh2020Opset::GetName(ANEMachineIR::H2020::Opsets::aneflowh2020Opset *this)
{
  return "aneflowh2020";
}

void ANEMachineIR::H2020::Opsets::aneflowh2020Opset::~aneflowh2020Opset(ANEMachineIR::H2020::Opsets::aneflowh2020Opset *this)
{
  MIL::IROpset::~IROpset(this);
  JUMPOUT(0x20BCFF140);
}

uint64_t ANEMachineIR::H2022::BasePeElementWiseBinary::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  unsigned __int8 *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  unsigned __int8 *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  unsigned __int8 *v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  char **v81;
  uint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  __int128 v104;
  char *v105;
  char *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  char **v114;
  _QWORD *v115;
  uint64_t v116;
  MIL::Validation::TensorDTypeConstraints *v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  void *v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count_vtbl *v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  void *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  MIL::Validation::TensorSymbolicShapeConstraints *v150;
  void *v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count_vtbl *v157;
  void *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count_vtbl *v164;
  void *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  void *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count_vtbl *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  MIL::Validation::PossibleStringValuesConstraints *v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  uint64_t i;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void *v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count_vtbl *v196;
  uint64_t j;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count_vtbl *v208;
  uint64_t result;
  uint64_t v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  void *v213;
  char v214;
  void *v215;
  std::__shared_weak_count *v216;
  void *v217;
  char v218;
  void *v219;
  std::__shared_weak_count *v220;
  void *v221;
  std::__shared_weak_count *v222;
  void *v223[2];
  char v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  char v228;
  void *v229;
  char v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  void *v233[2];
  char v234;
  void *v235;
  char v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  void *v239[2];
  char v240;
  void *v241;
  char v242;
  std::__shared_weak_count_vtbl *v243;
  std::__shared_weak_count *v244;
  void *v245;
  std::__shared_weak_count *v246;
  void *v247[2];
  char v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  void *v251[2];
  char v252;
  void *v253;
  char v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  void *v257[2];
  char v258;
  void *v259;
  char v260;
  std::__shared_weak_count_vtbl *v261;
  std::__shared_weak_count *v262;
  char **v263;
  std::__shared_weak_count *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  uint64_t v268;
  void *v269;
  void *v270;
  _QWORD *v271;
  std::__shared_weak_count *v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  char **v276;
  std::__shared_weak_count *v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count *v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count *v281;
  std::__shared_weak_count *v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count *v284;
  std::__shared_weak_count *v285;
  void *__p;
  void *v287;
  _QWORD *v288;
  std::__shared_weak_count *v289;
  _QWORD *v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD v294[3];
  _QWORD v295[3];
  _QWORD v296[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v298;
  uint64_t v299;
  _BYTE v300[24];
  _BYTE *v301;
  _QWORD v302[3];
  MIL::Validation::TensorDTypeConstraints *v303;
  std::__shared_weak_count_vtbl *v304;
  std::__shared_weak_count_vtbl *v305;
  void (__cdecl **v306)(std::__shared_weak_count *__hidden);
  uint64_t v307;

  v307 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v290 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v298 = (uint64_t)&v10->~__shared_weak_count_0;
  v299 = (uint64_t)&v10->~__shared_weak_count_0;
  v291 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v304 = v12;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v305 = (std::__shared_weak_count_vtbl *)&v12->~__shared_weak_count_0;
  v306 = &v12->~__shared_weak_count_0;
  v292 = MIL::IRTensorValueType::MakeWithShape();
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v288 = v14 + 1;
  v287 = v14 + 1;
  v293 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v269);
  v15 = v269;
  v269 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = v289;
  if (v289)
  {
    p_shared_owners = (unint64_t *)&v289->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  if (v304)
  {
    v305 = v304;
    operator delete(v304);
  }
  if (Scalar)
  {
    v298 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v19 = v290;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v21;
  v21->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  v298 = (uint64_t)&v21->~__shared_weak_count_0;
  v299 = (uint64_t)&v21->~__shared_weak_count_0;
  v291 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v304 = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  v305 = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v306 = &v23->~__shared_weak_count_0;
  v292 = MIL::IRTensorValueType::MakeWithShape();
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = v24;
  v288 = v25 + 1;
  v287 = v25 + 1;
  v293 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v269);
  v26 = v269;
  v269 = 0;
  if (v26)
    (*(void (**)(void *))(*(_QWORD *)v26 + 8))(v26);
  v27 = v285;
  if (v285)
  {
    v28 = (unint64_t *)&v285->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  if (v304)
  {
    v305 = v304;
    operator delete(v304);
  }
  if (Scalar)
  {
    v298 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v30 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v30, "x_scale", (uint64_t *)&v291);
  v32 = v291;
  v291 = 0;
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  v33 = v284;
  if (v284)
  {
    v34 = (unint64_t *)&v284->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 32))(*((_QWORD *)v31 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v31 + 5) + 48))(*((_QWORD *)v31 + 5), 1);
  v36 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v36, "y_scale", (uint64_t *)&v291);
  v38 = v291;
  v291 = 0;
  if (v38)
    (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
  v39 = v283;
  if (v283)
  {
    v40 = (unint64_t *)&v283->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 32))(*((_QWORD *)v37 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 48))(*((_QWORD *)v37 + 5), 1);
  v42 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v42, "post_scale", (uint64_t *)&v291);
  v44 = v291;
  v291 = 0;
  if (v44)
    (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
  v45 = v282;
  if (v282)
  {
    v46 = (unint64_t *)&v282->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 32))(*((_QWORD *)v43 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 48))(*((_QWORD *)v43 + 5), 1);
  v48 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v48, "reduction", (uint64_t *)&v291);
  v50 = v291;
  v291 = 0;
  if (v50)
    (*(void (**)(void *))(*(_QWORD *)v50 + 8))(v50);
  v51 = v281;
  if (v281)
  {
    v52 = (unint64_t *)&v281->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v49 + 5) + 32))(*((_QWORD *)v49 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v49 + 5) + 48))(*((_QWORD *)v49 + 5), 1);
  v54 = v290;
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v291 = v56;
  *v56 = v55;
  v293 = (uint64_t)(v56 + 1);
  v292 = (uint64_t)(v56 + 1);
  v304 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v54, "reduction_axes", (uint64_t *)&Scalar);
  v58 = Scalar;
  Scalar = 0;
  if (v58)
    (*((void (**)(std::__shared_weak_count_vtbl *))v58->~__shared_weak_count + 1))(v58);
  v59 = v280;
  if (v280)
  {
    v60 = (unint64_t *)&v280->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v291)
  {
    v292 = (uint64_t)v291;
    operator delete(v291);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 32))(*((_QWORD *)v57 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 48))(*((_QWORD *)v57 + 5), 1);
  v62 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v62, "reduction_scale", (uint64_t *)&v291);
  v64 = v291;
  v291 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = v279;
  if (v279)
  {
    v66 = (unint64_t *)&v279->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v68, "reduction_epsilon", (uint64_t *)&v291);
  v70 = v291;
  v291 = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  v71 = v278;
  if (v278)
  {
    v72 = (unint64_t *)&v278->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = v290;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[26],std::unique_ptr<MIL::IRParameter>>(v74, "reduction_post_processing", (uint64_t *)&v291);
  v76 = v291;
  v291 = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  v77 = v277;
  if (v277)
  {
    v78 = (unint64_t *)&v277->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 32))(*((_QWORD *)v75 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 48))(*((_QWORD *)v75 + 5), 1);
  v276 = 0;
  v80 = operator new();
  *(_QWORD *)v80 = 0;
  *(_QWORD *)(v80 + 8) = 0;
  *(_QWORD *)(v80 + 16) = 0;
  v291 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v276, (void **)v80);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v291, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v276, 1uLL);
  v81 = v276;
  v82 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v83 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v304 = v83;
  v83->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v82;
  v305 = (std::__shared_weak_count_vtbl *)&v83->~__shared_weak_count_0;
  v306 = &v83->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v84 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v85 = operator new(8uLL);
  __p = v85;
  *v85 = v84;
  v288 = v85 + 1;
  v287 = v85 + 1;
  v298 = MIL::IRTensorValueType::MakeWithShape();
  v86 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v87 = operator new(8uLL);
  v269 = v87;
  *v87 = v86;
  v271 = v87 + 1;
  v270 = v87 + 1;
  v299 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v88 = v273;
  v274 = v273;
  if (v273)
  {
    v89 = (_QWORD *)operator new();
    v90 = v273;
    *v89 = &unk_24BFE7320;
    v89[1] = 0;
    v89[2] = 0;
    v89[3] = v90;
  }
  else
  {
    v89 = 0;
  }
  v275 = v89;
  v273 = 0;
  v91 = v81[2];
  v92 = v81[1];
  if (v92 >= v91)
  {
    v94 = (v92 - *v81) >> 4;
    v95 = v94 + 1;
    if ((unint64_t)(v94 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v96 = v91 - *v81;
    if (v96 >> 3 > v95)
      v95 = v96 >> 3;
    if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0)
      v97 = 0xFFFFFFFFFFFFFFFLL;
    else
      v97 = v95;
    v294[1] = v81 + 2;
    v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v81 + 2), v97);
    v100 = &v98[16 * v94];
    *(_QWORD *)v100 = v88;
    *((_QWORD *)v100 + 1) = v89;
    v275 = 0;
    v274 = 0;
    v102 = *v81;
    v101 = v81[1];
    if (v101 == *v81)
    {
      v105 = v81[1];
      v103 = &v98[16 * v94];
    }
    else
    {
      v103 = &v98[16 * v94];
      do
      {
        v104 = *((_OWORD *)v101 - 1);
        v101 -= 16;
        *((_OWORD *)v103 - 1) = v104;
        v103 -= 16;
        *(_QWORD *)v101 = 0;
        *((_QWORD *)v101 + 1) = 0;
      }
      while (v101 != v102);
      v105 = *v81;
      v101 = v81[1];
    }
    v93 = v100 + 16;
    *v81 = v103;
    v292 = (uint64_t)v105;
    v81[1] = v100 + 16;
    v293 = (uint64_t)v101;
    v106 = v81[2];
    v81[2] = &v98[16 * v99];
    v294[0] = v106;
    v291 = v105;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v291);
  }
  else
  {
    *(_QWORD *)v92 = v88;
    *((_QWORD *)v92 + 1) = v89;
    v93 = v92 + 16;
    v275 = 0;
    v274 = 0;
  }
  v81[1] = v93;
  v107 = v273;
  v273 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  v108 = v272;
  if (v272)
  {
    v109 = (unint64_t *)&v272->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (v269)
  {
    v270 = v269;
    operator delete(v269);
  }
  if (__p)
  {
    v287 = __p;
    operator delete(__p);
  }
  if (v304)
  {
    v305 = v304;
    operator delete(v304);
  }
  *(_OWORD *)v267 = *(_OWORD *)a2;
  v268 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v111 = (uint64_t)v290;
  v265 = (uint64_t)v290;
  if (v290)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = (std::__shared_weak_count_vtbl *)v111;
  }
  else
  {
    v112 = 0;
  }
  v266 = v112;
  v290 = 0;
  v263 = v276;
  if (v276)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v276;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v264 = v113;
  v276 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v302, a3);
  }
  else
  {
    v302[0] = &unk_24BFE7440;
    v302[1] = ANEMachineIR::H2022::Validators::ValidateBasePeElementWiseBinary;
    v303 = (MIL::Validation::TensorDTypeConstraints *)v302;
  }
  v301 = 0;
  MIL::IROperator::Make();
  v115 = v301;
  if (v301 == v300)
  {
    v116 = 4;
    v115 = v300;
  }
  else
  {
    if (!v301)
      goto LABEL_129;
    v116 = 5;
  }
  (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_129:
  v117 = v303;
  if (v303 == (MIL::Validation::TensorDTypeConstraints *)v302)
  {
    v118 = 4;
    v117 = (MIL::Validation::TensorDTypeConstraints *)v302;
    goto LABEL_133;
  }
  if (v303)
  {
    v118 = 5;
LABEL_133:
    v117 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v117 + 8 * v118))();
  }
  if (v264)
  {
    v119 = &v264->__shared_owners_;
    do
      v120 = __ldaxr((unint64_t *)v119);
    while (__stlxr(v120 - 1, (unint64_t *)v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  if (v266)
  {
    v121 = &v266->__shared_owners_;
    do
      v122 = __ldaxr((unint64_t *)v121);
    while (__stlxr(v122 - 1, (unint64_t *)v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  if (SHIBYTE(v268) < 0)
    operator delete(v267[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v117);
  v123 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v259, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v261 = Scalar;
  if (Scalar)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = Scalar;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = v125;
  }
  else
  {
    v124 = 0;
  }
  v262 = v124;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v257, "XDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v123 + 24))(v123, &v261, v257);
  if (v258 < 0)
    operator delete(v257[0]);
  v126 = v262;
  if (v262)
  {
    v127 = (unint64_t *)&v262->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = Scalar;
  Scalar = 0;
  if (v129)
    (*((void (**)(std::__shared_weak_count_vtbl *))v129->~__shared_weak_count + 1))(v129);
  if (v260 < 0)
    operator delete(v259);
  v130 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v253, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v255 = Scalar;
  if (Scalar)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = Scalar;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v256 = v131;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v251, "YDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v130 + 24))(v130, &v255, v251);
  if (v252 < 0)
    operator delete(v251[0]);
  v133 = v256;
  if (v256)
  {
    v134 = (unint64_t *)&v256->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = Scalar;
  Scalar = 0;
  if (v136)
    (*((void (**)(std::__shared_weak_count_vtbl *))v136->~__shared_weak_count + 1))(v136);
  if (v254 < 0)
    operator delete(v253);
  v137 = v291;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v249 = Scalar;
  if (Scalar)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = Scalar;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v250 = v138;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v247, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v137 + 24))(v137, &v249, v247);
  if (v248 < 0)
    operator delete(v247[0]);
  v140 = v250;
  if (v250)
  {
    v141 = (unint64_t *)&v250->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = Scalar;
  Scalar = 0;
  if (v143)
    (*((void (**)(std::__shared_weak_count_vtbl *))v143->~__shared_weak_count + 1))(v143);
  v144 = *a4;
  v245 = v291;
  if (v291)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = (std::__shared_weak_count_vtbl *)v291;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v246 = v145;
  v291 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v144 + 56))(v144, &v245);
  v147 = v246;
  if (v246)
  {
    v148 = (unint64_t *)&v246->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = (MIL::Validation::TensorSymbolicShapeConstraints *)v291;
  v291 = 0;
  if (v150)
    v150 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v150 + 8))(v150);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v150);
  v151 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v241, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v243 = Scalar;
  if (Scalar)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = Scalar;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v244 = v152;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v239, "XShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v151 + 40))(v151, &v243, v239);
  if (v240 < 0)
    operator delete(v239[0]);
  v154 = v244;
  if (v244)
  {
    v155 = (unint64_t *)&v244->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = Scalar;
  Scalar = 0;
  if (v157)
    (*((void (**)(std::__shared_weak_count_vtbl *))v157->~__shared_weak_count + 1))(v157);
  if (v242 < 0)
    operator delete(v241);
  v158 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v235, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v237 = Scalar;
  if (Scalar)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = Scalar;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v238 = v159;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v233, "YShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v158 + 40))(v158, &v237, v233);
  if (v234 < 0)
    operator delete(v233[0]);
  v161 = v238;
  if (v238)
  {
    v162 = (unint64_t *)&v238->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = Scalar;
  Scalar = 0;
  if (v164)
    (*((void (**)(std::__shared_weak_count_vtbl *))v164->~__shared_weak_count + 1))(v164);
  if (v236 < 0)
    operator delete(v235);
  v165 = v291;
  std::string::basic_string[abi:ne180100]<0>(&v229, "reduction_axes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v231 = Scalar;
  if (Scalar)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = Scalar;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v232 = v166;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v227, "NUM_REDUCTION_AXES");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v165 + 24))(v165, &v231, 0, v227);
  if (v228 < 0)
    operator delete(v227[0]);
  v168 = v232;
  if (v232)
  {
    v169 = (unint64_t *)&v232->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = Scalar;
  Scalar = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  if (v230 < 0)
    operator delete(v229);
  v172 = v291;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v225 = Scalar;
  if (Scalar)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = Scalar;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v226 = v173;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v223, "XYBroadcastReducedShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v172 + 40))(v172, &v225, v223);
  if (v224 < 0)
    operator delete(v223[0]);
  v175 = v226;
  if (v226)
  {
    v176 = (unint64_t *)&v226->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = Scalar;
  Scalar = 0;
  if (v178)
    (*((void (**)(std::__shared_weak_count_vtbl *))v178->~__shared_weak_count + 1))(v178);
  v179 = *a4;
  v221 = v291;
  if (v291)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = (std::__shared_weak_count_vtbl *)v291;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v222 = v180;
  v291 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v179 + 56))(v179, &v221);
  v182 = v222;
  if (v222)
  {
    v183 = (unint64_t *)&v222->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = (MIL::Validation::PossibleStringValuesConstraints *)v291;
  v291 = 0;
  if (v185)
    v185 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v185 + 8))(v185);
  MIL::Validation::PossibleStringValuesConstraints::Make(v185);
  v186 = v304;
  std::string::basic_string[abi:ne180100]<0>(&v217, "reduction");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v219 = __p;
  if (__p)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = (std::__shared_weak_count_vtbl *)__p;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v220 = v187;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v291, "max");
  std::string::basic_string[abi:ne180100]<0>(v294, "mean");
  std::string::basic_string[abi:ne180100]<0>(v295, "min");
  std::string::basic_string[abi:ne180100]<0>(v296, "sum");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v291, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v186->~__shared_weak_count
   + 3))(v186, &v219, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v296[i + 2]) < 0)
      operator delete((void *)v296[i]);
  }
  v190 = v220;
  if (v220)
  {
    v191 = (unint64_t *)&v220->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = __p;
  __p = 0;
  if (v193)
    (*(void (**)(void *))(*(_QWORD *)v193 + 8))(v193);
  if (v218 < 0)
    operator delete(v217);
  v194 = v304;
  std::string::basic_string[abi:ne180100]<0>(&v213, "reduction_post_processing");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v215 = __p;
  if (__p)
  {
    v195 = (std::__shared_weak_count *)operator new();
    v196 = (std::__shared_weak_count_vtbl *)__p;
    v195->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v195->__shared_owners_ = 0;
    v195->__shared_weak_owners_ = 0;
    v195[1].__vftable = v196;
  }
  else
  {
    v195 = 0;
  }
  v216 = v195;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v291, "inv");
  std::string::basic_string[abi:ne180100]<0>(v294, "linear");
  std::string::basic_string[abi:ne180100]<0>(v295, "rsqrt");
  std::string::basic_string[abi:ne180100]<0>(v296, "sqrt");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v291, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v194->~__shared_weak_count
   + 3))(v194, &v215, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v296[j + 2]) < 0)
      operator delete((void *)v296[j]);
  }
  v198 = v216;
  if (v216)
  {
    v199 = (unint64_t *)&v216->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = __p;
  __p = 0;
  if (v201)
    (*(void (**)(void *))(*(_QWORD *)v201 + 8))(v201);
  if (v214 < 0)
    operator delete(v213);
  v202 = *a4;
  v211 = v304;
  if (v304)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = v304;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v212 = v203;
  v304 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v202 + 56))(v202, &v211);
  v205 = v212;
  if (v212)
  {
    v206 = (unint64_t *)&v212->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = v304;
  v304 = 0;
  if (v208)
    (*((void (**)(std::__shared_weak_count_vtbl *))v208->~__shared_weak_count + 1))(v208);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v276, 0);
  result = (uint64_t)v290;
  if (v290)
  {
    v210 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v290);
    return MEMORY[0x20BCFF140](v210, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068D497C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x290], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x350], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeAdd::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeAdd;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D5278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeAddAbs::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeAddAbs;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D5390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeAddMul::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeAddMul;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D54A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeAddSquare::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeAddSquare;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D55C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeEqual::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeEqual;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D56D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeGreater::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeGreater;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D57F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeGreaterEqual::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeGreaterEqual;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D5908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeLess::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeLess;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D5A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeLessEqual::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeLessEqual;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D5B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeMaximum::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeMaximum;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D5C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeMinimum::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeMinimum;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D5D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeMul::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeMul;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D5E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeNotEqual::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeNotEqual;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D5F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::BasePeElementWiseUnary::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  unsigned __int8 *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  uint64_t v59;
  std::__shared_weak_count_vtbl *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  char *v82;
  char *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  char **v91;
  _QWORD *v92;
  uint64_t v93;
  MIL::Validation::TensorDTypeConstraints *v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  void *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  MIL::Validation::TensorSymbolicShapeConstraints *v120;
  void *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  void *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  void *v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count_vtbl *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  MIL::Validation::PossibleStringValuesConstraints *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  uint64_t i;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  uint64_t j;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  uint64_t result;
  uint64_t v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  void *v176;
  char v177;
  void *v178;
  std::__shared_weak_count *v179;
  void *v180;
  char v181;
  void *v182;
  std::__shared_weak_count *v183;
  void *v184;
  std::__shared_weak_count *v185;
  void *v186[2];
  char v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  void *v190[2];
  char v191;
  void *v192;
  char v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  void *v198;
  char v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  void *v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  char v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  void *v208[2];
  char v209;
  void *v210;
  char v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  char **v214;
  std::__shared_weak_count *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  void *v218[2];
  uint64_t v219;
  void *v220;
  void *v221;
  _QWORD *v222;
  std::__shared_weak_count *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  char **v227;
  std::__shared_weak_count *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count *v233;
  void *__p;
  void *v235;
  _QWORD *v236;
  std::__shared_weak_count *v237;
  _QWORD *v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD v242[3];
  _QWORD v243[3];
  _QWORD v244[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v246;
  uint64_t v247;
  _BYTE v248[24];
  _BYTE *v249;
  _QWORD v250[3];
  MIL::Validation::TensorDTypeConstraints *v251;
  std::__shared_weak_count_vtbl *v252;
  std::__shared_weak_count_vtbl *v253;
  void (__cdecl **v254)(std::__shared_weak_count *__hidden);
  uint64_t v255;

  v255 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v238 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v246 = (uint64_t)&v10->~__shared_weak_count_0;
  v247 = (uint64_t)&v10->~__shared_weak_count_0;
  v239 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v252 = v12;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v253 = (std::__shared_weak_count_vtbl *)&v12->~__shared_weak_count_0;
  v254 = &v12->~__shared_weak_count_0;
  v240 = MIL::IRTensorValueType::MakeWithShape();
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v236 = v14 + 1;
  v235 = v14 + 1;
  v241 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v220);
  v15 = v220;
  v220 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = v237;
  if (v237)
  {
    p_shared_owners = (unint64_t *)&v237->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v235 = __p;
    operator delete(__p);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (Scalar)
  {
    v246 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v19 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v19, "post_scale", (uint64_t *)&v239);
  v21 = v239;
  v239 = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = v233;
  if (v233)
  {
    v23 = (unint64_t *)&v233->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 48))(*((_QWORD *)v20 + 5), 1);
  v25 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v25, "reduction", (uint64_t *)&v239);
  v27 = v239;
  v239 = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = v232;
  if (v232)
  {
    v29 = (unint64_t *)&v232->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 48))(*((_QWORD *)v26 + 5), 1);
  v31 = v238;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = operator new(8uLL);
  v239 = v33;
  *v33 = v32;
  v241 = (uint64_t)(v33 + 1);
  v240 = (uint64_t)(v33 + 1);
  v252 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v31, "reduction_axes", (uint64_t *)&Scalar);
  v35 = Scalar;
  Scalar = 0;
  if (v35)
    (*((void (**)(std::__shared_weak_count_vtbl *))v35->~__shared_weak_count + 1))(v35);
  v36 = v231;
  if (v231)
  {
    v37 = (unint64_t *)&v231->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v239)
  {
    v240 = (uint64_t)v239;
    operator delete(v239);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 48))(*((_QWORD *)v34 + 5), 1);
  v39 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v39, "reduction_scale", (uint64_t *)&v239);
  v41 = v239;
  v239 = 0;
  if (v41)
    (*(void (**)(void *))(*(_QWORD *)v41 + 8))(v41);
  v42 = v230;
  if (v230)
  {
    v43 = (unint64_t *)&v230->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 32))(*((_QWORD *)v40 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 48))(*((_QWORD *)v40 + 5), 1);
  v45 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v45, "reduction_epsilon", (uint64_t *)&v239);
  v47 = v239;
  v239 = 0;
  if (v47)
    (*(void (**)(void *))(*(_QWORD *)v47 + 8))(v47);
  v48 = v229;
  if (v229)
  {
    v49 = (unint64_t *)&v229->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v46 + 5) + 32))(*((_QWORD *)v46 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v46 + 5) + 48))(*((_QWORD *)v46 + 5), 1);
  v51 = v238;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[26],std::unique_ptr<MIL::IRParameter>>(v51, "reduction_post_processing", (uint64_t *)&v239);
  v53 = v239;
  v239 = 0;
  if (v53)
    (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
  v54 = v228;
  if (v228)
  {
    v55 = (unint64_t *)&v228->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v52 + 5) + 32))(*((_QWORD *)v52 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v52 + 5) + 48))(*((_QWORD *)v52 + 5), 1);
  v227 = 0;
  v57 = operator new();
  *(_QWORD *)v57 = 0;
  *(_QWORD *)(v57 + 8) = 0;
  *(_QWORD *)(v57 + 16) = 0;
  v239 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v227, (void **)v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v239, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v227, 1uLL);
  v58 = v227;
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v252 = v60;
  v60->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v59;
  v253 = (std::__shared_weak_count_vtbl *)&v60->~__shared_weak_count_0;
  v254 = &v60->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  __p = v62;
  *v62 = v61;
  v236 = v62 + 1;
  v235 = v62 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape();
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v220 = v64;
  *v64 = v63;
  v221 = v64 + 1;
  v222 = v64 + 1;
  v247 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v65 = v224;
  v225 = v224;
  if (v224)
  {
    v66 = (_QWORD *)operator new();
    v67 = v224;
    *v66 = &unk_24BFE7320;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  v226 = v66;
  v224 = 0;
  v68 = v58[2];
  v69 = v58[1];
  if (v69 >= v68)
  {
    v71 = (v69 - *v58) >> 4;
    v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v73 = v68 - *v58;
    if (v73 >> 3 > v72)
      v72 = v73 >> 3;
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
      v74 = 0xFFFFFFFFFFFFFFFLL;
    else
      v74 = v72;
    v242[1] = v58 + 2;
    v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v58 + 2), v74);
    v77 = &v75[16 * v71];
    *(_QWORD *)v77 = v65;
    *((_QWORD *)v77 + 1) = v66;
    v226 = 0;
    v225 = 0;
    v79 = *v58;
    v78 = v58[1];
    if (v78 == *v58)
    {
      v82 = v58[1];
      v80 = &v75[16 * v71];
    }
    else
    {
      v80 = &v75[16 * v71];
      do
      {
        v81 = *((_OWORD *)v78 - 1);
        v78 -= 16;
        *((_OWORD *)v80 - 1) = v81;
        v80 -= 16;
        *(_QWORD *)v78 = 0;
        *((_QWORD *)v78 + 1) = 0;
      }
      while (v78 != v79);
      v82 = *v58;
      v78 = v58[1];
    }
    v70 = v77 + 16;
    *v58 = v80;
    v240 = (uint64_t)v82;
    v58[1] = v77 + 16;
    v241 = (uint64_t)v78;
    v83 = v58[2];
    v58[2] = &v75[16 * v76];
    v242[0] = v83;
    v239 = v82;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v239);
  }
  else
  {
    *(_QWORD *)v69 = v65;
    *((_QWORD *)v69 + 1) = v66;
    v70 = v69 + 16;
    v226 = 0;
    v225 = 0;
  }
  v58[1] = v70;
  v84 = v224;
  v224 = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  v85 = v223;
  if (v223)
  {
    v86 = (unint64_t *)&v223->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (__p)
  {
    v235 = __p;
    operator delete(__p);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  *(_OWORD *)v218 = *(_OWORD *)a2;
  v219 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v88 = (uint64_t)v238;
  v216 = (uint64_t)v238;
  if (v238)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = (std::__shared_weak_count_vtbl *)v88;
  }
  else
  {
    v89 = 0;
  }
  v217 = v89;
  v238 = 0;
  v214 = v227;
  if (v227)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v227;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v91;
  }
  else
  {
    v90 = 0;
  }
  v215 = v90;
  v227 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v250, a3);
  }
  else
  {
    v250[0] = &unk_24BFE7440;
    v250[1] = ANEMachineIR::H2022::Validators::ValidateBasePeElementWiseUnary;
    v251 = (MIL::Validation::TensorDTypeConstraints *)v250;
  }
  v249 = 0;
  MIL::IROperator::Make();
  v92 = v249;
  if (v249 == v248)
  {
    v93 = 4;
    v92 = v248;
  }
  else
  {
    if (!v249)
      goto LABEL_102;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_102:
  v94 = v251;
  if (v251 == (MIL::Validation::TensorDTypeConstraints *)v250)
  {
    v95 = 4;
    v94 = (MIL::Validation::TensorDTypeConstraints *)v250;
    goto LABEL_106;
  }
  if (v251)
  {
    v95 = 5;
LABEL_106:
    v94 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v94 + 8 * v95))();
  }
  if (v215)
  {
    v96 = &v215->__shared_owners_;
    do
      v97 = __ldaxr((unint64_t *)v96);
    while (__stlxr(v97 - 1, (unint64_t *)v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  if (v217)
  {
    v98 = &v217->__shared_owners_;
    do
      v99 = __ldaxr((unint64_t *)v98);
    while (__stlxr(v99 - 1, (unint64_t *)v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  if (SHIBYTE(v219) < 0)
    operator delete(v218[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v94);
  v100 = v239;
  std::string::basic_string[abi:ne180100]<0>(&v210, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v212 = Scalar;
  if (Scalar)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = Scalar;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v213 = v101;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v208, "XDType");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v100 + 24))(v100, &v212, v208);
  if (v209 < 0)
    operator delete(v208[0]);
  v103 = v213;
  if (v213)
  {
    v104 = (unint64_t *)&v213->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = Scalar;
  Scalar = 0;
  if (v106)
    (*((void (**)(std::__shared_weak_count_vtbl *))v106->~__shared_weak_count + 1))(v106);
  if (v211 < 0)
    operator delete(v210);
  v107 = v239;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v206 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v207 = v108;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v204, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v107 + 24))(v107, &v206, v204);
  if (v205 < 0)
    operator delete(v204[0]);
  v110 = v207;
  if (v207)
  {
    v111 = (unint64_t *)&v207->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  v114 = *a4;
  v202 = v239;
  if (v239)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)v239;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v203 = v115;
  v239 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v114 + 56))(v114, &v202);
  v117 = v203;
  if (v203)
  {
    v118 = (unint64_t *)&v203->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = (MIL::Validation::TensorSymbolicShapeConstraints *)v239;
  v239 = 0;
  if (v120)
    v120 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v120 + 8))(v120);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v120);
  v121 = v239;
  std::string::basic_string[abi:ne180100]<0>(&v198, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v200 = Scalar;
  if (Scalar)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = Scalar;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v201 = v122;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "XShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v121 + 40))(v121, &v200, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v124 = v201;
  if (v201)
  {
    v125 = (unint64_t *)&v201->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = Scalar;
  Scalar = 0;
  if (v127)
    (*((void (**)(std::__shared_weak_count_vtbl *))v127->~__shared_weak_count + 1))(v127);
  if (v199 < 0)
    operator delete(v198);
  v128 = v239;
  std::string::basic_string[abi:ne180100]<0>(&v192, "reduction_axes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v194 = Scalar;
  if (Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v195 = v129;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v190, "NUM_REDUCTION_AXES");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v128 + 24))(v128, &v194, 0, v190);
  if (v191 < 0)
    operator delete(v190[0]);
  v131 = v195;
  if (v195)
  {
    v132 = (unint64_t *)&v195->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = Scalar;
  Scalar = 0;
  if (v134)
    (*((void (**)(std::__shared_weak_count_vtbl *))v134->~__shared_weak_count + 1))(v134);
  if (v193 < 0)
    operator delete(v192);
  v135 = v239;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v188 = Scalar;
  if (Scalar)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = Scalar;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = v137;
  }
  else
  {
    v136 = 0;
  }
  v189 = v136;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v186, "XReducedShape");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v135 + 40))(v135, &v188, v186);
  if (v187 < 0)
    operator delete(v186[0]);
  v138 = v189;
  if (v189)
  {
    v139 = (unint64_t *)&v189->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = Scalar;
  Scalar = 0;
  if (v141)
    (*((void (**)(std::__shared_weak_count_vtbl *))v141->~__shared_weak_count + 1))(v141);
  v142 = *a4;
  v184 = v239;
  if (v239)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = (std::__shared_weak_count_vtbl *)v239;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v185 = v143;
  v239 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v142 + 56))(v142, &v184);
  v145 = v185;
  if (v185)
  {
    v146 = (unint64_t *)&v185->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = (MIL::Validation::PossibleStringValuesConstraints *)v239;
  v239 = 0;
  if (v148)
    v148 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v148 + 8))(v148);
  MIL::Validation::PossibleStringValuesConstraints::Make(v148);
  v149 = v252;
  std::string::basic_string[abi:ne180100]<0>(&v180, "reduction");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v182 = __p;
  if (__p)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = (std::__shared_weak_count_vtbl *)__p;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v183 = v150;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v239, "max");
  std::string::basic_string[abi:ne180100]<0>(v242, "mean");
  std::string::basic_string[abi:ne180100]<0>(v243, "min");
  std::string::basic_string[abi:ne180100]<0>(v244, "sum");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v239, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v149->~__shared_weak_count
   + 3))(v149, &v182, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v244[i + 2]) < 0)
      operator delete((void *)v244[i]);
  }
  v153 = v183;
  if (v183)
  {
    v154 = (unint64_t *)&v183->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = __p;
  __p = 0;
  if (v156)
    (*(void (**)(void *))(*(_QWORD *)v156 + 8))(v156);
  if (v181 < 0)
    operator delete(v180);
  v157 = v252;
  std::string::basic_string[abi:ne180100]<0>(&v176, "reduction_post_processing");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v178 = __p;
  if (__p)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = (std::__shared_weak_count_vtbl *)__p;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v179 = v158;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v239, "inv");
  std::string::basic_string[abi:ne180100]<0>(v242, "linear");
  std::string::basic_string[abi:ne180100]<0>(v243, "rsqrt");
  std::string::basic_string[abi:ne180100]<0>(v244, "sqrt");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v239, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v157->~__shared_weak_count
   + 3))(v157, &v178, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v244[j + 2]) < 0)
      operator delete((void *)v244[j]);
  }
  v161 = v179;
  if (v179)
  {
    v162 = (unint64_t *)&v179->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = __p;
  __p = 0;
  if (v164)
    (*(void (**)(void *))(*(_QWORD *)v164 + 8))(v164);
  if (v177 < 0)
    operator delete(v176);
  v165 = *a4;
  v174 = v252;
  if (v252)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = v252;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v175 = v166;
  v252 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v165 + 56))(v165, &v174);
  v168 = v175;
  if (v175)
  {
    v169 = (unint64_t *)&v175->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = v252;
  v252 = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v227, 0);
  result = (uint64_t)v238;
  if (v238)
  {
    v173 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v238);
    return MEMORY[0x20BCFF140](v173, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068D7580(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x210], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2A0], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeAbs::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeAbs;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseUnary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D7D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeSquare::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeSquare;
  v8 = v7;
  ANEMachineIR::H2022::BasePeElementWiseUnary::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_2068D7E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::NeActivation::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  void **v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  char **v63;
  _QWORD *v64;
  uint64_t v65;
  MIL::Validation::TensorDTypeConstraints *v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  void **v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count_vtbl *v78;
  void **v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  void **v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  MIL::Validation::TensorSymbolicShapeConstraints *v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  void **v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  void **v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void **v113;
  uint64_t result;
  uint64_t v115;
  void **v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124;
  char v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void **v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136;
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  char **v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  uint64_t v145;
  void *v146;
  void *v147;
  _QWORD *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  char **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  void *__p;
  void *v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  std::__shared_weak_count *v162;
  _QWORD *v163;
  _BYTE v164[24];
  _BYTE *v165;
  _QWORD v166[3];
  MIL::Validation::TensorDTypeConstraints *v167;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v169;
  uint64_t v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char **v175;
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v170 = (uint64_t)&v8->~__shared_weak_count_0;
  v171 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v159 = v10;
  *v10 = v9;
  v160 = v10 + 1;
  v161 = v10 + 1;
  v172 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v157 = v12 + 1;
  v158 = v12 + 1;
  v173 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v146);
  v13 = v146;
  v146 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v162;
  if (v162)
  {
    p_shared_owners = (unint64_t *)&v162->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (Scalar)
  {
    v169 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v17, "post_right_shift", (uint64_t *)&v171);
  v19 = v171;
  v171 = 0;
  if (v19)
    (*((void (**)(void **))*v19 + 1))(v19);
  v20 = v155;
  if (v155)
  {
    v21 = (unint64_t *)&v155->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v163;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v23, "post_scale", (uint64_t *)&v171);
  v25 = v171;
  v171 = 0;
  if (v25)
    (*((void (**)(void **))*v25 + 1))(v25);
  v26 = v154;
  if (v154)
  {
    v27 = (unint64_t *)&v154->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 48))(*((_QWORD *)v24 + 5), 1);
  v153 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  v171 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v153, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v171, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v153, 1uLL);
  v30 = v153;
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v159 = v32;
  *v32 = v31;
  v160 = v32 + 1;
  v161 = v32 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  __p = v34;
  *v34 = v33;
  v157 = v34 + 1;
  v158 = v34 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape();
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v146 = v36;
  *v36 = v35;
  v147 = v36 + 1;
  v148 = v36 + 1;
  v170 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v37 = v150;
  v151 = v150;
  if (v150)
  {
    v38 = (_QWORD *)operator new();
    v39 = v150;
    *v38 = &unk_24BFE7320;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v152 = v38;
  v150 = 0;
  v40 = v30[2];
  v41 = v30[1];
  if (v41 >= v40)
  {
    v43 = (v41 - *v30) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v45 = v40 - *v30;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v175 = v30 + 2;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v30 + 2), v46);
    v49 = &v47[16 * v43];
    *(_QWORD *)v49 = v37;
    *((_QWORD *)v49 + 1) = v38;
    v151 = 0;
    v152 = 0;
    v51 = *v30;
    v50 = v30[1];
    if (v50 == *v30)
    {
      v54 = (void **)v30[1];
      v52 = &v47[16 * v43];
    }
    else
    {
      v52 = &v47[16 * v43];
      do
      {
        v53 = *((_OWORD *)v50 - 1);
        v50 -= 16;
        *((_OWORD *)v52 - 1) = v53;
        v52 -= 16;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
      }
      while (v50 != v51);
      v54 = (void **)*v30;
      v50 = v30[1];
    }
    v42 = v49 + 16;
    *v30 = v52;
    v171 = v54;
    v172 = (uint64_t)v54;
    v30[1] = v49 + 16;
    v173 = (uint64_t)v50;
    v55 = v30[2];
    v30[2] = &v47[16 * v48];
    v174 = v55;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v171);
  }
  else
  {
    *(_QWORD *)v41 = v37;
    *((_QWORD *)v41 + 1) = v38;
    v42 = v41 + 16;
    v151 = 0;
    v152 = 0;
  }
  v30[1] = v42;
  v56 = v150;
  v150 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = v149;
  if (v149)
  {
    v58 = (unint64_t *)&v149->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  *(_OWORD *)v144 = *(_OWORD *)a2;
  v145 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v60 = (uint64_t)v163;
  v142 = (uint64_t)v163;
  if (v163)
  {
    v61 = (std::__shared_weak_count *)operator new();
    v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61[1].__vftable = (std::__shared_weak_count_vtbl *)v60;
  }
  else
  {
    v61 = 0;
  }
  v143 = v61;
  v163 = 0;
  v140 = v153;
  if (v153)
  {
    v62 = (std::__shared_weak_count *)operator new();
    v63 = v153;
    v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v62->__shared_owners_ = 0;
    v62->__shared_weak_owners_ = 0;
    v62[1].__vftable = (std::__shared_weak_count_vtbl *)v63;
  }
  else
  {
    v62 = 0;
  }
  v141 = v62;
  v153 = 0;
  v166[0] = &unk_24BFE7440;
  v166[1] = ANEMachineIR::H2022::Validators::ValidateNeActivation;
  v167 = (MIL::Validation::TensorDTypeConstraints *)v166;
  v165 = 0;
  MIL::IROperator::Make();
  v64 = v165;
  if (v165 == v164)
  {
    v65 = 4;
    v64 = v164;
  }
  else
  {
    if (!v165)
      goto LABEL_69;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_69:
  v66 = v167;
  if (v167 == (MIL::Validation::TensorDTypeConstraints *)v166)
  {
    v67 = 4;
    v66 = (MIL::Validation::TensorDTypeConstraints *)v166;
    goto LABEL_73;
  }
  if (v167)
  {
    v67 = 5;
LABEL_73:
    v66 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 8 * v67))();
  }
  if (v141)
  {
    v68 = &v141->__shared_owners_;
    do
      v69 = __ldaxr((unint64_t *)v68);
    while (__stlxr(v69 - 1, (unint64_t *)v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  if (v143)
  {
    v70 = &v143->__shared_owners_;
    do
      v71 = __ldaxr((unint64_t *)v70);
    while (__stlxr(v71 - 1, (unint64_t *)v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  if (SHIBYTE(v145) < 0)
    operator delete(v144[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v66);
  v72 = v171;
  std::string::basic_string[abi:ne180100]<0>(&v136, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v138 = Scalar;
  if (Scalar)
  {
    v73 = (std::__shared_weak_count *)operator new();
    v74 = Scalar;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = v74;
  }
  else
  {
    v73 = 0;
  }
  v139 = v73;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v72 + 3))(v72, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v75 = v139;
  if (v139)
  {
    v76 = (unint64_t *)&v139->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = Scalar;
  Scalar = 0;
  if (v78)
    (*((void (**)(std::__shared_weak_count_vtbl *))v78->~__shared_weak_count + 1))(v78);
  if (v137 < 0)
    operator delete(v136);
  v79 = v171;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v132 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v133 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v79 + 3))(v79, &v132, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v82 = v133;
  if (v133)
  {
    v83 = (unint64_t *)&v133->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  v86 = *a3;
  v128 = v171;
  if (v171)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = v171;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = (std::__shared_weak_count_vtbl *)v88;
  }
  else
  {
    v87 = 0;
  }
  v129 = v87;
  v171 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v86 + 56))(v86, &v128);
  v89 = v129;
  if (v129)
  {
    v90 = (unint64_t *)&v129->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = (MIL::Validation::TensorSymbolicShapeConstraints *)v171;
  v171 = 0;
  if (v92)
    v92 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v92 + 8))(v92);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v92);
  v93 = v171;
  std::string::basic_string[abi:ne180100]<0>(&v124, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v126 = Scalar;
  if (Scalar)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = Scalar;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v127 = v94;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v93 + 5))(v93, &v126, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v96 = v127;
  if (v127)
  {
    v97 = (unint64_t *)&v127->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = Scalar;
  Scalar = 0;
  if (v99)
    (*((void (**)(std::__shared_weak_count_vtbl *))v99->~__shared_weak_count + 1))(v99);
  if (v125 < 0)
    operator delete(v124);
  v100 = v171;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v120 = Scalar;
  if (Scalar)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = Scalar;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v121 = v101;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v118, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v100 + 5))(v100, &v120, v118);
  if (v119 < 0)
    operator delete(v118[0]);
  v103 = v121;
  if (v121)
  {
    v104 = (unint64_t *)&v121->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = Scalar;
  Scalar = 0;
  if (v106)
    (*((void (**)(std::__shared_weak_count_vtbl *))v106->~__shared_weak_count + 1))(v106);
  v107 = *a3;
  v116 = v171;
  if (v171)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = v171;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = (std::__shared_weak_count_vtbl *)v109;
  }
  else
  {
    v108 = 0;
  }
  v117 = v108;
  v171 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v107 + 56))(v107, &v116);
  v110 = v117;
  if (v117)
  {
    v111 = (unint64_t *)&v117->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v171;
  v171 = 0;
  if (v113)
    (*((void (**)(void **))*v113 + 1))(v113);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v153, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x20BCFF140](v115, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068D8BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void **a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;

  v57 = *(_QWORD *)(v55 - 112);
  *(_QWORD *)(v55 - 112) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *v54;
  *v54 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::NeAdd::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void **v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  unsigned __int8 *v65;
  void **v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  __int128 v94;
  void **v95;
  char *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  char **v104;
  _QWORD *v105;
  uint64_t v106;
  MIL::Validation::TensorDTypeConstraints *v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  void **v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count_vtbl *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void **v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  MIL::Validation::TensorSymbolicShapeConstraints *v140;
  void **v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count_vtbl *v147;
  void **v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count_vtbl *v154;
  void **v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count_vtbl *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  void **v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void **v168;
  uint64_t result;
  uint64_t v170;
  void **v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  void *v179;
  char v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  void *v183[2];
  char v184;
  void *v185;
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void **v189;
  std::__shared_weak_count *v190;
  void *v191[2];
  char v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  void *v197;
  char v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  char v202;
  void *v203;
  char v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  char **v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  uint64_t v212;
  void *v213;
  void *v214;
  _QWORD *v215;
  std::__shared_weak_count *v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  char **v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count *v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count *v228;
  void *__p;
  void *v230;
  _QWORD *v231;
  void *v232;
  void *v233;
  _QWORD *v234;
  std::__shared_weak_count *v235;
  _QWORD *v236;
  _BYTE v237[24];
  _BYTE *v238;
  _QWORD v239[3];
  MIL::Validation::TensorDTypeConstraints *v240;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v242;
  uint64_t v243;
  void **v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char **v248;
  uint64_t v249;

  v249 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v236 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v242 = (uint64_t)&v8->~__shared_weak_count_0;
  v243 = (uint64_t)&v8->~__shared_weak_count_0;
  v244 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v232 = v10;
  *v10 = v9;
  v233 = v10 + 1;
  v234 = v10 + 1;
  v245 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v231 = v12 + 1;
  v230 = v12 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v213);
  v13 = v213;
  v213 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v235;
  if (v235)
  {
    p_shared_owners = (unint64_t *)&v235->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (Scalar)
  {
    v242 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v236;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v242 = (uint64_t)&v19->~__shared_weak_count_0;
  v243 = (uint64_t)&v19->~__shared_weak_count_0;
  v244 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v232 = v21;
  *v21 = v20;
  v233 = v21 + 1;
  v234 = v21 + 1;
  v245 = MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v231 = v23 + 1;
  v230 = v23 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v213);
  v24 = v213;
  v213 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v228;
  if (v228)
  {
    v26 = (unint64_t *)&v228->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (Scalar)
  {
    v242 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v28 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v28, "x_scale", (uint64_t *)&v244);
  v30 = v244;
  v244 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = v227;
  if (v227)
  {
    v32 = (unint64_t *)&v227->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v34, "y_scale", (uint64_t *)&v244);
  v36 = v244;
  v244 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = v226;
  if (v226)
  {
    v38 = (unint64_t *)&v226->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v40 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v40, "bias", (uint64_t *)&v244);
  v42 = v244;
  v244 = 0;
  if (v42)
    (*((void (**)(void **))*v42 + 1))(v42);
  v43 = v225;
  if (v225)
  {
    v44 = (unint64_t *)&v225->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 48))(*((_QWORD *)v41 + 5), 1);
  v46 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v46, "acc_left_shift", (uint64_t *)&v244);
  v48 = v244;
  v244 = 0;
  if (v48)
    (*((void (**)(void **))*v48 + 1))(v48);
  v49 = v224;
  if (v224)
  {
    v50 = (unint64_t *)&v224->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 48))(*((_QWORD *)v47 + 5), 1);
  v52 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v52, "acc_bias_shift", (uint64_t *)&v244);
  v54 = v244;
  v244 = 0;
  if (v54)
    (*((void (**)(void **))*v54 + 1))(v54);
  v55 = v223;
  if (v223)
  {
    v56 = (unint64_t *)&v223->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v58 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v58, "post_right_shift", (uint64_t *)&v244);
  v60 = v244;
  v244 = 0;
  if (v60)
    (*((void (**)(void **))*v60 + 1))(v60);
  v61 = v222;
  if (v222)
  {
    v62 = (unint64_t *)&v222->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v64, "post_scale", (uint64_t *)&v244);
  v66 = v244;
  v244 = 0;
  if (v66)
    (*((void (**)(void **))*v66 + 1))(v66);
  v67 = v221;
  if (v221)
  {
    v68 = (unint64_t *)&v221->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v220 = 0;
  v70 = operator new();
  *(_QWORD *)v70 = 0;
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v70 + 16) = 0;
  v244 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v220, (void **)v70);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v244, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v220, 1uLL);
  v71 = v220;
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = operator new(8uLL);
  v232 = v73;
  *v73 = v72;
  v233 = v73 + 1;
  v234 = v73 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(8uLL);
  __p = v75;
  *v75 = v74;
  v231 = v75 + 1;
  v230 = v75 + 1;
  v242 = MIL::IRTensorValueType::MakeWithShape();
  v76 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v77 = operator new(8uLL);
  v213 = v77;
  *v77 = v76;
  v214 = v77 + 1;
  v215 = v77 + 1;
  v243 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v78 = v217;
  v218 = v217;
  if (v217)
  {
    v79 = (_QWORD *)operator new();
    v80 = v217;
    *v79 = &unk_24BFE7320;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v80;
  }
  else
  {
    v79 = 0;
  }
  v219 = v79;
  v217 = 0;
  v81 = v71[2];
  v82 = v71[1];
  if (v82 >= v81)
  {
    v84 = (v82 - *v71) >> 4;
    v85 = v84 + 1;
    if ((unint64_t)(v84 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v86 = v81 - *v71;
    if (v86 >> 3 > v85)
      v85 = v86 >> 3;
    if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0)
      v87 = 0xFFFFFFFFFFFFFFFLL;
    else
      v87 = v85;
    v248 = v71 + 2;
    v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v71 + 2), v87);
    v90 = &v88[16 * v84];
    *(_QWORD *)v90 = v78;
    *((_QWORD *)v90 + 1) = v79;
    v218 = 0;
    v219 = 0;
    v92 = *v71;
    v91 = v71[1];
    if (v91 == *v71)
    {
      v95 = (void **)v71[1];
      v93 = &v88[16 * v84];
    }
    else
    {
      v93 = &v88[16 * v84];
      do
      {
        v94 = *((_OWORD *)v91 - 1);
        v91 -= 16;
        *((_OWORD *)v93 - 1) = v94;
        v93 -= 16;
        *(_QWORD *)v91 = 0;
        *((_QWORD *)v91 + 1) = 0;
      }
      while (v91 != v92);
      v95 = (void **)*v71;
      v91 = v71[1];
    }
    v83 = v90 + 16;
    *v71 = v93;
    v244 = v95;
    v245 = (uint64_t)v95;
    v71[1] = v90 + 16;
    v246 = (uint64_t)v91;
    v96 = v71[2];
    v71[2] = &v88[16 * v89];
    v247 = v96;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v244);
  }
  else
  {
    *(_QWORD *)v82 = v78;
    *((_QWORD *)v82 + 1) = v79;
    v83 = v82 + 16;
    v218 = 0;
    v219 = 0;
  }
  v71[1] = v83;
  v97 = v217;
  v217 = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = v216;
  if (v216)
  {
    v99 = (unint64_t *)&v216->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  *(_OWORD *)v211 = *(_OWORD *)a2;
  v212 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v101 = (uint64_t)v236;
  v209 = (uint64_t)v236;
  if (v236)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v102 = 0;
  }
  v210 = v102;
  v236 = 0;
  v207 = v220;
  if (v220)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = v220;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = (std::__shared_weak_count_vtbl *)v104;
  }
  else
  {
    v103 = 0;
  }
  v208 = v103;
  v220 = 0;
  v239[0] = &unk_24BFE7440;
  v239[1] = ANEMachineIR::H2022::Validators::ValidateNeAdd;
  v240 = (MIL::Validation::TensorDTypeConstraints *)v239;
  v238 = 0;
  MIL::IROperator::Make();
  v105 = v238;
  if (v238 == v237)
  {
    v106 = 4;
    v105 = v237;
  }
  else
  {
    if (!v238)
      goto LABEL_117;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_117:
  v107 = v240;
  if (v240 == (MIL::Validation::TensorDTypeConstraints *)v239)
  {
    v108 = 4;
    v107 = (MIL::Validation::TensorDTypeConstraints *)v239;
    goto LABEL_121;
  }
  if (v240)
  {
    v108 = 5;
LABEL_121:
    v107 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v107 + 8 * v108))();
  }
  if (v208)
  {
    v109 = &v208->__shared_owners_;
    do
      v110 = __ldaxr((unint64_t *)v109);
    while (__stlxr(v110 - 1, (unint64_t *)v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  if (v210)
  {
    v111 = &v210->__shared_owners_;
    do
      v112 = __ldaxr((unint64_t *)v111);
    while (__stlxr(v112 - 1, (unint64_t *)v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  if (SHIBYTE(v212) < 0)
    operator delete(v211[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v107);
  v113 = v244;
  std::string::basic_string[abi:ne180100]<0>(&v203, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v205 = Scalar;
  if (Scalar)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = Scalar;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v206 = v114;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v201, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v113 + 3))(v113, &v205, v201);
  if (v202 < 0)
    operator delete(v201[0]);
  v116 = v206;
  if (v206)
  {
    v117 = (unint64_t *)&v206->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = Scalar;
  Scalar = 0;
  if (v119)
    (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
  if (v204 < 0)
    operator delete(v203);
  v120 = v244;
  std::string::basic_string[abi:ne180100]<0>(&v197, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v199 = Scalar;
  if (Scalar)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = Scalar;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v200 = v121;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "YDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v120 + 3))(v120, &v199, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v123 = v200;
  if (v200)
  {
    v124 = (unint64_t *)&v200->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = Scalar;
  Scalar = 0;
  if (v126)
    (*((void (**)(std::__shared_weak_count_vtbl *))v126->~__shared_weak_count + 1))(v126);
  if (v198 < 0)
    operator delete(v197);
  v127 = v244;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v193 = Scalar;
  if (Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v194 = v128;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v191, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v127 + 3))(v127, &v193, v191);
  if (v192 < 0)
    operator delete(v191[0]);
  v130 = v194;
  if (v194)
  {
    v131 = (unint64_t *)&v194->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = Scalar;
  Scalar = 0;
  if (v133)
    (*((void (**)(std::__shared_weak_count_vtbl *))v133->~__shared_weak_count + 1))(v133);
  v134 = *a3;
  v189 = v244;
  if (v244)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = v244;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = (std::__shared_weak_count_vtbl *)v136;
  }
  else
  {
    v135 = 0;
  }
  v190 = v135;
  v244 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v134 + 56))(v134, &v189);
  v137 = v190;
  if (v190)
  {
    v138 = (unint64_t *)&v190->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (MIL::Validation::TensorSymbolicShapeConstraints *)v244;
  v244 = 0;
  if (v140)
    v140 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v140 + 8))(v140);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v140);
  v141 = v244;
  std::string::basic_string[abi:ne180100]<0>(&v185, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v187 = Scalar;
  if (Scalar)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = Scalar;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v188 = v142;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v183, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v141 + 5))(v141, &v187, v183);
  if (v184 < 0)
    operator delete(v183[0]);
  v144 = v188;
  if (v188)
  {
    v145 = (unint64_t *)&v188->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = Scalar;
  Scalar = 0;
  if (v147)
    (*((void (**)(std::__shared_weak_count_vtbl *))v147->~__shared_weak_count + 1))(v147);
  if (v186 < 0)
    operator delete(v185);
  v148 = v244;
  std::string::basic_string[abi:ne180100]<0>(&v179, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v181 = Scalar;
  if (Scalar)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = Scalar;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v182 = v149;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v177, "YShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v148 + 5))(v148, &v181, v177);
  if (v178 < 0)
    operator delete(v177[0]);
  v151 = v182;
  if (v182)
  {
    v152 = (unint64_t *)&v182->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = Scalar;
  Scalar = 0;
  if (v154)
    (*((void (**)(std::__shared_weak_count_vtbl *))v154->~__shared_weak_count + 1))(v154);
  if (v180 < 0)
    operator delete(v179);
  v155 = v244;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v175 = Scalar;
  if (Scalar)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = Scalar;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v157;
  }
  else
  {
    v156 = 0;
  }
  v176 = v156;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v173, "XYBroadcastShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v155 + 5))(v155, &v175, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v158 = v176;
  if (v176)
  {
    v159 = (unint64_t *)&v176->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = Scalar;
  Scalar = 0;
  if (v161)
    (*((void (**)(std::__shared_weak_count_vtbl *))v161->~__shared_weak_count + 1))(v161);
  v162 = *a3;
  v171 = v244;
  if (v244)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = v244;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = (std::__shared_weak_count_vtbl *)v164;
  }
  else
  {
    v163 = 0;
  }
  v172 = v163;
  v244 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v162 + 56))(v162, &v171);
  v165 = v172;
  if (v172)
  {
    v166 = (unint64_t *)&v172->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = v244;
  v244 = 0;
  if (v168)
    (*((void (**)(void **))*v168 + 1))(v168);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v220, 0);
  result = (uint64_t)v236;
  if (v236)
  {
    v170 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v236);
    return MEMORY[0x20BCFF140](v170, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068DA474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void **a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v73 = *(_QWORD *)(v71 - 112);
  *(_QWORD *)(v71 - 112) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v70;
  *v70 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::NeMaximum::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  void **v65;
  char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  char **v74;
  _QWORD *v75;
  uint64_t v76;
  MIL::Validation::TensorDTypeConstraints *v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  MIL::Validation::TensorSymbolicShapeConstraints *v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void **v138;
  uint64_t result;
  uint64_t v140;
  void **v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149;
  char v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155;
  char v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167;
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173;
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  char **v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  uint64_t v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  char **v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count *v193;
  void *__p;
  void *v195;
  _QWORD *v196;
  void *v197;
  void *v198;
  _QWORD *v199;
  std::__shared_weak_count *v200;
  _QWORD *v201;
  _BYTE v202[24];
  _BYTE *v203;
  _QWORD v204[3];
  MIL::Validation::TensorDTypeConstraints *v205;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v207;
  uint64_t v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char **v213;
  uint64_t v214;

  v214 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v201 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v207 = (uint64_t)&v8->~__shared_weak_count_0;
  v208 = (uint64_t)&v8->~__shared_weak_count_0;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v197 = v10;
  *v10 = v9;
  v198 = v10 + 1;
  v199 = v10 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v196 = v12 + 1;
  v195 = v12 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v183);
  v13 = v183;
  v183 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v200;
  if (v200)
  {
    p_shared_owners = (unint64_t *)&v200->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (Scalar)
  {
    v207 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v201;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v207 = (uint64_t)&v19->~__shared_weak_count_0;
  v208 = (uint64_t)&v19->~__shared_weak_count_0;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v197 = v21;
  *v21 = v20;
  v198 = v21 + 1;
  v199 = v21 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v196 = v23 + 1;
  v195 = v23 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v183);
  v24 = v183;
  v183 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v193;
  if (v193)
  {
    v26 = (unint64_t *)&v193->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (Scalar)
  {
    v207 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v28 = v201;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v28, "post_right_shift", (uint64_t *)&v209);
  v30 = v209;
  v209 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = v192;
  if (v192)
  {
    v32 = (unint64_t *)&v192->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v201;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v34, "post_scale", (uint64_t *)&v209);
  v36 = v209;
  v209 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = v191;
  if (v191)
  {
    v38 = (unint64_t *)&v191->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v190 = 0;
  v40 = operator new();
  *(_QWORD *)v40 = 0;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 0;
  v209 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, (void **)v40);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v209, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v190, 1uLL);
  v41 = v190;
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v197 = v43;
  *v43 = v42;
  v198 = v43 + 1;
  v199 = v43 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  __p = v45;
  *v45 = v44;
  v196 = v45 + 1;
  v195 = v45 + 1;
  v207 = MIL::IRTensorValueType::MakeWithShape();
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v183 = v47;
  *v47 = v46;
  v184 = v47 + 1;
  v185 = v47 + 1;
  v208 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v48 = v187;
  v188 = v187;
  if (v187)
  {
    v49 = (_QWORD *)operator new();
    v50 = v187;
    *v49 = &unk_24BFE7320;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  v189 = v49;
  v187 = 0;
  v51 = v41[2];
  v52 = v41[1];
  if (v52 >= v51)
  {
    v54 = (v52 - *v41) >> 4;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v56 = v51 - *v41;
    if (v56 >> 3 > v55)
      v55 = v56 >> 3;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
      v57 = 0xFFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    v213 = v41 + 2;
    v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v41 + 2), v57);
    v60 = &v58[16 * v54];
    *(_QWORD *)v60 = v48;
    *((_QWORD *)v60 + 1) = v49;
    v188 = 0;
    v189 = 0;
    v62 = *v41;
    v61 = v41[1];
    if (v61 == *v41)
    {
      v65 = (void **)v41[1];
      v63 = &v58[16 * v54];
    }
    else
    {
      v63 = &v58[16 * v54];
      do
      {
        v64 = *((_OWORD *)v61 - 1);
        v61 -= 16;
        *((_OWORD *)v63 - 1) = v64;
        v63 -= 16;
        *(_QWORD *)v61 = 0;
        *((_QWORD *)v61 + 1) = 0;
      }
      while (v61 != v62);
      v65 = (void **)*v41;
      v61 = v41[1];
    }
    v53 = v60 + 16;
    *v41 = v63;
    v209 = v65;
    v210 = (uint64_t)v65;
    v41[1] = v60 + 16;
    v211 = (uint64_t)v61;
    v66 = v41[2];
    v41[2] = &v58[16 * v59];
    v212 = v66;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v209);
  }
  else
  {
    *(_QWORD *)v52 = v48;
    *((_QWORD *)v52 + 1) = v49;
    v53 = v52 + 16;
    v188 = 0;
    v189 = 0;
  }
  v41[1] = v53;
  v67 = v187;
  v187 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = v186;
  if (v186)
  {
    v69 = (unint64_t *)&v186->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  *(_OWORD *)v181 = *(_OWORD *)a2;
  v182 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v71 = (uint64_t)v201;
  v179 = (uint64_t)v201;
  if (v201)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = (std::__shared_weak_count_vtbl *)v71;
  }
  else
  {
    v72 = 0;
  }
  v180 = v72;
  v201 = 0;
  v177 = v190;
  if (v190)
  {
    v73 = (std::__shared_weak_count *)operator new();
    v74 = v190;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = (std::__shared_weak_count_vtbl *)v74;
  }
  else
  {
    v73 = 0;
  }
  v178 = v73;
  v190 = 0;
  v204[0] = &unk_24BFE7440;
  v204[1] = ANEMachineIR::H2022::Validators::ValidateNeMaximum;
  v205 = (MIL::Validation::TensorDTypeConstraints *)v204;
  v203 = 0;
  MIL::IROperator::Make();
  v75 = v203;
  if (v203 == v202)
  {
    v76 = 4;
    v75 = v202;
  }
  else
  {
    if (!v203)
      goto LABEL_82;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_82:
  v77 = v205;
  if (v205 == (MIL::Validation::TensorDTypeConstraints *)v204)
  {
    v78 = 4;
    v77 = (MIL::Validation::TensorDTypeConstraints *)v204;
    goto LABEL_86;
  }
  if (v205)
  {
    v78 = 5;
LABEL_86:
    v77 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v77 + 8 * v78))();
  }
  if (v178)
  {
    v79 = &v178->__shared_owners_;
    do
      v80 = __ldaxr((unint64_t *)v79);
    while (__stlxr(v80 - 1, (unint64_t *)v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  if (v180)
  {
    v81 = &v180->__shared_owners_;
    do
      v82 = __ldaxr((unint64_t *)v81);
    while (__stlxr(v82 - 1, (unint64_t *)v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if (SHIBYTE(v182) < 0)
    operator delete(v181[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v77);
  v83 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v175 = Scalar;
  if (Scalar)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = Scalar;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v176 = v84;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v83 + 3))(v83, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v86 = v176;
  if (v176)
  {
    v87 = (unint64_t *)&v176->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v174 < 0)
    operator delete(v173);
  v90 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v167, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v169 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v170 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "YDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v93 = v170;
  if (v170)
  {
    v94 = (unint64_t *)&v170->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v168 < 0)
    operator delete(v167);
  v97 = v209;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v163 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v164 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v163, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v100 = v164;
  if (v164)
  {
    v101 = (unint64_t *)&v164->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = *a3;
  v159 = v209;
  if (v209)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v209;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v160 = v105;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v159);
  v107 = v160;
  if (v160)
  {
    v108 = (unint64_t *)&v160->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)v209;
  v209 = 0;
  if (v110)
    v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v110 + 8))(v110);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v110);
  v111 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v155, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v157 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v158 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 5))(v111, &v157, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v114 = v158;
  if (v158)
  {
    v115 = (unint64_t *)&v158->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v156 < 0)
    operator delete(v155);
  v118 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v149, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v151 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v152 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "YShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v118 + 5))(v118, &v151, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v121 = v152;
  if (v152)
  {
    v122 = (unint64_t *)&v152->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  if (v150 < 0)
    operator delete(v149);
  v125 = v209;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v145 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v146 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "XYBroadcastShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v125 + 5))(v125, &v145, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v128 = v146;
  if (v146)
  {
    v129 = (unint64_t *)&v146->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  v132 = *a3;
  v141 = v209;
  if (v209)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v209;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v142 = v133;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v141);
  v135 = v142;
  if (v142)
  {
    v136 = (unint64_t *)&v142->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v209;
  v209 = 0;
  if (v138)
    (*((void (**)(void **))*v138 + 1))(v138);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, 0);
  result = (uint64_t)v201;
  if (v201)
  {
    v140 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v201);
    return MEMORY[0x20BCFF140](v140, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068DBB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void **a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v73 = *(_QWORD *)(v71 - 112);
  *(_QWORD *)(v71 - 112) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v70;
  *v70 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::NeMinimum::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  void **v65;
  char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  char **v74;
  _QWORD *v75;
  uint64_t v76;
  MIL::Validation::TensorDTypeConstraints *v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  MIL::Validation::TensorSymbolicShapeConstraints *v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void **v138;
  uint64_t result;
  uint64_t v140;
  void **v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149;
  char v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155;
  char v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167;
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173;
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  char **v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  uint64_t v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  char **v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count *v193;
  void *__p;
  void *v195;
  _QWORD *v196;
  void *v197;
  void *v198;
  _QWORD *v199;
  std::__shared_weak_count *v200;
  _QWORD *v201;
  _BYTE v202[24];
  _BYTE *v203;
  _QWORD v204[3];
  MIL::Validation::TensorDTypeConstraints *v205;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v207;
  uint64_t v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char **v213;
  uint64_t v214;

  v214 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v201 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v207 = (uint64_t)&v8->~__shared_weak_count_0;
  v208 = (uint64_t)&v8->~__shared_weak_count_0;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v197 = v10;
  *v10 = v9;
  v198 = v10 + 1;
  v199 = v10 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v196 = v12 + 1;
  v195 = v12 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v183);
  v13 = v183;
  v183 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v200;
  if (v200)
  {
    p_shared_owners = (unint64_t *)&v200->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (Scalar)
  {
    v207 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v201;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v207 = (uint64_t)&v19->~__shared_weak_count_0;
  v208 = (uint64_t)&v19->~__shared_weak_count_0;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v197 = v21;
  *v21 = v20;
  v198 = v21 + 1;
  v199 = v21 + 1;
  v210 = MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v196 = v23 + 1;
  v195 = v23 + 1;
  v211 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v183);
  v24 = v183;
  v183 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v193;
  if (v193)
  {
    v26 = (unint64_t *)&v193->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (Scalar)
  {
    v207 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v28 = v201;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v28, "post_right_shift", (uint64_t *)&v209);
  v30 = v209;
  v209 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = v192;
  if (v192)
  {
    v32 = (unint64_t *)&v192->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v201;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v34, "post_scale", (uint64_t *)&v209);
  v36 = v209;
  v209 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = v191;
  if (v191)
  {
    v38 = (unint64_t *)&v191->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v190 = 0;
  v40 = operator new();
  *(_QWORD *)v40 = 0;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 0;
  v209 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, (void **)v40);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v209, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v190, 1uLL);
  v41 = v190;
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v197 = v43;
  *v43 = v42;
  v198 = v43 + 1;
  v199 = v43 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  __p = v45;
  *v45 = v44;
  v196 = v45 + 1;
  v195 = v45 + 1;
  v207 = MIL::IRTensorValueType::MakeWithShape();
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v183 = v47;
  *v47 = v46;
  v184 = v47 + 1;
  v185 = v47 + 1;
  v208 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v48 = v187;
  v188 = v187;
  if (v187)
  {
    v49 = (_QWORD *)operator new();
    v50 = v187;
    *v49 = &unk_24BFE7320;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  v189 = v49;
  v187 = 0;
  v51 = v41[2];
  v52 = v41[1];
  if (v52 >= v51)
  {
    v54 = (v52 - *v41) >> 4;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v56 = v51 - *v41;
    if (v56 >> 3 > v55)
      v55 = v56 >> 3;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
      v57 = 0xFFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    v213 = v41 + 2;
    v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v41 + 2), v57);
    v60 = &v58[16 * v54];
    *(_QWORD *)v60 = v48;
    *((_QWORD *)v60 + 1) = v49;
    v188 = 0;
    v189 = 0;
    v62 = *v41;
    v61 = v41[1];
    if (v61 == *v41)
    {
      v65 = (void **)v41[1];
      v63 = &v58[16 * v54];
    }
    else
    {
      v63 = &v58[16 * v54];
      do
      {
        v64 = *((_OWORD *)v61 - 1);
        v61 -= 16;
        *((_OWORD *)v63 - 1) = v64;
        v63 -= 16;
        *(_QWORD *)v61 = 0;
        *((_QWORD *)v61 + 1) = 0;
      }
      while (v61 != v62);
      v65 = (void **)*v41;
      v61 = v41[1];
    }
    v53 = v60 + 16;
    *v41 = v63;
    v209 = v65;
    v210 = (uint64_t)v65;
    v41[1] = v60 + 16;
    v211 = (uint64_t)v61;
    v66 = v41[2];
    v41[2] = &v58[16 * v59];
    v212 = v66;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v209);
  }
  else
  {
    *(_QWORD *)v52 = v48;
    *((_QWORD *)v52 + 1) = v49;
    v53 = v52 + 16;
    v188 = 0;
    v189 = 0;
  }
  v41[1] = v53;
  v67 = v187;
  v187 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = v186;
  if (v186)
  {
    v69 = (unint64_t *)&v186->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (__p)
  {
    v195 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  *(_OWORD *)v181 = *(_OWORD *)a2;
  v182 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v71 = (uint64_t)v201;
  v179 = (uint64_t)v201;
  if (v201)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = (std::__shared_weak_count_vtbl *)v71;
  }
  else
  {
    v72 = 0;
  }
  v180 = v72;
  v201 = 0;
  v177 = v190;
  if (v190)
  {
    v73 = (std::__shared_weak_count *)operator new();
    v74 = v190;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = (std::__shared_weak_count_vtbl *)v74;
  }
  else
  {
    v73 = 0;
  }
  v178 = v73;
  v190 = 0;
  v204[0] = &unk_24BFE7440;
  v204[1] = ANEMachineIR::H2022::Validators::ValidateNeMinimum;
  v205 = (MIL::Validation::TensorDTypeConstraints *)v204;
  v203 = 0;
  MIL::IROperator::Make();
  v75 = v203;
  if (v203 == v202)
  {
    v76 = 4;
    v75 = v202;
  }
  else
  {
    if (!v203)
      goto LABEL_82;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_82:
  v77 = v205;
  if (v205 == (MIL::Validation::TensorDTypeConstraints *)v204)
  {
    v78 = 4;
    v77 = (MIL::Validation::TensorDTypeConstraints *)v204;
    goto LABEL_86;
  }
  if (v205)
  {
    v78 = 5;
LABEL_86:
    v77 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v77 + 8 * v78))();
  }
  if (v178)
  {
    v79 = &v178->__shared_owners_;
    do
      v80 = __ldaxr((unint64_t *)v79);
    while (__stlxr(v80 - 1, (unint64_t *)v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  if (v180)
  {
    v81 = &v180->__shared_owners_;
    do
      v82 = __ldaxr((unint64_t *)v81);
    while (__stlxr(v82 - 1, (unint64_t *)v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if (SHIBYTE(v182) < 0)
    operator delete(v181[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v77);
  v83 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v175 = Scalar;
  if (Scalar)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = Scalar;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v176 = v84;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v83 + 3))(v83, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v86 = v176;
  if (v176)
  {
    v87 = (unint64_t *)&v176->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = Scalar;
  Scalar = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v174 < 0)
    operator delete(v173);
  v90 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v167, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v169 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v170 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "YDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v93 = v170;
  if (v170)
  {
    v94 = (unint64_t *)&v170->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v168 < 0)
    operator delete(v167);
  v97 = v209;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v163 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v164 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v163, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v100 = v164;
  if (v164)
  {
    v101 = (unint64_t *)&v164->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = *a3;
  v159 = v209;
  if (v209)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v209;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v160 = v105;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v159);
  v107 = v160;
  if (v160)
  {
    v108 = (unint64_t *)&v160->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)v209;
  v209 = 0;
  if (v110)
    v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v110 + 8))(v110);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v110);
  v111 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v155, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v157 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v158 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 5))(v111, &v157, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v114 = v158;
  if (v158)
  {
    v115 = (unint64_t *)&v158->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v156 < 0)
    operator delete(v155);
  v118 = v209;
  std::string::basic_string[abi:ne180100]<0>(&v149, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v151 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v152 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "YShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v118 + 5))(v118, &v151, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v121 = v152;
  if (v152)
  {
    v122 = (unint64_t *)&v152->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  if (v150 < 0)
    operator delete(v149);
  v125 = v209;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v145 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v146 = v126;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "XYBroadcastShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v125 + 5))(v125, &v145, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v128 = v146;
  if (v146)
  {
    v129 = (unint64_t *)&v146->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  v132 = *a3;
  v141 = v209;
  if (v209)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v209;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v142 = v133;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v141);
  v135 = v142;
  if (v142)
  {
    v136 = (unint64_t *)&v142->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v209;
  v209 = 0;
  if (v138)
    (*((void (**)(void **))*v138 + 1))(v138);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v190, 0);
  result = (uint64_t)v201;
  if (v201)
  {
    v140 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v201);
    return MEMORY[0x20BCFF140](v140, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068DD128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void **a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v73 = *(_QWORD *)(v71 - 112);
  *(_QWORD *)(v71 - 112) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v70;
  *v70 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::NeMul::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  void **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char **v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  __int128 v82;
  void **v83;
  char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  char **v92;
  _QWORD *v93;
  uint64_t v94;
  MIL::Validation::TensorDTypeConstraints *v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  void **v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void **v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  MIL::Validation::TensorSymbolicShapeConstraints *v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count_vtbl *v135;
  void **v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count_vtbl *v142;
  void **v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void **v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void **v156;
  uint64_t result;
  uint64_t v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167;
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173;
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void **v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  void *v183[2];
  char v184;
  void *v185;
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191;
  char v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  char **v195;
  std::__shared_weak_count *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  void *v199[2];
  uint64_t v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  char **v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count *v214;
  void *__p;
  void *v216;
  _QWORD *v217;
  void *v218;
  void *v219;
  _QWORD *v220;
  std::__shared_weak_count *v221;
  _QWORD *v222;
  _BYTE v223[24];
  _BYTE *v224;
  _QWORD v225[3];
  MIL::Validation::TensorDTypeConstraints *v226;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v228;
  uint64_t v229;
  void **v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char **v234;
  uint64_t v235;

  v235 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v222 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v228 = (uint64_t)&v8->~__shared_weak_count_0;
  v229 = (uint64_t)&v8->~__shared_weak_count_0;
  v230 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v218 = v10;
  *v10 = v9;
  v219 = v10 + 1;
  v220 = v10 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v217 = v12 + 1;
  v216 = v12 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v201);
  v13 = v201;
  v201 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v221;
  if (v221)
  {
    p_shared_owners = (unint64_t *)&v221->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (Scalar)
  {
    v228 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v222;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v228 = (uint64_t)&v19->~__shared_weak_count_0;
  v229 = (uint64_t)&v19->~__shared_weak_count_0;
  v230 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v218 = v21;
  *v21 = v20;
  v219 = v21 + 1;
  v220 = v21 + 1;
  v231 = MIL::IRTensorValueType::MakeWithShape();
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v217 = v23 + 1;
  v216 = v23 + 1;
  v232 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v201);
  v24 = v201;
  v201 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v214;
  if (v214)
  {
    v26 = (unint64_t *)&v214->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (Scalar)
  {
    v228 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v28 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v28, "bias", (uint64_t *)&v230);
  v30 = v230;
  v230 = 0;
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  v31 = v213;
  if (v213)
  {
    v32 = (unint64_t *)&v213->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 48))(*((_QWORD *)v29 + 5), 1);
  v34 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v34, "acc_left_shift", (uint64_t *)&v230);
  v36 = v230;
  v230 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = v212;
  if (v212)
  {
    v38 = (unint64_t *)&v212->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 48))(*((_QWORD *)v35 + 5), 1);
  v40 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v40, "acc_bias_shift", (uint64_t *)&v230);
  v42 = v230;
  v230 = 0;
  if (v42)
    (*((void (**)(void **))*v42 + 1))(v42);
  v43 = v211;
  if (v211)
  {
    v44 = (unint64_t *)&v211->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 48))(*((_QWORD *)v41 + 5), 1);
  v46 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v46, "post_right_shift", (uint64_t *)&v230);
  v48 = v230;
  v230 = 0;
  if (v48)
    (*((void (**)(void **))*v48 + 1))(v48);
  v49 = v210;
  if (v210)
  {
    v50 = (unint64_t *)&v210->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 48))(*((_QWORD *)v47 + 5), 1);
  v52 = v222;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v52, "post_scale", (uint64_t *)&v230);
  v54 = v230;
  v230 = 0;
  if (v54)
    (*((void (**)(void **))*v54 + 1))(v54);
  v55 = v209;
  if (v209)
  {
    v56 = (unint64_t *)&v209->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v208 = 0;
  v58 = operator new();
  *(_QWORD *)v58 = 0;
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  v230 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v208, (void **)v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v230, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v208, 1uLL);
  v59 = v208;
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  v218 = v61;
  *v61 = v60;
  v219 = v61 + 1;
  v220 = v61 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(8uLL);
  __p = v63;
  *v63 = v62;
  v217 = v63 + 1;
  v216 = v63 + 1;
  v228 = MIL::IRTensorValueType::MakeWithShape();
  v64 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v65 = operator new(8uLL);
  v201 = v65;
  *v65 = v64;
  v202 = v65 + 1;
  v203 = v65 + 1;
  v229 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v66 = v205;
  v206 = v205;
  if (v205)
  {
    v67 = (_QWORD *)operator new();
    v68 = v205;
    *v67 = &unk_24BFE7320;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v68;
  }
  else
  {
    v67 = 0;
  }
  v207 = v67;
  v205 = 0;
  v69 = v59[2];
  v70 = v59[1];
  if (v70 >= v69)
  {
    v72 = (v70 - *v59) >> 4;
    v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v74 = v69 - *v59;
    if (v74 >> 3 > v73)
      v73 = v74 >> 3;
    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
      v75 = 0xFFFFFFFFFFFFFFFLL;
    else
      v75 = v73;
    v234 = v59 + 2;
    v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v59 + 2), v75);
    v78 = &v76[16 * v72];
    *(_QWORD *)v78 = v66;
    *((_QWORD *)v78 + 1) = v67;
    v206 = 0;
    v207 = 0;
    v80 = *v59;
    v79 = v59[1];
    if (v79 == *v59)
    {
      v83 = (void **)v59[1];
      v81 = &v76[16 * v72];
    }
    else
    {
      v81 = &v76[16 * v72];
      do
      {
        v82 = *((_OWORD *)v79 - 1);
        v79 -= 16;
        *((_OWORD *)v81 - 1) = v82;
        v81 -= 16;
        *(_QWORD *)v79 = 0;
        *((_QWORD *)v79 + 1) = 0;
      }
      while (v79 != v80);
      v83 = (void **)*v59;
      v79 = v59[1];
    }
    v71 = v78 + 16;
    *v59 = v81;
    v230 = v83;
    v231 = (uint64_t)v83;
    v59[1] = v78 + 16;
    v232 = (uint64_t)v79;
    v84 = v59[2];
    v59[2] = &v76[16 * v77];
    v233 = v84;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v230);
  }
  else
  {
    *(_QWORD *)v70 = v66;
    *((_QWORD *)v70 + 1) = v67;
    v71 = v70 + 16;
    v206 = 0;
    v207 = 0;
  }
  v59[1] = v71;
  v85 = v205;
  v205 = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = v204;
  if (v204)
  {
    v87 = (unint64_t *)&v204->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (__p)
  {
    v216 = __p;
    operator delete(__p);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  *(_OWORD *)v199 = *(_OWORD *)a2;
  v200 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v89 = (uint64_t)v222;
  v197 = (uint64_t)v222;
  if (v222)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v90 = 0;
  }
  v198 = v90;
  v222 = 0;
  v195 = v208;
  if (v208)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v208;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v91 = 0;
  }
  v196 = v91;
  v208 = 0;
  v225[0] = &unk_24BFE7440;
  v225[1] = ANEMachineIR::H2022::Validators::ValidateNeMul;
  v226 = (MIL::Validation::TensorDTypeConstraints *)v225;
  v224 = 0;
  MIL::IROperator::Make();
  v93 = v224;
  if (v224 == v223)
  {
    v94 = 4;
    v93 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_103;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_103:
  v95 = v226;
  if (v226 == (MIL::Validation::TensorDTypeConstraints *)v225)
  {
    v96 = 4;
    v95 = (MIL::Validation::TensorDTypeConstraints *)v225;
    goto LABEL_107;
  }
  if (v226)
  {
    v96 = 5;
LABEL_107:
    v95 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v95 + 8 * v96))();
  }
  if (v196)
  {
    v97 = &v196->__shared_owners_;
    do
      v98 = __ldaxr((unint64_t *)v97);
    while (__stlxr(v98 - 1, (unint64_t *)v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  if (v198)
  {
    v99 = &v198->__shared_owners_;
    do
      v100 = __ldaxr((unint64_t *)v99);
    while (__stlxr(v100 - 1, (unint64_t *)v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  if (SHIBYTE(v200) < 0)
    operator delete(v199[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v95);
  v101 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v191, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v193 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v194 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v101 + 3))(v101, &v193, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v104 = v194;
  if (v194)
  {
    v105 = (unint64_t *)&v194->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v192 < 0)
    operator delete(v191);
  v108 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v185, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v187 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v188 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v183, "YDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v108 + 3))(v108, &v187, v183);
  if (v184 < 0)
    operator delete(v183[0]);
  v111 = v188;
  if (v188)
  {
    v112 = (unint64_t *)&v188->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v186 < 0)
    operator delete(v185);
  v115 = v230;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v181 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v182 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v115 + 3))(v115, &v181, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v118 = v182;
  if (v182)
  {
    v119 = (unint64_t *)&v182->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  v122 = *a3;
  v177 = v230;
  if (v230)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v230;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
  }
  else
  {
    v123 = 0;
  }
  v178 = v123;
  v230 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v122 + 56))(v122, &v177);
  v125 = v178;
  if (v178)
  {
    v126 = (unint64_t *)&v178->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (MIL::Validation::TensorSymbolicShapeConstraints *)v230;
  v230 = 0;
  if (v128)
    v128 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v128 + 8))(v128);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v128);
  v129 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v175 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v176 = v130;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v129 + 5))(v129, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v132 = v176;
  if (v176)
  {
    v133 = (unint64_t *)&v176->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*((void (**)(std::__shared_weak_count_vtbl *))v135->~__shared_weak_count + 1))(v135);
  if (v174 < 0)
    operator delete(v173);
  v136 = v230;
  std::string::basic_string[abi:ne180100]<0>(&v167, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v169 = Scalar;
  if (Scalar)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = Scalar;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v170 = v137;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "YShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v136 + 5))(v136, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v139 = v170;
  if (v170)
  {
    v140 = (unint64_t *)&v170->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = Scalar;
  Scalar = 0;
  if (v142)
    (*((void (**)(std::__shared_weak_count_vtbl *))v142->~__shared_weak_count + 1))(v142);
  if (v168 < 0)
    operator delete(v167);
  v143 = v230;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v163 = Scalar;
  if (Scalar)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = Scalar;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v164 = v144;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "XYBroadcastShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v143 + 5))(v143, &v163, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v146 = v164;
  if (v164)
  {
    v147 = (unint64_t *)&v164->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*((void (**)(std::__shared_weak_count_vtbl *))v149->~__shared_weak_count + 1))(v149);
  v150 = *a3;
  v159 = v230;
  if (v230)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = v230;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = (std::__shared_weak_count_vtbl *)v152;
  }
  else
  {
    v151 = 0;
  }
  v160 = v151;
  v230 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v150 + 56))(v150, &v159);
  v153 = v160;
  if (v160)
  {
    v154 = (unint64_t *)&v160->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = v230;
  v230 = 0;
  if (v156)
    (*((void (**)(void **))*v156 + 1))(v156);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v208, 0);
  result = (uint64_t)v222;
  if (v222)
  {
    v158 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v222);
    return MEMORY[0x20BCFF140](v158, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068DE940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void **a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v73 = *(_QWORD *)(v71 - 112);
  *(_QWORD *)(v71 - 112) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *v70;
  *v70 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::NeSquare::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void **v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  void **v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void **v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  void **v72;
  char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  char **v81;
  _QWORD *v82;
  uint64_t v83;
  MIL::Validation::TensorDTypeConstraints *v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  MIL::Validation::TensorSymbolicShapeConstraints *v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  void **v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void **v131;
  uint64_t result;
  uint64_t v133;
  void **v134;
  std::__shared_weak_count *v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void **v146;
  std::__shared_weak_count *v147;
  void *v148[2];
  char v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  void *v154;
  char v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  char **v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  void *v162[2];
  uint64_t v163;
  void *v164;
  void *v165;
  _QWORD *v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  char **v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count *v176;
  void *__p;
  void *v178;
  _QWORD *v179;
  void *v180;
  void *v181;
  _QWORD *v182;
  std::__shared_weak_count *v183;
  _QWORD *v184;
  _BYTE v185[24];
  _BYTE *v186;
  _QWORD v187[3];
  MIL::Validation::TensorDTypeConstraints *v188;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v190;
  uint64_t v191;
  void **v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char **v196;
  uint64_t v197;

  v197 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v184 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v190 = (uint64_t)&v8->~__shared_weak_count_0;
  v191 = (uint64_t)&v8->~__shared_weak_count_0;
  v192 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v180 = v10;
  *v10 = v9;
  v181 = v10 + 1;
  v182 = v10 + 1;
  v193 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v178 = v12 + 1;
  v179 = v12 + 1;
  v194 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v164);
  v13 = v164;
  v164 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v183;
  if (v183)
  {
    p_shared_owners = (unint64_t *)&v183->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (Scalar)
  {
    v190 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "bias", (uint64_t *)&v192);
  v19 = v192;
  v192 = 0;
  if (v19)
    (*((void (**)(void **))*v19 + 1))(v19);
  v20 = v176;
  if (v176)
  {
    v21 = (unint64_t *)&v176->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v23, "acc_left_shift", (uint64_t *)&v192);
  v25 = v192;
  v192 = 0;
  if (v25)
    (*((void (**)(void **))*v25 + 1))(v25);
  v26 = v175;
  if (v175)
  {
    v27 = (unint64_t *)&v175->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 48))(*((_QWORD *)v24 + 5), 1);
  v29 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v29, "acc_bias_shift", (uint64_t *)&v192);
  v31 = v192;
  v192 = 0;
  if (v31)
    (*((void (**)(void **))*v31 + 1))(v31);
  v32 = v174;
  if (v174)
  {
    v33 = (unint64_t *)&v174->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 48))(*((_QWORD *)v30 + 5), 1);
  v35 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v35, "post_right_shift", (uint64_t *)&v192);
  v37 = v192;
  v192 = 0;
  if (v37)
    (*((void (**)(void **))*v37 + 1))(v37);
  v38 = v173;
  if (v173)
  {
    v39 = (unint64_t *)&v173->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 48))(*((_QWORD *)v36 + 5), 1);
  v41 = v184;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v41, "post_scale", (uint64_t *)&v192);
  v43 = v192;
  v192 = 0;
  if (v43)
    (*((void (**)(void **))*v43 + 1))(v43);
  v44 = v172;
  if (v172)
  {
    v45 = (unint64_t *)&v172->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v171 = 0;
  v47 = operator new();
  *(_QWORD *)v47 = 0;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  v192 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v171, (void **)v47);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v192, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v171, 1uLL);
  v48 = v171;
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v180 = v50;
  *v50 = v49;
  v181 = v50 + 1;
  v182 = v50 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  __p = v52;
  *v52 = v51;
  v178 = v52 + 1;
  v179 = v52 + 1;
  v190 = MIL::IRTensorValueType::MakeWithShape();
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v164 = v54;
  *v54 = v53;
  v165 = v54 + 1;
  v166 = v54 + 1;
  v191 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v55 = v168;
  v169 = v168;
  if (v168)
  {
    v56 = (_QWORD *)operator new();
    v57 = v168;
    *v56 = &unk_24BFE7320;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  v170 = v56;
  v168 = 0;
  v58 = v48[2];
  v59 = v48[1];
  if (v59 >= v58)
  {
    v61 = (v59 - *v48) >> 4;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v63 = v58 - *v48;
    if (v63 >> 3 > v62)
      v62 = v63 >> 3;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
      v64 = 0xFFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    v196 = v48 + 2;
    v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v48 + 2), v64);
    v67 = &v65[16 * v61];
    *(_QWORD *)v67 = v55;
    *((_QWORD *)v67 + 1) = v56;
    v169 = 0;
    v170 = 0;
    v69 = *v48;
    v68 = v48[1];
    if (v68 == *v48)
    {
      v72 = (void **)v48[1];
      v70 = &v65[16 * v61];
    }
    else
    {
      v70 = &v65[16 * v61];
      do
      {
        v71 = *((_OWORD *)v68 - 1);
        v68 -= 16;
        *((_OWORD *)v70 - 1) = v71;
        v70 -= 16;
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
      }
      while (v68 != v69);
      v72 = (void **)*v48;
      v68 = v48[1];
    }
    v60 = v67 + 16;
    *v48 = v70;
    v192 = v72;
    v193 = (uint64_t)v72;
    v48[1] = v67 + 16;
    v194 = (uint64_t)v68;
    v73 = v48[2];
    v48[2] = &v65[16 * v66];
    v195 = v73;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v192);
  }
  else
  {
    *(_QWORD *)v59 = v55;
    *((_QWORD *)v59 + 1) = v56;
    v60 = v59 + 16;
    v169 = 0;
    v170 = 0;
  }
  v48[1] = v60;
  v74 = v168;
  v168 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = v167;
  if (v167)
  {
    v76 = (unint64_t *)&v167->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  *(_OWORD *)v162 = *(_OWORD *)a2;
  v163 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v78 = (uint64_t)v184;
  v160 = (uint64_t)v184;
  if (v184)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = (std::__shared_weak_count_vtbl *)v78;
  }
  else
  {
    v79 = 0;
  }
  v161 = v79;
  v184 = 0;
  v158 = v171;
  if (v171)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = v171;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = (std::__shared_weak_count_vtbl *)v81;
  }
  else
  {
    v80 = 0;
  }
  v159 = v80;
  v171 = 0;
  v187[0] = &unk_24BFE7440;
  v187[1] = ANEMachineIR::H2022::Validators::ValidateNeSquare;
  v188 = (MIL::Validation::TensorDTypeConstraints *)v187;
  v186 = 0;
  MIL::IROperator::Make();
  v82 = v186;
  if (v186 == v185)
  {
    v83 = 4;
    v82 = v185;
  }
  else
  {
    if (!v186)
      goto LABEL_90;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_90:
  v84 = v188;
  if (v188 == (MIL::Validation::TensorDTypeConstraints *)v187)
  {
    v85 = 4;
    v84 = (MIL::Validation::TensorDTypeConstraints *)v187;
    goto LABEL_94;
  }
  if (v188)
  {
    v85 = 5;
LABEL_94:
    v84 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v84 + 8 * v85))();
  }
  if (v159)
  {
    v86 = &v159->__shared_owners_;
    do
      v87 = __ldaxr((unint64_t *)v86);
    while (__stlxr(v87 - 1, (unint64_t *)v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  if (v161)
  {
    v88 = &v161->__shared_owners_;
    do
      v89 = __ldaxr((unint64_t *)v88);
    while (__stlxr(v89 - 1, (unint64_t *)v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  if (SHIBYTE(v163) < 0)
    operator delete(v162[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v84);
  v90 = v192;
  std::string::basic_string[abi:ne180100]<0>(&v154, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v156 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v157 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v156, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v93 = v157;
  if (v157)
  {
    v94 = (unint64_t *)&v157->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v155 < 0)
    operator delete(v154);
  v97 = v192;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v150 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v151 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v148, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v150, v148);
  if (v149 < 0)
    operator delete(v148[0]);
  v100 = v151;
  if (v151)
  {
    v101 = (unint64_t *)&v151->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = *a3;
  v146 = v192;
  if (v192)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v192;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v147 = v105;
  v192 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v146);
  v107 = v147;
  if (v147)
  {
    v108 = (unint64_t *)&v147->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)v192;
  v192 = 0;
  if (v110)
    v110 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v110 + 8))(v110);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v110);
  v111 = v192;
  std::string::basic_string[abi:ne180100]<0>(&v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v144 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v145 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 5))(v111, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v114 = v145;
  if (v145)
  {
    v115 = (unint64_t *)&v145->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v143 < 0)
    operator delete(v142);
  v118 = v192;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v138 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v139 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v136, "XShape");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v118 + 5))(v118, &v138, v136);
  if (v137 < 0)
    operator delete(v136[0]);
  v121 = v139;
  if (v139)
  {
    v122 = (unint64_t *)&v139->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  v125 = *a3;
  v134 = v192;
  if (v192)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = v192;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = (std::__shared_weak_count_vtbl *)v127;
  }
  else
  {
    v126 = 0;
  }
  v135 = v126;
  v192 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v125 + 56))(v125, &v134);
  v128 = v135;
  if (v135)
  {
    v129 = (unint64_t *)&v135->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v192;
  v192 = 0;
  if (v131)
    (*((void (**)(void **))*v131 + 1))(v131);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v171, 0);
  result = (uint64_t)v184;
  if (v184)
  {
    v133 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v184);
    return MEMORY[0x20BCFF140](v133, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068DFE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void **a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;

  v57 = *(_QWORD *)(v55 - 112);
  *(_QWORD *)(v55 - 112) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *v54;
  *v54 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 208), 0);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::TransposeCpu::Run(MIL::IROperation *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::vector<int>::pointer v17;
  uint64_t InterpretedTensorValue;
  uint64_t v19;
  uint64_t OutputType;
  MIL::IRValue *ParameterValue;
  std::vector<int>::size_type v22;
  unint64_t v23;
  int *v24;
  std::vector<int>::pointer begin;
  uint64_t v26;
  int v27;
  MIL::IRValueType *v28;
  uint64_t v29;
  MIL::IRValueType *v30;
  uint64_t v31;
  unint64_t v32;
  ANEMachineIR::Utils *v33;
  const MIL::IRTensorValueType *v34;
  MIL::IRValueType *v35;
  ANEMachineIR::Utils *v36;
  const MIL::IRTensorValueType *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  unsigned __int8 *v75;
  MIL::IRValueType *v76;
  std::string::size_type v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  unsigned __int8 *v99;
  MIL::IRValueType *v100;
  std::string::size_type v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t i;
  uint64_t j;
  uint64_t v119;
  _WORD *v120;
  uint64_t k;
  unsigned __int8 *v122;
  MIL::IRValueType *v123;
  std::string::size_type v124;
  const char *v125;
  int v126;
  const char *v127;
  int v128;
  const char *v129;
  int v130;
  int *v131;
  uint64_t v132;
  uint64_t v135;
  void *v136;
  void *v137;
  uint64_t v138;
  void *v139;
  _BYTE *v140;
  void *v141;
  _BYTE *v142;
  std::vector<int> v143;
  uint64_t Data;
  std::vector<int>::size_type __n;
  std::vector<int> __p;
  std::string v147;
  std::string v148;
  _BYTE __src[32];
  _QWORD v150[4];

  v150[2] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  v5 = *(char *)(v4 + 23);
  if (v5 < 0)
  {
    if (*(_QWORD *)(v4 + 8) != 9)
      goto LABEL_10;
    v4 = *(_QWORD *)v4;
  }
  else if (v5 != 9)
  {
    goto LABEL_10;
  }
  if (*(_QWORD *)v4 != 0x736F70736E617274 || *(_BYTE *)(v4 + 8) != 101)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    v135 = a3 + 8;
    std::string::basic_string[abi:ne180100]<0>(&v147, "transpose");
    v7 = std::string::insert(&v147, 0, "Expected '");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v148, "' op. Got ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)&__src[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)__src = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
    v12 = *(char *)(v11 + 23);
    if (v12 >= 0)
      v13 = (const std::string::value_type *)v11;
    else
      v13 = *(const std::string::value_type **)v11;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v11 + 23);
    else
      v14 = *(_QWORD *)(v11 + 8);
    v15 = std::string::append((std::string *)__src, v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(_QWORD *)(v135 + 16) = *((_QWORD *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)v135 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v148.__r_.__value_.__l.__data_);
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (std::vector<int>::pointer)v147.__r_.__value_.__r.__words[0];
LABEL_22:
      operator delete(v17);
      return;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__src, "x");
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)__src);
  v19 = InterpretedTensorValue;
  if ((__src[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__src);
    if (v19)
    {
LABEL_26:
      OutputType = MIL::IROperation::GetOutputType(a1);
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)OutputType + 24))(OutputType))
      {
        *(_DWORD *)a3 = 3;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Output type is not a tensor.");
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(__src, "perm");
      ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(ParameterValue);
      Data = MIL::IRTensorValue::GetDataView<int>();
      __n = v22;
      if ((__src[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__src);
        v22 = __n;
      }
      std::vector<int>::vector(&v143, v22);
      if (v143.__end_ != v143.__begin_)
      {
        v23 = 0;
        do
        {
          v24 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v23);
          begin = v143.__begin_;
          v143.__begin_[v23++] = *v24;
        }
        while (v23 < v143.__end_ - begin);
      }
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
      v28 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      v29 = MIL::IRValueType::AsTensorType(v28);
      if (v27 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 88))(v29))
      {
        *(_DWORD *)a3 = 3;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Expect same data type for input and output.");
        goto LABEL_150;
      }
      v30 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      v31 = MIL::IRValueType::AsTensorType(v30);
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
      v33 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
      ANEMachineIR::Utils::GetStaticTensorShape(v33, v34, (uint64_t)&v141);
      v35 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      v36 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v35);
      ANEMachineIR::Utils::GetStaticTensorShape(v36, v37, (uint64_t)&v139);
      if (v27 == 4)
      {
        v51 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v52 = (v142 - (_BYTE *)v141) >> 3;
        if (v52 == (v140 - (_BYTE *)v139) >> 3)
        {
          if (v52 == v143.__end_ - v143.__begin_)
          {
            v53 = v51;
            v136 = 0;
            v137 = 0;
            v138 = 0;
            std::vector<MIL::Fp16>::resize((uint64_t)&v136, v32);
            memset(&v148, 0, sizeof(v148));
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v148, v141, (uint64_t)v142, (v142 - (_BYTE *)v141) >> 3);
            memset(&v147, 0, sizeof(v147));
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v147, v139, (uint64_t)v140, (v140 - (_BYTE *)v139) >> 3);
            switch(v52)
            {
              case 1:
                *(_OWORD *)__src = xmmword_2069A1EF8;
                *(_OWORD *)&__src[16] = unk_2069A1F08;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, (char *)v150, 4);
                *(_OWORD *)__src = xmmword_2069A1EF8;
                *(_OWORD *)&__src[16] = unk_2069A1F08;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, (char *)v150, 4);
                break;
              case 2:
                *(_OWORD *)__src = xmmword_2069A1EE0;
                *(_QWORD *)&__src[16] = 1;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, &__src[24], 3);
                *(_OWORD *)__src = xmmword_2069A1EE0;
                *(_QWORD *)&__src[16] = 1;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, &__src[24], 3);
                break;
              case 3:
                *(int64x2_t *)__src = vdupq_n_s64(1uLL);
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, &__src[16], 2);
                *(int64x2_t *)__src = vdupq_n_s64(1uLL);
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, &__src[16], 2);
                break;
              case 4:
                *(_QWORD *)__src = 1;
                std::vector<unsigned long long>::insert((uint64_t)&v148, (char *)(v148.__r_.__value_.__r.__words[0] + 8), __src);
                *(_QWORD *)__src = 1;
                std::vector<unsigned long long>::insert((uint64_t)&v147, (char *)(v147.__r_.__value_.__r.__words[0] + 8), __src);
                break;
              default:
                break;
            }
            v131 = __p.__begin_;
            v132 = *(_QWORD *)v148.__r_.__value_.__l.__data_;
            if (*(_QWORD *)v148.__r_.__value_.__l.__data_)
            {
              v102 = 0;
              v103 = 0;
              v104 = *(_QWORD *)(v147.__r_.__value_.__r.__words[0] + 24);
              v105 = *(_QWORD *)(v147.__r_.__value_.__r.__words[0] + 32);
              v106 = *(_QWORD *)(v148.__r_.__value_.__r.__words[0] + 8);
              v107 = *(_QWORD *)(v148.__r_.__value_.__r.__words[0] + 16);
              v108 = *(_QWORD *)(v148.__r_.__value_.__r.__words[0] + 24);
              v109 = *(_QWORD *)(v148.__r_.__value_.__r.__words[0] + 32);
              v110 = __p.__begin_[3];
              v111 = __p.__begin_[4];
              v113 = __p.__begin_[1];
              v112 = __p.__begin_[2];
              v114 = *__p.__begin_;
              v116 = *(_QWORD *)(v147.__r_.__value_.__r.__words[0] + 8);
              v115 = *(_QWORD *)(v147.__r_.__value_.__r.__words[0] + 16);
              do
              {
                if (v106)
                {
                  for (i = 0; i != v106; ++i)
                  {
                    if (v107)
                    {
                      for (j = 0; j != v107; ++j)
                      {
                        if (v108)
                        {
                          v119 = 0;
                          v120 = v136;
                          do
                          {
                            if (v109)
                            {
                              for (k = 0; k != v109; ++k)
                              {
                                *(_QWORD *)__src = v102;
                                *(_QWORD *)&__src[8] = i;
                                *(_QWORD *)&__src[16] = j;
                                *(_QWORD *)&__src[24] = v119;
                                v150[0] = k;
                                v120[*(_QWORD *)&__src[8 * v111]
                                   + (*(_QWORD *)&__src[8 * v110]
                                    + (*(_QWORD *)&__src[8 * v112]
                                     + (*(_QWORD *)&__src[8 * v113] + *(_QWORD *)&__src[8 * v114] * v116) * v115)
                                    * v104)
                                   * v105] = *(_WORD *)(v53 + 2 * v103 + 2 * k);
                              }
                              v103 += k;
                            }
                            ++v119;
                          }
                          while (v119 != v108);
                        }
                      }
                    }
                  }
                }
                ++v102;
              }
              while (v102 != v132);
            }
            __p.__end_ = v131;
            operator delete(v131);
            if (v147.__r_.__value_.__r.__words[0])
            {
              v147.__r_.__value_.__l.__size_ = v147.__r_.__value_.__r.__words[0];
              operator delete(v147.__r_.__value_.__l.__data_);
            }
            if (v148.__r_.__value_.__r.__words[0])
            {
              v148.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            (*(void (**)(_BYTE *__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(__src, a1);
            v122 = *(unsigned __int8 **)__src;
            if (*(_QWORD *)&__src[8] == *(_QWORD *)__src)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v123 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v123);
            MIL::IRTensorValueType::MakeFloat16Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v122, (uint64_t *)&v148);
            v124 = v148.__r_.__value_.__r.__words[0];
            v148.__r_.__value_.__r.__words[0] = 0;
            if (v124)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v124 + 8))(v124);
            goto LABEL_144;
          }
          v127 = "x_rank == perm.size()";
          v128 = 68;
        }
        else
        {
          v127 = "x_rank == o_shape.size()";
          v128 = 67;
        }
        __assert_rtn("ComputeValue", "TransposeCpu.cpp", v128, v127);
      }
      if (v27 != 9)
      {
        if (v27 != 14)
        {
          *(_DWORD *)a3 = 3;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Unimplemented input dtype");
LABEL_146:
          if (v139)
          {
            v140 = v139;
            operator delete(v139);
          }
          if (v141)
          {
            v142 = v141;
            operator delete(v141);
          }
LABEL_150:
          v17 = v143.__begin_;
          if (v143.__begin_)
          {
            v143.__end_ = v143.__begin_;
            goto LABEL_22;
          }
          return;
        }
        v38 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v39 = v141;
        v40 = (uint64_t)v142;
        v41 = (v142 - (_BYTE *)v141) >> 3;
        if (v41 == (v140 - (_BYTE *)v139) >> 3)
        {
          if (v41 == v143.__end_ - v143.__begin_)
          {
            v42 = v38;
            v136 = 0;
            v137 = 0;
            v138 = 0;
            if (v32)
            {
              std::vector<unsigned char>::__append((unint64_t *)&v136, v32);
              v39 = v141;
              v40 = (uint64_t)v142;
            }
            memset(&v148, 0, sizeof(v148));
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v148, v39, v40, (v142 - (_BYTE *)v141) >> 3);
            memset(&v147, 0, sizeof(v147));
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v147, v139, (uint64_t)v140, (v140 - (_BYTE *)v139) >> 3);
            switch(v41)
            {
              case 1:
                *(_OWORD *)__src = xmmword_2069A1EF8;
                *(_OWORD *)&__src[16] = unk_2069A1F08;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, (char *)v150, 4);
                *(_OWORD *)__src = xmmword_2069A1EF8;
                *(_OWORD *)&__src[16] = unk_2069A1F08;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, (char *)v150, 4);
                break;
              case 2:
                *(_OWORD *)__src = xmmword_2069A1EE0;
                *(_QWORD *)&__src[16] = 1;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, &__src[24], 3);
                *(_OWORD *)__src = xmmword_2069A1EE0;
                *(_QWORD *)&__src[16] = 1;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, &__src[24], 3);
                break;
              case 3:
                *(int64x2_t *)__src = vdupq_n_s64(1uLL);
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, &__src[16], 2);
                *(int64x2_t *)__src = vdupq_n_s64(1uLL);
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, &__src[16], 2);
                break;
              case 4:
                *(_QWORD *)__src = 1;
                std::vector<unsigned long long>::insert((uint64_t)&v148, (char *)(v148.__r_.__value_.__r.__words[0] + 8), __src);
                *(_QWORD *)__src = 1;
                std::vector<unsigned long long>::insert((uint64_t)&v147, (char *)(v147.__r_.__value_.__r.__words[0] + 8), __src);
                break;
              default:
                break;
            }
            v78 = *(_QWORD *)v148.__r_.__value_.__l.__data_;
            v79 = __p.__begin_;
            if (*(_QWORD *)v148.__r_.__value_.__l.__data_)
            {
              v80 = 0;
              v81 = 0;
              v82 = *(_QWORD *)(v147.__r_.__value_.__r.__words[0] + 24);
              v83 = *(_QWORD *)(v147.__r_.__value_.__r.__words[0] + 32);
              v84 = *(_QWORD *)(v148.__r_.__value_.__r.__words[0] + 8);
              v85 = *(_QWORD *)(v148.__r_.__value_.__r.__words[0] + 16);
              v86 = *(_QWORD *)(v148.__r_.__value_.__r.__words[0] + 24);
              v87 = *(_QWORD *)(v148.__r_.__value_.__r.__words[0] + 32);
              v88 = __p.__begin_[3];
              v89 = __p.__begin_[4];
              v91 = __p.__begin_[1];
              v90 = __p.__begin_[2];
              v92 = *__p.__begin_;
              v94 = *(_QWORD *)(v147.__r_.__value_.__r.__words[0] + 8);
              v93 = *(_QWORD *)(v147.__r_.__value_.__r.__words[0] + 16);
              do
              {
                if (v84)
                {
                  for (m = 0; m != v84; ++m)
                  {
                    if (v85)
                    {
                      for (n = 0; n != v85; ++n)
                      {
                        if (v86)
                        {
                          for (ii = 0; ii != v86; ++ii)
                          {
                            if (v87)
                            {
                              for (jj = 0; jj != v87; ++jj)
                              {
                                *(_QWORD *)__src = v80;
                                *(_QWORD *)&__src[8] = m;
                                *(_QWORD *)&__src[16] = n;
                                *(_QWORD *)&__src[24] = ii;
                                v150[0] = jj;
                                *((_BYTE *)v136
                                + *(_QWORD *)&__src[8 * v89]
                                + (*(_QWORD *)&__src[8 * v88]
                                 + (*(_QWORD *)&__src[8 * v90]
                                  + (*(_QWORD *)&__src[8 * v91] + *(_QWORD *)&__src[8 * v92] * v94) * v93)
                                 * v82)
                                * v83) = *(_BYTE *)(v42 + v81 + jj);
                              }
                              v81 += jj;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                ++v80;
              }
              while (v80 != v78);
              v79 = __p.__begin_;
            }
            if (v79)
            {
              __p.__end_ = v79;
              operator delete(v79);
            }
            if (v147.__r_.__value_.__r.__words[0])
            {
              v147.__r_.__value_.__l.__size_ = v147.__r_.__value_.__r.__words[0];
              operator delete(v147.__r_.__value_.__l.__data_);
            }
            if (v148.__r_.__value_.__r.__words[0])
            {
              v148.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            (*(void (**)(_BYTE *__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(__src, a1);
            v99 = *(unsigned __int8 **)__src;
            if (*(_QWORD *)&__src[8] == *(_QWORD *)__src)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v100 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v100);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v99, (uint64_t *)&v148);
            v101 = v148.__r_.__value_.__r.__words[0];
            v148.__r_.__value_.__r.__words[0] = 0;
            if (v101)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v101 + 8))(v101);
LABEL_144:
            v148.__r_.__value_.__r.__words[0] = (std::string::size_type)__src;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
            *(_DWORD *)a3 = 0;
            std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
            if (v136)
            {
              v137 = v136;
              operator delete(v136);
            }
            goto LABEL_146;
          }
          v129 = "x_rank == perm.size()";
          v130 = 68;
        }
        else
        {
          v129 = "x_rank == o_shape.size()";
          v130 = 67;
        }
        __assert_rtn("ComputeValue", "TransposeCpu.cpp", v130, v129);
      }
      v46 = MIL::IRTensorValue::GetDataView<signed char>();
      v47 = v141;
      v48 = (uint64_t)v142;
      v49 = (v142 - (_BYTE *)v141) >> 3;
      if (v49 == (v140 - (_BYTE *)v139) >> 3)
      {
        if (v49 == v143.__end_ - v143.__begin_)
        {
          v50 = v46;
          v136 = 0;
          v137 = 0;
          v138 = 0;
          if (v32)
          {
            std::vector<unsigned char>::__append((unint64_t *)&v136, v32);
            v47 = v141;
            v48 = (uint64_t)v142;
          }
          memset(&v148, 0, sizeof(v148));
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v148, v47, v48, (v142 - (_BYTE *)v141) >> 3);
          memset(&v147, 0, sizeof(v147));
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v147, v139, (uint64_t)v140, (v140 - (_BYTE *)v139) >> 3);
          switch(v49)
          {
            case 1:
              *(_OWORD *)__src = xmmword_2069A1EF8;
              *(_OWORD *)&__src[16] = unk_2069A1F08;
              std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, (char *)v150, 4);
              *(_OWORD *)__src = xmmword_2069A1EF8;
              *(_OWORD *)&__src[16] = unk_2069A1F08;
              std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, (char *)v150, 4);
              break;
            case 2:
              *(_OWORD *)__src = xmmword_2069A1EE0;
              *(_QWORD *)&__src[16] = 1;
              std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, &__src[24], 3);
              *(_OWORD *)__src = xmmword_2069A1EE0;
              *(_QWORD *)&__src[16] = 1;
              std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, &__src[24], 3);
              break;
            case 3:
              *(int64x2_t *)__src = vdupq_n_s64(1uLL);
              std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, &__src[16], 2);
              *(int64x2_t *)__src = vdupq_n_s64(1uLL);
              std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, &__src[16], 2);
              break;
            case 4:
              *(_QWORD *)__src = 1;
              std::vector<unsigned long long>::insert((uint64_t)&v148, (char *)(v148.__r_.__value_.__r.__words[0] + 8), __src);
              *(_QWORD *)__src = 1;
              std::vector<unsigned long long>::insert((uint64_t)&v147, (char *)(v147.__r_.__value_.__r.__words[0] + 8), __src);
              break;
            default:
              break;
          }
          v54 = *(_QWORD *)v148.__r_.__value_.__l.__data_;
          v55 = __p.__begin_;
          if (*(_QWORD *)v148.__r_.__value_.__l.__data_)
          {
            v56 = 0;
            v57 = 0;
            v58 = *(_QWORD *)(v147.__r_.__value_.__r.__words[0] + 24);
            v59 = *(_QWORD *)(v147.__r_.__value_.__r.__words[0] + 32);
            v60 = *(_QWORD *)(v148.__r_.__value_.__r.__words[0] + 8);
            v61 = *(_QWORD *)(v148.__r_.__value_.__r.__words[0] + 16);
            v62 = *(_QWORD *)(v148.__r_.__value_.__r.__words[0] + 24);
            v63 = *(_QWORD *)(v148.__r_.__value_.__r.__words[0] + 32);
            v64 = __p.__begin_[3];
            v65 = __p.__begin_[4];
            v67 = __p.__begin_[1];
            v66 = __p.__begin_[2];
            v68 = *__p.__begin_;
            v70 = *(_QWORD *)(v147.__r_.__value_.__r.__words[0] + 8);
            v69 = *(_QWORD *)(v147.__r_.__value_.__r.__words[0] + 16);
            do
            {
              if (v60)
              {
                for (kk = 0; kk != v60; ++kk)
                {
                  if (v61)
                  {
                    for (mm = 0; mm != v61; ++mm)
                    {
                      if (v62)
                      {
                        for (nn = 0; nn != v62; ++nn)
                        {
                          if (v63)
                          {
                            for (i1 = 0; i1 != v63; ++i1)
                            {
                              *(_QWORD *)__src = v56;
                              *(_QWORD *)&__src[8] = kk;
                              *(_QWORD *)&__src[16] = mm;
                              *(_QWORD *)&__src[24] = nn;
                              v150[0] = i1;
                              *((_BYTE *)v136
                              + *(_QWORD *)&__src[8 * v65]
                              + (*(_QWORD *)&__src[8 * v64]
                               + (*(_QWORD *)&__src[8 * v66]
                                + (*(_QWORD *)&__src[8 * v67] + *(_QWORD *)&__src[8 * v68] * v70) * v69)
                               * v58)
                              * v59) = *(_BYTE *)(v50 + v57 + i1);
                            }
                            v57 += i1;
                          }
                        }
                      }
                    }
                  }
                }
              }
              ++v56;
            }
            while (v56 != v54);
            v55 = __p.__begin_;
          }
          if (v55)
          {
            __p.__end_ = v55;
            operator delete(v55);
          }
          if (v147.__r_.__value_.__r.__words[0])
          {
            v147.__r_.__value_.__l.__size_ = v147.__r_.__value_.__r.__words[0];
            operator delete(v147.__r_.__value_.__l.__data_);
          }
          if (v148.__r_.__value_.__r.__words[0])
          {
            v148.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
            operator delete(v148.__r_.__value_.__l.__data_);
          }
          (*(void (**)(_BYTE *__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(__src, a1);
          v75 = *(unsigned __int8 **)__src;
          if (*(_QWORD *)&__src[8] == *(_QWORD *)__src)
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          v76 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v76);
          MIL::IRTensorValueType::MakeInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v75, (uint64_t *)&v148);
          v77 = v148.__r_.__value_.__r.__words[0];
          v148.__r_.__value_.__r.__words[0] = 0;
          if (v77)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v77 + 8))(v77);
          goto LABEL_144;
        }
        v125 = "x_rank == perm.size()";
        v126 = 68;
      }
      else
      {
        v125 = "x_rank == o_shape.size()";
        v126 = 67;
      }
      __assert_rtn("ComputeValue", "TransposeCpu.cpp", v126, v125);
    }
  }
  else if (InterpretedTensorValue)
  {
    goto LABEL_26;
  }
  *(_DWORD *)a3 = 2;
  v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(__src, "x");
  v44 = std::string::insert(v43, 0, "No value for ");
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v44->__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 8) = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if ((__src[23] & 0x80000000) != 0)
  {
    v17 = *(std::vector<int>::pointer *)__src;
    goto LABEL_22;
  }
}

void sub_2068E1334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v39;

  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  v39 = *(void **)(v37 - 176);
  if (v39)
  {
    *(_QWORD *)(v37 - 168) = v39;
    operator delete(v39);
  }
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::TransposeCpu::~TransposeCpu(MIL::ANEMachineIR::Interpreter::TransposeCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ConvertPermToRank5(_QWORD *a1@<X0>, std::vector<int> *a2@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *i;
  int *begin;
  std::vector<int>::pointer v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v5 = (_DWORD *)*a1;
  v4 = a1[1];
  v6 = v4 - *a1;
  v7 = v6 >> 2;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  a2->__begin_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a2, v5, v4, v6 >> 2);
  for (i = (_DWORD *)*a1; i != (_DWORD *)a1[1]; ++i)
  {
    if ((*i & 0x80000000) != 0)
    {
      ANEMachineIR::Utils::InferPositiveAxes((uint64_t)a1, &v16);
      begin = a2->__begin_;
      if (a2->__begin_)
      {
        a2->__end_ = begin;
        operator delete(begin);
        a2->__begin_ = 0;
        a2->__end_ = 0;
        a2->__end_cap_.__value_ = 0;
      }
      *(_OWORD *)&a2->__begin_ = v16;
      a2->__end_cap_.__value_ = (int *)v17[0];
      break;
    }
  }
  if ((_DWORD *)v4 != v5)
  {
    v10 = a2->__begin_;
    if (v7 <= 1)
      v11 = 1;
    else
      v11 = v6 >> 2;
    do
    {
      if (*v10 >= 1)
        *v10 = *v10 - ((unint64_t)v6 >> 2) + 5;
      ++v10;
      --v11;
    }
    while (v11);
  }
  switch(v7)
  {
    case 1uLL:
      v12 = (uint64_t)(a2->__begin_ + 1);
      v16 = xmmword_2069A1F20;
      std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a2, v12, (char *)&v16, (char *)v17, 4);
      break;
    case 2uLL:
      v15 = (uint64_t)(a2->__begin_ + 1);
      *(_QWORD *)&v16 = 0x200000001;
      DWORD2(v16) = 3;
      std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a2, v15, (char *)&v16, (char *)&v16 + 12, 3);
      break;
    case 3uLL:
      v13 = (uint64_t)(a2->__begin_ + 1);
      *(_QWORD *)&v16 = 0x200000001;
      std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a2, v13, (char *)&v16, (char *)&v16 + 8, 2);
      break;
    case 4uLL:
      v14 = (uint64_t)(a2->__begin_ + 1);
      LODWORD(v16) = 1;
      std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a2, v14, (char *)&v16, (char *)&v16 + 4, 1);
      break;
    default:
      return;
  }
}

void sub_2068E1764(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(std::vector<int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  int *v5;
  int *v7;
  std::allocator<int> *p_end_cap;
  int *v10;
  int *value;
  unint64_t v12;
  std::vector<int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  int v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int v31;
  std::__split_buffer<int> __v;

  v5 = (int *)__dst;
  if (a5 < 1)
    return v5;
  v7 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)begin) >> 2;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = &v5[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24)
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    if (v21 != (char *)v7)
      memmove(v5, v7, v21 - (char *)v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (int *)(v12 + v22);
  a1->__end_ = (std::vector<int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_2068E1964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  int *begin;
  std::vector<int>::pointer v6;
  int *v7;
  std::vector<int>::pointer v8;
  int v9;
  int *end;
  std::__split_buffer<int>::pointer v11;
  int64_t v12;
  int *v13;
  int *v14;
  int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void ANEMachineIR::H2022::Validators::ValidateConst(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateConst(this, a2);
}

uint64_t ANEMachineIR::H2022::Reshape::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  void **v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  MIL::Validation::TensorDTypeConstraints *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  void **v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  void **v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  void **v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  MIL::Validation::TensorRankValueConstraints *v80;
  void **v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  void **v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void **v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  uint64_t result;
  uint64_t v103;
  void **v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  void *v108;
  char v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  void **v112;
  std::__shared_weak_count *v113;
  void *v114[2];
  char v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  void *v120;
  char v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  char **v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  uint64_t v129;
  void *v130;
  void *v131;
  _QWORD *v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  char **v137;
  void *__p;
  void *v139;
  _QWORD *v140;
  void *v141;
  void *v142;
  _QWORD *v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  _BYTE v146[24];
  _BYTE *v147;
  _QWORD v148[3];
  MIL::Validation::TensorDTypeConstraints *v149;
  std::__shared_weak_count_vtbl *v150;
  uint64_t v151;
  uint64_t v152;
  void **v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char **v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v145 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v150 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v151 = (uint64_t)&v8->~__shared_weak_count_0;
  v152 = (uint64_t)&v8->~__shared_weak_count_0;
  v153 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v141 = v10;
  *v10 = v9;
  v142 = v10 + 1;
  v143 = v10 + 1;
  v154 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v139 = v12 + 1;
  v140 = v12 + 1;
  v155 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v130);
  v13 = v130;
  v130 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v144;
  if (v144)
  {
    p_shared_owners = (unint64_t *)&v144->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v139 = __p;
    operator delete(__p);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  if (v150)
  {
    v151 = (uint64_t)v150;
    operator delete(v150);
  }
  v137 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v153 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v137, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v153, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v137, 1uLL);
  v18 = v137;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v141 = v20;
  *v20 = v19;
  v142 = v20 + 1;
  v143 = v20 + 1;
  v150 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v139 = v22 + 1;
  v140 = v22 + 1;
  v151 = MIL::IRTensorValueType::MakeWithShape();
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v130 = v24;
  *v24 = v23;
  v131 = v24 + 1;
  v132 = v24 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v25 = v134;
  v135 = v134;
  if (v134)
  {
    v26 = (_QWORD *)operator new();
    v27 = v134;
    *v26 = &unk_24BFE7320;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v136 = v26;
  v134 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v157 = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v18 + 2), v34);
    v37 = &v35[16 * v31];
    *(_QWORD *)v37 = v25;
    *((_QWORD *)v37 + 1) = v26;
    v135 = 0;
    v136 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = (void **)v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = (void **)*v18;
      v38 = v18[1];
    }
    v30 = v37 + 16;
    *v18 = v40;
    v153 = v42;
    v154 = (uint64_t)v42;
    v18[1] = v37 + 16;
    v155 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v156 = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v153);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v135 = 0;
    v136 = 0;
  }
  v18[1] = v30;
  v44 = v134;
  v134 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = v133;
  if (v133)
  {
    v46 = (unint64_t *)&v133->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  if (__p)
  {
    v139 = __p;
    operator delete(__p);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  *(_OWORD *)v128 = *(_OWORD *)a2;
  v129 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v145;
  v126 = v145;
  if (v145)
  {
    v49 = (std::__shared_weak_count *)operator new();
    v49->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v49->__shared_owners_ = 0;
    v49->__shared_weak_owners_ = 0;
    v49[1].__vftable = (std::__shared_weak_count_vtbl *)v48;
  }
  else
  {
    v49 = 0;
  }
  v127 = v49;
  v145 = 0;
  v124 = v137;
  if (v137)
  {
    v50 = (std::__shared_weak_count *)operator new();
    v51 = v137;
    v50->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v50->__shared_owners_ = 0;
    v50->__shared_weak_owners_ = 0;
    v50[1].__vftable = (std::__shared_weak_count_vtbl *)v51;
  }
  else
  {
    v50 = 0;
  }
  v125 = v50;
  v137 = 0;
  v148[0] = &unk_24BFE7440;
  v148[1] = ANEMachineIR::H2022::Validators::ValidateReshape;
  v149 = (MIL::Validation::TensorDTypeConstraints *)v148;
  v147 = 0;
  MIL::IROperator::Make();
  v52 = v147;
  if (v147 == v146)
  {
    v53 = 4;
    v52 = v146;
  }
  else
  {
    if (!v147)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v149;
  if (v149 == (MIL::Validation::TensorDTypeConstraints *)v148)
  {
    v55 = 4;
    v54 = (MIL::Validation::TensorDTypeConstraints *)v148;
    goto LABEL_59;
  }
  if (v149)
  {
    v55 = 5;
LABEL_59:
    v54 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v54 + 8 * v55))();
  }
  if (v125)
  {
    v56 = &v125->__shared_owners_;
    do
      v57 = __ldaxr((unint64_t *)v56);
    while (__stlxr(v57 - 1, (unint64_t *)v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  if (v127)
  {
    v58 = &v127->__shared_owners_;
    do
      v59 = __ldaxr((unint64_t *)v58);
    while (__stlxr(v59 - 1, (unint64_t *)v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  if (SHIBYTE(v129) < 0)
    operator delete(v128[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v54);
  v60 = v153;
  std::string::basic_string[abi:ne180100]<0>(&v120, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v122 = v150;
  if (v150)
  {
    v61 = (std::__shared_weak_count *)operator new();
    v62 = v150;
    v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61[1].__vftable = v62;
  }
  else
  {
    v61 = 0;
  }
  v123 = v61;
  v150 = 0;
  std::string::basic_string[abi:ne180100]<0>(v118, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v60 + 3))(v60, &v122, v118);
  if (v119 < 0)
    operator delete(v118[0]);
  v63 = v123;
  if (v123)
  {
    v64 = (unint64_t *)&v123->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v150;
  v150 = 0;
  if (v66)
    (*((void (**)(std::__shared_weak_count_vtbl *))v66->~__shared_weak_count + 1))(v66);
  if (v121 < 0)
    operator delete(v120);
  v67 = v153;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v116 = v150;
  if (v150)
  {
    v68 = (std::__shared_weak_count *)operator new();
    v69 = v150;
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v69;
  }
  else
  {
    v68 = 0;
  }
  v117 = v68;
  v150 = 0;
  std::string::basic_string[abi:ne180100]<0>(v114, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v67 + 3))(v67, &v116, v114);
  if (v115 < 0)
    operator delete(v114[0]);
  v70 = v117;
  if (v117)
  {
    v71 = (unint64_t *)&v117->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v150;
  v150 = 0;
  if (v73)
    (*((void (**)(std::__shared_weak_count_vtbl *))v73->~__shared_weak_count + 1))(v73);
  v74 = *a3;
  v112 = v153;
  if (v153)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v76 = v153;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = (std::__shared_weak_count_vtbl *)v76;
  }
  else
  {
    v75 = 0;
  }
  v113 = v75;
  v153 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v74 + 56))(v74, &v112);
  v77 = v113;
  if (v113)
  {
    v78 = (unint64_t *)&v113->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (MIL::Validation::TensorRankValueConstraints *)v153;
  v153 = 0;
  if (v80)
    v80 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v80 + 8))(v80);
  MIL::Validation::TensorRankValueConstraints::Make(v80);
  v81 = v153;
  std::string::basic_string[abi:ne180100]<0>(&v108, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v110 = v150;
  if (v150)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = v150;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v111 = v82;
  v150 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))*v81 + 4))(v81, &v110, 0, 5);
  v84 = v111;
  if (v111)
  {
    v85 = (unint64_t *)&v111->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v150;
  v150 = 0;
  if (v87)
    (*((void (**)(std::__shared_weak_count_vtbl *))v87->~__shared_weak_count + 1))(v87);
  if (v109 < 0)
    operator delete(v108);
  v88 = v153;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v106 = v150;
  if (v150)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = v150;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v107 = v89;
  v150 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t))*v88 + 4))(v88, &v106, 0, 5);
  v91 = v107;
  if (v107)
  {
    v92 = (unint64_t *)&v107->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v150;
  v150 = 0;
  if (v94)
    (*((void (**)(std::__shared_weak_count_vtbl *))v94->~__shared_weak_count + 1))(v94);
  v95 = *a3;
  v104 = v153;
  if (v153)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = v153;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = (std::__shared_weak_count_vtbl *)v97;
  }
  else
  {
    v96 = 0;
  }
  v105 = v96;
  v153 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v95 + 56))(v95, &v104);
  v98 = v105;
  if (v105)
  {
    v99 = (unint64_t *)&v105->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v153;
  v153 = 0;
  if (v101)
    (*((void (**)(void **))*v101 + 1))(v101);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v137, 0);
  result = v145;
  if (v145)
  {
    v103 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v145);
    return MEMORY[0x20BCFF140](v103, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068E2634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48)
{
  uint64_t *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;

  v51 = *(_QWORD *)(v49 - 112);
  *(_QWORD *)(v49 - 112) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *v48;
  *v48 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v49 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::Transpose::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  void **v50;
  char *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  char **v59;
  _QWORD *v60;
  uint64_t v61;
  MIL::Validation::TensorDTypeConstraints *v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  void **v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  void **v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count_vtbl *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void **v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  MIL::Validation::TensorRankValueConstraints *v88;
  void **v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  void **v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void **v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  MIL::Validation::TensorSymbolicShapeConstraints *v109;
  void **v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count_vtbl *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  void **v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void **v123;
  uint64_t result;
  uint64_t v125;
  void **v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  void *v130;
  char v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  void *v138;
  char v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  void **v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  void *v148[2];
  char v149;
  void *v150;
  char v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  char **v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  void *v158[2];
  uint64_t v159;
  void *v160;
  void *v161;
  _QWORD *v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  char **v167;
  std::__shared_weak_count *v168;
  void *__p;
  void *v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  _QWORD *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _QWORD v176[3];
  MIL::Validation::TensorDTypeConstraints *v177;
  void *v178;
  void *v179;
  _QWORD *v180;
  std::__shared_weak_count_vtbl *v181;
  uint64_t v182;
  uint64_t v183;
  void **v184;
  void **v185;
  uint64_t v186;
  char *v187;
  char **v188;
  uint64_t v189;

  v189 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v173 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v181 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v182 = (uint64_t)&v8->~__shared_weak_count_0;
  v183 = (uint64_t)&v8->~__shared_weak_count_0;
  v184 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v178 = v10;
  *v10 = v9;
  v179 = v10 + 1;
  v180 = v10 + 1;
  v185 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v170 = v12 + 1;
  v171 = v12 + 1;
  v186 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v160);
  v13 = v160;
  v160 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v172;
  if (v172)
  {
    p_shared_owners = (unint64_t *)&v172->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  if (v181)
  {
    v182 = (uint64_t)v181;
    operator delete(v181);
  }
  v17 = v173;
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = (void **)operator new(8uLL);
  v184 = v19;
  *v19 = (void *)v18;
  v185 = v19 + 1;
  v186 = (uint64_t)(v19 + 1);
  v178 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "perm", (uint64_t *)&v181);
  v21 = v181;
  v181 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = v168;
  if (v168)
  {
    v23 = (unint64_t *)&v168->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 48))(*((_QWORD *)v20 + 5), 1);
  v167 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  v184 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v167, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v184, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v167, 1uLL);
  v26 = v167;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v178 = v28;
  *v28 = v27;
  v179 = v28 + 1;
  v180 = v28 + 1;
  v181 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  __p = v30;
  *v30 = v29;
  v170 = v30 + 1;
  v171 = v30 + 1;
  v182 = MIL::IRTensorValueType::MakeWithShape();
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v160 = v32;
  *v32 = v31;
  v161 = v32 + 1;
  v162 = v32 + 1;
  v183 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v33 = v164;
  v165 = v164;
  if (v164)
  {
    v34 = (_QWORD *)operator new();
    v35 = v164;
    *v34 = &unk_24BFE7320;
    v34[1] = 0;
    v34[2] = 0;
    v34[3] = v35;
  }
  else
  {
    v34 = 0;
  }
  v166 = v34;
  v164 = 0;
  v36 = v26[2];
  v37 = v26[1];
  if (v37 >= v36)
  {
    v39 = (v37 - *v26) >> 4;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v41 = v36 - *v26;
    if (v41 >> 3 > v40)
      v40 = v41 >> 3;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
      v42 = 0xFFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    v188 = v26 + 2;
    v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v26 + 2), v42);
    v45 = &v43[16 * v39];
    *(_QWORD *)v45 = v33;
    *((_QWORD *)v45 + 1) = v34;
    v165 = 0;
    v166 = 0;
    v47 = *v26;
    v46 = v26[1];
    if (v46 == *v26)
    {
      v50 = (void **)v26[1];
      v48 = &v43[16 * v39];
    }
    else
    {
      v48 = &v43[16 * v39];
      do
      {
        v49 = *((_OWORD *)v46 - 1);
        v46 -= 16;
        *((_OWORD *)v48 - 1) = v49;
        v48 -= 16;
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0;
      }
      while (v46 != v47);
      v50 = (void **)*v26;
      v46 = v26[1];
    }
    v38 = v45 + 16;
    *v26 = v48;
    v184 = v50;
    v185 = v50;
    v26[1] = v45 + 16;
    v186 = (uint64_t)v46;
    v51 = v26[2];
    v26[2] = &v43[16 * v44];
    v187 = v51;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v184);
  }
  else
  {
    *(_QWORD *)v37 = v33;
    *((_QWORD *)v37 + 1) = v34;
    v38 = v37 + 16;
    v165 = 0;
    v166 = 0;
  }
  v26[1] = v38;
  v52 = v164;
  v164 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = v163;
  if (v163)
  {
    v54 = (unint64_t *)&v163->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  *(_OWORD *)v158 = *(_OWORD *)a2;
  v159 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v56 = (uint64_t)v173;
  v156 = (uint64_t)v173;
  if (v173)
  {
    v57 = (std::__shared_weak_count *)operator new();
    v57->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v57->__shared_owners_ = 0;
    v57->__shared_weak_owners_ = 0;
    v57[1].__vftable = (std::__shared_weak_count_vtbl *)v56;
  }
  else
  {
    v57 = 0;
  }
  v157 = v57;
  v173 = 0;
  v154 = v167;
  if (v167)
  {
    v58 = (std::__shared_weak_count *)operator new();
    v59 = v167;
    v58->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v58->__shared_owners_ = 0;
    v58->__shared_weak_owners_ = 0;
    v58[1].__vftable = (std::__shared_weak_count_vtbl *)v59;
  }
  else
  {
    v58 = 0;
  }
  v155 = v58;
  v167 = 0;
  v176[0] = &unk_24BFE7440;
  v176[1] = ANEMachineIR::H2022::Validators::ValidateTranspose;
  v177 = (MIL::Validation::TensorDTypeConstraints *)v176;
  v175 = 0;
  MIL::IROperator::Make();
  v60 = v175;
  if (v175 == v174)
  {
    v61 = 4;
    v60 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_64;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_64:
  v62 = v177;
  if (v177 == (MIL::Validation::TensorDTypeConstraints *)v176)
  {
    v63 = 4;
    v62 = (MIL::Validation::TensorDTypeConstraints *)v176;
    goto LABEL_68;
  }
  if (v177)
  {
    v63 = 5;
LABEL_68:
    v62 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v62 + 8 * v63))();
  }
  if (v155)
  {
    v64 = &v155->__shared_owners_;
    do
      v65 = __ldaxr((unint64_t *)v64);
    while (__stlxr(v65 - 1, (unint64_t *)v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  if (v157)
  {
    v66 = &v157->__shared_owners_;
    do
      v67 = __ldaxr((unint64_t *)v66);
    while (__stlxr(v67 - 1, (unint64_t *)v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  if (SHIBYTE(v159) < 0)
    operator delete(v158[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v62);
  v68 = v184;
  std::string::basic_string[abi:ne180100]<0>(&v150, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v152 = v181;
  if (v181)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v70 = v181;
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = v70;
  }
  else
  {
    v69 = 0;
  }
  v153 = v69;
  v181 = 0;
  std::string::basic_string[abi:ne180100]<0>(v148, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v68 + 3))(v68, &v152, v148);
  if (v149 < 0)
    operator delete(v148[0]);
  v71 = v153;
  if (v153)
  {
    v72 = (unint64_t *)&v153->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v181;
  v181 = 0;
  if (v74)
    (*((void (**)(std::__shared_weak_count_vtbl *))v74->~__shared_weak_count + 1))(v74);
  if (v151 < 0)
    operator delete(v150);
  v75 = v184;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v146 = v181;
  if (v181)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = v181;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v147 = v76;
  v181 = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "XDType");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v75 + 3))(v75, &v146, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v78 = v147;
  if (v147)
  {
    v79 = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v181;
  v181 = 0;
  if (v81)
    (*((void (**)(std::__shared_weak_count_vtbl *))v81->~__shared_weak_count + 1))(v81);
  v82 = *a3;
  v142 = v184;
  if (v184)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = v184;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = (std::__shared_weak_count_vtbl *)v84;
  }
  else
  {
    v83 = 0;
  }
  v143 = v83;
  v184 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v82 + 56))(v82, &v142);
  v85 = v143;
  if (v143)
  {
    v86 = (unint64_t *)&v143->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (MIL::Validation::TensorRankValueConstraints *)v184;
  v184 = 0;
  if (v88)
    v88 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v88 + 8))(v88);
  MIL::Validation::TensorRankValueConstraints::Make(v88);
  v89 = v184;
  std::string::basic_string[abi:ne180100]<0>(&v138, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v140 = v181;
  if (v181)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v181;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v141 = v90;
  v181 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v89 + 4))(v89, &v140, 1, 5);
  v92 = v141;
  if (v141)
  {
    v93 = (unint64_t *)&v141->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v181;
  v181 = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  if (v139 < 0)
    operator delete(v138);
  v96 = v184;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v136 = v181;
  if (v181)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v181;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v137 = v97;
  v181 = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v96 + 4))(v96, &v136, 1, 5);
  v99 = v137;
  if (v137)
  {
    v100 = (unint64_t *)&v137->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v181;
  v181 = 0;
  if (v102)
    (*((void (**)(std::__shared_weak_count_vtbl *))v102->~__shared_weak_count + 1))(v102);
  v103 = *a3;
  v134 = v184;
  if (v184)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = v184;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = (std::__shared_weak_count_vtbl *)v105;
  }
  else
  {
    v104 = 0;
  }
  v135 = v104;
  v184 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v103 + 56))(v103, &v134);
  v106 = v135;
  if (v135)
  {
    v107 = (unint64_t *)&v135->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = (MIL::Validation::TensorSymbolicShapeConstraints *)v184;
  v184 = 0;
  if (v109)
    v109 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v109 + 8))(v109);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v109);
  v110 = v184;
  std::string::basic_string[abi:ne180100]<0>(&v130, "perm");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v132 = v181;
  if (v181)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = v181;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v133 = v111;
  v181 = 0;
  std::string::basic_string[abi:ne180100]<0>(v128, "R");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v110 + 3))(v110, &v132, 0, v128);
  if (v129 < 0)
    operator delete(v128[0]);
  v113 = v133;
  if (v133)
  {
    v114 = (unint64_t *)&v133->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v181;
  v181 = 0;
  if (v116)
    (*((void (**)(std::__shared_weak_count_vtbl *))v116->~__shared_weak_count + 1))(v116);
  if (v131 < 0)
    operator delete(v130);
  v117 = *a3;
  v126 = v184;
  if (v184)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v184;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = (std::__shared_weak_count_vtbl *)v119;
  }
  else
  {
    v118 = 0;
  }
  v127 = v118;
  v184 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v117 + 56))(v117, &v126);
  v120 = v127;
  if (v127)
  {
    v121 = (unint64_t *)&v127->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v184;
  v184 = 0;
  if (v123)
    (*((void (**)(void **))*v123 + 1))(v123);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v167, 0);
  result = (uint64_t)v173;
  if (v173)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v173);
    return MEMORY[0x20BCFF140](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068E37F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 112);
  *(_QWORD *)(v59 - 112) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Validators::ValidateBaseActivation(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateBaseActivation(this, a2);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateLinear@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateLinear(this, a2);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateLrelu@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateLrelu(this, a2);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateNePiecewiseV2@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateNePiecewiseV2(this, a2);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateRelu(ANEMachineIR::H2020::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 0);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateScaledActivation(ANEMachineIR::H2020::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 0);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateSigmoid(ANEMachineIR::H2020::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 0);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateSqrt(ANEMachineIR::H2020::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 0);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateTanh(ANEMachineIR::H2020::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 0);
}

void ANEMachineIR::Validators::ParseNeBatchMatmulParamValues(MIL::IRObject *a1@<X0>, uint64_t a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  MIL::Fp16 *ParameterValue;
  MIL::Fp16 *v7;
  MIL::IRValueType *ParameterType;
  uint64_t v9;
  uint64_t v10;
  MIL::IRValueType *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int16 v27;
  void *v28;
  MIL::IRValue *v29;
  std::string::size_type v30;
  void **v31;
  std::string::size_type v32;
  _WORD *v33;
  _WORD *v34;
  unint64_t v35;
  char *v36;
  _WORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  __int16 v46;
  std::string v47;
  void *v48[2];
  std::string::size_type v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::string v52;
  void *__p;
  _BYTE *v54;
  uint64_t v55;
  __int16 v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  __int16 v60;

  v60 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v57, "acc_left_shift");
  MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v60, (_BYTE *)&v60 + 1, a3);
  if (SHIBYTE(v59) < 0)
    operator delete(v57);
  if (!MIL::ValidationResult::IsGood(a3))
    return;
  MEMORY[0x20BCFEAEC](a3);
  *(_WORD *)a2 = HIBYTE(v60) | 0x100;
  v56 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v57, "post_right_shift");
  MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v56, (_BYTE *)&v56 + 1, a3);
  if (SHIBYTE(v59) < 0)
    operator delete(v57);
  if (!MIL::ValidationResult::IsGood(a3))
    return;
  MEMORY[0x20BCFEAEC](a3);
  *(_WORD *)(a2 + 2) = HIBYTE(v56) | 0x100;
  std::string::basic_string[abi:ne180100]<0>(&v57, "post_scale");
  ParameterValue = (MIL::Fp16 *)MIL::IROperation::TryGetParameterValue();
  v7 = ParameterValue;
  if (SHIBYTE(v59) < 0)
  {
    operator delete(v57);
    if (!v7)
      goto LABEL_38;
  }
  else if (!ParameterValue)
  {
LABEL_38:
    LOWORD(__p) = MIL::Fp16::FromFloat(ParameterValue, 1.0);
    v52.__r_.__value_.__s.__data_[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v57, "post_scale");
    MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(a1, &v52, &__p, a3);
    if (SHIBYTE(v59) < 0)
      operator delete(v57);
    if ((MIL::ValidationResult::IsGood(a3) & 1) != 0)
    {
      MEMORY[0x20BCFEAEC](a3);
      v27 = (__int16)__p;
      if (!*(_BYTE *)(a2 + 6))
        *(_BYTE *)(a2 + 6) = 1;
      *(_WORD *)(a2 + 4) = v27;
      if (*(_BYTE *)(a2 + 32))
      {
        v28 = *(void **)(a2 + 8);
        if (v28)
        {
          *(_QWORD *)(a2 + 16) = v28;
          operator delete(v28);
        }
        *(_BYTE *)(a2 + 32) = 0;
      }
LABEL_47:
      MIL::ValidationResult::ValidationResult(a3);
      return;
    }
    return;
  }
  ParameterValue = (MIL::Fp16 *)(*(uint64_t (**)(MIL::Fp16 *))(*(_QWORD *)v7 + 40))(v7);
  if (!ParameterValue)
    goto LABEL_38;
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v9 = MIL::IRValueType::AsTensorType(ParameterType);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v57, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
  if (SHIBYTE(v55) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&v52, "y");
  v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v12 = MIL::IRValueType::AsTensorType(v11);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
  __p = 0;
  v54 = 0;
  v55 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v13, *(_QWORD *)(v13 + 8), (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 3);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (v58 - (char *)v57 == 8)
  {
    if ((unint64_t)(v54 - (_BYTE *)__p) <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    if (*v57 == *((_QWORD *)__p + 1))
    {
      std::string::basic_string[abi:ne180100]<0>(&v52, "post_scale");
      v29 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(v29);
      v47.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v47.__r_.__value_.__l.__size_ = v30;
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      memset(&v52, 0, sizeof(v52));
      v31 = (void **)(a2 + 8);
      std::optional<std::vector<MIL::Fp16>>::operator=[abi:ne180100]<std::vector<MIL::Fp16>,void>(a2 + 8, (__n128 *)&v52);
      if (v52.__r_.__value_.__r.__words[0])
      {
        v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      std::vector<MIL::Fp16>::reserve((void **)(a2 + 8), v47.__r_.__value_.__l.__size_);
      if (v47.__r_.__value_.__l.__size_)
      {
        v32 = 0;
        do
        {
          v33 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v47, v32);
          v34 = v33;
          v36 = *(char **)(a2 + 16);
          v35 = *(_QWORD *)(a2 + 24);
          if ((unint64_t)v36 >= v35)
          {
            v38 = (char *)*v31;
            v39 = v36 - (_BYTE *)*v31;
            if (v39 <= -3)
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            v40 = v39 >> 1;
            v41 = v35 - (_QWORD)v38;
            if (v41 <= (v39 >> 1) + 1)
              v42 = v40 + 1;
            else
              v42 = v41;
            if (v41 >= 0x7FFFFFFFFFFFFFFELL)
              v43 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v43 = v42;
            if (v43)
            {
              v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a2 + 24, v43);
              v38 = *(char **)(a2 + 8);
              v36 = *(char **)(a2 + 16);
            }
            else
            {
              v44 = 0;
            }
            v45 = &v44[2 * v40];
            *(_WORD *)v45 = *v34;
            v37 = v45 + 2;
            while (v36 != v38)
            {
              v46 = *((_WORD *)v36 - 1);
              v36 -= 2;
              *((_WORD *)v45 - 1) = v46;
              v45 -= 2;
            }
            *(_QWORD *)(a2 + 8) = v45;
            *(_QWORD *)(a2 + 16) = v37;
            *(_QWORD *)(a2 + 24) = &v44[2 * v43];
            if (v38)
              operator delete(v38);
          }
          else
          {
            *(_WORD *)v36 = *v33;
            v37 = v36 + 2;
          }
          *(_QWORD *)(a2 + 16) = v37;
          ++v32;
        }
        while (v32 < v47.__r_.__value_.__l.__size_);
      }
      if (*(_BYTE *)(a2 + 6))
        *(_BYTE *)(a2 + 6) = 0;
      if (__p)
      {
        v54 = __p;
        operator delete(__p);
      }
      if (v57)
      {
        v58 = (char *)v57;
        operator delete(v57);
      }
      goto LABEL_47;
    }
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  v15 = (std::__shared_weak_count *)LocationPtr[1];
  v50 = *LocationPtr;
  v51 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if ((unint64_t)(v54 - (_BYTE *)__p) <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v18 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)__p + 1));
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
  std::to_string(&v47, v19);
  v20 = std::string::insert(&v47, 0, "Post scale tensor must be of shape (");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v52, ",)");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v49 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)v48 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x20BCFEAD4](a3, &v50, 319, v48);
  if (SHIBYTE(v49) < 0)
    operator delete(v48[0]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  v24 = v51;
  if (v51)
  {
    v25 = (unint64_t *)&v51->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  if (v57)
  {
    v58 = (char *)v57;
    operator delete(v57);
  }
}

void sub_2068E4200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v39;

  if (__p)
    operator delete(__p);
  v39 = *(void **)(v37 - 112);
  if (v39)
  {
    *(_QWORD *)(v37 - 104) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<std::vector<MIL::Fp16>>::operator=[abi:ne180100]<std::vector<MIL::Fp16>,void>(uint64_t a1, __n128 *a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    std::vector<MIL::Fp16>::__move_assign(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(MIL::Fp16 *a1@<X0>, _BYTE *a2@<X2>, _WORD *a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t ParameterValue;
  _WORD *v9;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;
  void *__p[2];
  std::string::size_type v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  MIL::Fp16::FromFloat(a1, 0.0);
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (!ParameterValue)
  {
    *a2 = 0;
    goto LABEL_29;
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue))
  {
    v9 = (_WORD *)MEMORY[0x20BCFEE7C]();
    if (v9)
    {
      *a3 = *v9;
      *a2 = 1;
LABEL_29:
      MIL::ValidationResult::ValidationResult(a4);
      return;
    }
  }
  *a2 = 0;
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  v11 = (std::__shared_weak_count *)LocationPtr[1];
  v32 = *LocationPtr;
  v33 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  std::operator+<char>();
  v14 = std::string::append(&v27, "\" in operation \"");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = (*(uint64_t (**)(MIL::Fp16 *))(*(_QWORD *)a1 + 56))(a1);
  v17 = *(char *)(v16 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)v16;
  else
    v18 = *(const std::string::value_type **)v16;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(v16 + 23);
  else
    v19 = *(_QWORD *)(v16 + 8);
  v20 = std::string::append(&v28, v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v29, "\".");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v31 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x20BCFEAD4](a4, &v32, 304, __p);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v24 = v33;
  if (v33)
  {
    v25 = (unint64_t *)&v33->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_2068E4594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v35 - 64);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ParseNeMatmulParamValues(ANEMachineIR::Validators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  MIL::Fp16 *ParameterValue;
  MIL::Fp16 *v8;
  MIL::IRValueType *ParameterType;
  uint64_t v10;
  uint64_t v11;
  MIL::IRValueType *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int16 v28;
  void *v29;
  MIL::IRValue *v30;
  std::string::size_type v31;
  void **v32;
  std::string::size_type v33;
  _WORD *v34;
  _WORD *v35;
  unint64_t v36;
  char *v37;
  _WORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int16 v47;
  std::string v48;
  void *v49[2];
  std::string::size_type v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::string v53;
  void *v54;
  _BYTE *v55;
  uint64_t v56;
  void *__p;
  _BYTE *v58;
  uint64_t v59;
  _BYTE v60[6];
  char v61;
  void *v62[3];
  char v63;
  int v64;
  char v65;

  v61 = 0;
  LOBYTE(v62[0]) = 0;
  v63 = 0;
  LOBYTE(v64) = 0;
  v65 = 0;
  *(_DWORD *)v60 = 0;
  v60[4] = 0;
  ANEMachineIR::Validators::ParseNeBatchMatmulParamValues(this, (uint64_t)v60, a3);
  if (!MIL::ValidationResult::IsGood(a3))
    goto LABEL_43;
  MEMORY[0x20BCFEAEC](a3);
  *(_WORD *)a2 = *(_WORD *)v60;
  *(_DWORD *)((char *)a2 + 2) = *(_DWORD *)&v60[2];
  *((_BYTE *)a2 + 6) = v61;
  std::__optional_storage_base<std::vector<MIL::Fp16>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<MIL::Fp16>,false> const&>((uint64_t)a2 + 8, (uint64_t)v62);
  *((_DWORD *)a2 + 10) = v64;
  *((_BYTE *)a2 + 44) = v65;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bias");
  ParameterValue = (MIL::Fp16 *)MIL::IROperation::TryGetParameterValue();
  v8 = ParameterValue;
  if (SHIBYTE(v59) < 0)
  {
    operator delete(__p);
    if (!v8)
      goto LABEL_33;
  }
  else if (!ParameterValue)
  {
LABEL_33:
    LOWORD(v54) = MIL::Fp16::FromFloat(ParameterValue, 0.0);
    v53.__r_.__value_.__s.__data_[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "bias");
    MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(this, &v53, &v54, a3);
    if (SHIBYTE(v59) < 0)
      operator delete(__p);
    if ((MIL::ValidationResult::IsGood(a3) & 1) != 0)
    {
      MEMORY[0x20BCFEAEC](a3);
      v28 = (__int16)v54;
      if (!*((_BYTE *)a2 + 50))
        *((_BYTE *)a2 + 50) = 1;
      *((_WORD *)a2 + 24) = v28;
      if (*((_BYTE *)a2 + 80))
      {
        v29 = (void *)*((_QWORD *)a2 + 7);
        if (v29)
        {
          *((_QWORD *)a2 + 8) = v29;
          operator delete(v29);
        }
        *((_BYTE *)a2 + 80) = 0;
      }
LABEL_42:
      MIL::ValidationResult::ValidationResult(a3);
      goto LABEL_43;
    }
    goto LABEL_43;
  }
  ParameterValue = (MIL::Fp16 *)(*(uint64_t (**)(MIL::Fp16 *))(*(_QWORD *)v8 + 40))(v8);
  if (!ParameterValue)
    goto LABEL_33;
  std::string::basic_string[abi:ne180100]<0>(&v54, "bias");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v10 = MIL::IRValueType::AsTensorType(ParameterType);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 96))(v10);
  __p = 0;
  v58 = 0;
  v59 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3);
  if (SHIBYTE(v56) < 0)
    operator delete(v54);
  std::string::basic_string[abi:ne180100]<0>(&v53, "y");
  v12 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v13 = MIL::IRValueType::AsTensorType(v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13);
  v54 = 0;
  v55 = 0;
  v56 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v54, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (v58 - (_BYTE *)__p == 8)
  {
    if ((unint64_t)(v55 - (_BYTE *)v54) <= 8)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    if (*(_QWORD *)__p == *((_QWORD *)v54 + 1))
    {
      std::string::basic_string[abi:ne180100]<0>(&v53, "bias");
      v30 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(v30);
      v48.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v48.__r_.__value_.__l.__size_ = v31;
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      memset(&v53, 0, sizeof(v53));
      v32 = (void **)((char *)a2 + 56);
      std::optional<std::vector<MIL::Fp16>>::operator=[abi:ne180100]<std::vector<MIL::Fp16>,void>((uint64_t)a2 + 56, (__n128 *)&v53);
      if (v53.__r_.__value_.__r.__words[0])
      {
        v53.__r_.__value_.__l.__size_ = v53.__r_.__value_.__r.__words[0];
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      std::vector<MIL::Fp16>::reserve((void **)a2 + 7, v48.__r_.__value_.__l.__size_);
      if (v48.__r_.__value_.__l.__size_)
      {
        v33 = 0;
        do
        {
          v34 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v48, v33);
          v35 = v34;
          v37 = (char *)*((_QWORD *)a2 + 8);
          v36 = *((_QWORD *)a2 + 9);
          if ((unint64_t)v37 >= v36)
          {
            v39 = (char *)*v32;
            v40 = v37 - (_BYTE *)*v32;
            if (v40 <= -3)
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            v41 = v40 >> 1;
            v42 = v36 - (_QWORD)v39;
            if (v42 <= (v40 >> 1) + 1)
              v43 = v41 + 1;
            else
              v43 = v42;
            if (v42 >= 0x7FFFFFFFFFFFFFFELL)
              v44 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v44 = v43;
            if (v44)
            {
              v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)a2 + 72, v44);
              v39 = (char *)*((_QWORD *)a2 + 7);
              v37 = (char *)*((_QWORD *)a2 + 8);
            }
            else
            {
              v45 = 0;
            }
            v46 = &v45[2 * v41];
            *(_WORD *)v46 = *v35;
            v38 = v46 + 2;
            while (v37 != v39)
            {
              v47 = *((_WORD *)v37 - 1);
              v37 -= 2;
              *((_WORD *)v46 - 1) = v47;
              v46 -= 2;
            }
            *((_QWORD *)a2 + 7) = v46;
            *((_QWORD *)a2 + 8) = v38;
            *((_QWORD *)a2 + 9) = &v45[2 * v44];
            if (v39)
              operator delete(v39);
          }
          else
          {
            *(_WORD *)v37 = *v34;
            v38 = v37 + 2;
          }
          *((_QWORD *)a2 + 8) = v38;
          ++v33;
        }
        while (v33 < v48.__r_.__value_.__l.__size_);
      }
      if (*((_BYTE *)a2 + 50))
        *((_BYTE *)a2 + 50) = 0;
      if (v54)
      {
        v55 = v54;
        operator delete(v54);
      }
      if (__p)
      {
        v58 = __p;
        operator delete(__p);
      }
      goto LABEL_42;
    }
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v16 = (std::__shared_weak_count *)LocationPtr[1];
  v51 = *LocationPtr;
  v52 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if ((unint64_t)(v55 - (_BYTE *)v54) <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v19 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v54 + 1));
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19);
  std::to_string(&v48, v20);
  v21 = std::string::insert(&v48, 0, "Bias tensor must be of shape (");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v53, ",)");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v50 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)v49 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x20BCFEAD4](a3, &v51, 319, v49);
  if (SHIBYTE(v50) < 0)
    operator delete(v49[0]);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v25 = v52;
  if (v52)
  {
    v26 = (unint64_t *)&v52->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
LABEL_43:
  if (v63)
  {
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
    }
  }
}

void sub_2068E4B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  void *v45;

  if (__p)
    operator delete(__p);
  if (a38)
    operator delete(a38);
  if (*(_BYTE *)(v43 - 96))
  {
    v45 = *(void **)(v43 - 120);
    if (v45)
    {
      *(_QWORD *)(v43 - 112) = v45;
      operator delete(v45);
    }
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::ValidateNeBatchMatmul(uint64_t *a1@<X0>, uint64_t a2@<X1>, ANEMachineIR::Utils *a3@<X2>, ANEMachineIR::Utils *a4@<X3>, uint64_t a5@<X4>, ANEMachineIR::Utils *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  char v13;
  char v14;
  const MIL::IRTensorValueType *v15;
  const MIL::IRTensorValueType *v16;
  const MIL::IRTensorValueType *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v23;
  std::string::size_type v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *size;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  std::string::size_type v34;
  std::string::size_type v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::string::size_type v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  std::string::size_type v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  std::string *v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  std::string *v102;
  std::string::size_type v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void *v111[2];
  std::string::size_type v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  void *v115[2];
  std::string::size_type v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::string v121;
  std::string v122;
  std::string v123;
  std::string v124;
  void *__p[2];
  std::string::size_type v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void *v129;
  _BYTE *v130;
  _BYTE *v131;
  _BYTE *v132;
  _QWORD *v133;
  _QWORD *v134;
  std::string v135;
  __int128 v136;
  uint64_t v137;
  int v138;
  std::string v139;
  std::string v140;

  if (a7[1])
    v13 = *a7;
  else
    v13 = 0;
  if (a7[3])
    v14 = a7[2];
  else
    v14 = 0;
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)a8))
    return;
  MEMORY[0x20BCFEAEC](a8);
  ANEMachineIR::Utils::GetStaticTensorShape(a3, v15, (uint64_t)&v133);
  ANEMachineIR::Utils::GetStaticTensorShape(a4, v16, (uint64_t)&v131);
  ANEMachineIR::Utils::GetStaticTensorShape(a6, v17, (uint64_t)&v129);
  v18 = v133;
  v19 = v134;
  if (v134 == v133)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if ((unint64_t)(v132 - v131) <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v20 = *(v134 - 1);
  v21 = *((_QWORD *)v132 - 2);
  if (v20 == v21 || v20 == v21 + 1)
  {
    memset(&v124, 0, sizeof(v124));
    v24 = *a1;
    v23 = (std::__shared_weak_count *)a1[1];
    v119 = *a1;
    v120 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
      v19 = v134;
    }
    v124.__r_.__value_.__l.__size_ = 0;
    memset(&v140, 0, sizeof(v140));
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v140, v18, (uint64_t)(v19 - 2), v19 - 2 - v18);
    memset(&v139, 0, sizeof(v139));
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v139, v131, (uint64_t)(v132 - 16), (v132 - 16 - v131) >> 3);
    v123.__r_.__value_.__r.__words[0] = v24;
    v123.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    if (v23)
    {
      v27 = (unint64_t *)&v23->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    ANEMachineIR::Utils::BroadcastShapes((uint64_t *)&v123, (uint64_t)&v140, (uint64_t)&v139, &v124.__r_.__value_.__l.__data_, (MIL::ValidationResult *)&v135);
    size = (std::__shared_weak_count *)v123.__r_.__value_.__l.__size_;
    if (v123.__r_.__value_.__l.__size_)
    {
      v30 = (unint64_t *)(v123.__r_.__value_.__l.__size_ + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v135) & 1) == 0)
    {
      *(_OWORD *)(a8 + 8) = *(_OWORD *)&v135.__r_.__value_.__r.__words[1];
      *(_OWORD *)&v135.__r_.__value_.__r.__words[1] = 0uLL;
      *(_OWORD *)(a8 + 24) = v136;
      *(_QWORD *)(a8 + 40) = v137;
      v136 = 0uLL;
      v137 = 0;
      *(_QWORD *)a8 = MEMORY[0x24BE620D8] + 16;
      *(_DWORD *)(a8 + 48) = v138;
LABEL_98:
      MEMORY[0x20BCFEAEC](&v135);
      if (v139.__r_.__value_.__r.__words[0])
      {
        v139.__r_.__value_.__l.__size_ = v139.__r_.__value_.__r.__words[0];
        operator delete(v139.__r_.__value_.__l.__data_);
      }
      if (v140.__r_.__value_.__r.__words[0])
      {
        v140.__r_.__value_.__l.__size_ = v140.__r_.__value_.__r.__words[0];
        operator delete(v140.__r_.__value_.__l.__data_);
      }
      if (v120)
      {
        v77 = &v120->__shared_owners_;
        do
          v78 = __ldaxr((unint64_t *)v77);
        while (__stlxr(v78 - 1, (unint64_t *)v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)a8))
      {
        MEMORY[0x20BCFEAEC](a8);
        v79 = v129;
        v80 = v130 - (_BYTE *)v129;
        if (v124.__r_.__value_.__l.__size_ - v124.__r_.__value_.__r.__words[0] == v130 - (_BYTE *)v129)
        {
          if (!memcmp(v124.__r_.__value_.__l.__data_, v129, v124.__r_.__value_.__l.__size_ - v124.__r_.__value_.__r.__words[0]))
          {
            MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a8);
          }
          else
          {
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v129);
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v124);
            v81 = a1[1];
            v113 = *a1;
            v114 = (std::__shared_weak_count *)v81;
            if (v81)
            {
              v82 = (unint64_t *)(v81 + 8);
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
            }
            std::operator+<char>();
            v84 = std::string::append(&v122, " does not match inferred shape ");
            v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
            v123.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v85;
            v84->__r_.__value_.__l.__size_ = 0;
            v84->__r_.__value_.__r.__words[2] = 0;
            v84->__r_.__value_.__r.__words[0] = 0;
            if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v86 = &v140;
            else
              v86 = (std::string *)v140.__r_.__value_.__r.__words[0];
            if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v87 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
            else
              v87 = v140.__r_.__value_.__l.__size_;
            v88 = std::string::append(&v123, (const std::string::value_type *)v86, v87);
            v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
            v139.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v89;
            v88->__r_.__value_.__l.__size_ = 0;
            v88->__r_.__value_.__r.__words[2] = 0;
            v88->__r_.__value_.__r.__words[0] = 0;
            v90 = std::string::append(&v139, ".");
            v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
            v112 = v90->__r_.__value_.__r.__words[2];
            *(_OWORD *)v111 = v91;
            v90->__r_.__value_.__l.__size_ = 0;
            v90->__r_.__value_.__r.__words[2] = 0;
            v90->__r_.__value_.__r.__words[0] = 0;
            MEMORY[0x20BCFEAD4](a8, &v113, 313, v111);
            if (SHIBYTE(v112) < 0)
              operator delete(v111[0]);
            if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v139.__r_.__value_.__l.__data_);
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v123.__r_.__value_.__l.__data_);
            if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v122.__r_.__value_.__l.__data_);
            v92 = v114;
            if (v114)
            {
              v93 = (unint64_t *)&v114->__shared_owners_;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v140.__r_.__value_.__l.__data_);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          v95 = a1[1];
          v117 = *a1;
          v118 = (std::__shared_weak_count *)v95;
          if (v95)
          {
            v96 = (unint64_t *)(v95 + 8);
            do
              v97 = __ldxr(v96);
            while (__stxr(v97 + 1, v96));
            v80 = v130 - v79;
          }
          std::to_string(&v123, v80 >> 3);
          v98 = std::string::insert(&v123, 0, "Output rank ");
          v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
          v139.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v99;
          v98->__r_.__value_.__l.__size_ = 0;
          v98->__r_.__value_.__r.__words[2] = 0;
          v98->__r_.__value_.__r.__words[0] = 0;
          v100 = std::string::append(&v139, " does not match rank of inferred shape ");
          v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
          v140.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v101;
          v100->__r_.__value_.__l.__size_ = 0;
          v100->__r_.__value_.__r.__words[2] = 0;
          v100->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v122, (uint64_t)(v124.__r_.__value_.__l.__size_ - v124.__r_.__value_.__r.__words[0]) >> 3);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v102 = &v122;
          else
            v102 = (std::string *)v122.__r_.__value_.__r.__words[0];
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v103 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
          else
            v103 = v122.__r_.__value_.__l.__size_;
          v104 = std::string::append(&v140, (const std::string::value_type *)v102, v103);
          v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
          v135.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v105;
          v104->__r_.__value_.__l.__size_ = 0;
          v104->__r_.__value_.__r.__words[2] = 0;
          v104->__r_.__value_.__r.__words[0] = 0;
          v106 = std::string::append(&v135, ".");
          v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
          v116 = v106->__r_.__value_.__r.__words[2];
          *(_OWORD *)v115 = v107;
          v106->__r_.__value_.__l.__size_ = 0;
          v106->__r_.__value_.__r.__words[2] = 0;
          v106->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x20BCFEAD4](a8, &v117, 313, v115);
          if (SHIBYTE(v116) < 0)
            operator delete(v115[0]);
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v135.__r_.__value_.__l.__data_);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v122.__r_.__value_.__l.__data_);
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v140.__r_.__value_.__l.__data_);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v139.__r_.__value_.__l.__data_);
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v123.__r_.__value_.__l.__data_);
          v108 = v118;
          if (v118)
          {
            v109 = (unint64_t *)&v118->__shared_owners_;
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
        }
      }
      if (v124.__r_.__value_.__r.__words[0])
      {
        v124.__r_.__value_.__l.__size_ = v124.__r_.__value_.__r.__words[0];
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      goto LABEL_166;
    }
    v32 = v133;
    v33 = v134 - v133 - 2;
    v34 = v124.__r_.__value_.__r.__words[2];
    v35 = v124.__r_.__value_.__l.__size_;
    if (v124.__r_.__value_.__l.__size_ >= v124.__r_.__value_.__r.__words[2])
    {
      v57 = (void *)v124.__r_.__value_.__r.__words[0];
      v58 = (uint64_t)(v124.__r_.__value_.__l.__size_ - v124.__r_.__value_.__r.__words[0]) >> 3;
      v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 61)
        goto LABEL_175;
      v60 = v124.__r_.__value_.__r.__words[2] - v124.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v124.__r_.__value_.__r.__words[2] - v124.__r_.__value_.__r.__words[0]) >> 2 > v59)
        v59 = v60 >> 2;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (v61)
      {
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v124.__r_.__value_.__r.__words[2], v61);
        v35 = v124.__r_.__value_.__l.__size_;
        v57 = (void *)v124.__r_.__value_.__r.__words[0];
      }
      else
      {
        v62 = 0;
      }
      v63 = &v62[8 * v58];
      v34 = (std::string::size_type)&v62[8 * v61];
      *(_QWORD *)v63 = v32[v33];
      v36 = v63 + 8;
      while ((void *)v35 != v57)
      {
        v64 = *(_QWORD *)(v35 - 8);
        v35 -= 8;
        *((_QWORD *)v63 - 1) = v64;
        v63 -= 8;
      }
      v124.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
      v124.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
      v124.__r_.__value_.__r.__words[2] = v34;
      if (v57)
      {
        operator delete(v57);
        v34 = v124.__r_.__value_.__r.__words[2];
      }
    }
    else
    {
      *(_QWORD *)v124.__r_.__value_.__l.__size_ = v133[v33];
      v36 = (_QWORD *)(v35 + 8);
    }
    v124.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
    v65 = v131;
    v66 = ((v132 - v131) >> 3) - 1;
    if ((unint64_t)v36 < v34)
    {
      *v36 = *(_QWORD *)&v131[8 * v66];
      v67 = (std::string::size_type)(v36 + 1);
LABEL_97:
      v124.__r_.__value_.__l.__size_ = v67;
      MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a8);
      goto LABEL_98;
    }
    v68 = (_QWORD *)v124.__r_.__value_.__r.__words[0];
    v69 = (uint64_t)((uint64_t)v36 - v124.__r_.__value_.__r.__words[0]) >> 3;
    v70 = v69 + 1;
    if (!((unint64_t)(v69 + 1) >> 61))
    {
      v71 = v34 - v124.__r_.__value_.__r.__words[0];
      if (v71 >> 2 > v70)
        v70 = v71 >> 2;
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
        v72 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v72 = v70;
      if (v72)
      {
        v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v124.__r_.__value_.__r.__words[2], v72);
        v36 = (_QWORD *)v124.__r_.__value_.__l.__size_;
        v68 = (_QWORD *)v124.__r_.__value_.__r.__words[0];
      }
      else
      {
        v73 = 0;
      }
      v74 = &v73[8 * v69];
      v75 = (std::string::size_type)&v73[8 * v72];
      *(_QWORD *)v74 = v65[v66];
      v67 = (std::string::size_type)(v74 + 8);
      while (v36 != v68)
      {
        v76 = *--v36;
        *((_QWORD *)v74 - 1) = v76;
        v74 -= 8;
      }
      v124.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
      v124.__r_.__value_.__l.__size_ = v67;
      v124.__r_.__value_.__r.__words[2] = v75;
      if (v68)
        operator delete(v68);
      goto LABEL_97;
    }
LABEL_175:
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  }
  v37 = a1[1];
  v127 = *a1;
  v128 = (std::__shared_weak_count *)v37;
  if (v37)
  {
    v38 = (unint64_t *)(v37 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  std::to_string(&v123, v20);
  v40 = std::string::insert(&v123, 0, "Matrix inner dimension mismatch, tensor y must have inner dimension ");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v124, " or ");
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v139.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v122, v20 - 1);
  if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v122;
  else
    v44 = (std::string *)v122.__r_.__value_.__r.__words[0];
  if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
  else
    v45 = v122.__r_.__value_.__l.__size_;
  v46 = std::string::append(&v139, (const std::string::value_type *)v44, v45);
  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v140.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v48 = std::string::append(&v140, ", got ");
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v135.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v121, v21);
  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = &v121;
  else
    v50 = (std::string *)v121.__r_.__value_.__r.__words[0];
  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
  else
    v51 = v121.__r_.__value_.__l.__size_;
  v52 = std::string::append(&v135, (const std::string::value_type *)v50, v51);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v126 = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x20BCFEAD4](a8, &v127, 319, __p);
  if (SHIBYTE(v126) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  v54 = v128;
  if (v128)
  {
    v55 = (unint64_t *)&v128->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
LABEL_166:
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
}

void sub_2068E56D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
  uint64_t v44;
  void *v46;
  void *v47;

  if (__p)
    operator delete(__p);
  if (a44)
    operator delete(a44);
  v46 = *(void **)(v44 - 240);
  if (v46)
  {
    *(_QWORD *)(v44 - 232) = v46;
    operator delete(v46);
  }
  v47 = *(void **)(v44 - 216);
  if (v47)
  {
    *(_QWORD *)(v44 - 208) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ValidateCommon(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ANEMachineIR::Utils *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, MIL::ValidationResult *a9@<X8>, uint64_t a10)
{
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  const MIL::IRTensorValueType *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _BOOL8 v48;
  _BOOL4 v49;
  char v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  MIL::ValidationResult *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  void *v68[2];
  char v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::string v72;
  std::string v73;
  void *__p[2];
  std::string::size_type v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  void *v82;
  _BYTE *v83;
  char v84;
  uint64_t v85;
  std::__shared_weak_count *v86;

  v19 = (std::__shared_weak_count *)a1[1];
  v85 = *a1;
  v86 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&v82, "x");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v85, a3, (uint64_t)&v82, a2, a9);
  if (v84 < 0)
    operator delete(v82);
  v22 = v86;
  if (v86)
  {
    v23 = (unint64_t *)&v86->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (MIL::ValidationResult::IsGood(a9))
  {
    MEMORY[0x20BCFEAEC](a9);
    v25 = (std::__shared_weak_count *)a1[1];
    v80 = *a1;
    v81 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    std::string::basic_string[abi:ne180100]<0>(&v82, "y");
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v80, (uint64_t)a4, (uint64_t)&v82, a2, a9);
    if (v84 < 0)
      operator delete(v82);
    v28 = v81;
    if (v81)
    {
      v29 = (unint64_t *)&v81->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (MIL::ValidationResult::IsGood(a9))
    {
      MEMORY[0x20BCFEAEC](a9);
      v31 = (std::__shared_weak_count *)a1[1];
      v78 = *a1;
      v79 = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      ANEMachineIR::Validators::ValidatePostRightShiftRange(a9);
      if (v79)
      {
        v34 = &v79->__shared_owners_;
        do
          v35 = __ldaxr((unint64_t *)v34);
        while (__stlxr(v35 - 1, (unint64_t *)v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      if (MIL::ValidationResult::IsGood(a9))
      {
        MEMORY[0x20BCFEAEC](a9);
        if (!*(_BYTE *)(a10 + 24))
          goto LABEL_53;
        ANEMachineIR::Utils::GetStaticTensorShape(a4, v36, (uint64_t)&v82);
        v37 = v82;
        if ((unint64_t)(v83 - (_BYTE *)v82) <= 8)
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        v64 = *((_QWORD *)v82 + 1);
        v65 = (uint64_t)(*(_QWORD *)(a10 + 8) - *(_QWORD *)a10) >> 1;
        if (v65 != v64)
        {
          v38 = (std::__shared_weak_count *)a1[1];
          v76 = *a1;
          v77 = v38;
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            if ((unint64_t)(v83 - (_BYTE *)v37) <= 8)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          std::to_string(&v72, *((_QWORD *)v37 + 1));
          v41 = std::string::insert(&v72, 0, "Post scale tensor must be of shape (");
          v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v73.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          v43 = std::string::append(&v73, ",)");
          v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v75 = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x20BCFEAD4](a9, &v76, 319, __p);
          if (SHIBYTE(v75) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v73.__r_.__value_.__l.__data_);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v72.__r_.__value_.__l.__data_);
          v45 = v77;
          if (v77)
          {
            v46 = (unint64_t *)&v77->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
        }
        if (v82)
        {
          v83 = v82;
          operator delete(v82);
        }
        if (v65 == v64)
        {
LABEL_53:
          v48 = (*(unsigned int (**)(ANEMachineIR::Utils *))(*(_QWORD *)a4 + 88))(a4) == 4;
          v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 88))(a3) == 4;
          v50 = ANEMachineIR::Validators::BinaryPointFormatOffsets((ANEMachineIR::Validators *)v48, v49);
          if (ANEMachineIR::Validators::NeuralEngineComputedBinaryPointAndShiftLegal((ANEMachineIR::Validators *)a7, a8, v50))
          {
            v51 = (std::__shared_weak_count *)a1[1];
            v66 = *a1;
            v67 = v51;
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
            }
            ANEMachineIR::Validators::ValidateLiveTensorSize(&v66, a6, a5, a2, a9);
            v54 = v67;
            if (v67)
            {
              v55 = (unint64_t *)&v67->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            if (MIL::ValidationResult::IsGood(a9))
            {
              v57 = (MIL::ValidationResult *)MEMORY[0x20BCFEAEC](a9);
              MIL::ValidationResult::ValidationResult(v57);
            }
          }
          else
          {
            v58 = (std::__shared_weak_count *)a1[1];
            v70 = *a1;
            v71 = v58;
            if (v58)
            {
              v59 = (unint64_t *)&v58->__shared_owners_;
              do
                v60 = __ldxr(v59);
              while (__stxr(v60 + 1, v59));
            }
            std::string::basic_string[abi:ne180100]<0>(v68, "Computed binary point plus post-right shift bounded by accumulator dest size. See op definition.");
            MEMORY[0x20BCFEAD4](a9, &v70, 309, v68);
            if (v69 < 0)
              operator delete(v68[0]);
            v61 = v71;
            if (v71)
            {
              v62 = (unint64_t *)&v71->__shared_owners_;
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
          }
        }
      }
    }
  }
}

void sub_2068E5ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41)
{
  uint64_t v41;
  void *v43;

  if (a39 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  v43 = *(void **)(v41 - 128);
  if (v43)
  {
    *(_QWORD *)(v41 - 120) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::Validators::ValidateNeMatmul@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ANEMachineIR::Utils *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, MIL::ValidationResult *a8@<X8>)
{
  char v9;
  char v10;
  uint64_t result;
  MIL::ValidationResult *v12;

  if (a7[1])
    v9 = *a7;
  else
    v9 = 0;
  if (a7[3])
    v10 = a7[2];
  else
    v10 = 0;
  result = MIL::ValidationResult::IsGood(a8);
  if ((_DWORD)result)
  {
    v12 = (MIL::ValidationResult *)MEMORY[0x20BCFEAEC](a8);
    return MIL::ValidationResult::ValidationResult(v12);
  }
  return result;
}

void ANEMachineIR::Validators::ValidateNeBatchMatmul(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t *LocationPtr;
  uint64_t v5;
  MIL::IRValueType *ParameterType;
  ANEMachineIR::Utils *v7;
  MIL::IRValueType *v8;
  ANEMachineIR::Utils *v9;
  uint64_t v10;
  uint64_t v11;
  MIL::IRValueType *Type;
  ANEMachineIR::Utils *v13;
  _QWORD v14[3];
  void *__p;
  char v16;
  void *v17;
  char v18;
  int v19;
  char v20;
  char v21;
  void *v22;
  void *v23;
  char v24;
  char v25;
  char v26;
  void **v27;

  v21 = 0;
  LOBYTE(v22) = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v19 = 0;
  v20 = 0;
  ANEMachineIR::Validators::ParseNeBatchMatmulParamValues(a1, (uint64_t)&v19, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x20BCFEAEC](a2);
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v5 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
    std::string::basic_string[abi:ne180100]<0>(&v17, "x");
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    v7 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
    std::string::basic_string[abi:ne180100]<0>(&__p, "y");
    v8 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    v9 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v8);
    (*(void (**)(_QWORD *__return_ptr, MIL::IRObject *))(*(_QWORD *)a1 + 200))(v14, a1);
    v10 = v14[0];
    if (v14[1] == v14[0])
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v11 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 176))(a1);
    if (*(_QWORD *)(v11 + 8) == *(_QWORD *)v11)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v11);
    v13 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
    ANEMachineIR::Validators::ValidateNeBatchMatmul(LocationPtr, v5, v7, v9, v10, v13, (char *)&v19, (uint64_t)a2);
    v27 = (void **)v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
    if (v16 < 0)
      operator delete(__p);
    if (v18 < 0)
      operator delete(v17);
  }
  if (v24)
  {
    if (v22)
    {
      v23 = v22;
      operator delete(v22);
    }
  }
}

void sub_2068E6230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a28)
  {
    if (a25)
      operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::ValidateNeMatmul(ANEMachineIR::Validators *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t *LocationPtr;
  uint64_t v5;
  MIL::IRValueType *ParameterType;
  uint64_t v7;
  MIL::IRValueType *v8;
  ANEMachineIR::Utils *v9;
  uint64_t v10;
  uint64_t v11;
  MIL::IRValueType *Type;
  uint64_t v13;
  _QWORD v14[3];
  void *__p;
  char v16;
  void *v17;
  char v18;
  int v19;
  char v20;
  char v21;
  void *v22;
  void *v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  void *v29;
  void *v30;
  char v31;
  void **v32;

  v21 = 0;
  LOBYTE(v22) = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v19 = 0;
  v20 = 0;
  v27 = 0;
  v28 = 0;
  LOBYTE(v29) = 0;
  v31 = 0;
  ANEMachineIR::Validators::ParseNeMatmulParamValues(a1, (const MIL::IROperation *)&v19, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x20BCFEAEC](a2);
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v5 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(_QWORD *)a1 + 56))(a1);
    std::string::basic_string[abi:ne180100]<0>(&v17, "x");
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    v7 = MIL::IRValueType::AsTensorType(ParameterType);
    std::string::basic_string[abi:ne180100]<0>(&__p, "y");
    v8 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    v9 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v8);
    (*(void (**)(_QWORD *__return_ptr, ANEMachineIR::Validators *))(*(_QWORD *)a1 + 200))(v14, a1);
    v10 = v14[0];
    if (v14[1] == v14[0])
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v11 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(_QWORD *)a1 + 176))(a1);
    if (*(_QWORD *)(v11 + 8) == *(_QWORD *)v11)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v11);
    v13 = MIL::IRValueType::AsTensorType(Type);
    ANEMachineIR::Validators::ValidateNeMatmul(LocationPtr, v5, v7, v9, v10, v13, (char *)&v19, a2);
    v32 = (void **)v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
    if (v16 < 0)
      operator delete(__p);
    if (v18 < 0)
      operator delete(v17);
  }
  if (v31 && v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v24)
  {
    if (v22)
    {
      v23 = v22;
      operator delete(v22);
    }
  }
}

void sub_2068E6490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  ANEMachineIR::Validators::NeMatmulParamValues::~NeMatmulParamValues((ANEMachineIR::Validators::NeMatmulParamValues *)&a25);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::NeMatmulParamValues::~NeMatmulParamValues(ANEMachineIR::Validators::NeMatmulParamValues *this)
{
  void *v2;
  void *v3;

  if (*((_BYTE *)this + 80))
  {
    v2 = (void *)*((_QWORD *)this + 7);
    if (v2)
    {
      *((_QWORD *)this + 8) = v2;
      operator delete(v2);
    }
  }
  if (*((_BYTE *)this + 32))
  {
    v3 = (void *)*((_QWORD *)this + 1);
    if (v3)
    {
      *((_QWORD *)this + 2) = v3;
      operator delete(v3);
    }
  }
}

void std::__optional_storage_base<std::vector<MIL::Fp16>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<MIL::Fp16>,false> const&>(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        std::vector<MIL::Fp16>::__assign_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
    *(_BYTE *)(a1 + 24) = 1;
  }
}

char *std::vector<MIL::Fp16>::__assign_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(_QWORD *)result) >> 1)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_17:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 1;
  if (v15 >= a4)
    goto LABEL_17;
  v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_19:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2068E6750(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2068E67C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::vector<MIL::Fp16>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t ANEMachineIR::H2021::NeConv::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned __int8 *v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  unsigned __int8 *v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  unsigned __int8 *v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  unsigned __int8 *v101;
  void *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  unsigned __int8 *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  unsigned __int8 *v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  unsigned __int8 *v121;
  void *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  unsigned __int8 *v127;
  void *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  uint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  uint64_t v137;
  _QWORD *v138;
  unsigned __int8 *v139;
  void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  unsigned __int8 *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  _QWORD *v152;
  unsigned __int8 *v153;
  void *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  unsigned __int8 *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  std::__shared_weak_count_vtbl *v168;
  uint64_t v169;
  std::__shared_weak_count_vtbl *v170;
  uint64_t v171;
  _QWORD *v172;
  unsigned __int8 *v173;
  void *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  char **v179;
  uint64_t v180;
  std::__shared_weak_count_vtbl *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  __int128 v202;
  char *v203;
  char *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  char **v212;
  _QWORD *v213;
  uint64_t v214;
  MIL::Validation::TensorDTypeConstraints *v215;
  uint64_t v216;
  uint64_t *v217;
  unint64_t v218;
  uint64_t *v219;
  unint64_t v220;
  void *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count_vtbl *v227;
  void *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count_vtbl *v234;
  void *v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count_vtbl *v241;
  void *v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count_vtbl *v248;
  void *v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count_vtbl *v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count_vtbl *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  MIL::Validation::TensorRankValueConstraints *v262;
  void *v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count_vtbl *v269;
  void *v270;
  std::__shared_weak_count *v271;
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count_vtbl *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  MIL::Validation::TensorSymbolicShapeConstraints *v283;
  void *v284;
  std::__shared_weak_count *v285;
  std::__shared_weak_count_vtbl *v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count_vtbl *v290;
  void *v291;
  std::__shared_weak_count *v292;
  std::__shared_weak_count_vtbl *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count_vtbl *v297;
  void *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count_vtbl *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count_vtbl *v304;
  void *v305;
  std::__shared_weak_count *v306;
  std::__shared_weak_count_vtbl *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count_vtbl *v311;
  void *v312;
  std::__shared_weak_count *v313;
  std::__shared_weak_count_vtbl *v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count_vtbl *v318;
  void *v319;
  std::__shared_weak_count *v320;
  std::__shared_weak_count_vtbl *v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count_vtbl *v325;
  void *v326;
  std::__shared_weak_count *v327;
  std::__shared_weak_count_vtbl *v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count_vtbl *v332;
  void *v333;
  std::__shared_weak_count *v334;
  std::__shared_weak_count_vtbl *v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count_vtbl *v339;
  void *v340;
  std::__shared_weak_count *v341;
  std::__shared_weak_count_vtbl *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count_vtbl *v346;
  void *v347;
  std::__shared_weak_count *v348;
  std::__shared_weak_count_vtbl *v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count_vtbl *v353;
  void *v354;
  std::__shared_weak_count *v355;
  std::__shared_weak_count_vtbl *v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count_vtbl *v360;
  void *v361;
  std::__shared_weak_count *v362;
  std::__shared_weak_count_vtbl *v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count_vtbl *v367;
  uint64_t v368;
  std::__shared_weak_count *v369;
  std::__shared_weak_count_vtbl *v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  MIL::Validation::PossibleStringValuesConstraints *v374;
  std::__shared_weak_count_vtbl *v375;
  std::__shared_weak_count *v376;
  std::__shared_weak_count_vtbl *v377;
  uint64_t i;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  void *v382;
  uint64_t v383;
  std::__shared_weak_count *v384;
  std::__shared_weak_count_vtbl *v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count_vtbl *v389;
  uint64_t result;
  uint64_t v391;
  std::__shared_weak_count_vtbl *v392;
  std::__shared_weak_count *v393;
  void *v394;
  char v395;
  void *v396;
  std::__shared_weak_count *v397;
  void *v398;
  std::__shared_weak_count *v399;
  void *v400[2];
  char v401;
  void *v402;
  char v403;
  std::__shared_weak_count_vtbl *v404;
  std::__shared_weak_count *v405;
  void *v406[2];
  char v407;
  void *v408;
  char v409;
  std::__shared_weak_count_vtbl *v410;
  std::__shared_weak_count *v411;
  void *v412[2];
  char v413;
  void *v414;
  char v415;
  std::__shared_weak_count_vtbl *v416;
  std::__shared_weak_count *v417;
  void *v418[2];
  char v419;
  void *v420;
  char v421;
  std::__shared_weak_count_vtbl *v422;
  std::__shared_weak_count *v423;
  void *v424[2];
  char v425;
  void *v426;
  char v427;
  std::__shared_weak_count_vtbl *v428;
  std::__shared_weak_count *v429;
  void *v430[2];
  char v431;
  void *v432;
  char v433;
  std::__shared_weak_count_vtbl *v434;
  std::__shared_weak_count *v435;
  void *v436[2];
  char v437;
  void *v438;
  char v439;
  std::__shared_weak_count_vtbl *v440;
  std::__shared_weak_count *v441;
  void *v442[2];
  char v443;
  void *v444;
  char v445;
  std::__shared_weak_count_vtbl *v446;
  std::__shared_weak_count *v447;
  void *v448[2];
  char v449;
  void *v450;
  char v451;
  std::__shared_weak_count_vtbl *v452;
  std::__shared_weak_count *v453;
  void *v454[2];
  char v455;
  void *v456;
  char v457;
  std::__shared_weak_count_vtbl *v458;
  std::__shared_weak_count *v459;
  void *v460[2];
  char v461;
  void *v462;
  char v463;
  std::__shared_weak_count_vtbl *v464;
  std::__shared_weak_count *v465;
  void *v466[2];
  char v467;
  void *v468;
  char v469;
  std::__shared_weak_count_vtbl *v470;
  std::__shared_weak_count *v471;
  void *v472;
  std::__shared_weak_count *v473;
  void *v474;
  char v475;
  std::__shared_weak_count_vtbl *v476;
  std::__shared_weak_count *v477;
  void *v478;
  char v479;
  std::__shared_weak_count_vtbl *v480;
  std::__shared_weak_count *v481;
  void *v482;
  std::__shared_weak_count *v483;
  void *v484[2];
  char v485;
  std::__shared_weak_count_vtbl *v486;
  std::__shared_weak_count *v487;
  void *v488[2];
  char v489;
  void *v490;
  char v491;
  std::__shared_weak_count_vtbl *v492;
  std::__shared_weak_count *v493;
  void *v494[2];
  char v495;
  void *v496;
  char v497;
  std::__shared_weak_count_vtbl *v498;
  std::__shared_weak_count *v499;
  void *v500[2];
  char v501;
  void *v502;
  char v503;
  std::__shared_weak_count_vtbl *v504;
  std::__shared_weak_count *v505;
  void *v506[2];
  char v507;
  void *v508;
  char v509;
  std::__shared_weak_count_vtbl *v510;
  std::__shared_weak_count *v511;
  char **v512;
  std::__shared_weak_count *v513;
  uint64_t v514;
  std::__shared_weak_count *v515;
  void *v516[2];
  uint64_t v517;
  void *v518;
  void *v519;
  _QWORD *v520;
  std::__shared_weak_count *v521;
  uint64_t v522;
  uint64_t v523;
  _QWORD *v524;
  char **v525;
  std::__shared_weak_count *v526;
  std::__shared_weak_count *v527;
  std::__shared_weak_count *v528;
  std::__shared_weak_count *v529;
  std::__shared_weak_count *v530;
  std::__shared_weak_count *v531;
  std::__shared_weak_count *v532;
  std::__shared_weak_count *v533;
  std::__shared_weak_count *v534;
  std::__shared_weak_count *v535;
  std::__shared_weak_count *v536;
  std::__shared_weak_count *v537;
  std::__shared_weak_count *v538;
  std::__shared_weak_count *v539;
  std::__shared_weak_count *v540;
  std::__shared_weak_count *v541;
  std::__shared_weak_count *v542;
  std::__shared_weak_count *v543;
  std::__shared_weak_count *v544;
  void *__p;
  void *v546;
  _QWORD *v547;
  std::__shared_weak_count *v548;
  _QWORD *v549;
  void *v550;
  uint64_t v551;
  uint64_t v552;
  _QWORD v553[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t p_on_zero_shared_weak;
  _BYTE v557[24];
  _BYTE *v558;
  _QWORD v559[3];
  MIL::Validation::TensorDTypeConstraints *v560;
  std::__shared_weak_count_vtbl *v561;
  std::__shared_weak_count_vtbl *v562;
  _QWORD *v563;
  uint64_t v564;

  v564 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v549 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  p_on_zero_shared_weak = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v550 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v562 = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v563 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  v561 = v14;
  v551 = MIL::IRTensorValueType::MakeWithShape();
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v547 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v546 = v18 + 3;
  v552 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v518);
  v19 = v518;
  v518 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v548;
  if (v548)
  {
    p_shared_owners = (unint64_t *)&v548->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v549;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_get_deleter = (uint64_t)&v28->__on_zero_shared_weak;
  p_on_zero_shared_weak = (uint64_t)&v28->__on_zero_shared_weak;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v28->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v28->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  v28->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v27;
  Scalar = v28;
  v550 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  v562 = (std::__shared_weak_count_vtbl *)&v33->__on_zero_shared_weak;
  v563 = &v33->__on_zero_shared_weak;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v33->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v31;
  v33->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v32;
  v561 = v33;
  v551 = MIL::IRTensorValueType::MakeWithShape();
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = operator new(0x20uLL);
  v547 = v38 + 4;
  *v38 = v34;
  v38[1] = v35;
  v38[2] = v36;
  v38[3] = v37;
  __p = v38;
  v546 = v38 + 4;
  v552 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v23, "dense_kernel", (uint64_t *)&v518);
  v40 = v518;
  v518 = 0;
  if (v40)
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  v41 = v544;
  if (v544)
  {
    v42 = (unint64_t *)&v544->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 48))(*((_QWORD *)v39 + 5), 1);
  v44 = v549;
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = operator new(8uLL);
  v550 = v46;
  *v46 = v45;
  v552 = (uint64_t)(v46 + 1);
  v551 = (uint64_t)(v46 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v44, "strides", (uint64_t *)&Scalar);
  v48 = Scalar;
  Scalar = 0;
  if (v48)
    (*((void (**)(std::__shared_weak_count_vtbl *))v48->~__shared_weak_count + 1))(v48);
  v49 = v543;
  if (v543)
  {
    v50 = (unint64_t *)&v543->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v52, "pad_mode", (uint64_t *)&v550);
  v54 = v550;
  v550 = 0;
  if (v54)
    (*(void (**)(void *))(*(_QWORD *)v54 + 8))(v54);
  v55 = v542;
  if (v542)
  {
    v56 = (unint64_t *)&v542->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v58 = v549;
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = operator new(8uLL);
  v550 = v60;
  *v60 = v59;
  v552 = (uint64_t)(v60 + 1);
  v551 = (uint64_t)(v60 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v58, "pad", (uint64_t *)&Scalar);
  v62 = Scalar;
  Scalar = 0;
  if (v62)
    (*((void (**)(std::__shared_weak_count_vtbl *))v62->~__shared_weak_count + 1))(v62);
  v63 = v541;
  if (v541)
  {
    v64 = (unint64_t *)&v541->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 32))(*((_QWORD *)v61 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 48))(*((_QWORD *)v61 + 5), 1);
  v66 = v549;
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = operator new(8uLL);
  v550 = v68;
  *v68 = v67;
  v552 = (uint64_t)(v68 + 1);
  v551 = (uint64_t)(v68 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v66, "dilations", (uint64_t *)&Scalar);
  v70 = Scalar;
  Scalar = 0;
  if (v70)
    (*((void (**)(std::__shared_weak_count_vtbl *))v70->~__shared_weak_count + 1))(v70);
  v71 = v540;
  if (v540)
  {
    v72 = (unint64_t *)&v540->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v74, "num_groups", (uint64_t *)&v550);
  v76 = v550;
  v550 = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  v77 = v539;
  if (v539)
  {
    v78 = (unint64_t *)&v539->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 32))(*((_QWORD *)v75 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 48))(*((_QWORD *)v75 + 5), 1);
  v80 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v80, "group_kernel_reuse", (uint64_t *)&v550);
  v82 = v550;
  v550 = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  v83 = v538;
  if (v538)
  {
    v84 = (unint64_t *)&v538->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 32))(*((_QWORD *)v81 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 48))(*((_QWORD *)v81 + 5), 1);
  v86 = v549;
  v87 = MIL::IRUnknownDimension::Make(a1, 0);
  v88 = operator new(8uLL);
  v550 = v88;
  *v88 = v87;
  v552 = (uint64_t)(v88 + 1);
  v551 = (uint64_t)(v88 + 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  p_get_deleter = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v86, "bias", (uint64_t *)&v561);
  v90 = v561;
  v561 = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  v91 = v537;
  if (v537)
  {
    v92 = (unint64_t *)&v537->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 32))(*((_QWORD *)v89 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 48))(*((_QWORD *)v89 + 5), 1);
  v94 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v94, "acc_left_shift", (uint64_t *)&v550);
  v96 = v550;
  v550 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  v97 = v536;
  if (v536)
  {
    v98 = (unint64_t *)&v536->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 32))(*((_QWORD *)v95 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 48))(*((_QWORD *)v95 + 5), 1);
  v100 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v101 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v100, "acc_bias_shift", (uint64_t *)&v550);
  v102 = v550;
  v550 = 0;
  if (v102)
    (*(void (**)(void *))(*(_QWORD *)v102 + 8))(v102);
  v103 = v535;
  if (v535)
  {
    v104 = (unint64_t *)&v535->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v101 + 5) + 32))(*((_QWORD *)v101 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v101 + 5) + 48))(*((_QWORD *)v101 + 5), 1);
  v106 = v549;
  v107 = MIL::IRUnknownDimension::Make(a1, 0);
  v108 = operator new(8uLL);
  v550 = v108;
  *v108 = v107;
  v552 = (uint64_t)(v108 + 1);
  v551 = (uint64_t)(v108 + 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  p_get_deleter = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v106, "post_scale", (uint64_t *)&v561);
  v110 = v561;
  v561 = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  v111 = v534;
  if (v534)
  {
    v112 = (unint64_t *)&v534->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v109 + 5) + 32))(*((_QWORD *)v109 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v109 + 5) + 48))(*((_QWORD *)v109 + 5), 1);
  v114 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v114, "post_right_shift", (uint64_t *)&v550);
  v116 = v550;
  v550 = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  v117 = v533;
  if (v533)
  {
    v118 = (unint64_t *)&v533->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v115 + 5) + 32))(*((_QWORD *)v115 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v115 + 5) + 48))(*((_QWORD *)v115 + 5), 1);
  v120 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v121 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v120, "transposed", (uint64_t *)&v550);
  v122 = v550;
  v550 = 0;
  if (v122)
    (*(void (**)(void *))(*(_QWORD *)v122 + 8))(v122);
  v123 = v532;
  if (v532)
  {
    v124 = (unint64_t *)&v532->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v121 + 5) + 32))(*((_QWORD *)v121 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v121 + 5) + 48))(*((_QWORD *)v121 + 5), 1);
  v126 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v126, "pre_relu", (uint64_t *)&v550);
  v128 = v550;
  v550 = 0;
  if (v128)
    (*(void (**)(void *))(*(_QWORD *)v128 + 8))(v128);
  v129 = v531;
  if (v531)
  {
    v130 = (unint64_t *)&v531->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v127 + 5) + 32))(*((_QWORD *)v127 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v127 + 5) + 48))(*((_QWORD *)v127 + 5), 1);
  v132 = v549;
  v133 = MIL::IRUnknownDimension::Make(a1, 0);
  v134 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v134;
  v134->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v133;
  p_get_deleter = (uint64_t)&v134->~__shared_weak_count_0;
  p_on_zero_shared_weak = (uint64_t)&v134->~__shared_weak_count_0;
  v550 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v135 = MIL::IRUnknownDimension::Make(a1, 0);
  v136 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v561 = v136;
  v136->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v135;
  v562 = (std::__shared_weak_count_vtbl *)&v136->~__shared_weak_count_0;
  v563 = &v136->~__shared_weak_count_0;
  v551 = MIL::IRTensorValueType::MakeWithShape();
  v137 = MIL::IRUnknownDimension::Make(a1, 0);
  v138 = operator new(8uLL);
  __p = v138;
  *v138 = v137;
  v547 = v138 + 1;
  v546 = v138 + 1;
  v552 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[39],std::unique_ptr<MIL::IRParameter>>(v132, "alternative_format_kernel_coefficients", (uint64_t *)&v518);
  v140 = v518;
  v518 = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  v141 = v530;
  if (v530)
  {
    v142 = (unint64_t *)&v530->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v139 + 5) + 32))(*((_QWORD *)v139 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v139 + 5) + 48))(*((_QWORD *)v139 + 5), 1);
  v144 = v549;
  v145 = MIL::IRUnknownDimension::Make(a1, 0);
  v146 = operator new(8uLL);
  v550 = v146;
  *v146 = v145;
  v552 = (uint64_t)(v146 + 1);
  v551 = (uint64_t)(v146 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v147 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v144, "sparse_mask", (uint64_t *)&Scalar);
  v148 = Scalar;
  Scalar = 0;
  if (v148)
    (*((void (**)(std::__shared_weak_count_vtbl *))v148->~__shared_weak_count + 1))(v148);
  v149 = v529;
  if (v529)
  {
    v150 = (unint64_t *)&v529->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v147 + 5) + 32))(*((_QWORD *)v147 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v147 + 5) + 48))(*((_QWORD *)v147 + 5), 1);
  v152 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v153 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v152, "sparse_num_nonzero", (uint64_t *)&v550);
  v154 = v550;
  v550 = 0;
  if (v154)
    (*(void (**)(void *))(*(_QWORD *)v154 + 8))(v154);
  v155 = v528;
  if (v528)
  {
    v156 = (unint64_t *)&v528->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v153 + 5) + 32))(*((_QWORD *)v153 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v153 + 5) + 48))(*((_QWORD *)v153 + 5), 1);
  v158 = v549;
  v159 = MIL::IRUnknownDimension::Make(a1, 0);
  v160 = operator new(8uLL);
  v550 = v160;
  *v160 = v159;
  v552 = (uint64_t)(v160 + 1);
  v551 = (uint64_t)(v160 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v161 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[30],std::unique_ptr<MIL::IRParameter>>(v158, "sparse_num_nonzero_per_filter", (uint64_t *)&Scalar);
  v162 = Scalar;
  Scalar = 0;
  if (v162)
    (*((void (**)(std::__shared_weak_count_vtbl *))v162->~__shared_weak_count + 1))(v162);
  v163 = v527;
  if (v527)
  {
    v164 = (unint64_t *)&v527->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v161 + 5) + 32))(*((_QWORD *)v161 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v161 + 5) + 48))(*((_QWORD *)v161 + 5), 1);
  v166 = v549;
  v167 = MIL::IRUnknownDimension::Make(a1, 0);
  v168 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v168;
  v168->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v167;
  p_get_deleter = (uint64_t)&v168->~__shared_weak_count_0;
  p_on_zero_shared_weak = (uint64_t)&v168->~__shared_weak_count_0;
  v550 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v169 = MIL::IRUnknownDimension::Make(a1, 0);
  v170 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v561 = v170;
  v170->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v169;
  v562 = (std::__shared_weak_count_vtbl *)&v170->~__shared_weak_count_0;
  v563 = &v170->~__shared_weak_count_0;
  v551 = MIL::IRTensorValueType::MakeWithShape();
  v171 = MIL::IRUnknownDimension::Make(a1, 0);
  v172 = operator new(8uLL);
  __p = v172;
  *v172 = v171;
  v547 = v172 + 1;
  v546 = v172 + 1;
  v552 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v173 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v166, "palette_table", (uint64_t *)&v518);
  v174 = v518;
  v518 = 0;
  if (v174)
    (*(void (**)(void *))(*(_QWORD *)v174 + 8))(v174);
  v175 = v526;
  if (v526)
  {
    v176 = (unint64_t *)&v526->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v173 + 5) + 32))(*((_QWORD *)v173 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v173 + 5) + 48))(*((_QWORD *)v173 + 5), 1);
  v525 = 0;
  v178 = operator new();
  *(_QWORD *)v178 = 0;
  *(_QWORD *)(v178 + 8) = 0;
  *(_QWORD *)(v178 + 16) = 0;
  v550 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v525, (void **)v178);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v550, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v525, 1uLL);
  v179 = v525;
  v180 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v181 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v561 = v181;
  v181->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v180;
  v562 = (std::__shared_weak_count_vtbl *)&v181->~__shared_weak_count_0;
  v563 = &v181->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v182 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v183 = operator new(8uLL);
  __p = v183;
  *v183 = v182;
  v547 = v183 + 1;
  v546 = v183 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v184 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v185 = operator new(8uLL);
  v518 = v185;
  *v185 = v184;
  v520 = v185 + 1;
  v519 = v185 + 1;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v186 = v522;
  v523 = v522;
  if (v522)
  {
    v187 = (_QWORD *)operator new();
    v188 = v522;
    *v187 = &unk_24BFE7320;
    v187[1] = 0;
    v187[2] = 0;
    v187[3] = v188;
  }
  else
  {
    v187 = 0;
  }
  v524 = v187;
  v522 = 0;
  v189 = v179[2];
  v190 = v179[1];
  if (v190 >= v189)
  {
    v192 = (v190 - *v179) >> 4;
    v193 = v192 + 1;
    if ((unint64_t)(v192 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v194 = v189 - *v179;
    if (v194 >> 3 > v193)
      v193 = v194 >> 3;
    if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF0)
      v195 = 0xFFFFFFFFFFFFFFFLL;
    else
      v195 = v193;
    v553[1] = v179 + 2;
    v196 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v179 + 2), v195);
    v198 = &v196[16 * v192];
    *(_QWORD *)v198 = v186;
    *((_QWORD *)v198 + 1) = v187;
    v524 = 0;
    v523 = 0;
    v200 = *v179;
    v199 = v179[1];
    if (v199 == *v179)
    {
      v203 = v179[1];
      v201 = &v196[16 * v192];
    }
    else
    {
      v201 = &v196[16 * v192];
      do
      {
        v202 = *((_OWORD *)v199 - 1);
        v199 -= 16;
        *((_OWORD *)v201 - 1) = v202;
        v201 -= 16;
        *(_QWORD *)v199 = 0;
        *((_QWORD *)v199 + 1) = 0;
      }
      while (v199 != v200);
      v203 = *v179;
      v199 = v179[1];
    }
    v191 = v198 + 16;
    *v179 = v201;
    v551 = (uint64_t)v203;
    v179[1] = v198 + 16;
    v552 = (uint64_t)v199;
    v204 = v179[2];
    v179[2] = &v196[16 * v197];
    v553[0] = v204;
    v550 = v203;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v550);
  }
  else
  {
    *(_QWORD *)v190 = v186;
    *((_QWORD *)v190 + 1) = v187;
    v191 = v190 + 16;
    v524 = 0;
    v523 = 0;
  }
  v179[1] = v191;
  v205 = v522;
  v522 = 0;
  if (v205)
    (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
  v206 = v521;
  if (v521)
  {
    v207 = (unint64_t *)&v521->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  if (v518)
  {
    v519 = v518;
    operator delete(v518);
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  *(_OWORD *)v516 = *(_OWORD *)a2;
  v517 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v209 = (uint64_t)v549;
  v514 = (uint64_t)v549;
  if (v549)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = (std::__shared_weak_count_vtbl *)v209;
  }
  else
  {
    v210 = 0;
  }
  v515 = v210;
  v549 = 0;
  v512 = v525;
  if (v525)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = v525;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = (std::__shared_weak_count_vtbl *)v212;
  }
  else
  {
    v211 = 0;
  }
  v513 = v211;
  v525 = 0;
  v559[0] = &unk_24BFE7440;
  v559[1] = ANEMachineIR::H2021::Validators::ValidateNeConv;
  v560 = (MIL::Validation::TensorDTypeConstraints *)v559;
  v558 = 0;
  MIL::IROperator::Make();
  v213 = v558;
  if (v558 == v557)
  {
    v214 = 4;
    v213 = v557;
  }
  else
  {
    if (!v558)
      goto LABEL_220;
    v214 = 5;
  }
  (*(void (**)(void))(*v213 + 8 * v214))();
LABEL_220:
  v215 = v560;
  if (v560 == (MIL::Validation::TensorDTypeConstraints *)v559)
  {
    v216 = 4;
    v215 = (MIL::Validation::TensorDTypeConstraints *)v559;
    goto LABEL_224;
  }
  if (v560)
  {
    v216 = 5;
LABEL_224:
    v215 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v215 + 8 * v216))();
  }
  if (v513)
  {
    v217 = &v513->__shared_owners_;
    do
      v218 = __ldaxr((unint64_t *)v217);
    while (__stlxr(v218 - 1, (unint64_t *)v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
      std::__shared_weak_count::__release_weak(v513);
    }
  }
  if (v515)
  {
    v219 = &v515->__shared_owners_;
    do
      v220 = __ldaxr((unint64_t *)v219);
    while (__stlxr(v220 - 1, (unint64_t *)v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
      std::__shared_weak_count::__release_weak(v515);
    }
  }
  if (SHIBYTE(v517) < 0)
    operator delete(v516[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v215);
  v221 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v508, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v510 = Scalar;
  if (Scalar)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = Scalar;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v511 = v222;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v506, "InputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v221 + 24))(v221, &v510, v506);
  if (v507 < 0)
    operator delete(v506[0]);
  v224 = v511;
  if (v511)
  {
    v225 = (unint64_t *)&v511->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = Scalar;
  Scalar = 0;
  if (v227)
    (*((void (**)(std::__shared_weak_count_vtbl *))v227->~__shared_weak_count + 1))(v227);
  if (v509 < 0)
    operator delete(v508);
  v228 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v502, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v504 = Scalar;
  if (Scalar)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = Scalar;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v505 = v229;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v500, "KernelT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v228 + 24))(v228, &v504, v500);
  if (v501 < 0)
    operator delete(v500[0]);
  v231 = v505;
  if (v505)
  {
    v232 = (unint64_t *)&v505->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = Scalar;
  Scalar = 0;
  if (v234)
    (*((void (**)(std::__shared_weak_count_vtbl *))v234->~__shared_weak_count + 1))(v234);
  if (v503 < 0)
    operator delete(v502);
  v235 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v496, "alternative_format_kernel_coefficients");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v498 = Scalar;
  if (Scalar)
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = Scalar;
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = v237;
  }
  else
  {
    v236 = 0;
  }
  v499 = v236;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v494, "AlternateKernelT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v235 + 24))(v235, &v498, v494);
  if (v495 < 0)
    operator delete(v494[0]);
  v238 = v499;
  if (v499)
  {
    v239 = (unint64_t *)&v499->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = Scalar;
  Scalar = 0;
  if (v241)
    (*((void (**)(std::__shared_weak_count_vtbl *))v241->~__shared_weak_count + 1))(v241);
  if (v497 < 0)
    operator delete(v496);
  v242 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v490, "palette_table");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v492 = Scalar;
  if (Scalar)
  {
    v243 = (std::__shared_weak_count *)operator new();
    v244 = Scalar;
    v243->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v243->__shared_owners_ = 0;
    v243->__shared_weak_owners_ = 0;
    v243[1].__vftable = v244;
  }
  else
  {
    v243 = 0;
  }
  v493 = v243;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v488, "PaletteT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v242 + 24))(v242, &v492, v488);
  if (v489 < 0)
    operator delete(v488[0]);
  v245 = v493;
  if (v493)
  {
    v246 = (unint64_t *)&v493->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = Scalar;
  Scalar = 0;
  if (v248)
    (*((void (**)(std::__shared_weak_count_vtbl *))v248->~__shared_weak_count + 1))(v248);
  if (v491 < 0)
    operator delete(v490);
  v249 = v550;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v486 = Scalar;
  if (Scalar)
  {
    v250 = (std::__shared_weak_count *)operator new();
    v251 = Scalar;
    v250->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v250->__shared_owners_ = 0;
    v250->__shared_weak_owners_ = 0;
    v250[1].__vftable = v251;
  }
  else
  {
    v250 = 0;
  }
  v487 = v250;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v484, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v249 + 24))(v249, &v486, v484);
  if (v485 < 0)
    operator delete(v484[0]);
  v252 = v487;
  if (v487)
  {
    v253 = (unint64_t *)&v487->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = Scalar;
  Scalar = 0;
  if (v255)
    (*((void (**)(std::__shared_weak_count_vtbl *))v255->~__shared_weak_count + 1))(v255);
  v256 = *a3;
  v482 = v550;
  if (v550)
  {
    v257 = (std::__shared_weak_count *)operator new();
    v258 = (std::__shared_weak_count_vtbl *)v550;
    v257->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v257->__shared_owners_ = 0;
    v257->__shared_weak_owners_ = 0;
    v257[1].__vftable = v258;
  }
  else
  {
    v257 = 0;
  }
  v483 = v257;
  v550 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v256 + 56))(v256, &v482);
  v259 = v483;
  if (v483)
  {
    v260 = (unint64_t *)&v483->__shared_owners_;
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v262 = (MIL::Validation::TensorRankValueConstraints *)v550;
  v550 = 0;
  if (v262)
    v262 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v262 + 8))(v262);
  MIL::Validation::TensorRankValueConstraints::Make(v262);
  v263 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v478, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v480 = Scalar;
  if (Scalar)
  {
    v264 = (std::__shared_weak_count *)operator new();
    v265 = Scalar;
    v264->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v264->__shared_owners_ = 0;
    v264->__shared_weak_owners_ = 0;
    v264[1].__vftable = v265;
  }
  else
  {
    v264 = 0;
  }
  v481 = v264;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v263 + 32))(v263, &v480, 3, 5);
  v266 = v481;
  if (v481)
  {
    v267 = (unint64_t *)&v481->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  v269 = Scalar;
  Scalar = 0;
  if (v269)
    (*((void (**)(std::__shared_weak_count_vtbl *))v269->~__shared_weak_count + 1))(v269);
  if (v479 < 0)
    operator delete(v478);
  v270 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v474, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v476 = Scalar;
  if (Scalar)
  {
    v271 = (std::__shared_weak_count *)operator new();
    v272 = Scalar;
    v271->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v271->__shared_owners_ = 0;
    v271->__shared_weak_owners_ = 0;
    v271[1].__vftable = v272;
  }
  else
  {
    v271 = 0;
  }
  v477 = v271;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v270 + 32))(v270, &v476, 4, 6);
  v273 = v477;
  if (v477)
  {
    v274 = (unint64_t *)&v477->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
  }
  v276 = Scalar;
  Scalar = 0;
  if (v276)
    (*((void (**)(std::__shared_weak_count_vtbl *))v276->~__shared_weak_count + 1))(v276);
  if (v475 < 0)
    operator delete(v474);
  v277 = *a3;
  v472 = v550;
  if (v550)
  {
    v278 = (std::__shared_weak_count *)operator new();
    v279 = (std::__shared_weak_count_vtbl *)v550;
    v278->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v278->__shared_owners_ = 0;
    v278->__shared_weak_owners_ = 0;
    v278[1].__vftable = v279;
  }
  else
  {
    v278 = 0;
  }
  v473 = v278;
  v550 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v277 + 56))(v277, &v472);
  v280 = v473;
  if (v473)
  {
    v281 = (unint64_t *)&v473->__shared_owners_;
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  v283 = (MIL::Validation::TensorSymbolicShapeConstraints *)v550;
  v550 = 0;
  if (v283)
    v283 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v283 + 8))(v283);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v283);
  v284 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v468, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v470 = Scalar;
  if (Scalar)
  {
    v285 = (std::__shared_weak_count *)operator new();
    v286 = Scalar;
    v285->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v285->__shared_owners_ = 0;
    v285->__shared_weak_owners_ = 0;
    v285[1].__vftable = v286;
  }
  else
  {
    v285 = 0;
  }
  v471 = v285;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v466, "Batch");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v284 + 24))(v284, &v470, 0, v466);
  if (v467 < 0)
    operator delete(v466[0]);
  v287 = v471;
  if (v471)
  {
    v288 = (unint64_t *)&v471->__shared_owners_;
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
  }
  v290 = Scalar;
  Scalar = 0;
  if (v290)
    (*((void (**)(std::__shared_weak_count_vtbl *))v290->~__shared_weak_count + 1))(v290);
  if (v469 < 0)
    operator delete(v468);
  v291 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v462, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v464 = Scalar;
  if (Scalar)
  {
    v292 = (std::__shared_weak_count *)operator new();
    v293 = Scalar;
    v292->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v292->__shared_owners_ = 0;
    v292->__shared_weak_owners_ = 0;
    v292[1].__vftable = v293;
  }
  else
  {
    v292 = 0;
  }
  v465 = v292;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v460, "Cin");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v291 + 24))(v291, &v464, -1, v460);
  if (v461 < 0)
    operator delete(v460[0]);
  v294 = v465;
  if (v465)
  {
    v295 = (unint64_t *)&v465->__shared_owners_;
    do
      v296 = __ldaxr(v295);
    while (__stlxr(v296 - 1, v295));
    if (!v296)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
  }
  v297 = Scalar;
  Scalar = 0;
  if (v297)
    (*((void (**)(std::__shared_weak_count_vtbl *))v297->~__shared_weak_count + 1))(v297);
  if (v463 < 0)
    operator delete(v462);
  v298 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v456, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v458 = Scalar;
  if (Scalar)
  {
    v299 = (std::__shared_weak_count *)operator new();
    v300 = Scalar;
    v299->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v299->__shared_owners_ = 0;
    v299->__shared_weak_owners_ = 0;
    v299[1].__vftable = v300;
  }
  else
  {
    v299 = 0;
  }
  v459 = v299;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v454, "NUM_GROUPS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v298 + 24))(v298, &v458, 0, v454);
  if (v455 < 0)
    operator delete(v454[0]);
  v301 = v459;
  if (v459)
  {
    v302 = (unint64_t *)&v459->__shared_owners_;
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  v304 = Scalar;
  Scalar = 0;
  if (v304)
    (*((void (**)(std::__shared_weak_count_vtbl *))v304->~__shared_weak_count + 1))(v304);
  if (v457 < 0)
    operator delete(v456);
  v305 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v450, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v452 = Scalar;
  if (Scalar)
  {
    v306 = (std::__shared_weak_count *)operator new();
    v307 = Scalar;
    v306->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v306->__shared_owners_ = 0;
    v306->__shared_weak_owners_ = 0;
    v306[1].__vftable = v307;
  }
  else
  {
    v306 = 0;
  }
  v453 = v306;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v448, "KCin");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v305 + 24))(v305, &v452, -2, v448);
  if (v449 < 0)
    operator delete(v448[0]);
  v308 = v453;
  if (v453)
  {
    v309 = (unint64_t *)&v453->__shared_owners_;
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  v311 = Scalar;
  Scalar = 0;
  if (v311)
    (*((void (**)(std::__shared_weak_count_vtbl *))v311->~__shared_weak_count + 1))(v311);
  if (v451 < 0)
    operator delete(v450);
  v312 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v444, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v446 = Scalar;
  if (Scalar)
  {
    v313 = (std::__shared_weak_count *)operator new();
    v314 = Scalar;
    v313->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v313->__shared_owners_ = 0;
    v313->__shared_weak_owners_ = 0;
    v313[1].__vftable = v314;
  }
  else
  {
    v313 = 0;
  }
  v447 = v313;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v442, "KCout");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v312 + 24))(v312, &v446, -1, v442);
  if (v443 < 0)
    operator delete(v442[0]);
  v315 = v447;
  if (v447)
  {
    v316 = (unint64_t *)&v447->__shared_owners_;
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
  }
  v318 = Scalar;
  Scalar = 0;
  if (v318)
    (*((void (**)(std::__shared_weak_count_vtbl *))v318->~__shared_weak_count + 1))(v318);
  if (v445 < 0)
    operator delete(v444);
  v319 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v438, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v440 = Scalar;
  if (Scalar)
  {
    v320 = (std::__shared_weak_count *)operator new();
    v321 = Scalar;
    v320->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v320->__shared_owners_ = 0;
    v320->__shared_weak_owners_ = 0;
    v320[1].__vftable = v321;
  }
  else
  {
    v320 = 0;
  }
  v441 = v320;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v436, "NUM_SPATIAL_DIMS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v319 + 24))(v319, &v440, 0, v436);
  if (v437 < 0)
    operator delete(v436[0]);
  v322 = v441;
  if (v441)
  {
    v323 = (unint64_t *)&v441->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  v325 = Scalar;
  Scalar = 0;
  if (v325)
    (*((void (**)(std::__shared_weak_count_vtbl *))v325->~__shared_weak_count + 1))(v325);
  if (v439 < 0)
    operator delete(v438);
  v326 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v432, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v434 = Scalar;
  if (Scalar)
  {
    v327 = (std::__shared_weak_count *)operator new();
    v328 = Scalar;
    v327->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v327->__shared_owners_ = 0;
    v327->__shared_weak_owners_ = 0;
    v327[1].__vftable = v328;
  }
  else
  {
    v327 = 0;
  }
  v435 = v327;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v430, "TWICE_NUM_SPATIAL_DIMS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v326 + 24))(v326, &v434, 0, v430);
  if (v431 < 0)
    operator delete(v430[0]);
  v329 = v435;
  if (v435)
  {
    v330 = (unint64_t *)&v435->__shared_owners_;
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
  v332 = Scalar;
  Scalar = 0;
  if (v332)
    (*((void (**)(std::__shared_weak_count_vtbl *))v332->~__shared_weak_count + 1))(v332);
  if (v433 < 0)
    operator delete(v432);
  v333 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v426, "dilations");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v428 = Scalar;
  if (Scalar)
  {
    v334 = (std::__shared_weak_count *)operator new();
    v335 = Scalar;
    v334->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v334->__shared_owners_ = 0;
    v334->__shared_weak_owners_ = 0;
    v334[1].__vftable = v335;
  }
  else
  {
    v334 = 0;
  }
  v429 = v334;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v424, "NUM_SPATIAL_DIMS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v333 + 24))(v333, &v428, 0, v424);
  if (v425 < 0)
    operator delete(v424[0]);
  v336 = v429;
  if (v429)
  {
    v337 = (unint64_t *)&v429->__shared_owners_;
    do
      v338 = __ldaxr(v337);
    while (__stlxr(v338 - 1, v337));
    if (!v338)
    {
      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
      std::__shared_weak_count::__release_weak(v336);
    }
  }
  v339 = Scalar;
  Scalar = 0;
  if (v339)
    (*((void (**)(std::__shared_weak_count_vtbl *))v339->~__shared_weak_count + 1))(v339);
  if (v427 < 0)
    operator delete(v426);
  v340 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v420, "alternative_format_kernel_coefficients");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v422 = Scalar;
  if (Scalar)
  {
    v341 = (std::__shared_weak_count *)operator new();
    v342 = Scalar;
    v341->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v341->__shared_owners_ = 0;
    v341->__shared_weak_owners_ = 0;
    v341[1].__vftable = v342;
  }
  else
  {
    v341 = 0;
  }
  v423 = v341;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v418, "ALTERNATE_KERNEL_SIZE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v340 + 24))(v340, &v422, 0, v418);
  if (v419 < 0)
    operator delete(v418[0]);
  v343 = v423;
  if (v423)
  {
    v344 = (unint64_t *)&v423->__shared_owners_;
    do
      v345 = __ldaxr(v344);
    while (__stlxr(v345 - 1, v344));
    if (!v345)
    {
      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
      std::__shared_weak_count::__release_weak(v343);
    }
  }
  v346 = Scalar;
  Scalar = 0;
  if (v346)
    (*((void (**)(std::__shared_weak_count_vtbl *))v346->~__shared_weak_count + 1))(v346);
  if (v421 < 0)
    operator delete(v420);
  v347 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v414, "sparse_mask");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v416 = Scalar;
  if (Scalar)
  {
    v348 = (std::__shared_weak_count *)operator new();
    v349 = Scalar;
    v348->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v348->__shared_owners_ = 0;
    v348->__shared_weak_owners_ = 0;
    v348[1].__vftable = v349;
  }
  else
  {
    v348 = 0;
  }
  v417 = v348;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v412, "SPARSE_MASK_SIZE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v347 + 24))(v347, &v416, 0, v412);
  if (v413 < 0)
    operator delete(v412[0]);
  v350 = v417;
  if (v417)
  {
    v351 = (unint64_t *)&v417->__shared_owners_;
    do
      v352 = __ldaxr(v351);
    while (__stlxr(v352 - 1, v351));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
      std::__shared_weak_count::__release_weak(v350);
    }
  }
  v353 = Scalar;
  Scalar = 0;
  if (v353)
    (*((void (**)(std::__shared_weak_count_vtbl *))v353->~__shared_weak_count + 1))(v353);
  if (v415 < 0)
    operator delete(v414);
  v354 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v408, "sparse_num_nonzero_per_filter");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v410 = Scalar;
  if (Scalar)
  {
    v355 = (std::__shared_weak_count *)operator new();
    v356 = Scalar;
    v355->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v355->__shared_owners_ = 0;
    v355->__shared_weak_owners_ = 0;
    v355[1].__vftable = v356;
  }
  else
  {
    v355 = 0;
  }
  v411 = v355;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v406, "NUM_FILTERS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v354 + 24))(v354, &v410, 0, v406);
  if (v407 < 0)
    operator delete(v406[0]);
  v357 = v411;
  if (v411)
  {
    v358 = (unint64_t *)&v411->__shared_owners_;
    do
      v359 = __ldaxr(v358);
    while (__stlxr(v359 - 1, v358));
    if (!v359)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  v360 = Scalar;
  Scalar = 0;
  if (v360)
    (*((void (**)(std::__shared_weak_count_vtbl *))v360->~__shared_weak_count + 1))(v360);
  if (v409 < 0)
    operator delete(v408);
  v361 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v402, "palette_table");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v404 = Scalar;
  if (Scalar)
  {
    v362 = (std::__shared_weak_count *)operator new();
    v363 = Scalar;
    v362->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v362->__shared_owners_ = 0;
    v362->__shared_weak_owners_ = 0;
    v362[1].__vftable = v363;
  }
  else
  {
    v362 = 0;
  }
  v405 = v362;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v400, "PALETTE_SIZE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v361 + 24))(v361, &v404, 0, v400);
  if (v401 < 0)
    operator delete(v400[0]);
  v364 = v405;
  if (v405)
  {
    v365 = (unint64_t *)&v405->__shared_owners_;
    do
      v366 = __ldaxr(v365);
    while (__stlxr(v366 - 1, v365));
    if (!v366)
    {
      ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
      std::__shared_weak_count::__release_weak(v364);
    }
  }
  v367 = Scalar;
  Scalar = 0;
  if (v367)
    (*((void (**)(std::__shared_weak_count_vtbl *))v367->~__shared_weak_count + 1))(v367);
  if (v403 < 0)
    operator delete(v402);
  v368 = *a3;
  v398 = v550;
  if (v550)
  {
    v369 = (std::__shared_weak_count *)operator new();
    v370 = (std::__shared_weak_count_vtbl *)v550;
    v369->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v369->__shared_owners_ = 0;
    v369->__shared_weak_owners_ = 0;
    v369[1].__vftable = v370;
  }
  else
  {
    v369 = 0;
  }
  v399 = v369;
  v550 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v368 + 56))(v368, &v398);
  v371 = v399;
  if (v399)
  {
    v372 = (unint64_t *)&v399->__shared_owners_;
    do
      v373 = __ldaxr(v372);
    while (__stlxr(v373 - 1, v372));
    if (!v373)
    {
      ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
      std::__shared_weak_count::__release_weak(v371);
    }
  }
  v374 = (MIL::Validation::PossibleStringValuesConstraints *)v550;
  v550 = 0;
  if (v374)
    v374 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v374 + 8))(v374);
  MIL::Validation::PossibleStringValuesConstraints::Make(v374);
  v375 = v561;
  std::string::basic_string[abi:ne180100]<0>(&v394, "pad_mode");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v396 = __p;
  if (__p)
  {
    v376 = (std::__shared_weak_count *)operator new();
    v377 = (std::__shared_weak_count_vtbl *)__p;
    v376->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v376->__shared_owners_ = 0;
    v376->__shared_weak_owners_ = 0;
    v376[1].__vftable = v377;
  }
  else
  {
    v376 = 0;
  }
  v397 = v376;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v550, "replicate");
  std::string::basic_string[abi:ne180100]<0>(v553, "zero");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v550, 2);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v375->~__shared_weak_count
   + 3))(v375, &v396, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v553[i + 2]) < 0)
      operator delete((void *)v553[i]);
  }
  v379 = v397;
  if (v397)
  {
    v380 = (unint64_t *)&v397->__shared_owners_;
    do
      v381 = __ldaxr(v380);
    while (__stlxr(v381 - 1, v380));
    if (!v381)
    {
      ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
      std::__shared_weak_count::__release_weak(v379);
    }
  }
  v382 = __p;
  __p = 0;
  if (v382)
    (*(void (**)(void *))(*(_QWORD *)v382 + 8))(v382);
  if (v395 < 0)
    operator delete(v394);
  v383 = *a3;
  v392 = v561;
  if (v561)
  {
    v384 = (std::__shared_weak_count *)operator new();
    v385 = v561;
    v384->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v384->__shared_owners_ = 0;
    v384->__shared_weak_owners_ = 0;
    v384[1].__vftable = v385;
  }
  else
  {
    v384 = 0;
  }
  v393 = v384;
  v561 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v383 + 56))(v383, &v392);
  v386 = v393;
  if (v393)
  {
    v387 = (unint64_t *)&v393->__shared_owners_;
    do
      v388 = __ldaxr(v387);
    while (__stlxr(v388 - 1, v387));
    if (!v388)
    {
      ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
      std::__shared_weak_count::__release_weak(v386);
    }
  }
  v389 = v561;
  v561 = 0;
  if (v389)
    (*((void (**)(std::__shared_weak_count_vtbl *))v389->~__shared_weak_count + 1))(v389);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v525, 0);
  result = (uint64_t)v549;
  if (v549)
  {
    v391 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v549);
    return MEMORY[0x20BCFF140](v391, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068E99A4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x560], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x6C0], 0);
  _Unwind_Resume(a1);
}

BOOL ANEMachineIR::Utils::IsBlockOutput(MIL::Builder::BlockBuilder **a1, unsigned __int8 **a2)
{
  _BOOL8 v3;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  MIL::Builder::BlockBuilder::GetOutputNames(*a1);
  v3 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v5, v6, a2) != v6;
  v7 = (void **)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  return v3;
}

uint64_t ANEMachineIR::Utils::TryGetArgumentForParameter()
{
  return MIL::Builder::OperationBuilder::GetArgumentForParameter();
}

void sub_2068EA8A0(void *a1)
{
  ANEMachineIR::Utils::TryGetArgumentForParameter(a1);
  JUMPOUT(0x2068EA898);
}

void ANEMachineIR::Utils::TryCopyOpInput(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t ArgumentForParameter;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string __p;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a2[1];
  v15 = *a2;
  v16 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  ArgumentForParameter = ANEMachineIR::Utils::TryGetArgumentForParameter();
  v7 = ArgumentForParameter;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v7)
      return;
  }
  else
  {
LABEL_8:
    if (!ArgumentForParameter)
      return;
  }
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  MIL::Builder::OperationBuilder::AddInput();
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2068EA9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Utils::TryGetArgumentForParameter(void *a1)
{
  void *exception_ptr;
  _BYTE v3[16];

  exception_ptr = __cxa_get_exception_ptr(a1);
  MEMORY[0x20BCFEFA8](v3, exception_ptr);
  __cxa_begin_catch(a1);
  MEMORY[0x20BCFEFC0](v3);
  __cxa_end_catch();
}

void MIL::ANEMachineIR::Interpreter::NeAddCpu::Run(MIL::IROperation *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void *size;
  MIL::Fp16 *v21;
  __int16 v22;
  uint64_t ParameterValue;
  __int16 *v24;
  MIL::Fp16 *v25;
  __int16 v26;
  uint64_t v27;
  __int16 *v28;
  MIL::Fp16 *v29;
  uint64_t v30;
  unsigned __int16 *v31;
  MIL::Fp16 *v32;
  unsigned __int16 v33;
  uint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t InterpretedTensorValue;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  int v47;
  MIL::IRValueType *OutputType;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t Data;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unsigned __int8 *v82;
  MIL::IRValueType *v83;
  void **v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned __int8 *v87;
  MIL::IRValueType *v88;
  void **v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 *v92;
  MIL::IRValueType *v93;
  void **v94;
  _QWORD *v95;
  uint64_t v96;
  unsigned __int8 *v97;
  MIL::IRValueType *v98;
  void **v99;
  _QWORD *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  MIL::IRValueType *v103;
  void **v104;
  _QWORD *v105;
  uint64_t v106;
  unsigned __int8 *v107;
  MIL::IRValueType *v108;
  void **v109;
  _QWORD *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  MIL::IRValueType *v113;
  void **v114;
  _QWORD *v115;
  uint64_t v116;
  unsigned __int8 *v117;
  MIL::IRValueType *v118;
  void **v119;
  _QWORD *v120;
  uint64_t v121;
  unsigned __int8 *v122;
  MIL::IRValueType *v123;
  void **v124;
  std::string *v125;
  uint64_t v126;
  unint64_t v127;
  __int16 v128;
  char v129;
  char v130;
  unsigned __int16 v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  std::string v134;
  uint64_t v135;
  std::string v136;
  void **v137;
  _BYTE v138[24];
  _BYTE *v139;
  _BYTE v140[24];
  _BYTE *v141;
  _BYTE v142[24];
  _BYTE *v143;
  _BYTE v144[24];
  _BYTE *v145;
  _BYTE v146[24];
  _BYTE *v147;
  _BYTE v148[24];
  _BYTE *v149;
  _BYTE v150[24];
  _BYTE *v151;
  _BYTE v152[24];
  _BYTE *v153;
  _BYTE v154[24];
  _BYTE *v155;
  std::string v156;
  std::string *v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(v6 + 8) != 6)
      goto LABEL_10;
    v6 = *(_QWORD *)v6;
  }
  else if (v7 != 6)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v6 != 1633641838 || *(_WORD *)(v6 + 4) != 25700)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    v9 = a3 + 8;
    std::string::basic_string[abi:ne180100]<0>(&v136, "ne_add");
    v10 = std::string::insert(&v136, 0, "Expected ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v156.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v156, " op. Got ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
    v15 = *(char *)(v14 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)v14;
    else
      v16 = *(const std::string::value_type **)v14;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v14 + 23);
    else
      v17 = *(_QWORD *)(v14 + 8);
    v18 = std::string::append(&v134, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)v9 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v134.__r_.__value_.__l.__data_);
    if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v156.__r_.__value_.__l.__data_);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    {
      size = (void *)v136.__r_.__value_.__r.__words[0];
LABEL_22:
      operator delete(size);
      return;
    }
    return;
  }
  v21 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v134, "x_scale");
  v22 = MIL::Fp16::FromFloat(v21, 1.0);
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue))
    {
      v24 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v24)
        v22 = *v24;
    }
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  v25 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v134, "y_scale");
  v26 = MIL::Fp16::FromFloat(v25, 1.0);
  v27 = MIL::IROperation::TryGetParameterValue();
  if (v27)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27))
    {
      v28 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v28)
        v26 = *v28;
    }
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  v29 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v134, "bias");
  v131 = MIL::Fp16::FromFloat(v29, 0.0);
  v30 = MIL::IROperation::TryGetParameterValue();
  if (v30)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30))
    {
      v31 = (unsigned __int16 *)MEMORY[0x20BCFEE7C]();
      if (v31)
        v131 = *v31;
    }
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  v32 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v134, "post_scale");
  v33 = MIL::Fp16::FromFloat(v32, 1.0);
  v34 = MIL::IROperation::TryGetParameterValue();
  if (v34)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34))
    {
      v35 = (unsigned __int16 *)MEMORY[0x20BCFEE7C]();
      if (v35)
        v33 = *v35;
    }
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v134, "acc_bias_shift");
  v36 = MIL::IROperation::TryGetParameterValue();
  if (v36
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36)
    && (v37 = (char *)MEMORY[0x20BCFEE94]()) != 0)
  {
    v130 = *v37;
  }
  else
  {
    v130 = 0;
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v134, "acc_left_shift");
  v38 = MIL::IROperation::TryGetParameterValue();
  if (v38
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38)
    && (v39 = (char *)MEMORY[0x20BCFEE94]()) != 0)
  {
    v129 = *v39;
  }
  else
  {
    v129 = 0;
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v134, "post_right_shift");
  v40 = MIL::IROperation::TryGetParameterValue();
  if (v40
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40)
    && (v41 = (char *)MEMORY[0x20BCFEE94]()) != 0)
  {
    v42 = *v41;
  }
  else
  {
    v42 = 0;
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v134, "x");
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v134);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v134, "y");
  v44 = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v134);
  if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue)
      goto LABEL_73;
LABEL_77:
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "No value for x");
    return;
  }
  operator delete(v134.__r_.__value_.__l.__data_);
  if (!InterpretedTensorValue)
    goto LABEL_77;
LABEL_73:
  if (!v44)
  {
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "No value for y");
    return;
  }
  v128 = v26;
  v45 = v22;
  *(_OWORD *)&v134.__r_.__value_.__r.__words[1] = 0uLL;
  v135 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v134, (uint64_t (***)())&v156);
  if (LODWORD(v134.__r_.__value_.__l.__data_))
  {
    *(_DWORD *)a3 = v134.__r_.__value_.__l.__data_;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)&v134.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a3 + 24) = v135;
    *(_OWORD *)&v134.__r_.__value_.__r.__words[1] = 0uLL;
    v135 = 0;
    goto LABEL_221;
  }
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 88))(v46);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v49 = MIL::IRValueType::AsTensorType(OutputType);
  v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 88))(v49);
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
  if (v47 == 4)
  {
    if (v50 != 14)
    {
      if (v50 != 9)
      {
        if (v50 != 4)
          goto LABEL_104;
        v58 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v59 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v60 = (uint64_t)v157;
        if (v157)
        {
          if (v157 == &v156)
          {
            v155 = v154;
            (*(void (**)(std::string *, _BYTE *))(v156.__r_.__value_.__r.__words[0] + 24))(&v156, v154);
LABEL_191:
            v110 = v155;
            if (v155 == v154)
            {
              v111 = 4;
              v110 = v154;
            }
            else
            {
              if (!v155)
              {
LABEL_196:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v132, a1);
                v112 = v132;
                if (v133 == v132)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v113 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v113);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v112, (uint64_t *)&v137);
                v114 = v137;
                v137 = 0;
                if (v114)
                  (*((void (**)(void **))*v114 + 1))(v114);
                goto LABEL_219;
              }
              v111 = 5;
            }
            (*(void (**)(void))(*v110 + 8 * v111))();
            goto LABEL_196;
          }
          v60 = (*(uint64_t (**)(std::string *))(v157->__r_.__value_.__r.__words[0] + 16))(v157);
        }
        v155 = (_BYTE *)v60;
        goto LABEL_191;
      }
      v68 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v69 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v70 = (uint64_t)v157;
      if (v157)
      {
        if (v157 == &v156)
        {
          v151 = v150;
          (*(void (**)(std::string *, _BYTE *))(v156.__r_.__value_.__r.__words[0] + 24))(&v156, v150);
LABEL_151:
          v90 = v151;
          if (v151 == v150)
          {
            v91 = 4;
            v90 = v150;
          }
          else
          {
            if (!v151)
            {
LABEL_156:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v132, a1);
              v92 = v132;
              if (v133 == v132)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v93 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v93);
              MIL::IRTensorValueType::MakeInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v92, (uint64_t *)&v137);
              v94 = v137;
              v137 = 0;
              if (v94)
                (*((void (**)(void **))*v94 + 1))(v94);
              goto LABEL_219;
            }
            v91 = 5;
          }
          (*(void (**)(void))(*v90 + 8 * v91))();
          goto LABEL_156;
        }
        v70 = (*(uint64_t (**)(std::string *))(v157->__r_.__value_.__r.__words[0] + 16))(v157);
      }
      v151 = (_BYTE *)v70;
      goto LABEL_151;
    }
    v74 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    v75 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    v76 = (uint64_t)v157;
    if (v157)
    {
      if (v157 == &v156)
      {
        v153 = v152;
        (*(void (**)(std::string *, _BYTE *))(v156.__r_.__value_.__r.__words[0] + 24))(&v156, v152);
LABEL_181:
        v105 = v153;
        if (v153 == v152)
        {
          v106 = 4;
          v105 = v152;
        }
        else
        {
          if (!v153)
          {
LABEL_186:
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v132, a1);
            v107 = v132;
            if (v133 == v132)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v108 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v108);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v107, (uint64_t *)&v137);
            v109 = v137;
            v137 = 0;
            if (v109)
              (*((void (**)(void **))*v109 + 1))(v109);
            goto LABEL_219;
          }
          v106 = 5;
        }
        (*(void (**)(void))(*v105 + 8 * v106))();
        goto LABEL_186;
      }
      v76 = (*(uint64_t (**)(std::string *))(v157->__r_.__value_.__r.__words[0] + 16))(v157);
    }
    v153 = (_BYTE *)v76;
    goto LABEL_181;
  }
  if (v47 == 9)
  {
    if (v50 != 14)
    {
      if (v50 != 9)
      {
        if (v50 != 4)
          goto LABEL_104;
        Data = MIL::IRTensorValue::GetDataView<signed char>();
        v56 = MIL::IRTensorValue::GetDataView<signed char>();
        v57 = (uint64_t)v157;
        if (v157)
        {
          if (v157 == &v156)
          {
            v143 = v142;
            (*(void (**)(std::string *, _BYTE *))(v156.__r_.__value_.__r.__words[0] + 24))(&v156, v142);
LABEL_161:
            v95 = v143;
            if (v143 == v142)
            {
              v96 = 4;
              v95 = v142;
            }
            else
            {
              if (!v143)
              {
LABEL_166:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v132, a1);
                v97 = v132;
                if (v133 == v132)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v98 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v98);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v97, (uint64_t *)&v137);
                v99 = v137;
                v137 = 0;
                if (v99)
                  (*((void (**)(void **))*v99 + 1))(v99);
                goto LABEL_219;
              }
              v96 = 5;
            }
            (*(void (**)(void))(*v95 + 8 * v96))();
            goto LABEL_166;
          }
          v57 = (*(uint64_t (**)(std::string *))(v157->__r_.__value_.__r.__words[0] + 16))(v157);
        }
        v143 = (_BYTE *)v57;
        goto LABEL_161;
      }
      v62 = MIL::IRTensorValue::GetDataView<signed char>();
      v63 = MIL::IRTensorValue::GetDataView<signed char>();
      v64 = (uint64_t)v157;
      if (v157)
      {
        if (v157 == &v156)
        {
          v139 = v138;
          (*(void (**)(std::string *, _BYTE *))(v156.__r_.__value_.__r.__words[0] + 24))(&v156, v138);
LABEL_131:
          v80 = v139;
          if (v139 == v138)
          {
            v81 = 4;
            v80 = v138;
          }
          else
          {
            if (!v139)
            {
LABEL_136:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v132, a1);
              v82 = v132;
              if (v133 == v132)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v83 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v83);
              MIL::IRTensorValueType::MakeInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v82, (uint64_t *)&v137);
              v84 = v137;
              v137 = 0;
              if (v84)
                (*((void (**)(void **))*v84 + 1))(v84);
              goto LABEL_219;
            }
            v81 = 5;
          }
          (*(void (**)(void))(*v80 + 8 * v81))();
          goto LABEL_136;
        }
        v64 = (*(uint64_t (**)(std::string *))(v157->__r_.__value_.__r.__words[0] + 16))(v157);
      }
      v139 = (_BYTE *)v64;
      goto LABEL_131;
    }
    v65 = MIL::IRTensorValue::GetDataView<signed char>();
    v66 = MIL::IRTensorValue::GetDataView<signed char>();
    v67 = (uint64_t)v157;
    if (v157)
    {
      if (v157 == &v156)
      {
        v141 = v140;
        (*(void (**)(std::string *, _BYTE *))(v156.__r_.__value_.__r.__words[0] + 24))(&v156, v140);
LABEL_141:
        v85 = v141;
        if (v141 == v140)
        {
          v86 = 4;
          v85 = v140;
        }
        else
        {
          if (!v141)
          {
LABEL_146:
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v132, a1);
            v87 = v132;
            if (v133 == v132)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v88 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v88);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v87, (uint64_t *)&v137);
            v89 = v137;
            v137 = 0;
            if (v89)
              (*((void (**)(void **))*v89 + 1))(v89);
            goto LABEL_219;
          }
          v86 = 5;
        }
        (*(void (**)(void))(*v85 + 8 * v86))();
        goto LABEL_146;
      }
      v67 = (*(uint64_t (**)(std::string *))(v157->__r_.__value_.__r.__words[0] + 16))(v157);
    }
    v141 = (_BYTE *)v67;
    goto LABEL_141;
  }
  if (v47 != 14)
  {
    v61 = "Unimplemented input dtype";
LABEL_105:
    *(_DWORD *)a3 = 3;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v61);
    goto LABEL_221;
  }
  if (v50 == 14)
  {
    v77 = MIL::IRTensorValue::GetDataView<unsigned char>();
    v78 = MIL::IRTensorValue::GetDataView<unsigned char>();
    v79 = (uint64_t)v157;
    if (v157)
    {
      if (v157 == &v156)
      {
        v147 = v146;
        (*(void (**)(std::string *, _BYTE *))(v156.__r_.__value_.__r.__words[0] + 24))(&v156, v146);
LABEL_201:
        v115 = v147;
        if (v147 == v146)
        {
          v116 = 4;
          v115 = v146;
        }
        else
        {
          if (!v147)
          {
LABEL_206:
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v132, a1);
            v117 = v132;
            if (v133 == v132)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v118 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v118);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v117, (uint64_t *)&v137);
            v119 = v137;
            v137 = 0;
            if (v119)
              (*((void (**)(void **))*v119 + 1))(v119);
            goto LABEL_219;
          }
          v116 = 5;
        }
        (*(void (**)(void))(*v115 + 8 * v116))();
        goto LABEL_206;
      }
      v79 = (*(uint64_t (**)(std::string *))(v157->__r_.__value_.__r.__words[0] + 16))(v157);
    }
    v147 = (_BYTE *)v79;
    goto LABEL_201;
  }
  if (v50 == 9)
  {
    v71 = MIL::IRTensorValue::GetDataView<unsigned char>();
    v72 = MIL::IRTensorValue::GetDataView<unsigned char>();
    v73 = (uint64_t)v157;
    if (v157)
    {
      if (v157 == &v156)
      {
        v145 = v144;
        (*(void (**)(std::string *, _BYTE *))(v156.__r_.__value_.__r.__words[0] + 24))(&v156, v144);
LABEL_171:
        v100 = v145;
        if (v145 == v144)
        {
          v101 = 4;
          v100 = v144;
        }
        else
        {
          if (!v145)
          {
LABEL_176:
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v132, a1);
            v102 = v132;
            if (v133 == v132)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v103 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v103);
            MIL::IRTensorValueType::MakeInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v102, (uint64_t *)&v137);
            v104 = v137;
            v137 = 0;
            if (v104)
              (*((void (**)(void **))*v104 + 1))(v104);
            goto LABEL_219;
          }
          v101 = 5;
        }
        (*(void (**)(void))(*v100 + 8 * v101))();
        goto LABEL_176;
      }
      v73 = (*(uint64_t (**)(std::string *))(v157->__r_.__value_.__r.__words[0] + 16))(v157);
    }
    v145 = (_BYTE *)v73;
    goto LABEL_171;
  }
  if (v50 != 4)
  {
LABEL_104:
    v61 = "Unimplemented output dtype";
    goto LABEL_105;
  }
  v52 = MIL::IRTensorValue::GetDataView<unsigned char>();
  v53 = MIL::IRTensorValue::GetDataView<unsigned char>();
  v54 = (uint64_t)v157;
  if (!v157)
  {
LABEL_88:
    v149 = (_BYTE *)v54;
    goto LABEL_211;
  }
  if (v157 != &v156)
  {
    v54 = (*(uint64_t (**)(std::string *))(v157->__r_.__value_.__r.__words[0] + 16))(v157);
    goto LABEL_88;
  }
  v149 = v148;
  (*(void (**)(std::string *, _BYTE *))(v156.__r_.__value_.__r.__words[0] + 24))(&v156, v148);
LABEL_211:
  v120 = v149;
  if (v149 == v148)
  {
    v121 = 4;
    v120 = v148;
    goto LABEL_215;
  }
  if (v149)
  {
    v121 = 5;
LABEL_215:
    (*(void (**)(void))(*v120 + 8 * v121))();
  }
  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v132, a1);
  v122 = v132;
  if (v133 == v132)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v123 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  MIL::IRValueType::AsTensorType(v123);
  MIL::IRTensorValueType::MakeFloat16Value();
  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v122, (uint64_t *)&v137);
  v124 = v137;
  v137 = 0;
  if (v124)
    (*((void (**)(void **))*v124 + 1))(v124);
LABEL_219:
  v137 = (void **)&v132;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v137);
  *(_DWORD *)a3 = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
  if (v136.__r_.__value_.__r.__words[0])
  {
    v136.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
    operator delete(v136.__r_.__value_.__l.__data_);
  }
LABEL_221:
  v125 = v157;
  if (v157 == &v156)
  {
    v126 = 4;
    v125 = &v156;
  }
  else
  {
    if (!v157)
      goto LABEL_226;
    v126 = 5;
  }
  (*(void (**)(void))(v125->__r_.__value_.__r.__words[0] + 8 * v126))();
LABEL_226:
  if (SHIBYTE(v135) < 0)
  {
    size = (void *)v134.__r_.__value_.__l.__size_;
    goto LABEL_22;
  }
}

void sub_2068EBD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, void *a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;
  _QWORD *v57;
  uint64_t v58;

  if (__p)
    operator delete(__p);
  v57 = *(_QWORD **)(v55 - 104);
  if (v57 == (_QWORD *)(v55 - 128))
  {
    v58 = 4;
    v57 = (_QWORD *)(v55 - 128);
  }
  else
  {
    if (!v57)
      goto LABEL_8;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_8:
  if (a28 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, __int16 a10, int a11, __int16 a12, uint64_t a13)
{
  double v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unsigned int v22;
  signed int v23;
  float v24;
  float v25;
  double v26;
  uint64_t v27;
  float v28;
  float v29;
  __int16 v30;
  float v31;
  float v32;
  float v33;
  float v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  float v48;
  float v49;
  float v50;
  float v51;
  int v52;
  int v53;
  int v54;
  int v55;
  double v56;
  unint64_t v57;
  long double v58;
  double v59;
  float v60;
  float v61;
  float v62;
  long double v63;
  double v64;
  uint64_t v65;
  MIL::Fp16 *v66;
  float v67;
  __int16 v68;
  __int16 v69;
  unint64_t v70;
  _WORD *v71;
  _WORD *v72;
  _WORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int16 v81;
  __int16 v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  int __e;

  v88 = a4;
  v87 = a5;
  v86 = a10;
  v85 = a12;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)a9 = 0;
  std::vector<MIL::Fp16>::reserve((void **)a9, a3);
  v17 = ldexp(1.0, a6 + 20);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v86);
  v19 = v18;
  v20 = ldexp(1.0, a6 + 20 + a7);
  v21 = v19 * v20;
  v22 = llroundf(v21);
  if (fabsf(v21) >= 1.0)
    v23 = v22;
  else
    v23 = 0;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
  v25 = v24;
  v26 = exp2(-(double)(a6 + 20 + a8));
  if (a3)
  {
    v27 = 0;
    v28 = v17;
    v29 = v26 * v25;
    while (1)
    {
      v30 = *(_WORD *)(a1 + 2 * v27);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v88);
      v32 = v31;
      LOWORD(__e) = v30;
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v34 = v33;
      v35 = ilogbf(v33);
      if (v35 <= -14)
        v36 = -14;
      else
        v36 = v35;
      v37 = ilogbf(v32);
      if (v37 <= -14)
        v38 = -14;
      else
        v38 = v37;
      v39 = v36 + a6 + v38;
      v40 = v23 + (uint64_t)(int)llroundf((float)(v32 * v34) * v28);
      if (v40 >= (uint64_t)0xFFFFFFFF80000000)
        v41 = v40;
      else
        v41 = -8388608;
      v42 = 2 * (v40 < (uint64_t)0xFFFFFFFF80000000);
      v43 = v40 <= 0x7FFFFFFF;
      if (v40 <= 0x7FFFFFFF)
        v44 = v41;
      else
        v44 = 2139095040;
      if (!v43)
        v42 = 1;
      LODWORD(v45) = v39 >= -20 ? v44 : v23;
      v46 = v39 >= -20 ? v42 : 0;
      v47 = *(_WORD *)(a2 + 2 * v27);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v87);
      if (v46 == 2)
        break;
      if (v46)
        goto LABEL_38;
      v49 = v48;
      LOWORD(__e) = v47;
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v51 = v50;
      v52 = ilogbf(v50);
      if (v52 <= -14)
        v53 = -14;
      else
        v53 = v52;
      v54 = ilogbf(v49);
      if (v54 <= -14)
        v55 = -14;
      else
        v55 = v54;
      if (v53 + a6 + v55 >= -20)
      {
        v45 = (int)llroundf((float)(v49 * v51) * v28) + (uint64_t)(int)v45;
        if (v45 > 0x7FFFFFFF)
        {
LABEL_38:
          *(double *)&v57 = INFINITY;
LABEL_41:
          v56 = *(double *)&v57;
          goto LABEL_42;
        }
        if (v45 < (uint64_t)0xFFFFFFFF80000000)
          break;
      }
      if (!(_DWORD)v45)
      {
        v60 = 0.0;
        goto LABEL_43;
      }
      v56 = (double)(int)v45;
LABEL_42:
      __e = 0;
      v58 = frexp(v56, &__e);
      v59 = ldexp(v58, 11);
      v60 = ldexp(round(v59), __e - 11);
LABEL_43:
      v61 = v60 * v29;
      v62 = 0.0;
      if (v61 != 0.0)
      {
        __e = 0;
        v63 = frexp(v61, &__e);
        v64 = ldexp(v63, 11);
        v62 = ldexp(round(v64), __e - 11);
      }
      __e = LODWORD(v62);
      v65 = *(_QWORD *)(a13 + 24);
      if (!v65)
        std::__throw_bad_function_call[abi:ne180100]();
      v66 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v65 + 48))(v65, &__e);
      v68 = MIL::Fp16::FromFloat(v66, v67);
      v69 = v68;
      v71 = *(_WORD **)(a9 + 8);
      v70 = *(_QWORD *)(a9 + 16);
      if ((unint64_t)v71 >= v70)
      {
        v73 = *(_WORD **)a9;
        v74 = (uint64_t)v71 - *(_QWORD *)a9;
        if (v74 <= -3)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v75 = v74 >> 1;
        v76 = v70 - (_QWORD)v73;
        if (v76 <= (v74 >> 1) + 1)
          v77 = v75 + 1;
        else
          v77 = v76;
        if (v76 >= 0x7FFFFFFFFFFFFFFELL)
          v78 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v78 = v77;
        if (v78)
        {
          v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a9 + 16, v78);
          v73 = *(_WORD **)a9;
          v71 = *(_WORD **)(a9 + 8);
        }
        else
        {
          v79 = 0;
        }
        v80 = &v79[2 * v75];
        *(_WORD *)v80 = v69;
        v72 = v80 + 2;
        while (v71 != v73)
        {
          v81 = *--v71;
          *((_WORD *)v80 - 1) = v81;
          v80 -= 2;
        }
        *(_QWORD *)a9 = v80;
        *(_QWORD *)(a9 + 8) = v72;
        *(_QWORD *)(a9 + 16) = &v79[2 * v78];
        if (v73)
          operator delete(v73);
      }
      else
      {
        *v71 = v68;
        v72 = v71 + 1;
      }
      *(_QWORD *)(a9 + 8) = v72;
      if (++v27 == a3)
        return;
    }
    *(double *)&v57 = -INFINITY;
    goto LABEL_41;
  }
}

void sub_2068EC458(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16>(size_t __sz@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W3>, __int16 a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  size_t v15;
  unint64_t *v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned int v24;
  float v25;
  float v26;
  double v27;
  uint64_t v28;
  float v29;
  float v30;
  __int16 v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int v53;
  int v54;
  int v55;
  int v56;
  double v57;
  unint64_t v58;
  long double v59;
  double v60;
  float v61;
  float v62;
  float v63;
  long double v64;
  double v65;
  uint64_t v66;
  float v67;
  int v68;
  int v69;
  unint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  unint64_t v78;
  _BYTE *v79;
  unint64_t v80;
  unint64_t v81;
  size_t v82;
  char *v83;
  char *v84;
  _BYTE *v85;
  _BYTE *v86;
  char v87;
  unint64_t *v88;
  unint64_t *v89;
  signed int v90;
  __int16 v91;
  __int16 v92;
  __int16 v93;
  __int16 v94;
  int __e;

  v15 = __sz;
  v18 = a9;
  v94 = a4;
  v93 = a5;
  v92 = a10;
  v91 = a11;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<unsigned char>::reserve(a9, __sz);
  v19 = ldexp(1.0, (int)a6 + 20);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v92);
  v21 = v20;
  v22 = ldexp(1.0, (int)a6 + 20 + a7);
  v23 = v21 * v22;
  v24 = llroundf(v23);
  if (fabsf(v23) < 1.0)
    v24 = 0;
  v90 = v24;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
  v26 = v25;
  v27 = exp2(-(double)((int)a6 + 20 + a8));
  if (v15)
  {
    v28 = 0;
    v29 = v19;
    v30 = v27 * v26;
    v89 = v18;
    while (1)
    {
      v31 = *(_WORD *)(a2 + 2 * v28);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v94);
      v33 = v32;
      LOWORD(__e) = v31;
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v35 = v34;
      v36 = ilogbf(v34);
      if (v36 <= -14)
        v37 = -14;
      else
        v37 = v36;
      v38 = ilogbf(v33);
      if (v38 <= -14)
        v39 = -14;
      else
        v39 = v38;
      v40 = v37 + a6 + v39;
      v41 = v90 + (uint64_t)(int)llroundf((float)(v33 * v35) * v29);
      if (v41 >= (uint64_t)0xFFFFFFFF80000000)
        v42 = v41;
      else
        v42 = -8388608;
      v43 = 2 * (v41 < (uint64_t)0xFFFFFFFF80000000);
      v44 = v41 <= 0x7FFFFFFF;
      if (v41 <= 0x7FFFFFFF)
        v45 = v42;
      else
        v45 = 2139095040;
      if (!v44)
        v43 = 1;
      LODWORD(v46) = v40 >= -20 ? v45 : v90;
      v47 = v40 >= -20 ? v43 : 0;
      v48 = *(_WORD *)(a3 + 2 * v28);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v93);
      if (v47 == 2)
        break;
      if (v47)
        goto LABEL_37;
      v50 = v49;
      LOWORD(__e) = v48;
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v52 = v51;
      v53 = ilogbf(v51);
      if (v53 <= -14)
        v54 = -14;
      else
        v54 = v53;
      v55 = ilogbf(v50);
      if (v55 <= -14)
        v56 = -14;
      else
        v56 = v55;
      if (v54 + (int)a6 + v56 >= -20)
      {
        v46 = (int)llroundf((float)(v50 * v52) * v29) + (uint64_t)(int)v46;
        if (v46 > 0x7FFFFFFF)
        {
LABEL_37:
          *(double *)&v58 = INFINITY;
LABEL_40:
          v57 = *(double *)&v58;
          goto LABEL_41;
        }
        if (v46 < (uint64_t)0xFFFFFFFF80000000)
          break;
      }
      if (!(_DWORD)v46)
      {
        v61 = 0.0;
        goto LABEL_42;
      }
      v57 = (double)(int)v46;
LABEL_41:
      __e = 0;
      v59 = frexp(v57, &__e);
      v60 = ldexp(v59, 11);
      v61 = ldexp(round(v60), __e - 11);
LABEL_42:
      v62 = v61 * v30;
      v63 = 0.0;
      if (v62 != 0.0)
      {
        __e = 0;
        v64 = frexp(v62, &__e);
        v65 = ldexp(v64, 11);
        v63 = ldexp(round(v65), __e - 11);
      }
      __e = LODWORD(v63);
      v66 = *(_QWORD *)(a12 + 24);
      if (!v66)
        std::__throw_bad_function_call[abi:ne180100]();
      v67 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v66 + 48))(v66, &__e);
      if (v67 == INFINITY)
      {
        LOBYTE(v68) = -1;
      }
      else if (v67 == -INFINITY)
      {
        LOBYTE(v68) = 0;
      }
      else
      {
        v69 = llroundf(v67);
        if (v69 >= 255)
          v69 = 255;
        v68 = v69 & ~(v69 >> 31);
      }
      v71 = (_BYTE *)v18[1];
      v70 = v18[2];
      if ((unint64_t)v71 >= v70)
      {
        v73 = v18;
        v74 = a2;
        v75 = a6;
        v76 = a3;
        v77 = v15;
        v78 = *v73;
        v79 = &v71[-*v73];
        v80 = (unint64_t)(v79 + 1);
        if ((uint64_t)(v79 + 1) < 0)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v81 = v70 - v78;
        if (2 * v81 > v80)
          v80 = 2 * v81;
        if (v81 >= 0x3FFFFFFFFFFFFFFFLL)
          v82 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v82 = v80;
        if (v82)
          v83 = (char *)operator new(v82);
        else
          v83 = 0;
        v84 = &v79[(_QWORD)v83];
        v85 = &v79[(_QWORD)v83];
        *v85 = v68;
        v72 = v85 + 1;
        if (v71 == (_BYTE *)v78)
        {
          v88 = v89;
        }
        else
        {
          v86 = &v71[~v78];
          do
          {
            v87 = *--v71;
            (v86--)[(_QWORD)v83] = v87;
          }
          while (v71 != (_BYTE *)v78);
          v88 = v89;
          v71 = (_BYTE *)*v89;
          v84 = v83;
        }
        *v88 = (unint64_t)v84;
        v88[1] = (unint64_t)v72;
        v88[2] = (unint64_t)&v83[v82];
        v15 = v77;
        if (v71)
          operator delete(v71);
        a3 = v76;
        a6 = v75;
        a2 = v74;
        v18 = v89;
      }
      else
      {
        *v71 = v68;
        v72 = v71 + 1;
      }
      v18[1] = (unint64_t)v72;
      if (++v28 == v15)
        return;
    }
    *(double *)&v58 = -INFINITY;
    goto LABEL_40;
  }
}

void sub_2068EC8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,MIL::Fp16>(size_t __sz@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W3>, __int16 a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  size_t v15;
  unint64_t *v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned int v24;
  float v25;
  float v26;
  double v27;
  uint64_t v28;
  float v29;
  float v30;
  __int16 v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int v53;
  int v54;
  int v55;
  int v56;
  double v57;
  unint64_t v58;
  long double v59;
  double v60;
  float v61;
  float v62;
  float v63;
  long double v64;
  double v65;
  uint64_t v66;
  float v67;
  char v68;
  int v69;
  unint64_t v70;
  char *v71;
  _BYTE *v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  char *v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  size_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char v87;
  unint64_t *v88;
  unint64_t *v89;
  signed int v90;
  __int16 v91;
  __int16 v92;
  __int16 v93;
  __int16 v94;
  int __e;

  v15 = __sz;
  v18 = a9;
  v94 = a4;
  v93 = a5;
  v92 = a10;
  v91 = a11;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<unsigned char>::reserve(a9, __sz);
  v19 = ldexp(1.0, (int)a6 + 20);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v92);
  v21 = v20;
  v22 = ldexp(1.0, (int)a6 + 20 + a7);
  v23 = v21 * v22;
  v24 = llroundf(v23);
  if (fabsf(v23) < 1.0)
    v24 = 0;
  v90 = v24;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
  v26 = v25;
  v27 = exp2(-(double)((int)a6 + 20 + a8));
  if (v15)
  {
    v28 = 0;
    v29 = v19;
    v30 = v27 * v26;
    v89 = v18;
    while (1)
    {
      v31 = *(_WORD *)(a2 + 2 * v28);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v94);
      v33 = v32;
      LOWORD(__e) = v31;
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v35 = v34;
      v36 = ilogbf(v34);
      if (v36 <= -14)
        v37 = -14;
      else
        v37 = v36;
      v38 = ilogbf(v33);
      if (v38 <= -14)
        v39 = -14;
      else
        v39 = v38;
      v40 = v37 + a6 + v39;
      v41 = v90 + (uint64_t)(int)llroundf((float)(v33 * v35) * v29);
      if (v41 >= (uint64_t)0xFFFFFFFF80000000)
        v42 = v41;
      else
        v42 = -8388608;
      v43 = 2 * (v41 < (uint64_t)0xFFFFFFFF80000000);
      v44 = v41 <= 0x7FFFFFFF;
      if (v41 <= 0x7FFFFFFF)
        v45 = v42;
      else
        v45 = 2139095040;
      if (!v44)
        v43 = 1;
      LODWORD(v46) = v40 >= -20 ? v45 : v90;
      v47 = v40 >= -20 ? v43 : 0;
      v48 = *(_WORD *)(a3 + 2 * v28);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v93);
      if (v47 == 2)
        break;
      if (v47)
        goto LABEL_37;
      v50 = v49;
      LOWORD(__e) = v48;
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v52 = v51;
      v53 = ilogbf(v51);
      if (v53 <= -14)
        v54 = -14;
      else
        v54 = v53;
      v55 = ilogbf(v50);
      if (v55 <= -14)
        v56 = -14;
      else
        v56 = v55;
      if (v54 + (int)a6 + v56 >= -20)
      {
        v46 = (int)llroundf((float)(v50 * v52) * v29) + (uint64_t)(int)v46;
        if (v46 > 0x7FFFFFFF)
        {
LABEL_37:
          *(double *)&v58 = INFINITY;
LABEL_40:
          v57 = *(double *)&v58;
          goto LABEL_41;
        }
        if (v46 < (uint64_t)0xFFFFFFFF80000000)
          break;
      }
      if (!(_DWORD)v46)
      {
        v61 = 0.0;
        goto LABEL_42;
      }
      v57 = (double)(int)v46;
LABEL_41:
      __e = 0;
      v59 = frexp(v57, &__e);
      v60 = ldexp(v59, 11);
      v61 = ldexp(round(v60), __e - 11);
LABEL_42:
      v62 = v61 * v30;
      v63 = 0.0;
      if (v62 != 0.0)
      {
        __e = 0;
        v64 = frexp(v62, &__e);
        v65 = ldexp(v64, 11);
        v63 = ldexp(round(v65), __e - 11);
      }
      __e = LODWORD(v63);
      v66 = *(_QWORD *)(a12 + 24);
      if (!v66)
        std::__throw_bad_function_call[abi:ne180100]();
      v67 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v66 + 48))(v66, &__e);
      if (v67 == INFINITY)
      {
        v68 = 127;
      }
      else if (v67 == -INFINITY)
      {
        v68 = 0x80;
      }
      else
      {
        v69 = llroundf(v67);
        if (v69 >= 127)
          v69 = 127;
        if (v69 <= -128)
          v68 = 0x80;
        else
          v68 = v69;
      }
      v71 = (char *)v18[1];
      v70 = v18[2];
      if ((unint64_t)v71 >= v70)
      {
        v73 = v18;
        v74 = a2;
        v75 = a6;
        v76 = a3;
        v77 = v15;
        v78 = (char *)*v73;
        v79 = &v71[-*v73];
        v80 = (unint64_t)(v79 + 1);
        if ((uint64_t)(v79 + 1) < 0)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v81 = v70 - (_QWORD)v78;
        if (2 * v81 > v80)
          v80 = 2 * v81;
        if (v81 >= 0x3FFFFFFFFFFFFFFFLL)
          v82 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v82 = v80;
        if (v82)
          v83 = (char *)operator new(v82);
        else
          v83 = 0;
        v84 = &v79[(_QWORD)v83];
        v85 = &v79[(_QWORD)v83];
        *v85 = v68;
        v72 = v85 + 1;
        if (v71 == v78)
        {
          v88 = v89;
        }
        else
        {
          v86 = &v71[~(unint64_t)v78];
          do
          {
            v87 = *--v71;
            (v86--)[(_QWORD)v83] = v87;
          }
          while (v71 != v78);
          v88 = v89;
          v71 = (char *)*v89;
          v84 = v83;
        }
        *v88 = (unint64_t)v84;
        v88[1] = (unint64_t)v72;
        v88[2] = (unint64_t)&v83[v82];
        v15 = v77;
        if (v71)
          operator delete(v71);
        a3 = v76;
        a6 = v75;
        a2 = v74;
        v18 = v89;
      }
      else
      {
        *v71 = v68;
        v72 = v71 + 1;
      }
      v18[1] = (unint64_t)v72;
      if (++v28 == v15)
        return;
    }
    *(double *)&v58 = -INFINITY;
    goto LABEL_40;
  }
}

void sub_2068ECD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, __int16 a10, int a11, __int16 a12, uint64_t a13)
{
  double v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unsigned int v25;
  float v26;
  float v27;
  double v28;
  uint64_t v29;
  float v30;
  int v31;
  float v32;
  unsigned int v33;
  float v34;
  float v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  float v42;
  float v43;
  int v44;
  int v45;
  double v46;
  unint64_t v47;
  long double v48;
  double v49;
  float v50;
  float v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  MIL::Fp16 *v56;
  float v57;
  __int16 v58;
  __int16 v59;
  unint64_t v60;
  _WORD *v61;
  _WORD *v62;
  _WORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  __int16 v71;
  signed int v72;
  __int16 v73;
  __int16 v74;
  __int16 v75;
  __int16 v76;
  int __e;

  v76 = a4;
  v75 = a5;
  v74 = a10;
  v73 = a12;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)a9 = 0;
  std::vector<MIL::Fp16>::reserve((void **)a9, a3);
  v20 = ldexp(1.0, a6 + 10);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v74);
  v22 = v21;
  v23 = ldexp(1.0, a6 + 10 + a7);
  v24 = v22 * v23;
  v25 = llroundf(v24);
  if (fabsf(v24) < 1.0)
    v25 = 0;
  v72 = v25;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v73);
  v27 = v26;
  v28 = exp2(-(double)(a6 + 10 + a8));
  if (a3)
  {
    v29 = 0;
    v30 = v20;
    v31 = -20 - a6;
    v32 = v28 * v27;
    while (1)
    {
      v33 = *(unsigned __int8 *)(a1 + v29);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v76);
      v35 = v34;
      v36 = ilogbf(v34);
      v37 = v36 <= -14 ? -14 : v36;
      if (v37 >= v31)
      {
        v40 = v72 + (uint64_t)(int)llroundf((float)(v35 * (float)v33) * v30);
        if (v40 <= 0x7FFFFFFF)
        {
          LODWORD(v39) = v40 >= (uint64_t)0xFFFFFFFF80000000 ? v40 : -8388608;
          v38 = 2 * (v40 < (uint64_t)0xFFFFFFFF80000000);
        }
        else
        {
          v38 = 1;
          LODWORD(v39) = 2139095040;
        }
      }
      else
      {
        v38 = 0;
        LODWORD(v39) = v72;
      }
      v41 = *(unsigned __int8 *)(a2 + v29);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v75);
      if (v38 == 2)
        break;
      if (v38)
        goto LABEL_25;
      v43 = v42;
      v44 = ilogbf(v42);
      if (v44 <= -14)
        v45 = -14;
      else
        v45 = v44;
      if (v45 >= v31)
      {
        v39 = (int)llroundf((float)(v43 * (float)v41) * v30) + (uint64_t)(int)v39;
        if (v39 > 0x7FFFFFFF)
        {
LABEL_25:
          *(double *)&v47 = INFINITY;
LABEL_28:
          v46 = *(double *)&v47;
          goto LABEL_29;
        }
        if (v39 < (uint64_t)0xFFFFFFFF80000000)
          break;
      }
      if (!(_DWORD)v39)
      {
        v50 = 0.0;
        goto LABEL_30;
      }
      v46 = (double)(int)v39;
LABEL_29:
      __e = 0;
      v48 = frexp(v46, &__e);
      v49 = ldexp(v48, 11);
      v50 = ldexp(round(v49), __e - 11);
LABEL_30:
      v51 = v50 * v32;
      v52 = 0.0;
      if (v51 != 0.0)
      {
        __e = 0;
        v53 = frexp(v51, &__e);
        v54 = ldexp(v53, 11);
        v52 = ldexp(round(v54), __e - 11);
      }
      __e = LODWORD(v52);
      v55 = *(_QWORD *)(a13 + 24);
      if (!v55)
        std::__throw_bad_function_call[abi:ne180100]();
      v56 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, &__e);
      v58 = MIL::Fp16::FromFloat(v56, v57);
      v59 = v58;
      v61 = *(_WORD **)(a9 + 8);
      v60 = *(_QWORD *)(a9 + 16);
      if ((unint64_t)v61 >= v60)
      {
        v63 = *(_WORD **)a9;
        v64 = (uint64_t)v61 - *(_QWORD *)a9;
        if (v64 <= -3)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v65 = v64 >> 1;
        v66 = v60 - (_QWORD)v63;
        if (v66 <= (v64 >> 1) + 1)
          v67 = v65 + 1;
        else
          v67 = v66;
        if (v66 >= 0x7FFFFFFFFFFFFFFELL)
          v68 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a9 + 16, v68);
          v63 = *(_WORD **)a9;
          v61 = *(_WORD **)(a9 + 8);
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[2 * v65];
        *(_WORD *)v70 = v59;
        v62 = v70 + 2;
        while (v61 != v63)
        {
          v71 = *--v61;
          *((_WORD *)v70 - 1) = v71;
          v70 -= 2;
        }
        *(_QWORD *)a9 = v70;
        *(_QWORD *)(a9 + 8) = v62;
        *(_QWORD *)(a9 + 16) = &v69[2 * v68];
        if (v63)
          operator delete(v63);
      }
      else
      {
        *v61 = v58;
        v62 = v61 + 1;
      }
      *(_QWORD *)(a9 + 8) = v62;
      if (++v29 == a3)
        return;
    }
    *(double *)&v47 = -INFINITY;
    goto LABEL_28;
  }
}

void sub_2068ED120(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,unsigned char>(size_t __sz@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  double v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  float v24;
  double v25;
  uint64_t v26;
  float v27;
  int v28;
  float v29;
  unsigned int v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  float v39;
  float v40;
  int v41;
  int v42;
  double v43;
  unint64_t v44;
  long double v45;
  double v46;
  float v47;
  float v48;
  float v49;
  long double v50;
  double v51;
  uint64_t v52;
  float v53;
  int v54;
  int v55;
  unint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  unint64_t v59;
  _BYTE *v60;
  unint64_t v61;
  unint64_t v62;
  size_t v63;
  char *v64;
  char *v65;
  _BYTE *v66;
  _BYTE *v67;
  char v68;
  signed int v69;
  __int16 v72;
  __int16 v73;
  __int16 v74;
  __int16 v75;
  int __e;

  v75 = a4;
  v74 = a5;
  v73 = a10;
  v72 = a11;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<unsigned char>::reserve(a9, __sz);
  v17 = ldexp(1.0, a6 + 10);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v73);
  v19 = v18;
  v20 = ldexp(1.0, a6 + 10 + a7);
  v21 = v19 * v20;
  v22 = llroundf(v21);
  if (fabsf(v21) < 1.0)
    v22 = 0;
  v69 = v22;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v72);
  v24 = v23;
  v25 = exp2(-(double)(a6 + 10 + a8));
  if (__sz)
  {
    v26 = 0;
    v27 = v17;
    v28 = -20 - a6;
    v29 = v25 * v24;
    while (1)
    {
      v30 = *(unsigned __int8 *)(a2 + v26);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v75);
      v32 = v31;
      v33 = ilogbf(v31);
      v34 = v33 <= -14 ? -14 : v33;
      if (v34 >= v28)
      {
        v37 = v69 + (uint64_t)(int)llroundf((float)(v32 * (float)v30) * v27);
        if (v37 <= 0x7FFFFFFF)
        {
          LODWORD(v36) = v37 >= (uint64_t)0xFFFFFFFF80000000 ? v37 : -8388608;
          v35 = 2 * (v37 < (uint64_t)0xFFFFFFFF80000000);
        }
        else
        {
          v35 = 1;
          LODWORD(v36) = 2139095040;
        }
      }
      else
      {
        v35 = 0;
        LODWORD(v36) = v69;
      }
      v38 = *(unsigned __int8 *)(a3 + v26);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v74);
      if (v35 == 2)
        break;
      if (v35)
        goto LABEL_25;
      v40 = v39;
      v41 = ilogbf(v39);
      if (v41 <= -14)
        v42 = -14;
      else
        v42 = v41;
      if (v42 >= v28)
      {
        v36 = (int)llroundf((float)(v40 * (float)v38) * v27) + (uint64_t)(int)v36;
        if (v36 > 0x7FFFFFFF)
        {
LABEL_25:
          *(double *)&v44 = INFINITY;
LABEL_28:
          v43 = *(double *)&v44;
          goto LABEL_29;
        }
        if (v36 < (uint64_t)0xFFFFFFFF80000000)
          break;
      }
      if (!(_DWORD)v36)
      {
        v47 = 0.0;
        goto LABEL_30;
      }
      v43 = (double)(int)v36;
LABEL_29:
      __e = 0;
      v45 = frexp(v43, &__e);
      v46 = ldexp(v45, 11);
      v47 = ldexp(round(v46), __e - 11);
LABEL_30:
      v48 = v47 * v29;
      v49 = 0.0;
      if (v48 != 0.0)
      {
        __e = 0;
        v50 = frexp(v48, &__e);
        v51 = ldexp(v50, 11);
        v49 = ldexp(round(v51), __e - 11);
      }
      __e = LODWORD(v49);
      v52 = *(_QWORD *)(a12 + 24);
      if (!v52)
        std::__throw_bad_function_call[abi:ne180100]();
      v53 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v52 + 48))(v52, &__e);
      if (v53 == INFINITY)
      {
        LOBYTE(v54) = -1;
      }
      else if (v53 == -INFINITY)
      {
        LOBYTE(v54) = 0;
      }
      else
      {
        v55 = llroundf(v53);
        if (v55 >= 255)
          v55 = 255;
        v54 = v55 & ~(v55 >> 31);
      }
      v57 = (_BYTE *)a9[1];
      v56 = a9[2];
      if ((unint64_t)v57 >= v56)
      {
        v59 = *a9;
        v60 = &v57[-*a9];
        v61 = (unint64_t)(v60 + 1);
        if ((uint64_t)(v60 + 1) < 0)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v62 = v56 - v59;
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0x3FFFFFFFFFFFFFFFLL)
          v63 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v63 = v61;
        if (v63)
          v64 = (char *)operator new(v63);
        else
          v64 = 0;
        v65 = &v60[(_QWORD)v64];
        v66 = &v60[(_QWORD)v64];
        *v66 = v54;
        v58 = v66 + 1;
        if (v57 != (_BYTE *)v59)
        {
          v67 = &v57[~v59];
          do
          {
            v68 = *--v57;
            (v67--)[(_QWORD)v64] = v68;
          }
          while (v57 != (_BYTE *)v59);
          v57 = (_BYTE *)*a9;
          v65 = v64;
        }
        *a9 = (unint64_t)v65;
        a9[1] = (unint64_t)v58;
        a9[2] = (unint64_t)&v64[v63];
        if (v57)
          operator delete(v57);
      }
      else
      {
        *v57 = v54;
        v58 = v57 + 1;
      }
      a9[1] = (unint64_t)v58;
      if (++v26 == __sz)
        return;
    }
    *(double *)&v44 = -INFINITY;
    goto LABEL_28;
  }
}

void sub_2068ED528(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,unsigned char>(size_t __sz@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  double v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  float v24;
  double v25;
  uint64_t v26;
  float v27;
  int v28;
  float v29;
  unsigned int v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  float v39;
  float v40;
  int v41;
  int v42;
  double v43;
  unint64_t v44;
  long double v45;
  double v46;
  float v47;
  float v48;
  float v49;
  long double v50;
  double v51;
  uint64_t v52;
  float v53;
  char v54;
  int v55;
  unint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  unint64_t v59;
  _BYTE *v60;
  unint64_t v61;
  unint64_t v62;
  size_t v63;
  char *v64;
  char *v65;
  char *v66;
  _BYTE *v67;
  char v68;
  signed int v69;
  __int16 v72;
  __int16 v73;
  __int16 v74;
  __int16 v75;
  int __e;

  v75 = a4;
  v74 = a5;
  v73 = a10;
  v72 = a11;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<unsigned char>::reserve(a9, __sz);
  v17 = ldexp(1.0, a6 + 10);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v73);
  v19 = v18;
  v20 = ldexp(1.0, a6 + 10 + a7);
  v21 = v19 * v20;
  v22 = llroundf(v21);
  if (fabsf(v21) < 1.0)
    v22 = 0;
  v69 = v22;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v72);
  v24 = v23;
  v25 = exp2(-(double)(a6 + 10 + a8));
  if (__sz)
  {
    v26 = 0;
    v27 = v17;
    v28 = -20 - a6;
    v29 = v25 * v24;
    while (1)
    {
      v30 = *(unsigned __int8 *)(a2 + v26);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v75);
      v32 = v31;
      v33 = ilogbf(v31);
      v34 = v33 <= -14 ? -14 : v33;
      if (v34 >= v28)
      {
        v37 = v69 + (uint64_t)(int)llroundf((float)(v32 * (float)v30) * v27);
        if (v37 <= 0x7FFFFFFF)
        {
          LODWORD(v36) = v37 >= (uint64_t)0xFFFFFFFF80000000 ? v37 : -8388608;
          v35 = 2 * (v37 < (uint64_t)0xFFFFFFFF80000000);
        }
        else
        {
          v35 = 1;
          LODWORD(v36) = 2139095040;
        }
      }
      else
      {
        v35 = 0;
        LODWORD(v36) = v69;
      }
      v38 = *(unsigned __int8 *)(a3 + v26);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v74);
      if (v35 == 2)
        break;
      if (v35)
        goto LABEL_25;
      v40 = v39;
      v41 = ilogbf(v39);
      if (v41 <= -14)
        v42 = -14;
      else
        v42 = v41;
      if (v42 >= v28)
      {
        v36 = (int)llroundf((float)(v40 * (float)v38) * v27) + (uint64_t)(int)v36;
        if (v36 > 0x7FFFFFFF)
        {
LABEL_25:
          *(double *)&v44 = INFINITY;
LABEL_28:
          v43 = *(double *)&v44;
          goto LABEL_29;
        }
        if (v36 < (uint64_t)0xFFFFFFFF80000000)
          break;
      }
      if (!(_DWORD)v36)
      {
        v47 = 0.0;
        goto LABEL_30;
      }
      v43 = (double)(int)v36;
LABEL_29:
      __e = 0;
      v45 = frexp(v43, &__e);
      v46 = ldexp(v45, 11);
      v47 = ldexp(round(v46), __e - 11);
LABEL_30:
      v48 = v47 * v29;
      v49 = 0.0;
      if (v48 != 0.0)
      {
        __e = 0;
        v50 = frexp(v48, &__e);
        v51 = ldexp(v50, 11);
        v49 = ldexp(round(v51), __e - 11);
      }
      __e = LODWORD(v49);
      v52 = *(_QWORD *)(a12 + 24);
      if (!v52)
        std::__throw_bad_function_call[abi:ne180100]();
      v53 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v52 + 48))(v52, &__e);
      if (v53 == INFINITY)
      {
        v54 = 127;
      }
      else if (v53 == -INFINITY)
      {
        v54 = 0x80;
      }
      else
      {
        v55 = llroundf(v53);
        if (v55 >= 127)
          v55 = 127;
        if (v55 <= -128)
          v54 = 0x80;
        else
          v54 = v55;
      }
      v57 = (_BYTE *)a9[1];
      v56 = a9[2];
      if ((unint64_t)v57 >= v56)
      {
        v59 = *a9;
        v60 = &v57[-*a9];
        v61 = (unint64_t)(v60 + 1);
        if ((uint64_t)(v60 + 1) < 0)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v62 = v56 - v59;
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0x3FFFFFFFFFFFFFFFLL)
          v63 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v63 = v61;
        if (v63)
          v64 = (char *)operator new(v63);
        else
          v64 = 0;
        v65 = &v60[(_QWORD)v64];
        v66 = &v60[(_QWORD)v64];
        *v66 = v54;
        v58 = v66 + 1;
        if (v57 != (_BYTE *)v59)
        {
          v67 = &v57[~v59];
          do
          {
            v68 = *--v57;
            (v67--)[(_QWORD)v64] = v68;
          }
          while (v57 != (_BYTE *)v59);
          v57 = (_BYTE *)*a9;
          v65 = v64;
        }
        *a9 = (unint64_t)v65;
        a9[1] = (unint64_t)v58;
        a9[2] = (unint64_t)&v64[v63];
        if (v57)
          operator delete(v57);
      }
      else
      {
        *v57 = v54;
        v58 = v57 + 1;
      }
      a9[1] = (unint64_t)v58;
      if (++v26 == __sz)
        return;
    }
    *(double *)&v44 = -INFINITY;
    goto LABEL_28;
  }
}

void sub_2068ED938(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, __int16 a10, int a11, __int16 a12, uint64_t a13)
{
  double v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unsigned int v25;
  float v26;
  float v27;
  double v28;
  uint64_t v29;
  float v30;
  int v31;
  float v32;
  char v33;
  float v34;
  float v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  float v42;
  float v43;
  int v44;
  int v45;
  double v46;
  unint64_t v47;
  long double v48;
  double v49;
  float v50;
  float v51;
  float v52;
  long double v53;
  double v54;
  uint64_t v55;
  MIL::Fp16 *v56;
  float v57;
  __int16 v58;
  __int16 v59;
  unint64_t v60;
  _WORD *v61;
  _WORD *v62;
  _WORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  __int16 v71;
  signed int v72;
  __int16 v73;
  __int16 v74;
  __int16 v75;
  __int16 v76;
  int __e;

  v76 = a4;
  v75 = a5;
  v74 = a10;
  v73 = a12;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)a9 = 0;
  std::vector<MIL::Fp16>::reserve((void **)a9, a3);
  v20 = ldexp(1.0, a6 + 10);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v74);
  v22 = v21;
  v23 = ldexp(1.0, a6 + 10 + a7);
  v24 = v22 * v23;
  v25 = llroundf(v24);
  if (fabsf(v24) < 1.0)
    v25 = 0;
  v72 = v25;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v73);
  v27 = v26;
  v28 = exp2(-(double)(a6 + 10 + a8));
  if (a3)
  {
    v29 = 0;
    v30 = v20;
    v31 = -20 - a6;
    v32 = v28 * v27;
    while (1)
    {
      v33 = *(_BYTE *)(a1 + v29);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v76);
      v35 = v34;
      v36 = ilogbf(v34);
      v37 = v36 <= -14 ? -14 : v36;
      if (v37 >= v31)
      {
        v40 = v72 + (uint64_t)(int)llroundf((float)(v35 * (float)v33) * v30);
        if (v40 <= 0x7FFFFFFF)
        {
          LODWORD(v39) = v40 >= (uint64_t)0xFFFFFFFF80000000 ? v40 : -8388608;
          v38 = 2 * (v40 < (uint64_t)0xFFFFFFFF80000000);
        }
        else
        {
          v38 = 1;
          LODWORD(v39) = 2139095040;
        }
      }
      else
      {
        v38 = 0;
        LODWORD(v39) = v72;
      }
      v41 = *(_BYTE *)(a2 + v29);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v75);
      if (v38 == 2)
        break;
      if (v38)
        goto LABEL_25;
      v43 = v42;
      v44 = ilogbf(v42);
      if (v44 <= -14)
        v45 = -14;
      else
        v45 = v44;
      if (v45 >= v31)
      {
        v39 = (int)llroundf((float)(v43 * (float)v41) * v30) + (uint64_t)(int)v39;
        if (v39 > 0x7FFFFFFF)
        {
LABEL_25:
          *(double *)&v47 = INFINITY;
LABEL_28:
          v46 = *(double *)&v47;
          goto LABEL_29;
        }
        if (v39 < (uint64_t)0xFFFFFFFF80000000)
          break;
      }
      if (!(_DWORD)v39)
      {
        v50 = 0.0;
        goto LABEL_30;
      }
      v46 = (double)(int)v39;
LABEL_29:
      __e = 0;
      v48 = frexp(v46, &__e);
      v49 = ldexp(v48, 11);
      v50 = ldexp(round(v49), __e - 11);
LABEL_30:
      v51 = v50 * v32;
      v52 = 0.0;
      if (v51 != 0.0)
      {
        __e = 0;
        v53 = frexp(v51, &__e);
        v54 = ldexp(v53, 11);
        v52 = ldexp(round(v54), __e - 11);
      }
      __e = LODWORD(v52);
      v55 = *(_QWORD *)(a13 + 24);
      if (!v55)
        std::__throw_bad_function_call[abi:ne180100]();
      v56 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v55 + 48))(v55, &__e);
      v58 = MIL::Fp16::FromFloat(v56, v57);
      v59 = v58;
      v61 = *(_WORD **)(a9 + 8);
      v60 = *(_QWORD *)(a9 + 16);
      if ((unint64_t)v61 >= v60)
      {
        v63 = *(_WORD **)a9;
        v64 = (uint64_t)v61 - *(_QWORD *)a9;
        if (v64 <= -3)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v65 = v64 >> 1;
        v66 = v60 - (_QWORD)v63;
        if (v66 <= (v64 >> 1) + 1)
          v67 = v65 + 1;
        else
          v67 = v66;
        if (v66 >= 0x7FFFFFFFFFFFFFFELL)
          v68 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a9 + 16, v68);
          v63 = *(_WORD **)a9;
          v61 = *(_WORD **)(a9 + 8);
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[2 * v65];
        *(_WORD *)v70 = v59;
        v62 = v70 + 2;
        while (v61 != v63)
        {
          v71 = *--v61;
          *((_WORD *)v70 - 1) = v71;
          v70 -= 2;
        }
        *(_QWORD *)a9 = v70;
        *(_QWORD *)(a9 + 8) = v62;
        *(_QWORD *)(a9 + 16) = &v69[2 * v68];
        if (v63)
          operator delete(v63);
      }
      else
      {
        *v61 = v58;
        v62 = v61 + 1;
      }
      *(_QWORD *)(a9 + 8) = v62;
      if (++v29 == a3)
        return;
    }
    *(double *)&v47 = -INFINITY;
    goto LABEL_28;
  }
}

void sub_2068EDCF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,signed char>(size_t __sz@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  double v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  float v24;
  double v25;
  uint64_t v26;
  float v27;
  int v28;
  float v29;
  char v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  float v39;
  float v40;
  int v41;
  int v42;
  double v43;
  unint64_t v44;
  long double v45;
  double v46;
  float v47;
  float v48;
  float v49;
  long double v50;
  double v51;
  uint64_t v52;
  float v53;
  int v54;
  int v55;
  unint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  unint64_t v59;
  _BYTE *v60;
  unint64_t v61;
  unint64_t v62;
  size_t v63;
  char *v64;
  char *v65;
  _BYTE *v66;
  _BYTE *v67;
  char v68;
  signed int v69;
  __int16 v72;
  __int16 v73;
  __int16 v74;
  __int16 v75;
  int __e;

  v75 = a4;
  v74 = a5;
  v73 = a10;
  v72 = a11;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<unsigned char>::reserve(a9, __sz);
  v17 = ldexp(1.0, a6 + 10);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v73);
  v19 = v18;
  v20 = ldexp(1.0, a6 + 10 + a7);
  v21 = v19 * v20;
  v22 = llroundf(v21);
  if (fabsf(v21) < 1.0)
    v22 = 0;
  v69 = v22;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v72);
  v24 = v23;
  v25 = exp2(-(double)(a6 + 10 + a8));
  if (__sz)
  {
    v26 = 0;
    v27 = v17;
    v28 = -20 - a6;
    v29 = v25 * v24;
    while (1)
    {
      v30 = *(_BYTE *)(a2 + v26);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v75);
      v32 = v31;
      v33 = ilogbf(v31);
      v34 = v33 <= -14 ? -14 : v33;
      if (v34 >= v28)
      {
        v37 = v69 + (uint64_t)(int)llroundf((float)(v32 * (float)v30) * v27);
        if (v37 <= 0x7FFFFFFF)
        {
          LODWORD(v36) = v37 >= (uint64_t)0xFFFFFFFF80000000 ? v37 : -8388608;
          v35 = 2 * (v37 < (uint64_t)0xFFFFFFFF80000000);
        }
        else
        {
          v35 = 1;
          LODWORD(v36) = 2139095040;
        }
      }
      else
      {
        v35 = 0;
        LODWORD(v36) = v69;
      }
      v38 = *(_BYTE *)(a3 + v26);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v74);
      if (v35 == 2)
        break;
      if (v35)
        goto LABEL_25;
      v40 = v39;
      v41 = ilogbf(v39);
      if (v41 <= -14)
        v42 = -14;
      else
        v42 = v41;
      if (v42 >= v28)
      {
        v36 = (int)llroundf((float)(v40 * (float)v38) * v27) + (uint64_t)(int)v36;
        if (v36 > 0x7FFFFFFF)
        {
LABEL_25:
          *(double *)&v44 = INFINITY;
LABEL_28:
          v43 = *(double *)&v44;
          goto LABEL_29;
        }
        if (v36 < (uint64_t)0xFFFFFFFF80000000)
          break;
      }
      if (!(_DWORD)v36)
      {
        v47 = 0.0;
        goto LABEL_30;
      }
      v43 = (double)(int)v36;
LABEL_29:
      __e = 0;
      v45 = frexp(v43, &__e);
      v46 = ldexp(v45, 11);
      v47 = ldexp(round(v46), __e - 11);
LABEL_30:
      v48 = v47 * v29;
      v49 = 0.0;
      if (v48 != 0.0)
      {
        __e = 0;
        v50 = frexp(v48, &__e);
        v51 = ldexp(v50, 11);
        v49 = ldexp(round(v51), __e - 11);
      }
      __e = LODWORD(v49);
      v52 = *(_QWORD *)(a12 + 24);
      if (!v52)
        std::__throw_bad_function_call[abi:ne180100]();
      v53 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v52 + 48))(v52, &__e);
      if (v53 == INFINITY)
      {
        LOBYTE(v54) = -1;
      }
      else if (v53 == -INFINITY)
      {
        LOBYTE(v54) = 0;
      }
      else
      {
        v55 = llroundf(v53);
        if (v55 >= 255)
          v55 = 255;
        v54 = v55 & ~(v55 >> 31);
      }
      v57 = (_BYTE *)a9[1];
      v56 = a9[2];
      if ((unint64_t)v57 >= v56)
      {
        v59 = *a9;
        v60 = &v57[-*a9];
        v61 = (unint64_t)(v60 + 1);
        if ((uint64_t)(v60 + 1) < 0)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v62 = v56 - v59;
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0x3FFFFFFFFFFFFFFFLL)
          v63 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v63 = v61;
        if (v63)
          v64 = (char *)operator new(v63);
        else
          v64 = 0;
        v65 = &v60[(_QWORD)v64];
        v66 = &v60[(_QWORD)v64];
        *v66 = v54;
        v58 = v66 + 1;
        if (v57 != (_BYTE *)v59)
        {
          v67 = &v57[~v59];
          do
          {
            v68 = *--v57;
            (v67--)[(_QWORD)v64] = v68;
          }
          while (v57 != (_BYTE *)v59);
          v57 = (_BYTE *)*a9;
          v65 = v64;
        }
        *a9 = (unint64_t)v65;
        a9[1] = (unint64_t)v58;
        a9[2] = (unint64_t)&v64[v63];
        if (v57)
          operator delete(v57);
      }
      else
      {
        *v57 = v54;
        v58 = v57 + 1;
      }
      a9[1] = (unint64_t)v58;
      if (++v26 == __sz)
        return;
    }
    *(double *)&v44 = -INFINITY;
    goto LABEL_28;
  }
}

void sub_2068EE108(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,signed char>(size_t __sz@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  double v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  float v24;
  double v25;
  uint64_t v26;
  float v27;
  int v28;
  float v29;
  char v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  float v39;
  float v40;
  int v41;
  int v42;
  double v43;
  unint64_t v44;
  long double v45;
  double v46;
  float v47;
  float v48;
  float v49;
  long double v50;
  double v51;
  uint64_t v52;
  float v53;
  char v54;
  int v55;
  unint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  unint64_t v59;
  _BYTE *v60;
  unint64_t v61;
  unint64_t v62;
  size_t v63;
  char *v64;
  char *v65;
  char *v66;
  _BYTE *v67;
  char v68;
  signed int v69;
  __int16 v72;
  __int16 v73;
  __int16 v74;
  __int16 v75;
  int __e;

  v75 = a4;
  v74 = a5;
  v73 = a10;
  v72 = a11;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<unsigned char>::reserve(a9, __sz);
  v17 = ldexp(1.0, a6 + 10);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v73);
  v19 = v18;
  v20 = ldexp(1.0, a6 + 10 + a7);
  v21 = v19 * v20;
  v22 = llroundf(v21);
  if (fabsf(v21) < 1.0)
    v22 = 0;
  v69 = v22;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v72);
  v24 = v23;
  v25 = exp2(-(double)(a6 + 10 + a8));
  if (__sz)
  {
    v26 = 0;
    v27 = v17;
    v28 = -20 - a6;
    v29 = v25 * v24;
    while (1)
    {
      v30 = *(_BYTE *)(a2 + v26);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v75);
      v32 = v31;
      v33 = ilogbf(v31);
      v34 = v33 <= -14 ? -14 : v33;
      if (v34 >= v28)
      {
        v37 = v69 + (uint64_t)(int)llroundf((float)(v32 * (float)v30) * v27);
        if (v37 <= 0x7FFFFFFF)
        {
          LODWORD(v36) = v37 >= (uint64_t)0xFFFFFFFF80000000 ? v37 : -8388608;
          v35 = 2 * (v37 < (uint64_t)0xFFFFFFFF80000000);
        }
        else
        {
          v35 = 1;
          LODWORD(v36) = 2139095040;
        }
      }
      else
      {
        v35 = 0;
        LODWORD(v36) = v69;
      }
      v38 = *(_BYTE *)(a3 + v26);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v74);
      if (v35 == 2)
        break;
      if (v35)
        goto LABEL_25;
      v40 = v39;
      v41 = ilogbf(v39);
      if (v41 <= -14)
        v42 = -14;
      else
        v42 = v41;
      if (v42 >= v28)
      {
        v36 = (int)llroundf((float)(v40 * (float)v38) * v27) + (uint64_t)(int)v36;
        if (v36 > 0x7FFFFFFF)
        {
LABEL_25:
          *(double *)&v44 = INFINITY;
LABEL_28:
          v43 = *(double *)&v44;
          goto LABEL_29;
        }
        if (v36 < (uint64_t)0xFFFFFFFF80000000)
          break;
      }
      if (!(_DWORD)v36)
      {
        v47 = 0.0;
        goto LABEL_30;
      }
      v43 = (double)(int)v36;
LABEL_29:
      __e = 0;
      v45 = frexp(v43, &__e);
      v46 = ldexp(v45, 11);
      v47 = ldexp(round(v46), __e - 11);
LABEL_30:
      v48 = v47 * v29;
      v49 = 0.0;
      if (v48 != 0.0)
      {
        __e = 0;
        v50 = frexp(v48, &__e);
        v51 = ldexp(v50, 11);
        v49 = ldexp(round(v51), __e - 11);
      }
      __e = LODWORD(v49);
      v52 = *(_QWORD *)(a12 + 24);
      if (!v52)
        std::__throw_bad_function_call[abi:ne180100]();
      v53 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v52 + 48))(v52, &__e);
      if (v53 == INFINITY)
      {
        v54 = 127;
      }
      else if (v53 == -INFINITY)
      {
        v54 = 0x80;
      }
      else
      {
        v55 = llroundf(v53);
        if (v55 >= 127)
          v55 = 127;
        if (v55 <= -128)
          v54 = 0x80;
        else
          v54 = v55;
      }
      v57 = (_BYTE *)a9[1];
      v56 = a9[2];
      if ((unint64_t)v57 >= v56)
      {
        v59 = *a9;
        v60 = &v57[-*a9];
        v61 = (unint64_t)(v60 + 1);
        if ((uint64_t)(v60 + 1) < 0)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v62 = v56 - v59;
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0x3FFFFFFFFFFFFFFFLL)
          v63 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v63 = v61;
        if (v63)
          v64 = (char *)operator new(v63);
        else
          v64 = 0;
        v65 = &v60[(_QWORD)v64];
        v66 = &v60[(_QWORD)v64];
        *v66 = v54;
        v58 = v66 + 1;
        if (v57 != (_BYTE *)v59)
        {
          v67 = &v57[~v59];
          do
          {
            v68 = *--v57;
            (v67--)[(_QWORD)v64] = v68;
          }
          while (v57 != (_BYTE *)v59);
          v57 = (_BYTE *)*a9;
          v65 = v64;
        }
        *a9 = (unint64_t)v65;
        a9[1] = (unint64_t)v58;
        a9[2] = (unint64_t)&v64[v63];
        if (v57)
          operator delete(v57);
      }
      else
      {
        *v57 = v54;
        v58 = v57 + 1;
      }
      a9[1] = (unint64_t)v58;
      if (++v26 == __sz)
        return;
    }
    *(double *)&v44 = -INFINITY;
    goto LABEL_28;
  }
}

void sub_2068EE520(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::NeAddCpu::~NeAddCpu(MIL::ANEMachineIR::Interpreter::NeAddCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

void MIL::ANEMachineIR::Interpreter::NeConvCpu::Run(MIL::IRObject *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void *v20;
  uint64_t ParameterValue;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  MIL::Fp16 *v29;
  __int16 v30;
  char *v31;
  MIL::Fp16 *v32;
  __int16 v33;
  char *v34;
  uint64_t InterpretedTensorValue;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  ANEMachineIR::Utils *v41;
  const MIL::IRTensorValueType *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t j;
  MIL::Fp16 *v48;
  unsigned int v49;
  __int16 v50;
  __int16 v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int16 v61;
  void *v62;
  unint64_t i;
  MIL::Fp16 *v64;
  __int16 v65;
  __int16 v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  __int16 v76;
  ANEMachineIR::Utils *v77;
  const MIL::IRTensorValueType *v78;
  uint64_t v79;
  int v80;
  MIL::IRValueType *OutputType;
  uint64_t v82;
  int v83;
  uint64_t v84;
  __int128 v85;
  std::string *v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unsigned __int8 *v109;
  MIL::IRValueType *v110;
  void **v111;
  _QWORD *v112;
  uint64_t v113;
  unsigned __int8 *v114;
  MIL::IRValueType *v115;
  void **v116;
  _QWORD *v117;
  uint64_t v118;
  unsigned __int8 *v119;
  MIL::IRValueType *v120;
  void **v121;
  _QWORD *v122;
  uint64_t v123;
  unsigned __int8 *v124;
  MIL::IRValueType *v125;
  void **v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned __int8 *v129;
  MIL::IRValueType *v130;
  void **v131;
  _QWORD *v132;
  uint64_t v133;
  unsigned __int8 *v134;
  MIL::IRValueType *v135;
  void **v136;
  _QWORD *v137;
  uint64_t v138;
  unsigned __int8 *v139;
  MIL::IRValueType *v140;
  void **v141;
  _QWORD *v142;
  uint64_t v143;
  unsigned __int8 *v144;
  MIL::IRValueType *v145;
  void **v146;
  _QWORD *v147;
  uint64_t v148;
  unsigned __int8 *v149;
  MIL::IRValueType *v150;
  void **v151;
  void **v152;
  uint64_t v153;
  std::runtime_error *exception;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  char v160;
  char v161;
  char v162;
  char v163;
  unsigned __int8 *v164;
  unsigned __int8 *v165;
  std::string __p;
  void *v167[2];
  char v168;
  std::string v169;
  std::string v170;
  uint64_t v171;
  void *Data;
  void *v173;
  void *v174[3];
  void *v175[3];
  std::string v176;
  void *v177;
  void *v178;
  uint64_t v179;
  void *v180;
  void *v181;
  uint64_t v182;
  std::string v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  void **v189;
  _BYTE v190[24];
  _BYTE *v191;
  _BYTE v192[24];
  _BYTE *v193;
  _BYTE v194[24];
  _BYTE *v195;
  _BYTE v196[24];
  _BYTE *v197;
  _BYTE v198[24];
  _BYTE *v199;
  _BYTE v200[24];
  _BYTE *v201;
  _BYTE v202[24];
  _BYTE *v203;
  _BYTE v204[24];
  _BYTE *v205;
  _BYTE v206[24];
  _BYTE *v207;
  char *v208;
  char *v209;
  char *v210;
  void **v211;
  uint64_t v212;

  v212 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(v6 + 8) != 7)
      goto LABEL_10;
    v6 = *(_QWORD *)v6;
  }
  else if (v7 != 7)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v6 != 1667196270 || *(_DWORD *)(v6 + 3) != 1986948963)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    v9 = a3 + 8;
    std::string::basic_string[abi:ne180100]<0>(&v170, "ne_conv");
    v10 = std::string::insert(&v170, 0, "Expected ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v176.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v176.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v176, " op. Got ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v183.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v183.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
    v15 = *(char *)(v14 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)v14;
    else
      v16 = *(const std::string::value_type **)v14;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v14 + 23);
    else
      v17 = *(_QWORD *)(v14 + 8);
    v18 = std::string::append(&v183, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)v9 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v183.__r_.__value_.__l.__data_);
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v176.__r_.__value_.__l.__data_);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v170.__r_.__value_.__r.__words[0];
LABEL_312:
      operator delete(v20);
      return;
    }
    return;
  }
  v188 = 0;
  v187 = 0u;
  v186 = 0u;
  v185 = 0u;
  v184 = 0u;
  v180 = 0;
  v181 = 0;
  v182 = 0;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  ANEMachineIR::Validators::ParseConvParameterValues(a1, (uint64_t)&v180, (uint64_t)&v177, (uint64_t)&v183, (uint64_t)&v176);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v176) & 1) == 0)
  {
    *(_DWORD *)a3 = 3;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Failed to parse conv parameters.");
    goto LABEL_302;
  }
  std::string::basic_string[abi:ne180100]<0>(&v170, "acc_bias_shift");
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue)
    && (v22 = (char *)MEMORY[0x20BCFEE94]()) != 0)
  {
    v163 = *v22;
  }
  else
  {
    v163 = 0;
  }
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v170, "acc_left_shift");
  v23 = MIL::IROperation::TryGetParameterValue();
  if (v23
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23)
    && (v24 = (char *)MEMORY[0x20BCFEE94]()) != 0)
  {
    v162 = *v24;
  }
  else
  {
    v162 = 0;
  }
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v170, "post_right_shift");
  v25 = MIL::IROperation::TryGetParameterValue();
  if (v25
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25)
    && (v26 = (char *)MEMORY[0x20BCFEE94]()) != 0)
  {
    v161 = *v26;
  }
  else
  {
    v161 = 0;
  }
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v170, "pre_relu");
  v27 = MIL::IROperation::TryGetParameterValue();
  v160 = v27
      && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27)
      && (v28 = (_BYTE *)MEMORY[0x20BCFEEA0]()) != 0
      && *v28 != 0;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  v29 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v170, "bias");
  v30 = MIL::Fp16::FromFloat(v29, 0.0);
  v31 = (char *)operator new(2uLL);
  v208 = v31;
  *(_WORD *)v31 = v30;
  v209 = v31 + 2;
  v210 = v31 + 2;
  MIL::ANEMachineIR::GetScalarOrVectorOrDefault<MIL::Fp16>(a1, (uint64_t)&v208, (uint64_t)v175);
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  v32 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v170, "post_scale");
  v33 = MIL::Fp16::FromFloat(v32, 1.0);
  v34 = (char *)operator new(2uLL);
  v208 = v34;
  *(_WORD *)v34 = v33;
  v209 = v34 + 2;
  v210 = v34 + 2;
  MIL::ANEMachineIR::GetScalarOrVectorOrDefault<MIL::Fp16>(a1, (uint64_t)&v208, (uint64_t)v174);
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v170, "x");
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v170);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v170, "dense_kernel");
  v36 = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v170);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  if (InterpretedTensorValue)
  {
    if (v36)
    {
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
      v159 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 88))(v37);
      v158 = InterpretedTensorValue;
      if (v159 == 4)
      {
        v38 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v39 = 0;
      }
      else
      {
        v41 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
        ANEMachineIR::Utils::GetStaticTensorShape(v41, v42, (uint64_t)&v170);
        v43 = (uint64_t *)v170.__r_.__value_.__r.__words[0];
        v44 = 1;
        while (v43 != (uint64_t *)v170.__r_.__value_.__l.__size_)
        {
          v45 = *v43++;
          v44 *= v45;
        }
        v208 = 0;
        v209 = 0;
        v210 = 0;
        std::vector<MIL::Fp16>::reserve((void **)&v208, v44);
        if (v159 == 9)
        {
          Data = (void *)MIL::IRTensorValue::GetDataView<signed char>();
          v173 = v62;
          if (v44)
          {
            for (i = 0; i != v44; ++i)
            {
              v64 = (MIL::Fp16 *)MIL::Util::Span<signed char const,18446744073709551615ul>::operator[](&Data, i);
              v65 = MIL::Fp16::FromFloat(v64, (float)*(char *)v64);
              v66 = v65;
              v67 = v209;
              if (v209 >= v210)
              {
                v69 = v208;
                v70 = v209 - v208;
                if (v209 - v208 <= -3)
                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                v71 = v70 >> 1;
                if (v210 - v208 <= (unint64_t)((v70 >> 1) + 1))
                  v72 = v71 + 1;
                else
                  v72 = v210 - v208;
                if ((unint64_t)(v210 - v208) >= 0x7FFFFFFFFFFFFFFELL)
                  v73 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v73 = v72;
                if (v73)
                {
                  v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v210, v73);
                  v69 = v208;
                  v67 = v209;
                }
                else
                {
                  v74 = 0;
                }
                v75 = &v74[2 * v71];
                *(_WORD *)v75 = v66;
                v68 = v75 + 2;
                while (v67 != v69)
                {
                  v76 = *((_WORD *)v67 - 1);
                  v67 -= 2;
                  *((_WORD *)v75 - 1) = v76;
                  v75 -= 2;
                }
                v208 = v75;
                v209 = v68;
                v210 = &v74[2 * v73];
                if (v69)
                  operator delete(v69);
              }
              else
              {
                *(_WORD *)v209 = v65;
                v68 = v67 + 2;
              }
              v209 = v68;
            }
          }
        }
        else
        {
          if (v159 != 14)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Unexpected dtype copying to fp16.");
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          Data = (void *)MIL::IRTensorValue::GetDataView<unsigned char>();
          v173 = v46;
          if (v44)
          {
            for (j = 0; j != v44; ++j)
            {
              v48 = (MIL::Fp16 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::operator[](&Data, j);
              LOBYTE(v49) = *(_BYTE *)v48;
              v50 = MIL::Fp16::FromFloat(v48, (float)v49);
              v51 = v50;
              v52 = v209;
              if (v209 >= v210)
              {
                v54 = v208;
                v55 = v209 - v208;
                if (v209 - v208 <= -3)
                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                v56 = v55 >> 1;
                if (v210 - v208 <= (unint64_t)((v55 >> 1) + 1))
                  v57 = v56 + 1;
                else
                  v57 = v210 - v208;
                if ((unint64_t)(v210 - v208) >= 0x7FFFFFFFFFFFFFFELL)
                  v58 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v58 = v57;
                if (v58)
                {
                  v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v210, v58);
                  v54 = v208;
                  v52 = v209;
                }
                else
                {
                  v59 = 0;
                }
                v60 = &v59[2 * v56];
                *(_WORD *)v60 = v51;
                v53 = v60 + 2;
                while (v52 != v54)
                {
                  v61 = *((_WORD *)v52 - 1);
                  v52 -= 2;
                  *((_WORD *)v60 - 1) = v61;
                  v60 -= 2;
                }
                v208 = v60;
                v209 = v53;
                v210 = &v59[2 * v58];
                if (v54)
                  operator delete(v54);
              }
              else
              {
                *(_WORD *)v209 = v50;
                v53 = v52 + 2;
              }
              v209 = v53;
            }
          }
        }
        if (v170.__r_.__value_.__r.__words[0])
        {
          v170.__r_.__value_.__l.__size_ = v170.__r_.__value_.__r.__words[0];
          operator delete(v170.__r_.__value_.__l.__data_);
        }
        v39 = v208;
        v38 = (uint64_t)v208;
      }
      v77 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
      ANEMachineIR::Utils::GetStaticTensorShape(v77, v78, (uint64_t)&Data);
      *(_OWORD *)&v170.__r_.__value_.__r.__words[1] = 0uLL;
      v171 = 0;
      MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v170, (uint64_t (***)())&v208);
      if (LODWORD(v170.__r_.__value_.__l.__data_))
      {
        *(_DWORD *)a3 = v170.__r_.__value_.__l.__data_;
        *(_OWORD *)(a3 + 8) = *(_OWORD *)&v170.__r_.__value_.__r.__words[1];
        *(_QWORD *)(a3 + 24) = v171;
        *(_OWORD *)&v170.__r_.__value_.__r.__words[1] = 0uLL;
        v171 = 0;
        goto LABEL_287;
      }
      v79 = (*(uint64_t (**)(void))(*(_QWORD *)v158 + 32))();
      v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 88))(v79);
      OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      v82 = MIL::IRValueType::AsTensorType(OutputType);
      v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 88))(v82);
      std::string::basic_string[abi:ne180100]<0>(v167, "pad_mode");
      std::string::basic_string[abi:ne180100]<0>(&__p, "zero");
      v84 = MIL::IROperation::TryGetParameterValue();
      if (v84
        && (v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 40))(v84)) != 0
        && (v84 = MEMORY[0x20BCFEE88]()) != 0)
      {
        if (*(char *)(v84 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)v84, *(_QWORD *)(v84 + 8));
        }
        else
        {
          v85 = *(_OWORD *)v84;
          v169.__r_.__value_.__r.__words[2] = *(_QWORD *)(v84 + 16);
          *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v85;
        }
      }
      else
      {
        v169 = __p;
        memset(&__p, 0, sizeof(__p));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v168 < 0)
        operator delete(v167[0]);
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v169.__r_.__value_.__l.__size_ != 4)
          goto LABEL_138;
        v86 = (std::string *)v169.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) != 4)
          goto LABEL_138;
        v86 = &v169;
      }
      if (LODWORD(v86->__r_.__value_.__l.__data_) == 1869768058)
      {
        v157 = 0;
        goto LABEL_142;
      }
LABEL_138:
      v84 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v169, "replicate");
      if ((v84 & 1) == 0)
      {
        *(_DWORD *)a3 = 3;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Unexpected value for pad_mode.");
        goto LABEL_285;
      }
      v157 = 1;
LABEL_142:
      v87 = MIL::Fp16::FromFloat((MIL::Fp16 *)v84, 1.0);
      if (v80 != 4)
      {
        if (v80 != 9)
        {
          if (v80 != 14)
          {
            v94 = "Unimplemented input dtype";
LABEL_168:
            *(_DWORD *)a3 = 3;
            std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v94);
LABEL_285:
            if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v169.__r_.__value_.__l.__data_);
LABEL_287:
            v152 = v211;
            if (v211 == (void **)&v208)
            {
              v153 = 4;
              v152 = (void **)&v208;
            }
            else
            {
              if (!v211)
              {
LABEL_292:
                if (SHIBYTE(v171) < 0)
                  operator delete((void *)v170.__r_.__value_.__l.__size_);
                if (Data)
                {
                  v173 = Data;
                  operator delete(Data);
                }
                if (v39)
                  operator delete(v39);
                goto LABEL_298;
              }
              v153 = 5;
            }
            (*((void (**)(void))*v152 + v153))();
            goto LABEL_292;
          }
          if (v83 != 14)
          {
            if (v83 != 9)
            {
              if (v83 == 4)
              {
                v88 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v89 = (uint64_t)v211;
                if (v211)
                {
                  if (v211 == (void **)&v208)
                  {
                    v201 = v200;
                    (*((void (**)(char **, _BYTE *))v208 + 3))(&v208, v200);
LABEL_275:
                    LOBYTE(v156) = v160;
                    MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(v88, (uint64_t *)&v180, v38, v159, &Data, (uint64_t)&v177, (unint64_t *)&v183, v157, (uint64_t)v167, v162, v163, v161, (uint64_t)v175, (MIL::Fp16 **)v174, 0, v155, v87, v156, (uint64_t)v200);
                    v147 = v201;
                    if (v201 == v200)
                    {
                      v148 = 4;
                      v147 = v200;
                    }
                    else
                    {
                      if (!v201)
                      {
LABEL_280:
                        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(_QWORD *)a1 + 200))(&v164, a1);
                        v149 = v164;
                        if (v165 == v164)
                          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                        v150 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                        MIL::IRValueType::AsTensorType(v150);
                        MIL::IRTensorValueType::MakeFloat16Value();
                        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v149, (uint64_t *)&v189);
                        v151 = v189;
                        v189 = 0;
                        if (v151)
                          (*((void (**)(void **))*v151 + 1))(v151);
LABEL_283:
                        v189 = (void **)&v164;
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v189);
                        *(_DWORD *)a3 = 0;
                        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
                        if (v167[0])
                        {
                          v167[1] = v167[0];
                          operator delete(v167[0]);
                        }
                        goto LABEL_285;
                      }
                      v148 = 5;
                    }
                    (*(void (**)(void))(*v147 + 8 * v148))();
                    goto LABEL_280;
                  }
                  v89 = (*((uint64_t (**)(void))*v211 + 2))();
                }
                v201 = (_BYTE *)v89;
                goto LABEL_275;
              }
              goto LABEL_167;
            }
            v101 = MIL::IRTensorValue::GetDataView<unsigned char>();
            v102 = (uint64_t)v211;
            if (v211)
            {
              if (v211 == (void **)&v208)
              {
                v197 = v196;
                (*((void (**)(char **, _BYTE *))v208 + 3))(&v208, v196);
LABEL_235:
                LOBYTE(v156) = v160;
                MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(v101, (uint64_t *)&v180, v38, v159, &Data, (uint64_t)&v177, (unint64_t *)&v183, v157, (unint64_t *)v167, v162, v163, v161, (uint64_t)v175, (MIL::Fp16 **)v174, 0, v155, v87, v156, (uint64_t)v196);
                v127 = v197;
                if (v197 == v196)
                {
                  v128 = 4;
                  v127 = v196;
                }
                else
                {
                  if (!v197)
                  {
LABEL_240:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(_QWORD *)a1 + 200))(&v164, a1);
                    v129 = v164;
                    if (v165 == v164)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v130 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v130);
                    MIL::IRTensorValueType::MakeInt8Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v129, (uint64_t *)&v189);
                    v131 = v189;
                    v189 = 0;
                    if (v131)
                      (*((void (**)(void **))*v131 + 1))(v131);
                    goto LABEL_283;
                  }
                  v128 = 5;
                }
                (*(void (**)(void))(*v127 + 8 * v128))();
                goto LABEL_240;
              }
              v102 = (*((uint64_t (**)(void))*v211 + 2))();
            }
            v197 = (_BYTE *)v102;
            goto LABEL_235;
          }
          v105 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v106 = (uint64_t)v211;
          if (v211)
          {
            if (v211 == (void **)&v208)
            {
              v199 = v198;
              (*((void (**)(char **, _BYTE *))v208 + 3))(&v208, v198);
LABEL_265:
              LOBYTE(v156) = v160;
              MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(v105, (uint64_t *)&v180, v38, v159, &Data, (uint64_t)&v177, (unint64_t *)&v183, v157, (unint64_t *)v167, v162, v163, v161, (uint64_t)v175, (MIL::Fp16 **)v174, 0, v155, v87, v156, (uint64_t)v198);
              v142 = v199;
              if (v199 == v198)
              {
                v143 = 4;
                v142 = v198;
              }
              else
              {
                if (!v199)
                {
LABEL_270:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(_QWORD *)a1 + 200))(&v164, a1);
                  v144 = v164;
                  if (v165 == v164)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v145 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v145);
                  MIL::IRTensorValueType::MakeUInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v144, (uint64_t *)&v189);
                  v146 = v189;
                  v189 = 0;
                  if (v146)
                    (*((void (**)(void **))*v146 + 1))(v146);
                  goto LABEL_283;
                }
                v143 = 5;
              }
              (*(void (**)(void))(*v142 + 8 * v143))();
              goto LABEL_270;
            }
            v106 = (*((uint64_t (**)(void))*v211 + 2))();
          }
          v199 = (_BYTE *)v106;
          goto LABEL_265;
        }
        if (v83 != 14)
        {
          if (v83 != 9)
          {
            if (v83 == 4)
            {
              v90 = MIL::IRTensorValue::GetDataView<signed char>();
              v91 = (uint64_t)v211;
              if (v211)
              {
                if (v211 == (void **)&v208)
                {
                  v195 = v194;
                  (*((void (**)(char **, _BYTE *))v208 + 3))(&v208, v194);
LABEL_225:
                  MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(v90, (uint64_t *)&v180, v38, v159, &Data, (uint64_t)&v177, (unint64_t *)&v183, v157, (uint64_t)v167, v162, v163, v161, (uint64_t)v175, (MIL::Fp16 **)v174, 0, v155, v87, 0, v160,
                    (uint64_t)v194);
                  v122 = v195;
                  if (v195 == v194)
                  {
                    v123 = 4;
                    v122 = v194;
                  }
                  else
                  {
                    if (!v195)
                    {
LABEL_230:
                      (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(_QWORD *)a1 + 200))(&v164, a1);
                      v124 = v164;
                      if (v165 == v164)
                        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                      v125 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                      MIL::IRValueType::AsTensorType(v125);
                      MIL::IRTensorValueType::MakeFloat16Value();
                      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v124, (uint64_t *)&v189);
                      v126 = v189;
                      v189 = 0;
                      if (v126)
                        (*((void (**)(void **))*v126 + 1))(v126);
                      goto LABEL_283;
                    }
                    v123 = 5;
                  }
                  (*(void (**)(void))(*v122 + 8 * v123))();
                  goto LABEL_230;
                }
                v91 = (*((uint64_t (**)(void))*v211 + 2))();
              }
              v195 = (_BYTE *)v91;
              goto LABEL_225;
            }
LABEL_167:
            v94 = "Unimplemented output dtype";
            goto LABEL_168;
          }
          v95 = MIL::IRTensorValue::GetDataView<signed char>();
          v96 = (uint64_t)v211;
          if (v211)
          {
            if (v211 == (void **)&v208)
            {
              v191 = v190;
              (*((void (**)(char **, _BYTE *))v208 + 3))(&v208, v190);
LABEL_195:
              MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(v95, (uint64_t *)&v180, v38, v159, &Data, (uint64_t)&v177, (unint64_t *)&v183, v157, (unint64_t *)v167, v162, v163, v161, (uint64_t)v175, (MIL::Fp16 **)v174, 0, v155, v87, 0, v160,
                (uint64_t)v190);
              v107 = v191;
              if (v191 == v190)
              {
                v108 = 4;
                v107 = v190;
              }
              else
              {
                if (!v191)
                {
LABEL_200:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(_QWORD *)a1 + 200))(&v164, a1);
                  v109 = v164;
                  if (v165 == v164)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v110 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v110);
                  MIL::IRTensorValueType::MakeInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v109, (uint64_t *)&v189);
                  v111 = v189;
                  v189 = 0;
                  if (v111)
                    (*((void (**)(void **))*v111 + 1))(v111);
                  goto LABEL_283;
                }
                v108 = 5;
              }
              (*(void (**)(void))(*v107 + 8 * v108))();
              goto LABEL_200;
            }
            v96 = (*((uint64_t (**)(void))*v211 + 2))();
          }
          v191 = (_BYTE *)v96;
          goto LABEL_195;
        }
        v97 = MIL::IRTensorValue::GetDataView<signed char>();
        v98 = (uint64_t)v211;
        if (v211)
        {
          if (v211 == (void **)&v208)
          {
            v193 = v192;
            (*((void (**)(char **, _BYTE *))v208 + 3))(&v208, v192);
LABEL_205:
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(v97, (uint64_t *)&v180, v38, v159, &Data, (uint64_t)&v177, (unint64_t *)&v183, v157, (unint64_t *)v167, v162, v163, v161, (uint64_t)v175, (MIL::Fp16 **)v174, 0, v155, v87, 0, v160,
              (uint64_t)v192);
            v112 = v193;
            if (v193 == v192)
            {
              v113 = 4;
              v112 = v192;
            }
            else
            {
              if (!v193)
              {
LABEL_210:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(_QWORD *)a1 + 200))(&v164, a1);
                v114 = v164;
                if (v165 == v164)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v115 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v115);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v114, (uint64_t *)&v189);
                v116 = v189;
                v189 = 0;
                if (v116)
                  (*((void (**)(void **))*v116 + 1))(v116);
                goto LABEL_283;
              }
              v113 = 5;
            }
            (*(void (**)(void))(*v112 + 8 * v113))();
            goto LABEL_210;
          }
          v98 = (*((uint64_t (**)(void))*v211 + 2))();
        }
        v193 = (_BYTE *)v98;
        goto LABEL_205;
      }
      if (v83 != 14)
      {
        if (v83 != 9)
        {
          if (v83 != 4)
            goto LABEL_167;
          v92 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v93 = (uint64_t)v211;
          if (v211)
          {
            if (v211 == (void **)&v208)
            {
              v207 = v206;
              (*((void (**)(char **, _BYTE *))v208 + 3))(&v208, v206);
LABEL_255:
              MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(v92, (uint64_t *)&v180, v38, v159, &Data, (uint64_t)&v177, (unint64_t *)&v183, v157, (uint64_t)v167, v162, v163, v161, (uint64_t)v175, (MIL::Fp16 **)v174, 0, v155, v87, 0, v160,
                (uint64_t)v206);
              v137 = v207;
              if (v207 == v206)
              {
                v138 = 4;
                v137 = v206;
              }
              else
              {
                if (!v207)
                {
LABEL_260:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(_QWORD *)a1 + 200))(&v164, a1);
                  v139 = v164;
                  if (v165 == v164)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v140 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v140);
                  MIL::IRTensorValueType::MakeFloat16Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v139, (uint64_t *)&v189);
                  v141 = v189;
                  v189 = 0;
                  if (v141)
                    (*((void (**)(void **))*v141 + 1))(v141);
                  goto LABEL_283;
                }
                v138 = 5;
              }
              (*(void (**)(void))(*v137 + 8 * v138))();
              goto LABEL_260;
            }
            v93 = (*((uint64_t (**)(void))*v211 + 2))();
          }
          v207 = (_BYTE *)v93;
          goto LABEL_255;
        }
        v99 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v100 = (uint64_t)v211;
        if (v211)
        {
          if (v211 == (void **)&v208)
          {
            v203 = v202;
            (*((void (**)(char **, _BYTE *))v208 + 3))(&v208, v202);
LABEL_215:
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(v99, (uint64_t *)&v180, v38, v159, &Data, (uint64_t)&v177, (unint64_t *)&v183, v157, (unint64_t *)v167, v162, v163, v161, (uint64_t)v175, (MIL::Fp16 **)v174, 0, v155, v87, 0, v160,
              (uint64_t)v202);
            v117 = v203;
            if (v203 == v202)
            {
              v118 = 4;
              v117 = v202;
            }
            else
            {
              if (!v203)
              {
LABEL_220:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(_QWORD *)a1 + 200))(&v164, a1);
                v119 = v164;
                if (v165 == v164)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v120 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v120);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v119, (uint64_t *)&v189);
                v121 = v189;
                v189 = 0;
                if (v121)
                  (*((void (**)(void **))*v121 + 1))(v121);
                goto LABEL_283;
              }
              v118 = 5;
            }
            (*(void (**)(void))(*v117 + 8 * v118))();
            goto LABEL_220;
          }
          v100 = (*((uint64_t (**)(void))*v211 + 2))();
        }
        v203 = (_BYTE *)v100;
        goto LABEL_215;
      }
      v103 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v104 = (uint64_t)v211;
      if (v211)
      {
        if (v211 == (void **)&v208)
        {
          v205 = v204;
          (*((void (**)(char **, _BYTE *))v208 + 3))(&v208, v204);
LABEL_245:
          MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(v103, (uint64_t *)&v180, v38, v159, &Data, (uint64_t)&v177, (unint64_t *)&v183, v157, (unint64_t *)v167, v162, v163, v161, (uint64_t)v175, (MIL::Fp16 **)v174, 0, v155, v87, 0, v160,
            (uint64_t)v204);
          v132 = v205;
          if (v205 == v204)
          {
            v133 = 4;
            v132 = v204;
          }
          else
          {
            if (!v205)
            {
LABEL_250:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(_QWORD *)a1 + 200))(&v164, a1);
              v134 = v164;
              if (v165 == v164)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v135 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v135);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v134, (uint64_t *)&v189);
              v136 = v189;
              v189 = 0;
              if (v136)
                (*((void (**)(void **))*v136 + 1))(v136);
              goto LABEL_283;
            }
            v133 = 5;
          }
          (*(void (**)(void))(*v132 + 8 * v133))();
          goto LABEL_250;
        }
        v104 = (*((uint64_t (**)(void))*v211 + 2))();
      }
      v205 = (_BYTE *)v104;
      goto LABEL_245;
    }
    v40 = "No value for dense_kernel";
  }
  else
  {
    v40 = "No value for x";
  }
  *(_DWORD *)a3 = 2;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v40);
LABEL_298:
  if (v174[0])
  {
    v174[1] = v174[0];
    operator delete(v174[0]);
  }
  if (v175[0])
  {
    v175[1] = v175[0];
    operator delete(v175[0]);
  }
LABEL_302:
  MEMORY[0x20BCFEAEC](&v176);
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if ((_QWORD)v187)
  {
    *((_QWORD *)&v187 + 1) = v187;
    operator delete((void *)v187);
  }
  if (*((_QWORD *)&v185 + 1))
  {
    *(_QWORD *)&v186 = *((_QWORD *)&v185 + 1);
    operator delete(*((void **)&v185 + 1));
  }
  v20 = (void *)v184;
  if ((_QWORD)v184)
  {
    *((_QWORD *)&v184 + 1) = v184;
    goto LABEL_312;
  }
}

void sub_2068EFDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a65;
  void *a67;
  void *v67;
  uint64_t v68;
  _QWORD *v70;
  uint64_t v71;

  if (__p)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  v70 = *(_QWORD **)(v68 - 112);
  if (v70 == (_QWORD *)(v68 - 136))
  {
    v71 = 4;
    v70 = (_QWORD *)(v68 - 136);
  }
  else
  {
    if (!v70)
      goto LABEL_10;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_10:
  if (a43 < 0)
    operator delete(a38);
  if (a44)
    operator delete(a44);
  if (v67)
    operator delete(v67);
  if (a47)
    operator delete(a47);
  if (a50)
    operator delete(a50);
  MEMORY[0x20BCFEAEC](&a53);
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  ANEMachineIR::Validators::NeConvParameterValues::~NeConvParameterValues((ANEMachineIR::Validators::NeConvParameterValues *)&a67);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::NeConvCpu::~NeConvCpu(MIL::ANEMachineIR::Interpreter::NeConvCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

void MilTranslator::OpTranslator::TranslateLinear(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  MIL::IRValueType *ParameterType;
  const MIL::IRTensorValueType *v10;
  ANEMachineIR::Utils *v11;
  uint64_t v12;
  MIL::IRValueType *v13;
  const MIL::IRTensorValueType *v14;
  ANEMachineIR::Utils *v15;
  MIL::IRNamedValueType ***v16;
  MIL::IRNamedValueType **v17;
  MIL::IRNamedValueType *v18;
  MIL::IRNamedValueType *v19;
  unint64_t *v20;
  unint64_t v21;
  MIL::IRValueType *Type;
  uint64_t *LocationPtr;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  MIL::IRValueType *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  void *v42;
  std::string *v43;
  std::string::size_type v44;
  uint64_t v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t Name;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *size;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string v69;
  std::string v70;
  std::__shared_weak_count *v71;
  std::string v72;
  void *v73;
  char v74;
  std::__shared_weak_count *v75;
  std::string v76;
  void *v77;
  char v78;
  std::__shared_weak_count *v79;
  void *v80;
  char v81;
  std::string v82;
  std::string v83;
  std::string __p;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  void *v90;
  void *v91;
  char v92;
  std::string v93;
  MIL::IRNamedValueType *v94;
  std::__shared_weak_count *v95;
  void *v96[3];
  std::string v97;
  std::string v98;
  _BYTE *v99;
  _BYTE *v100;
  std::string v101;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  v6 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, _QWORD))(*(_QWORD *)a2 + 120))(a2, &__p, 0);
  v7 = v6;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6)
      goto LABEL_3;
LABEL_6:
    *(_DWORD *)a3 = 4;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Immediate value inputs not handled.");
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7)
    goto LABEL_6;
LABEL_3:
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v101.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v11 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ANEMachineIR::Utils::GetStaticTensorShape(v11, v10, (uint64_t)&v99);
  v12 = v100 - v99;
  if (v100 - v99 == 16)
  {
    MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, (uint64_t)&v101, v11, &v98);
    memset(&v97, 0, sizeof(v97));
    std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
    MilTranslator::WeightTranslator::TargetProgramConstOpName((uint64_t)this + 144, (uint64_t)a2, (uint64_t)&__p, 1, 1uLL, (uint64_t)&v97, (_DWORD *)a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (!*(_DWORD *)a3)
    {
      if (*(char *)(a3 + 31) < 0)
        operator delete(*(void **)(a3 + 8));
      std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
      v13 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
      v15 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ANEMachineIR::Utils::GetStaticTensorShape(v15, v14, (uint64_t)v96);
      v16 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 176))(a2);
      v17 = *v16;
      v18 = **v16;
      v19 = v17[1];
      v94 = v18;
      v95 = (std::__shared_weak_count *)v19;
      if (v19)
      {
        v20 = (unint64_t *)((char *)v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v18);
      MIL::IRValueType::AsTensorType(Type);
      memset(&v93, 0, sizeof(v93));
      __p.__r_.__value_.__s.__data_[6] = 0;
      __p.__r_.__value_.__s.__data_[8] = 0;
      v85 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      LOBYTE(v90) = 0;
      v92 = 0;
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      __p.__r_.__value_.__s.__data_[4] = 0;
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      v24 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
      (*(void (**)(std::string *__return_ptr, const MIL::IROperation *))(*(_QWORD *)a2 + 200))(&v82, a2);
      v25 = v82.__r_.__value_.__r.__words[0];
      if (v82.__r_.__value_.__l.__size_ == v82.__r_.__value_.__r.__words[0])
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v26 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 176))(a2);
      if (*(_QWORD *)(v26 + 8) == *(_QWORD *)v26)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v27 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v26);
      v28 = MIL::IRValueType::AsTensorType(v27);
      ANEMachineIR::Validators::ValidateNeMatmul(LocationPtr, v24, (uint64_t)v11, v15, v25, v28, (char *)&__p, (MIL::ValidationResult *)&v83);
      v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v83))
      {
        std::string::basic_string[abi:ne180100]<0>(&v80, "ne_matmul");
        MilTranslator::OpTranslator::AddOperation((uint64_t)this);
        if (v81 < 0)
          operator delete(v80);
        std::string::basic_string[abi:ne180100]<0>(&v77, "x");
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v76, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
        else
          v76 = v98;
        MIL::Builder::OperationBuilder::AddInput();
        v52 = v79;
        if (v79)
        {
          p_shared_owners = (unint64_t *)&v79->__shared_owners_;
          do
            v54 = __ldaxr(p_shared_owners);
          while (__stlxr(v54 - 1, p_shared_owners));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
        if (v78 < 0)
          operator delete(v77);
        std::string::basic_string[abi:ne180100]<0>(&v73, "y");
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v72, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
        else
          v72 = v97;
        MIL::Builder::OperationBuilder::AddInput();
        v55 = v75;
        if (v75)
        {
          v56 = (unint64_t *)&v75->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
        if (v74 < 0)
          operator delete(v73);
        Name = MIL::IRNamedValueType::GetName(v94);
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
        }
        else
        {
          v59 = *(_OWORD *)Name;
          v70.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v59;
        }
        MIL::Builder::OperationBuilder::AddOutput();
        v60 = v71;
        if (v71)
        {
          v61 = (unint64_t *)&v71->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        *(_DWORD *)a3 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
        size = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
        if (v82.__r_.__value_.__l.__size_)
        {
          v64 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
      }
      else
      {
        MIL::MILResult::GetMessage((MIL::MILResult *)&v83);
        std::operator+<char>();
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = &v82;
        else
          v43 = (std::string *)v82.__r_.__value_.__r.__words[0];
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        else
          v44 = v82.__r_.__value_.__l.__size_;
        std::string::append(&v93, (const std::string::value_type *)v43, v44);
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
        *(_DWORD *)a3 = 6;
        v45 = a3 + 8;
        (*(void (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
        std::operator+<char>();
        v46 = std::string::append(&v69, "', violations: ");
        v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v82.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = &v93;
        else
          v48 = (std::string *)v93.__r_.__value_.__r.__words[0];
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
        else
          v49 = v93.__r_.__value_.__l.__size_;
        v50 = std::string::append(&v82, (const std::string::value_type *)v48, v49);
        v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        *(_QWORD *)(v45 + 16) = *((_QWORD *)&v50->__r_.__value_.__l + 2);
        *(_OWORD *)v45 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
      }
      MEMORY[0x20BCFEAEC](&v83);
      if (v92 && v90)
      {
        v91 = v90;
        operator delete(v90);
      }
      if (v85 && __p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      v66 = v95;
      if (v95)
      {
        v67 = (unint64_t *)&v95->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (v96[0])
      {
        v96[1] = v96[0];
        operator delete(v96[0]);
      }
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_117;
    v42 = (void *)v98.__r_.__value_.__r.__words[0];
  }
  else
  {
    *(_DWORD *)a3 = 6;
    v29 = a3 + 8;
    std::to_string(&v97, v12 >> 3);
    v30 = std::string::insert(&v97, 0, "Unsupported input rank ");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v98, " for op '");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
    v35 = *(char *)(v34 + 23);
    if (v35 >= 0)
      v36 = (const std::string::value_type *)v34;
    else
      v36 = *(const std::string::value_type **)v34;
    if (v35 >= 0)
      v37 = *(unsigned __int8 *)(v34 + 23);
    else
      v37 = *(_QWORD *)(v34 + 8);
    v38 = std::string::append(&v83, v36, v37);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = std::string::append(&__p, "'");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    *(_QWORD *)(v29 + 16) = *((_QWORD *)&v40->__r_.__value_.__l + 2);
    *(_OWORD *)v29 = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_117;
    v42 = (void *)v97.__r_.__value_.__r.__words[0];
  }
  operator delete(v42);
LABEL_117:
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
}

void sub_2068F0B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  char a70;
  uint64_t v70;
  void *v72;
  void *v73;

  if (a27 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  MEMORY[0x20BCFEAEC](&a46);
  ANEMachineIR::Validators::NeMatmulParamValues::~NeMatmulParamValues((ANEMachineIR::Validators::NeMatmulParamValues *)&a54);
  if (a70 < 0)
    operator delete(a65);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v70 - 240);
  v72 = *(void **)(v70 - 224);
  if (v72)
  {
    *(_QWORD *)(v70 - 216) = v72;
    operator delete(v72);
  }
  if (*(char *)(v70 - 177) < 0)
    operator delete(*(void **)(v70 - 200));
  if (*(char *)(v70 - 153) < 0)
    operator delete(*(void **)(v70 - 176));
  v73 = *(void **)(v70 - 152);
  if (v73)
  {
    *(_QWORD *)(v70 - 144) = v73;
    operator delete(v73);
  }
  if (*(char *)(v70 - 105) < 0)
    operator delete(*(void **)(v70 - 128));
  _Unwind_Resume(a1);
}

void sub_2068F0D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
    JUMPOUT(0x2068F0D40);
  JUMPOUT(0x2068F0D44);
}

void sub_2068F0D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
    JUMPOUT(0x2068F0D30);
  JUMPOUT(0x2068F0D34);
}

void MIL::ANEMachineIR::Interpreter::PeReduceCpu::Run(MIL::IROperation *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void *v20;
  uint64_t InterpretedTensorValue;
  uint64_t v22;
  uint64_t v23;
  int v24;
  MIL::IRValueType *OutputType;
  uint64_t v26;
  int v27;
  ANEMachineIR::Utils *v28;
  const MIL::IRTensorValueType *v29;
  MIL::IRValueType *v30;
  ANEMachineIR::Utils *v31;
  const MIL::IRTensorValueType *v32;
  MIL::IRValueType *v33;
  uint64_t v34;
  size_t v35;
  uint64_t ParameterValue;
  float v37;
  float *v38;
  uint64_t v39;
  float v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  std::string *v47;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  MIL::IRValueType *v58;
  void **v59;
  uint64_t v60;
  unsigned __int8 *v61;
  MIL::IRValueType *v62;
  void **v63;
  uint64_t v64;
  unsigned __int8 *v65;
  MIL::IRValueType *v66;
  void **v67;
  uint64_t v68;
  unsigned __int8 *v69;
  MIL::IRValueType *v70;
  void **v71;
  uint64_t v72;
  unsigned __int8 *v73;
  MIL::IRValueType *v74;
  void **v75;
  uint64_t v76;
  unsigned __int8 *v77;
  MIL::IRValueType *v78;
  void **v79;
  uint64_t v80;
  unsigned __int8 *v81;
  MIL::IRValueType *v82;
  void **v83;
  uint64_t Data;
  unsigned __int8 *v85;
  MIL::IRValueType *v86;
  void **v87;
  uint64_t v88;
  unsigned __int8 *v89;
  MIL::IRValueType *v90;
  void **v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  std::string __p;
  void *v95[2];
  char v96;
  std::string v97;
  std::string v98;
  std::string v99;
  void **v100;

  v6 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(v6 + 8) != 9)
      goto LABEL_10;
    v6 = *(_QWORD *)v6;
  }
  else if (v7 != 9)
  {
    goto LABEL_10;
  }
  if (*(_QWORD *)v6 != 0x63756465725F6570 || *(_BYTE *)(v6 + 8) != 101)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    v9 = a3 + 8;
    std::string::basic_string[abi:ne180100]<0>(&v97, "pe_reduce");
    v10 = std::string::insert(&v97, 0, "Expected ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v98, " op. Got ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
    v15 = *(char *)(v14 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)v14;
    else
      v16 = *(const std::string::value_type **)v14;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v14 + 23);
    else
      v17 = *(_QWORD *)(v14 + 8);
    v18 = std::string::append(&v99, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)v9 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v97.__r_.__value_.__r.__words[0];
LABEL_22:
      operator delete(v20);
      return;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v99, "x");
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v99);
  v22 = InterpretedTensorValue;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v99.__r_.__value_.__l.__data_);
    if (v22)
      goto LABEL_26;
LABEL_60:
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "No value for x");
    return;
  }
  if (!InterpretedTensorValue)
    goto LABEL_60;
LABEL_26:
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 88))(v23);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v26 = MIL::IRValueType::AsTensorType(OutputType);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
  v28 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
  ANEMachineIR::Utils::GetStaticTensorShape(v28, v29, (uint64_t)&v99);
  v30 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v31 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v30);
  ANEMachineIR::Utils::GetStaticTensorShape(v31, v32, (uint64_t)&v98);
  v33 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v34 = MIL::IRValueType::AsTensorType(v33);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
  std::string::basic_string[abi:ne180100]<0>(&v97, "reduction_scale");
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  v37 = 1.0;
  if (ParameterValue)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue))
    {
      v38 = (float *)MEMORY[0x20BCFEEAC]();
      if (v38)
        v37 = *v38;
    }
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v97, "reduction_epsilon");
  v39 = MIL::IROperation::TryGetParameterValue();
  v40 = 0.0;
  if (v39)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39))
    {
      v41 = (float *)MEMORY[0x20BCFEEAC]();
      if (v41)
        v40 = *v41;
    }
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v95, "reduction");
  std::string::basic_string[abi:ne180100]<0>(&__p, "mean");
  v42 = MIL::IROperation::TryGetParameterValue();
  if (v42 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42) && (v43 = MEMORY[0x20BCFEE88]()) != 0)
  {
    if (*(char *)(v43 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
    }
    else
    {
      v44 = *(_OWORD *)v43;
      v97.__r_.__value_.__r.__words[2] = *(_QWORD *)(v43 + 16);
      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v44;
    }
  }
  else
  {
    v97 = __p;
    memset(&__p, 0, sizeof(__p));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v96 < 0)
    operator delete(v95[0]);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v97.__r_.__value_.__l.__size_ == 3)
    {
      v47 = (std::string *)v97.__r_.__value_.__r.__words[0];
      if (*(_WORD *)v97.__r_.__value_.__l.__data_ != 26989 || *(_BYTE *)(v97.__r_.__value_.__r.__words[0] + 2) != 110)
      {
        if (*(_WORD *)v97.__r_.__value_.__l.__data_ != 24941 || *(_BYTE *)(v97.__r_.__value_.__r.__words[0] + 2) != 120)
          goto LABEL_70;
LABEL_74:
        v52 = 2;
        goto LABEL_81;
      }
LABEL_73:
      v52 = 1;
      goto LABEL_81;
    }
LABEL_72:
    v52 = 0;
    goto LABEL_81;
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) != 3)
    goto LABEL_72;
  if (LOWORD(v97.__r_.__value_.__l.__data_) == 26989 && v97.__r_.__value_.__s.__data_[2] == 110)
    goto LABEL_73;
  if (LOWORD(v97.__r_.__value_.__l.__data_) == 24941 && v97.__r_.__value_.__s.__data_[2] == 120)
    goto LABEL_74;
  v47 = &v97;
LABEL_70:
  v50 = bswap32(LOWORD(v47->__r_.__value_.__l.__data_)) >> 16;
  if (v50 == 29557)
  {
    v51 = v47->__r_.__value_.__s.__data_[2] - 109;
  }
  else if (v50 < 0x7375)
  {
    v51 = -1;
  }
  else
  {
    v51 = 1;
  }
  if (v51)
    v52 = 0;
  else
    v52 = 3;
LABEL_81:
  std::string::basic_string[abi:ne180100]<0>(v95, "reduction_post_processing");
  v53 = MIL::IROperation::TryGetParameterValue();
  if (v96 < 0)
    operator delete(v95[0]);
  if (v53)
  {
    v54 = "post_processing not implemented.";
    v55 = 5;
LABEL_113:
    *(_DWORD *)a3 = v55;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v54);
    goto LABEL_114;
  }
  if (v24 == 14)
  {
    switch(v27)
    {
      case 14:
        Data = MIL::IRTensorValue::GetDataView<unsigned char>();
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v92, a1);
        v85 = v92;
        if (v93 == v92)
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        v86 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v86);
        MIL::IRTensorValueType::MakeUInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v85, (uint64_t *)&v100);
        v87 = v100;
        v100 = 0;
        if (v87)
          (*((void (**)(void **))*v87 + 1))(v87);
        goto LABEL_143;
      case 9:
        v76 = MIL::IRTensorValue::GetDataView<unsigned char>();
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v92, a1);
        v77 = v92;
        if (v93 == v92)
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        v78 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v78);
        MIL::IRTensorValueType::MakeInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v77, (uint64_t *)&v100);
        v79 = v100;
        v100 = 0;
        if (v79)
          (*((void (**)(void **))*v79 + 1))(v79);
        goto LABEL_143;
      case 4:
        v64 = MIL::IRTensorValue::GetDataView<unsigned char>();
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v92, a1);
        v65 = v92;
        if (v93 == v92)
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        v66 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v66);
        MIL::IRTensorValueType::MakeFloat16Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v65, (uint64_t *)&v100);
        v67 = v100;
        v100 = 0;
        if (v67)
          (*((void (**)(void **))*v67 + 1))(v67);
        goto LABEL_143;
    }
    goto LABEL_111;
  }
  if (v24 == 9)
  {
    switch(v27)
    {
      case 14:
        v72 = MIL::IRTensorValue::GetDataView<signed char>();
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v92, a1);
        v73 = v92;
        if (v93 == v92)
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        v74 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v74);
        MIL::IRTensorValueType::MakeUInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v73, (uint64_t *)&v100);
        v75 = v100;
        v100 = 0;
        if (v75)
          (*((void (**)(void **))*v75 + 1))(v75);
        goto LABEL_143;
      case 9:
        v68 = MIL::IRTensorValue::GetDataView<signed char>();
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v92, a1);
        v69 = v92;
        if (v93 == v92)
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        v70 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v70);
        MIL::IRTensorValueType::MakeInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v69, (uint64_t *)&v100);
        v71 = v100;
        v100 = 0;
        if (v71)
          (*((void (**)(void **))*v71 + 1))(v71);
        goto LABEL_143;
      case 4:
        v60 = MIL::IRTensorValue::GetDataView<signed char>();
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v92, a1);
        v61 = v92;
        if (v93 == v92)
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        v62 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v62);
        MIL::IRTensorValueType::MakeFloat16Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v61, (uint64_t *)&v100);
        v63 = v100;
        v100 = 0;
        if (v63)
          (*((void (**)(void **))*v63 + 1))(v63);
        goto LABEL_143;
    }
    goto LABEL_111;
  }
  if (v24 != 4)
  {
    v54 = "Unimplemented input dtype";
LABEL_112:
    v55 = 3;
    goto LABEL_113;
  }
  if (v27 == 14)
  {
    v88 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v92, a1);
    v89 = v92;
    if (v93 == v92)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v90 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    MIL::IRValueType::AsTensorType(v90);
    MIL::IRTensorValueType::MakeUInt8Value();
    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v89, (uint64_t *)&v100);
    v91 = v100;
    v100 = 0;
    if (v91)
      (*((void (**)(void **))*v91 + 1))(v91);
    goto LABEL_143;
  }
  if (v27 == 9)
  {
    v80 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v92, a1);
    v81 = v92;
    if (v93 == v92)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v82 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    MIL::IRValueType::AsTensorType(v82);
    MIL::IRTensorValueType::MakeInt8Value();
    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v81, (uint64_t *)&v100);
    v83 = v100;
    v100 = 0;
    if (v83)
      (*((void (**)(void **))*v83 + 1))(v83);
    goto LABEL_143;
  }
  if (v27 != 4)
  {
LABEL_111:
    v54 = "Unimplemented output dtype";
    goto LABEL_112;
  }
  v56 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v92, a1);
  v57 = v92;
  if (v93 == v92)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v58 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  MIL::IRValueType::AsTensorType(v58);
  MIL::IRTensorValueType::MakeFloat16Value();
  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v57, (uint64_t *)&v100);
  v59 = v100;
  v100 = 0;
  if (v59)
    (*((void (**)(void **))*v59 + 1))(v59);
LABEL_143:
  v100 = (void **)&v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v100);
  *(_DWORD *)a3 = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
  if (v95[0])
  {
    v95[1] = v95[0];
    operator delete(v95[0]);
  }
LABEL_114:
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (v98.__r_.__value_.__r.__words[0])
  {
    v98.__r_.__value_.__l.__size_ = v98.__r_.__value_.__r.__words[0];
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  v20 = (void *)v99.__r_.__value_.__r.__words[0];
  if (v99.__r_.__value_.__r.__words[0])
  {
    v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
    goto LABEL_22;
  }
}

void sub_2068F19FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  void *v41;
  char *v42;
  void *v43;

  if (__p)
    operator delete(__p);
  if (a2 == 1)
  {
    v41 = __cxa_begin_catch(exception_object);
    *(_DWORD *)v37 = 4;
    v42 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v37 + 8), v42);
    __cxa_end_catch();
    JUMPOUT(0x2068F1518);
  }
  if (a30 < 0)
    operator delete(a25);
  if (a32)
    operator delete(a32);
  v43 = *(void **)(v38 - 128);
  if (v43)
  {
    *(_QWORD *)(v38 - 120) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValuePeReduce<MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Float;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  long double v41;
  double v42;
  long double v43;
  double v44;
  __int16 v45;
  std::runtime_error *exception;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *__p;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int __e[4];
  char v75[16];

  *(_QWORD *)v75 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a6, a2);
  v14 = *(const void **)a3;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = (v15 - *(_QWORD *)a3) >> 3;
  if (v16 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  v71 = 0;
  v72 = 0;
  v73 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v71, v14, v15, v16);
  __p = 0;
  v69 = 0;
  v70 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v71, (uint64_t)(v71 + 8), (char *)__e, v75, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v75, 2);
  }
  else if (v16 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v71, v71 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  v17 = *(_QWORD *)v71;
  v18 = *((_QWORD *)v71 + 1);
  v19 = *((_QWORD *)v71 + 2);
  Float = (uint64_t)__p;
  v21 = *((_QWORD *)__p + 1);
  v22 = *((_QWORD *)__p + 2);
  v23 = *((_QWORD *)__p + 3);
  v24 = *((_QWORD *)__p + 4);
  if (*(_QWORD *)__p == *(_QWORD *)v71)
    v17 = 1;
  if (v21 == v18)
    v18 = 1;
  if (v22 == v19)
    v19 = 1;
  if (v23 == *((_QWORD *)v71 + 3))
    v25 = 1;
  else
    v25 = *((_QWORD *)v71 + 3);
  if (v24 == *((_QWORD *)v71 + 4))
    v26 = 1;
  else
    v26 = *((_QWORD *)v71 + 4);
  v53 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_51;
  v27 = 0;
  v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  v60 = v17;
  v50 = *((_QWORD *)__p + 1);
  v51 = v18;
  v52 = *((_QWORD *)__p + 2);
  v54 = v19;
  v55 = *((_QWORD *)__p + 3);
  v47 = v17;
  v48 = *((_QWORD *)__p + 4);
  v49 = v26;
  do
  {
    if (v24)
    {
      v61 = 0;
      v57 = v27 + v17;
      v63 = v26;
      v58 = v27;
      do
      {
        if (v21)
        {
          v64 = 0;
          v59 = v61 + v26;
          v66 = v18;
          do
          {
            if (v22)
            {
              v67 = 0;
              v62 = v64 + v18;
              v29 = v19;
              do
              {
                if (v23)
                {
                  v30 = 0;
                  v65 = v67 + v19;
                  do
                  {
                    v31 = 0.0;
                    if (v27 < v57)
                    {
                      v32 = v58;
                      do
                      {
                        v33 = v61;
                        if (v61 < v59)
                        {
                          do
                          {
                            v34 = v64;
                            if (v64 < v62)
                            {
                              do
                              {
                                v35 = v67;
                                if (v67 < v65)
                                {
                                  do
                                  {
                                    if (v30 < v30 + v25)
                                    {
                                      v36 = 0;
                                      do
                                      {
                                        LOWORD(__e[0]) = *(_WORD *)(a1
                                                                  + 2
                                        Float = MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                        v31 = v31 + v37;
                                        ++v36;
                                      }
                                      while (v25 != v36);
                                    }
                                    ++v35;
                                  }
                                  while (v35 != v29);
                                }
                                ++v34;
                              }
                              while (v34 != v66);
                            }
                            ++v33;
                          }
                          while (v33 != v63);
                        }
                        ++v32;
                      }
                      while (v32 != v60);
                    }
                    if (a5)
                    {
                      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(exception, "Function not implemented.");
                      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                    }
                    v38 = (float)(v31 / v28) * a7;
                    v39 = 0.0;
                    v40 = 0.0;
                    v27 = v58;
                    if (v38 != 0.0)
                    {
                      __e[0] = 0;
                      v41 = frexp(v38, __e);
                      v42 = ldexp(v41, 11);
                      v40 = ldexp(round(v42), __e[0] - 11);
                    }
                    if ((float)(v40 + a8) != 0.0)
                    {
                      __e[0] = 0;
                      v43 = frexp((float)(v40 + a8), __e);
                      v44 = ldexp(v43, 11);
                      v39 = ldexp(round(v44), __e[0] - 11);
                    }
                    v45 = MIL::Fp16::FromFloat((MIL::Fp16 *)Float, v39);
                    *(_WORD *)(*a6 + 2 * Float) = v45;
                    ++v30;
                    v19 = v54;
                    v23 = v55;
                  }
                  while (v30 != v55);
                }
                ++v29;
                v18 = v51;
                v22 = v52;
                ++v67;
              }
              while (v67 != v52);
            }
            ++v66;
            v26 = v49;
            v21 = v50;
            ++v64;
          }
          while (v64 != v50);
        }
        ++v63;
        v17 = v47;
        v24 = v48;
        ++v61;
      }
      while (v61 != v48);
    }
    ++v27;
    ++v60;
  }
  while (v27 != v53);
  Float = (uint64_t)__p;
  if (__p)
  {
LABEL_51:
    v69 = Float;
    operator delete((void *)Float);
  }
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
}

void sub_2068F2668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(_QWORD *)(v33 - 160) = v35;
    operator delete(v35);
  }
  v36 = *(void **)v32;
  if (*(_QWORD *)v32)
  {
    *(_QWORD *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValuePeReduce<unsigned char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  long double v41;
  double v42;
  int v43;
  int v44;
  long double v45;
  double v46;
  std::runtime_error *exception;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *__p;
  void *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int __e[4];
  char v76[16];

  *(_QWORD *)v76 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a2)
    std::vector<unsigned char>::__append(a6, a2);
  v14 = *(const void **)a3;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = (v15 - *(_QWORD *)a3) >> 3;
  if (v16 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  v72 = 0;
  v73 = 0;
  v74 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v72, v14, v15, v16);
  __p = 0;
  v70 = 0;
  v71 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v72, (uint64_t)(v72 + 8), (char *)__e, v76, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v76, 2);
  }
  else if (v16 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v72, v72 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  v17 = *(_QWORD *)v72;
  v18 = *((_QWORD *)v72 + 1);
  v19 = __p;
  v20 = *((_QWORD *)__p + 1);
  v21 = *((_QWORD *)__p + 2);
  v22 = *((_QWORD *)__p + 3);
  v23 = *((_QWORD *)__p + 4);
  if (*(_QWORD *)__p == *(_QWORD *)v72)
    v17 = 1;
  if (v20 == v18)
    v18 = 1;
  if (v21 == *((_QWORD *)v72 + 2))
    v24 = 1;
  else
    v24 = *((_QWORD *)v72 + 2);
  if (v22 == *((_QWORD *)v72 + 3))
    v25 = 1;
  else
    v25 = *((_QWORD *)v72 + 3);
  if (v23 == *((_QWORD *)v72 + 4))
    v26 = 1;
  else
    v26 = *((_QWORD *)v72 + 4);
  v54 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
  {
LABEL_60:
    v70 = v19;
    operator delete(v19);
    goto LABEL_61;
  }
  v27 = 0;
  v28 = (float)(unint64_t)(v18 * v17 * v24 * v25 * v26);
  v61 = v17;
  v51 = *((_QWORD *)__p + 1);
  v52 = v18;
  v53 = *((_QWORD *)__p + 2);
  v55 = v24;
  v56 = *((_QWORD *)__p + 3);
  v48 = v17;
  v49 = *((_QWORD *)__p + 4);
  v50 = v26;
  do
  {
    if (v23)
    {
      v62 = 0;
      v58 = v27 + v17;
      v64 = v26;
      v59 = v27;
      while (!v20)
      {
LABEL_57:
        ++v64;
        v17 = v48;
        v23 = v49;
        if (++v62 == v49)
          goto LABEL_58;
      }
      v65 = 0;
      v60 = v62 + v26;
      v67 = v18;
      while (!v21)
      {
LABEL_56:
        ++v67;
        v26 = v50;
        v20 = v51;
        if (++v65 == v51)
          goto LABEL_57;
      }
      v68 = 0;
      v63 = v65 + v18;
      v29 = v24;
      while (!v22)
      {
LABEL_55:
        ++v29;
        v18 = v52;
        v21 = v53;
        if (++v68 == v53)
          goto LABEL_56;
      }
      v30 = 0;
      v66 = v68 + v24;
      while (1)
      {
        v31 = 0.0;
        if (v27 < v58)
        {
          v32 = v59;
          do
          {
            v33 = v62;
            if (v62 < v60)
            {
              do
              {
                v34 = v65;
                if (v65 < v63)
                {
                  do
                  {
                    v35 = v68;
                    if (v68 < v66)
                    {
                      do
                      {
                        if (v30 < v30 + v25)
                        {
                          v36 = 0;
                          do
                          {
                            LOWORD(__e[0]) = *(_WORD *)(a1
                                                      + 2
                            MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                            v31 = v31 + v37;
                            ++v36;
                          }
                          while (v25 != v36);
                        }
                        ++v35;
                      }
                      while (v35 != v29);
                    }
                    ++v34;
                  }
                  while (v34 != v67);
                }
                ++v33;
              }
              while (v33 != v64);
            }
            ++v32;
          }
          while (v32 != v61);
        }
        if (a5)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Function not implemented.");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v38 = (float)(v31 / v28) * a7;
        v39 = 0.0;
        v40 = 0.0;
        v24 = v55;
        v22 = v56;
        v27 = v59;
        if (v38 != 0.0)
        {
          __e[0] = 0;
          v41 = frexp(v38, __e);
          v42 = ldexp(v41, 11);
          v40 = ldexp(round(v42), __e[0] - 11);
        }
        if ((float)(v40 + a8) == 0.0)
          break;
        __e[0] = 0;
        v45 = frexp((float)(v40 + a8), __e);
        v46 = ldexp(v45, 11);
        v39 = ldexp(round(v46), __e[0] - 11);
        if (v39 == INFINITY)
        {
          LOBYTE(v44) = -1;
        }
        else
        {
          if (v39 != -INFINITY)
            break;
          LOBYTE(v44) = 0;
        }
LABEL_54:
        if (v30 == v56)
          goto LABEL_55;
      }
      v43 = llroundf(v39);
      if (v43 >= 255)
        v43 = 255;
      v44 = v43 & ~(v43 >> 31);
      goto LABEL_54;
    }
LABEL_58:
    ++v27;
    ++v61;
  }
  while (v27 != v54);
  v19 = __p;
  if (__p)
    goto LABEL_60;
LABEL_61:
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
}

void sub_2068F2C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(_QWORD *)(v33 - 160) = v35;
    operator delete(v35);
  }
  v36 = *(void **)v32;
  if (*(_QWORD *)v32)
  {
    *(_QWORD *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValuePeReduce<signed char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  long double v41;
  double v42;
  int v43;
  char v44;
  long double v45;
  double v46;
  std::runtime_error *exception;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *__p;
  void *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int __e[4];
  char v76[16];

  *(_QWORD *)v76 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a2)
    std::vector<unsigned char>::__append(a6, a2);
  v14 = *(const void **)a3;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = (v15 - *(_QWORD *)a3) >> 3;
  if (v16 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  v72 = 0;
  v73 = 0;
  v74 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v72, v14, v15, v16);
  __p = 0;
  v70 = 0;
  v71 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v72, (uint64_t)(v72 + 8), (char *)__e, v76, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v76, 2);
  }
  else if (v16 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v72, v72 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  v17 = *(_QWORD *)v72;
  v18 = *((_QWORD *)v72 + 1);
  v19 = __p;
  v20 = *((_QWORD *)__p + 1);
  v21 = *((_QWORD *)__p + 2);
  v22 = *((_QWORD *)__p + 3);
  v23 = *((_QWORD *)__p + 4);
  if (*(_QWORD *)__p == *(_QWORD *)v72)
    v17 = 1;
  if (v20 == v18)
    v18 = 1;
  if (v21 == *((_QWORD *)v72 + 2))
    v24 = 1;
  else
    v24 = *((_QWORD *)v72 + 2);
  if (v22 == *((_QWORD *)v72 + 3))
    v25 = 1;
  else
    v25 = *((_QWORD *)v72 + 3);
  if (v23 == *((_QWORD *)v72 + 4))
    v26 = 1;
  else
    v26 = *((_QWORD *)v72 + 4);
  v54 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
  {
LABEL_62:
    v70 = v19;
    operator delete(v19);
    goto LABEL_63;
  }
  v27 = 0;
  v28 = (float)(unint64_t)(v18 * v17 * v24 * v25 * v26);
  v61 = v17;
  v51 = *((_QWORD *)__p + 1);
  v52 = v18;
  v53 = *((_QWORD *)__p + 2);
  v55 = v24;
  v56 = *((_QWORD *)__p + 3);
  v48 = v17;
  v49 = *((_QWORD *)__p + 4);
  v50 = v26;
  do
  {
    if (v23)
    {
      v62 = 0;
      v58 = v27 + v17;
      v64 = v26;
      v59 = v27;
      while (!v20)
      {
LABEL_59:
        ++v64;
        v17 = v48;
        v23 = v49;
        if (++v62 == v49)
          goto LABEL_60;
      }
      v65 = 0;
      v60 = v62 + v26;
      v67 = v18;
      while (!v21)
      {
LABEL_58:
        ++v67;
        v26 = v50;
        v20 = v51;
        if (++v65 == v51)
          goto LABEL_59;
      }
      v68 = 0;
      v63 = v65 + v18;
      v29 = v24;
      while (!v22)
      {
LABEL_57:
        ++v29;
        v18 = v52;
        v21 = v53;
        if (++v68 == v53)
          goto LABEL_58;
      }
      v30 = 0;
      v66 = v68 + v24;
      while (1)
      {
        v31 = 0.0;
        if (v27 < v58)
        {
          v32 = v59;
          do
          {
            v33 = v62;
            if (v62 < v60)
            {
              do
              {
                v34 = v65;
                if (v65 < v63)
                {
                  do
                  {
                    v35 = v68;
                    if (v68 < v66)
                    {
                      do
                      {
                        if (v30 < v30 + v25)
                        {
                          v36 = 0;
                          do
                          {
                            LOWORD(__e[0]) = *(_WORD *)(a1
                                                      + 2
                            MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                            v31 = v31 + v37;
                            ++v36;
                          }
                          while (v25 != v36);
                        }
                        ++v35;
                      }
                      while (v35 != v29);
                    }
                    ++v34;
                  }
                  while (v34 != v67);
                }
                ++v33;
              }
              while (v33 != v64);
            }
            ++v32;
          }
          while (v32 != v61);
        }
        if (a5)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Function not implemented.");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v38 = (float)(v31 / v28) * a7;
        v39 = 0.0;
        v40 = 0.0;
        v24 = v55;
        v22 = v56;
        v27 = v59;
        if (v38 != 0.0)
        {
          __e[0] = 0;
          v41 = frexp(v38, __e);
          v42 = ldexp(v41, 11);
          v40 = ldexp(round(v42), __e[0] - 11);
        }
        if ((float)(v40 + a8) == 0.0)
          break;
        __e[0] = 0;
        v45 = frexp((float)(v40 + a8), __e);
        v46 = ldexp(v45, 11);
        v39 = ldexp(round(v46), __e[0] - 11);
        if (v39 == INFINITY)
        {
          v44 = 127;
        }
        else
        {
          if (v39 != -INFINITY)
            break;
          v44 = 0x80;
        }
LABEL_56:
        if (v30 == v56)
          goto LABEL_57;
      }
      v43 = llroundf(v39);
      if (v43 >= 127)
        v43 = 127;
      if (v43 <= -128)
        v44 = 0x80;
      else
        v44 = v43;
      goto LABEL_56;
    }
LABEL_60:
    ++v27;
    ++v61;
  }
  while (v27 != v54);
  v19 = __p;
  if (__p)
    goto LABEL_62;
LABEL_63:
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
}

void sub_2068F3218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(_QWORD *)(v33 - 160) = v35;
    operator delete(v35);
  }
  v36 = *(void **)v32;
  if (*(_QWORD *)v32)
  {
    *(_QWORD *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValuePeReduce<MIL::Fp16,unsigned char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Index;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  long double v41;
  double v42;
  long double v43;
  double v44;
  __int16 v45;
  std::runtime_error *exception;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *__p;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int __e[4];
  char v74[16];

  *(_QWORD *)v74 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a6, a2);
  v14 = *(const void **)a3;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = (v15 - *(_QWORD *)a3) >> 3;
  if (v16 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  v70 = 0;
  v71 = 0;
  v72 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v70, v14, v15, v16);
  __p = 0;
  v68 = 0;
  v69 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v70, (uint64_t)(v70 + 8), (char *)__e, v74, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v74, 2);
  }
  else if (v16 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v70, v70 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  v17 = *(_QWORD *)v70;
  v18 = *((_QWORD *)v70 + 1);
  v19 = *((_QWORD *)v70 + 2);
  Index = (uint64_t)__p;
  v21 = *((_QWORD *)__p + 1);
  v22 = *((_QWORD *)__p + 2);
  v23 = *((_QWORD *)__p + 3);
  v24 = *((_QWORD *)__p + 4);
  if (*(_QWORD *)__p == *(_QWORD *)v70)
    v17 = 1;
  if (v21 == v18)
    v18 = 1;
  if (v22 == v19)
    v19 = 1;
  if (v23 == *((_QWORD *)v70 + 3))
    v25 = 1;
  else
    v25 = *((_QWORD *)v70 + 3);
  if (v24 == *((_QWORD *)v70 + 4))
    v26 = 1;
  else
    v26 = *((_QWORD *)v70 + 4);
  v53 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_51;
  v27 = 0;
  v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  v60 = v17;
  v50 = *((_QWORD *)__p + 1);
  v51 = v18;
  v52 = *((_QWORD *)__p + 2);
  v54 = v19;
  v55 = *((_QWORD *)__p + 3);
  v47 = v17;
  v48 = *((_QWORD *)__p + 4);
  v49 = v26;
  do
  {
    if (v24)
    {
      v61 = 0;
      v57 = v27 + v17;
      v63 = v26;
      v58 = v27;
      do
      {
        if (v21)
        {
          v64 = 0;
          v59 = v61 + v26;
          v65 = v18;
          do
          {
            if (v22)
            {
              v66 = 0;
              v62 = v64 + v18;
              v29 = v19;
              do
              {
                if (v23)
                {
                  v30 = 0;
                  do
                  {
                    v31 = 0.0;
                    if (v27 < v57)
                    {
                      v32 = v58;
                      do
                      {
                        v33 = v61;
                        if (v61 < v59)
                        {
                          do
                          {
                            v34 = v64;
                            if (v64 < v62)
                            {
                              do
                              {
                                v35 = v66;
                                if (v66 < v66 + v54)
                                {
                                  do
                                  {
                                    if (v30 < v30 + v25)
                                    {
                                      v36 = 0;
                                      do
                                      {
                                        LOBYTE(v37) = *(_BYTE *)(a1 + Index);
                                        v31 = v31 + (float)v37;
                                        ++v36;
                                      }
                                      while (v25 != v36);
                                    }
                                    ++v35;
                                  }
                                  while (v35 != v29);
                                }
                                ++v34;
                              }
                              while (v34 != v65);
                            }
                            ++v33;
                          }
                          while (v33 != v63);
                        }
                        ++v32;
                      }
                      while (v32 != v60);
                    }
                    if (a5)
                    {
                      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(exception, "Function not implemented.");
                      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                    }
                    v38 = (float)(v31 / v28) * a7;
                    v39 = 0.0;
                    v40 = 0.0;
                    v27 = v58;
                    if (v38 != 0.0)
                    {
                      __e[0] = 0;
                      v41 = frexp(v38, __e);
                      v42 = ldexp(v41, 11);
                      v40 = ldexp(round(v42), __e[0] - 11);
                    }
                    if ((float)(v40 + a8) != 0.0)
                    {
                      __e[0] = 0;
                      v43 = frexp((float)(v40 + a8), __e);
                      v44 = ldexp(v43, 11);
                      v39 = ldexp(round(v44), __e[0] - 11);
                    }
                    v45 = MIL::Fp16::FromFloat((MIL::Fp16 *)Index, v39);
                    *(_WORD *)(*a6 + 2 * Index) = v45;
                    ++v30;
                    v23 = v55;
                  }
                  while (v30 != v55);
                }
                ++v29;
                v18 = v51;
                v22 = v52;
                ++v66;
                v19 = v54;
              }
              while (v66 != v52);
            }
            ++v65;
            v26 = v49;
            v21 = v50;
            ++v64;
          }
          while (v64 != v50);
        }
        ++v63;
        v17 = v47;
        v24 = v48;
        ++v61;
      }
      while (v61 != v48);
    }
    ++v27;
    ++v60;
  }
  while (v27 != v53);
  Index = (uint64_t)__p;
  if (__p)
  {
LABEL_51:
    v68 = Index;
    operator delete((void *)Index);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
}

void sub_2068F37B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(_QWORD *)(v33 - 160) = v35;
    operator delete(v35);
  }
  v36 = *(void **)v32;
  if (*(_QWORD *)v32)
  {
    *(_QWORD *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValuePeReduce<unsigned char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  long double v41;
  double v42;
  int v43;
  int v44;
  long double v45;
  double v46;
  std::runtime_error *exception;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *__p;
  void *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int __e[4];
  char v75[16];

  *(_QWORD *)v75 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a2)
    std::vector<unsigned char>::__append(a6, a2);
  v14 = *(const void **)a3;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = (v15 - *(_QWORD *)a3) >> 3;
  if (v16 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  v71 = 0;
  v72 = 0;
  v73 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v71, v14, v15, v16);
  __p = 0;
  v69 = 0;
  v70 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v71, (uint64_t)(v71 + 8), (char *)__e, v75, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v75, 2);
  }
  else if (v16 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v71, v71 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  v17 = *(_QWORD *)v71;
  v18 = *((_QWORD *)v71 + 1);
  v19 = *((_QWORD *)v71 + 2);
  v20 = __p;
  v21 = *((_QWORD *)__p + 1);
  v22 = *((_QWORD *)__p + 2);
  v23 = *((_QWORD *)__p + 3);
  v24 = *((_QWORD *)__p + 4);
  if (*(_QWORD *)__p == *(_QWORD *)v71)
    v17 = 1;
  if (v21 == v18)
    v18 = 1;
  if (v22 == v19)
    v19 = 1;
  if (v23 == *((_QWORD *)v71 + 3))
    v25 = 1;
  else
    v25 = *((_QWORD *)v71 + 3);
  if (v24 == *((_QWORD *)v71 + 4))
    v26 = 1;
  else
    v26 = *((_QWORD *)v71 + 4);
  v54 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
  {
LABEL_59:
    v69 = v20;
    operator delete(v20);
    goto LABEL_60;
  }
  v27 = 0;
  v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  v61 = v17;
  v51 = *((_QWORD *)__p + 1);
  v52 = v18;
  v53 = *((_QWORD *)__p + 2);
  v55 = v19;
  v56 = *((_QWORD *)__p + 3);
  v48 = v17;
  v49 = *((_QWORD *)__p + 4);
  v50 = v26;
  do
  {
    if (v24)
    {
      v62 = 0;
      v58 = v27 + v17;
      v64 = v26;
      v59 = v27;
      while (!v21)
      {
LABEL_56:
        ++v64;
        v17 = v48;
        v24 = v49;
        if (++v62 == v49)
          goto LABEL_57;
      }
      v65 = 0;
      v60 = v62 + v26;
      v66 = v18;
      while (!v22)
      {
LABEL_55:
        ++v66;
        v26 = v50;
        v21 = v51;
        if (++v65 == v51)
          goto LABEL_56;
      }
      v67 = 0;
      v63 = v65 + v18;
      v29 = v19;
      while (!v23)
      {
LABEL_54:
        ++v29;
        v18 = v52;
        v22 = v53;
        ++v67;
        v19 = v55;
        if (v67 == v53)
          goto LABEL_55;
      }
      v30 = 0;
      while (1)
      {
        v31 = 0.0;
        if (v27 < v58)
        {
          v32 = v59;
          do
          {
            v33 = v62;
            if (v62 < v60)
            {
              do
              {
                v34 = v65;
                if (v65 < v63)
                {
                  do
                  {
                    v35 = v67;
                    if (v67 < v67 + v55)
                    {
                      do
                      {
                        if (v30 < v30 + v25)
                        {
                          v36 = 0;
                          do
                          {
                            LOBYTE(v37) = *(_BYTE *)(a1
                            v31 = v31 + (float)v37;
                            ++v36;
                          }
                          while (v25 != v36);
                        }
                        ++v35;
                      }
                      while (v35 != v29);
                    }
                    ++v34;
                  }
                  while (v34 != v66);
                }
                ++v33;
              }
              while (v33 != v64);
            }
            ++v32;
          }
          while (v32 != v61);
        }
        if (a5)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Function not implemented.");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v38 = (float)(v31 / v28) * a7;
        v39 = 0.0;
        v40 = 0.0;
        v23 = v56;
        v27 = v59;
        if (v38 != 0.0)
        {
          __e[0] = 0;
          v41 = frexp(v38, __e);
          v42 = ldexp(v41, 11);
          v40 = ldexp(round(v42), __e[0] - 11);
        }
        if ((float)(v40 + a8) == 0.0)
          break;
        __e[0] = 0;
        v45 = frexp((float)(v40 + a8), __e);
        v46 = ldexp(v45, 11);
        v39 = ldexp(round(v46), __e[0] - 11);
        if (v39 == INFINITY)
        {
          LOBYTE(v44) = -1;
        }
        else
        {
          if (v39 != -INFINITY)
            break;
          LOBYTE(v44) = 0;
        }
LABEL_53:
        if (v30 == v56)
          goto LABEL_54;
      }
      v43 = llroundf(v39);
      if (v43 >= 255)
        v43 = 255;
      v44 = v43 & ~(v43 >> 31);
      goto LABEL_53;
    }
LABEL_57:
    ++v27;
    ++v61;
  }
  while (v27 != v54);
  v20 = __p;
  if (__p)
    goto LABEL_59;
LABEL_60:
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
}

void sub_2068F3D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(_QWORD *)(v33 - 160) = v35;
    operator delete(v35);
  }
  v36 = *(void **)v32;
  if (*(_QWORD *)v32)
  {
    *(_QWORD *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValuePeReduce<signed char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  long double v41;
  double v42;
  int v43;
  char v44;
  long double v45;
  double v46;
  std::runtime_error *exception;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *__p;
  void *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int __e[4];
  char v75[16];

  *(_QWORD *)v75 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a2)
    std::vector<unsigned char>::__append(a6, a2);
  v14 = *(const void **)a3;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = (v15 - *(_QWORD *)a3) >> 3;
  if (v16 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  v71 = 0;
  v72 = 0;
  v73 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v71, v14, v15, v16);
  __p = 0;
  v69 = 0;
  v70 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v71, (uint64_t)(v71 + 8), (char *)__e, v75, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v75, 2);
  }
  else if (v16 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v71, v71 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  v17 = *(_QWORD *)v71;
  v18 = *((_QWORD *)v71 + 1);
  v19 = *((_QWORD *)v71 + 2);
  v20 = __p;
  v21 = *((_QWORD *)__p + 1);
  v22 = *((_QWORD *)__p + 2);
  v23 = *((_QWORD *)__p + 3);
  v24 = *((_QWORD *)__p + 4);
  if (*(_QWORD *)__p == *(_QWORD *)v71)
    v17 = 1;
  if (v21 == v18)
    v18 = 1;
  if (v22 == v19)
    v19 = 1;
  if (v23 == *((_QWORD *)v71 + 3))
    v25 = 1;
  else
    v25 = *((_QWORD *)v71 + 3);
  if (v24 == *((_QWORD *)v71 + 4))
    v26 = 1;
  else
    v26 = *((_QWORD *)v71 + 4);
  v54 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
  {
LABEL_61:
    v69 = v20;
    operator delete(v20);
    goto LABEL_62;
  }
  v27 = 0;
  v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  v61 = v17;
  v51 = *((_QWORD *)__p + 1);
  v52 = v18;
  v53 = *((_QWORD *)__p + 2);
  v55 = v19;
  v56 = *((_QWORD *)__p + 3);
  v48 = v17;
  v49 = *((_QWORD *)__p + 4);
  v50 = v26;
  do
  {
    if (v24)
    {
      v62 = 0;
      v58 = v27 + v17;
      v64 = v26;
      v59 = v27;
      while (!v21)
      {
LABEL_58:
        ++v64;
        v17 = v48;
        v24 = v49;
        if (++v62 == v49)
          goto LABEL_59;
      }
      v65 = 0;
      v60 = v62 + v26;
      v66 = v18;
      while (!v22)
      {
LABEL_57:
        ++v66;
        v26 = v50;
        v21 = v51;
        if (++v65 == v51)
          goto LABEL_58;
      }
      v67 = 0;
      v63 = v65 + v18;
      v29 = v19;
      while (!v23)
      {
LABEL_56:
        ++v29;
        v18 = v52;
        v22 = v53;
        ++v67;
        v19 = v55;
        if (v67 == v53)
          goto LABEL_57;
      }
      v30 = 0;
      while (1)
      {
        v31 = 0.0;
        if (v27 < v58)
        {
          v32 = v59;
          do
          {
            v33 = v62;
            if (v62 < v60)
            {
              do
              {
                v34 = v65;
                if (v65 < v63)
                {
                  do
                  {
                    v35 = v67;
                    if (v67 < v67 + v55)
                    {
                      do
                      {
                        if (v30 < v30 + v25)
                        {
                          v36 = 0;
                          do
                          {
                            LOBYTE(v37) = *(_BYTE *)(a1
                            v31 = v31 + (float)v37;
                            ++v36;
                          }
                          while (v25 != v36);
                        }
                        ++v35;
                      }
                      while (v35 != v29);
                    }
                    ++v34;
                  }
                  while (v34 != v66);
                }
                ++v33;
              }
              while (v33 != v64);
            }
            ++v32;
          }
          while (v32 != v61);
        }
        if (a5)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Function not implemented.");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v38 = (float)(v31 / v28) * a7;
        v39 = 0.0;
        v40 = 0.0;
        v23 = v56;
        v27 = v59;
        if (v38 != 0.0)
        {
          __e[0] = 0;
          v41 = frexp(v38, __e);
          v42 = ldexp(v41, 11);
          v40 = ldexp(round(v42), __e[0] - 11);
        }
        if ((float)(v40 + a8) == 0.0)
          break;
        __e[0] = 0;
        v45 = frexp((float)(v40 + a8), __e);
        v46 = ldexp(v45, 11);
        v39 = ldexp(round(v46), __e[0] - 11);
        if (v39 == INFINITY)
        {
          v44 = 127;
        }
        else
        {
          if (v39 != -INFINITY)
            break;
          v44 = 0x80;
        }
LABEL_55:
        if (v30 == v56)
          goto LABEL_56;
      }
      v43 = llroundf(v39);
      if (v43 >= 127)
        v43 = 127;
      if (v43 <= -128)
        v44 = 0x80;
      else
        v44 = v43;
      goto LABEL_55;
    }
LABEL_59:
    ++v27;
    ++v61;
  }
  while (v27 != v54);
  v20 = __p;
  if (__p)
    goto LABEL_61;
LABEL_62:
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
}

void sub_2068F4360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(_QWORD *)(v33 - 160) = v35;
    operator delete(v35);
  }
  v36 = *(void **)v32;
  if (*(_QWORD *)v32)
  {
    *(_QWORD *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValuePeReduce<MIL::Fp16,signed char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Index;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  long double v40;
  double v41;
  long double v42;
  double v43;
  __int16 v44;
  std::runtime_error *exception;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *__p;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int __e[4];
  char v73[16];

  *(_QWORD *)v73 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a6, a2);
  v14 = *(const void **)a3;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = (v15 - *(_QWORD *)a3) >> 3;
  if (v16 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  v69 = 0;
  v70 = 0;
  v71 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v69, v14, v15, v16);
  __p = 0;
  v67 = 0;
  v68 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v69, (uint64_t)(v69 + 8), (char *)__e, v73, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v73, 2);
  }
  else if (v16 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v69, v69 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  v17 = *(_QWORD *)v69;
  v18 = *((_QWORD *)v69 + 1);
  v19 = *((_QWORD *)v69 + 2);
  Index = (uint64_t)__p;
  v21 = *((_QWORD *)__p + 1);
  v22 = *((_QWORD *)__p + 2);
  v23 = *((_QWORD *)__p + 3);
  v24 = *((_QWORD *)__p + 4);
  if (*(_QWORD *)__p == *(_QWORD *)v69)
    v17 = 1;
  if (v21 == v18)
    v18 = 1;
  if (v22 == v19)
    v19 = 1;
  if (v23 == *((_QWORD *)v69 + 3))
    v25 = 1;
  else
    v25 = *((_QWORD *)v69 + 3);
  if (v24 == *((_QWORD *)v69 + 4))
    v26 = 1;
  else
    v26 = *((_QWORD *)v69 + 4);
  v52 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
    goto LABEL_51;
  v27 = 0;
  v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  v59 = v17;
  v49 = *((_QWORD *)__p + 1);
  v50 = v18;
  v51 = *((_QWORD *)__p + 2);
  v53 = v19;
  v54 = *((_QWORD *)__p + 3);
  v46 = v17;
  v47 = *((_QWORD *)__p + 4);
  v48 = v26;
  do
  {
    if (v24)
    {
      v60 = 0;
      v56 = v27 + v17;
      v62 = v26;
      v57 = v27;
      do
      {
        if (v21)
        {
          v63 = 0;
          v58 = v60 + v26;
          v64 = v18;
          do
          {
            if (v22)
            {
              v65 = 0;
              v61 = v63 + v18;
              v29 = v19;
              do
              {
                if (v23)
                {
                  v30 = 0;
                  do
                  {
                    v31 = 0.0;
                    if (v27 < v56)
                    {
                      v32 = v57;
                      do
                      {
                        v33 = v60;
                        if (v60 < v58)
                        {
                          do
                          {
                            v34 = v63;
                            if (v63 < v61)
                            {
                              do
                              {
                                v35 = v65;
                                if (v65 < v65 + v53)
                                {
                                  do
                                  {
                                    if (v30 < v30 + v25)
                                    {
                                      v36 = 0;
                                      do
                                      {
                                        v31 = v31 + (float)*(char *)(a1 + Index);
                                        ++v36;
                                      }
                                      while (v25 != v36);
                                    }
                                    ++v35;
                                  }
                                  while (v35 != v29);
                                }
                                ++v34;
                              }
                              while (v34 != v64);
                            }
                            ++v33;
                          }
                          while (v33 != v62);
                        }
                        ++v32;
                      }
                      while (v32 != v59);
                    }
                    if (a5)
                    {
                      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(exception, "Function not implemented.");
                      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                    }
                    v37 = (float)(v31 / v28) * a7;
                    v38 = 0.0;
                    v39 = 0.0;
                    v27 = v57;
                    if (v37 != 0.0)
                    {
                      __e[0] = 0;
                      v40 = frexp(v37, __e);
                      v41 = ldexp(v40, 11);
                      v39 = ldexp(round(v41), __e[0] - 11);
                    }
                    if ((float)(v39 + a8) != 0.0)
                    {
                      __e[0] = 0;
                      v42 = frexp((float)(v39 + a8), __e);
                      v43 = ldexp(v42, 11);
                      v38 = ldexp(round(v43), __e[0] - 11);
                    }
                    v44 = MIL::Fp16::FromFloat((MIL::Fp16 *)Index, v38);
                    *(_WORD *)(*a6 + 2 * Index) = v44;
                    ++v30;
                    v23 = v54;
                  }
                  while (v30 != v54);
                }
                ++v29;
                v18 = v50;
                v22 = v51;
                ++v65;
                v19 = v53;
              }
              while (v65 != v51);
            }
            ++v64;
            v26 = v48;
            v21 = v49;
            ++v63;
          }
          while (v63 != v49);
        }
        ++v62;
        v17 = v46;
        v24 = v47;
        ++v60;
      }
      while (v60 != v47);
    }
    ++v27;
    ++v59;
  }
  while (v27 != v52);
  Index = (uint64_t)__p;
  if (__p)
  {
LABEL_51:
    v67 = Index;
    operator delete((void *)Index);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
}

void sub_2068F48F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(_QWORD *)(v33 - 160) = v35;
    operator delete(v35);
  }
  v36 = *(void **)v32;
  if (*(_QWORD *)v32)
  {
    *(_QWORD *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValuePeReduce<unsigned char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  long double v40;
  double v41;
  int v42;
  int v43;
  long double v44;
  double v45;
  std::runtime_error *exception;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *__p;
  void *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int __e[4];
  char v74[16];

  *(_QWORD *)v74 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a2)
    std::vector<unsigned char>::__append(a6, a2);
  v14 = *(const void **)a3;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = (v15 - *(_QWORD *)a3) >> 3;
  if (v16 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  v70 = 0;
  v71 = 0;
  v72 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v70, v14, v15, v16);
  __p = 0;
  v68 = 0;
  v69 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v70, (uint64_t)(v70 + 8), (char *)__e, v74, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v74, 2);
  }
  else if (v16 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v70, v70 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  v17 = *(_QWORD *)v70;
  v18 = *((_QWORD *)v70 + 1);
  v19 = *((_QWORD *)v70 + 2);
  v20 = __p;
  v21 = *((_QWORD *)__p + 1);
  v22 = *((_QWORD *)__p + 2);
  v23 = *((_QWORD *)__p + 3);
  v24 = *((_QWORD *)__p + 4);
  if (*(_QWORD *)__p == *(_QWORD *)v70)
    v17 = 1;
  if (v21 == v18)
    v18 = 1;
  if (v22 == v19)
    v19 = 1;
  if (v23 == *((_QWORD *)v70 + 3))
    v25 = 1;
  else
    v25 = *((_QWORD *)v70 + 3);
  if (v24 == *((_QWORD *)v70 + 4))
    v26 = 1;
  else
    v26 = *((_QWORD *)v70 + 4);
  v53 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
  {
LABEL_59:
    v68 = v20;
    operator delete(v20);
    goto LABEL_60;
  }
  v27 = 0;
  v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  v60 = v17;
  v50 = *((_QWORD *)__p + 1);
  v51 = v18;
  v52 = *((_QWORD *)__p + 2);
  v54 = v19;
  v55 = *((_QWORD *)__p + 3);
  v47 = v17;
  v48 = *((_QWORD *)__p + 4);
  v49 = v26;
  do
  {
    if (v24)
    {
      v61 = 0;
      v57 = v27 + v17;
      v63 = v26;
      v58 = v27;
      while (!v21)
      {
LABEL_56:
        ++v63;
        v17 = v47;
        v24 = v48;
        if (++v61 == v48)
          goto LABEL_57;
      }
      v64 = 0;
      v59 = v61 + v26;
      v65 = v18;
      while (!v22)
      {
LABEL_55:
        ++v65;
        v26 = v49;
        v21 = v50;
        if (++v64 == v50)
          goto LABEL_56;
      }
      v66 = 0;
      v62 = v64 + v18;
      v29 = v19;
      while (!v23)
      {
LABEL_54:
        ++v29;
        v18 = v51;
        v22 = v52;
        ++v66;
        v19 = v54;
        if (v66 == v52)
          goto LABEL_55;
      }
      v30 = 0;
      while (1)
      {
        v31 = 0.0;
        if (v27 < v57)
        {
          v32 = v58;
          do
          {
            v33 = v61;
            if (v61 < v59)
            {
              do
              {
                v34 = v64;
                if (v64 < v62)
                {
                  do
                  {
                    v35 = v66;
                    if (v66 < v66 + v54)
                    {
                      do
                      {
                        if (v30 < v30 + v25)
                        {
                          v36 = 0;
                          do
                            v31 = v31
                                + (float)*(char *)(a1
                          while (v25 != v36);
                        }
                        ++v35;
                      }
                      while (v35 != v29);
                    }
                    ++v34;
                  }
                  while (v34 != v65);
                }
                ++v33;
              }
              while (v33 != v63);
            }
            ++v32;
          }
          while (v32 != v60);
        }
        if (a5)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Function not implemented.");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v37 = (float)(v31 / v28) * a7;
        v38 = 0.0;
        v39 = 0.0;
        v23 = v55;
        v27 = v58;
        if (v37 != 0.0)
        {
          __e[0] = 0;
          v40 = frexp(v37, __e);
          v41 = ldexp(v40, 11);
          v39 = ldexp(round(v41), __e[0] - 11);
        }
        if ((float)(v39 + a8) == 0.0)
          break;
        __e[0] = 0;
        v44 = frexp((float)(v39 + a8), __e);
        v45 = ldexp(v44, 11);
        v38 = ldexp(round(v45), __e[0] - 11);
        if (v38 == INFINITY)
        {
          LOBYTE(v43) = -1;
        }
        else
        {
          if (v38 != -INFINITY)
            break;
          LOBYTE(v43) = 0;
        }
LABEL_53:
        if (v30 == v55)
          goto LABEL_54;
      }
      v42 = llroundf(v38);
      if (v42 >= 255)
        v42 = 255;
      v43 = v42 & ~(v42 >> 31);
      goto LABEL_53;
    }
LABEL_57:
    ++v27;
    ++v60;
  }
  while (v27 != v53);
  v20 = __p;
  if (__p)
    goto LABEL_59;
LABEL_60:
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
}

void sub_2068F4ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(_QWORD *)(v33 - 160) = v35;
    operator delete(v35);
  }
  v36 = *(void **)v32;
  if (*(_QWORD *)v32)
  {
    *(_QWORD *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValuePeReduce<signed char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  long double v40;
  double v41;
  int v42;
  char v43;
  long double v44;
  double v45;
  std::runtime_error *exception;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *__p;
  void *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int __e[4];
  char v74[16];

  *(_QWORD *)v74 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a2)
    std::vector<unsigned char>::__append(a6, a2);
  v14 = *(const void **)a3;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = (v15 - *(_QWORD *)a3) >> 3;
  if (v16 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  v70 = 0;
  v71 = 0;
  v72 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v70, v14, v15, v16);
  __p = 0;
  v68 = 0;
  v69 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v70, (uint64_t)(v70 + 8), (char *)__e, v74, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v74, 2);
  }
  else if (v16 == 4)
  {
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v70, v70 + 8, __e);
    *(_QWORD *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  v17 = *(_QWORD *)v70;
  v18 = *((_QWORD *)v70 + 1);
  v19 = *((_QWORD *)v70 + 2);
  v20 = __p;
  v21 = *((_QWORD *)__p + 1);
  v22 = *((_QWORD *)__p + 2);
  v23 = *((_QWORD *)__p + 3);
  v24 = *((_QWORD *)__p + 4);
  if (*(_QWORD *)__p == *(_QWORD *)v70)
    v17 = 1;
  if (v21 == v18)
    v18 = 1;
  if (v22 == v19)
    v19 = 1;
  if (v23 == *((_QWORD *)v70 + 3))
    v25 = 1;
  else
    v25 = *((_QWORD *)v70 + 3);
  if (v24 == *((_QWORD *)v70 + 4))
    v26 = 1;
  else
    v26 = *((_QWORD *)v70 + 4);
  v53 = *(_QWORD *)__p;
  if (!*(_QWORD *)__p)
  {
LABEL_61:
    v68 = v20;
    operator delete(v20);
    goto LABEL_62;
  }
  v27 = 0;
  v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  v60 = v17;
  v50 = *((_QWORD *)__p + 1);
  v51 = v18;
  v52 = *((_QWORD *)__p + 2);
  v54 = v19;
  v55 = *((_QWORD *)__p + 3);
  v47 = v17;
  v48 = *((_QWORD *)__p + 4);
  v49 = v26;
  do
  {
    if (v24)
    {
      v61 = 0;
      v57 = v27 + v17;
      v63 = v26;
      v58 = v27;
      while (!v21)
      {
LABEL_58:
        ++v63;
        v17 = v47;
        v24 = v48;
        if (++v61 == v48)
          goto LABEL_59;
      }
      v64 = 0;
      v59 = v61 + v26;
      v65 = v18;
      while (!v22)
      {
LABEL_57:
        ++v65;
        v26 = v49;
        v21 = v50;
        if (++v64 == v50)
          goto LABEL_58;
      }
      v66 = 0;
      v62 = v64 + v18;
      v29 = v19;
      while (!v23)
      {
LABEL_56:
        ++v29;
        v18 = v51;
        v22 = v52;
        ++v66;
        v19 = v54;
        if (v66 == v52)
          goto LABEL_57;
      }
      v30 = 0;
      while (1)
      {
        v31 = 0.0;
        if (v27 < v57)
        {
          v32 = v58;
          do
          {
            v33 = v61;
            if (v61 < v59)
            {
              do
              {
                v34 = v64;
                if (v64 < v62)
                {
                  do
                  {
                    v35 = v66;
                    if (v66 < v66 + v54)
                    {
                      do
                      {
                        if (v30 < v30 + v25)
                        {
                          v36 = 0;
                          do
                            v31 = v31
                                + (float)*(char *)(a1
                          while (v25 != v36);
                        }
                        ++v35;
                      }
                      while (v35 != v29);
                    }
                    ++v34;
                  }
                  while (v34 != v65);
                }
                ++v33;
              }
              while (v33 != v63);
            }
            ++v32;
          }
          while (v32 != v60);
        }
        if (a5)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Function not implemented.");
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v37 = (float)(v31 / v28) * a7;
        v38 = 0.0;
        v39 = 0.0;
        v23 = v55;
        v27 = v58;
        if (v37 != 0.0)
        {
          __e[0] = 0;
          v40 = frexp(v37, __e);
          v41 = ldexp(v40, 11);
          v39 = ldexp(round(v41), __e[0] - 11);
        }
        if ((float)(v39 + a8) == 0.0)
          break;
        __e[0] = 0;
        v44 = frexp((float)(v39 + a8), __e);
        v45 = ldexp(v44, 11);
        v38 = ldexp(round(v45), __e[0] - 11);
        if (v38 == INFINITY)
        {
          v43 = 127;
        }
        else
        {
          if (v38 != -INFINITY)
            break;
          v43 = 0x80;
        }
LABEL_55:
        if (v30 == v55)
          goto LABEL_56;
      }
      v42 = llroundf(v38);
      if (v42 >= 127)
        v42 = 127;
      if (v42 <= -128)
        v43 = 0x80;
      else
        v43 = v42;
      goto LABEL_55;
    }
LABEL_59:
    ++v27;
    ++v60;
  }
  while (v27 != v53);
  v20 = __p;
  if (__p)
    goto LABEL_61;
LABEL_62:
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
}

void sub_2068F54A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(_QWORD *)(v33 - 160) = v35;
    operator delete(v35);
  }
  v36 = *(void **)v32;
  if (*(_QWORD *)v32)
  {
    *(_QWORD *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::PeReduceCpu::~PeReduceCpu(MIL::ANEMachineIR::Interpreter::PeReduceCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

uint64_t MIL::ANEMachineIR::Interpreter::DelegateByNameOp::MakeWithDefaultTable@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  const char *v38;
  _QWORD *v39;
  _OWORD v40[2];
  int v41;

  memset(v40, 0, sizeof(v40));
  v41 = 1065353216;
  v3 = (_QWORD *)operator new();
  *v3 = &unk_24BFEC190;
  v38 = "const";
  v39 = v3;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ConstCpu>>>(v40, (uint64_t)&v38);
  v4 = v39;
  v39 = 0;
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 16))(v4);
  v5 = (_QWORD *)operator new();
  *v5 = &unk_24BFEB1D8;
  v38 = "ne_activation";
  v39 = v5;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeActivationCpu>>>(v40, (uint64_t)&v38);
  v6 = v39;
  v39 = 0;
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 16))(v6);
  v7 = (_QWORD *)operator new();
  *v7 = &unk_24BFEB078;
  v38 = "ne_add";
  v39 = v7;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAddCpu>>>(v40, (uint64_t)&v38);
  v8 = v39;
  v39 = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 16))(v8);
  v9 = (_QWORD *)operator new();
  *v9 = &unk_24BFEB628;
  v38 = "ne_batch_matmul";
  v39 = v9;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeBatchMatmulCpu>>>(v40, (uint64_t)&v38);
  v10 = v39;
  v39 = 0;
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 16))(v10);
  v11 = (_QWORD *)operator new();
  *v11 = &unk_24BFEB0B8;
  v38 = "ne_conv";
  v39 = v11;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeConvCpu>>>(v40, (uint64_t)&v38);
  v12 = v39;
  v39 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 16))(v12);
  v13 = (_QWORD *)operator new();
  *v13 = &unk_24BFE7FB8;
  v38 = "ne_matmul";
  v39 = v13;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMatmulCpu>>>(v40, (uint64_t)&v38);
  v14 = v39;
  v39 = 0;
  if (v14)
    (*(void (**)(_QWORD *))(*v14 + 16))(v14);
  v15 = (_QWORD *)operator new();
  *v15 = &unk_24BFE7730;
  v38 = "ne_avg_pool";
  v39 = v15;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAvgPoolCpu>>>(v40, (uint64_t)&v38);
  v16 = v39;
  v39 = 0;
  if (v16)
    (*(void (**)(_QWORD *))(*v16 + 16))(v16);
  v17 = (_QWORD *)operator new();
  *v17 = &unk_24BFE7770;
  v38 = "ne_max_pool";
  v39 = v17;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMaxPoolCpu>>>(v40, (uint64_t)&v38);
  v18 = v39;
  v39 = 0;
  if (v18)
    (*(void (**)(_QWORD *))(*v18 + 16))(v18);
  v19 = (_QWORD *)operator new();
  *v19 = &unk_24BFE77B0;
  v38 = "ne_min_pool";
  v39 = v19;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMinPoolCpu>>>(v40, (uint64_t)&v38);
  v20 = v39;
  v39 = 0;
  if (v20)
    (*(void (**)(_QWORD *))(*v20 + 16))(v20);
  v21 = (_QWORD *)operator new();
  *v21 = &unk_24BFE7250;
  v38 = "pe_add";
  v39 = v21;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAddCpu>>>(v40, (uint64_t)&v38);
  v22 = v39;
  v39 = 0;
  if (v22)
    (*(void (**)(_QWORD *))(*v22 + 16))(v22);
  v23 = (_QWORD *)operator new();
  *v23 = &unk_24BFEB870;
  v38 = "pe_avg_pool";
  v39 = v23;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAvgPoolCpu>>>(v40, (uint64_t)&v38);
  v24 = v39;
  v39 = 0;
  if (v24)
    (*(void (**)(_QWORD *))(*v24 + 16))(v24);
  v25 = (_QWORD *)operator new();
  *v25 = &unk_24BFEB8B0;
  v38 = "pe_max_pool";
  v39 = v25;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMaxPoolCpu>>>(v40, (uint64_t)&v38);
  v26 = v39;
  v39 = 0;
  if (v26)
    (*(void (**)(_QWORD *))(*v26 + 16))(v26);
  v27 = (_QWORD *)operator new();
  *v27 = &unk_24BFE72A0;
  v38 = "pe_mul";
  v39 = v27;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMulCpu>>>(v40, (uint64_t)&v38);
  v28 = v39;
  v39 = 0;
  if (v28)
    (*(void (**)(_QWORD *))(*v28 + 16))(v28);
  v29 = (_QWORD *)operator new();
  *v29 = &unk_24BFEB8F0;
  v38 = "pe_min_pool";
  v39 = v29;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMinPoolCpu>>>(v40, (uint64_t)&v38);
  v30 = v39;
  v39 = 0;
  if (v30)
    (*(void (**)(_QWORD *))(*v30 + 16))(v30);
  v31 = (_QWORD *)operator new();
  *v31 = &unk_24BFEB0F8;
  v38 = "pe_reduce";
  v39 = v31;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeReduceCpu>>>(v40, (uint64_t)&v38);
  v32 = v39;
  v39 = 0;
  if (v32)
    (*(void (**)(_QWORD *))(*v32 + 16))(v32);
  v33 = (_QWORD *)operator new();
  *v33 = &unk_24BFEB830;
  v38 = "reshape";
  v39 = v33;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ReshapeCpu>>>(v40, (uint64_t)&v38);
  v34 = v39;
  v39 = 0;
  if (v34)
    (*(void (**)(_QWORD *))(*v34 + 16))(v34);
  v35 = (_QWORD *)operator new();
  *v35 = &unk_24BFEB038;
  v38 = "transpose";
  v39 = v35;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::TransposeCpu>>>(v40, (uint64_t)&v38);
  v36 = v39;
  v39 = 0;
  if (v36)
    (*(void (**)(_QWORD *))(*v36 + 16))(v36);
  *a1 = &off_24BFEB138;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__hash_table((uint64_t)(a1 + 1), (uint64_t *)v40);
  return std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::~__hash_table((uint64_t)v40);
}

void sub_2068F5BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::ANEMachineIR::Interpreter::DelegateByNameOp::Run@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  _QWORD *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  v7 = (_QWORD *)(a1 + 8);
  v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>(v7, v8);
  if (v9)
    return (***((uint64_t (****)(_QWORD, uint64_t, uint64_t))v9 + 5))(*((_QWORD *)v9 + 5), a2, a3);
  *a4 = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  return std::operator+<char>();
}

void MIL::ANEMachineIR::Interpreter::DelegateByNameOp::~DelegateByNameOp(MIL::ANEMachineIR::Interpreter::DelegateByNameOp *this)
{
  *(_QWORD *)this = &off_24BFEB138;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24BFEB138;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ConstCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ConstCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F5F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ConstCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F6024(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeActivationCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeActivationCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F60DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeActivationCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F6178(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAddCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAddCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F61EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAddCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F6288(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeBatchMatmulCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeBatchMatmulCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F62FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeBatchMatmulCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F6398(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeConvCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeConvCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F640C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeConvCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F64A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMatmulCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMatmulCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F651C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMatmulCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F65B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAvgPoolCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAvgPoolCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F662C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAvgPoolCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F66C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMaxPoolCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMaxPoolCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F673C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMaxPoolCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F67D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMinPoolCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMinPoolCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F684C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMinPoolCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F68E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAddCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAddCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F695C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAddCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F69F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAvgPoolCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAvgPoolCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F6A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAvgPoolCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F6B08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMaxPoolCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMaxPoolCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F6B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMaxPoolCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F6C18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMulCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMulCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F6C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMulCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F6D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMinPoolCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMinPoolCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F6D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMinPoolCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F6E38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeReduceCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeReduceCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F6EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeReduceCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F6F48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ReshapeCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ReshapeCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F6FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ReshapeCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F7058(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::TransposeCpu>>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::TransposeCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if ((v4 & 1) != 0)
    v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_2068F70CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::TransposeCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_2068F7168(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Validators::ValidateBaseActivation(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateBaseActivation(this, a2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateLinear@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateLinear(this, a2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateLrelu@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateLrelu(this, a2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateNePiecewiseV2@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateNePiecewiseV2(this, a2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateRelu(ANEMachineIR::H2022::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateScaledActivation(ANEMachineIR::H2022::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateSigmoid(ANEMachineIR::H2022::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateSqrt(ANEMachineIR::H2022::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateTanh(ANEMachineIR::H2022::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 2);
}

unsigned __int8 *MIL::ANEMachineIR::Interpreter::ComputedValueStore::TryGetValue(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;

  result = std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>(a1, a2);
  if (result)
    return (unsigned __int8 *)*((_QWORD *)result + 5);
  return result;
}

uint64_t MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  char v3;

  std::unordered_map<std::string,std::unique_ptr<MIL::IRTensorValue const>>::insert_or_assign[abi:ne180100]<std::unique_ptr<MIL::IRTensorValue const>>(a1, a2, a3);
  return v3 & 1;
}

unsigned __int8 *std::unordered_map<std::string,std::unique_ptr<MIL::IRTensorValue const>>::insert_or_assign[abi:ne180100]<std::unique_ptr<MIL::IRTensorValue const>>(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRTensorValue const>>(a1, a2, (uint64_t)a2, a3);
  v5 = v4;
  if (!v6)
  {
    v7 = *a3;
    *a3 = 0;
    v8 = *((_QWORD *)v4 + 5);
    *((_QWORD *)v5 + 5) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return v5;
}

uint64_t MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t result;
  uint64_t ParameterValue;

  v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 120))(a2, a3, 0);
  if (!v4
    || (v5 = std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>(a1, v4)) == 0|| (result = *((_QWORD *)v5 + 5)) == 0)
  {
    ParameterValue = MIL::IROperation::TryGetParameterValue();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRTensorValue const>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IRTensorValue const>>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_2068F7558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IRTensorValue const>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  std::string *v11;
  uint64_t v12;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  v11 = (std::string *)(v10 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v10[4] = *(_QWORD *)(a3 + 16);
  }
  v12 = *a4;
  *a4 = 0;
  v10[5] = v12;
  *(_BYTE *)(a5 + 16) = 1;
}

void sub_2068F75FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRTensorValue const>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRTensorValue const>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void MilTranslator::WeightTranslator::~WeightTranslator(MilTranslator::WeightTranslator *this)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  std::unique_ptr<MIL::Blob::StorageWriter>::reset[abi:ne180100]((MIL::Blob::StorageWriter **)this + 14, 0);
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::~__hash_table((uint64_t)this);
}

uint64_t MilTranslator::WeightTranslator::WeightTranslator(uint64_t a1, __int128 *a2, int a3, uint64_t a4, uint64_t a5)
{
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  const char *v13;
  FILE *v14;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  v10 = (_OWORD *)(a1 + 80);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 2);
    *v10 = v11;
  }
  v12 = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (a3)
  {
    v12 = operator new();
    MEMORY[0x20BCFEB40](v12, v10, 1);
  }
  *(_QWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  if ((a3 & 1) == 0)
  {
    if (*((char *)a2 + 23) >= 0)
      v13 = (const char *)a2;
    else
      v13 = *(const char **)a2;
    v14 = fopen(v13, "a");
    fclose(v14);
  }
  return a1;
}

void sub_2068F7810(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MilTranslator::WeightTranslator::TargetProgramConstOpName(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, std::string::size_type a5@<X4>, uint64_t a6@<X5>, _DWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char v16;
  void **p_p;
  std::string::size_type v18;
  char *v19;
  size_t v20;
  std::string *v21;
  char *v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  void *v27;
  uint64_t ParameterValue;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  ANEMachineIR::Utils *v33;
  const MIL::IRTensorValueType *v34;
  int v35;
  _QWORD v36[3];
  std::string v37;
  void *__p;
  __int128 v39;
  void **v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 120))(a2, a3, 0);
  v15 = v14;
  __p = 0;
  v39 = 0uLL;
  if (v14)
  {
    v16 = 0;
    p_p = (void **)v14;
  }
  else
  {
    v35 = a4;
    v18 = a5;
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 200))(v36, a2);
    v19 = (char *)v36[0];
    if (v36[1] == v36[0])
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    if (*(char *)(v36[0] + 23) >= 0)
      v20 = *(unsigned __int8 *)(v36[0] + 23);
    else
      v20 = *(_QWORD *)(v36[0] + 8);
    v21 = &v37;
    std::string::basic_string[abi:ne180100]((uint64_t)&v37, v20 + 11);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if (v20)
    {
      if (v19[23] >= 0)
        v22 = v19;
      else
        v22 = *(char **)v19;
      memmove(v21, v22, v20);
    }
    strcpy((char *)v21 + v20, "__ival_for_");
    v23 = *(char *)(a3 + 23);
    if (v23 >= 0)
      v24 = (const std::string::value_type *)a3;
    else
      v24 = *(const std::string::value_type **)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_QWORD *)(a3 + 8);
    v26 = std::string::append(&v37, v24, v25);
    v27 = (void *)v26->__r_.__value_.__r.__words[0];
    v41[0] = v26->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v41 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)((char *)&v39 + 7) = *(_QWORD *)((char *)v41 + 7);
    __p = v27;
    *(_QWORD *)&v39 = v41[0];
    HIBYTE(v39) = v16;
    a5 = v18;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    v40 = (void **)v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v40);
    p_p = &__p;
    a4 = v35;
  }
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue
    && (v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue), (v30 = v29) != 0))
  {
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 88))(v31);
    v33 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
    ANEMachineIR::Utils::GetStaticTensorShape(v33, v34, (uint64_t)&v37);
    MilTranslator::WeightTranslator::TargetProgramConstOpName(a4, a1, (uint64_t)p_p, v15 == 0, (uint64_t **)&v37, v32, a5, (uint64_t)a7, a6);
    if (v37.__r_.__value_.__r.__words[0])
    {
      v37.__r_.__value_.__l.__size_ = v37.__r_.__value_.__r.__words[0];
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    v16 = HIBYTE(v39);
  }
  else
  {
    *a7 = 11;
    std::operator+<char>();
  }
  if (v16 < 0)
    operator delete(__p);
}

void sub_2068F7B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char *a27)
{
  if (a19 < 0)
    operator delete(__p);
  a27 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

void MilTranslator::WeightTranslator::TargetProgramConstOpName(int __val@<W6>, uint64_t a2@<X0>, uint64_t a3@<X1>, char a4@<W2>, uint64_t **a5@<X3>, uint64_t a6@<X4>, std::string::size_type a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  void **v15;
  _QWORD *v16;
  void *v17;
  unsigned __int8 *v18;
  const std::string *v19;
  const std::string *v20;
  uint64_t v21;
  uint64_t *j;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t *i;
  uint64_t v28;
  std::string v29;
  __int128 v30;
  __int128 v31;
  std::string v32;
  void *__p[2];
  __int128 v34;
  void *v35;
  char v36;
  std::string v37;
  std::string::pointer data;
  int v39;
  __int128 v40;
  uint64_t v41;
  std::string v42;
  __int128 v43;
  __int128 v44;

  BYTE8(v43) = 0;
  BYTE8(v44) = 0;
  memset(&v42, 0, sizeof(v42));
  MilTranslator::WeightTranslator::WeightRewriteDescriptionForEnum(__val, a5, a7, (uint64_t)&v43, &v42, (uint64_t)&v39);
  if (v39)
  {
    *(_DWORD *)a8 = v39;
    *(_OWORD *)(a8 + 8) = v40;
    *(_QWORD *)(a8 + 24) = v41;
    goto LABEL_55;
  }
  memset(&v37, 0, sizeof(v37));
  if ((a4 & 1) == 0)
  {
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v32 = *(std::string *)a3;
    *(_OWORD *)__p = v43;
    v34 = v44;
    v18 = std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::find<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>((_QWORD *)a2, (unsigned __int8 *)&v32);
    v19 = (const std::string *)v18;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v32.__r_.__value_.__l.__data_);
      if (v19)
        goto LABEL_16;
    }
    else if (v18)
    {
LABEL_16:
      std::string::operator=(&v37, v19 + 3);
      data = v19[4].__r_.__value_.__l.__data_;
      goto LABEL_17;
    }
    if (*(_QWORD *)(a2 + 112))
    {
      MilTranslator::WeightTranslator::WriteWeight(a2, a5, a6, (uint64_t)&v43, (uint64_t)&v37, a8);
      if (*(_DWORD *)a8)
        goto LABEL_51;
      if (*(char *)(a8 + 31) < 0)
        operator delete(*(void **)(a8 + 8));
    }
    else
    {
      if (*(char *)(a2 + 103) < 0)
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
      else
        v32 = *(std::string *)(a2 + 80);
      v25 = *(void **)(a2 + 104);
      __p[0] = v25;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v37.__r_.__value_.__l.__data_);
        v25 = __p[0];
      }
      v37 = v32;
      data = (std::string::pointer)v25;
      v26 = 1;
      if ((_DWORD)a6 == 4)
        v26 = 2;
      for (i = *a5; i != a5[1]; ++i)
      {
        v28 = *i;
        v26 *= v28;
      }
      *(_QWORD *)(a2 + 104) += v26;
    }
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v29 = *(std::string *)a3;
    v30 = v43;
    v31 = v44;
    std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>::pair[abi:ne180100]<true,0>(&v32, (__int128 *)&v29, (__int128 *)&v37);
    std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::__emplace_unique_key_args<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>>(a2, (unsigned __int8 *)&v32, (__int128 *)&v32);
    if (v36 < 0)
      operator delete(v35);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
LABEL_17:
    std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::pair[abi:ne180100]<MilTranslator::WeightTranslator::WeightFileInfo&,std::vector<unsigned long long>&,0>(&v32, (__int128 *)&v37, (uint64_t)&v42);
    v20 = (const std::string *)std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::find<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>((_QWORD *)(a2 + 40), &v32);
    if (__p[1])
    {
      *(void **)&v34 = __p[1];
      operator delete(__p[1]);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v32.__r_.__value_.__l.__data_);
      if (!v20)
      {
LABEL_36:
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 24);
        if (!v24)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v24 + 48))(&v32, v24, a3);
        if (*(char *)(a9 + 23) < 0)
          operator delete(*(void **)a9);
        *(std::string *)a9 = v32;
        MilTranslator::WeightTranslator::WriteConstOp(a2, (uint64_t)&v42, a6, a9);
        if ((a4 & 1) == 0)
        {
          std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::pair[abi:ne180100]<MilTranslator::WeightTranslator::WeightFileInfo&,std::vector<unsigned long long>&,0>(&v29, (__int128 *)&v37, (uint64_t)&v42);
          std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>::pair[abi:ne180100]<true,0>(&v32, (__int128 *)&v29, (__int128 *)a9);
          std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::__emplace_unique_key_args<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>>(a2 + 40, &v32, (uint64_t)&v32);
          if (v36 < 0)
            operator delete(v35);
          if (__p[1])
          {
            *(void **)&v34 = __p[1];
            operator delete(__p[1]);
          }
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v32.__r_.__value_.__l.__data_);
          if (*((_QWORD *)&v30 + 1))
          {
            *(_QWORD *)&v31 = *((_QWORD *)&v30 + 1);
            operator delete(*((void **)&v30 + 1));
          }
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)a8 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a8 + 8), (char *)&unk_2069A5097);
        goto LABEL_51;
      }
    }
    else if (!v20)
    {
      goto LABEL_36;
    }
    std::string::operator=((std::string *)a9, v20 + 3);
    *(_DWORD *)a8 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a8 + 8), (char *)&unk_2069A5097);
    goto LABEL_51;
  }
  if (!*(_QWORD *)(a2 + 112))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
      v16 = (_QWORD *)(a2 + 104);
      v17 = *(void **)(a2 + 104);
      __p[0] = v17;
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
      v15 = __p;
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    else
    {
      v32 = *(std::string *)(a2 + 80);
      v15 = (void **)(a2 + 104);
      v16 = (_QWORD *)(a2 + 104);
    }
    v17 = *v15;
LABEL_30:
    v37 = v32;
    data = (std::string::pointer)v17;
    v21 = 1;
    if ((_DWORD)a6 == 4)
      v21 = 2;
    for (j = *a5; j != a5[1]; ++j)
    {
      v23 = *j;
      v21 *= v23;
    }
    *v16 += v21;
    goto LABEL_36;
  }
  MilTranslator::WeightTranslator::WriteWeight(a2, a5, a6, (uint64_t)&v43, (uint64_t)&v37, a8);
  if (!*(_DWORD *)a8)
  {
    if (*(char *)(a8 + 31) < 0)
      operator delete(*(void **)(a8 + 8));
    goto LABEL_36;
  }
LABEL_51:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
LABEL_55:
  if (v42.__r_.__value_.__r.__words[0])
  {
    v42.__r_.__value_.__l.__size_ = v42.__r_.__value_.__r.__words[0];
    operator delete(v42.__r_.__value_.__l.__data_);
  }
}

void sub_2068F80D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  void *v42;

  if (a40 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 137) < 0)
    operator delete(*(void **)(v40 - 160));
  v42 = *(void **)(v40 - 136);
  if (v42)
  {
    *(_QWORD *)(v40 - 128) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::WeightTranslator::WeightRewriteDescriptionForEnum(int __val@<W2>, _QWORD *a2@<X1>, std::string::size_type a3@<X3>, uint64_t a4@<X4>, std::string *a5@<X5>, uint64_t a6@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string::size_type v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  std::string *v18;
  unint64_t v19;
  __int128 v20;
  int v21;
  _QWORD *v22;
  int v23;
  _QWORD *v24;
  std::string::size_type v25;
  int v26;
  _QWORD *v27;
  std::string __src;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (__val != 1)
  {
    if (__val)
    {
      *(_DWORD *)a6 = 4;
      std::to_string(&__src, __val);
      v18 = std::string::insert(&__src, 0, "Weight rewrite not implemented for ");
    }
    else
    {
      v8 = (_QWORD *)*a2;
      v9 = (_QWORD *)a2[1];
      if (a3 != 1)
      {
        if (v9 == v8)
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        if (*v8 % a3)
        {
          *(_DWORD *)a6 = 4;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a6 + 8), "num_groups in groupwise conv must divide kernel dimension.");
          return;
        }
      }
      v19 = v9 - v8;
      switch(v19)
      {
        case 3uLL:
          if (*v8 == a3)
          {
            *(_WORD *)(a4 + 4) = 516;
            *(_DWORD *)a4 = 84082944;
          }
          else
          {
            *(_WORD *)(a4 + 4) = 772;
            *(_DWORD *)a4 = 84017408;
            if (a3 != 1)
            {
              v23 = *(unsigned __int8 *)(a4 + 24);
              *(_BYTE *)(a4 + 8) = 3;
              *(_QWORD *)(a4 + 16) = a3;
              if (!v23)
                *(_BYTE *)(a4 + 24) = 1;
            }
          }
          v24 = (_QWORD *)*a2;
          v25 = *(_QWORD *)(*a2 + 16);
          __src.__r_.__value_.__r.__words[0] = a3;
          __src.__r_.__value_.__l.__size_ = v25;
          __src.__r_.__value_.__r.__words[2] = v24[1];
          v29 = *v24 / a3;
          std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)a5, (char *)&__src, (uint64_t)&v30, 4uLL);
          goto LABEL_44;
        case 5uLL:
          if (*v8 == a3)
          {
            *(_WORD *)(a4 + 4) = 2;
            *(_DWORD *)a4 = 84148993;
          }
          else
          {
            *(_WORD *)(a4 + 4) = 258;
            *(_DWORD *)a4 = 84148992;
            if (a3 != 1)
            {
              v26 = *(unsigned __int8 *)(a4 + 24);
              *(_BYTE *)(a4 + 8) = 1;
              *(_QWORD *)(a4 + 16) = a3;
              if (!v26)
                *(_BYTE *)(a4 + 24) = 1;
            }
          }
          __src.__r_.__value_.__r.__words[0] = a3;
          v27 = (_QWORD *)*a2;
          *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = *(_OWORD *)(*a2 + 16);
          v29 = v27[4];
          v30 = v27[1];
          v31 = *v27 / a3;
          std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)a5, (char *)&__src, (uint64_t)&v32, 6uLL);
          goto LABEL_44;
        case 4uLL:
          if (*v8 == a3)
          {
            *(_WORD *)(a4 + 4) = 259;
            *(_DWORD *)a4 = 84148736;
          }
          else
          {
            *(_WORD *)(a4 + 4) = 515;
            *(_DWORD *)a4 = 84148480;
            if (a3 != 1)
            {
              v21 = *(unsigned __int8 *)(a4 + 24);
              *(_BYTE *)(a4 + 8) = 2;
              *(_QWORD *)(a4 + 16) = a3;
              if (!v21)
                *(_BYTE *)(a4 + 24) = 1;
            }
          }
          __src.__r_.__value_.__r.__words[0] = a3;
          v22 = (_QWORD *)*a2;
          *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = *(_OWORD *)(*a2 + 16);
          v29 = v22[1];
          v30 = *v22 / a3;
          std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)a5, (char *)&__src, (uint64_t)&v31, 5uLL);
LABEL_44:
          *(_DWORD *)a6 = 0;
          *(_QWORD *)(a6 + 16) = 0;
          *(_QWORD *)(a6 + 24) = 0;
          *(_QWORD *)(a6 + 8) = 0;
          return;
      }
      *(_DWORD *)a6 = 11;
      std::to_string(&__src, v19);
      v18 = std::string::insert(&__src, 0, "Illegal rank for conv weight translation: ");
    }
    goto LABEL_29;
  }
  v10 = a2[1] - *a2;
  if (v10 != 16)
  {
    *(_DWORD *)a6 = 4;
    std::to_string(&__src, v10 >> 3);
    v18 = std::string::insert(&__src, 0, "Not implemented rank for weight translation: ");
LABEL_29:
    v20 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(_QWORD *)(a6 + 24) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)(a6 + 8) = v20;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v17 = (char *)__src.__r_.__value_.__r.__words[0];
LABEL_31:
    operator delete(v17);
    return;
  }
  *(_WORD *)(a4 + 4) = 1029;
  *(_DWORD *)a4 = 50462976;
  memset(&__src, 0, sizeof(__src));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__src, (const void *)*a2, a2[1], (uint64_t)(a2[1] - *a2) >> 3);
  size = __src.__r_.__value_.__l.__size_;
  v11 = (char *)__src.__r_.__value_.__r.__words[0];
  if (__src.__r_.__value_.__r.__words[0] != __src.__r_.__value_.__l.__size_)
  {
    v13 = (_QWORD *)(__src.__r_.__value_.__l.__size_ - 8);
    if (__src.__r_.__value_.__l.__size_ - 8 > __src.__r_.__value_.__r.__words[0])
    {
      v14 = __src.__r_.__value_.__r.__words[0] + 8;
      do
      {
        v15 = *(_QWORD *)(v14 - 8);
        *(_QWORD *)(v14 - 8) = *v13;
        *v13-- = v15;
        v16 = v14 >= (unint64_t)v13;
        v14 += 8;
      }
      while (!v16);
    }
  }
  if (&__src != a5)
  {
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)a5, v11, size, (uint64_t)(size - (_QWORD)v11) >> 3);
    v11 = (char *)__src.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)a6 = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  if (v11)
  {
    __src.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    v17 = v11;
    goto LABEL_31;
  }
}

void sub_2068F85D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MilTranslator::WeightTranslator::WriteWeight(uint64_t a1@<X0>, uint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  std::string::size_type v43;
  std::string *p_p;
  uint64_t v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  char *v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  std::string::size_type v55;
  std::string *v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  std::string::size_type v61;
  std::string *v62;
  std::string *v63;
  __int128 v64;
  void *v65;
  std::string *v66;
  __int128 v67;
  void *v68;
  std::string *v69;
  __int128 v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t k;
  uint64_t v79;
  std::string::size_type v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  std::string::size_type v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t j;
  uint64_t v122;
  std::string::size_type v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  std::string::size_type v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t i;
  uint64_t v162;
  std::string::size_type v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  std::string::size_type v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  _WORD *v195;
  uint64_t v198;
  int __val;
  uint64_t v200;
  std::string v201;
  uint64_t v202;
  void *v203;
  char *v204;
  uint64_t v205;
  void *__p;
  char *v207;
  char *v208;
  void *v209;
  char *v210;
  char *v211;
  void *v212;
  char *v213;
  char *v214;
  std::string v215;
  uint64_t Data;
  uint64_t v217;

  v7 = (char *)a2[1] - (char *)*a2;
  if (!v7 || (unint64_t)v7 >= 0x29)
  {
    *(_DWORD *)a6 = 13;
    std::to_string(&v201, v7 >> 3);
    v36 = std::string::insert(&v201, 0, "Unexpected rank ");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    *(_QWORD *)(a6 + 24) = *((_QWORD *)&v36->__r_.__value_.__l + 2);
    *(_OWORD *)(a6 + 8) = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(v201.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v38 = (void *)v201.__r_.__value_.__r.__words[0];
    goto LABEL_299;
  }
  __p = 0;
  v207 = 0;
  v208 = 0;
  std::vector<unsigned long long>::reserve(&__p, 6uLL);
  v12 = *a2;
  v11 = a2[1];
  v198 = a6;
  v200 = a4;
  __val = a3;
  if ((char *)v11 - (char *)*a2 != 48)
  {
    v13 = 0;
    v14 = v207;
    do
    {
      if (v14 >= v208)
      {
        v16 = (char *)__p;
        v17 = (v14 - (_BYTE *)__p) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v19 = v208 - (_BYTE *)__p;
        if ((v208 - (_BYTE *)__p) >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v208, v20);
          v16 = (char *)__p;
          v14 = v207;
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[8 * v17];
        *(_QWORD *)v22 = 1;
        v15 = v22 + 8;
        while (v14 != v16)
        {
          v23 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *((_QWORD *)v22 - 1) = v23;
          v22 -= 8;
        }
        __p = v22;
        v207 = v15;
        v208 = &v21[8 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v14 = 1;
        v15 = v14 + 8;
      }
      v207 = v15;
      ++v13;
      v12 = *a2;
      v11 = a2[1];
      v14 = v15;
    }
    while (6 - (v11 - *a2) > v13);
  }
  if (v12 == v11)
  {
    v25 = 1;
  }
  else
  {
    v24 = v207;
    v25 = 1;
    do
    {
      v26 = *v12;
      if (v24 >= v208)
      {
        v28 = (char *)__p;
        v29 = (v24 - (_BYTE *)__p) >> 3;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v31 = v208 - (_BYTE *)__p;
        if ((v208 - (_BYTE *)__p) >> 2 > v30)
          v30 = v31 >> 2;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v208, v32);
          v28 = (char *)__p;
          v24 = v207;
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[8 * v29];
        *(_QWORD *)v34 = v26;
        v27 = v34 + 8;
        while (v24 != v28)
        {
          v35 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *((_QWORD *)v34 - 1) = v35;
          v34 -= 8;
        }
        __p = v34;
        v207 = v27;
        v208 = &v33[8 * v32];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_QWORD *)v24 = v26;
        v27 = v24 + 8;
      }
      v207 = v27;
      v25 *= v26;
      ++v12;
      v24 = v27;
    }
    while (v12 != v11);
  }
  if (__val == 4)
  {
    v203 = 0;
    v204 = 0;
    v205 = 0;
    std::vector<MIL::Fp16>::reserve(&v203, v25);
    LOWORD(v201.__r_.__value_.__l.__data_) = 0;
    std::vector<MIL::Fp16>::resize((uint64_t)&v203, v25, &v201);
    Data = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    v217 = v39;
    v40 = *(unsigned __int8 *)(v200 + 24);
    memset(&v201, 0, sizeof(v201));
    if (v40)
    {
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v201, (char *)__p, (uint64_t)v207, (v207 - (_BYTE *)__p) >> 3);
      v41 = *(unsigned __int8 *)(v200 + 8);
      if (!*(_BYTE *)(v200 + 8))
        goto LABEL_79;
      v42 = v41 - 1;
      v43 = v201.__r_.__value_.__r.__words[0];
      if (v41 - 1 >= (uint64_t)(v201.__r_.__value_.__l.__size_ - v201.__r_.__value_.__r.__words[0]) >> 3)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      if (*(_QWORD *)(v201.__r_.__value_.__r.__words[0] + 8 * v42) != 1)
      {
LABEL_79:
        *(_DWORD *)a6 = 13;
        std::to_string(&v215, v41);
        v69 = std::string::insert(&v215, 0, "Illegal weight dimension to split at index: ");
        v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        *(_QWORD *)(a6 + 24) = *((_QWORD *)&v69->__r_.__value_.__l + 2);
        *(_OWORD *)(a6 + 8) = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_282;
        v71 = (void *)v215.__r_.__value_.__r.__words[0];
        goto LABEL_281;
      }
      *(_QWORD *)(v201.__r_.__value_.__r.__words[0] + 8 * v42) = *(_QWORD *)(v200 + 16);
      *(_QWORD *)(v43 + 8 * v41) /= *(_QWORD *)(v200 + 16);
      p_p = &v201;
    }
    else
    {
      p_p = (std::string *)&__p;
    }
    memset(&v215, 0, sizeof(v215));
    v212 = (void *)1;
    std::vector<unsigned long long>::assign(&v215.__r_.__value_.__l.__data_, 6uLL, &v212);
    v155 = (_QWORD *)p_p->__r_.__value_.__r.__words[0];
    v156 = *(_QWORD *)(p_p->__r_.__value_.__r.__words[0] + 40);
    v157 = (_QWORD *)v215.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v215.__r_.__value_.__r.__words[0] + 32) = v156;
    v158 = v155[4] * v156;
    v157[3] = v158;
    v159 = v155[3] * v158;
    v157[2] = v159;
    v160 = v155[2] * v159;
    v157[1] = v160;
    *v157 = v155[1] * v160;
    v212 = 0;
    v213 = 0;
    v214 = 0;
    std::vector<unsigned long long>::reserve(&v212, 6uLL);
    v209 = 0;
    v210 = 0;
    v211 = 0;
    std::vector<unsigned long long>::reserve(&v209, 6uLL);
    for (i = 0; i != 6; ++i)
    {
      v162 = *(unsigned __int8 *)(v200 + i);
      v163 = p_p->__r_.__value_.__r.__words[0];
      v164 = v213;
      if (v213 >= v214)
      {
        v166 = (char *)v212;
        v167 = (v213 - (_BYTE *)v212) >> 3;
        v168 = v167 + 1;
        if ((unint64_t)(v167 + 1) >> 61)
          goto LABEL_309;
        v169 = v214 - (_BYTE *)v212;
        if ((v214 - (_BYTE *)v212) >> 2 > v168)
          v168 = v169 >> 2;
        if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8)
          v170 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v170 = v168;
        if (v170)
        {
          v171 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v214, v170);
          v166 = (char *)v212;
          v164 = v213;
        }
        else
        {
          v171 = 0;
        }
        v172 = &v171[8 * v167];
        *(_QWORD *)v172 = *(_QWORD *)(v163 + 8 * v162);
        v165 = v172 + 8;
        while (v164 != v166)
        {
          v173 = *((_QWORD *)v164 - 1);
          v164 -= 8;
          *((_QWORD *)v172 - 1) = v173;
          v172 -= 8;
        }
        v212 = v172;
        v213 = v165;
        v214 = &v171[8 * v170];
        if (v166)
          operator delete(v166);
      }
      else
      {
        *(_QWORD *)v213 = *(_QWORD *)(v163 + 8 * v162);
        v165 = v164 + 8;
      }
      v213 = v165;
      v174 = v215.__r_.__value_.__r.__words[0];
      v175 = v210;
      if (v210 >= v211)
      {
        v177 = (char *)v209;
        v178 = (v210 - (_BYTE *)v209) >> 3;
        v179 = v178 + 1;
        if ((unint64_t)(v178 + 1) >> 61)
LABEL_309:
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v180 = v211 - (_BYTE *)v209;
        if ((v211 - (_BYTE *)v209) >> 2 > v179)
          v179 = v180 >> 2;
        if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8)
          v181 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v181 = v179;
        if (v181)
        {
          v182 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v211, v181);
          v177 = (char *)v209;
          v175 = v210;
        }
        else
        {
          v182 = 0;
        }
        v183 = &v182[8 * v178];
        *(_QWORD *)v183 = *(_QWORD *)(v174 + 8 * v162);
        v176 = v183 + 8;
        while (v175 != v177)
        {
          v184 = *((_QWORD *)v175 - 1);
          v175 -= 8;
          *((_QWORD *)v183 - 1) = v184;
          v183 -= 8;
        }
        v209 = v183;
        v210 = v176;
        v211 = &v182[8 * v181];
        if (v177)
          operator delete(v177);
      }
      else
      {
        *(_QWORD *)v210 = *(_QWORD *)(v215.__r_.__value_.__r.__words[0] + 8 * v162);
        v176 = v175 + 8;
      }
      v210 = v176;
    }
    v185 = (unint64_t *)v212;
    v186 = *(_QWORD *)v212;
    if (*(_QWORD *)v212)
    {
      v187 = 0;
      v188 = 0;
      do
      {
        if (v185[1])
        {
          v189 = 0;
          do
          {
            if (v185[2])
            {
              v190 = 0;
              v191 = v187;
              do
              {
                if (v185[3])
                {
                  v192 = 0;
                  do
                  {
                    if (v185[4])
                    {
                      v193 = 0;
                      do
                      {
                        if (v185[5])
                        {
                          v194 = 0;
                          do
                          {
                            v195 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::operator[](&Data, *(_QWORD *)v209 * v188+ *((_QWORD *)v209 + 1) * v189+ *((_QWORD *)v209 + 2) * v190+ *((_QWORD *)v209 + 3) * v192+ *((_QWORD *)v209 + 4) * v193+ *((_QWORD *)v209 + 5) * v194);
                            *((_WORD *)v203 + v191) = *v195;
                            v187 = v191 + 1;
                            ++v194;
                            v185 = (unint64_t *)v212;
                            ++v191;
                          }
                          while (v194 < *((_QWORD *)v212 + 5));
                          v191 = v187;
                        }
                        else
                        {
                          v187 = v191;
                        }
                        ++v193;
                      }
                      while (v193 < v185[4]);
                    }
                    else
                    {
                      v187 = v191;
                    }
                    ++v192;
                    v191 = v187;
                  }
                  while (v192 < v185[3]);
                }
                else
                {
                  v187 = v191;
                }
                ++v190;
                v191 = v187;
              }
              while (v190 < v185[2]);
            }
            ++v189;
          }
          while (v189 < v185[1]);
          v186 = *v185;
          a6 = v198;
        }
        ++v188;
      }
      while (v188 < v186);
    }
    *(_DWORD *)a6 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a6 + 8), (char *)&unk_2069A5097);
    if (v209)
    {
      v210 = (char *)v209;
      operator delete(v209);
    }
    if (v212)
    {
      v213 = (char *)v212;
      operator delete(v212);
    }
    v71 = (void *)v215.__r_.__value_.__r.__words[0];
    if (!v215.__r_.__value_.__r.__words[0])
    {
LABEL_282:
      if (v201.__r_.__value_.__r.__words[0])
      {
        v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
        operator delete(v201.__r_.__value_.__l.__data_);
      }
      v50 = (char *)v203;
      if (!*(_DWORD *)a6)
      {
        v112 = a1;
        v113 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>();
        v114 = a5;
        if (*(char *)(a1 + 103) < 0)
          goto LABEL_147;
        goto LABEL_289;
      }
      goto LABEL_285;
    }
    v215.__r_.__value_.__l.__size_ = v215.__r_.__value_.__r.__words[0];
LABEL_281:
    operator delete(v71);
    goto LABEL_282;
  }
  if (__val != 9)
  {
    if (__val != 14)
    {
      *(_DWORD *)a6 = 13;
      v45 = a6 + 8;
      std::to_string(&v215, __val);
      v46 = std::string::insert(&v215, 0, "Dtype ");
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v201.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      v48 = std::string::append(&v201, "not implemented for weight rewrite");
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      *(_QWORD *)(v45 + 16) = *((_QWORD *)&v48->__r_.__value_.__l + 2);
      *(_OWORD *)v45 = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v201.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_297;
      v50 = (char *)v215.__r_.__value_.__r.__words[0];
      goto LABEL_287;
    }
    v203 = 0;
    v204 = 0;
    v205 = 0;
    std::vector<unsigned char>::reserve((unint64_t *)&v203, v25);
    v201.__r_.__value_.__s.__data_[0] = 0;
    if (v25 <= v204 - (_BYTE *)v203)
    {
      if (v25 < v204 - (_BYTE *)v203)
        v204 = (char *)v203 + v25;
    }
    else
    {
      std::vector<unsigned char>::__append(&v203, v25 - (v204 - (_BYTE *)v203), &v201);
    }
    Data = MIL::IRTensorValue::GetDataView<unsigned char>();
    v217 = v57;
    v58 = *(unsigned __int8 *)(v200 + 24);
    memset(&v201, 0, sizeof(v201));
    if (v58)
    {
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v201, (char *)__p, (uint64_t)v207, (v207 - (_BYTE *)__p) >> 3);
      v59 = *(unsigned __int8 *)(v200 + 8);
      if (!*(_BYTE *)(v200 + 8))
        goto LABEL_77;
      v60 = v59 - 1;
      v61 = v201.__r_.__value_.__r.__words[0];
      if (v59 - 1 >= (uint64_t)(v201.__r_.__value_.__l.__size_ - v201.__r_.__value_.__r.__words[0]) >> 3)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      if (*(_QWORD *)(v201.__r_.__value_.__r.__words[0] + 8 * v60) != 1)
      {
LABEL_77:
        *(_DWORD *)a6 = 13;
        std::to_string(&v215, v59);
        v66 = std::string::insert(&v215, 0, "Illegal weight dimension to split at index: ");
        v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        *(_QWORD *)(a6 + 24) = *((_QWORD *)&v66->__r_.__value_.__l + 2);
        *(_OWORD *)(a6 + 8) = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_210;
        v68 = (void *)v215.__r_.__value_.__r.__words[0];
        goto LABEL_209;
      }
      *(_QWORD *)(v201.__r_.__value_.__r.__words[0] + 8 * v60) = *(_QWORD *)(v200 + 16);
      *(_QWORD *)(v61 + 8 * v59) /= *(_QWORD *)(v200 + 16);
      v62 = &v201;
    }
    else
    {
      v62 = (std::string *)&__p;
    }
    memset(&v215, 0, sizeof(v215));
    v212 = (void *)1;
    std::vector<unsigned long long>::assign(&v215.__r_.__value_.__l.__data_, 6uLL, &v212);
    v115 = (_QWORD *)v62->__r_.__value_.__r.__words[0];
    v116 = *(_QWORD *)(v62->__r_.__value_.__r.__words[0] + 40);
    v117 = (_QWORD *)v215.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v215.__r_.__value_.__r.__words[0] + 32) = v116;
    v118 = v115[4] * v116;
    v117[3] = v118;
    v119 = v115[3] * v118;
    v117[2] = v119;
    v120 = v115[2] * v119;
    v117[1] = v120;
    *v117 = v115[1] * v120;
    v212 = 0;
    v213 = 0;
    v214 = 0;
    std::vector<unsigned long long>::reserve(&v212, 6uLL);
    v209 = 0;
    v210 = 0;
    v211 = 0;
    std::vector<unsigned long long>::reserve(&v209, 6uLL);
    for (j = 0; j != 6; ++j)
    {
      v122 = *(unsigned __int8 *)(v200 + j);
      v123 = v62->__r_.__value_.__r.__words[0];
      v124 = v213;
      if (v213 >= v214)
      {
        v126 = (char *)v212;
        v127 = (v213 - (_BYTE *)v212) >> 3;
        v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 61)
          goto LABEL_308;
        v129 = v214 - (_BYTE *)v212;
        if ((v214 - (_BYTE *)v212) >> 2 > v128)
          v128 = v129 >> 2;
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v128;
        if (v130)
        {
          v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v214, v130);
          v126 = (char *)v212;
          v124 = v213;
        }
        else
        {
          v131 = 0;
        }
        v132 = &v131[8 * v127];
        *(_QWORD *)v132 = *(_QWORD *)(v123 + 8 * v122);
        v125 = v132 + 8;
        while (v124 != v126)
        {
          v133 = *((_QWORD *)v124 - 1);
          v124 -= 8;
          *((_QWORD *)v132 - 1) = v133;
          v132 -= 8;
        }
        v212 = v132;
        v213 = v125;
        v214 = &v131[8 * v130];
        if (v126)
          operator delete(v126);
      }
      else
      {
        *(_QWORD *)v213 = *(_QWORD *)(v123 + 8 * v122);
        v125 = v124 + 8;
      }
      v213 = v125;
      v134 = v215.__r_.__value_.__r.__words[0];
      v135 = v210;
      if (v210 >= v211)
      {
        v137 = (char *)v209;
        v138 = (v210 - (_BYTE *)v209) >> 3;
        v139 = v138 + 1;
        if ((unint64_t)(v138 + 1) >> 61)
LABEL_308:
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v140 = v211 - (_BYTE *)v209;
        if ((v211 - (_BYTE *)v209) >> 2 > v139)
          v139 = v140 >> 2;
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v139;
        if (v141)
        {
          v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v211, v141);
          v137 = (char *)v209;
          v135 = v210;
        }
        else
        {
          v142 = 0;
        }
        v143 = &v142[8 * v138];
        *(_QWORD *)v143 = *(_QWORD *)(v134 + 8 * v122);
        v136 = v143 + 8;
        while (v135 != v137)
        {
          v144 = *((_QWORD *)v135 - 1);
          v135 -= 8;
          *((_QWORD *)v143 - 1) = v144;
          v143 -= 8;
        }
        v209 = v143;
        v210 = v136;
        v211 = &v142[8 * v141];
        if (v137)
          operator delete(v137);
      }
      else
      {
        *(_QWORD *)v210 = *(_QWORD *)(v215.__r_.__value_.__r.__words[0] + 8 * v122);
        v136 = v135 + 8;
      }
      v210 = v136;
    }
    v145 = (unint64_t *)v212;
    v146 = *(_QWORD *)v212;
    if (*(_QWORD *)v212)
    {
      v147 = 0;
      v148 = 0;
      do
      {
        if (v145[1])
        {
          v149 = 0;
          do
          {
            if (v145[2])
            {
              v150 = 0;
              do
              {
                if (v145[3])
                {
                  v151 = 0;
                  do
                  {
                    if (v145[4])
                    {
                      v152 = 0;
                      do
                      {
                        if (v145[5])
                        {
                          v153 = 0;
                          do
                          {
                            v154 = (_BYTE *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::operator[](&Data, *(_QWORD *)v209 * v148+ *((_QWORD *)v209 + 1) * v149+ *((_QWORD *)v209 + 2) * v150+ *((_QWORD *)v209 + 3) * v151+ *((_QWORD *)v209 + 4) * v152+ *((_QWORD *)v209 + 5) * v153);
                            *((_BYTE *)v203 + v147 + v153++) = *v154;
                            v145 = (unint64_t *)v212;
                          }
                          while (v153 < *((_QWORD *)v212 + 5));
                          v147 += v153;
                        }
                        ++v152;
                      }
                      while (v152 < v145[4]);
                    }
                    ++v151;
                  }
                  while (v151 < v145[3]);
                }
                ++v150;
              }
              while (v150 < v145[2]);
            }
            ++v149;
          }
          while (v149 < v145[1]);
          v146 = *v145;
        }
        ++v148;
      }
      while (v148 < v146);
    }
    a6 = v198;
    *(_DWORD *)v198 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v198 + 8), (char *)&unk_2069A5097);
    if (v209)
    {
      v210 = (char *)v209;
      operator delete(v209);
    }
    if (v212)
    {
      v213 = (char *)v212;
      operator delete(v212);
    }
    v68 = (void *)v215.__r_.__value_.__r.__words[0];
    if (!v215.__r_.__value_.__r.__words[0])
    {
LABEL_210:
      if (v201.__r_.__value_.__r.__words[0])
      {
        v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
        operator delete(v201.__r_.__value_.__l.__data_);
      }
      v50 = (char *)v203;
      if (!*(_DWORD *)a6)
      {
        v112 = a1;
        v113 = MIL::Blob::StorageWriter::WriteData<unsigned char>();
        v114 = a5;
        if (*(char *)(a1 + 103) < 0)
          goto LABEL_147;
        goto LABEL_289;
      }
      goto LABEL_285;
    }
    v215.__r_.__value_.__l.__size_ = v215.__r_.__value_.__r.__words[0];
LABEL_209:
    operator delete(v68);
    goto LABEL_210;
  }
  v203 = 0;
  v204 = 0;
  v205 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&v203, v25);
  v201.__r_.__value_.__s.__data_[0] = 0;
  if (v25 <= v204 - (_BYTE *)v203)
  {
    if (v25 < v204 - (_BYTE *)v203)
      v204 = (char *)v203 + v25;
  }
  else
  {
    std::vector<unsigned char>::__append(&v203, v25 - (v204 - (_BYTE *)v203), &v201);
  }
  Data = MIL::IRTensorValue::GetDataView<signed char>();
  v217 = v51;
  v52 = *(unsigned __int8 *)(v200 + 24);
  memset(&v201, 0, sizeof(v201));
  if (v52)
  {
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v201, (char *)__p, (uint64_t)v207, (v207 - (_BYTE *)__p) >> 3);
    v53 = *(unsigned __int8 *)(v200 + 8);
    if (!*(_BYTE *)(v200 + 8))
      goto LABEL_75;
    v54 = v53 - 1;
    v55 = v201.__r_.__value_.__r.__words[0];
    if (v53 - 1 >= (uint64_t)(v201.__r_.__value_.__l.__size_ - v201.__r_.__value_.__r.__words[0]) >> 3)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    if (*(_QWORD *)(v201.__r_.__value_.__r.__words[0] + 8 * v54) != 1)
    {
LABEL_75:
      *(_DWORD *)a6 = 13;
      std::to_string(&v215, v53);
      v63 = std::string::insert(&v215, 0, "Illegal weight dimension to split at index: ");
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      *(_QWORD *)(a6 + 24) = *((_QWORD *)&v63->__r_.__value_.__l + 2);
      *(_OWORD *)(a6 + 8) = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_143;
      v65 = (void *)v215.__r_.__value_.__r.__words[0];
      goto LABEL_142;
    }
    *(_QWORD *)(v201.__r_.__value_.__r.__words[0] + 8 * v54) = *(_QWORD *)(v200 + 16);
    *(_QWORD *)(v55 + 8 * v53) /= *(_QWORD *)(v200 + 16);
    v56 = &v201;
  }
  else
  {
    v56 = (std::string *)&__p;
  }
  memset(&v215, 0, sizeof(v215));
  v212 = (void *)1;
  std::vector<unsigned long long>::assign(&v215.__r_.__value_.__l.__data_, 6uLL, &v212);
  v72 = (_QWORD *)v56->__r_.__value_.__r.__words[0];
  v73 = *(_QWORD *)(v56->__r_.__value_.__r.__words[0] + 40);
  v74 = (_QWORD *)v215.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v215.__r_.__value_.__r.__words[0] + 32) = v73;
  v75 = v72[4] * v73;
  v74[3] = v75;
  v76 = v72[3] * v75;
  v74[2] = v76;
  v77 = v72[2] * v76;
  v74[1] = v77;
  *v74 = v72[1] * v77;
  v212 = 0;
  v213 = 0;
  v214 = 0;
  std::vector<unsigned long long>::reserve(&v212, 6uLL);
  v209 = 0;
  v210 = 0;
  v211 = 0;
  std::vector<unsigned long long>::reserve(&v209, 6uLL);
  for (k = 0; k != 6; ++k)
  {
    v79 = *(unsigned __int8 *)(v200 + k);
    v80 = v56->__r_.__value_.__r.__words[0];
    v81 = v213;
    if (v213 >= v214)
    {
      v83 = (char *)v212;
      v84 = (v213 - (_BYTE *)v212) >> 3;
      v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 61)
        goto LABEL_307;
      v86 = v214 - (_BYTE *)v212;
      if ((v214 - (_BYTE *)v212) >> 2 > v85)
        v85 = v86 >> 2;
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
        v87 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v87 = v85;
      if (v87)
      {
        v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v214, v87);
        v83 = (char *)v212;
        v81 = v213;
      }
      else
      {
        v88 = 0;
      }
      v89 = &v88[8 * v84];
      *(_QWORD *)v89 = *(_QWORD *)(v80 + 8 * v79);
      v82 = v89 + 8;
      while (v81 != v83)
      {
        v90 = *((_QWORD *)v81 - 1);
        v81 -= 8;
        *((_QWORD *)v89 - 1) = v90;
        v89 -= 8;
      }
      v212 = v89;
      v213 = v82;
      v214 = &v88[8 * v87];
      if (v83)
        operator delete(v83);
    }
    else
    {
      *(_QWORD *)v213 = *(_QWORD *)(v80 + 8 * v79);
      v82 = v81 + 8;
    }
    v213 = v82;
    v91 = v215.__r_.__value_.__r.__words[0];
    v92 = v210;
    if (v210 >= v211)
    {
      v94 = (char *)v209;
      v95 = (v210 - (_BYTE *)v209) >> 3;
      v96 = v95 + 1;
      if ((unint64_t)(v95 + 1) >> 61)
LABEL_307:
        std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
      v97 = v211 - (_BYTE *)v209;
      if ((v211 - (_BYTE *)v209) >> 2 > v96)
        v96 = v97 >> 2;
      if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
        v98 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v98 = v96;
      if (v98)
      {
        v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v211, v98);
        v94 = (char *)v209;
        v92 = v210;
      }
      else
      {
        v99 = 0;
      }
      v100 = &v99[8 * v95];
      *(_QWORD *)v100 = *(_QWORD *)(v91 + 8 * v79);
      v93 = v100 + 8;
      while (v92 != v94)
      {
        v101 = *((_QWORD *)v92 - 1);
        v92 -= 8;
        *((_QWORD *)v100 - 1) = v101;
        v100 -= 8;
      }
      v209 = v100;
      v210 = v93;
      v211 = &v99[8 * v98];
      if (v94)
        operator delete(v94);
    }
    else
    {
      *(_QWORD *)v210 = *(_QWORD *)(v215.__r_.__value_.__r.__words[0] + 8 * v79);
      v93 = v92 + 8;
    }
    v210 = v93;
  }
  v102 = (unint64_t *)v212;
  v103 = *(_QWORD *)v212;
  if (*(_QWORD *)v212)
  {
    v104 = 0;
    v105 = 0;
    do
    {
      if (v102[1])
      {
        v106 = 0;
        do
        {
          if (v102[2])
          {
            v107 = 0;
            do
            {
              if (v102[3])
              {
                v108 = 0;
                do
                {
                  if (v102[4])
                  {
                    v109 = 0;
                    do
                    {
                      if (v102[5])
                      {
                        v110 = 0;
                        do
                        {
                          v111 = (_BYTE *)MIL::Util::Span<signed char const,18446744073709551615ul>::operator[](&Data, *(_QWORD *)v209 * v105+ *((_QWORD *)v209 + 1) * v106+ *((_QWORD *)v209 + 2) * v107+ *((_QWORD *)v209 + 3) * v108+ *((_QWORD *)v209 + 4) * v109+ *((_QWORD *)v209 + 5) * v110);
                          *((_BYTE *)v203 + v104 + v110++) = *v111;
                          v102 = (unint64_t *)v212;
                        }
                        while (v110 < *((_QWORD *)v212 + 5));
                        v104 += v110;
                      }
                      ++v109;
                    }
                    while (v109 < v102[4]);
                  }
                  ++v108;
                }
                while (v108 < v102[3]);
              }
              ++v107;
            }
            while (v107 < v102[2]);
          }
          ++v106;
        }
        while (v106 < v102[1]);
        v103 = *v102;
      }
      ++v105;
    }
    while (v105 < v103);
  }
  a6 = v198;
  *(_DWORD *)v198 = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v198 + 8), (char *)&unk_2069A5097);
  if (v209)
  {
    v210 = (char *)v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = (char *)v212;
    operator delete(v212);
  }
  v65 = (void *)v215.__r_.__value_.__r.__words[0];
  if (v215.__r_.__value_.__r.__words[0])
  {
    v215.__r_.__value_.__l.__size_ = v215.__r_.__value_.__r.__words[0];
LABEL_142:
    operator delete(v65);
  }
LABEL_143:
  if (v201.__r_.__value_.__r.__words[0])
  {
    v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
    operator delete(v201.__r_.__value_.__l.__data_);
  }
  v50 = (char *)v203;
  if (!*(_DWORD *)a6)
  {
    v112 = a1;
    v113 = MIL::Blob::StorageWriter::WriteData<unsigned char>();
    v114 = a5;
    if (*(char *)(a1 + 103) < 0)
    {
LABEL_147:
      std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)(v112 + 80), *(_QWORD *)(v112 + 88));
      v114 = a5;
LABEL_290:
      v202 = v113;
      if (*(char *)(v114 + 23) < 0)
      {
        operator delete(*(void **)v114);
        v114 = a5;
        v113 = v202;
      }
      *(std::string *)v114 = v201;
      *(_QWORD *)(v114 + 24) = v113;
      if (*(char *)(a6 + 31) < 0)
        operator delete(*(void **)(a6 + 8));
      if (v203)
      {
        v204 = (char *)v203;
        operator delete(v203);
      }
      *(_DWORD *)a6 = 0;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a6 + 8), (char *)&unk_2069A5097);
      goto LABEL_297;
    }
LABEL_289:
    v201 = *(std::string *)(v112 + 80);
    goto LABEL_290;
  }
LABEL_285:
  if (v50)
  {
    v204 = v50;
LABEL_287:
    operator delete(v50);
  }
LABEL_297:
  v38 = __p;
  if (!__p)
    return;
  v207 = (char *)__p;
LABEL_299:
  operator delete(v38);
}

void sub_2068F9874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (*(char *)(a12 + 31) < 0)
    operator delete(*(void **)(a12 + 8));
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void MilTranslator::WeightTranslator::WriteConstOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  void *__p;
  char v25;
  std::__shared_weak_count *v26;
  std::string v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count_vtbl *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;

  MIL::Builder::BlockBuilder::GetContext(*(MIL::Builder::BlockBuilder **)(a1 + 136));
  std::string::basic_string[abi:ne180100]<0>(&v31, "const");
  v29 = 0;
  v30 = 0;
  MIL::Builder::BlockBuilder::AddOperation();
  if (SHIBYTE(v33) < 0)
    operator delete(v31);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v31, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  MIL::IRTensorValueType::Make();
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v27 = *(std::string *)a4;
  MIL::Builder::OperationBuilder::AddOutput();
  v6 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  MIL::IRTensorValueType::MakeValueFromBlobFile();
  std::string::basic_string[abi:ne180100]<0>(&__p, "val");
  if (v31)
  {
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v31;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEB178;
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v10;
  }
  else
  {
    v9 = 0;
  }
  v23 = v9;
  v31 = 0;
  MIL::Builder::OperationBuilder::SetAttribute();
  v11 = v26;
  if (v26)
  {
    v12 = (unint64_t *)&v26->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v23)
  {
    v14 = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v25 < 0)
    operator delete(__p);
  v16 = v31;
  v31 = 0;
  if (v16)
    (*((void (**)(std::__shared_weak_count_vtbl *))v16->~__shared_weak_count + 1))(v16);
  v17 = v34;
  if (v34)
  {
    v18 = (unint64_t *)&v34->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v35;
  if (v35)
  {
    v21 = (unint64_t *)&v35->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_2068F9DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v25 - 80);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v25 - 64);
  _Unwind_Resume(a1);
}

void sub_2068F9E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (*(char *)(v13 - 81) < 0)
    operator delete(*(void **)(v13 - 104));
  JUMPOUT(0x2068F9E60);
}

void sub_2068F9E90()
{
  JUMPOUT(0x2068F9E60);
}

uint64_t std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>::~pair(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<MIL::Fp16>::resize(uint64_t a1, unint64_t a2, _WORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<MIL::Fp16>::__append((void **)a1, a2 - v3, a3);
  }
}

std::string *std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(__int128 *)((char *)a2 + 24);
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v7;
  v8 = (std::string *)((char *)this + 56);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  this[3].__r_.__value_.__l.__size_ = *((_QWORD *)a3 + 3);
  return this;
}

void sub_2068F9FB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::pair[abi:ne180100]<MilTranslator::WeightTranslator::WeightFileInfo&,std::vector<unsigned long long>&,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  std::string::size_type v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[0] = v7;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&this[1].__r_.__value_.__l.__size_, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  return this;
}

void sub_2068FA048(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>::pair[abi:ne180100]<true,0>(std::string *a1, __int128 *a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;

  v5 = (std::string *)((char *)std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::pair[abi:ne180100](a1, a2)+ 56);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_2068FA0B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::~pair(v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[0] = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&this[1].__r_.__value_.__l.__size_, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  return this;
}

void sub_2068FA138(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>,0>(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

MIL::Blob::StorageWriter *std::unique_ptr<MIL::Blob::StorageWriter>::reset[abi:ne180100](MIL::Blob::StorageWriter **a1, MIL::Blob::StorageWriter *a2)
{
  MIL::Blob::StorageWriter *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Blob::StorageWriter::~StorageWriter(result);
    JUMPOUT(0x20BCFF140);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::find<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher::operator()((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>::operator()[abi:ne180100](v12, v11 + 16, a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t i;
  unint64_t result;
  char v6;

  v3 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v6, a2);
  for (i = 0; i != 6; ++i)
    v3 ^= MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher::operator()(std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const&)const::filter[i]
        * *(unsigned __int8 *)(a2 + 24 + i);
  result = v3 ^ *(unsigned __int8 *)(a2 + 48);
  if (*(_BYTE *)(a2 + 48))
    result ^= (29 * *(_QWORD *)(a2 + 40)) ^ (23 * *(unsigned __int8 *)(a2 + 32));
  return result;
}

BOOL std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *i;

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, v10, v5))
      return MilTranslator::WeightTranslator::WeightRewriteDescription::operator==((uint64_t)(a2 + 24), (uint64_t)(a3 + 24));
    return 0;
  }
  if ((_DWORD)v4)
  {
    for (i = a2; *i == *v10; ++i)
    {
      ++v10;
      if (!--v4)
        return MilTranslator::WeightTranslator::WeightRewriteDescription::operator==((uint64_t)(a2 + 24), (uint64_t)(a3 + 24));
    }
    return 0;
  }
  return MilTranslator::WeightTranslator::WeightRewriteDescription::operator==((uint64_t)(a2 + 24), (uint64_t)(a3 + 24));
}

BOOL MilTranslator::WeightTranslator::WeightRewriteDescription::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v4;

  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(unsigned __int16 *)(a1 + 4) != *(unsigned __int16 *)(a2 + 4))
    return 0;
  if (*(_BYTE *)(a1 + 24))
    v4 = *(_BYTE *)(a2 + 24) == 0;
  else
    v4 = 1;
  if (v4)
    return (*(_BYTE *)(a1 + 24) != 0) == (*(_BYTE *)(a2 + 24) != 0);
  if (*(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
    return 0;
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::__emplace_unique_key_args<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher::operator()(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>::operator()[abi:ne180100](a1 + 32, i + 16, a2))
          {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::__construct_node_hash<std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_2068FA824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::__construct_node_hash<std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x68uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2068FA898(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(__int128 *)((char *)a2 + 24);
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  v6 = *(__int128 *)((char *)a2 + 56);
  this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 9);
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v6;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 7) = 0;
  this[3].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 10);
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::find<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = MilTranslator::WeightTranslator::WeightInfoShapePairHasher::operator()((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        if (std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>::operator()[abi:ne180100](v12, (uint64_t)(v11 + 2), (uint64_t)a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t MilTranslator::WeightTranslator::WeightInfoShapePairHasher::operator()(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t *v4;
  unint64_t result;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;

  v3 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v11, (uint64_t)a2);
  v4 = (uint64_t *)a2[4];
  result = a2[3] ^ v3;
  v6 = (uint64_t *)a2[5];
  if (v4 != v6)
  {
    v7 = 0;
    v8 = (char *)&MilTranslator::WeightTranslator::WeightInfoShapePairHasher::operator()(std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const&)const::filter;
    do
    {
      v9 = -24 * (v7 / 6);
      v10 = *v4++;
      ++v7;
      result ^= v10 * *(unsigned int *)&v8[v9];
      v8 += 4;
    }
    while (v4 != v6);
  }
  return result;
}

BOOL std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  const void *v6;
  size_t v7;
  const void *v8;

  result = MilTranslator::WeightTranslator::WeightFileInfo::operator==((unsigned __int8 *)a2, (unsigned __int8 *)a3);
  if (result)
  {
    v6 = *(const void **)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 40) - (_QWORD)v6;
    v8 = *(const void **)(a3 + 32);
    return v7 == *(_QWORD *)(a3 + 40) - (_QWORD)v8 && memcmp(v6, v8, v7) == 0;
  }
  return result;
}

BOOL MilTranslator::WeightTranslator::WeightFileInfo::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *i;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return *((_QWORD *)a1 + 3) == *((_QWORD *)v6 + 3);
    return 0;
  }
  if (a1[23])
  {
    for (i = a1; *i == *a2; ++i)
    {
      ++a2;
      if (!--v2)
        return *((_QWORD *)a1 + 3) == *((_QWORD *)v6 + 3);
    }
    return 0;
  }
  return *((_QWORD *)a1 + 3) == *((_QWORD *)v6 + 3);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::__emplace_unique_key_args<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = MilTranslator::WeightTranslator::WeightInfoShapePairHasher::operator()(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), (uint64_t)a2))
            {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::__construct_node_hash<std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v14 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v14;
}

void sub_2068FAE68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::__construct_node_hash<std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  __n128 result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x60uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::pair[abi:ne180100]((std::string *)(v8 + 16), (__int128 *)a3);
  result = *(__n128 *)(a3 + 56);
  *(__n128 *)(v8 + 72) = result;
  *((_QWORD *)v8 + 11) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2068FAEFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__shared_ptr_pointer<MIL::IRTensorValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<MIL::Fp16>::__append(void **a1, unint64_t a2, _WORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _WORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  __int16 v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_WORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 1)
  {
    if (a2)
    {
      v16 = 2 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 2;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 1);
    if (v11 < 0)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 1;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 > v11)
      v11 = v13;
    if (v13 >= 0x7FFFFFFFFFFFFFFELL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[2 * v12];
    v19 = &v18[2 * a2];
    v20 = 2 * a2;
    v21 = v18;
    do
    {
      *(_WORD *)v21 = *a3;
      v21 += 2;
      v20 -= 2;
    }
    while (v20);
    v22 = &v15[2 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 2)
    {
      v25 = *((_WORD *)i - 1);
      *((_WORD *)v18 - 1) = v25;
      v18 -= 2;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

char *std::vector<unsigned long long>::assign(char **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 3;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 3;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_QWORD *)v16 = *a3;
        v16 += 8;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[8 * a2];
    }
    else
    {
      v17 = &v13[8 * (a2 - v14)];
      v18 = 8 * a2 - 8 * v14;
      do
      {
        *(_QWORD *)v13 = *a3;
        v13 += 8;
        v18 -= 8;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[8 * a2];
    v12 = 8 * a2;
    do
    {
      *(_QWORD *)v10 = *a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void std::vector<unsigned char>::__append(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

char *std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void ANEMachineIR::H2021::Validators::ValidateConst(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateConst(this, a2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateBaseNePool@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2022::Validators::ValidateNeAvgPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNePool(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidateNeMaxPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNePool(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidateNeMinPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNePool(this, a2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateBasePePool@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2022::Validators::ValidatePeAvgPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePePool(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeMaxPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePePool(this, a2);
}

void ANEMachineIR::H2022::Validators::ValidatePeMinPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePePool(this, a2);
}

void ANEMachineIR::Validators::ValidateLiveTensorSize(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  std::string *v56;
  std::string::size_type size;
  _QWORD *v58;
  _QWORD *v59;
  std::string *v60;
  std::string::size_type v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  unint64_t *v71;
  _QWORD *v72;
  void *v73;
  char v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::string v77;
  std::string v78;
  void *__p;
  char v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  _QWORD v83[11];
  char v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  _QWORD **v89;
  _QWORD **v90;
  uint64_t v91;

  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v90 = 0;
  v91 = 0;
  v89 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v89, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3);
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v10 = v90 - v89;
  if (v90 == v89)
    goto LABEL_59;
  v72 = a1;
  v11 = 0;
  if (v10 <= 1)
    v12 = 1;
  else
    v12 = v90 - v89;
  while (1)
  {
    if (v11 >= v90 - v89)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    if (!(*(uint64_t (**)(_QWORD *))(*v89[v11] + 16))(v89[v11]))
      break;
    if (v11 >= v90 - v89)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v13 = MIL::IRDimension::AsConstant((MIL::IRDimension *)v89[v11]);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
    v15 = v14;
    v16 = v87;
    if (v87 >= v88)
    {
      v18 = v86;
      v19 = v87 - v86;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 61)
        std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
      v21 = (char *)v88 - (char *)v86;
      if (((char *)v88 - (char *)v86) >> 2 > v20)
        v20 = v21 >> 2;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v88, v22);
        v18 = v86;
        v16 = v87;
      }
      else
      {
        v23 = 0;
      }
      v24 = (uint64_t *)&v23[8 * v19];
      *v24 = v15;
      v17 = v24 + 1;
      while (v16 != v18)
      {
        v25 = *--v16;
        *--v24 = v25;
      }
      v86 = v24;
      v87 = v17;
      v88 = (uint64_t *)&v23[8 * v22];
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v87 = v14;
      v17 = v16 + 1;
    }
    v87 = v17;
    if (++v11 == v12)
    {
      v27 = (char *)v17 - (char *)v86;
      v26 = v17 == v86;
      a1 = v72;
      if (v26)
        goto LABEL_59;
      v28 = v27 >> 3;
      v29 = (v27 >> 3) - 1;
      if ((unint64_t)v86[v29] > 0x10000)
        goto LABEL_27;
      if ((unint64_t)v27 < 9)
        goto LABEL_59;
      if ((unint64_t)*v86 > 0x1000)
      {
        v30 = 0;
        v29 = 0;
        goto LABEL_60;
      }
      if ((unint64_t)v27 < 0x11)
        goto LABEL_59;
      v29 = v28 - 2;
      if ((unint64_t)v86[v28 - 2] > 0x4000)
        goto LABEL_27;
      if ((unint64_t)v27 < 0x19)
        goto LABEL_59;
      v29 = v28 - 3;
      if ((unint64_t)v86[v28 - 3] > 0x1000)
      {
LABEL_27:
        v30 = 0;
        goto LABEL_60;
      }
      if ((unint64_t)v27 >= 0x21 && (unint64_t)v86[1] > 0x4000)
      {
        v30 = 0;
        v29 = 1;
        goto LABEL_60;
      }
LABEL_59:
      v29 = 0;
      v30 = 1;
LABEL_60:
      if ((v30 & 1) != 0)
      {
        MIL::ValidationResult::ValidationResult(a5);
        goto LABEL_103;
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v83);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Dimension extent invalid for parameter ", 39);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"\"", 1);
      v50 = *(char *)(a3 + 23);
      if (v50 >= 0)
        v51 = a3;
      else
        v51 = *(_QWORD *)a3;
      if (v50 >= 0)
        v52 = *(unsigned __int8 *)(a3 + 23);
      else
        v52 = *(_QWORD *)(a3 + 8);
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v51, v52);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"\"", 1);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" at index ", 10);
      std::to_string(&v78, v29);
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v78;
      else
        v56 = (std::string *)v78.__r_.__value_.__r.__words[0];
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
      else
        size = v78.__r_.__value_.__l.__size_;
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, size);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" into tensor of rank ", 21);
      std::to_string(&v77, v10);
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = &v77;
      else
        v60 = (std::string *)v77.__r_.__value_.__r.__words[0];
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
      else
        v61 = v77.__r_.__value_.__l.__size_;
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" of \"", 5);
      v64 = *(char *)(a4 + 23);
      if (v64 >= 0)
        v65 = a4;
      else
        v65 = *(_QWORD *)a4;
      if (v64 >= 0)
        v66 = *(unsigned __int8 *)(a4 + 23);
      else
        v66 = *(_QWORD *)(a4 + 8);
      v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, v65, v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\".", 2);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      v68 = (std::__shared_weak_count *)a1[1];
      v75 = *a1;
      v76 = v68;
      if (v68)
      {
        p_shared_owners = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldxr(p_shared_owners);
        while (__stxr(v70 + 1, p_shared_owners));
      }
      std::stringbuf::str();
      MEMORY[0x20BCFEAD4](a5, &v75, 315, &v73);
      if (v74 < 0)
        operator delete(v73);
      v45 = v76;
      if (v76)
      {
        v71 = (unint64_t *)&v76->__shared_owners_;
        do
          v47 = __ldaxr(v71);
        while (__stlxr(v47 - 1, v71));
        goto LABEL_97;
      }
      goto LABEL_99;
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v83);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Shape is not statically known at dimension ", 43);
  v31 = (_QWORD *)std::ostream::operator<<();
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" for parameter \"", 16);
  v33 = *(char *)(a3 + 23);
  if (v33 >= 0)
    v34 = a3;
  else
    v34 = *(_QWORD *)a3;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a3 + 23);
  else
    v35 = *(_QWORD *)(a3 + 8);
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
  v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\" in operation \"", 16);
  v38 = *(char *)(a4 + 23);
  if (v38 >= 0)
    v39 = a4;
  else
    v39 = *(_QWORD *)a4;
  if (v38 >= 0)
    v40 = *(unsigned __int8 *)(a4 + 23);
  else
    v40 = *(_QWORD *)(a4 + 8);
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"\".", 2);
  v42 = (std::__shared_weak_count *)v72[1];
  v81 = *v72;
  v82 = v42;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  std::stringbuf::str();
  MEMORY[0x20BCFEAD4](a5, &v81, 302, &__p);
  if (v80 < 0)
    operator delete(__p);
  v45 = v82;
  if (v82)
  {
    v46 = (unint64_t *)&v82->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
LABEL_97:
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_99:
  v83[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v83 + *(_QWORD *)(v83[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v83[1] = MEMORY[0x24BEDB848] + 16;
  if (v84 < 0)
    operator delete((void *)v83[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BCFF0C8](&v85);
LABEL_103:
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_2068FBA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39)
{
  uint64_t v39;
  void *v41;
  void *v42;

  if (a36 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::ostringstream::~ostringstream((uint64_t)&a39);
  v41 = *(void **)(v39 - 136);
  if (v41)
  {
    *(_QWORD *)(v39 - 128) = v41;
    operator delete(v41);
  }
  v42 = *(void **)(v39 - 112);
  if (v42)
  {
    *(_QWORD *)(v39 - 104) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_2068FBBC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x20BCFF0C8](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BCFF0C8](a1 + 112);
  return a1;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x20BCFF020](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x20BCFF02C](v13);
  return a1;
}

void sub_2068FBD7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x20BCFF02C](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2068FBD5CLL);
}

void sub_2068FBDC4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_2068FBEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t ANEMachineIR::H2021::Validators::ValidateBaseNePool@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2021::Validators::ValidateNeAvgPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNePool(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidateNeMaxPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNePool(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidateNeMinPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidateNePool(this, a2);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateBasePePool@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2021::Validators::ValidatePeAvgPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePePool(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeMaxPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePePool(this, a2);
}

void ANEMachineIR::H2021::Validators::ValidatePeMinPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  ANEMachineIR::Validators::ValidatePePool(this, a2);
}

_QWORD *MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (***a3)()@<X8>)
{
  _QWORD ***v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  _QWORD ***v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  int v28;
  void **v30;
  uint64_t (**v31)();
  uint64_t ParameterValue;
  float v33;
  float *v34;
  uint64_t i;
  float v36;
  MIL::Fp16 *v37;
  int v38;
  uint64_t (***v39)();
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t (**v46)();
  uint64_t v47;
  float v48;
  float *v49;
  uint64_t j;
  float v51;
  MIL::Fp16 *v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  float v60;
  float *v61;
  uint64_t Float;
  uint64_t k;
  int v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int16 v70;
  uint64_t v71;
  float *v72;
  uint64_t v73;
  float v74;
  float *v75;
  int32x2_t v76;
  float32x2_t v77;
  _QWORD *result;
  uint64_t v79;
  float v80;
  _BYTE __p[32];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[24];
  __int16 v91;
  _QWORD v92[3];
  _QWORD *v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v92[0] = &off_24BFEB5A8;
  v93 = v92;
  v4 = (_QWORD ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  v5 = **v4;
  v6 = (*v4)[1];
  if (v5 != v6)
  {
    v7 = (void **)(a2 + 8);
LABEL_3:
    v8 = (_QWORD ***)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 56))(*v5);
    v9 = **v8;
    v10 = (*v8)[1];
    while (1)
    {
      if (v9 == v10)
      {
        v5 += 2;
        if (v5 != v6)
          goto LABEL_3;
        break;
      }
      v11 = *v9;
      v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 56))(*v9);
      v13 = *(char *)(v12 + 23);
      if (v13 < 0)
      {
        if (*(_QWORD *)(v12 + 8) != 4)
          goto LABEL_11;
        v12 = *(_QWORD *)v12;
      }
      else if (v13 != 4)
      {
        goto LABEL_11;
      }
      if (*(_DWORD *)v12 == 1970038130)
      {
        *(_DWORD *)__p = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_2069A5097);
        *(_DWORD *)a2 = 0;
        if (*(char *)(a2 + 31) < 0)
          operator delete(*v7);
        *(_OWORD *)v7 = *(_OWORD *)&__p[8];
        *(_QWORD *)(a2 + 24) = *(_QWORD *)&__p[24];
        v31 = &off_24BFEB218;
        goto LABEL_74;
      }
LABEL_11:
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
      v15 = *(char *)(v14 + 23);
      if (v15 < 0)
      {
        if (*(_QWORD *)(v14 + 8) != 6)
          goto LABEL_20;
        v14 = *(_QWORD *)v14;
      }
      else if (v15 != 6)
      {
        goto LABEL_20;
      }
      if (*(_DWORD *)v14 == 1701734764 && *(_WORD *)(v14 + 4) == 29281)
      {
        *(_DWORD *)__p = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_2069A5097);
        *(_DWORD *)a2 = 0;
        if (*(char *)(a2 + 31) < 0)
          operator delete(*v7);
        *(_OWORD *)v7 = *(_OWORD *)&__p[8];
        *(_QWORD *)(a2 + 24) = *(_QWORD *)&__p[24];
        v31 = &off_24BFEB2A8;
LABEL_74:
        *a3 = v31;
        a3[3] = (uint64_t (**)())a3;
        goto LABEL_129;
      }
LABEL_20:
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
      v18 = *(char *)(v17 + 23);
      if (v18 < 0)
      {
        if (*(_QWORD *)(v17 + 8) != 4)
          goto LABEL_26;
        v17 = *(_QWORD *)v17;
      }
      else if (v18 != 4)
      {
        goto LABEL_26;
      }
      if (*(_DWORD *)v17 == 1752064372)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "scale");
        ParameterValue = MIL::IROperation::TryGetParameterValue();
        v33 = 1.0;
        if (ParameterValue)
        {
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue))
          {
            v34 = (float *)MEMORY[0x20BCFEEAC]();
            if (v34)
              v33 = *v34;
          }
        }
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        *(_DWORD *)__p = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_2069A5097);
        *(_DWORD *)a2 = *(_DWORD *)__p;
        if (*(char *)(a2 + 31) < 0)
          operator delete(*v7);
        *(_OWORD *)v7 = *(_OWORD *)&__p[8];
        *(_QWORD *)(a2 + 24) = *(_QWORD *)&__p[24];
        *(_QWORD *)__p = 0x40A0000000000000;
        *(_DWORD *)&__p[8] = 0;
        *(float *)&__p[12] = v33;
        *(_DWORD *)&v90[20] = ilogbf(8.0);
        for (i = 4; i != 37; ++i)
        {
          v36 = tanhf((float)((float)(i - 4) * 0.125) + 0.0);
          v91 = MIL::Fp16::FromFloat(v37, v33 * v36);
          MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
          *(_DWORD *)&__p[4 * i] = v38;
        }
        *(_QWORD *)&v90[4] = 0;
        *(float *)&v90[12] = v33 - *(float *)v90;
        *(float *)&v90[16] = *(float *)v90 + (float)((float)(v33 - *(float *)v90) * -4.0);
        v39 = a3;
        a3[3] = 0;
        v40 = (char *)operator new(0xB8uLL);
        v41 = v87;
        *(_OWORD *)(v40 + 120) = v88;
        v42 = *(_OWORD *)v90;
        *(_OWORD *)(v40 + 136) = v89;
        *(_OWORD *)(v40 + 152) = v42;
        v43 = v83;
        *(_OWORD *)(v40 + 56) = v84;
        v44 = v86;
        *(_OWORD *)(v40 + 72) = v85;
        *(_OWORD *)(v40 + 88) = v44;
        *(_OWORD *)(v40 + 104) = v41;
        v45 = *(_OWORD *)&__p[16];
        *(_OWORD *)(v40 + 8) = *(_OWORD *)__p;
        *(_OWORD *)(v40 + 24) = v45;
        if (v33 >= 0.0)
          v46 = &off_24BFEB328;
        else
          v46 = &off_24BFEB3A8;
        *(_QWORD *)v40 = v46;
        *((_QWORD *)v40 + 21) = *(_QWORD *)&v90[16];
        *(_OWORD *)(v40 + 40) = v43;
        v40[176] = 1;
        v40[177] = 0;
        goto LABEL_128;
      }
LABEL_26:
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
      v20 = *(char *)(v19 + 23);
      if (v20 < 0)
      {
        if (*(_QWORD *)(v19 + 8) != 7)
          goto LABEL_35;
        v19 = *(_QWORD *)v19;
      }
      else if (v20 != 7)
      {
        goto LABEL_35;
      }
      if (*(_DWORD *)v19 == 1835493747 && *(_DWORD *)(v19 + 3) == 1684631405)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "scale");
        v47 = MIL::IROperation::TryGetParameterValue();
        v48 = 1.0;
        if (v47)
        {
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47))
          {
            v49 = (float *)MEMORY[0x20BCFEEAC]();
            if (v49)
              v48 = *v49;
          }
        }
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        *(_DWORD *)__p = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_2069A5097);
        *(_DWORD *)a2 = *(_DWORD *)__p;
        if (*(char *)(a2 + 31) < 0)
          operator delete(*v7);
        *(_OWORD *)v7 = *(_OWORD *)&__p[8];
        *(_QWORD *)(a2 + 24) = *(_QWORD *)&__p[24];
        *(_QWORD *)__p = 0x41052000C11F0000;
        *(_DWORD *)&__p[8] = 0;
        *(float *)&__p[12] = v48;
        *(_DWORD *)&v90[20] = ilogbf(2.0);
        for (j = 4; j != 37; ++j)
        {
          v51 = expf(-(float)((float)((float)(j - 4) * 0.5) + -8.0));
          v91 = MIL::Fp16::FromFloat(v52, v48 / (float)(v51 + 1.0));
          MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
          *(_DWORD *)&__p[4 * j] = v53;
        }
        *(float *)&v90[4] = *(float *)&__p[16] / 1.9375;
        *(float *)&v90[8] = *(float *)&__p[16] - (float)((float)(*(float *)&__p[16] / 1.9375) * -8.0);
        *(float *)&v90[12] = (float)(v48 - *(float *)v90) / 0.32031;
        *(float *)&v90[16] = *(float *)v90 + (float)(*(float *)&v90[12] * -8.0);
        v39 = a3;
        a3[3] = 0;
        v40 = (char *)operator new(0xB8uLL);
        v54 = v87;
        *(_OWORD *)(v40 + 120) = v88;
        v55 = *(_OWORD *)v90;
        *(_OWORD *)(v40 + 136) = v89;
        *(_OWORD *)(v40 + 152) = v55;
        v56 = v83;
        *(_OWORD *)(v40 + 56) = v84;
        v57 = v86;
        *(_OWORD *)(v40 + 72) = v85;
        *(_OWORD *)(v40 + 88) = v57;
        *(_OWORD *)(v40 + 104) = v54;
        v58 = *(_OWORD *)&__p[16];
        *(_OWORD *)(v40 + 8) = *(_OWORD *)__p;
        *(_OWORD *)(v40 + 24) = v58;
        *(_QWORD *)v40 = &off_24BFEB428;
        *((_QWORD *)v40 + 21) = *(_QWORD *)&v90[16];
        *(_OWORD *)(v40 + 40) = v56;
LABEL_124:
        v70 = 256;
LABEL_125:
        *((_WORD *)v40 + 88) = v70;
LABEL_128:
        v39[3] = (uint64_t (**)())v40;
        goto LABEL_129;
      }
LABEL_35:
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
      v23 = *(char *)(v22 + 23);
      if (v23 < 0)
      {
        if (*(_QWORD *)(v22 + 8) != 4)
          goto LABEL_41;
        v22 = *(_QWORD *)v22;
      }
      else if (v23 != 4)
      {
        goto LABEL_41;
      }
      if (*(_DWORD *)v22 == 1953657203)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "scale");
        v59 = MIL::IROperation::TryGetParameterValue();
        v60 = 1.0;
        if (v59)
        {
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 40))(v59))
          {
            v61 = (float *)MEMORY[0x20BCFEEAC]();
            if (v61)
              v60 = *v61;
          }
        }
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        *(_DWORD *)__p = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_2069A5097);
        *(_DWORD *)a2 = *(_DWORD *)__p;
        if (*(char *)(a2 + 31) < 0)
          operator delete(*v7);
        *(_OWORD *)v7 = *(_OWORD *)&__p[8];
        *(_QWORD *)(a2 + 24) = *(_QWORD *)&__p[24];
        *(_OWORD *)__p = xmmword_2069A2200;
        Float = ilogbf(16.0);
        *(_DWORD *)&v90[20] = Float;
        for (k = 4; k != 37; ++k)
        {
          v91 = MIL::Fp16::FromFloat((MIL::Fp16 *)Float, v60 * sqrtf((float)((float)(k - 4) * 0.0625) + 0.0));
          Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
          *(_DWORD *)&__p[4 * k] = v64;
        }
        *(_QWORD *)&v90[12] = 0;
        *(_QWORD *)&v90[4] = 0;
        v39 = a3;
        a3[3] = 0;
        v40 = (char *)operator new(0xB8uLL);
        v65 = v87;
        *(_OWORD *)(v40 + 120) = v88;
        v66 = *(_OWORD *)v90;
        *(_OWORD *)(v40 + 136) = v89;
        *(_OWORD *)(v40 + 152) = v66;
        v67 = v83;
        *(_OWORD *)(v40 + 56) = v84;
        v68 = v86;
        *(_OWORD *)(v40 + 72) = v85;
        *(_OWORD *)(v40 + 88) = v68;
        *(_OWORD *)(v40 + 104) = v65;
        v69 = *(_OWORD *)&__p[16];
        *(_OWORD *)(v40 + 8) = *(_OWORD *)__p;
        *(_OWORD *)(v40 + 24) = v69;
        *(_QWORD *)v40 = &off_24BFEB4A8;
        *((_QWORD *)v40 + 21) = *(_QWORD *)&v90[16];
        *(_OWORD *)(v40 + 40) = v67;
        v70 = 1280;
        goto LABEL_125;
      }
LABEL_41:
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
      v25 = *(char *)(v24 + 23);
      if (v25 < 0)
      {
        if (*(_QWORD *)(v24 + 8) != 5)
          goto LABEL_50;
        v24 = *(_QWORD *)v24;
      }
      else if (v25 != 5)
      {
        goto LABEL_50;
      }
      if (*(_DWORD *)v24 == 1818587756 && *(_BYTE *)(v24 + 4) == 117)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "scale");
        v71 = MIL::IROperation::TryGetParameterValue();
        v80 = 1.0;
        if (v71)
        {
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 40))(v71))
          {
            v72 = (float *)MEMORY[0x20BCFEEAC]();
            if (v72)
              v80 = *v72;
          }
        }
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
        v73 = MIL::IROperation::TryGetParameterValue();
        v74 = 0.3;
        if (v73)
        {
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73))
          {
            v75 = (float *)MEMORY[0x20BCFEEAC]();
            if (v75)
              v74 = *v75;
          }
        }
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        *(_DWORD *)__p = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_2069A5097);
        *(_DWORD *)a2 = *(_DWORD *)__p;
        if (*(char *)(a2 + 31) < 0)
          operator delete(*v7);
        *(_OWORD *)v7 = *(_OWORD *)&__p[8];
        *(_QWORD *)(a2 + 24) = *(_QWORD *)&__p[24];
        v39 = a3;
        a3[3] = 0;
        v40 = (char *)operator new(0xB8uLL);
        *(_QWORD *)v40 = &off_24BFEB528;
        v76.i32[0] = 2139095040;
        v77 = (float32x2_t)vdup_lane_s32(v76, 0);
        v77.f32[0] = v74 * -INFINITY;
        *((_QWORD *)v40 + 1) = 0x7F800000FF800000;
        *((float32x2_t *)v40 + 2) = vmul_n_f32(v77, v80);
        *(_OWORD *)(v40 + 24) = 0u;
        *(_OWORD *)(v40 + 40) = 0u;
        *(_OWORD *)(v40 + 56) = 0u;
        *(_OWORD *)(v40 + 72) = 0u;
        *(_OWORD *)(v40 + 88) = 0u;
        *(_OWORD *)(v40 + 104) = 0u;
        *(_OWORD *)(v40 + 120) = 0u;
        *(_OWORD *)(v40 + 136) = 0u;
        *((_DWORD *)v40 + 38) = 0;
        *((float *)v40 + 39) = v80 * v74;
        *((_DWORD *)v40 + 40) = 0;
        *((float *)v40 + 41) = v80;
        *((_QWORD *)v40 + 21) = 0x4000000000;
        goto LABEL_124;
      }
LABEL_50:
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
      v28 = *(char *)(v27 + 23);
      if (v28 < 0)
      {
        if (*(_QWORD *)(v27 + 8) != 15)
          goto LABEL_59;
        v27 = *(_QWORD *)v27;
      }
      else if (v28 != 15)
      {
        goto LABEL_59;
      }
      if (*(_QWORD *)v27 != 0x65636569705F656ELL || *(_QWORD *)(v27 + 7) != 0x32765F6573697765)
      {
LABEL_59:
        *(_DWORD *)__p = 3;
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
        std::operator+<char>();
        goto LABEL_60;
      }
      *(_DWORD *)__p = 3;
      std::string::basic_string[abi:ne180100]<0>(&__p[8], "ne_piecewise_v2");
LABEL_60:
      *(_DWORD *)a2 = *(_DWORD *)__p;
      if (*(char *)(a2 + 31) < 0)
        operator delete(*v7);
      *(_OWORD *)v7 = *(_OWORD *)&__p[8];
      *(_QWORD *)(a2 + 24) = *(_QWORD *)&__p[24];
      v9 += 2;
    }
  }
  *(_DWORD *)__p = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_2069A5097);
  *(_DWORD *)a2 = 0;
  v30 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v30);
  *(_OWORD *)v30 = *(_OWORD *)&__p[8];
  *(_QWORD *)(a2 + 24) = *(_QWORD *)&__p[24];
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)a3, (uint64_t)v92);
LABEL_129:
  result = v93;
  if (v93 == v92)
  {
    v79 = 4;
    result = v92;
  }
  else
  {
    if (!v93)
      return result;
    v79 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v79))();
}

void sub_2068FCB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;

  v20 = *(_QWORD **)(v18 - 144);
  if (v20 == (_QWORD *)(v18 - 168))
  {
    v21 = 4;
    v20 = (_QWORD *)(v18 - 168);
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::NeActivationCpu::Run(MIL::IROperation *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  std::string *v6;
  uint64_t InterpretedTensorValue;
  uint64_t v8;
  uint64_t OutputType;
  uint64_t v10;
  ANEMachineIR::Utils *v11;
  int v12;
  uint64_t v13;
  const MIL::IRTensorValueType *v14;
  uint64_t NumberOfElementsFromStaticTensorShape;
  MIL::Fp16 *v16;
  __int16 v17;
  uint64_t ParameterValue;
  __int16 *v19;
  float v20;
  float v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  char *v25;
  int v26;
  uint64_t v27;
  int v28;
  double v29;
  float v30;
  BOOL v31;
  int v32;
  float v33;
  unint64_t i;
  uint64_t v35;
  MIL::Fp16 *v36;
  float v37;
  float v38;
  int v39;
  int v40;
  int v41;
  int v42;
  float v43;
  float v44;
  int v45;
  long double v46;
  double v47;
  float v48;
  long double v49;
  double v50;
  MIL::Fp16 *v51;
  float v52;
  __int16 v53;
  unsigned __int8 *v54;
  unint64_t j;
  uint64_t v56;
  int v57;
  float v58;
  int v59;
  int v60;
  int v61;
  int v62;
  float v63;
  float v64;
  int v65;
  long double v66;
  double v67;
  float v68;
  long double v69;
  double v70;
  float v71;
  int v72;
  unsigned __int8 *v73;
  unint64_t k;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  float v78;
  int v79;
  int v80;
  unsigned __int8 *v81;
  void **v82;
  int v83;
  char *v84;
  uint64_t (***v85)();
  uint64_t v86;
  int __e[2];
  uint64_t v88;
  void *__p[2];
  char v90;
  int v91;
  __int128 v92;
  std::string::size_type v93;
  void **v94;
  uint64_t (**v95[3])();
  uint64_t (***v96)();
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v92 = 0uLL;
  v93 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v91, v95);
  if (!v91)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)__p);
    v8 = InterpretedTensorValue;
    if (v90 < 0)
    {
      operator delete(__p[0]);
      if (v8)
      {
LABEL_6:
        OutputType = MIL::IROperation::GetOutputType(a1);
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)OutputType + 24))(OutputType);
        v11 = (ANEMachineIR::Utils *)v10;
        if (v10)
        {
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
          v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
          if (v12 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13))
          {
            NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(v11, v14);
            v16 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(__p, "post_scale");
            v17 = MIL::Fp16::FromFloat(v16, 1.0);
            ParameterValue = MIL::IROperation::TryGetParameterValue();
            if (ParameterValue)
            {
              if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue))
              {
                v19 = (__int16 *)MEMORY[0x20BCFEE7C]();
                if (v19)
                  v17 = *v19;
              }
            }
            LOWORD(__e[0]) = v17;
            MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
            v21 = v20;
            if (v90 < 0)
              operator delete(__p[0]);
            std::string::basic_string[abi:ne180100]<0>(__p, "post_right_shift");
            v22 = MIL::IROperation::TryGetParameterValue();
            if (v22
              && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22)
              && (v23 = (unsigned __int8 *)MEMORY[0x20BCFEE94]()) != 0)
            {
              v24 = *v23;
            }
            else
            {
              v24 = 0;
            }
            if (v90 < 0)
              operator delete(__p[0]);
            v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 88))(v27) == 4)
              v28 = 20;
            else
              v28 = 10;
            v29 = ldexp(1.0, v28);
            v30 = 1.0;
            v31 = v21 == 1.0 && v24 == 0;
            v32 = !v31;
            if (!v31)
              v30 = exp2(-(double)(v28 + (char)v24)) * v21;
            v33 = v29;
            if ((*(unsigned int (**)(ANEMachineIR::Utils *))(*(_QWORD *)v11 + 88))(v11) == 4)
            {
              std::vector<MIL::Fp16>::vector(__p, NumberOfElementsFromStaticTensorShape);
              if (NumberOfElementsFromStaticTensorShape)
              {
                for (i = 0; i != NumberOfElementsFromStaticTensorShape; ++i)
                {
                  *(_QWORD *)__e = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                  v88 = v35;
                  v36 = (MIL::Fp16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::operator[](__e, i);
                  MIL::Fp16::GetFloat(v36);
                  v38 = v37;
                  if (v32)
                  {
                    v39 = ilogbf(v37);
                    if (v39 <= -14)
                      v40 = -14;
                    else
                      v40 = v39;
                    v41 = ilogbf(1.0);
                    if (v41 <= -14)
                      v42 = -14;
                    else
                      v42 = v41;
                    v43 = 0.0;
                    v44 = 0.0;
                    if (v42 + v40 >= -20)
                    {
                      v45 = llroundf(v38 * v33);
                      v44 = 0.0;
                      if (v45)
                      {
                        __e[0] = 0;
                        v46 = frexp((double)v45, __e);
                        v47 = ldexp(v46, 11);
                        v44 = ldexp(round(v47), __e[0] - 11);
                      }
                    }
                    v48 = v30 * v44;
                    if (v48 != 0.0)
                    {
                      __e[0] = 0;
                      v49 = frexp(v48, __e);
                      v50 = ldexp(v49, 11);
                      v43 = ldexp(round(v50), __e[0] - 11);
                    }
                  }
                  else
                  {
                    v43 = v37;
                  }
                  *(float *)__e = v43;
                  if (!v96)
                    std::__throw_bad_function_call[abi:ne180100]();
                  v51 = (MIL::Fp16 *)((uint64_t (*)(uint64_t (***)(), int *))(*v96)[6])(v96, __e);
                  v53 = MIL::Fp16::FromFloat(v51, v52);
                  *((_WORD *)__p[0] + i) = v53;
                }
              }
              (*(void (**)(int *__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(__e, a1);
              v54 = *(unsigned __int8 **)__e;
              if (v88 == *(_QWORD *)__e)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              MIL::IRTensorValueType::MakeFloat16Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v54, (uint64_t *)&v94);
            }
            else if ((*(unsigned int (**)(ANEMachineIR::Utils *))(*(_QWORD *)v11 + 88))(v11) == 9)
            {
              std::vector<signed char>::vector(__p, NumberOfElementsFromStaticTensorShape);
              if (NumberOfElementsFromStaticTensorShape)
              {
                for (j = 0; j != NumberOfElementsFromStaticTensorShape; ++j)
                {
                  *(_QWORD *)__e = MIL::IRTensorValue::GetDataView<signed char>();
                  v88 = v56;
                  v57 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::operator[](__e, j);
                  v58 = (float)v57;
                  if (v32)
                  {
                    v59 = ilogbf((float)v57);
                    if (v59 <= -14)
                      v60 = -14;
                    else
                      v60 = v59;
                    v61 = ilogbf(1.0);
                    if (v61 <= -14)
                      v62 = -14;
                    else
                      v62 = v61;
                    v63 = 0.0;
                    v64 = 0.0;
                    if (v62 + v60 >= -20)
                    {
                      v65 = llroundf(v33 * v58);
                      v64 = 0.0;
                      if (v65)
                      {
                        __e[0] = 0;
                        v66 = frexp((double)v65, __e);
                        v67 = ldexp(v66, 11);
                        v64 = ldexp(round(v67), __e[0] - 11);
                      }
                    }
                    v68 = v30 * v64;
                    if (v68 != 0.0)
                    {
                      __e[0] = 0;
                      v69 = frexp(v68, __e);
                      v70 = ldexp(v69, 11);
                      v63 = ldexp(round(v70), __e[0] - 11);
                    }
                  }
                  else
                  {
                    v63 = (float)v57;
                  }
                  *(float *)__e = v63;
                  if (!v96)
                    std::__throw_bad_function_call[abi:ne180100]();
                  v71 = ((float (*)(uint64_t (***)(), int *))(*v96)[6])(v96, __e);
                  if (v71 == INFINITY)
                  {
                    LOBYTE(v72) = 127;
                  }
                  else if (v71 == -INFINITY)
                  {
                    LOBYTE(v72) = 0x80;
                  }
                  else
                  {
                    v72 = llroundf(v71);
                    if (v72 >= 127)
                      v72 = 127;
                    if (v72 <= -128)
                      LOBYTE(v72) = 0x80;
                  }
                  *((_BYTE *)__p[0] + j) = v72;
                }
              }
              (*(void (**)(int *__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(__e, a1);
              v73 = *(unsigned __int8 **)__e;
              if (v88 == *(_QWORD *)__e)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              MIL::IRTensorValueType::MakeInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v73, (uint64_t *)&v94);
            }
            else
            {
              if ((*(unsigned int (**)(ANEMachineIR::Utils *))(*(_QWORD *)v11 + 88))(v11) != 14)
              {
                v84 = "Unsupported dtype.";
                v83 = 3;
LABEL_105:
                *(_DWORD *)a3 = v83;
                std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v84);
                goto LABEL_106;
              }
              std::vector<unsigned char>::vector(__p, NumberOfElementsFromStaticTensorShape);
              if (NumberOfElementsFromStaticTensorShape)
              {
                for (k = 0; k != NumberOfElementsFromStaticTensorShape; ++k)
                {
                  *(_QWORD *)__e = MIL::IRTensorValue::GetDataView<unsigned char>();
                  v88 = v75;
                  MIL::Util::Span<unsigned char const,18446744073709551615ul>::operator[](__e, k);
                  *(_QWORD *)__e = MIL::IRTensorValue::GetDataView<unsigned char>();
                  v88 = v76;
                  LOBYTE(v77) = *(_BYTE *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::operator[](__e, k);
                  *(float *)&v94 = (float)v77;
                  if (!v96)
                    std::__throw_bad_function_call[abi:ne180100]();
                  v78 = ((float (*)(uint64_t (***)(), void ***))(*v96)[6])(v96, &v94);
                  if (v78 == INFINITY)
                  {
                    LOBYTE(v79) = -1;
                  }
                  else if (v78 == -INFINITY)
                  {
                    LOBYTE(v79) = 0;
                  }
                  else
                  {
                    v80 = llroundf(v78);
                    if (v80 >= 255)
                      v80 = 255;
                    v79 = v80 & ~(v80 >> 31);
                  }
                  *((_BYTE *)__p[0] + k) = v79;
                }
              }
              (*(void (**)(int *__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(__e, a1);
              v81 = *(unsigned __int8 **)__e;
              if (v88 == *(_QWORD *)__e)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v81, (uint64_t *)&v94);
            }
            v82 = v94;
            v94 = 0;
            if (v82)
              (*((void (**)(void **))*v82 + 1))(v82);
            v94 = (void **)__e;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v94);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            v83 = 0;
            v84 = (char *)&unk_2069A5097;
            goto LABEL_105;
          }
          v25 = "ne_activation with different input and output dtypes (with casting) is not implemented in the interpreted mode.";
          v26 = 4;
        }
        else
        {
          v25 = "Output type is not a tensor.";
          v26 = 3;
        }
        *(_DWORD *)a3 = v26;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v25);
        goto LABEL_106;
      }
    }
    else if (InterpretedTensorValue)
    {
      goto LABEL_6;
    }
    *(_DWORD *)a3 = 3;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Value is not a tensor.");
    goto LABEL_106;
  }
  *(_DWORD *)a3 = 1;
  v6 = (std::string *)(a3 + 8);
  if (SHIBYTE(v93) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)v92, *((std::string::size_type *)&v92 + 1));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v92;
    v6->__r_.__value_.__r.__words[2] = v93;
  }
LABEL_106:
  v85 = v96;
  if (v96 == v95)
  {
    v86 = 4;
    v85 = v95;
  }
  else
  {
    if (!v96)
      goto LABEL_111;
    v86 = 5;
  }
  (*v85)[v86]();
LABEL_111:
  if (SHIBYTE(v93) < 0)
    operator delete((void *)v92);
}

void sub_2068FD438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26,char a27,uint64_t a28,uint64_t a29,char *a30)
{
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v31 = (uint64_t)a26;
  a26 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  a26 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  v32 = a30;
  if (a30 == &a27)
  {
    v33 = 4;
    v32 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_10;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_10:
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::NeActivationCpu::~NeActivationCpu(MIL::ANEMachineIR::Interpreter::NeActivationCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0>,float ()(float)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0>,float ()(float)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEB218;
  return result;
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEB218;
}

float std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return fmaxf(*a2, 0.0);
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0>,float ()(float)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0>,float ()(float)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEB2A8;
  return result;
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEB2A8;
}

float std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0>,float ()(float)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)a2;
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_0>,float ()(float)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0xB8uLL);
  *(_QWORD *)v2 = &off_24BFEB328;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_0>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a2 = &off_24BFEB328;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  result = *(__n128 *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  v9 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

double std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v3;
  float v4;
  int v5;
  int8x16_t v6;
  int8x16_t v7;
  float v8;
  float v9;
  float v10;
  int v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  long double v17;
  double v18;
  long double v19;
  double v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  long double v26;
  double v27;
  long double v28;
  double v29;
  int8x16_t v30;
  double result;
  float v32;
  int __e;

  v3 = *a2;
  v4 = fabsf(*a2);
  v5 = *(_DWORD *)(a1 + 172);
  *(double *)v6.i64 = ldexp(32.0, -v5);
  if (v4 >= *(float *)(a1 + 12))
  {
    v7.i32[0] = *(_DWORD *)(a1 + 20);
    goto LABEL_21;
  }
  if (v4 <= *(float *)(a1 + 8))
  {
    v7.i32[0] = *(_DWORD *)(a1 + 16);
    goto LABEL_21;
  }
  v8 = *(double *)v6.i64;
  if (v4 >= v8)
  {
    v22 = *(float *)(a1 + 164);
    v23 = *(float *)(a1 + 168);
LABEL_16:
    v24 = v4 * v22;
    v7.i32[0] = 0;
    v25 = 0.0;
    if (v24 != 0.0)
    {
      __e = 0;
      v26 = frexp(v24, &__e);
      v27 = ldexp(v26, 11);
      *(double *)v6.i64 = ldexp(round(v27), __e - 11);
      v7.i32[0] = 0;
      v25 = *(double *)v6.i64;
    }
    v21 = v23 + v25;
    goto LABEL_19;
  }
  if (v3 == 0.0)
  {
    v22 = *(float *)(a1 + 156);
    v23 = *(float *)(a1 + 160);
    goto LABEL_16;
  }
  v32 = 0.0;
  v9 = ldexpf(v4, v5);
  v10 = modff(fabsf(v9), &v32);
  v11 = (int)v32 & 0x1F;
  if ((int)v32 <= 0)
    v11 = -(-(int)v32 & 0x1F);
  v12 = a1 + 4 * v11;
  v13 = *(float *)(v12 + 24);
  v14 = *(float *)(v12 + 28) - v13;
  v15 = 0.0;
  v16 = 0.0;
  if (v14 != 0.0)
  {
    __e = 0;
    v17 = frexp(v14, &__e);
    v18 = ldexp(v17, 11);
    *(double *)v6.i64 = ldexp(round(v18), __e - 11);
    v16 = *(double *)v6.i64;
  }
  if ((float)(v10 * v16) != 0.0)
  {
    __e = 0;
    v19 = frexp((float)(v10 * v16), &__e);
    v20 = ldexp(v19, 11);
    *(double *)v6.i64 = ldexp(round(v20), __e - 11);
    v15 = *(double *)v6.i64;
  }
  v21 = v13 + v15;
  v7.i32[0] = 0;
LABEL_19:
  if (v21 != 0.0)
  {
    __e = 0;
    v28 = frexp(v21, &__e);
    v29 = ldexp(v28, 11);
    *(double *)v6.i64 = ldexp(round(v29), __e - 11);
    *(float *)v7.i32 = *(double *)v6.i64;
  }
LABEL_21:
  v6.i32[0] = 1.0;
  if (v3 < 0.0)
    *(float *)v6.i32 = -1.0;
  v30.i64[0] = 0x8000000080000000;
  v30.i64[1] = 0x8000000080000000;
  *(_QWORD *)&result = vbslq_s8(v30, v7, v6).u64[0];
  return result;
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_0>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_1,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_1>,float ()(float)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_1,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_1>,float ()(float)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0xB8uLL);
  *(_QWORD *)v2 = &off_24BFEB3A8;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_1,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_1>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a2 = &off_24BFEB3A8;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  result = *(__n128 *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  v9 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

double std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_1,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_1>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v3;
  float v4;
  int v5;
  int8x16_t v6;
  int8x16_t v7;
  float v8;
  float v9;
  float v10;
  int v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  long double v17;
  double v18;
  long double v19;
  double v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  long double v26;
  double v27;
  long double v28;
  double v29;
  int8x16_t v30;
  float v32;
  int __e;

  v3 = *a2;
  v4 = fabsf(*a2);
  v5 = *(_DWORD *)(a1 + 172);
  *(double *)v6.i64 = ldexp(32.0, -v5);
  if (v4 >= *(float *)(a1 + 12))
  {
    v7.i32[0] = *(_DWORD *)(a1 + 20);
    goto LABEL_21;
  }
  if (v4 <= *(float *)(a1 + 8))
  {
    v7.i32[0] = *(_DWORD *)(a1 + 16);
    goto LABEL_21;
  }
  v8 = *(double *)v6.i64;
  if (v4 >= v8)
  {
    v22 = *(float *)(a1 + 164);
    v23 = *(float *)(a1 + 168);
LABEL_16:
    v24 = v4 * v22;
    v7.i32[0] = 0;
    v25 = 0.0;
    if (v24 != 0.0)
    {
      __e = 0;
      v26 = frexp(v24, &__e);
      v27 = ldexp(v26, 11);
      *(double *)v6.i64 = ldexp(round(v27), __e - 11);
      v7.i32[0] = 0;
      v25 = *(double *)v6.i64;
    }
    v21 = v23 + v25;
    goto LABEL_19;
  }
  if (v3 == 0.0)
  {
    v22 = *(float *)(a1 + 156);
    v23 = *(float *)(a1 + 160);
    goto LABEL_16;
  }
  v32 = 0.0;
  v9 = ldexpf(v4, v5);
  v10 = modff(fabsf(v9), &v32);
  v11 = (int)v32 & 0x1F;
  if ((int)v32 <= 0)
    v11 = -(-(int)v32 & 0x1F);
  v12 = a1 + 4 * v11;
  v13 = *(float *)(v12 + 24);
  v14 = *(float *)(v12 + 28) - v13;
  v15 = 0.0;
  v16 = 0.0;
  if (v14 != 0.0)
  {
    __e = 0;
    v17 = frexp(v14, &__e);
    v18 = ldexp(v17, 11);
    *(double *)v6.i64 = ldexp(round(v18), __e - 11);
    v16 = *(double *)v6.i64;
  }
  if ((float)(v10 * v16) != 0.0)
  {
    __e = 0;
    v19 = frexp((float)(v10 * v16), &__e);
    v20 = ldexp(v19, 11);
    *(double *)v6.i64 = ldexp(round(v20), __e - 11);
    v15 = *(double *)v6.i64;
  }
  v21 = v13 + v15;
  v7.i32[0] = 0;
LABEL_19:
  if (v21 != 0.0)
  {
    __e = 0;
    v28 = frexp(v21, &__e);
    v29 = ldexp(v28, 11);
    *(double *)v6.i64 = ldexp(round(v29), __e - 11);
    *(float *)v7.i32 = *(double *)v6.i64;
  }
LABEL_21:
  v6.i32[0] = 1.0;
  if (v3 < 0.0)
    *(float *)v6.i32 = -1.0;
  *(float *)v6.i32 = -*(float *)v6.i32;
  v30.i64[0] = 0x8000000080000000;
  v30.i64[1] = 0x8000000080000000;
  v6.i64[0] = vbslq_s8(v30, v7, v6).u64[0];
  return *(double *)v6.i64;
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_1,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_1>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_1,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::TanhFunction(float)::$_1>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SigmoidFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SigmoidFunction(float)::$_0>,float ()(float)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SigmoidFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SigmoidFunction(float)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0xB8uLL);
  *(_QWORD *)v2 = &off_24BFEB428;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SigmoidFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SigmoidFunction(float)::$_0>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a2 = &off_24BFEB428;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  result = *(__n128 *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  v9 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

float std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SigmoidFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SigmoidFunction(float)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SigmoidFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SigmoidFunction(float)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SigmoidFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SigmoidFunction(float)::$_0>,float ()(float)>::target_type()
{
}

float MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ane_activation_lut<false,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LutType)1,(MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LutOutSign)0>(uint64_t a1, float a2)
{
  int v4;
  double v5;
  float v6;
  float v7;
  float v8;
  int v9;
  uint64_t v10;
  float v11;
  unsigned int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  long double v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  long double v24;
  double v25;
  float v26;
  float v27;
  long double v28;
  double v29;
  long double v30;
  double v31;
  float v33;
  int __e;

  v4 = *(_DWORD *)(a1 + 164);
  v5 = ldexp(16.0, -v4);
  if (*(float *)(a1 + 4) <= a2)
    return *(float *)(a1 + 12);
  if (*(float *)a1 >= a2)
    return *(float *)(a1 + 8);
  v6 = v5;
  if (v6 <= a2)
  {
    v14 = *(float *)(a1 + 156);
    v15 = *(float *)(a1 + 160);
LABEL_14:
    v16 = v14 * a2;
    v13 = 0.0;
    v17 = 0.0;
    if (v16 != 0.0)
    {
      __e = 0;
      v18 = frexp(v16, &__e);
      v19 = ldexp(v18, 11);
      v17 = ldexp(round(v19), __e - 11);
    }
    v20 = v15 + v17;
    goto LABEL_23;
  }
  if ((float)-v6 >= a2)
  {
    v14 = *(float *)(a1 + 148);
    v15 = *(float *)(a1 + 152);
    goto LABEL_14;
  }
  v33 = 0.0;
  v7 = ldexpf(a2, v4);
  v8 = modff(fabsf(v7), &v33);
  if ((int)v33 <= 0)
    v9 = -(-(int)v33 & 0xF);
  else
    v9 = (int)v33 & 0xF;
  v10 = a1 + 16;
  if (a2 >= 0.0)
  {
    v11 = *(float *)(v10 + 4 * (v9 + 17));
    v12 = v9 + 16;
  }
  else
  {
    v11 = *(float *)(v10 + 4 * (15 - v9));
    v12 = 16 - v9;
  }
  v21 = *(float *)(v10 + 4 * v12);
  v22 = v11 - v21;
  v23 = 0.0;
  if (v22 != 0.0)
  {
    __e = 0;
    v24 = frexp(v22, &__e);
    v25 = ldexp(v24, 11);
    v23 = ldexp(round(v25), __e - 11);
  }
  v26 = v8 * v23;
  v13 = 0.0;
  v27 = 0.0;
  if (v26 != 0.0)
  {
    __e = 0;
    v28 = frexp(v26, &__e);
    v29 = ldexp(v28, 11);
    v27 = ldexp(round(v29), __e - 11);
  }
  v20 = v21 + v27;
LABEL_23:
  if (v20 != 0.0)
  {
    __e = 0;
    v30 = frexp(v20, &__e);
    v31 = ldexp(v30, 11);
    return ldexp(round(v31), __e - 11);
  }
  return v13;
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SqrtFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SqrtFunction(float)::$_0>,float ()(float)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SqrtFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SqrtFunction(float)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0xB8uLL);
  *(_QWORD *)v2 = &off_24BFEB4A8;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SqrtFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SqrtFunction(float)::$_0>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a2 = &off_24BFEB4A8;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  result = *(__n128 *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  v9 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SqrtFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SqrtFunction(float)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v3;
  float v4;
  int v5;
  float v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  long double v16;
  double v17;
  long double v18;
  double v19;
  uint64_t v20;
  float v21;
  float v22;
  long double v23;
  double v24;
  float v25;
  float v26;
  float v27;
  long double v28;
  double v29;
  float v30;
  long double v31;
  double v32;
  signed int v33;
  int v34;
  float v35;
  int __e;

  v3 = *a2;
  if (*(float *)(a1 + 12) <= *a2 || *(float *)(a1 + 8) >= v3)
    return;
  if (v3 >= INFINITY)
  {
    v12 = *(float *)(a1 + 164);
    v13 = *(float *)(a1 + 168);
  }
  else
  {
    if (v3 > -INFINITY)
    {
      v4 = frexpf(*a2, &v34);
      v5 = v34;
      if ((v34 & 1) != 0)
        v6 = v4 + v4;
      else
        v6 = v4;
      v35 = 0.0;
      v7 = ldexpf(v6, *(_DWORD *)(a1 + 172));
      v8 = modff(fabsf(v7), &v35);
      v9 = (int)v35 & 0x1F;
      if ((int)v35 <= 0)
        v9 = -(-(int)v35 & 0x1F);
      if (v6 >= 0.0)
      {
        v20 = a1 + 4 * v9;
        v11 = *(float *)(v20 + 24);
        v10 = *(float *)(v20 + 28);
      }
      else
      {
        v10 = *(float *)(a1 + 24 + 4 * (31 - v9));
        v11 = *(float *)(a1 + 24 + 4 * (32 - v9));
      }
      v21 = v10 - v11;
      v22 = 0.0;
      if (v21 != 0.0)
      {
        __e = 0;
        v23 = frexp(v21, &__e);
        v24 = ldexp(v23, 11);
        v22 = ldexp(round(v24), __e - 11);
      }
      v25 = v8 * v22;
      v26 = 0.0;
      v27 = 0.0;
      if (v25 != 0.0)
      {
        __e = 0;
        v28 = frexp(v25, &__e);
        v29 = ldexp(v28, 11);
        v27 = ldexp(round(v29), __e - 11);
      }
      v30 = v11 + v27;
      if (v30 != 0.0)
      {
        __e = 0;
        v31 = frexp(v30, &__e);
        v32 = ldexp(v31, 11);
        v26 = ldexp(round(v32), __e - 11);
      }
      if (v5 >= 0)
        v33 = v5 & 0xFFFFFFFE;
      else
        v33 = (v5 & 0xFFFFFFFE) + 1;
      ldexpf(v26, v33 >> 1);
      return;
    }
    v12 = *(float *)(a1 + 156);
    v13 = *(float *)(a1 + 160);
  }
  v14 = v3 * v12;
  v15 = 0.0;
  if (v14 != 0.0)
  {
    __e = 0;
    v16 = frexp(v14, &__e);
    v17 = ldexp(v16, 11);
    v15 = ldexp(round(v17), __e - 11);
  }
  if ((float)(v13 + v15) != 0.0)
  {
    __e = 0;
    v18 = frexp((float)(v13 + v15), &__e);
    v19 = ldexp(v18, 11);
    ldexp(round(v19), __e - 11);
  }
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SqrtFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SqrtFunction(float)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SqrtFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::SqrtFunction(float)::$_0>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LreluFunction(float,float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LreluFunction(float,float)::$_0>,float ()(float)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LreluFunction(float,float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LreluFunction(float,float)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0xB8uLL);
  *(_QWORD *)v2 = &off_24BFEB528;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LreluFunction(float,float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LreluFunction(float,float)::$_0>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a2 = &off_24BFEB528;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  result = *(__n128 *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  v9 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

float std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LreluFunction(float,float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LreluFunction(float,float)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LreluFunction(float,float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LreluFunction(float,float)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LreluFunction(float,float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::`anonymous namespace'::LreluFunction(float,float)::$_0>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0>,float ()(float)>::~__func()
{
  JUMPOUT(0x20BCFF140);
}

_QWORD *std::__function::__func<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0>,float ()(float)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFEB5A8;
  return result;
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFEB5A8;
}

float std::__function::__func<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0>,float ()(float)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)a2;
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0>,float ()(float)>::target_type()
{
}

uint64_t std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t ANEMachineIR::H2022::BaseNePool::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  unsigned __int8 *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void **v35;
  unsigned __int8 *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void **v43;
  unsigned __int8 *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void **v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char **v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  void **v86;
  char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  char **v95;
  _QWORD *v96;
  uint64_t v97;
  MIL::Validation::TensorDTypeConstraints *v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  void **v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void **v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  MIL::Validation::TensorRankValueConstraints *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  MIL::Validation::TensorSymbolicShapeConstraints *v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  void **v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count_vtbl *v152;
  void **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count_vtbl *v159;
  void **v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count_vtbl *v166;
  void **v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count_vtbl *v173;
  void **v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count_vtbl *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  void **v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void **v187;
  uint64_t result;
  uint64_t v189;
  void **v190;
  std::__shared_weak_count *v191;
  void *v192[2];
  char v193;
  void *v194;
  char v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  void *v198[2];
  char v199;
  void *v200;
  char v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  char v205;
  void *v206;
  char v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  char v211;
  void *v212;
  char v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  void *v218;
  char v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  void *v222[2];
  char v223;
  void *v224;
  char v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  void **v228;
  std::__shared_weak_count *v229;
  void *v230;
  char v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  void **v234;
  std::__shared_weak_count *v235;
  void *v236[2];
  char v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  void *v240[2];
  char v241;
  void *v242;
  char v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  char **v246;
  std::__shared_weak_count *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  void *v250[2];
  uint64_t v251;
  void *v252;
  void *v253;
  _QWORD *v254;
  std::__shared_weak_count *v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  char **v259;
  std::__shared_weak_count *v260;
  std::__shared_weak_count *v261;
  std::__shared_weak_count *v262;
  std::__shared_weak_count *v263;
  std::__shared_weak_count *v264;
  void *__p;
  void *v266;
  _QWORD *v267;
  std::__shared_weak_count *v268;
  _QWORD *v269;
  _BYTE v270[24];
  _BYTE *v271;
  _QWORD v272[3];
  MIL::Validation::TensorDTypeConstraints *v273;
  void *v274;
  void *v275;
  _QWORD *v276;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v279;
  void **v280;
  void **v281;
  uint64_t v282;
  char *v283;
  char **v284;
  uint64_t v285;

  v285 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v269 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v12->__get_deleter;
  v279 = (uint64_t)&v12->__get_deleter;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  Scalar = v12;
  v280 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x18uLL);
  v275 = v16 + 3;
  v276 = v16 + 3;
  *v16 = v13;
  v16[1] = v14;
  v16[2] = v15;
  v274 = v16;
  v281 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = operator new(0x18uLL);
  v267 = v20 + 3;
  *v20 = v17;
  v20[1] = v18;
  v20[2] = v19;
  __p = v20;
  v266 = v20 + 3;
  v282 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v252);
  v21 = v252;
  v252 = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = v268;
  if (v268)
  {
    p_shared_owners = (unint64_t *)&v268->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v266 = __p;
    operator delete(__p);
  }
  if (v274)
  {
    v275 = v274;
    operator delete(v274);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v25 = v269;
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (void **)operator new(8uLL);
  v280 = v27;
  *v27 = (void *)v26;
  v281 = v27 + 1;
  v282 = (uint64_t)(v27 + 1);
  v274 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v25, "kernel_sizes", (uint64_t *)&Scalar);
  v29 = Scalar;
  Scalar = 0;
  if (v29)
    (*((void (**)(std::__shared_weak_count_vtbl *))v29->~__shared_weak_count + 1))(v29);
  v30 = v264;
  if (v264)
  {
    v31 = (unint64_t *)&v264->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v33 = v269;
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = (void **)operator new(8uLL);
  v280 = v35;
  *v35 = (void *)v34;
  v281 = v35 + 1;
  v282 = (uint64_t)(v35 + 1);
  v274 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v33, "strides", (uint64_t *)&Scalar);
  v37 = Scalar;
  Scalar = 0;
  if (v37)
    (*((void (**)(std::__shared_weak_count_vtbl *))v37->~__shared_weak_count + 1))(v37);
  v38 = v263;
  if (v263)
  {
    v39 = (unint64_t *)&v263->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v269;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (void **)operator new(8uLL);
  v280 = v43;
  *v43 = (void *)v42;
  v281 = v43 + 1;
  v282 = (uint64_t)(v43 + 1);
  v274 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v41, "custom_pads", (uint64_t *)&Scalar);
  v45 = Scalar;
  Scalar = 0;
  if (v45)
    (*((void (**)(std::__shared_weak_count_vtbl *))v45->~__shared_weak_count + 1))(v45);
  v46 = v262;
  if (v262)
  {
    v47 = (unint64_t *)&v262->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v269;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v49, "post_right_shift", (uint64_t *)&v280);
  v51 = v280;
  v280 = 0;
  if (v51)
    (*((void (**)(void **))*v51 + 1))(v51);
  v52 = v261;
  if (v261)
  {
    v53 = (unint64_t *)&v261->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 48))(*((_QWORD *)v50 + 5), 1);
  v55 = v269;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v55, "post_scale", (uint64_t *)&v280);
  v57 = v280;
  v280 = 0;
  if (v57)
    (*((void (**)(void **))*v57 + 1))(v57);
  v58 = v260;
  if (v260)
  {
    v59 = (unint64_t *)&v260->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 48))(*((_QWORD *)v56 + 5), 1);
  v259 = 0;
  v61 = operator new();
  *(_QWORD *)v61 = 0;
  *(_QWORD *)(v61 + 8) = 0;
  *(_QWORD *)(v61 + 16) = 0;
  v280 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v259, (void **)v61);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v280, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v259, 1uLL);
  v62 = v259;
  v63 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v64 = operator new(8uLL);
  v274 = v64;
  *v64 = v63;
  v275 = v64 + 1;
  v276 = v64 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = operator new(8uLL);
  __p = v66;
  *v66 = v65;
  v267 = v66 + 1;
  v266 = v66 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v252 = v68;
  *v68 = v67;
  v254 = v68 + 1;
  v253 = v68 + 1;
  v279 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v69 = v256;
  v257 = v256;
  if (v256)
  {
    v70 = (_QWORD *)operator new();
    v71 = v256;
    *v70 = &unk_24BFE7320;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  v258 = v70;
  v256 = 0;
  v72 = v62[2];
  v73 = v62[1];
  if (v73 >= v72)
  {
    v75 = (v73 - *v62) >> 4;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v77 = v72 - *v62;
    if (v77 >> 3 > v76)
      v76 = v77 >> 3;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
      v78 = 0xFFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    v284 = v62 + 2;
    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v62 + 2), v78);
    v81 = &v79[16 * v75];
    *(_QWORD *)v81 = v69;
    *((_QWORD *)v81 + 1) = v70;
    v258 = 0;
    v257 = 0;
    v83 = *v62;
    v82 = v62[1];
    if (v82 == *v62)
    {
      v86 = (void **)v62[1];
      v84 = &v79[16 * v75];
    }
    else
    {
      v84 = &v79[16 * v75];
      do
      {
        v85 = *((_OWORD *)v82 - 1);
        v82 -= 16;
        *((_OWORD *)v84 - 1) = v85;
        v84 -= 16;
        *(_QWORD *)v82 = 0;
        *((_QWORD *)v82 + 1) = 0;
      }
      while (v82 != v83);
      v86 = (void **)*v62;
      v82 = v62[1];
    }
    v74 = v81 + 16;
    *v62 = v84;
    v280 = v86;
    v281 = v86;
    v62[1] = v81 + 16;
    v282 = (uint64_t)v82;
    v87 = v62[2];
    v62[2] = &v79[16 * v80];
    v283 = v87;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v280);
  }
  else
  {
    *(_QWORD *)v73 = v69;
    *((_QWORD *)v73 + 1) = v70;
    v74 = v73 + 16;
    v258 = 0;
    v257 = 0;
  }
  v62[1] = v74;
  v88 = v256;
  v256 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v255;
  if (v255)
  {
    v90 = (unint64_t *)&v255->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (__p)
  {
    v266 = __p;
    operator delete(__p);
  }
  if (v274)
  {
    v275 = v274;
    operator delete(v274);
  }
  *(_OWORD *)v250 = *(_OWORD *)a2;
  v251 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v92 = (uint64_t)v269;
  v248 = (uint64_t)v269;
  if (v269)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
  }
  else
  {
    v93 = 0;
  }
  v249 = v93;
  v269 = 0;
  v246 = v259;
  if (v259)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = v259;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = (std::__shared_weak_count_vtbl *)v95;
  }
  else
  {
    v94 = 0;
  }
  v247 = v94;
  v259 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v272, a3);
  }
  else
  {
    v272[0] = &unk_24BFE7440;
    v272[1] = ANEMachineIR::H2022::Validators::ValidateBaseNePool;
    v273 = (MIL::Validation::TensorDTypeConstraints *)v272;
  }
  v271 = 0;
  MIL::IROperator::Make();
  v96 = v271;
  if (v271 == v270)
  {
    v97 = 4;
    v96 = v270;
  }
  else
  {
    if (!v271)
      goto LABEL_99;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_99:
  v98 = v273;
  if (v273 == (MIL::Validation::TensorDTypeConstraints *)v272)
  {
    v99 = 4;
    v98 = (MIL::Validation::TensorDTypeConstraints *)v272;
    goto LABEL_103;
  }
  if (v273)
  {
    v99 = 5;
LABEL_103:
    v98 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v98 + 8 * v99))();
  }
  if (v247)
  {
    v100 = &v247->__shared_owners_;
    do
      v101 = __ldaxr((unint64_t *)v100);
    while (__stlxr(v101 - 1, (unint64_t *)v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  if (v249)
  {
    v102 = &v249->__shared_owners_;
    do
      v103 = __ldaxr((unint64_t *)v102);
    while (__stlxr(v103 - 1, (unint64_t *)v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  if (SHIBYTE(v251) < 0)
    operator delete(v250[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v98);
  v104 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v242, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v244 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v245 = v105;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v240, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v104 + 3))(v104, &v244, v240);
  if (v241 < 0)
    operator delete(v240[0]);
  v107 = v245;
  if (v245)
  {
    v108 = (unint64_t *)&v245->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  if (v243 < 0)
    operator delete(v242);
  v111 = v280;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v238 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v239 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v236, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 3))(v111, &v238, v236);
  if (v237 < 0)
    operator delete(v236[0]);
  v114 = v239;
  if (v239)
  {
    v115 = (unint64_t *)&v239->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  v118 = *a4;
  v234 = v280;
  if (v280)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = v280;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = (std::__shared_weak_count_vtbl *)v120;
  }
  else
  {
    v119 = 0;
  }
  v235 = v119;
  v280 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v118 + 56))(v118, &v234);
  v121 = v235;
  if (v235)
  {
    v122 = (unint64_t *)&v235->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (MIL::Validation::TensorRankValueConstraints *)v280;
  v280 = 0;
  if (v124)
    v124 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v124 + 8))(v124);
  MIL::Validation::TensorRankValueConstraints::Make(v124);
  v125 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v230, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v232 = Scalar;
  if (Scalar)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = Scalar;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v233 = v126;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v125 + 4))(v125, &v232, 3, 5);
  v128 = v233;
  if (v233)
  {
    v129 = (unint64_t *)&v233->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = Scalar;
  Scalar = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  if (v231 < 0)
    operator delete(v230);
  v132 = *a4;
  v228 = v280;
  if (v280)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v280;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v229 = v133;
  v280 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v228);
  v135 = v229;
  if (v229)
  {
    v136 = (unint64_t *)&v229->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = (MIL::Validation::TensorSymbolicShapeConstraints *)v280;
  v280 = 0;
  if (v138)
    v138 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v138 + 8))(v138);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v138);
  v139 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v224, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v226 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v227 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v222, "Batch");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v139 + 3))(v139, &v226, 0, v222);
  if (v223 < 0)
    operator delete(v222[0]);
  v142 = v227;
  if (v227)
  {
    v143 = (unint64_t *)&v227->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  if (v225 < 0)
    operator delete(v224);
  v146 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v218, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v220 = Scalar;
  if (Scalar)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = Scalar;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v221 = v147;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v216, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))*v146 + 4))(v146, &v220, 1, -2, v216);
  if (v217 < 0)
    operator delete(v216[0]);
  v149 = v221;
  if (v221)
  {
    v150 = (unint64_t *)&v221->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = Scalar;
  Scalar = 0;
  if (v152)
    (*((void (**)(std::__shared_weak_count_vtbl *))v152->~__shared_weak_count + 1))(v152);
  if (v219 < 0)
    operator delete(v218);
  v153 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v212, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v214 = Scalar;
  if (Scalar)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = Scalar;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v215 = v154;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v210, "Cin");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v153 + 3))(v153, &v214, -1, v210);
  if (v211 < 0)
    operator delete(v210[0]);
  v156 = v215;
  if (v215)
  {
    v157 = (unint64_t *)&v215->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = Scalar;
  Scalar = 0;
  if (v159)
    (*((void (**)(std::__shared_weak_count_vtbl *))v159->~__shared_weak_count + 1))(v159);
  if (v213 < 0)
    operator delete(v212);
  v160 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v206, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v208 = Scalar;
  if (Scalar)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = Scalar;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v162;
  }
  else
  {
    v161 = 0;
  }
  v209 = v161;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v204, "NUM_SPATIAL_DIMS_PLUS_ONE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v160 + 3))(v160, &v208, 0, v204);
  if (v205 < 0)
    operator delete(v204[0]);
  v163 = v209;
  if (v209)
  {
    v164 = (unint64_t *)&v209->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = Scalar;
  Scalar = 0;
  if (v166)
    (*((void (**)(std::__shared_weak_count_vtbl *))v166->~__shared_weak_count + 1))(v166);
  if (v207 < 0)
    operator delete(v206);
  v167 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v200, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v202 = Scalar;
  if (Scalar)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = Scalar;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v203 = v168;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v198, "NUM_SPATIAL_DIMS_PLUS_ONE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v167 + 3))(v167, &v202, 0, v198);
  if (v199 < 0)
    operator delete(v198[0]);
  v170 = v203;
  if (v203)
  {
    v171 = (unint64_t *)&v203->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = Scalar;
  Scalar = 0;
  if (v173)
    (*((void (**)(std::__shared_weak_count_vtbl *))v173->~__shared_weak_count + 1))(v173);
  if (v201 < 0)
    operator delete(v200);
  v174 = v280;
  std::string::basic_string[abi:ne180100]<0>(&v194, "custom_pads");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v196 = Scalar;
  if (Scalar)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = Scalar;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v197 = v175;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v192, "TWICE_NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v174 + 3))(v174, &v196, 0, v192);
  if (v193 < 0)
    operator delete(v192[0]);
  v177 = v197;
  if (v197)
  {
    v178 = (unint64_t *)&v197->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = Scalar;
  Scalar = 0;
  if (v180)
    (*((void (**)(std::__shared_weak_count_vtbl *))v180->~__shared_weak_count + 1))(v180);
  if (v195 < 0)
    operator delete(v194);
  v181 = *a4;
  v190 = v280;
  if (v280)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = v280;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = (std::__shared_weak_count_vtbl *)v183;
  }
  else
  {
    v182 = 0;
  }
  v191 = v182;
  v280 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v181 + 56))(v181, &v190);
  v184 = v191;
  if (v191)
  {
    v185 = (unint64_t *)&v191->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = v280;
  v280 = 0;
  if (v187)
    (*((void (**)(void **))*v187 + 1))(v187);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v259, 0);
  result = (uint64_t)v269;
  if (v269)
  {
    v189 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v269);
    return MEMORY[0x20BCFF140](v189, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2068FFDC4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::NeAvgPool::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void **v41;
  unsigned __int8 *v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  void **v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  unsigned __int8 *v66;
  void **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unsigned __int8 *v72;
  void **v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  unsigned __int8 *v78;
  void **v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  unsigned __int8 *v84;
  void **v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  char **v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  __int128 v113;
  void **v114;
  char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  char **v123;
  _QWORD *v124;
  uint64_t v125;
  MIL::Validation::TensorDTypeConstraints *v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  void **v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  void **v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  void **v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  MIL::Validation::TensorRankValueConstraints *v152;
  void **v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count_vtbl *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  void **v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  MIL::Validation::TensorSymbolicShapeConstraints *v166;
  void **v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count_vtbl *v173;
  void **v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count_vtbl *v180;
  void **v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count_vtbl *v187;
  void **v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count_vtbl *v194;
  void **v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count_vtbl *v201;
  void **v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count_vtbl *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  void **v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  void **v215;
  uint64_t result;
  uint64_t v217;
  void **v218;
  std::__shared_weak_count *v219;
  void *v220[2];
  char v221;
  void *v222;
  char v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  void *v226[2];
  char v227;
  void *v228;
  char v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  void *v232[2];
  char v233;
  void *v234;
  char v235;
  std::__shared_weak_count_vtbl *v236;
  std::__shared_weak_count *v237;
  void *v238[2];
  char v239;
  void *v240;
  char v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  char v245;
  void *v246;
  char v247;
  std::__shared_weak_count_vtbl *v248;
  std::__shared_weak_count *v249;
  void *v250[2];
  char v251;
  void *v252;
  char v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  void **v256;
  std::__shared_weak_count *v257;
  void *v258;
  char v259;
  std::__shared_weak_count_vtbl *v260;
  std::__shared_weak_count *v261;
  void **v262;
  std::__shared_weak_count *v263;
  void *v264[2];
  char v265;
  std::__shared_weak_count_vtbl *v266;
  std::__shared_weak_count *v267;
  void *v268[2];
  char v269;
  void *v270;
  char v271;
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  char **v274;
  std::__shared_weak_count *v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  void *v278[2];
  uint64_t v279;
  void *v280;
  void *v281;
  _QWORD *v282;
  std::__shared_weak_count *v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  char **v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count *v289;
  std::__shared_weak_count *v290;
  std::__shared_weak_count *v291;
  std::__shared_weak_count *v292;
  std::__shared_weak_count *v293;
  std::__shared_weak_count *v294;
  std::__shared_weak_count *v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count *v297;
  void *__p;
  void *v299;
  _QWORD *v300;
  std::__shared_weak_count *v301;
  _QWORD *v302;
  _BYTE v303[24];
  _BYTE *v304;
  _QWORD v305[3];
  MIL::Validation::TensorDTypeConstraints *v306;
  void *v307;
  void *v308;
  _QWORD *v309;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v312;
  void **v313;
  void **v314;
  uint64_t v315;
  char *v316;
  char **v317;
  uint64_t v318;

  v318 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v302 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v312 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v313 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v308 = v14 + 3;
  v309 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v307 = v14;
  v314 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v300 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v299 = v18 + 3;
  v315 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v280);
  v19 = v280;
  v280 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v301;
  if (v301)
  {
    p_shared_owners = (unint64_t *)&v301->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v299 = __p;
    operator delete(__p);
  }
  if (v307)
  {
    v308 = v307;
    operator delete(v307);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v302;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (void **)operator new(8uLL);
  v313 = v25;
  *v25 = (void *)v24;
  v314 = v25 + 1;
  v315 = (uint64_t)(v25 + 1);
  v307 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v23, "kernel_sizes", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = v297;
  if (v297)
  {
    v29 = (unint64_t *)&v297->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v313)
  {
    v314 = v313;
    operator delete(v313);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v31 = v302;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (void **)operator new(8uLL);
  v313 = v33;
  *v33 = (void *)v32;
  v314 = v33 + 1;
  v315 = (uint64_t)(v33 + 1);
  v307 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v31, "strides", (uint64_t *)&Scalar);
  v35 = Scalar;
  Scalar = 0;
  if (v35)
    (*((void (**)(std::__shared_weak_count_vtbl *))v35->~__shared_weak_count + 1))(v35);
  v36 = v296;
  if (v296)
  {
    v37 = (unint64_t *)&v296->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v313)
  {
    v314 = v313;
    operator delete(v313);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v39 = v302;
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = (void **)operator new(8uLL);
  v313 = v41;
  *v41 = (void *)v40;
  v314 = v41 + 1;
  v315 = (uint64_t)(v41 + 1);
  v307 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v39, "custom_pads", (uint64_t *)&Scalar);
  v43 = Scalar;
  Scalar = 0;
  if (v43)
    (*((void (**)(std::__shared_weak_count_vtbl *))v43->~__shared_weak_count + 1))(v43);
  v44 = v295;
  if (v295)
  {
    v45 = (unint64_t *)&v295->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v313)
  {
    v314 = v313;
    operator delete(v313);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v47 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v47, "post_right_shift", (uint64_t *)&v313);
  v49 = v313;
  v313 = 0;
  if (v49)
    (*((void (**)(void **))*v49 + 1))(v49);
  v50 = v294;
  if (v294)
  {
    v51 = (unint64_t *)&v294->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 48))(*((_QWORD *)v48 + 5), 1);
  v53 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v53, "post_scale", (uint64_t *)&v313);
  v55 = v313;
  v313 = 0;
  if (v55)
    (*((void (**)(void **))*v55 + 1))(v55);
  v56 = v293;
  if (v293)
  {
    v57 = (unint64_t *)&v293->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 48))(*((_QWORD *)v54 + 5), 1);
  v59 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v59, "bias", (uint64_t *)&v313);
  v61 = v313;
  v313 = 0;
  if (v61)
    (*((void (**)(void **))*v61 + 1))(v61);
  v62 = v292;
  if (v292)
  {
    v63 = (unint64_t *)&v292->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 48))(*((_QWORD *)v60 + 5), 1);
  v65 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v66 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v65, "acc_left_shift", (uint64_t *)&v313);
  v67 = v313;
  v313 = 0;
  if (v67)
    (*((void (**)(void **))*v67 + 1))(v67);
  v68 = v291;
  if (v291)
  {
    v69 = (unint64_t *)&v291->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 32))(*((_QWORD *)v66 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v66 + 5) + 48))(*((_QWORD *)v66 + 5), 1);
  v71 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v71, "acc_bias_shift", (uint64_t *)&v313);
  v73 = v313;
  v313 = 0;
  if (v73)
    (*((void (**)(void **))*v73 + 1))(v73);
  v74 = v290;
  if (v290)
  {
    v75 = (unint64_t *)&v290->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 32))(*((_QWORD *)v72 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 48))(*((_QWORD *)v72 + 5), 1);
  v77 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v78 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v77, "include_pads", (uint64_t *)&v313);
  v79 = v313;
  v313 = 0;
  if (v79)
    (*((void (**)(void **))*v79 + 1))(v79);
  v80 = v289;
  if (v289)
  {
    v81 = (unint64_t *)&v289->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v78 + 5) + 32))(*((_QWORD *)v78 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v78 + 5) + 48))(*((_QWORD *)v78 + 5), 1);
  v83 = v302;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v84 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v83, "pre_relu", (uint64_t *)&v313);
  v85 = v313;
  v313 = 0;
  if (v85)
    (*((void (**)(void **))*v85 + 1))(v85);
  v86 = v288;
  if (v288)
  {
    v87 = (unint64_t *)&v288->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v84 + 5) + 32))(*((_QWORD *)v84 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v84 + 5) + 48))(*((_QWORD *)v84 + 5), 1);
  v287 = 0;
  v89 = operator new();
  *(_QWORD *)v89 = 0;
  *(_QWORD *)(v89 + 8) = 0;
  *(_QWORD *)(v89 + 16) = 0;
  v313 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v287, (void **)v89);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v313, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v287, 1uLL);
  v90 = v287;
  v91 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v92 = operator new(8uLL);
  v307 = v92;
  *v92 = v91;
  v308 = v92 + 1;
  v309 = v92 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v93 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v94 = operator new(8uLL);
  __p = v94;
  *v94 = v93;
  v300 = v94 + 1;
  v299 = v94 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v95 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v96 = operator new(8uLL);
  v280 = v96;
  *v96 = v95;
  v282 = v96 + 1;
  v281 = v96 + 1;
  v312 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v97 = v284;
  v285 = v284;
  if (v284)
  {
    v98 = (_QWORD *)operator new();
    v99 = v284;
    *v98 = &unk_24BFE7320;
    v98[1] = 0;
    v98[2] = 0;
    v98[3] = v99;
  }
  else
  {
    v98 = 0;
  }
  v286 = v98;
  v284 = 0;
  v100 = v90[2];
  v101 = v90[1];
  if (v101 >= v100)
  {
    v103 = (v101 - *v90) >> 4;
    v104 = v103 + 1;
    if ((unint64_t)(v103 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v105 = v100 - *v90;
    if (v105 >> 3 > v104)
      v104 = v105 >> 3;
    if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF0)
      v106 = 0xFFFFFFFFFFFFFFFLL;
    else
      v106 = v104;
    v317 = v90 + 2;
    v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v90 + 2), v106);
    v109 = &v107[16 * v103];
    *(_QWORD *)v109 = v97;
    *((_QWORD *)v109 + 1) = v98;
    v286 = 0;
    v285 = 0;
    v111 = *v90;
    v110 = v90[1];
    if (v110 == *v90)
    {
      v114 = (void **)v90[1];
      v112 = &v107[16 * v103];
    }
    else
    {
      v112 = &v107[16 * v103];
      do
      {
        v113 = *((_OWORD *)v110 - 1);
        v110 -= 16;
        *((_OWORD *)v112 - 1) = v113;
        v112 -= 16;
        *(_QWORD *)v110 = 0;
        *((_QWORD *)v110 + 1) = 0;
      }
      while (v110 != v111);
      v114 = (void **)*v90;
      v110 = v90[1];
    }
    v102 = v109 + 16;
    *v90 = v112;
    v313 = v114;
    v314 = v114;
    v90[1] = v109 + 16;
    v315 = (uint64_t)v110;
    v115 = v90[2];
    v90[2] = &v107[16 * v108];
    v316 = v115;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v313);
  }
  else
  {
    *(_QWORD *)v101 = v97;
    *((_QWORD *)v101 + 1) = v98;
    v102 = v101 + 16;
    v286 = 0;
    v285 = 0;
  }
  v90[1] = v102;
  v116 = v284;
  v284 = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  v117 = v283;
  if (v283)
  {
    v118 = (unint64_t *)&v283->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (v280)
  {
    v281 = v280;
    operator delete(v280);
  }
  if (__p)
  {
    v299 = __p;
    operator delete(__p);
  }
  if (v307)
  {
    v308 = v307;
    operator delete(v307);
  }
  *(_OWORD *)v278 = *(_OWORD *)a2;
  v279 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v120 = (uint64_t)v302;
  v276 = (uint64_t)v302;
  if (v302)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = (std::__shared_weak_count_vtbl *)v120;
  }
  else
  {
    v121 = 0;
  }
  v277 = v121;
  v302 = 0;
  v274 = v287;
  if (v287)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = v287;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = (std::__shared_weak_count_vtbl *)v123;
  }
  else
  {
    v122 = 0;
  }
  v275 = v122;
  v287 = 0;
  v305[0] = &unk_24BFE7440;
  v305[1] = ANEMachineIR::H2022::Validators::ValidateNeAvgPool;
  v306 = (MIL::Validation::TensorDTypeConstraints *)v305;
  v304 = 0;
  MIL::IROperator::Make();
  v124 = v304;
  if (v304 == v303)
  {
    v125 = 4;
    v124 = v303;
  }
  else
  {
    if (!v304)
      goto LABEL_131;
    v125 = 5;
  }
  (*(void (**)(void))(*v124 + 8 * v125))();
LABEL_131:
  v126 = v306;
  if (v306 == (MIL::Validation::TensorDTypeConstraints *)v305)
  {
    v127 = 4;
    v126 = (MIL::Validation::TensorDTypeConstraints *)v305;
    goto LABEL_135;
  }
  if (v306)
  {
    v127 = 5;
LABEL_135:
    v126 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v126 + 8 * v127))();
  }
  if (v275)
  {
    v128 = &v275->__shared_owners_;
    do
      v129 = __ldaxr((unint64_t *)v128);
    while (__stlxr(v129 - 1, (unint64_t *)v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  if (v277)
  {
    v130 = &v277->__shared_owners_;
    do
      v131 = __ldaxr((unint64_t *)v130);
    while (__stlxr(v131 - 1, (unint64_t *)v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
      std::__shared_weak_count::__release_weak(v277);
    }
  }
  if (SHIBYTE(v279) < 0)
    operator delete(v278[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v126);
  v132 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v270, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v272 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v273 = v133;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v268, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v132 + 3))(v132, &v272, v268);
  if (v269 < 0)
    operator delete(v268[0]);
  v135 = v273;
  if (v273)
  {
    v136 = (unint64_t *)&v273->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*((void (**)(std::__shared_weak_count_vtbl *))v138->~__shared_weak_count + 1))(v138);
  if (v271 < 0)
    operator delete(v270);
  v139 = v313;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v266 = Scalar;
  if (Scalar)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = Scalar;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v267 = v140;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v264, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v139 + 3))(v139, &v266, v264);
  if (v265 < 0)
    operator delete(v264[0]);
  v142 = v267;
  if (v267)
  {
    v143 = (unint64_t *)&v267->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = Scalar;
  Scalar = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  v146 = *a3;
  v262 = v313;
  if (v313)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = v313;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = (std::__shared_weak_count_vtbl *)v148;
  }
  else
  {
    v147 = 0;
  }
  v263 = v147;
  v313 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v146 + 56))(v146, &v262);
  v149 = v263;
  if (v263)
  {
    v150 = (unint64_t *)&v263->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = (MIL::Validation::TensorRankValueConstraints *)v313;
  v313 = 0;
  if (v152)
    v152 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v152 + 8))(v152);
  MIL::Validation::TensorRankValueConstraints::Make(v152);
  v153 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v258, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v260 = Scalar;
  if (Scalar)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = Scalar;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v261 = v154;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v153 + 4))(v153, &v260, 3, 5);
  v156 = v261;
  if (v261)
  {
    v157 = (unint64_t *)&v261->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = Scalar;
  Scalar = 0;
  if (v159)
    (*((void (**)(std::__shared_weak_count_vtbl *))v159->~__shared_weak_count + 1))(v159);
  if (v259 < 0)
    operator delete(v258);
  v160 = *a3;
  v256 = v313;
  if (v313)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = v313;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = (std::__shared_weak_count_vtbl *)v162;
  }
  else
  {
    v161 = 0;
  }
  v257 = v161;
  v313 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v160 + 56))(v160, &v256);
  v163 = v257;
  if (v257)
  {
    v164 = (unint64_t *)&v257->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = (MIL::Validation::TensorSymbolicShapeConstraints *)v313;
  v313 = 0;
  if (v166)
    v166 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v166 + 8))(v166);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v166);
  v167 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v252, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v254 = Scalar;
  if (Scalar)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = Scalar;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v255 = v168;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v250, "Batch");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v167 + 3))(v167, &v254, 0, v250);
  if (v251 < 0)
    operator delete(v250[0]);
  v170 = v255;
  if (v255)
  {
    v171 = (unint64_t *)&v255->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = Scalar;
  Scalar = 0;
  if (v173)
    (*((void (**)(std::__shared_weak_count_vtbl *))v173->~__shared_weak_count + 1))(v173);
  if (v253 < 0)
    operator delete(v252);
  v174 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v246, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v248 = Scalar;
  if (Scalar)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = Scalar;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v249 = v175;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v244, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))*v174 + 4))(v174, &v248, 1, -2, v244);
  if (v245 < 0)
    operator delete(v244[0]);
  v177 = v249;
  if (v249)
  {
    v178 = (unint64_t *)&v249->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = Scalar;
  Scalar = 0;
  if (v180)
    (*((void (**)(std::__shared_weak_count_vtbl *))v180->~__shared_weak_count + 1))(v180);
  if (v247 < 0)
    operator delete(v246);
  v181 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v240, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v242 = Scalar;
  if (Scalar)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = Scalar;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v183;
  }
  else
  {
    v182 = 0;
  }
  v243 = v182;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v238, "Cin");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v181 + 3))(v181, &v242, -1, v238);
  if (v239 < 0)
    operator delete(v238[0]);
  v184 = v243;
  if (v243)
  {
    v185 = (unint64_t *)&v243->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = Scalar;
  Scalar = 0;
  if (v187)
    (*((void (**)(std::__shared_weak_count_vtbl *))v187->~__shared_weak_count + 1))(v187);
  if (v241 < 0)
    operator delete(v240);
  v188 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v234, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v236 = Scalar;
  if (Scalar)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = Scalar;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v190;
  }
  else
  {
    v189 = 0;
  }
  v237 = v189;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v232, "NUM_SPATIAL_DIMS_PLUS_ONE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v188 + 3))(v188, &v236, 0, v232);
  if (v233 < 0)
    operator delete(v232[0]);
  v191 = v237;
  if (v237)
  {
    v192 = (unint64_t *)&v237->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = Scalar;
  Scalar = 0;
  if (v194)
    (*((void (**)(std::__shared_weak_count_vtbl *))v194->~__shared_weak_count + 1))(v194);
  if (v235 < 0)
    operator delete(v234);
  v195 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v228, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v230 = Scalar;
  if (Scalar)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = Scalar;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v231 = v196;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v226, "NUM_SPATIAL_DIMS_PLUS_ONE");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v195 + 3))(v195, &v230, 0, v226);
  if (v227 < 0)
    operator delete(v226[0]);
  v198 = v231;
  if (v231)
  {
    v199 = (unint64_t *)&v231->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = Scalar;
  Scalar = 0;
  if (v201)
    (*((void (**)(std::__shared_weak_count_vtbl *))v201->~__shared_weak_count + 1))(v201);
  if (v229 < 0)
    operator delete(v228);
  v202 = v313;
  std::string::basic_string[abi:ne180100]<0>(&v222, "custom_pads");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v224 = Scalar;
  if (Scalar)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = Scalar;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v225 = v203;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v220, "TWICE_NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v202 + 3))(v202, &v224, 0, v220);
  if (v221 < 0)
    operator delete(v220[0]);
  v205 = v225;
  if (v225)
  {
    v206 = (unint64_t *)&v225->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = Scalar;
  Scalar = 0;
  if (v208)
    (*((void (**)(std::__shared_weak_count_vtbl *))v208->~__shared_weak_count + 1))(v208);
  if (v223 < 0)
    operator delete(v222);
  v209 = *a3;
  v218 = v313;
  if (v313)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v211 = v313;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = (std::__shared_weak_count_vtbl *)v211;
  }
  else
  {
    v210 = 0;
  }
  v219 = v210;
  v313 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v209 + 56))(v209, &v218);
  v212 = v219;
  if (v219)
  {
    v213 = (unint64_t *)&v219->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = v313;
  v313 = 0;
  if (v215)
    (*((void (**)(void **))*v215 + 1))(v215);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v287, 0);
  result = (uint64_t)v302;
  if (v302)
  {
    v217 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v302);
    return MEMORY[0x20BCFF140](v217, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206901EE8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::NeMaxPool::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidateNeMaxPool;
  v8 = v7;
  ANEMachineIR::H2022::BaseNePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20690276C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::NeMinPool::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidateNeMinPool;
  v8 = v7;
  ANEMachineIR::H2022::BaseNePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_206902884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::BasePePool::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  unsigned __int8 *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void **v35;
  unsigned __int8 *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void **v43;
  unsigned __int8 *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void **v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  void **v80;
  char *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  char **v89;
  _QWORD *v90;
  uint64_t v91;
  MIL::Validation::TensorDTypeConstraints *v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  void **v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void **v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  MIL::Validation::TensorRankValueConstraints *v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void **v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  MIL::Validation::TensorSymbolicShapeConstraints *v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count_vtbl *v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count_vtbl *v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count_vtbl *v153;
  void **v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count_vtbl *v160;
  void **v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  void **v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count_vtbl *v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  void **v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  void **v181;
  uint64_t result;
  uint64_t v183;
  void **v184;
  std::__shared_weak_count *v185;
  void *v186[2];
  char v187;
  void *v188;
  char v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  void *v192[2];
  char v193;
  void *v194;
  char v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  void *v198[2];
  char v199;
  void *v200;
  char v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  char v205;
  void *v206;
  char v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  char v211;
  void *v212;
  char v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  void *v218;
  char v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  void **v222;
  std::__shared_weak_count *v223;
  void *v224;
  char v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  void **v228;
  std::__shared_weak_count *v229;
  void *v230[2];
  char v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  void *v234[2];
  char v235;
  void *v236;
  char v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  char **v240;
  std::__shared_weak_count *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  uint64_t v245;
  void *v246;
  void *v247;
  _QWORD *v248;
  std::__shared_weak_count *v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  char **v253;
  std::__shared_weak_count *v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count *v256;
  std::__shared_weak_count *v257;
  void *__p;
  void *v259;
  _QWORD *v260;
  std::__shared_weak_count *v261;
  _QWORD *v262;
  _BYTE v263[24];
  _BYTE *v264;
  _QWORD v265[3];
  MIL::Validation::TensorDTypeConstraints *v266;
  void *v267;
  void *v268;
  _QWORD *v269;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v272;
  void **v273;
  void **v274;
  uint64_t v275;
  char *v276;
  char **v277;
  uint64_t v278;

  v278 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v262 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v12->__get_deleter;
  v272 = (uint64_t)&v12->__get_deleter;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  Scalar = v12;
  v273 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x18uLL);
  v268 = v16 + 3;
  v269 = v16 + 3;
  *v16 = v13;
  v16[1] = v14;
  v16[2] = v15;
  v267 = v16;
  v274 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = operator new(0x18uLL);
  v260 = v20 + 3;
  *v20 = v17;
  v20[1] = v18;
  v20[2] = v19;
  __p = v20;
  v259 = v20 + 3;
  v275 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v246);
  v21 = v246;
  v246 = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = v261;
  if (v261)
  {
    p_shared_owners = (unint64_t *)&v261->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v259 = __p;
    operator delete(__p);
  }
  if (v267)
  {
    v268 = v267;
    operator delete(v267);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v25 = v262;
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (void **)operator new(8uLL);
  v273 = v27;
  *v27 = (void *)v26;
  v274 = v27 + 1;
  v275 = (uint64_t)(v27 + 1);
  v267 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v25, "kernel_sizes", (uint64_t *)&Scalar);
  v29 = Scalar;
  Scalar = 0;
  if (v29)
    (*((void (**)(std::__shared_weak_count_vtbl *))v29->~__shared_weak_count + 1))(v29);
  v30 = v257;
  if (v257)
  {
    v31 = (unint64_t *)&v257->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v33 = v262;
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = (void **)operator new(8uLL);
  v273 = v35;
  *v35 = (void *)v34;
  v274 = v35 + 1;
  v275 = (uint64_t)(v35 + 1);
  v267 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v33, "strides", (uint64_t *)&Scalar);
  v37 = Scalar;
  Scalar = 0;
  if (v37)
    (*((void (**)(std::__shared_weak_count_vtbl *))v37->~__shared_weak_count + 1))(v37);
  v38 = v256;
  if (v256)
  {
    v39 = (unint64_t *)&v256->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v262;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (void **)operator new(8uLL);
  v273 = v43;
  *v43 = (void *)v42;
  v274 = v43 + 1;
  v275 = (uint64_t)(v43 + 1);
  v267 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v41, "custom_pads", (uint64_t *)&Scalar);
  v45 = Scalar;
  Scalar = 0;
  if (v45)
    (*((void (**)(std::__shared_weak_count_vtbl *))v45->~__shared_weak_count + 1))(v45);
  v46 = v255;
  if (v255)
  {
    v47 = (unint64_t *)&v255->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v262;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v49, "post_scale", (uint64_t *)&v273);
  v51 = v273;
  v273 = 0;
  if (v51)
    (*((void (**)(void **))*v51 + 1))(v51);
  v52 = v254;
  if (v254)
  {
    v53 = (unint64_t *)&v254->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 48))(*((_QWORD *)v50 + 5), 1);
  v253 = 0;
  v55 = operator new();
  *(_QWORD *)v55 = 0;
  *(_QWORD *)(v55 + 8) = 0;
  *(_QWORD *)(v55 + 16) = 0;
  v273 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v253, (void **)v55);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v273, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v253, 1uLL);
  v56 = v253;
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v267 = v58;
  *v58 = v57;
  v268 = v58 + 1;
  v269 = v58 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v59 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v60 = operator new(8uLL);
  __p = v60;
  *v60 = v59;
  v260 = v60 + 1;
  v259 = v60 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v61 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v62 = operator new(8uLL);
  v246 = v62;
  *v62 = v61;
  v248 = v62 + 1;
  v247 = v62 + 1;
  v272 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v63 = v250;
  v251 = v250;
  if (v250)
  {
    v64 = (_QWORD *)operator new();
    v65 = v250;
    *v64 = &unk_24BFE7320;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  v252 = v64;
  v250 = 0;
  v66 = v56[2];
  v67 = v56[1];
  if (v67 >= v66)
  {
    v69 = (v67 - *v56) >> 4;
    v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v71 = v66 - *v56;
    if (v71 >> 3 > v70)
      v70 = v71 >> 3;
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0)
      v72 = 0xFFFFFFFFFFFFFFFLL;
    else
      v72 = v70;
    v277 = v56 + 2;
    v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v56 + 2), v72);
    v75 = &v73[16 * v69];
    *(_QWORD *)v75 = v63;
    *((_QWORD *)v75 + 1) = v64;
    v252 = 0;
    v251 = 0;
    v77 = *v56;
    v76 = v56[1];
    if (v76 == *v56)
    {
      v80 = (void **)v56[1];
      v78 = &v73[16 * v69];
    }
    else
    {
      v78 = &v73[16 * v69];
      do
      {
        v79 = *((_OWORD *)v76 - 1);
        v76 -= 16;
        *((_OWORD *)v78 - 1) = v79;
        v78 -= 16;
        *(_QWORD *)v76 = 0;
        *((_QWORD *)v76 + 1) = 0;
      }
      while (v76 != v77);
      v80 = (void **)*v56;
      v76 = v56[1];
    }
    v68 = v75 + 16;
    *v56 = v78;
    v273 = v80;
    v274 = v80;
    v56[1] = v75 + 16;
    v275 = (uint64_t)v76;
    v81 = v56[2];
    v56[2] = &v73[16 * v74];
    v276 = v81;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v273);
  }
  else
  {
    *(_QWORD *)v67 = v63;
    *((_QWORD *)v67 + 1) = v64;
    v68 = v67 + 16;
    v252 = 0;
    v251 = 0;
  }
  v56[1] = v68;
  v82 = v250;
  v250 = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = v249;
  if (v249)
  {
    v84 = (unint64_t *)&v249->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  if (__p)
  {
    v259 = __p;
    operator delete(__p);
  }
  if (v267)
  {
    v268 = v267;
    operator delete(v267);
  }
  *(_OWORD *)v244 = *(_OWORD *)a2;
  v245 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v86 = (uint64_t)v262;
  v242 = (uint64_t)v262;
  if (v262)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = (std::__shared_weak_count_vtbl *)v86;
  }
  else
  {
    v87 = 0;
  }
  v243 = v87;
  v262 = 0;
  v240 = v253;
  if (v253)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v253;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v241 = v88;
  v253 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v265, a3);
  }
  else
  {
    v265[0] = &unk_24BFE7440;
    v265[1] = ANEMachineIR::H2022::Validators::ValidateBasePePool;
    v266 = (MIL::Validation::TensorDTypeConstraints *)v265;
  }
  v264 = 0;
  MIL::IROperator::Make();
  v90 = v264;
  if (v264 == v263)
  {
    v91 = 4;
    v90 = v263;
  }
  else
  {
    if (!v264)
      goto LABEL_92;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_92:
  v92 = v266;
  if (v266 == (MIL::Validation::TensorDTypeConstraints *)v265)
  {
    v93 = 4;
    v92 = (MIL::Validation::TensorDTypeConstraints *)v265;
    goto LABEL_96;
  }
  if (v266)
  {
    v93 = 5;
LABEL_96:
    v92 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v92 + 8 * v93))();
  }
  if (v241)
  {
    v94 = &v241->__shared_owners_;
    do
      v95 = __ldaxr((unint64_t *)v94);
    while (__stlxr(v95 - 1, (unint64_t *)v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  if (v243)
  {
    v96 = &v243->__shared_owners_;
    do
      v97 = __ldaxr((unint64_t *)v96);
    while (__stlxr(v97 - 1, (unint64_t *)v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  if (SHIBYTE(v245) < 0)
    operator delete(v244[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v92);
  v98 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v236, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v238 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v239 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v234, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v98 + 3))(v98, &v238, v234);
  if (v235 < 0)
    operator delete(v234[0]);
  v101 = v239;
  if (v239)
  {
    v102 = (unint64_t *)&v239->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v237 < 0)
    operator delete(v236);
  v105 = v273;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v232 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v233 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v230, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v105 + 3))(v105, &v232, v230);
  if (v231 < 0)
    operator delete(v230[0]);
  v108 = v233;
  if (v233)
  {
    v109 = (unint64_t *)&v233->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  v112 = *a4;
  v228 = v273;
  if (v273)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v273;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v229 = v113;
  v273 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v112 + 56))(v112, &v228);
  v115 = v229;
  if (v229)
  {
    v116 = (unint64_t *)&v229->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = (MIL::Validation::TensorRankValueConstraints *)v273;
  v273 = 0;
  if (v118)
    v118 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v118 + 8))(v118);
  MIL::Validation::TensorRankValueConstraints::Make(v118);
  v119 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v224, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v226 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v227 = v120;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v119 + 4))(v119, &v226, 3, 5);
  v122 = v227;
  if (v227)
  {
    v123 = (unint64_t *)&v227->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  if (v225 < 0)
    operator delete(v224);
  v126 = *a4;
  v222 = v273;
  if (v273)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v273;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = (std::__shared_weak_count_vtbl *)v128;
  }
  else
  {
    v127 = 0;
  }
  v223 = v127;
  v273 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v126 + 56))(v126, &v222);
  v129 = v223;
  if (v223)
  {
    v130 = (unint64_t *)&v223->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (MIL::Validation::TensorSymbolicShapeConstraints *)v273;
  v273 = 0;
  if (v132)
    v132 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v132 + 8))(v132);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v132);
  v133 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v218, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v220 = Scalar;
  if (Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v221 = v134;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v216, "Batch");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v133 + 3))(v133, &v220, 0, v216);
  if (v217 < 0)
    operator delete(v216[0]);
  v136 = v221;
  if (v221)
  {
    v137 = (unint64_t *)&v221->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = Scalar;
  Scalar = 0;
  if (v139)
    (*((void (**)(std::__shared_weak_count_vtbl *))v139->~__shared_weak_count + 1))(v139);
  if (v219 < 0)
    operator delete(v218);
  v140 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v212, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v214 = Scalar;
  if (Scalar)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = Scalar;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v215 = v141;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v210, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))*v140 + 4))(v140, &v214, 1, -2, v210);
  if (v211 < 0)
    operator delete(v210[0]);
  v143 = v215;
  if (v215)
  {
    v144 = (unint64_t *)&v215->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = Scalar;
  Scalar = 0;
  if (v146)
    (*((void (**)(std::__shared_weak_count_vtbl *))v146->~__shared_weak_count + 1))(v146);
  if (v213 < 0)
    operator delete(v212);
  v147 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v206, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v208 = Scalar;
  if (Scalar)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = Scalar;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v209 = v148;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v204, "Cin");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v147 + 3))(v147, &v208, -1, v204);
  if (v205 < 0)
    operator delete(v204[0]);
  v150 = v209;
  if (v209)
  {
    v151 = (unint64_t *)&v209->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = Scalar;
  Scalar = 0;
  if (v153)
    (*((void (**)(std::__shared_weak_count_vtbl *))v153->~__shared_weak_count + 1))(v153);
  if (v207 < 0)
    operator delete(v206);
  v154 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v200, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v202 = Scalar;
  if (Scalar)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = Scalar;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v203 = v155;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v198, "NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v154 + 3))(v154, &v202, 0, v198);
  if (v199 < 0)
    operator delete(v198[0]);
  v157 = v203;
  if (v203)
  {
    v158 = (unint64_t *)&v203->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = Scalar;
  Scalar = 0;
  if (v160)
    (*((void (**)(std::__shared_weak_count_vtbl *))v160->~__shared_weak_count + 1))(v160);
  if (v201 < 0)
    operator delete(v200);
  v161 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v194, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v196 = Scalar;
  if (Scalar)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = Scalar;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v197 = v162;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v192, "NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v161 + 3))(v161, &v196, 0, v192);
  if (v193 < 0)
    operator delete(v192[0]);
  v164 = v197;
  if (v197)
  {
    v165 = (unint64_t *)&v197->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = Scalar;
  Scalar = 0;
  if (v167)
    (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
  if (v195 < 0)
    operator delete(v194);
  v168 = v273;
  std::string::basic_string[abi:ne180100]<0>(&v188, "custom_pads");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v190 = Scalar;
  if (Scalar)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = Scalar;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = v170;
  }
  else
  {
    v169 = 0;
  }
  v191 = v169;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v186, "TWICE_NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v168 + 3))(v168, &v190, 0, v186);
  if (v187 < 0)
    operator delete(v186[0]);
  v171 = v191;
  if (v191)
  {
    v172 = (unint64_t *)&v191->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = Scalar;
  Scalar = 0;
  if (v174)
    (*((void (**)(std::__shared_weak_count_vtbl *))v174->~__shared_weak_count + 1))(v174);
  if (v189 < 0)
    operator delete(v188);
  v175 = *a4;
  v184 = v273;
  if (v273)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = v273;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = (std::__shared_weak_count_vtbl *)v177;
  }
  else
  {
    v176 = 0;
  }
  v185 = v176;
  v273 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v175 + 56))(v175, &v184);
  v178 = v185;
  if (v185)
  {
    v179 = (unint64_t *)&v185->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = v273;
  v273 = 0;
  if (v181)
    (*((void (**)(void **))*v181 + 1))(v181);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v253, 0);
  result = (uint64_t)v262;
  if (v262)
  {
    v183 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v262);
    return MEMORY[0x20BCFF140](v183, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206903EDC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::PeAvgPool::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void **v41;
  unsigned __int8 *v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  void **v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  void **v90;
  char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  char **v99;
  _QWORD *v100;
  uint64_t v101;
  MIL::Validation::TensorDTypeConstraints *v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t *v106;
  unint64_t v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void **v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void **v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  MIL::Validation::TensorRankValueConstraints *v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count_vtbl *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void **v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  MIL::Validation::TensorSymbolicShapeConstraints *v142;
  void **v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  void **v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count_vtbl *v156;
  void **v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  void **v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count_vtbl *v170;
  void **v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count_vtbl *v177;
  void **v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count_vtbl *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  void **v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void **v191;
  uint64_t result;
  uint64_t v193;
  void **v194;
  std::__shared_weak_count *v195;
  void *v196[2];
  char v197;
  void *v198;
  char v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  void *v202[2];
  char v203;
  void *v204;
  char v205;
  std::__shared_weak_count_vtbl *v206;
  std::__shared_weak_count *v207;
  void *v208[2];
  char v209;
  void *v210;
  char v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  void *v214[2];
  char v215;
  void *v216;
  char v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  void *v220[2];
  char v221;
  void *v222;
  char v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  void *v226[2];
  char v227;
  void *v228;
  char v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  void **v232;
  std::__shared_weak_count *v233;
  void *v234;
  char v235;
  std::__shared_weak_count_vtbl *v236;
  std::__shared_weak_count *v237;
  void **v238;
  std::__shared_weak_count *v239;
  void *v240[2];
  char v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  char v245;
  void *v246;
  char v247;
  std::__shared_weak_count_vtbl *v248;
  std::__shared_weak_count *v249;
  char **v250;
  std::__shared_weak_count *v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  void *v254[2];
  uint64_t v255;
  void *v256;
  void *v257;
  _QWORD *v258;
  std::__shared_weak_count *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char **v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count *v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count *v267;
  std::__shared_weak_count *v268;
  std::__shared_weak_count *v269;
  void *__p;
  void *v271;
  _QWORD *v272;
  std::__shared_weak_count *v273;
  _QWORD *v274;
  _BYTE v275[24];
  _BYTE *v276;
  _QWORD v277[3];
  MIL::Validation::TensorDTypeConstraints *v278;
  void *v279;
  void *v280;
  _QWORD *v281;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v284;
  void **v285;
  void **v286;
  uint64_t v287;
  char *v288;
  char **v289;
  uint64_t v290;

  v290 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v274 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  v284 = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v285 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = operator new(0x18uLL);
  v280 = v14 + 3;
  v281 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  v279 = v14;
  v286 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v272 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v271 = v18 + 3;
  v287 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v256);
  v19 = v256;
  v256 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v273;
  if (v273)
  {
    p_shared_owners = (unint64_t *)&v273->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v271 = __p;
    operator delete(__p);
  }
  if (v279)
  {
    v280 = v279;
    operator delete(v279);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v274;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = (void **)operator new(8uLL);
  v285 = v25;
  *v25 = (void *)v24;
  v286 = v25 + 1;
  v287 = (uint64_t)(v25 + 1);
  v279 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v23, "kernel_sizes", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = v269;
  if (v269)
  {
    v29 = (unint64_t *)&v269->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v285)
  {
    v286 = v285;
    operator delete(v285);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v31 = v274;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (void **)operator new(8uLL);
  v285 = v33;
  *v33 = (void *)v32;
  v286 = v33 + 1;
  v287 = (uint64_t)(v33 + 1);
  v279 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v31, "strides", (uint64_t *)&Scalar);
  v35 = Scalar;
  Scalar = 0;
  if (v35)
    (*((void (**)(std::__shared_weak_count_vtbl *))v35->~__shared_weak_count + 1))(v35);
  v36 = v268;
  if (v268)
  {
    v37 = (unint64_t *)&v268->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v285)
  {
    v286 = v285;
    operator delete(v285);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v39 = v274;
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = (void **)operator new(8uLL);
  v285 = v41;
  *v41 = (void *)v40;
  v286 = v41 + 1;
  v287 = (uint64_t)(v41 + 1);
  v279 = (void *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v39, "custom_pads", (uint64_t *)&Scalar);
  v43 = Scalar;
  Scalar = 0;
  if (v43)
    (*((void (**)(std::__shared_weak_count_vtbl *))v43->~__shared_weak_count + 1))(v43);
  v44 = v267;
  if (v267)
  {
    v45 = (unint64_t *)&v267->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v285)
  {
    v286 = v285;
    operator delete(v285);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v47 = v274;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v47, "post_scale", (uint64_t *)&v285);
  v49 = v285;
  v285 = 0;
  if (v49)
    (*((void (**)(void **))*v49 + 1))(v49);
  v50 = v266;
  if (v266)
  {
    v51 = (unint64_t *)&v266->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 48))(*((_QWORD *)v48 + 5), 1);
  v53 = v274;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v53, "include_pads", (uint64_t *)&v285);
  v55 = v285;
  v285 = 0;
  if (v55)
    (*((void (**)(void **))*v55 + 1))(v55);
  v56 = v265;
  if (v265)
  {
    v57 = (unint64_t *)&v265->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 48))(*((_QWORD *)v54 + 5), 1);
  v59 = v274;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v59, "pre_relu", (uint64_t *)&v285);
  v61 = v285;
  v285 = 0;
  if (v61)
    (*((void (**)(void **))*v61 + 1))(v61);
  v62 = v264;
  if (v264)
  {
    v63 = (unint64_t *)&v264->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 48))(*((_QWORD *)v60 + 5), 1);
  v263 = 0;
  v65 = operator new();
  *(_QWORD *)v65 = 0;
  *(_QWORD *)(v65 + 8) = 0;
  *(_QWORD *)(v65 + 16) = 0;
  v285 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v263, (void **)v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v285, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v263, 1uLL);
  v66 = v263;
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  v279 = v68;
  *v68 = v67;
  v280 = v68 + 1;
  v281 = v68 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  __p = v70;
  *v70 = v69;
  v272 = v70 + 1;
  v271 = v70 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v71 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v72 = operator new(8uLL);
  v256 = v72;
  *v72 = v71;
  v258 = v72 + 1;
  v257 = v72 + 1;
  v284 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v73 = v260;
  v261 = v260;
  if (v260)
  {
    v74 = (_QWORD *)operator new();
    v75 = v260;
    *v74 = &unk_24BFE7320;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  v262 = v74;
  v260 = 0;
  v76 = v66[2];
  v77 = v66[1];
  if (v77 >= v76)
  {
    v79 = (v77 - *v66) >> 4;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v81 = v76 - *v66;
    if (v81 >> 3 > v80)
      v80 = v81 >> 3;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
      v82 = 0xFFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    v289 = v66 + 2;
    v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v66 + 2), v82);
    v85 = &v83[16 * v79];
    *(_QWORD *)v85 = v73;
    *((_QWORD *)v85 + 1) = v74;
    v262 = 0;
    v261 = 0;
    v87 = *v66;
    v86 = v66[1];
    if (v86 == *v66)
    {
      v90 = (void **)v66[1];
      v88 = &v83[16 * v79];
    }
    else
    {
      v88 = &v83[16 * v79];
      do
      {
        v89 = *((_OWORD *)v86 - 1);
        v86 -= 16;
        *((_OWORD *)v88 - 1) = v89;
        v88 -= 16;
        *(_QWORD *)v86 = 0;
        *((_QWORD *)v86 + 1) = 0;
      }
      while (v86 != v87);
      v90 = (void **)*v66;
      v86 = v66[1];
    }
    v78 = v85 + 16;
    *v66 = v88;
    v285 = v90;
    v286 = v90;
    v66[1] = v85 + 16;
    v287 = (uint64_t)v86;
    v91 = v66[2];
    v66[2] = &v83[16 * v84];
    v288 = v91;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v285);
  }
  else
  {
    *(_QWORD *)v77 = v73;
    *((_QWORD *)v77 + 1) = v74;
    v78 = v77 + 16;
    v262 = 0;
    v261 = 0;
  }
  v66[1] = v78;
  v92 = v260;
  v260 = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  v93 = v259;
  if (v259)
  {
    v94 = (unint64_t *)&v259->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  if (__p)
  {
    v271 = __p;
    operator delete(__p);
  }
  if (v279)
  {
    v280 = v279;
    operator delete(v279);
  }
  *(_OWORD *)v254 = *(_OWORD *)a2;
  v255 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v96 = (uint64_t)v274;
  v252 = (uint64_t)v274;
  if (v274)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v97 = 0;
  }
  v253 = v97;
  v274 = 0;
  v250 = v263;
  if (v263)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v263;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v251 = v98;
  v263 = 0;
  v277[0] = &unk_24BFE7440;
  v277[1] = ANEMachineIR::H2022::Validators::ValidatePeAvgPool;
  v278 = (MIL::Validation::TensorDTypeConstraints *)v277;
  v276 = 0;
  MIL::IROperator::Make();
  v100 = v276;
  if (v276 == v275)
  {
    v101 = 4;
    v100 = v275;
  }
  else
  {
    if (!v276)
      goto LABEL_103;
    v101 = 5;
  }
  (*(void (**)(void))(*v100 + 8 * v101))();
LABEL_103:
  v102 = v278;
  if (v278 == (MIL::Validation::TensorDTypeConstraints *)v277)
  {
    v103 = 4;
    v102 = (MIL::Validation::TensorDTypeConstraints *)v277;
    goto LABEL_107;
  }
  if (v278)
  {
    v103 = 5;
LABEL_107:
    v102 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v102 + 8 * v103))();
  }
  if (v251)
  {
    v104 = &v251->__shared_owners_;
    do
      v105 = __ldaxr((unint64_t *)v104);
    while (__stlxr(v105 - 1, (unint64_t *)v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
  if (v253)
  {
    v106 = &v253->__shared_owners_;
    do
      v107 = __ldaxr((unint64_t *)v106);
    while (__stlxr(v107 - 1, (unint64_t *)v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  if (SHIBYTE(v255) < 0)
    operator delete(v254[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v102);
  v108 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v246, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v248 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v249 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v244, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v108 + 3))(v108, &v248, v244);
  if (v245 < 0)
    operator delete(v244[0]);
  v111 = v249;
  if (v249)
  {
    v112 = (unint64_t *)&v249->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v247 < 0)
    operator delete(v246);
  v115 = v285;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v242 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v243 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v240, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v115 + 3))(v115, &v242, v240);
  if (v241 < 0)
    operator delete(v240[0]);
  v118 = v243;
  if (v243)
  {
    v119 = (unint64_t *)&v243->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  v122 = *a3;
  v238 = v285;
  if (v285)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = v285;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
  }
  else
  {
    v123 = 0;
  }
  v239 = v123;
  v285 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v122 + 56))(v122, &v238);
  v125 = v239;
  if (v239)
  {
    v126 = (unint64_t *)&v239->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (MIL::Validation::TensorRankValueConstraints *)v285;
  v285 = 0;
  if (v128)
    v128 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v128 + 8))(v128);
  MIL::Validation::TensorRankValueConstraints::Make(v128);
  v129 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v234, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v236 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v237 = v130;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v129 + 4))(v129, &v236, 3, 5);
  v132 = v237;
  if (v237)
  {
    v133 = (unint64_t *)&v237->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*((void (**)(std::__shared_weak_count_vtbl *))v135->~__shared_weak_count + 1))(v135);
  if (v235 < 0)
    operator delete(v234);
  v136 = *a3;
  v232 = v285;
  if (v285)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = v285;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = (std::__shared_weak_count_vtbl *)v138;
  }
  else
  {
    v137 = 0;
  }
  v233 = v137;
  v285 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v136 + 56))(v136, &v232);
  v139 = v233;
  if (v233)
  {
    v140 = (unint64_t *)&v233->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = (MIL::Validation::TensorSymbolicShapeConstraints *)v285;
  v285 = 0;
  if (v142)
    v142 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v142 + 8))(v142);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v142);
  v143 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v228, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v230 = Scalar;
  if (Scalar)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = Scalar;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v231 = v144;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v226, "Batch");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v143 + 3))(v143, &v230, 0, v226);
  if (v227 < 0)
    operator delete(v226[0]);
  v146 = v231;
  if (v231)
  {
    v147 = (unint64_t *)&v231->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*((void (**)(std::__shared_weak_count_vtbl *))v149->~__shared_weak_count + 1))(v149);
  if (v229 < 0)
    operator delete(v228);
  v150 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v222, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v224 = Scalar;
  if (Scalar)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = Scalar;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v152;
  }
  else
  {
    v151 = 0;
  }
  v225 = v151;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v220, "S");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, void **))*v150 + 4))(v150, &v224, 1, -2, v220);
  if (v221 < 0)
    operator delete(v220[0]);
  v153 = v225;
  if (v225)
  {
    v154 = (unint64_t *)&v225->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = Scalar;
  Scalar = 0;
  if (v156)
    (*((void (**)(std::__shared_weak_count_vtbl *))v156->~__shared_weak_count + 1))(v156);
  if (v223 < 0)
    operator delete(v222);
  v157 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v216, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v218 = Scalar;
  if (Scalar)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = Scalar;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v219 = v158;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v214, "Cin");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v157 + 3))(v157, &v218, -1, v214);
  if (v215 < 0)
    operator delete(v214[0]);
  v160 = v219;
  if (v219)
  {
    v161 = (unint64_t *)&v219->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = Scalar;
  Scalar = 0;
  if (v163)
    (*((void (**)(std::__shared_weak_count_vtbl *))v163->~__shared_weak_count + 1))(v163);
  if (v217 < 0)
    operator delete(v216);
  v164 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v210, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v212 = Scalar;
  if (Scalar)
  {
    v165 = (std::__shared_weak_count *)operator new();
    v166 = Scalar;
    v165->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v165->__shared_owners_ = 0;
    v165->__shared_weak_owners_ = 0;
    v165[1].__vftable = v166;
  }
  else
  {
    v165 = 0;
  }
  v213 = v165;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v208, "NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v164 + 3))(v164, &v212, 0, v208);
  if (v209 < 0)
    operator delete(v208[0]);
  v167 = v213;
  if (v213)
  {
    v168 = (unint64_t *)&v213->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = Scalar;
  Scalar = 0;
  if (v170)
    (*((void (**)(std::__shared_weak_count_vtbl *))v170->~__shared_weak_count + 1))(v170);
  if (v211 < 0)
    operator delete(v210);
  v171 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v204, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v206 = Scalar;
  if (Scalar)
  {
    v172 = (std::__shared_weak_count *)operator new();
    v173 = Scalar;
    v172->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v172->__shared_owners_ = 0;
    v172->__shared_weak_owners_ = 0;
    v172[1].__vftable = v173;
  }
  else
  {
    v172 = 0;
  }
  v207 = v172;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v202, "NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v171 + 3))(v171, &v206, 0, v202);
  if (v203 < 0)
    operator delete(v202[0]);
  v174 = v207;
  if (v207)
  {
    v175 = (unint64_t *)&v207->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = Scalar;
  Scalar = 0;
  if (v177)
    (*((void (**)(std::__shared_weak_count_vtbl *))v177->~__shared_weak_count + 1))(v177);
  if (v205 < 0)
    operator delete(v204);
  v178 = v285;
  std::string::basic_string[abi:ne180100]<0>(&v198, "custom_pads");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v200 = Scalar;
  if (Scalar)
  {
    v179 = (std::__shared_weak_count *)operator new();
    v180 = Scalar;
    v179->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v179->__shared_owners_ = 0;
    v179->__shared_weak_owners_ = 0;
    v179[1].__vftable = v180;
  }
  else
  {
    v179 = 0;
  }
  v201 = v179;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v196, "TWICE_NUM_SPATIAL_DIMS");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v178 + 3))(v178, &v200, 0, v196);
  if (v197 < 0)
    operator delete(v196[0]);
  v181 = v201;
  if (v201)
  {
    v182 = (unint64_t *)&v201->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = Scalar;
  Scalar = 0;
  if (v184)
    (*((void (**)(std::__shared_weak_count_vtbl *))v184->~__shared_weak_count + 1))(v184);
  if (v199 < 0)
    operator delete(v198);
  v185 = *a3;
  v194 = v285;
  if (v285)
  {
    v186 = (std::__shared_weak_count *)operator new();
    v187 = v285;
    v186->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v186->__shared_owners_ = 0;
    v186->__shared_weak_owners_ = 0;
    v186[1].__vftable = (std::__shared_weak_count_vtbl *)v187;
  }
  else
  {
    v186 = 0;
  }
  v195 = v186;
  v285 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v185 + 56))(v185, &v194);
  v188 = v195;
  if (v195)
  {
    v189 = (unint64_t *)&v195->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = v285;
  v285 = 0;
  if (v191)
    (*((void (**)(void **))*v191 + 1))(v191);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v263, 0);
  result = (uint64_t)v274;
  if (v274)
  {
    v193 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v274);
    return MEMORY[0x20BCFF140](v193, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206905CCC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeMaxPool::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeMaxPool;
  v8 = v7;
  ANEMachineIR::H2022::BasePePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_206906480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeMinPool::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_24BFE7440;
  v7[1] = ANEMachineIR::H2022::Validators::ValidatePeMinPool;
  v8 = v7;
  ANEMachineIR::H2022::BasePePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_206906598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  ANEMachineIR::H2020::Linear::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2020::NeConv::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned __int8 *v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  unsigned __int8 *v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  unsigned __int8 *v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  unsigned __int8 *v101;
  void *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  unsigned __int8 *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  unsigned __int8 *v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  unsigned __int8 *v121;
  void *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  unsigned __int8 *v127;
  void *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  uint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  uint64_t v137;
  _QWORD *v138;
  unsigned __int8 *v139;
  void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  unsigned __int8 *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  _QWORD *v152;
  unsigned __int8 *v153;
  void *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  unsigned __int8 *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  std::__shared_weak_count_vtbl *v168;
  uint64_t v169;
  std::__shared_weak_count_vtbl *v170;
  uint64_t v171;
  _QWORD *v172;
  unsigned __int8 *v173;
  void *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  char **v179;
  uint64_t v180;
  std::__shared_weak_count_vtbl *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  __int128 v202;
  char *v203;
  char *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  char **v212;
  _QWORD *v213;
  uint64_t v214;
  MIL::Validation::TensorDTypeConstraints *v215;
  uint64_t v216;
  uint64_t *v217;
  unint64_t v218;
  uint64_t *v219;
  unint64_t v220;
  void *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count_vtbl *v227;
  void *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count_vtbl *v234;
  void *v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count_vtbl *v241;
  void *v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count_vtbl *v248;
  void *v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count_vtbl *v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count_vtbl *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  MIL::Validation::TensorRankValueConstraints *v262;
  void *v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count_vtbl *v269;
  void *v270;
  std::__shared_weak_count *v271;
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count_vtbl *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  MIL::Validation::TensorSymbolicShapeConstraints *v283;
  void *v284;
  std::__shared_weak_count *v285;
  std::__shared_weak_count_vtbl *v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count_vtbl *v290;
  void *v291;
  std::__shared_weak_count *v292;
  std::__shared_weak_count_vtbl *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count_vtbl *v297;
  void *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count_vtbl *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count_vtbl *v304;
  void *v305;
  std::__shared_weak_count *v306;
  std::__shared_weak_count_vtbl *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count_vtbl *v311;
  void *v312;
  std::__shared_weak_count *v313;
  std::__shared_weak_count_vtbl *v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count_vtbl *v318;
  void *v319;
  std::__shared_weak_count *v320;
  std::__shared_weak_count_vtbl *v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count_vtbl *v325;
  void *v326;
  std::__shared_weak_count *v327;
  std::__shared_weak_count_vtbl *v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count_vtbl *v332;
  void *v333;
  std::__shared_weak_count *v334;
  std::__shared_weak_count_vtbl *v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count_vtbl *v339;
  void *v340;
  std::__shared_weak_count *v341;
  std::__shared_weak_count_vtbl *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count_vtbl *v346;
  void *v347;
  std::__shared_weak_count *v348;
  std::__shared_weak_count_vtbl *v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count_vtbl *v353;
  void *v354;
  std::__shared_weak_count *v355;
  std::__shared_weak_count_vtbl *v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count_vtbl *v360;
  void *v361;
  std::__shared_weak_count *v362;
  std::__shared_weak_count_vtbl *v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count_vtbl *v367;
  uint64_t v368;
  std::__shared_weak_count *v369;
  std::__shared_weak_count_vtbl *v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  MIL::Validation::PossibleStringValuesConstraints *v374;
  std::__shared_weak_count_vtbl *v375;
  std::__shared_weak_count *v376;
  std::__shared_weak_count_vtbl *v377;
  uint64_t i;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  void *v382;
  uint64_t v383;
  std::__shared_weak_count *v384;
  std::__shared_weak_count_vtbl *v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count_vtbl *v389;
  uint64_t result;
  uint64_t v391;
  std::__shared_weak_count_vtbl *v392;
  std::__shared_weak_count *v393;
  void *v394;
  char v395;
  void *v396;
  std::__shared_weak_count *v397;
  void *v398;
  std::__shared_weak_count *v399;
  void *v400[2];
  char v401;
  void *v402;
  char v403;
  std::__shared_weak_count_vtbl *v404;
  std::__shared_weak_count *v405;
  void *v406[2];
  char v407;
  void *v408;
  char v409;
  std::__shared_weak_count_vtbl *v410;
  std::__shared_weak_count *v411;
  void *v412[2];
  char v413;
  void *v414;
  char v415;
  std::__shared_weak_count_vtbl *v416;
  std::__shared_weak_count *v417;
  void *v418[2];
  char v419;
  void *v420;
  char v421;
  std::__shared_weak_count_vtbl *v422;
  std::__shared_weak_count *v423;
  void *v424[2];
  char v425;
  void *v426;
  char v427;
  std::__shared_weak_count_vtbl *v428;
  std::__shared_weak_count *v429;
  void *v430[2];
  char v431;
  void *v432;
  char v433;
  std::__shared_weak_count_vtbl *v434;
  std::__shared_weak_count *v435;
  void *v436[2];
  char v437;
  void *v438;
  char v439;
  std::__shared_weak_count_vtbl *v440;
  std::__shared_weak_count *v441;
  void *v442[2];
  char v443;
  void *v444;
  char v445;
  std::__shared_weak_count_vtbl *v446;
  std::__shared_weak_count *v447;
  void *v448[2];
  char v449;
  void *v450;
  char v451;
  std::__shared_weak_count_vtbl *v452;
  std::__shared_weak_count *v453;
  void *v454[2];
  char v455;
  void *v456;
  char v457;
  std::__shared_weak_count_vtbl *v458;
  std::__shared_weak_count *v459;
  void *v460[2];
  char v461;
  void *v462;
  char v463;
  std::__shared_weak_count_vtbl *v464;
  std::__shared_weak_count *v465;
  void *v466[2];
  char v467;
  void *v468;
  char v469;
  std::__shared_weak_count_vtbl *v470;
  std::__shared_weak_count *v471;
  void *v472;
  std::__shared_weak_count *v473;
  void *v474;
  char v475;
  std::__shared_weak_count_vtbl *v476;
  std::__shared_weak_count *v477;
  void *v478;
  char v479;
  std::__shared_weak_count_vtbl *v480;
  std::__shared_weak_count *v481;
  void *v482;
  std::__shared_weak_count *v483;
  void *v484[2];
  char v485;
  std::__shared_weak_count_vtbl *v486;
  std::__shared_weak_count *v487;
  void *v488[2];
  char v489;
  void *v490;
  char v491;
  std::__shared_weak_count_vtbl *v492;
  std::__shared_weak_count *v493;
  void *v494[2];
  char v495;
  void *v496;
  char v497;
  std::__shared_weak_count_vtbl *v498;
  std::__shared_weak_count *v499;
  void *v500[2];
  char v501;
  void *v502;
  char v503;
  std::__shared_weak_count_vtbl *v504;
  std::__shared_weak_count *v505;
  void *v506[2];
  char v507;
  void *v508;
  char v509;
  std::__shared_weak_count_vtbl *v510;
  std::__shared_weak_count *v511;
  char **v512;
  std::__shared_weak_count *v513;
  uint64_t v514;
  std::__shared_weak_count *v515;
  void *v516[2];
  uint64_t v517;
  void *v518;
  void *v519;
  _QWORD *v520;
  std::__shared_weak_count *v521;
  uint64_t v522;
  uint64_t v523;
  _QWORD *v524;
  char **v525;
  std::__shared_weak_count *v526;
  std::__shared_weak_count *v527;
  std::__shared_weak_count *v528;
  std::__shared_weak_count *v529;
  std::__shared_weak_count *v530;
  std::__shared_weak_count *v531;
  std::__shared_weak_count *v532;
  std::__shared_weak_count *v533;
  std::__shared_weak_count *v534;
  std::__shared_weak_count *v535;
  std::__shared_weak_count *v536;
  std::__shared_weak_count *v537;
  std::__shared_weak_count *v538;
  std::__shared_weak_count *v539;
  std::__shared_weak_count *v540;
  std::__shared_weak_count *v541;
  std::__shared_weak_count *v542;
  std::__shared_weak_count *v543;
  std::__shared_weak_count *v544;
  void *__p;
  void *v546;
  _QWORD *v547;
  std::__shared_weak_count *v548;
  _QWORD *v549;
  void *v550;
  uint64_t v551;
  uint64_t v552;
  _QWORD v553[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t p_on_zero_shared_weak;
  _BYTE v557[24];
  _BYTE *v558;
  _QWORD v559[3];
  MIL::Validation::TensorDTypeConstraints *v560;
  std::__shared_weak_count_vtbl *v561;
  std::__shared_weak_count_vtbl *v562;
  _QWORD *v563;
  uint64_t v564;

  v564 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v549 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v10->__get_deleter;
  p_on_zero_shared_weak = (uint64_t)&v10->__get_deleter;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v10->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v10->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  Scalar = v10;
  v550 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v562 = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v563 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  v561 = v14;
  v551 = MIL::IRTensorValueType::MakeWithShape();
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(0x18uLL);
  v547 = v18 + 3;
  *v18 = v15;
  v18[1] = v16;
  v18[2] = v17;
  __p = v18;
  v546 = v18 + 3;
  v552 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v518);
  v19 = v518;
  v518 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v548;
  if (v548)
  {
    p_shared_owners = (unint64_t *)&v548->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v23 = v549;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_get_deleter = (uint64_t)&v28->__on_zero_shared_weak;
  p_on_zero_shared_weak = (uint64_t)&v28->__on_zero_shared_weak;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v28->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v28->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  v28->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v27;
  Scalar = v28;
  v550 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  v562 = (std::__shared_weak_count_vtbl *)&v33->__on_zero_shared_weak;
  v563 = &v33->__on_zero_shared_weak;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v33->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v31;
  v33->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v32;
  v561 = v33;
  v551 = MIL::IRTensorValueType::MakeWithShape();
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = operator new(0x20uLL);
  v547 = v38 + 4;
  *v38 = v34;
  v38[1] = v35;
  v38[2] = v36;
  v38[3] = v37;
  __p = v38;
  v546 = v38 + 4;
  v552 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v23, "dense_kernel", (uint64_t *)&v518);
  v40 = v518;
  v518 = 0;
  if (v40)
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  v41 = v544;
  if (v544)
  {
    v42 = (unint64_t *)&v544->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 48))(*((_QWORD *)v39 + 5), 1);
  v44 = v549;
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = operator new(8uLL);
  v550 = v46;
  *v46 = v45;
  v552 = (uint64_t)(v46 + 1);
  v551 = (uint64_t)(v46 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v44, "strides", (uint64_t *)&Scalar);
  v48 = Scalar;
  Scalar = 0;
  if (v48)
    (*((void (**)(std::__shared_weak_count_vtbl *))v48->~__shared_weak_count + 1))(v48);
  v49 = v543;
  if (v543)
  {
    v50 = (unint64_t *)&v543->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v52, "pad_mode", (uint64_t *)&v550);
  v54 = v550;
  v550 = 0;
  if (v54)
    (*(void (**)(void *))(*(_QWORD *)v54 + 8))(v54);
  v55 = v542;
  if (v542)
  {
    v56 = (unint64_t *)&v542->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 48))(*((_QWORD *)v53 + 5), 1);
  v58 = v549;
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = operator new(8uLL);
  v550 = v60;
  *v60 = v59;
  v552 = (uint64_t)(v60 + 1);
  v551 = (uint64_t)(v60 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v58, "pad", (uint64_t *)&Scalar);
  v62 = Scalar;
  Scalar = 0;
  if (v62)
    (*((void (**)(std::__shared_weak_count_vtbl *))v62->~__shared_weak_count + 1))(v62);
  v63 = v541;
  if (v541)
  {
    v64 = (unint64_t *)&v541->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 32))(*((_QWORD *)v61 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 48))(*((_QWORD *)v61 + 5), 1);
  v66 = v549;
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = operator new(8uLL);
  v550 = v68;
  *v68 = v67;
  v552 = (uint64_t)(v68 + 1);
  v551 = (uint64_t)(v68 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v66, "dilations", (uint64_t *)&Scalar);
  v70 = Scalar;
  Scalar = 0;
  if (v70)
    (*((void (**)(std::__shared_weak_count_vtbl *))v70->~__shared_weak_count + 1))(v70);
  v71 = v540;
  if (v540)
  {
    v72 = (unint64_t *)&v540->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v74, "num_groups", (uint64_t *)&v550);
  v76 = v550;
  v550 = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  v77 = v539;
  if (v539)
  {
    v78 = (unint64_t *)&v539->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 32))(*((_QWORD *)v75 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 48))(*((_QWORD *)v75 + 5), 1);
  v80 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v80, "group_kernel_reuse", (uint64_t *)&v550);
  v82 = v550;
  v550 = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  v83 = v538;
  if (v538)
  {
    v84 = (unint64_t *)&v538->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 32))(*((_QWORD *)v81 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 48))(*((_QWORD *)v81 + 5), 1);
  v86 = v549;
  v87 = MIL::IRUnknownDimension::Make(a1, 0);
  v88 = operator new(8uLL);
  v550 = v88;
  *v88 = v87;
  v552 = (uint64_t)(v88 + 1);
  v551 = (uint64_t)(v88 + 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  p_get_deleter = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v86, "bias", (uint64_t *)&v561);
  v90 = v561;
  v561 = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  v91 = v537;
  if (v537)
  {
    v92 = (unint64_t *)&v537->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 32))(*((_QWORD *)v89 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 48))(*((_QWORD *)v89 + 5), 1);
  v94 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v94, "acc_left_shift", (uint64_t *)&v550);
  v96 = v550;
  v550 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  v97 = v536;
  if (v536)
  {
    v98 = (unint64_t *)&v536->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 32))(*((_QWORD *)v95 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 48))(*((_QWORD *)v95 + 5), 1);
  v100 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v101 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v100, "acc_bias_shift", (uint64_t *)&v550);
  v102 = v550;
  v550 = 0;
  if (v102)
    (*(void (**)(void *))(*(_QWORD *)v102 + 8))(v102);
  v103 = v535;
  if (v535)
  {
    v104 = (unint64_t *)&v535->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v101 + 5) + 32))(*((_QWORD *)v101 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v101 + 5) + 48))(*((_QWORD *)v101 + 5), 1);
  v106 = v549;
  v107 = MIL::IRUnknownDimension::Make(a1, 0);
  v108 = operator new(8uLL);
  v550 = v108;
  *v108 = v107;
  v552 = (uint64_t)(v108 + 1);
  v551 = (uint64_t)(v108 + 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  p_get_deleter = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v106, "post_scale", (uint64_t *)&v561);
  v110 = v561;
  v561 = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  v111 = v534;
  if (v534)
  {
    v112 = (unint64_t *)&v534->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v109 + 5) + 32))(*((_QWORD *)v109 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v109 + 5) + 48))(*((_QWORD *)v109 + 5), 1);
  v114 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v114, "post_right_shift", (uint64_t *)&v550);
  v116 = v550;
  v550 = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  v117 = v533;
  if (v533)
  {
    v118 = (unint64_t *)&v533->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v115 + 5) + 32))(*((_QWORD *)v115 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v115 + 5) + 48))(*((_QWORD *)v115 + 5), 1);
  v120 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v121 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v120, "transposed", (uint64_t *)&v550);
  v122 = v550;
  v550 = 0;
  if (v122)
    (*(void (**)(void *))(*(_QWORD *)v122 + 8))(v122);
  v123 = v532;
  if (v532)
  {
    v124 = (unint64_t *)&v532->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v121 + 5) + 32))(*((_QWORD *)v121 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v121 + 5) + 48))(*((_QWORD *)v121 + 5), 1);
  v126 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v126, "pre_relu", (uint64_t *)&v550);
  v128 = v550;
  v550 = 0;
  if (v128)
    (*(void (**)(void *))(*(_QWORD *)v128 + 8))(v128);
  v129 = v531;
  if (v531)
  {
    v130 = (unint64_t *)&v531->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v127 + 5) + 32))(*((_QWORD *)v127 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v127 + 5) + 48))(*((_QWORD *)v127 + 5), 1);
  v132 = v549;
  v133 = MIL::IRUnknownDimension::Make(a1, 0);
  v134 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v134;
  v134->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v133;
  p_get_deleter = (uint64_t)&v134->~__shared_weak_count_0;
  p_on_zero_shared_weak = (uint64_t)&v134->~__shared_weak_count_0;
  v550 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v135 = MIL::IRUnknownDimension::Make(a1, 0);
  v136 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v561 = v136;
  v136->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v135;
  v562 = (std::__shared_weak_count_vtbl *)&v136->~__shared_weak_count_0;
  v563 = &v136->~__shared_weak_count_0;
  v551 = MIL::IRTensorValueType::MakeWithShape();
  v137 = MIL::IRUnknownDimension::Make(a1, 0);
  v138 = operator new(8uLL);
  __p = v138;
  *v138 = v137;
  v547 = v138 + 1;
  v546 = v138 + 1;
  v552 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[39],std::unique_ptr<MIL::IRParameter>>(v132, "alternative_format_kernel_coefficients", (uint64_t *)&v518);
  v140 = v518;
  v518 = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  v141 = v530;
  if (v530)
  {
    v142 = (unint64_t *)&v530->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v139 + 5) + 32))(*((_QWORD *)v139 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v139 + 5) + 48))(*((_QWORD *)v139 + 5), 1);
  v144 = v549;
  v145 = MIL::IRUnknownDimension::Make(a1, 0);
  v146 = operator new(8uLL);
  v550 = v146;
  *v146 = v145;
  v552 = (uint64_t)(v146 + 1);
  v551 = (uint64_t)(v146 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v147 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v144, "sparse_mask", (uint64_t *)&Scalar);
  v148 = Scalar;
  Scalar = 0;
  if (v148)
    (*((void (**)(std::__shared_weak_count_vtbl *))v148->~__shared_weak_count + 1))(v148);
  v149 = v529;
  if (v529)
  {
    v150 = (unint64_t *)&v529->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v147 + 5) + 32))(*((_QWORD *)v147 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v147 + 5) + 48))(*((_QWORD *)v147 + 5), 1);
  v152 = v549;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v153 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v152, "sparse_num_nonzero", (uint64_t *)&v550);
  v154 = v550;
  v550 = 0;
  if (v154)
    (*(void (**)(void *))(*(_QWORD *)v154 + 8))(v154);
  v155 = v528;
  if (v528)
  {
    v156 = (unint64_t *)&v528->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v153 + 5) + 32))(*((_QWORD *)v153 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v153 + 5) + 48))(*((_QWORD *)v153 + 5), 1);
  v158 = v549;
  v159 = MIL::IRUnknownDimension::Make(a1, 0);
  v160 = operator new(8uLL);
  v550 = v160;
  *v160 = v159;
  v552 = (uint64_t)(v160 + 1);
  v551 = (uint64_t)(v160 + 1);
  v561 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v161 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[30],std::unique_ptr<MIL::IRParameter>>(v158, "sparse_num_nonzero_per_filter", (uint64_t *)&Scalar);
  v162 = Scalar;
  Scalar = 0;
  if (v162)
    (*((void (**)(std::__shared_weak_count_vtbl *))v162->~__shared_weak_count + 1))(v162);
  v163 = v527;
  if (v527)
  {
    v164 = (unint64_t *)&v527->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  if (v550)
  {
    v551 = (uint64_t)v550;
    operator delete(v550);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v161 + 5) + 32))(*((_QWORD *)v161 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v161 + 5) + 48))(*((_QWORD *)v161 + 5), 1);
  v166 = v549;
  v167 = MIL::IRUnknownDimension::Make(a1, 0);
  v168 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v168;
  v168->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v167;
  p_get_deleter = (uint64_t)&v168->~__shared_weak_count_0;
  p_on_zero_shared_weak = (uint64_t)&v168->~__shared_weak_count_0;
  v550 = (void *)MIL::IRTensorValueType::MakeWithShape();
  v169 = MIL::IRUnknownDimension::Make(a1, 0);
  v170 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v561 = v170;
  v170->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v169;
  v562 = (std::__shared_weak_count_vtbl *)&v170->~__shared_weak_count_0;
  v563 = &v170->~__shared_weak_count_0;
  v551 = MIL::IRTensorValueType::MakeWithShape();
  v171 = MIL::IRUnknownDimension::Make(a1, 0);
  v172 = operator new(8uLL);
  __p = v172;
  *v172 = v171;
  v547 = v172 + 1;
  v546 = v172 + 1;
  v552 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v173 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v166, "palette_table", (uint64_t *)&v518);
  v174 = v518;
  v518 = 0;
  if (v174)
    (*(void (**)(void *))(*(_QWORD *)v174 + 8))(v174);
  v175 = v526;
  if (v526)
  {
    v176 = (unint64_t *)&v526->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v173 + 5) + 32))(*((_QWORD *)v173 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v173 + 5) + 48))(*((_QWORD *)v173 + 5), 1);
  v525 = 0;
  v178 = operator new();
  *(_QWORD *)v178 = 0;
  *(_QWORD *)(v178 + 8) = 0;
  *(_QWORD *)(v178 + 16) = 0;
  v550 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v525, (void **)v178);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v550, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v525, 1uLL);
  v179 = v525;
  v180 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v181 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v561 = v181;
  v181->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v180;
  v562 = (std::__shared_weak_count_vtbl *)&v181->~__shared_weak_count_0;
  v563 = &v181->~__shared_weak_count_0;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v182 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v183 = operator new(8uLL);
  __p = v183;
  *v183 = v182;
  v547 = v183 + 1;
  v546 = v183 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v184 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v185 = operator new(8uLL);
  v518 = v185;
  *v185 = v184;
  v520 = v185 + 1;
  v519 = v185 + 1;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v186 = v522;
  v523 = v522;
  if (v522)
  {
    v187 = (_QWORD *)operator new();
    v188 = v522;
    *v187 = &unk_24BFE7320;
    v187[1] = 0;
    v187[2] = 0;
    v187[3] = v188;
  }
  else
  {
    v187 = 0;
  }
  v524 = v187;
  v522 = 0;
  v189 = v179[2];
  v190 = v179[1];
  if (v190 >= v189)
  {
    v192 = (v190 - *v179) >> 4;
    v193 = v192 + 1;
    if ((unint64_t)(v192 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v194 = v189 - *v179;
    if (v194 >> 3 > v193)
      v193 = v194 >> 3;
    if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF0)
      v195 = 0xFFFFFFFFFFFFFFFLL;
    else
      v195 = v193;
    v553[1] = v179 + 2;
    v196 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v179 + 2), v195);
    v198 = &v196[16 * v192];
    *(_QWORD *)v198 = v186;
    *((_QWORD *)v198 + 1) = v187;
    v524 = 0;
    v523 = 0;
    v200 = *v179;
    v199 = v179[1];
    if (v199 == *v179)
    {
      v203 = v179[1];
      v201 = &v196[16 * v192];
    }
    else
    {
      v201 = &v196[16 * v192];
      do
      {
        v202 = *((_OWORD *)v199 - 1);
        v199 -= 16;
        *((_OWORD *)v201 - 1) = v202;
        v201 -= 16;
        *(_QWORD *)v199 = 0;
        *((_QWORD *)v199 + 1) = 0;
      }
      while (v199 != v200);
      v203 = *v179;
      v199 = v179[1];
    }
    v191 = v198 + 16;
    *v179 = v201;
    v551 = (uint64_t)v203;
    v179[1] = v198 + 16;
    v552 = (uint64_t)v199;
    v204 = v179[2];
    v179[2] = &v196[16 * v197];
    v553[0] = v204;
    v550 = v203;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v550);
  }
  else
  {
    *(_QWORD *)v190 = v186;
    *((_QWORD *)v190 + 1) = v187;
    v191 = v190 + 16;
    v524 = 0;
    v523 = 0;
  }
  v179[1] = v191;
  v205 = v522;
  v522 = 0;
  if (v205)
    (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
  v206 = v521;
  if (v521)
  {
    v207 = (unint64_t *)&v521->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  if (v518)
  {
    v519 = v518;
    operator delete(v518);
  }
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  if (v561)
  {
    v562 = v561;
    operator delete(v561);
  }
  *(_OWORD *)v516 = *(_OWORD *)a2;
  v517 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v209 = (uint64_t)v549;
  v514 = (uint64_t)v549;
  if (v549)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = (std::__shared_weak_count_vtbl *)v209;
  }
  else
  {
    v210 = 0;
  }
  v515 = v210;
  v549 = 0;
  v512 = v525;
  if (v525)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = v525;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = (std::__shared_weak_count_vtbl *)v212;
  }
  else
  {
    v211 = 0;
  }
  v513 = v211;
  v525 = 0;
  v559[0] = &unk_24BFE7440;
  v559[1] = ANEMachineIR::H2020::Validators::ValidateNeConv;
  v560 = (MIL::Validation::TensorDTypeConstraints *)v559;
  v558 = 0;
  MIL::IROperator::Make();
  v213 = v558;
  if (v558 == v557)
  {
    v214 = 4;
    v213 = v557;
  }
  else
  {
    if (!v558)
      goto LABEL_220;
    v214 = 5;
  }
  (*(void (**)(void))(*v213 + 8 * v214))();
LABEL_220:
  v215 = v560;
  if (v560 == (MIL::Validation::TensorDTypeConstraints *)v559)
  {
    v216 = 4;
    v215 = (MIL::Validation::TensorDTypeConstraints *)v559;
    goto LABEL_224;
  }
  if (v560)
  {
    v216 = 5;
LABEL_224:
    v215 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v215 + 8 * v216))();
  }
  if (v513)
  {
    v217 = &v513->__shared_owners_;
    do
      v218 = __ldaxr((unint64_t *)v217);
    while (__stlxr(v218 - 1, (unint64_t *)v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
      std::__shared_weak_count::__release_weak(v513);
    }
  }
  if (v515)
  {
    v219 = &v515->__shared_owners_;
    do
      v220 = __ldaxr((unint64_t *)v219);
    while (__stlxr(v220 - 1, (unint64_t *)v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
      std::__shared_weak_count::__release_weak(v515);
    }
  }
  if (SHIBYTE(v517) < 0)
    operator delete(v516[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v215);
  v221 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v508, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v510 = Scalar;
  if (Scalar)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = Scalar;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v511 = v222;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v506, "InputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v221 + 24))(v221, &v510, v506);
  if (v507 < 0)
    operator delete(v506[0]);
  v224 = v511;
  if (v511)
  {
    v225 = (unint64_t *)&v511->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = Scalar;
  Scalar = 0;
  if (v227)
    (*((void (**)(std::__shared_weak_count_vtbl *))v227->~__shared_weak_count + 1))(v227);
  if (v509 < 0)
    operator delete(v508);
  v228 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v502, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v504 = Scalar;
  if (Scalar)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = Scalar;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v505 = v229;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v500, "KernelT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v228 + 24))(v228, &v504, v500);
  if (v501 < 0)
    operator delete(v500[0]);
  v231 = v505;
  if (v505)
  {
    v232 = (unint64_t *)&v505->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = Scalar;
  Scalar = 0;
  if (v234)
    (*((void (**)(std::__shared_weak_count_vtbl *))v234->~__shared_weak_count + 1))(v234);
  if (v503 < 0)
    operator delete(v502);
  v235 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v496, "alternative_format_kernel_coefficients");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v498 = Scalar;
  if (Scalar)
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = Scalar;
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = v237;
  }
  else
  {
    v236 = 0;
  }
  v499 = v236;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v494, "AlternateKernelT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v235 + 24))(v235, &v498, v494);
  if (v495 < 0)
    operator delete(v494[0]);
  v238 = v499;
  if (v499)
  {
    v239 = (unint64_t *)&v499->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = Scalar;
  Scalar = 0;
  if (v241)
    (*((void (**)(std::__shared_weak_count_vtbl *))v241->~__shared_weak_count + 1))(v241);
  if (v497 < 0)
    operator delete(v496);
  v242 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v490, "palette_table");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v492 = Scalar;
  if (Scalar)
  {
    v243 = (std::__shared_weak_count *)operator new();
    v244 = Scalar;
    v243->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v243->__shared_owners_ = 0;
    v243->__shared_weak_owners_ = 0;
    v243[1].__vftable = v244;
  }
  else
  {
    v243 = 0;
  }
  v493 = v243;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v488, "PaletteT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v242 + 24))(v242, &v492, v488);
  if (v489 < 0)
    operator delete(v488[0]);
  v245 = v493;
  if (v493)
  {
    v246 = (unint64_t *)&v493->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = Scalar;
  Scalar = 0;
  if (v248)
    (*((void (**)(std::__shared_weak_count_vtbl *))v248->~__shared_weak_count + 1))(v248);
  if (v491 < 0)
    operator delete(v490);
  v249 = v550;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v486 = Scalar;
  if (Scalar)
  {
    v250 = (std::__shared_weak_count *)operator new();
    v251 = Scalar;
    v250->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v250->__shared_owners_ = 0;
    v250->__shared_weak_owners_ = 0;
    v250[1].__vftable = v251;
  }
  else
  {
    v250 = 0;
  }
  v487 = v250;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v484, "OutputT");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v249 + 24))(v249, &v486, v484);
  if (v485 < 0)
    operator delete(v484[0]);
  v252 = v487;
  if (v487)
  {
    v253 = (unint64_t *)&v487->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = Scalar;
  Scalar = 0;
  if (v255)
    (*((void (**)(std::__shared_weak_count_vtbl *))v255->~__shared_weak_count + 1))(v255);
  v256 = *a3;
  v482 = v550;
  if (v550)
  {
    v257 = (std::__shared_weak_count *)operator new();
    v258 = (std::__shared_weak_count_vtbl *)v550;
    v257->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v257->__shared_owners_ = 0;
    v257->__shared_weak_owners_ = 0;
    v257[1].__vftable = v258;
  }
  else
  {
    v257 = 0;
  }
  v483 = v257;
  v550 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v256 + 56))(v256, &v482);
  v259 = v483;
  if (v483)
  {
    v260 = (unint64_t *)&v483->__shared_owners_;
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v262 = (MIL::Validation::TensorRankValueConstraints *)v550;
  v550 = 0;
  if (v262)
    v262 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v262 + 8))(v262);
  MIL::Validation::TensorRankValueConstraints::Make(v262);
  v263 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v478, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v480 = Scalar;
  if (Scalar)
  {
    v264 = (std::__shared_weak_count *)operator new();
    v265 = Scalar;
    v264->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v264->__shared_owners_ = 0;
    v264->__shared_weak_owners_ = 0;
    v264[1].__vftable = v265;
  }
  else
  {
    v264 = 0;
  }
  v481 = v264;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v263 + 32))(v263, &v480, 3, 5);
  v266 = v481;
  if (v481)
  {
    v267 = (unint64_t *)&v481->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  v269 = Scalar;
  Scalar = 0;
  if (v269)
    (*((void (**)(std::__shared_weak_count_vtbl *))v269->~__shared_weak_count + 1))(v269);
  if (v479 < 0)
    operator delete(v478);
  v270 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v474, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v476 = Scalar;
  if (Scalar)
  {
    v271 = (std::__shared_weak_count *)operator new();
    v272 = Scalar;
    v271->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v271->__shared_owners_ = 0;
    v271->__shared_weak_owners_ = 0;
    v271[1].__vftable = v272;
  }
  else
  {
    v271 = 0;
  }
  v477 = v271;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v270 + 32))(v270, &v476, 4, 6);
  v273 = v477;
  if (v477)
  {
    v274 = (unint64_t *)&v477->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
  }
  v276 = Scalar;
  Scalar = 0;
  if (v276)
    (*((void (**)(std::__shared_weak_count_vtbl *))v276->~__shared_weak_count + 1))(v276);
  if (v475 < 0)
    operator delete(v474);
  v277 = *a3;
  v472 = v550;
  if (v550)
  {
    v278 = (std::__shared_weak_count *)operator new();
    v279 = (std::__shared_weak_count_vtbl *)v550;
    v278->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v278->__shared_owners_ = 0;
    v278->__shared_weak_owners_ = 0;
    v278[1].__vftable = v279;
  }
  else
  {
    v278 = 0;
  }
  v473 = v278;
  v550 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v277 + 56))(v277, &v472);
  v280 = v473;
  if (v473)
  {
    v281 = (unint64_t *)&v473->__shared_owners_;
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  v283 = (MIL::Validation::TensorSymbolicShapeConstraints *)v550;
  v550 = 0;
  if (v283)
    v283 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v283 + 8))(v283);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v283);
  v284 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v468, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v470 = Scalar;
  if (Scalar)
  {
    v285 = (std::__shared_weak_count *)operator new();
    v286 = Scalar;
    v285->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v285->__shared_owners_ = 0;
    v285->__shared_weak_owners_ = 0;
    v285[1].__vftable = v286;
  }
  else
  {
    v285 = 0;
  }
  v471 = v285;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v466, "Batch");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v284 + 24))(v284, &v470, 0, v466);
  if (v467 < 0)
    operator delete(v466[0]);
  v287 = v471;
  if (v471)
  {
    v288 = (unint64_t *)&v471->__shared_owners_;
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
  }
  v290 = Scalar;
  Scalar = 0;
  if (v290)
    (*((void (**)(std::__shared_weak_count_vtbl *))v290->~__shared_weak_count + 1))(v290);
  if (v469 < 0)
    operator delete(v468);
  v291 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v462, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v464 = Scalar;
  if (Scalar)
  {
    v292 = (std::__shared_weak_count *)operator new();
    v293 = Scalar;
    v292->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v292->__shared_owners_ = 0;
    v292->__shared_weak_owners_ = 0;
    v292[1].__vftable = v293;
  }
  else
  {
    v292 = 0;
  }
  v465 = v292;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v460, "Cin");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v291 + 24))(v291, &v464, -1, v460);
  if (v461 < 0)
    operator delete(v460[0]);
  v294 = v465;
  if (v465)
  {
    v295 = (unint64_t *)&v465->__shared_owners_;
    do
      v296 = __ldaxr(v295);
    while (__stlxr(v296 - 1, v295));
    if (!v296)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
  }
  v297 = Scalar;
  Scalar = 0;
  if (v297)
    (*((void (**)(std::__shared_weak_count_vtbl *))v297->~__shared_weak_count + 1))(v297);
  if (v463 < 0)
    operator delete(v462);
  v298 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v456, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v458 = Scalar;
  if (Scalar)
  {
    v299 = (std::__shared_weak_count *)operator new();
    v300 = Scalar;
    v299->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v299->__shared_owners_ = 0;
    v299->__shared_weak_owners_ = 0;
    v299[1].__vftable = v300;
  }
  else
  {
    v299 = 0;
  }
  v459 = v299;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v454, "NUM_GROUPS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v298 + 24))(v298, &v458, 0, v454);
  if (v455 < 0)
    operator delete(v454[0]);
  v301 = v459;
  if (v459)
  {
    v302 = (unint64_t *)&v459->__shared_owners_;
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  v304 = Scalar;
  Scalar = 0;
  if (v304)
    (*((void (**)(std::__shared_weak_count_vtbl *))v304->~__shared_weak_count + 1))(v304);
  if (v457 < 0)
    operator delete(v456);
  v305 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v450, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v452 = Scalar;
  if (Scalar)
  {
    v306 = (std::__shared_weak_count *)operator new();
    v307 = Scalar;
    v306->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v306->__shared_owners_ = 0;
    v306->__shared_weak_owners_ = 0;
    v306[1].__vftable = v307;
  }
  else
  {
    v306 = 0;
  }
  v453 = v306;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v448, "KCin");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v305 + 24))(v305, &v452, -2, v448);
  if (v449 < 0)
    operator delete(v448[0]);
  v308 = v453;
  if (v453)
  {
    v309 = (unint64_t *)&v453->__shared_owners_;
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  v311 = Scalar;
  Scalar = 0;
  if (v311)
    (*((void (**)(std::__shared_weak_count_vtbl *))v311->~__shared_weak_count + 1))(v311);
  if (v451 < 0)
    operator delete(v450);
  v312 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v444, "dense_kernel");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v446 = Scalar;
  if (Scalar)
  {
    v313 = (std::__shared_weak_count *)operator new();
    v314 = Scalar;
    v313->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v313->__shared_owners_ = 0;
    v313->__shared_weak_owners_ = 0;
    v313[1].__vftable = v314;
  }
  else
  {
    v313 = 0;
  }
  v447 = v313;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v442, "KCout");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v312 + 24))(v312, &v446, -1, v442);
  if (v443 < 0)
    operator delete(v442[0]);
  v315 = v447;
  if (v447)
  {
    v316 = (unint64_t *)&v447->__shared_owners_;
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
  }
  v318 = Scalar;
  Scalar = 0;
  if (v318)
    (*((void (**)(std::__shared_weak_count_vtbl *))v318->~__shared_weak_count + 1))(v318);
  if (v445 < 0)
    operator delete(v444);
  v319 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v438, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v440 = Scalar;
  if (Scalar)
  {
    v320 = (std::__shared_weak_count *)operator new();
    v321 = Scalar;
    v320->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v320->__shared_owners_ = 0;
    v320->__shared_weak_owners_ = 0;
    v320[1].__vftable = v321;
  }
  else
  {
    v320 = 0;
  }
  v441 = v320;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v436, "NUM_SPATIAL_DIMS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v319 + 24))(v319, &v440, 0, v436);
  if (v437 < 0)
    operator delete(v436[0]);
  v322 = v441;
  if (v441)
  {
    v323 = (unint64_t *)&v441->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  v325 = Scalar;
  Scalar = 0;
  if (v325)
    (*((void (**)(std::__shared_weak_count_vtbl *))v325->~__shared_weak_count + 1))(v325);
  if (v439 < 0)
    operator delete(v438);
  v326 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v432, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v434 = Scalar;
  if (Scalar)
  {
    v327 = (std::__shared_weak_count *)operator new();
    v328 = Scalar;
    v327->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v327->__shared_owners_ = 0;
    v327->__shared_weak_owners_ = 0;
    v327[1].__vftable = v328;
  }
  else
  {
    v327 = 0;
  }
  v435 = v327;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v430, "TWICE_NUM_SPATIAL_DIMS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v326 + 24))(v326, &v434, 0, v430);
  if (v431 < 0)
    operator delete(v430[0]);
  v329 = v435;
  if (v435)
  {
    v330 = (unint64_t *)&v435->__shared_owners_;
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
  v332 = Scalar;
  Scalar = 0;
  if (v332)
    (*((void (**)(std::__shared_weak_count_vtbl *))v332->~__shared_weak_count + 1))(v332);
  if (v433 < 0)
    operator delete(v432);
  v333 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v426, "dilations");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v428 = Scalar;
  if (Scalar)
  {
    v334 = (std::__shared_weak_count *)operator new();
    v335 = Scalar;
    v334->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v334->__shared_owners_ = 0;
    v334->__shared_weak_owners_ = 0;
    v334[1].__vftable = v335;
  }
  else
  {
    v334 = 0;
  }
  v429 = v334;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v424, "NUM_SPATIAL_DIMS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v333 + 24))(v333, &v428, 0, v424);
  if (v425 < 0)
    operator delete(v424[0]);
  v336 = v429;
  if (v429)
  {
    v337 = (unint64_t *)&v429->__shared_owners_;
    do
      v338 = __ldaxr(v337);
    while (__stlxr(v338 - 1, v337));
    if (!v338)
    {
      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
      std::__shared_weak_count::__release_weak(v336);
    }
  }
  v339 = Scalar;
  Scalar = 0;
  if (v339)
    (*((void (**)(std::__shared_weak_count_vtbl *))v339->~__shared_weak_count + 1))(v339);
  if (v427 < 0)
    operator delete(v426);
  v340 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v420, "alternative_format_kernel_coefficients");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v422 = Scalar;
  if (Scalar)
  {
    v341 = (std::__shared_weak_count *)operator new();
    v342 = Scalar;
    v341->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v341->__shared_owners_ = 0;
    v341->__shared_weak_owners_ = 0;
    v341[1].__vftable = v342;
  }
  else
  {
    v341 = 0;
  }
  v423 = v341;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v418, "ALTERNATE_KERNEL_SIZE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v340 + 24))(v340, &v422, 0, v418);
  if (v419 < 0)
    operator delete(v418[0]);
  v343 = v423;
  if (v423)
  {
    v344 = (unint64_t *)&v423->__shared_owners_;
    do
      v345 = __ldaxr(v344);
    while (__stlxr(v345 - 1, v344));
    if (!v345)
    {
      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
      std::__shared_weak_count::__release_weak(v343);
    }
  }
  v346 = Scalar;
  Scalar = 0;
  if (v346)
    (*((void (**)(std::__shared_weak_count_vtbl *))v346->~__shared_weak_count + 1))(v346);
  if (v421 < 0)
    operator delete(v420);
  v347 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v414, "sparse_mask");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v416 = Scalar;
  if (Scalar)
  {
    v348 = (std::__shared_weak_count *)operator new();
    v349 = Scalar;
    v348->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v348->__shared_owners_ = 0;
    v348->__shared_weak_owners_ = 0;
    v348[1].__vftable = v349;
  }
  else
  {
    v348 = 0;
  }
  v417 = v348;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v412, "SPARSE_MASK_SIZE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v347 + 24))(v347, &v416, 0, v412);
  if (v413 < 0)
    operator delete(v412[0]);
  v350 = v417;
  if (v417)
  {
    v351 = (unint64_t *)&v417->__shared_owners_;
    do
      v352 = __ldaxr(v351);
    while (__stlxr(v352 - 1, v351));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
      std::__shared_weak_count::__release_weak(v350);
    }
  }
  v353 = Scalar;
  Scalar = 0;
  if (v353)
    (*((void (**)(std::__shared_weak_count_vtbl *))v353->~__shared_weak_count + 1))(v353);
  if (v415 < 0)
    operator delete(v414);
  v354 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v408, "sparse_num_nonzero_per_filter");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v410 = Scalar;
  if (Scalar)
  {
    v355 = (std::__shared_weak_count *)operator new();
    v356 = Scalar;
    v355->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v355->__shared_owners_ = 0;
    v355->__shared_weak_owners_ = 0;
    v355[1].__vftable = v356;
  }
  else
  {
    v355 = 0;
  }
  v411 = v355;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v406, "NUM_FILTERS");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v354 + 24))(v354, &v410, 0, v406);
  if (v407 < 0)
    operator delete(v406[0]);
  v357 = v411;
  if (v411)
  {
    v358 = (unint64_t *)&v411->__shared_owners_;
    do
      v359 = __ldaxr(v358);
    while (__stlxr(v359 - 1, v358));
    if (!v359)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  v360 = Scalar;
  Scalar = 0;
  if (v360)
    (*((void (**)(std::__shared_weak_count_vtbl *))v360->~__shared_weak_count + 1))(v360);
  if (v409 < 0)
    operator delete(v408);
  v361 = v550;
  std::string::basic_string[abi:ne180100]<0>(&v402, "palette_table");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v404 = Scalar;
  if (Scalar)
  {
    v362 = (std::__shared_weak_count *)operator new();
    v363 = Scalar;
    v362->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v362->__shared_owners_ = 0;
    v362->__shared_weak_owners_ = 0;
    v362[1].__vftable = v363;
  }
  else
  {
    v362 = 0;
  }
  v405 = v362;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v400, "PALETTE_SIZE");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v361 + 24))(v361, &v404, 0, v400);
  if (v401 < 0)
    operator delete(v400[0]);
  v364 = v405;
  if (v405)
  {
    v365 = (unint64_t *)&v405->__shared_owners_;
    do
      v366 = __ldaxr(v365);
    while (__stlxr(v366 - 1, v365));
    if (!v366)
    {
      ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
      std::__shared_weak_count::__release_weak(v364);
    }
  }
  v367 = Scalar;
  Scalar = 0;
  if (v367)
    (*((void (**)(std::__shared_weak_count_vtbl *))v367->~__shared_weak_count + 1))(v367);
  if (v403 < 0)
    operator delete(v402);
  v368 = *a3;
  v398 = v550;
  if (v550)
  {
    v369 = (std::__shared_weak_count *)operator new();
    v370 = (std::__shared_weak_count_vtbl *)v550;
    v369->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v369->__shared_owners_ = 0;
    v369->__shared_weak_owners_ = 0;
    v369[1].__vftable = v370;
  }
  else
  {
    v369 = 0;
  }
  v399 = v369;
  v550 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v368 + 56))(v368, &v398);
  v371 = v399;
  if (v399)
  {
    v372 = (unint64_t *)&v399->__shared_owners_;
    do
      v373 = __ldaxr(v372);
    while (__stlxr(v373 - 1, v372));
    if (!v373)
    {
      ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
      std::__shared_weak_count::__release_weak(v371);
    }
  }
  v374 = (MIL::Validation::PossibleStringValuesConstraints *)v550;
  v550 = 0;
  if (v374)
    v374 = (MIL::Validation::PossibleStringValuesConstraints *)(*(uint64_t (**)(MIL::Validation::PossibleStringValuesConstraints *))(*(_QWORD *)v374 + 8))(v374);
  MIL::Validation::PossibleStringValuesConstraints::Make(v374);
  v375 = v561;
  std::string::basic_string[abi:ne180100]<0>(&v394, "pad_mode");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v396 = __p;
  if (__p)
  {
    v376 = (std::__shared_weak_count *)operator new();
    v377 = (std::__shared_weak_count_vtbl *)__p;
    v376->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v376->__shared_owners_ = 0;
    v376->__shared_weak_owners_ = 0;
    v376[1].__vftable = v377;
  }
  else
  {
    v376 = 0;
  }
  v397 = v376;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v550, "replicate");
  std::string::basic_string[abi:ne180100]<0>(v553, "zero");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v550, 2);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, std::__shared_weak_count_vtbl **, uint64_t))v375->~__shared_weak_count
   + 3))(v375, &v396, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v553[i + 2]) < 0)
      operator delete((void *)v553[i]);
  }
  v379 = v397;
  if (v397)
  {
    v380 = (unint64_t *)&v397->__shared_owners_;
    do
      v381 = __ldaxr(v380);
    while (__stlxr(v381 - 1, v380));
    if (!v381)
    {
      ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
      std::__shared_weak_count::__release_weak(v379);
    }
  }
  v382 = __p;
  __p = 0;
  if (v382)
    (*(void (**)(void *))(*(_QWORD *)v382 + 8))(v382);
  if (v395 < 0)
    operator delete(v394);
  v383 = *a3;
  v392 = v561;
  if (v561)
  {
    v384 = (std::__shared_weak_count *)operator new();
    v385 = v561;
    v384->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7670;
    v384->__shared_owners_ = 0;
    v384->__shared_weak_owners_ = 0;
    v384[1].__vftable = v385;
  }
  else
  {
    v384 = 0;
  }
  v393 = v384;
  v561 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v383 + 56))(v383, &v392);
  v386 = v393;
  if (v393)
  {
    v387 = (unint64_t *)&v393->__shared_owners_;
    do
      v388 = __ldaxr(v387);
    while (__stlxr(v388 - 1, v387));
    if (!v388)
    {
      ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
      std::__shared_weak_count::__release_weak(v386);
    }
  }
  v389 = v561;
  v561 = 0;
  if (v389)
    (*((void (**)(std::__shared_weak_count_vtbl *))v389->~__shared_weak_count + 1))(v389);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v525, 0);
  result = (uint64_t)v549;
  if (v549)
  {
    v391 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v549);
    return MEMORY[0x20BCFF140](v391, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206909754(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x560], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x6C0], 0);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::NeBatchMatmulCpu::Run(MIL::IROperation *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t InterpretedTensorValue;
  uint64_t v6;
  uint64_t ParameterValue;
  char *v8;
  char v9;
  uint64_t v10;
  char *v11;
  char v12;
  MIL::Fp16 *v13;
  __int16 v14;
  uint64_t v15;
  __int16 *v16;
  int v17;
  int v18;
  float *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  MIL::IRValueType *OutputType;
  ANEMachineIR::Utils *v25;
  int v26;
  unint64_t v27;
  ANEMachineIR::Utils *v28;
  const MIL::IRTensorValueType *v29;
  ANEMachineIR::Utils *v30;
  const MIL::IRTensorValueType *v31;
  const MIL::IRTensorValueType *v32;
  uint64_t v33;
  MIL::Fp16 *v34;
  __int16 v35;
  uint64_t v36;
  __int16 *v37;
  uint64_t v38;
  char *v39;
  char v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t Data;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned __int8 *v129;
  MIL::IRValueType *v130;
  void **v131;
  _QWORD *v132;
  uint64_t v133;
  unsigned __int8 *v134;
  MIL::IRValueType *v135;
  void **v136;
  _QWORD *v137;
  uint64_t v138;
  unsigned __int8 *v139;
  MIL::IRValueType *v140;
  void **v141;
  _QWORD *v142;
  uint64_t v143;
  unsigned __int8 *v144;
  MIL::IRValueType *v145;
  void **v146;
  _QWORD *v147;
  uint64_t v148;
  unsigned __int8 *v149;
  MIL::IRValueType *v150;
  void **v151;
  _QWORD *v152;
  uint64_t v153;
  unsigned __int8 *v154;
  MIL::IRValueType *v155;
  void **v156;
  _QWORD *v157;
  uint64_t v158;
  unsigned __int8 *v159;
  MIL::IRValueType *v160;
  void **v161;
  _QWORD *v162;
  uint64_t v163;
  unsigned __int8 *v164;
  MIL::IRValueType *v165;
  void **v166;
  _QWORD *v167;
  uint64_t v168;
  unsigned __int8 *v169;
  MIL::IRValueType *v170;
  void **v171;
  _QWORD *v172;
  uint64_t v173;
  unsigned __int8 *v174;
  MIL::IRValueType *v175;
  void **v176;
  _QWORD *v177;
  uint64_t v178;
  unsigned __int8 *v179;
  MIL::IRValueType *v180;
  void **v181;
  _QWORD *v182;
  uint64_t v183;
  unsigned __int8 *v184;
  MIL::IRValueType *v185;
  void **v186;
  _QWORD *v187;
  uint64_t v188;
  unsigned __int8 *v189;
  MIL::IRValueType *v190;
  void **v191;
  _QWORD *v192;
  uint64_t v193;
  unsigned __int8 *v194;
  MIL::IRValueType *v195;
  void **v196;
  _QWORD *v197;
  uint64_t v198;
  unsigned __int8 *v199;
  MIL::IRValueType *v200;
  void **v201;
  _QWORD *v202;
  uint64_t v203;
  unsigned __int8 *v204;
  MIL::IRValueType *v205;
  void **v206;
  _QWORD *v207;
  uint64_t v208;
  unsigned __int8 *v209;
  MIL::IRValueType *v210;
  void **v211;
  _QWORD *v212;
  uint64_t v213;
  unsigned __int8 *v214;
  MIL::IRValueType *v215;
  void **v216;
  _QWORD *v217;
  uint64_t v218;
  unsigned __int8 *v219;
  MIL::IRValueType *v220;
  void **v221;
  _QWORD *v222;
  uint64_t v223;
  unsigned __int8 *v224;
  MIL::IRValueType *v225;
  void **v226;
  _QWORD *v227;
  uint64_t v228;
  unsigned __int8 *v229;
  MIL::IRValueType *v230;
  void **v231;
  _QWORD *v232;
  uint64_t v233;
  unsigned __int8 *v234;
  MIL::IRValueType *v235;
  void **v236;
  _QWORD *v237;
  uint64_t v238;
  unsigned __int8 *v239;
  MIL::IRValueType *v240;
  void **v241;
  _QWORD *v242;
  uint64_t v243;
  unsigned __int8 *v244;
  MIL::IRValueType *v245;
  void **v246;
  _QWORD *v247;
  uint64_t v248;
  unsigned __int8 *v249;
  MIL::IRValueType *v250;
  void **v251;
  _QWORD *v252;
  uint64_t v253;
  unsigned __int8 *v254;
  MIL::IRValueType *v255;
  void **v256;
  _QWORD *v257;
  uint64_t v258;
  unsigned __int8 *v259;
  MIL::IRValueType *v260;
  void **v261;
  uint64_t (***v262)();
  uint64_t v263;
  int v264;
  uint64_t v265;
  char v266;
  unsigned __int8 v267;
  uint64_t v268;
  char v269;
  uint64_t v270;
  unsigned __int8 *v272;
  unsigned __int8 *v273;
  void *v274[3];
  void *__p;
  __int128 v276;
  uint64_t v277;
  void *v278[3];
  void *v279;
  _BYTE *v280;
  void *v281;
  _QWORD *v282;
  float *v283[3];
  void **v284;
  _BYTE v285[24];
  _BYTE *v286;
  _BYTE v287[24];
  _BYTE *v288;
  _BYTE v289[24];
  _BYTE *v290;
  _BYTE v291[24];
  _BYTE *v292;
  _BYTE v293[24];
  _BYTE *v294;
  _BYTE v295[24];
  _BYTE *v296;
  _BYTE v297[24];
  _BYTE *v298;
  _BYTE v299[24];
  _BYTE *v300;
  _BYTE v301[24];
  _BYTE *v302;
  _BYTE v303[24];
  _BYTE *v304;
  _BYTE v305[24];
  _BYTE *v306;
  _BYTE v307[24];
  _BYTE *v308;
  _BYTE v309[24];
  _BYTE *v310;
  _BYTE v311[24];
  _BYTE *v312;
  _BYTE v313[24];
  _BYTE *v314;
  _BYTE v315[24];
  _BYTE *v316;
  _BYTE v317[24];
  _BYTE *v318;
  _BYTE v319[24];
  _BYTE *v320;
  _BYTE v321[24];
  _BYTE *v322;
  _BYTE v323[24];
  _BYTE *v324;
  _BYTE v325[24];
  _BYTE *v326;
  _BYTE v327[24];
  _BYTE *v328;
  _BYTE v329[24];
  _BYTE *v330;
  _BYTE v331[24];
  _BYTE *v332;
  _BYTE v333[24];
  _BYTE *v334;
  _BYTE v335[24];
  _BYTE *v336;
  _BYTE v337[24];
  _BYTE *v338;
  uint64_t (**v339[3])();
  uint64_t (***v340)();
  uint64_t v341;

  v341 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  if (SHIBYTE(v276) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "y");
  v6 = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  if (SHIBYTE(v276) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "acc_left_shift");
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue)
    && (v8 = (char *)MEMORY[0x20BCFEE94]()) != 0)
  {
    v9 = *v8;
  }
  else
  {
    v9 = 0;
  }
  if (SHIBYTE(v276) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_right_shift");
  v10 = MIL::IROperation::TryGetParameterValue();
  if (v10
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10)
    && (v11 = (char *)MEMORY[0x20BCFEE94]()) != 0)
  {
    v12 = *v11;
  }
  else
  {
    v12 = 0;
  }
  if (SHIBYTE(v276) < 0)
    operator delete(__p);
  v13 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
  v14 = MIL::Fp16::FromFloat(v13, 1.0);
  v15 = MIL::IROperation::TryGetParameterValue();
  if (v15)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15))
    {
      v16 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v16)
        v14 = *v16;
    }
  }
  LOWORD(v339[0]) = v14;
  MIL::Fp16::GetFloat((MIL::Fp16 *)v339);
  v18 = v17;
  v19 = (float *)operator new(4uLL);
  *(_DWORD *)v19 = v18;
  v283[1] = v19 + 1;
  v283[2] = v19 + 1;
  v283[0] = v19;
  if ((SHIBYTE(v276) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue)
      goto LABEL_25;
LABEL_39:
    v41 = "No value for x";
LABEL_53:
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v41);
LABEL_490:
    operator delete(v19);
    return;
  }
  operator delete(__p);
  if (!InterpretedTensorValue)
    goto LABEL_39;
LABEL_25:
  if (!v6)
  {
    v41 = "No value for y";
    goto LABEL_53;
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 88))(v20);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 88))(v22);
  v269 = v9;
  v270 = (uint64_t)a2;
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  v25 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(OutputType);
  v26 = (*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)v25 + 88))(v25);
  v27 = (*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)v25 + 16))(v25);
  v28 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  ANEMachineIR::Utils::GetStaticTensorShape(v28, v29, (uint64_t)&v281);
  v30 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  ANEMachineIR::Utils::GetStaticTensorShape(v30, v31, (uint64_t)&v279);
  ANEMachineIR::Utils::GetStaticTensorShape(v25, v32, (uint64_t)v278);
  if (v282 == v281 || (unint64_t)(v280 - (_BYTE *)v279) <= 8)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v268 = *(v282 - 1);
  v33 = *((_QWORD *)v280 - 2);
  v34 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
  v35 = MIL::Fp16::FromFloat(v34, 1.0);
  v36 = MIL::IROperation::TryGetParameterValue();
  if (v36)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36))
    {
      v37 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v37)
        v35 = *v37;
    }
  }
  if (SHIBYTE(v276) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
  v38 = MIL::IROperation::TryGetParameterValue();
  if (v38
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38)
    && (v39 = (char *)MEMORY[0x20BCFEEB8]()) != 0)
  {
    v40 = *v39;
  }
  else
  {
    v40 = 1;
  }
  v267 = v40;
  if (SHIBYTE(v276) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
  v42 = MIL::IROperation::TryGetParameterValue();
  if (v42
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42)
    && (v43 = (char *)MEMORY[0x20BCFEE94]()) != 0)
  {
    v44 = *v43;
  }
  else
  {
    v44 = 1;
  }
  v266 = v44;
  if (SHIBYTE(v276) < 0)
    operator delete(__p);
  v276 = 0uLL;
  v277 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&__p, v339);
  if ((_DWORD)__p)
  {
    *(_DWORD *)a3 = (_DWORD)__p;
    *(_OWORD *)(a3 + 8) = v276;
    *(_QWORD *)(a3 + 24) = v277;
    v276 = 0uLL;
    v277 = 0;
    goto LABEL_476;
  }
  v265 = v33 + 1;
  if (v21 == 14)
  {
    if (v23 != 14)
    {
      if (v23 != 9)
      {
        if (v23 != 4)
          goto LABEL_88;
        if (v26 != 14)
        {
          if (v26 != 9)
          {
            if (v26 != 4)
              goto LABEL_131;
            Data = MIL::IRTensorValue::GetDataView<unsigned char>();
            v52 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            v53 = (uint64_t)v340;
            if (v340)
            {
              if (v340 == v339)
              {
                v320 = v319;
                (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v319);
LABEL_436:
                v242 = v320;
                if (v320 == v319)
                {
                  v243 = 4;
                  v242 = v319;
                }
                else
                {
                  if (!v320)
                  {
LABEL_441:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                    v244 = v272;
                    if (v273 == v272)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v245 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v245);
                    MIL::IRTensorValueType::MakeFloat16Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v244, (uint64_t *)&v284);
                    v246 = v284;
                    v284 = 0;
                    if (v246)
                      (*((void (**)(void **))*v246 + 1))(v246);
                    goto LABEL_474;
                  }
                  v243 = 5;
                }
                (*(void (**)(void))(*v242 + 8 * v243))();
                goto LABEL_441;
              }
              v53 = (*v340)[2]();
            }
            v320 = (_BYTE *)v53;
            goto LABEL_436;
          }
          v103 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v104 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v105 = (uint64_t)v340;
          if (v340)
          {
            if (v340 == v339)
            {
              v316 = v315;
              (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v315);
LABEL_336:
              v192 = v316;
              if (v316 == v315)
              {
                v193 = 4;
                v192 = v315;
              }
              else
              {
                if (!v316)
                {
LABEL_341:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                  v194 = v272;
                  if (v273 == v272)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v195 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v195);
                  MIL::IRTensorValueType::MakeInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v194, (uint64_t *)&v284);
                  v196 = v284;
                  v284 = 0;
                  if (v196)
                    (*((void (**)(void **))*v196 + 1))(v196);
                  goto LABEL_474;
                }
                v193 = 5;
              }
              (*(void (**)(void))(*v192 + 8 * v193))();
              goto LABEL_341;
            }
            v105 = (*v340)[2]();
          }
          v316 = (_BYTE *)v105;
          goto LABEL_336;
        }
        v118 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v119 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v120 = (uint64_t)v340;
        if (v340)
        {
          if (v340 == v339)
          {
            v318 = v317;
            (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v317);
LABEL_416:
            v232 = v318;
            if (v318 == v317)
            {
              v233 = 4;
              v232 = v317;
            }
            else
            {
              if (!v318)
              {
LABEL_421:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                v234 = v272;
                if (v273 == v272)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v235 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v235);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v234, (uint64_t *)&v284);
                v236 = v284;
                v284 = 0;
                if (v236)
                  (*((void (**)(void **))*v236 + 1))(v236);
                goto LABEL_474;
              }
              v233 = 5;
            }
            (*(void (**)(void))(*v232 + 8 * v233))();
            goto LABEL_421;
          }
          v120 = (*v340)[2]();
        }
        v318 = (_BYTE *)v120;
        goto LABEL_416;
      }
      if (v26 != 14)
      {
        if (v26 != 9)
        {
          if (v26 != 4)
            goto LABEL_131;
          v61 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v62 = MIL::IRTensorValue::GetDataView<signed char>();
          v63 = (uint64_t)v340;
          if (v340)
          {
            if (v340 == v339)
            {
              v308 = v307;
              (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v307);
LABEL_316:
              v182 = v308;
              if (v308 == v307)
              {
                v183 = 4;
                v182 = v307;
              }
              else
              {
                if (!v308)
                {
LABEL_321:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                  v184 = v272;
                  if (v273 == v272)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v185 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v185);
                  MIL::IRTensorValueType::MakeFloat16Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v184, (uint64_t *)&v284);
                  v186 = v284;
                  v284 = 0;
                  if (v186)
                    (*((void (**)(void **))*v186 + 1))(v186);
                  goto LABEL_474;
                }
                v183 = 5;
              }
              (*(void (**)(void))(*v182 + 8 * v183))();
              goto LABEL_321;
            }
            v63 = (*v340)[2]();
          }
          v308 = (_BYTE *)v63;
          goto LABEL_316;
        }
        v82 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v83 = MIL::IRTensorValue::GetDataView<signed char>();
        v84 = (uint64_t)v340;
        if (v340)
        {
          if (v340 == v339)
          {
            v304 = v303;
            (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v303);
LABEL_236:
            v142 = v304;
            if (v304 == v303)
            {
              v143 = 4;
              v142 = v303;
            }
            else
            {
              if (!v304)
              {
LABEL_241:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                v144 = v272;
                if (v273 == v272)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v145 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v145);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v144, (uint64_t *)&v284);
                v146 = v284;
                v284 = 0;
                if (v146)
                  (*((void (**)(void **))*v146 + 1))(v146);
                goto LABEL_474;
              }
              v143 = 5;
            }
            (*(void (**)(void))(*v142 + 8 * v143))();
            goto LABEL_241;
          }
          v84 = (*v340)[2]();
        }
        v304 = (_BYTE *)v84;
        goto LABEL_236;
      }
      v94 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v95 = MIL::IRTensorValue::GetDataView<signed char>();
      v96 = (uint64_t)v340;
      if (v340)
      {
        if (v340 == v339)
        {
          v306 = v305;
          (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v305);
LABEL_286:
          v167 = v306;
          if (v306 == v305)
          {
            v168 = 4;
            v167 = v305;
          }
          else
          {
            if (!v306)
            {
LABEL_291:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
              v169 = v272;
              if (v273 == v272)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v170 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v170);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v169, (uint64_t *)&v284);
              v171 = v284;
              v284 = 0;
              if (v171)
                (*((void (**)(void **))*v171 + 1))(v171);
              goto LABEL_474;
            }
            v168 = 5;
          }
          (*(void (**)(void))(*v167 + 8 * v168))();
          goto LABEL_291;
        }
        v96 = (*v340)[2]();
      }
      v306 = (_BYTE *)v96;
      goto LABEL_286;
    }
    if (v26 != 14)
    {
      if (v26 != 9)
      {
        if (v26 != 4)
          goto LABEL_131;
        v67 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v68 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v69 = (uint64_t)v340;
        if (v340)
        {
          if (v340 == v339)
          {
            v314 = v313;
            (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v313);
LABEL_406:
            v227 = v314;
            if (v314 == v313)
            {
              v228 = 4;
              v227 = v313;
            }
            else
            {
              if (!v314)
              {
LABEL_411:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                v229 = v272;
                if (v273 == v272)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v230 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v230);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v229, (uint64_t *)&v284);
                v231 = v284;
                v284 = 0;
                if (v231)
                  (*((void (**)(void **))*v231 + 1))(v231);
                goto LABEL_474;
              }
              v228 = 5;
            }
            (*(void (**)(void))(*v227 + 8 * v228))();
            goto LABEL_411;
          }
          v69 = (*v340)[2]();
        }
        v314 = (_BYTE *)v69;
        goto LABEL_406;
      }
      v97 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v98 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v99 = (uint64_t)v340;
      if (v340)
      {
        if (v340 == v339)
        {
          v310 = v309;
          (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v309);
LABEL_296:
          v172 = v310;
          if (v310 == v309)
          {
            v173 = 4;
            v172 = v309;
          }
          else
          {
            if (!v310)
            {
LABEL_301:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
              v174 = v272;
              if (v273 == v272)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v175 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v175);
              MIL::IRTensorValueType::MakeInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v174, (uint64_t *)&v284);
              v176 = v284;
              v284 = 0;
              if (v176)
                (*((void (**)(void **))*v176 + 1))(v176);
              goto LABEL_474;
            }
            v173 = 5;
          }
          (*(void (**)(void))(*v172 + 8 * v173))();
          goto LABEL_301;
        }
        v99 = (*v340)[2]();
      }
      v310 = (_BYTE *)v99;
      goto LABEL_296;
    }
    v115 = MIL::IRTensorValue::GetDataView<unsigned char>();
    v116 = MIL::IRTensorValue::GetDataView<unsigned char>();
    v117 = (uint64_t)v340;
    if (v340)
    {
      if (v340 == v339)
      {
        v312 = v311;
        (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v311);
LABEL_396:
        v222 = v312;
        if (v312 == v311)
        {
          v223 = 4;
          v222 = v311;
        }
        else
        {
          if (!v312)
          {
LABEL_401:
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
            v224 = v272;
            if (v273 == v272)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v225 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v225);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v224, (uint64_t *)&v284);
            v226 = v284;
            v284 = 0;
            if (v226)
              (*((void (**)(void **))*v226 + 1))(v226);
            goto LABEL_474;
          }
          v223 = 5;
        }
        (*(void (**)(void))(*v222 + 8 * v223))();
        goto LABEL_401;
      }
      v117 = (*v340)[2]();
    }
    v312 = (_BYTE *)v117;
    goto LABEL_396;
  }
  if (v21 == 9)
  {
    if (v23 != 14)
    {
      if (v23 != 9)
      {
        if (v23 != 4)
          goto LABEL_88;
        if (v26 != 14)
        {
          if (v26 != 9)
          {
            if (v26 != 4)
              goto LABEL_131;
            v48 = MIL::IRTensorValue::GetDataView<signed char>();
            v49 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            v50 = (uint64_t)v340;
            if (v340)
            {
              if (v340 == v339)
              {
                v302 = v301;
                (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v301);
LABEL_366:
                v207 = v302;
                if (v302 == v301)
                {
                  v208 = 4;
                  v207 = v301;
                }
                else
                {
                  if (!v302)
                  {
LABEL_371:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                    v209 = v272;
                    if (v273 == v272)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v210 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v210);
                    MIL::IRTensorValueType::MakeFloat16Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v209, (uint64_t *)&v284);
                    v211 = v284;
                    v284 = 0;
                    if (v211)
                      (*((void (**)(void **))*v211 + 1))(v211);
                    goto LABEL_474;
                  }
                  v208 = 5;
                }
                (*(void (**)(void))(*v207 + 8 * v208))();
                goto LABEL_371;
              }
              v50 = (*v340)[2]();
            }
            v302 = (_BYTE *)v50;
            goto LABEL_366;
          }
          v85 = MIL::IRTensorValue::GetDataView<signed char>();
          v86 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          v87 = (uint64_t)v340;
          if (v340)
          {
            if (v340 == v339)
            {
              v298 = v297;
              (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v297);
LABEL_256:
              v152 = v298;
              if (v298 == v297)
              {
                v153 = 4;
                v152 = v297;
              }
              else
              {
                if (!v298)
                {
LABEL_261:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                  v154 = v272;
                  if (v273 == v272)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v155 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v155);
                  MIL::IRTensorValueType::MakeInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v154, (uint64_t *)&v284);
                  v156 = v284;
                  v284 = 0;
                  if (v156)
                    (*((void (**)(void **))*v156 + 1))(v156);
                  goto LABEL_474;
                }
                v153 = 5;
              }
              (*(void (**)(void))(*v152 + 8 * v153))();
              goto LABEL_261;
            }
            v87 = (*v340)[2]();
          }
          v298 = (_BYTE *)v87;
          goto LABEL_256;
        }
        v100 = MIL::IRTensorValue::GetDataView<signed char>();
        v101 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v102 = (uint64_t)v340;
        if (v340)
        {
          if (v340 == v339)
          {
            v300 = v299;
            (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v299);
LABEL_326:
            v187 = v300;
            if (v300 == v299)
            {
              v188 = 4;
              v187 = v299;
            }
            else
            {
              if (!v300)
              {
LABEL_331:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                v189 = v272;
                if (v273 == v272)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v190 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v190);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v189, (uint64_t *)&v284);
                v191 = v284;
                v284 = 0;
                if (v191)
                  (*((void (**)(void **))*v191 + 1))(v191);
                goto LABEL_474;
              }
              v188 = 5;
            }
            (*(void (**)(void))(*v187 + 8 * v188))();
            goto LABEL_331;
          }
          v102 = (*v340)[2]();
        }
        v300 = (_BYTE *)v102;
        goto LABEL_326;
      }
      if (v26 != 14)
      {
        if (v26 != 9)
        {
          if (v26 != 4)
            goto LABEL_131;
          v55 = MIL::IRTensorValue::GetDataView<signed char>();
          v56 = MIL::IRTensorValue::GetDataView<signed char>();
          v57 = (uint64_t)v340;
          if (v340)
          {
            if (v340 == v339)
            {
              v290 = v289;
              (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v289);
LABEL_246:
              v147 = v290;
              if (v290 == v289)
              {
                v148 = 4;
                v147 = v289;
              }
              else
              {
                if (!v290)
                {
LABEL_251:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                  v149 = v272;
                  if (v273 == v272)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v150 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v150);
                  MIL::IRTensorValueType::MakeFloat16Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v149, (uint64_t *)&v284);
                  v151 = v284;
                  v284 = 0;
                  if (v151)
                    (*((void (**)(void **))*v151 + 1))(v151);
                  goto LABEL_474;
                }
                v148 = 5;
              }
              (*(void (**)(void))(*v147 + 8 * v148))();
              goto LABEL_251;
            }
            v57 = (*v340)[2]();
          }
          v290 = (_BYTE *)v57;
          goto LABEL_246;
        }
        v73 = MIL::IRTensorValue::GetDataView<signed char>();
        v74 = MIL::IRTensorValue::GetDataView<signed char>();
        v75 = (uint64_t)v340;
        if (v340)
        {
          if (v340 == v339)
          {
            v286 = v285;
            (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v285);
LABEL_206:
            v127 = v286;
            if (v286 == v285)
            {
              v128 = 4;
              v127 = v285;
            }
            else
            {
              if (!v286)
              {
LABEL_211:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                v129 = v272;
                if (v273 == v272)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v130 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v130);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v129, (uint64_t *)&v284);
                v131 = v284;
                v284 = 0;
                if (v131)
                  (*((void (**)(void **))*v131 + 1))(v131);
                goto LABEL_474;
              }
              v128 = 5;
            }
            (*(void (**)(void))(*v127 + 8 * v128))();
            goto LABEL_211;
          }
          v75 = (*v340)[2]();
        }
        v286 = (_BYTE *)v75;
        goto LABEL_206;
      }
      v76 = MIL::IRTensorValue::GetDataView<signed char>();
      v77 = MIL::IRTensorValue::GetDataView<signed char>();
      v78 = (uint64_t)v340;
      if (v340)
      {
        if (v340 == v339)
        {
          v288 = v287;
          (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v287);
LABEL_216:
          v132 = v288;
          if (v288 == v287)
          {
            v133 = 4;
            v132 = v287;
          }
          else
          {
            if (!v288)
            {
LABEL_221:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
              v134 = v272;
              if (v273 == v272)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v135 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v135);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v134, (uint64_t *)&v284);
              v136 = v284;
              v284 = 0;
              if (v136)
                (*((void (**)(void **))*v136 + 1))(v136);
              goto LABEL_474;
            }
            v133 = 5;
          }
          (*(void (**)(void))(*v132 + 8 * v133))();
          goto LABEL_221;
        }
        v78 = (*v340)[2]();
      }
      v288 = (_BYTE *)v78;
      goto LABEL_216;
    }
    if (v26 != 14)
    {
      if (v26 != 9)
      {
        if (v26 != 4)
          goto LABEL_131;
        v58 = MIL::IRTensorValue::GetDataView<signed char>();
        v59 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v60 = (uint64_t)v340;
        if (v340)
        {
          if (v340 == v339)
          {
            v296 = v295;
            (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v295);
LABEL_306:
            v177 = v296;
            if (v296 == v295)
            {
              v178 = 4;
              v177 = v295;
            }
            else
            {
              if (!v296)
              {
LABEL_311:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                v179 = v272;
                if (v273 == v272)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v180 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v180);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v179, (uint64_t *)&v284);
                v181 = v284;
                v284 = 0;
                if (v181)
                  (*((void (**)(void **))*v181 + 1))(v181);
                goto LABEL_474;
              }
              v178 = 5;
            }
            (*(void (**)(void))(*v177 + 8 * v178))();
            goto LABEL_311;
          }
          v60 = (*v340)[2]();
        }
        v296 = (_BYTE *)v60;
        goto LABEL_306;
      }
      v79 = MIL::IRTensorValue::GetDataView<signed char>();
      v80 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v81 = (uint64_t)v340;
      if (v340)
      {
        if (v340 == v339)
        {
          v292 = v291;
          (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v291);
LABEL_226:
          v137 = v292;
          if (v292 == v291)
          {
            v138 = 4;
            v137 = v291;
          }
          else
          {
            if (!v292)
            {
LABEL_231:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
              v139 = v272;
              if (v273 == v272)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v140 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v140);
              MIL::IRTensorValueType::MakeInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v139, (uint64_t *)&v284);
              v141 = v284;
              v284 = 0;
              if (v141)
                (*((void (**)(void **))*v141 + 1))(v141);
              goto LABEL_474;
            }
            v138 = 5;
          }
          (*(void (**)(void))(*v137 + 8 * v138))();
          goto LABEL_231;
        }
        v81 = (*v340)[2]();
      }
      v292 = (_BYTE *)v81;
      goto LABEL_226;
    }
    v91 = MIL::IRTensorValue::GetDataView<signed char>();
    v92 = MIL::IRTensorValue::GetDataView<unsigned char>();
    v93 = (uint64_t)v340;
    if (v340)
    {
      if (v340 == v339)
      {
        v294 = v293;
        (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v293);
LABEL_276:
        v162 = v294;
        if (v294 == v293)
        {
          v163 = 4;
          v162 = v293;
        }
        else
        {
          if (!v294)
          {
LABEL_281:
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
            v164 = v272;
            if (v273 == v272)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v165 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v165);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v164, (uint64_t *)&v284);
            v166 = v284;
            v284 = 0;
            if (v166)
              (*((void (**)(void **))*v166 + 1))(v166);
            goto LABEL_474;
          }
          v163 = 5;
        }
        (*(void (**)(void))(*v162 + 8 * v163))();
        goto LABEL_281;
      }
      v93 = (*v340)[2]();
    }
    v294 = (_BYTE *)v93;
    goto LABEL_276;
  }
  if (v21 != 4)
  {
    v54 = "Unimplemented x dtype";
LABEL_132:
    *(_DWORD *)a3 = 3;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v54);
    goto LABEL_476;
  }
  if (v23 == 14)
  {
    if (v26 != 14)
    {
      if (v26 != 9)
      {
        if (v26 != 4)
          goto LABEL_131;
        v70 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v71 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v72 = (uint64_t)v340;
        if (v340)
        {
          if (v340 == v339)
          {
            v332 = v331;
            (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v331);
LABEL_446:
            v247 = v332;
            if (v332 == v331)
            {
              v248 = 4;
              v247 = v331;
            }
            else
            {
              if (!v332)
              {
LABEL_451:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                v249 = v272;
                if (v273 == v272)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v250 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v250);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v249, (uint64_t *)&v284);
                v251 = v284;
                v284 = 0;
                if (v251)
                  (*((void (**)(void **))*v251 + 1))(v251);
                goto LABEL_474;
              }
              v248 = 5;
            }
            (*(void (**)(void))(*v247 + 8 * v248))();
            goto LABEL_451;
          }
          v72 = (*v340)[2]();
        }
        v332 = (_BYTE *)v72;
        goto LABEL_446;
      }
      v109 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v110 = MIL::IRTensorValue::GetDataView<unsigned char>();
      v111 = (uint64_t)v340;
      if (v340)
      {
        if (v340 == v339)
        {
          v328 = v327;
          (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v327);
LABEL_356:
          v202 = v328;
          if (v328 == v327)
          {
            v203 = 4;
            v202 = v327;
          }
          else
          {
            if (!v328)
            {
LABEL_361:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
              v204 = v272;
              if (v273 == v272)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v205 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v205);
              MIL::IRTensorValueType::MakeInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v204, (uint64_t *)&v284);
              v206 = v284;
              v284 = 0;
              if (v206)
                (*((void (**)(void **))*v206 + 1))(v206);
              goto LABEL_474;
            }
            v203 = 5;
          }
          (*(void (**)(void))(*v202 + 8 * v203))();
          goto LABEL_361;
        }
        v111 = (*v340)[2]();
      }
      v328 = (_BYTE *)v111;
      goto LABEL_356;
    }
    v121 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    v122 = MIL::IRTensorValue::GetDataView<unsigned char>();
    v123 = (uint64_t)v340;
    if (v340)
    {
      if (v340 == v339)
      {
        v330 = v329;
        (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v329);
LABEL_426:
        v237 = v330;
        if (v330 == v329)
        {
          v238 = 4;
          v237 = v329;
        }
        else
        {
          if (!v330)
          {
LABEL_431:
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
            v239 = v272;
            if (v273 == v272)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v240 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v240);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v239, (uint64_t *)&v284);
            v241 = v284;
            v284 = 0;
            if (v241)
              (*((void (**)(void **))*v241 + 1))(v241);
            goto LABEL_474;
          }
          v238 = 5;
        }
        (*(void (**)(void))(*v237 + 8 * v238))();
        goto LABEL_431;
      }
      v123 = (*v340)[2]();
    }
    v330 = (_BYTE *)v123;
    goto LABEL_426;
  }
  if (v23 == 9)
  {
    if (v26 != 14)
    {
      if (v26 != 9)
      {
        if (v26 != 4)
          goto LABEL_131;
        v64 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        v65 = MIL::IRTensorValue::GetDataView<signed char>();
        v66 = (uint64_t)v340;
        if (v340)
        {
          if (v340 == v339)
          {
            v326 = v325;
            (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v325);
LABEL_376:
            v212 = v326;
            if (v326 == v325)
            {
              v213 = 4;
              v212 = v325;
            }
            else
            {
              if (!v326)
              {
LABEL_381:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
                v214 = v272;
                if (v273 == v272)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v215 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v215);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v214, (uint64_t *)&v284);
                v216 = v284;
                v284 = 0;
                if (v216)
                  (*((void (**)(void **))*v216 + 1))(v216);
                goto LABEL_474;
              }
              v213 = 5;
            }
            (*(void (**)(void))(*v212 + 8 * v213))();
            goto LABEL_381;
          }
          v66 = (*v340)[2]();
        }
        v326 = (_BYTE *)v66;
        goto LABEL_376;
      }
      v88 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v89 = MIL::IRTensorValue::GetDataView<signed char>();
      v90 = (uint64_t)v340;
      if (v340)
      {
        if (v340 == v339)
        {
          v322 = v321;
          (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v321);
LABEL_266:
          v157 = v322;
          if (v322 == v321)
          {
            v158 = 4;
            v157 = v321;
          }
          else
          {
            if (!v322)
            {
LABEL_271:
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
              v159 = v272;
              if (v273 == v272)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v160 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v160);
              MIL::IRTensorValueType::MakeInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v159, (uint64_t *)&v284);
              v161 = v284;
              v284 = 0;
              if (v161)
                (*((void (**)(void **))*v161 + 1))(v161);
              goto LABEL_474;
            }
            v158 = 5;
          }
          (*(void (**)(void))(*v157 + 8 * v158))();
          goto LABEL_271;
        }
        v90 = (*v340)[2]();
      }
      v322 = (_BYTE *)v90;
      goto LABEL_266;
    }
    v106 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    v107 = MIL::IRTensorValue::GetDataView<signed char>();
    v108 = (uint64_t)v340;
    if (v340)
    {
      if (v340 == v339)
      {
        v324 = v323;
        (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v323);
LABEL_346:
        v197 = v324;
        if (v324 == v323)
        {
          v198 = 4;
          v197 = v323;
        }
        else
        {
          if (!v324)
          {
LABEL_351:
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
            v199 = v272;
            if (v273 == v272)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v200 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v200);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v199, (uint64_t *)&v284);
            v201 = v284;
            v284 = 0;
            if (v201)
              (*((void (**)(void **))*v201 + 1))(v201);
            goto LABEL_474;
          }
          v198 = 5;
        }
        (*(void (**)(void))(*v197 + 8 * v198))();
        goto LABEL_351;
      }
      v108 = (*v340)[2]();
    }
    v324 = (_BYTE *)v108;
    goto LABEL_346;
  }
  if (v23 != 4)
  {
LABEL_88:
    v54 = "Unimplemented y dtype";
    goto LABEL_132;
  }
  if (v26 == 14)
  {
    v124 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    v125 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    v126 = (uint64_t)v340;
    if (v340)
    {
      if (v340 == v339)
      {
        v336 = v335;
        (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v335);
LABEL_456:
        v252 = v336;
        if (v336 == v335)
        {
          v253 = 4;
          v252 = v335;
        }
        else
        {
          if (!v336)
          {
LABEL_461:
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
            v254 = v272;
            if (v273 == v272)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v255 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v255);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v254, (uint64_t *)&v284);
            v256 = v284;
            v284 = 0;
            if (v256)
              (*((void (**)(void **))*v256 + 1))(v256);
            goto LABEL_474;
          }
          v253 = 5;
        }
        (*(void (**)(void))(*v252 + 8 * v253))();
        goto LABEL_461;
      }
      v126 = (*v340)[2]();
    }
    v336 = (_BYTE *)v126;
    goto LABEL_456;
  }
  if (v26 == 9)
  {
    v112 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    v113 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    v114 = (uint64_t)v340;
    if (v340)
    {
      if (v340 == v339)
      {
        v334 = v333;
        (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v333);
LABEL_386:
        v217 = v334;
        if (v334 == v333)
        {
          v218 = 4;
          v217 = v333;
        }
        else
        {
          if (!v334)
          {
LABEL_391:
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
            v219 = v272;
            if (v273 == v272)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v220 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v220);
            MIL::IRTensorValueType::MakeInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v219, (uint64_t *)&v284);
            v221 = v284;
            v284 = 0;
            if (v221)
              (*((void (**)(void **))*v221 + 1))(v221);
            goto LABEL_474;
          }
          v218 = 5;
        }
        (*(void (**)(void))(*v217 + 8 * v218))();
        goto LABEL_391;
      }
      v114 = (*v340)[2]();
    }
    v334 = (_BYTE *)v114;
    goto LABEL_386;
  }
  if (v26 != 4)
  {
LABEL_131:
    v54 = "Unimplemented output dtype";
    goto LABEL_132;
  }
  v45 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
  v46 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
  v47 = (uint64_t)v340;
  if (!v340)
  {
LABEL_66:
    v338 = (_BYTE *)v47;
    goto LABEL_466;
  }
  if (v340 != v339)
  {
    v47 = (*v340)[2]();
    goto LABEL_66;
  }
  v338 = v337;
  (*((void (**)(uint64_t (***)(), _BYTE *))v339[0] + 3))(v339, v337);
LABEL_466:
  v257 = v338;
  if (v338 == v337)
  {
    v258 = 4;
    v257 = v337;
    goto LABEL_470;
  }
  if (v338)
  {
    v258 = 5;
LABEL_470:
    (*(void (**)(void))(*v257 + 8 * v258))();
  }
  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v272, a1);
  v259 = v272;
  if (v273 == v272)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v260 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  MIL::IRValueType::AsTensorType(v260);
  MIL::IRTensorValueType::MakeFloat16Value();
  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v270, v259, (uint64_t *)&v284);
  v261 = v284;
  v284 = 0;
  if (v261)
    (*((void (**)(void **))*v261 + 1))(v261);
LABEL_474:
  v284 = (void **)&v272;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v284);
  *(_DWORD *)a3 = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
  if (v274[0])
  {
    v274[1] = v274[0];
    operator delete(v274[0]);
  }
LABEL_476:
  v262 = v340;
  if (v340 == v339)
  {
    v263 = 4;
    v262 = v339;
  }
  else
  {
    if (!v340)
      goto LABEL_481;
    v263 = 5;
  }
  (*v262)[v263]();
LABEL_481:
  if (SHIBYTE(v277) < 0)
    operator delete((void *)v276);
  if (v278[0])
  {
    v278[1] = v278[0];
    operator delete(v278[0]);
  }
  if (v279)
  {
    v280 = v279;
    operator delete(v279);
  }
  if (v281)
  {
    v282 = v281;
    operator delete(v281);
  }
  v19 = v283[0];
  if (v283[0])
    goto LABEL_490;
}

void sub_20690D40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42)
{
  uint64_t v42;
  _QWORD *v44;
  uint64_t v45;

  if (__p)
    operator delete(__p);
  v44 = *(_QWORD **)(v42 - 120);
  if (v44 == (_QWORD *)(v42 - 144))
  {
    v45 = 4;
    v44 = (_QWORD *)(v42 - 144);
  }
  else
  {
    if (!v44)
      goto LABEL_8;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_8:
  if (a32 < 0)
    operator delete(a27);
  if (a33)
    operator delete(a33);
  if (a36)
    operator delete(a36);
  if (a39)
    operator delete(a39);
  if (a42)
    operator delete(a42);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, float **a10, char a11, int a12, __int16 a13, uint64_t a14)
{
  unint64_t *v14;
  uint64_t v15;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  MIL::Fp16 *Float;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  MIL::Fp16 *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  unint64_t v43;
  float v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  __int16 v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  _BOOL4 v62;
  float v63;
  double v64;
  float v65;
  long double v66;
  double v67;
  float v68;
  float v69;
  long double v70;
  double v71;
  uint64_t v72;
  MIL::Fp16 *v73;
  float v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v84;
  int v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v94;
  uint64_t v95;
  __int16 v97;
  int __e;
  int64x2_t __src;
  _QWORD v100[4];

  v100[2] = *MEMORY[0x24BDAC8D0];
  v14 = *a3;
  v15 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v15 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v18 = v15 >> 3;
  if (v18 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v14 + 1), __src.i8, (char *)v100, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v14 + 1), __src.i8, &__src.i8[8], 1);
  }
  v19 = *a4;
  v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v100, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  v21 = *a5;
  v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v100, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  v80 = (*a3)[1];
  v81 = **a3;
  v79 = (*a3)[2];
  v94 = (*a3)[4];
  v89 = *((_QWORD *)*a4 + 1);
  v90 = *(_QWORD *)*a4;
  v88 = *((_QWORD *)*a4 + 2);
  v23 = **a5;
  v76 = (*a5)[1];
  v77 = (*a5)[2];
  v24 = (*a5)[4];
  v78 = (*a5)[3];
  v25 = ldexp(1.0, a7 + 20);
  v26 = exp2(-(double)(a7 + 20 + a8));
  __src = 0uLL;
  v100[0] = 0;
  v84 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  v28 = v26;
  v29 = *a10;
  v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    v97 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v97);
    *(float *)&__e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v84, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v33 = v32 * v28;
      v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v100[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v38 = v100[0] - __src.i64[0];
        if ((v100[0] - __src.i64[0]) >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v100, v39);
          v34 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v40 = 0;
        }
        v41 = (float *)&v40[4 * v36];
        *v41 = v33;
        v35 = v41 + 1;
        while (v34 != Float)
        {
          v42 = *((_DWORD *)v34 - 1);
          v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v100[0] = &v40[4 * v39];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  if (v23)
  {
    v43 = 0;
    v44 = v25;
    while (!v76)
    {
LABEL_82:
      if (++v43 == v23)
        goto LABEL_83;
    }
    v45 = 0;
    while (!v77)
    {
LABEL_81:
      if (++v45 == v76)
        goto LABEL_82;
    }
    v46 = 0;
    while (!v78)
    {
LABEL_80:
      if (++v46 == v77)
        goto LABEL_81;
    }
    v95 = 0;
    while (!v84)
    {
LABEL_79:
      if (++v95 == v78)
        goto LABEL_80;
    }
    v91 = 0;
    while (1)
    {
      if (v94)
      {
        v47 = 0;
        v48 = 0;
        v86 = 0;
        do
        {
          v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (v50 = a13, v47 != *((_QWORD *)a4[1] - 2)))
            v50 = *(_WORD *)(a2
                           + 2
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v52 = v51;
            LOWORD(__e) = v50;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v54 = v53;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v56 = v54 - v55;
            v57 = ilogbf(v52);
            if (v57 <= -14)
              v58 = -14;
            else
              v58 = v57;
            v59 = ilogbf(v56);
            if (v59 <= -14)
              v60 = -14;
            else
              v60 = v59;
            if (v58 + a7 + v60 >= -20)
            {
              v61 = (int)llroundf((float)(v52 * v56) * v44) + (uint64_t)v86;
              if (v61 <= 0x7FFFFFFF)
              {
                v62 = v61 < (uint64_t)0xFFFFFFFF80000000;
                if (v61 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v61) = -8388608;
                v86 = v61;
                v48 = 2 * v62;
              }
              else
              {
                v48 = 1;
                v86 = 2139095040;
              }
            }
            else
            {
              v48 = 0;
            }
          }
          ++v47;
        }
        while (v94 != v47);
        v63 = *(float *)(__src.i64[0] + 4 * v91);
        if (v48)
        {
          v64 = INFINITY;
          if (v48 == 2)
            v64 = -INFINITY;
          goto LABEL_74;
        }
        if (v86)
        {
          v64 = (double)v86;
LABEL_74:
          *(float *)&__e = 0.0;
          v66 = frexp(v64, &__e);
          v67 = ldexp(v66, 11);
          v65 = ldexp(round(v67), __e - 11);
          goto LABEL_75;
        }
      }
      else
      {
        v63 = *(float *)(__src.i64[0] + 4 * v91);
      }
      v65 = 0.0;
LABEL_75:
      v68 = v63 * v65;
      v69 = 0.0;
      if (v68 != 0.0)
      {
        *(float *)&__e = 0.0;
        v70 = frexp(v68, &__e);
        v71 = ldexp(v70, 11);
        v69 = ldexp(round(v71), __e - 11);
      }
      *(float *)&__e = v69;
      v72 = *(_QWORD *)(a14 + 24);
      if (!v72)
        std::__throw_bad_function_call[abi:ne180100]();
      v73 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v72 + 48))(v72, &__e);
      v75 = MIL::Fp16::FromFloat(v73, v74);
      *(_WORD *)(*a9
               + 2
      if (v91 == v84)
        goto LABEL_79;
    }
  }
LABEL_83:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_20690E2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;
  void *v21;

  v20 = *(void **)(v18 - 160);
  if (v20)
  {
    *(_QWORD *)(v18 - 152) = v20;
    operator delete(v20);
  }
  v21 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, int a12, __int16 a13, __int16 a14, uint64_t a15)
{
  unint64_t *v15;
  uint64_t v16;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  MIL::Fp16 *Float;
  float v29;
  float *v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  MIL::Fp16 *v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float *v42;
  int v43;
  unint64_t v44;
  float v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  __int16 v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  _BOOL4 v63;
  float v64;
  double v65;
  float v66;
  long double v67;
  double v68;
  float v69;
  float v70;
  long double v71;
  double v72;
  uint64_t v73;
  float v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v85;
  int v87;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v95;
  uint64_t v96;
  __int16 v98;
  int __e;
  int64x2_t __src;
  _QWORD v101[4];

  v101[2] = *MEMORY[0x24BDAC8D0];
  v15 = *a3;
  v16 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v16 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v19 = v16 >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, (char *)v101, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a4;
  v21 = (a4[1] - *a4) >> 3;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, (char *)v101, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, &__src.i8[8], 1);
  }
  v22 = *a5;
  v23 = a5[1] - *a5;
  if (v23 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, (char *)v101, 2);
  }
  else if (v23 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v81 = (*a3)[1];
  v82 = **a3;
  v80 = (*a3)[2];
  v95 = (*a3)[4];
  v90 = *((_QWORD *)*a4 + 1);
  v91 = *(_QWORD *)*a4;
  v89 = *((_QWORD *)*a4 + 2);
  v24 = **a5;
  v77 = (*a5)[1];
  v78 = (*a5)[2];
  v25 = (*a5)[4];
  v79 = (*a5)[3];
  v26 = ldexp(1.0, a7 + 20);
  v27 = exp2(-(double)(a7 + 20 + a8));
  __src = 0uLL;
  v101[0] = 0;
  v85 = v25;
  std::vector<float>::reserve((void **)&__src, v25);
  v29 = v27;
  v30 = *a10;
  v31 = a10[1];
  if ((char *)v31 - (char *)*a10 == 4)
  {
    v98 = MIL::Fp16::FromFloat(Float, *v30);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v98);
    *(float *)&__e = v32 * v29;
    std::vector<float>::assign((char **)&__src, v85, &__e);
  }
  else
  {
    for (; v30 != v31; ++v30)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v30);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v34 = v33 * v29;
      v35 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v101[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v37 = (__src.i64[1] - __src.i64[0]) >> 2;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v39 = v101[0] - __src.i64[0];
        if ((v101[0] - __src.i64[0]) >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v101, v40);
          v35 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v41 = 0;
        }
        v42 = (float *)&v41[4 * v37];
        *v42 = v34;
        v36 = v42 + 1;
        while (v35 != Float)
        {
          v43 = *((_DWORD *)v35 - 1);
          v35 = (MIL::Fp16 *)((char *)v35 - 4);
          *((_DWORD *)v42-- - 1) = v43;
        }
        __src.i64[0] = (uint64_t)v42;
        __src.i64[1] = (uint64_t)v36;
        v101[0] = &v41[4 * v40];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v34;
        v36 = (float *)((char *)v35 + 4);
      }
      __src.i64[1] = (uint64_t)v36;
    }
  }
  if (v24)
  {
    v44 = 0;
    v45 = v26;
    while (!v77)
    {
LABEL_91:
      if (++v44 == v24)
        goto LABEL_92;
    }
    v46 = 0;
    while (!v78)
    {
LABEL_90:
      if (++v46 == v77)
        goto LABEL_91;
    }
    v47 = 0;
    while (!v79)
    {
LABEL_89:
      if (++v47 == v78)
        goto LABEL_90;
    }
    v96 = 0;
    while (!v85)
    {
LABEL_88:
      if (++v96 == v79)
        goto LABEL_89;
    }
    v92 = 0;
    while (1)
    {
      if (v95)
      {
        v48 = 0;
        v49 = 0;
        v87 = 0;
        do
        {
          v50 = *(_WORD *)(a1
                         + 2
          if (!a11 || (v51 = a13, v48 != *((_QWORD *)a4[1] - 2)))
            v51 = *(_WORD *)(a2
                           + 2
          if (!v49)
          {
            LOWORD(__e) = v50;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v53 = v52;
            LOWORD(__e) = v51;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v55 = v54;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v57 = v55 - v56;
            v58 = ilogbf(v53);
            if (v58 <= -14)
              v59 = -14;
            else
              v59 = v58;
            v60 = ilogbf(v57);
            if (v60 <= -14)
              v61 = -14;
            else
              v61 = v60;
            if (v59 + a7 + v61 >= -20)
            {
              v62 = (int)llroundf((float)(v53 * v57) * v45) + (uint64_t)v87;
              if (v62 <= 0x7FFFFFFF)
              {
                v63 = v62 < (uint64_t)0xFFFFFFFF80000000;
                if (v62 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v62) = -8388608;
                v87 = v62;
                v49 = 2 * v63;
              }
              else
              {
                v49 = 1;
                v87 = 2139095040;
              }
            }
            else
            {
              v49 = 0;
            }
          }
          ++v48;
        }
        while (v95 != v48);
        v64 = *(float *)(__src.i64[0] + 4 * v92);
        if (v49)
        {
          v65 = INFINITY;
          if (v49 == 2)
            v65 = -INFINITY;
          goto LABEL_76;
        }
        if (v87)
        {
          v65 = (double)v87;
LABEL_76:
          *(float *)&__e = 0.0;
          v67 = frexp(v65, &__e);
          v68 = ldexp(v67, 11);
          v66 = ldexp(round(v68), __e - 11);
          goto LABEL_77;
        }
      }
      else
      {
        v64 = *(float *)(__src.i64[0] + 4 * v92);
      }
      v66 = 0.0;
LABEL_77:
      v69 = v64 * v66;
      v70 = 0.0;
      if (v69 != 0.0)
      {
        *(float *)&__e = 0.0;
        v71 = frexp(v69, &__e);
        v72 = ldexp(v71, 11);
        v70 = ldexp(round(v72), __e - 11);
      }
      *(float *)&__e = v70;
      v73 = *(_QWORD *)(a15 + 24);
      if (!v73)
        std::__throw_bad_function_call[abi:ne180100]();
      v74 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v73 + 48))(v73, &__e);
      if (v74 == INFINITY)
      {
        LOBYTE(v75) = -1;
      }
      else if (v74 == -INFINITY)
      {
        LOBYTE(v75) = 0;
      }
      else
      {
        v76 = llroundf(v74);
        if (v76 >= 255)
          v76 = 255;
        v75 = v76 & ~(v76 >> 31);
      }
      *(_BYTE *)(*a9
      if (v92 == v85)
        goto LABEL_88;
    }
  }
LABEL_92:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_20690EAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, int a12, __int16 a13, __int16 a14, uint64_t a15)
{
  unint64_t *v15;
  uint64_t v16;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  MIL::Fp16 *Float;
  float v29;
  float *v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  MIL::Fp16 *v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float *v42;
  int v43;
  unint64_t v44;
  float v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  __int16 v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  _BOOL4 v63;
  float v64;
  double v65;
  float v66;
  long double v67;
  double v68;
  float v69;
  float v70;
  long double v71;
  double v72;
  uint64_t v73;
  float v74;
  char v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v85;
  int v87;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v95;
  uint64_t v96;
  __int16 v98;
  int __e;
  int64x2_t __src;
  _QWORD v101[4];

  v101[2] = *MEMORY[0x24BDAC8D0];
  v15 = *a3;
  v16 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v16 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v19 = v16 >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, (char *)v101, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a4;
  v21 = (a4[1] - *a4) >> 3;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, (char *)v101, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, &__src.i8[8], 1);
  }
  v22 = *a5;
  v23 = a5[1] - *a5;
  if (v23 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, (char *)v101, 2);
  }
  else if (v23 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v81 = (*a3)[1];
  v82 = **a3;
  v80 = (*a3)[2];
  v95 = (*a3)[4];
  v90 = *((_QWORD *)*a4 + 1);
  v91 = *(_QWORD *)*a4;
  v89 = *((_QWORD *)*a4 + 2);
  v24 = **a5;
  v77 = (*a5)[1];
  v78 = (*a5)[2];
  v25 = (*a5)[4];
  v79 = (*a5)[3];
  v26 = ldexp(1.0, a7 + 20);
  v27 = exp2(-(double)(a7 + 20 + a8));
  __src = 0uLL;
  v101[0] = 0;
  v85 = v25;
  std::vector<float>::reserve((void **)&__src, v25);
  v29 = v27;
  v30 = *a10;
  v31 = a10[1];
  if ((char *)v31 - (char *)*a10 == 4)
  {
    v98 = MIL::Fp16::FromFloat(Float, *v30);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v98);
    *(float *)&__e = v32 * v29;
    std::vector<float>::assign((char **)&__src, v85, &__e);
  }
  else
  {
    for (; v30 != v31; ++v30)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v30);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v34 = v33 * v29;
      v35 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v101[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v37 = (__src.i64[1] - __src.i64[0]) >> 2;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v39 = v101[0] - __src.i64[0];
        if ((v101[0] - __src.i64[0]) >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v101, v40);
          v35 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v41 = 0;
        }
        v42 = (float *)&v41[4 * v37];
        *v42 = v34;
        v36 = v42 + 1;
        while (v35 != Float)
        {
          v43 = *((_DWORD *)v35 - 1);
          v35 = (MIL::Fp16 *)((char *)v35 - 4);
          *((_DWORD *)v42-- - 1) = v43;
        }
        __src.i64[0] = (uint64_t)v42;
        __src.i64[1] = (uint64_t)v36;
        v101[0] = &v41[4 * v40];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v34;
        v36 = (float *)((char *)v35 + 4);
      }
      __src.i64[1] = (uint64_t)v36;
    }
  }
  if (v24)
  {
    v44 = 0;
    v45 = v26;
    while (!v77)
    {
LABEL_93:
      if (++v44 == v24)
        goto LABEL_94;
    }
    v46 = 0;
    while (!v78)
    {
LABEL_92:
      if (++v46 == v77)
        goto LABEL_93;
    }
    v47 = 0;
    while (!v79)
    {
LABEL_91:
      if (++v47 == v78)
        goto LABEL_92;
    }
    v96 = 0;
    while (!v85)
    {
LABEL_90:
      if (++v96 == v79)
        goto LABEL_91;
    }
    v92 = 0;
    while (1)
    {
      if (v95)
      {
        v48 = 0;
        v49 = 0;
        v87 = 0;
        do
        {
          v50 = *(_WORD *)(a1
                         + 2
          if (!a11 || (v51 = a13, v48 != *((_QWORD *)a4[1] - 2)))
            v51 = *(_WORD *)(a2
                           + 2
          if (!v49)
          {
            LOWORD(__e) = v50;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v53 = v52;
            LOWORD(__e) = v51;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v55 = v54;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v57 = v55 - v56;
            v58 = ilogbf(v53);
            if (v58 <= -14)
              v59 = -14;
            else
              v59 = v58;
            v60 = ilogbf(v57);
            if (v60 <= -14)
              v61 = -14;
            else
              v61 = v60;
            if (v59 + a7 + v61 >= -20)
            {
              v62 = (int)llroundf((float)(v53 * v57) * v45) + (uint64_t)v87;
              if (v62 <= 0x7FFFFFFF)
              {
                v63 = v62 < (uint64_t)0xFFFFFFFF80000000;
                if (v62 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v62) = -8388608;
                v87 = v62;
                v49 = 2 * v63;
              }
              else
              {
                v49 = 1;
                v87 = 2139095040;
              }
            }
            else
            {
              v49 = 0;
            }
          }
          ++v48;
        }
        while (v95 != v48);
        v64 = *(float *)(__src.i64[0] + 4 * v92);
        if (v49)
        {
          v65 = INFINITY;
          if (v49 == 2)
            v65 = -INFINITY;
          goto LABEL_76;
        }
        if (v87)
        {
          v65 = (double)v87;
LABEL_76:
          *(float *)&__e = 0.0;
          v67 = frexp(v65, &__e);
          v68 = ldexp(v67, 11);
          v66 = ldexp(round(v68), __e - 11);
          goto LABEL_77;
        }
      }
      else
      {
        v64 = *(float *)(__src.i64[0] + 4 * v92);
      }
      v66 = 0.0;
LABEL_77:
      v69 = v64 * v66;
      v70 = 0.0;
      if (v69 != 0.0)
      {
        *(float *)&__e = 0.0;
        v71 = frexp(v69, &__e);
        v72 = ldexp(v71, 11);
        v70 = ldexp(round(v72), __e - 11);
      }
      *(float *)&__e = v70;
      v73 = *(_QWORD *)(a15 + 24);
      if (!v73)
        std::__throw_bad_function_call[abi:ne180100]();
      v74 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v73 + 48))(v73, &__e);
      if (v74 == INFINITY)
      {
        v75 = 127;
      }
      else if (v74 == -INFINITY)
      {
        v75 = 0x80;
      }
      else
      {
        v76 = llroundf(v74);
        if (v76 >= 127)
          v76 = 127;
        if (v76 <= -128)
          v75 = 0x80;
        else
          v75 = v76;
      }
      *(_BYTE *)(*a9
      if (v92 == v85)
        goto LABEL_90;
    }
  }
LABEL_94:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_20690F300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  MIL::Fp16 *Float;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  MIL::Fp16 *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  unint64_t v43;
  float v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  unsigned int v50;
  float v51;
  float v52;
  int v53;
  int v54;
  uint64_t v55;
  _BOOL4 v56;
  float v57;
  double v58;
  float v59;
  long double v60;
  double v61;
  float v62;
  float v63;
  long double v64;
  double v65;
  uint64_t v66;
  MIL::Fp16 *v67;
  float v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v79;
  int v80;
  int v81;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v89;
  uint64_t v90;
  __int16 v92;
  int __e;
  int64x2_t __src;
  _QWORD v95[4];

  v95[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v18 = v14 >> 3;
  if (v18 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v95, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v19 = *a4;
  v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v95, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  v21 = *a5;
  v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v95, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  v75 = (*a3)[1];
  v76 = **a3;
  v74 = (*a3)[2];
  v89 = (*a3)[4];
  v84 = *((_QWORD *)*a4 + 1);
  v85 = *(_QWORD *)*a4;
  v83 = *((_QWORD *)*a4 + 2);
  v23 = **a5;
  v71 = (*a5)[1];
  v72 = (*a5)[2];
  v24 = (*a5)[4];
  v73 = (*a5)[3];
  v25 = ldexp(1.0, a7 + 10);
  v26 = exp2(-(double)(a7 + 10 + a8));
  __src = 0uLL;
  v95[0] = 0;
  v79 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  v28 = v26;
  v29 = *a10;
  v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    v92 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v92);
    *(float *)&__e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v79, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v33 = v32 * v28;
      v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v95[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v38 = v95[0] - __src.i64[0];
        if ((v95[0] - __src.i64[0]) >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v95, v39);
          v34 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v40 = 0;
        }
        v41 = (float *)&v40[4 * v36];
        *v41 = v33;
        v35 = v41 + 1;
        while (v34 != Float)
        {
          v42 = *((_DWORD *)v34 - 1);
          v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v95[0] = &v40[4 * v39];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  if (v23)
  {
    v43 = 0;
    v80 = -20 - a7;
    v44 = v25;
    v70 = v23;
    while (!v71)
    {
LABEL_79:
      if (++v43 == v70)
        goto LABEL_80;
    }
    v45 = 0;
    while (!v72)
    {
LABEL_78:
      if (++v45 == v71)
        goto LABEL_79;
    }
    v46 = 0;
    while (!v73)
    {
LABEL_77:
      if (++v46 == v72)
        goto LABEL_78;
    }
    v90 = 0;
    while (!v79)
    {
LABEL_76:
      if (++v90 == v73)
        goto LABEL_77;
    }
    v86 = 0;
    while (1)
    {
      if (v89)
      {
        v47 = 0;
        v48 = 0;
        v81 = 0;
        do
        {
          v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (v50 = a12, v47 != *((_QWORD *)a4[1] - 2)))
            v50 = *(unsigned __int8 *)(a2
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v52 = v51;
            v53 = ilogbf(v51);
            if (v53 <= -14)
              v54 = -14;
            else
              v54 = v53;
            if (v54 >= v80)
            {
              v55 = (int)llroundf((float)(v52 * (float)v50) * v44) + (uint64_t)v81;
              if (v55 <= 0x7FFFFFFF)
              {
                v56 = v55 < (uint64_t)0xFFFFFFFF80000000;
                if (v55 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v55) = -8388608;
                v81 = v55;
                v48 = 2 * v56;
              }
              else
              {
                v48 = 1;
                v81 = 2139095040;
              }
            }
            else
            {
              v48 = 0;
            }
          }
          ++v47;
        }
        while (v89 != v47);
        v57 = *(float *)(__src.i64[0] + 4 * v86);
        if (v48)
        {
          v58 = INFINITY;
          if (v48 == 2)
            v58 = -INFINITY;
          goto LABEL_71;
        }
        if (v81)
        {
          v58 = (double)v81;
LABEL_71:
          *(float *)&__e = 0.0;
          v60 = frexp(v58, &__e);
          v61 = ldexp(v60, 11);
          v59 = ldexp(round(v61), __e - 11);
          goto LABEL_72;
        }
      }
      else
      {
        v57 = *(float *)(__src.i64[0] + 4 * v86);
      }
      v59 = 0.0;
LABEL_72:
      v62 = v57 * v59;
      v63 = 0.0;
      if (v62 != 0.0)
      {
        *(float *)&__e = 0.0;
        v64 = frexp(v62, &__e);
        v65 = ldexp(v64, 11);
        v63 = ldexp(round(v65), __e - 11);
      }
      *(float *)&__e = v63;
      v66 = *(_QWORD *)(a13 + 24);
      if (!v66)
        std::__throw_bad_function_call[abi:ne180100]();
      v67 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v66 + 48))(v66, &__e);
      v69 = MIL::Fp16::FromFloat(v67, v68);
      *(_WORD *)(*a9
               + 2
      if (v86 == v79)
        goto LABEL_76;
    }
  }
LABEL_80:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_20690FA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;
  void *v21;

  v20 = *(void **)(v18 - 160);
  if (v20)
  {
    *(_QWORD *)(v18 - 152) = v20;
    operator delete(v20);
  }
  v21 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  MIL::Fp16 *Float;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  MIL::Fp16 *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  unint64_t v43;
  float v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  unsigned int v50;
  float v51;
  float v52;
  int v53;
  int v54;
  uint64_t v55;
  _BOOL4 v56;
  float v57;
  double v58;
  float v59;
  long double v60;
  double v61;
  float v62;
  float v63;
  long double v64;
  double v65;
  uint64_t v66;
  float v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v79;
  int v80;
  int v81;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v89;
  uint64_t v90;
  __int16 v92;
  int __e;
  int64x2_t __src;
  _QWORD v95[4];

  v95[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v18 = v14 >> 3;
  if (v18 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v95, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v19 = *a4;
  v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v95, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  v21 = *a5;
  v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v95, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v75 = (*a3)[1];
  v76 = **a3;
  v74 = (*a3)[2];
  v89 = (*a3)[4];
  v84 = *((_QWORD *)*a4 + 1);
  v85 = *(_QWORD *)*a4;
  v83 = *((_QWORD *)*a4 + 2);
  v23 = **a5;
  v71 = (*a5)[1];
  v72 = (*a5)[2];
  v24 = (*a5)[4];
  v73 = (*a5)[3];
  v25 = ldexp(1.0, a7 + 10);
  v26 = exp2(-(double)(a7 + 10 + a8));
  __src = 0uLL;
  v95[0] = 0;
  v79 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  v28 = v26;
  v29 = *a10;
  v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    v92 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v92);
    *(float *)&__e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v79, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v33 = v32 * v28;
      v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v95[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v38 = v95[0] - __src.i64[0];
        if ((v95[0] - __src.i64[0]) >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v95, v39);
          v34 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v40 = 0;
        }
        v41 = (float *)&v40[4 * v36];
        *v41 = v33;
        v35 = v41 + 1;
        while (v34 != Float)
        {
          v42 = *((_DWORD *)v34 - 1);
          v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v95[0] = &v40[4 * v39];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  if (v23)
  {
    v43 = 0;
    v80 = -20 - a7;
    v44 = v25;
    v70 = v23;
    while (!v71)
    {
LABEL_88:
      if (++v43 == v70)
        goto LABEL_89;
    }
    v45 = 0;
    while (!v72)
    {
LABEL_87:
      if (++v45 == v71)
        goto LABEL_88;
    }
    v46 = 0;
    while (!v73)
    {
LABEL_86:
      if (++v46 == v72)
        goto LABEL_87;
    }
    v90 = 0;
    while (!v79)
    {
LABEL_85:
      if (++v90 == v73)
        goto LABEL_86;
    }
    v86 = 0;
    while (1)
    {
      if (v89)
      {
        v47 = 0;
        v48 = 0;
        v81 = 0;
        do
        {
          v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (v50 = a12, v47 != *((_QWORD *)a4[1] - 2)))
            v50 = *(unsigned __int8 *)(a2
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v52 = v51;
            v53 = ilogbf(v51);
            if (v53 <= -14)
              v54 = -14;
            else
              v54 = v53;
            if (v54 >= v80)
            {
              v55 = (int)llroundf((float)(v52 * (float)v50) * v44) + (uint64_t)v81;
              if (v55 <= 0x7FFFFFFF)
              {
                v56 = v55 < (uint64_t)0xFFFFFFFF80000000;
                if (v55 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v55) = -8388608;
                v81 = v55;
                v48 = 2 * v56;
              }
              else
              {
                v48 = 1;
                v81 = 2139095040;
              }
            }
            else
            {
              v48 = 0;
            }
          }
          ++v47;
        }
        while (v89 != v47);
        v57 = *(float *)(__src.i64[0] + 4 * v86);
        if (v48)
        {
          v58 = INFINITY;
          if (v48 == 2)
            v58 = -INFINITY;
          goto LABEL_73;
        }
        if (v81)
        {
          v58 = (double)v81;
LABEL_73:
          *(float *)&__e = 0.0;
          v60 = frexp(v58, &__e);
          v61 = ldexp(v60, 11);
          v59 = ldexp(round(v61), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        v57 = *(float *)(__src.i64[0] + 4 * v86);
      }
      v59 = 0.0;
LABEL_74:
      v62 = v57 * v59;
      v63 = 0.0;
      if (v62 != 0.0)
      {
        *(float *)&__e = 0.0;
        v64 = frexp(v62, &__e);
        v65 = ldexp(v64, 11);
        v63 = ldexp(round(v65), __e - 11);
      }
      *(float *)&__e = v63;
      v66 = *(_QWORD *)(a13 + 24);
      if (!v66)
        std::__throw_bad_function_call[abi:ne180100]();
      v67 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v66 + 48))(v66, &__e);
      if (v67 == INFINITY)
      {
        LOBYTE(v68) = -1;
      }
      else if (v67 == -INFINITY)
      {
        LOBYTE(v68) = 0;
      }
      else
      {
        v69 = llroundf(v67);
        if (v69 >= 255)
          v69 = 255;
        v68 = v69 & ~(v69 >> 31);
      }
      *(_BYTE *)(*a9
      if (v86 == v79)
        goto LABEL_85;
    }
  }
LABEL_89:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206910274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  MIL::Fp16 *Float;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  MIL::Fp16 *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  unint64_t v43;
  float v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  unsigned int v50;
  float v51;
  float v52;
  int v53;
  int v54;
  uint64_t v55;
  _BOOL4 v56;
  float v57;
  double v58;
  float v59;
  long double v60;
  double v61;
  float v62;
  float v63;
  long double v64;
  double v65;
  uint64_t v66;
  float v67;
  char v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v79;
  int v80;
  int v81;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v89;
  uint64_t v90;
  __int16 v92;
  int __e;
  int64x2_t __src;
  _QWORD v95[4];

  v95[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v18 = v14 >> 3;
  if (v18 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v95, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v19 = *a4;
  v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v95, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  v21 = *a5;
  v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v95, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v75 = (*a3)[1];
  v76 = **a3;
  v74 = (*a3)[2];
  v89 = (*a3)[4];
  v84 = *((_QWORD *)*a4 + 1);
  v85 = *(_QWORD *)*a4;
  v83 = *((_QWORD *)*a4 + 2);
  v23 = **a5;
  v71 = (*a5)[1];
  v72 = (*a5)[2];
  v24 = (*a5)[4];
  v73 = (*a5)[3];
  v25 = ldexp(1.0, a7 + 10);
  v26 = exp2(-(double)(a7 + 10 + a8));
  __src = 0uLL;
  v95[0] = 0;
  v79 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  v28 = v26;
  v29 = *a10;
  v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    v92 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v92);
    *(float *)&__e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v79, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v33 = v32 * v28;
      v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v95[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v38 = v95[0] - __src.i64[0];
        if ((v95[0] - __src.i64[0]) >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v95, v39);
          v34 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v40 = 0;
        }
        v41 = (float *)&v40[4 * v36];
        *v41 = v33;
        v35 = v41 + 1;
        while (v34 != Float)
        {
          v42 = *((_DWORD *)v34 - 1);
          v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v95[0] = &v40[4 * v39];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  if (v23)
  {
    v43 = 0;
    v80 = -20 - a7;
    v44 = v25;
    v70 = v23;
    while (!v71)
    {
LABEL_90:
      if (++v43 == v70)
        goto LABEL_91;
    }
    v45 = 0;
    while (!v72)
    {
LABEL_89:
      if (++v45 == v71)
        goto LABEL_90;
    }
    v46 = 0;
    while (!v73)
    {
LABEL_88:
      if (++v46 == v72)
        goto LABEL_89;
    }
    v90 = 0;
    while (!v79)
    {
LABEL_87:
      if (++v90 == v73)
        goto LABEL_88;
    }
    v86 = 0;
    while (1)
    {
      if (v89)
      {
        v47 = 0;
        v48 = 0;
        v81 = 0;
        do
        {
          v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (v50 = a12, v47 != *((_QWORD *)a4[1] - 2)))
            v50 = *(unsigned __int8 *)(a2
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v52 = v51;
            v53 = ilogbf(v51);
            if (v53 <= -14)
              v54 = -14;
            else
              v54 = v53;
            if (v54 >= v80)
            {
              v55 = (int)llroundf((float)(v52 * (float)v50) * v44) + (uint64_t)v81;
              if (v55 <= 0x7FFFFFFF)
              {
                v56 = v55 < (uint64_t)0xFFFFFFFF80000000;
                if (v55 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v55) = -8388608;
                v81 = v55;
                v48 = 2 * v56;
              }
              else
              {
                v48 = 1;
                v81 = 2139095040;
              }
            }
            else
            {
              v48 = 0;
            }
          }
          ++v47;
        }
        while (v89 != v47);
        v57 = *(float *)(__src.i64[0] + 4 * v86);
        if (v48)
        {
          v58 = INFINITY;
          if (v48 == 2)
            v58 = -INFINITY;
          goto LABEL_73;
        }
        if (v81)
        {
          v58 = (double)v81;
LABEL_73:
          *(float *)&__e = 0.0;
          v60 = frexp(v58, &__e);
          v61 = ldexp(v60, 11);
          v59 = ldexp(round(v61), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        v57 = *(float *)(__src.i64[0] + 4 * v86);
      }
      v59 = 0.0;
LABEL_74:
      v62 = v57 * v59;
      v63 = 0.0;
      if (v62 != 0.0)
      {
        *(float *)&__e = 0.0;
        v64 = frexp(v62, &__e);
        v65 = ldexp(v64, 11);
        v63 = ldexp(round(v65), __e - 11);
      }
      *(float *)&__e = v63;
      v66 = *(_QWORD *)(a13 + 24);
      if (!v66)
        std::__throw_bad_function_call[abi:ne180100]();
      v67 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v66 + 48))(v66, &__e);
      if (v67 == INFINITY)
      {
        v68 = 127;
      }
      else if (v67 == -INFINITY)
      {
        v68 = 0x80;
      }
      else
      {
        v69 = llroundf(v67);
        if (v69 >= 127)
          v69 = 127;
        if (v69 <= -128)
          v68 = 0x80;
        else
          v68 = v69;
      }
      *(_BYTE *)(*a9
      if (v86 == v79)
        goto LABEL_87;
    }
  }
LABEL_91:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206910A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,signed char,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  MIL::Fp16 *Float;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  MIL::Fp16 *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  unint64_t v43;
  float v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  char v50;
  float v51;
  float v52;
  int v53;
  int v54;
  uint64_t v55;
  _BOOL4 v56;
  float v57;
  double v58;
  float v59;
  long double v60;
  double v61;
  float v62;
  float v63;
  long double v64;
  double v65;
  uint64_t v66;
  MIL::Fp16 *v67;
  float v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v79;
  int v80;
  int v81;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v89;
  uint64_t v90;
  __int16 v92;
  int __e;
  int64x2_t __src;
  _QWORD v95[4];

  v95[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v18 = v14 >> 3;
  if (v18 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v95, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v19 = *a4;
  v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v95, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  v21 = *a5;
  v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v95, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  v75 = (*a3)[1];
  v76 = **a3;
  v74 = (*a3)[2];
  v89 = (*a3)[4];
  v84 = *((_QWORD *)*a4 + 1);
  v85 = *(_QWORD *)*a4;
  v83 = *((_QWORD *)*a4 + 2);
  v23 = **a5;
  v71 = (*a5)[1];
  v72 = (*a5)[2];
  v24 = (*a5)[4];
  v73 = (*a5)[3];
  v25 = ldexp(1.0, a7 + 10);
  v26 = exp2(-(double)(a7 + 10 + a8));
  __src = 0uLL;
  v95[0] = 0;
  v79 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  v28 = v26;
  v29 = *a10;
  v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    v92 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v92);
    *(float *)&__e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v79, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v33 = v32 * v28;
      v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v95[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v38 = v95[0] - __src.i64[0];
        if ((v95[0] - __src.i64[0]) >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v95, v39);
          v34 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v40 = 0;
        }
        v41 = (float *)&v40[4 * v36];
        *v41 = v33;
        v35 = v41 + 1;
        while (v34 != Float)
        {
          v42 = *((_DWORD *)v34 - 1);
          v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v95[0] = &v40[4 * v39];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  if (v23)
  {
    v43 = 0;
    v80 = -20 - a7;
    v44 = v25;
    v70 = v23;
    while (!v71)
    {
LABEL_79:
      if (++v43 == v70)
        goto LABEL_80;
    }
    v45 = 0;
    while (!v72)
    {
LABEL_78:
      if (++v45 == v71)
        goto LABEL_79;
    }
    v46 = 0;
    while (!v73)
    {
LABEL_77:
      if (++v46 == v72)
        goto LABEL_78;
    }
    v90 = 0;
    while (!v79)
    {
LABEL_76:
      if (++v90 == v73)
        goto LABEL_77;
    }
    v86 = 0;
    while (1)
    {
      if (v89)
      {
        v47 = 0;
        v48 = 0;
        v81 = 0;
        do
        {
          v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (v50 = a12, v47 != *((_QWORD *)a4[1] - 2)))
            v50 = *(_BYTE *)(a2
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v52 = v51;
            v53 = ilogbf(v51);
            if (v53 <= -14)
              v54 = -14;
            else
              v54 = v53;
            if (v54 >= v80)
            {
              v55 = (int)llroundf((float)(v52 * (float)v50) * v44) + (uint64_t)v81;
              if (v55 <= 0x7FFFFFFF)
              {
                v56 = v55 < (uint64_t)0xFFFFFFFF80000000;
                if (v55 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v55) = -8388608;
                v81 = v55;
                v48 = 2 * v56;
              }
              else
              {
                v48 = 1;
                v81 = 2139095040;
              }
            }
            else
            {
              v48 = 0;
            }
          }
          ++v47;
        }
        while (v89 != v47);
        v57 = *(float *)(__src.i64[0] + 4 * v86);
        if (v48)
        {
          v58 = INFINITY;
          if (v48 == 2)
            v58 = -INFINITY;
          goto LABEL_71;
        }
        if (v81)
        {
          v58 = (double)v81;
LABEL_71:
          *(float *)&__e = 0.0;
          v60 = frexp(v58, &__e);
          v61 = ldexp(v60, 11);
          v59 = ldexp(round(v61), __e - 11);
          goto LABEL_72;
        }
      }
      else
      {
        v57 = *(float *)(__src.i64[0] + 4 * v86);
      }
      v59 = 0.0;
LABEL_72:
      v62 = v57 * v59;
      v63 = 0.0;
      if (v62 != 0.0)
      {
        *(float *)&__e = 0.0;
        v64 = frexp(v62, &__e);
        v65 = ldexp(v64, 11);
        v63 = ldexp(round(v65), __e - 11);
      }
      *(float *)&__e = v63;
      v66 = *(_QWORD *)(a13 + 24);
      if (!v66)
        std::__throw_bad_function_call[abi:ne180100]();
      v67 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v66 + 48))(v66, &__e);
      v69 = MIL::Fp16::FromFloat(v67, v68);
      *(_WORD *)(*a9
               + 2
      if (v86 == v79)
        goto LABEL_76;
    }
  }
LABEL_80:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_2069111F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;
  void *v21;

  v20 = *(void **)(v18 - 160);
  if (v20)
  {
    *(_QWORD *)(v18 - 152) = v20;
    operator delete(v20);
  }
  v21 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,signed char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  MIL::Fp16 *Float;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  MIL::Fp16 *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  unint64_t v43;
  float v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  char v50;
  float v51;
  float v52;
  int v53;
  int v54;
  uint64_t v55;
  _BOOL4 v56;
  float v57;
  double v58;
  float v59;
  long double v60;
  double v61;
  float v62;
  float v63;
  long double v64;
  double v65;
  uint64_t v66;
  float v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v79;
  int v80;
  int v81;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v89;
  uint64_t v90;
  __int16 v92;
  int __e;
  int64x2_t __src;
  _QWORD v95[4];

  v95[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v18 = v14 >> 3;
  if (v18 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v95, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v19 = *a4;
  v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v95, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  v21 = *a5;
  v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v95, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v75 = (*a3)[1];
  v76 = **a3;
  v74 = (*a3)[2];
  v89 = (*a3)[4];
  v84 = *((_QWORD *)*a4 + 1);
  v85 = *(_QWORD *)*a4;
  v83 = *((_QWORD *)*a4 + 2);
  v23 = **a5;
  v71 = (*a5)[1];
  v72 = (*a5)[2];
  v24 = (*a5)[4];
  v73 = (*a5)[3];
  v25 = ldexp(1.0, a7 + 10);
  v26 = exp2(-(double)(a7 + 10 + a8));
  __src = 0uLL;
  v95[0] = 0;
  v79 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  v28 = v26;
  v29 = *a10;
  v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    v92 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v92);
    *(float *)&__e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v79, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v33 = v32 * v28;
      v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v95[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v38 = v95[0] - __src.i64[0];
        if ((v95[0] - __src.i64[0]) >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v95, v39);
          v34 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v40 = 0;
        }
        v41 = (float *)&v40[4 * v36];
        *v41 = v33;
        v35 = v41 + 1;
        while (v34 != Float)
        {
          v42 = *((_DWORD *)v34 - 1);
          v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v95[0] = &v40[4 * v39];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  if (v23)
  {
    v43 = 0;
    v80 = -20 - a7;
    v44 = v25;
    v70 = v23;
    while (!v71)
    {
LABEL_88:
      if (++v43 == v70)
        goto LABEL_89;
    }
    v45 = 0;
    while (!v72)
    {
LABEL_87:
      if (++v45 == v71)
        goto LABEL_88;
    }
    v46 = 0;
    while (!v73)
    {
LABEL_86:
      if (++v46 == v72)
        goto LABEL_87;
    }
    v90 = 0;
    while (!v79)
    {
LABEL_85:
      if (++v90 == v73)
        goto LABEL_86;
    }
    v86 = 0;
    while (1)
    {
      if (v89)
      {
        v47 = 0;
        v48 = 0;
        v81 = 0;
        do
        {
          v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (v50 = a12, v47 != *((_QWORD *)a4[1] - 2)))
            v50 = *(_BYTE *)(a2
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v52 = v51;
            v53 = ilogbf(v51);
            if (v53 <= -14)
              v54 = -14;
            else
              v54 = v53;
            if (v54 >= v80)
            {
              v55 = (int)llroundf((float)(v52 * (float)v50) * v44) + (uint64_t)v81;
              if (v55 <= 0x7FFFFFFF)
              {
                v56 = v55 < (uint64_t)0xFFFFFFFF80000000;
                if (v55 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v55) = -8388608;
                v81 = v55;
                v48 = 2 * v56;
              }
              else
              {
                v48 = 1;
                v81 = 2139095040;
              }
            }
            else
            {
              v48 = 0;
            }
          }
          ++v47;
        }
        while (v89 != v47);
        v57 = *(float *)(__src.i64[0] + 4 * v86);
        if (v48)
        {
          v58 = INFINITY;
          if (v48 == 2)
            v58 = -INFINITY;
          goto LABEL_73;
        }
        if (v81)
        {
          v58 = (double)v81;
LABEL_73:
          *(float *)&__e = 0.0;
          v60 = frexp(v58, &__e);
          v61 = ldexp(v60, 11);
          v59 = ldexp(round(v61), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        v57 = *(float *)(__src.i64[0] + 4 * v86);
      }
      v59 = 0.0;
LABEL_74:
      v62 = v57 * v59;
      v63 = 0.0;
      if (v62 != 0.0)
      {
        *(float *)&__e = 0.0;
        v64 = frexp(v62, &__e);
        v65 = ldexp(v64, 11);
        v63 = ldexp(round(v65), __e - 11);
      }
      *(float *)&__e = v63;
      v66 = *(_QWORD *)(a13 + 24);
      if (!v66)
        std::__throw_bad_function_call[abi:ne180100]();
      v67 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v66 + 48))(v66, &__e);
      if (v67 == INFINITY)
      {
        LOBYTE(v68) = -1;
      }
      else if (v67 == -INFINITY)
      {
        LOBYTE(v68) = 0;
      }
      else
      {
        v69 = llroundf(v67);
        if (v69 >= 255)
          v69 = 255;
        v68 = v69 & ~(v69 >> 31);
      }
      *(_BYTE *)(*a9
      if (v86 == v79)
        goto LABEL_85;
    }
  }
LABEL_89:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_2069119D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,signed char,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  MIL::Fp16 *Float;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  MIL::Fp16 *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  unint64_t v43;
  float v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  char v50;
  float v51;
  float v52;
  int v53;
  int v54;
  uint64_t v55;
  _BOOL4 v56;
  float v57;
  double v58;
  float v59;
  long double v60;
  double v61;
  float v62;
  float v63;
  long double v64;
  double v65;
  uint64_t v66;
  float v67;
  char v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v79;
  int v80;
  int v81;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v89;
  uint64_t v90;
  __int16 v92;
  int __e;
  int64x2_t __src;
  _QWORD v95[4];

  v95[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v18 = v14 >> 3;
  if (v18 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v95, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v19 = *a4;
  v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v95, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  v21 = *a5;
  v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v95, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v75 = (*a3)[1];
  v76 = **a3;
  v74 = (*a3)[2];
  v89 = (*a3)[4];
  v84 = *((_QWORD *)*a4 + 1);
  v85 = *(_QWORD *)*a4;
  v83 = *((_QWORD *)*a4 + 2);
  v23 = **a5;
  v71 = (*a5)[1];
  v72 = (*a5)[2];
  v24 = (*a5)[4];
  v73 = (*a5)[3];
  v25 = ldexp(1.0, a7 + 10);
  v26 = exp2(-(double)(a7 + 10 + a8));
  __src = 0uLL;
  v95[0] = 0;
  v79 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  v28 = v26;
  v29 = *a10;
  v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    v92 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v92);
    *(float *)&__e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v79, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v33 = v32 * v28;
      v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v95[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v38 = v95[0] - __src.i64[0];
        if ((v95[0] - __src.i64[0]) >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v95, v39);
          v34 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v40 = 0;
        }
        v41 = (float *)&v40[4 * v36];
        *v41 = v33;
        v35 = v41 + 1;
        while (v34 != Float)
        {
          v42 = *((_DWORD *)v34 - 1);
          v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v95[0] = &v40[4 * v39];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  if (v23)
  {
    v43 = 0;
    v80 = -20 - a7;
    v44 = v25;
    v70 = v23;
    while (!v71)
    {
LABEL_90:
      if (++v43 == v70)
        goto LABEL_91;
    }
    v45 = 0;
    while (!v72)
    {
LABEL_89:
      if (++v45 == v71)
        goto LABEL_90;
    }
    v46 = 0;
    while (!v73)
    {
LABEL_88:
      if (++v46 == v72)
        goto LABEL_89;
    }
    v90 = 0;
    while (!v79)
    {
LABEL_87:
      if (++v90 == v73)
        goto LABEL_88;
    }
    v86 = 0;
    while (1)
    {
      if (v89)
      {
        v47 = 0;
        v48 = 0;
        v81 = 0;
        do
        {
          v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (v50 = a12, v47 != *((_QWORD *)a4[1] - 2)))
            v50 = *(_BYTE *)(a2
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v52 = v51;
            v53 = ilogbf(v51);
            if (v53 <= -14)
              v54 = -14;
            else
              v54 = v53;
            if (v54 >= v80)
            {
              v55 = (int)llroundf((float)(v52 * (float)v50) * v44) + (uint64_t)v81;
              if (v55 <= 0x7FFFFFFF)
              {
                v56 = v55 < (uint64_t)0xFFFFFFFF80000000;
                if (v55 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v55) = -8388608;
                v81 = v55;
                v48 = 2 * v56;
              }
              else
              {
                v48 = 1;
                v81 = 2139095040;
              }
            }
            else
            {
              v48 = 0;
            }
          }
          ++v47;
        }
        while (v89 != v47);
        v57 = *(float *)(__src.i64[0] + 4 * v86);
        if (v48)
        {
          v58 = INFINITY;
          if (v48 == 2)
            v58 = -INFINITY;
          goto LABEL_73;
        }
        if (v81)
        {
          v58 = (double)v81;
LABEL_73:
          *(float *)&__e = 0.0;
          v60 = frexp(v58, &__e);
          v61 = ldexp(v60, 11);
          v59 = ldexp(round(v61), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        v57 = *(float *)(__src.i64[0] + 4 * v86);
      }
      v59 = 0.0;
LABEL_74:
      v62 = v57 * v59;
      v63 = 0.0;
      if (v62 != 0.0)
      {
        *(float *)&__e = 0.0;
        v64 = frexp(v62, &__e);
        v65 = ldexp(v64, 11);
        v63 = ldexp(round(v65), __e - 11);
      }
      *(float *)&__e = v63;
      v66 = *(_QWORD *)(a13 + 24);
      if (!v66)
        std::__throw_bad_function_call[abi:ne180100]();
      v67 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v66 + 48))(v66, &__e);
      if (v67 == INFINITY)
      {
        v68 = 127;
      }
      else if (v67 == -INFINITY)
      {
        v68 = 0x80;
      }
      else
      {
        v69 = llroundf(v67);
        if (v69 >= 127)
          v69 = 127;
        if (v69 <= -128)
          v68 = 0x80;
        else
          v68 = v69;
      }
      *(_BYTE *)(*a9
      if (v86 == v79)
        goto LABEL_87;
    }
  }
LABEL_91:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_2069121B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, float **a10, char a11, int a12, __int16 a13, uint64_t a14)
{
  unint64_t *v14;
  uint64_t v15;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  MIL::Fp16 *Float;
  float v29;
  float *v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  MIL::Fp16 *v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float *v42;
  int v43;
  unint64_t v44;
  float v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  __int16 v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  int v58;
  uint64_t v59;
  _BOOL4 v60;
  float v61;
  double v62;
  float v63;
  long double v64;
  double v65;
  float v66;
  float v67;
  long double v68;
  double v69;
  uint64_t v70;
  MIL::Fp16 *v71;
  float v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v83;
  int v84;
  int v85;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v92;
  uint64_t v93;
  __int16 v95;
  int __e;
  int64x2_t __src;
  _QWORD v98[4];

  v98[2] = *MEMORY[0x24BDAC8D0];
  v14 = *a3;
  v15 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v15 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v19 = v15 >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v14 + 1), __src.i8, (char *)v98, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v14 + 1), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a4;
  v21 = (a4[1] - *a4) >> 3;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, (char *)v98, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, &__src.i8[8], 1);
  }
  v22 = *a5;
  v23 = a5[1] - *a5;
  if (v23 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, (char *)v98, 2);
  }
  else if (v23 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  v79 = (*a3)[1];
  v80 = **a3;
  v92 = (*a3)[4];
  v88 = *((_QWORD *)*a4 + 1);
  v89 = *(_QWORD *)*a4;
  v87 = *((_QWORD *)*a4 + 2);
  v24 = **a5;
  v75 = (*a5)[1];
  v76 = (*a5)[2];
  v25 = (*a5)[4];
  v77 = (*a5)[3];
  v78 = (*a3)[2];
  v26 = ldexp(1.0, a7 + 10);
  v27 = exp2(-(double)(a7 + 10 + a8));
  __src = 0uLL;
  v98[0] = 0;
  v83 = v25;
  std::vector<float>::reserve((void **)&__src, v25);
  v29 = v27;
  v30 = *a10;
  v31 = a10[1];
  if ((char *)v31 - (char *)*a10 == 4)
  {
    v95 = MIL::Fp16::FromFloat(Float, *v30);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v95);
    *(float *)&__e = v32 * v29;
    std::vector<float>::assign((char **)&__src, v83, &__e);
  }
  else
  {
    for (; v30 != v31; ++v30)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v30);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v34 = v33 * v29;
      v35 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v98[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v37 = (__src.i64[1] - __src.i64[0]) >> 2;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v39 = v98[0] - __src.i64[0];
        if ((v98[0] - __src.i64[0]) >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v98, v40);
          v35 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v41 = 0;
        }
        v42 = (float *)&v41[4 * v37];
        *v42 = v34;
        v36 = v42 + 1;
        while (v35 != Float)
        {
          v43 = *((_DWORD *)v35 - 1);
          v35 = (MIL::Fp16 *)((char *)v35 - 4);
          *((_DWORD *)v42-- - 1) = v43;
        }
        __src.i64[0] = (uint64_t)v42;
        __src.i64[1] = (uint64_t)v36;
        v98[0] = &v41[4 * v40];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v34;
        v36 = (float *)((char *)v35 + 4);
      }
      __src.i64[1] = (uint64_t)v36;
    }
  }
  if (v24)
  {
    v44 = 0;
    v84 = -20 - a7;
    v45 = v26;
    v74 = v24;
    while (!v75)
    {
LABEL_79:
      if (++v44 == v74)
        goto LABEL_80;
    }
    v46 = 0;
    while (!v76)
    {
LABEL_78:
      if (++v46 == v75)
        goto LABEL_79;
    }
    v47 = 0;
    while (!v77)
    {
LABEL_77:
      if (++v47 == v76)
        goto LABEL_78;
    }
    v93 = 0;
    while (!v83)
    {
LABEL_76:
      if (++v93 == v77)
        goto LABEL_77;
    }
    v48 = 0;
    while (1)
    {
      if (v92)
      {
        v49 = 0;
        v50 = 0;
        v85 = 0;
        do
        {
          v51 = *(unsigned __int8 *)(a1
          if (!a11 || (v52 = a13, v49 != *((_QWORD *)a4[1] - 2)))
            v52 = *(_WORD *)(a2
                           + 2
          if (!v50)
          {
            LOWORD(__e) = v52;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v54 = v53;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v56 = v54 - v55;
            v57 = ilogbf(v56);
            if (v57 <= -14)
              v58 = -14;
            else
              v58 = v57;
            if (v58 >= v84)
            {
              v59 = (int)llroundf((float)(v56 * (float)v51) * v45) + (uint64_t)v85;
              if (v59 <= 0x7FFFFFFF)
              {
                v60 = v59 < (uint64_t)0xFFFFFFFF80000000;
                if (v59 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v59) = -8388608;
                v85 = v59;
                v50 = 2 * v60;
              }
              else
              {
                v50 = 1;
                v85 = 2139095040;
              }
            }
            else
            {
              v50 = 0;
            }
          }
          ++v49;
        }
        while (v92 != v49);
        v61 = *(float *)(__src.i64[0] + 4 * v48);
        if (v50)
        {
          v62 = INFINITY;
          if (v50 == 2)
            v62 = -INFINITY;
          goto LABEL_71;
        }
        if (v85)
        {
          v62 = (double)v85;
LABEL_71:
          *(float *)&__e = 0.0;
          v64 = frexp(v62, &__e);
          v65 = ldexp(v64, 11);
          v63 = ldexp(round(v65), __e - 11);
          goto LABEL_72;
        }
      }
      else
      {
        v61 = *(float *)(__src.i64[0] + 4 * v48);
      }
      v63 = 0.0;
LABEL_72:
      v66 = v61 * v63;
      v67 = 0.0;
      if (v66 != 0.0)
      {
        *(float *)&__e = 0.0;
        v68 = frexp(v66, &__e);
        v69 = ldexp(v68, 11);
        v67 = ldexp(round(v69), __e - 11);
      }
      *(float *)&__e = v67;
      v70 = *(_QWORD *)(a14 + 24);
      if (!v70)
        std::__throw_bad_function_call[abi:ne180100]();
      v71 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v70 + 48))(v70, &__e);
      v73 = MIL::Fp16::FromFloat(v71, v72);
      *(_WORD *)(*a9
               + 2
      if (v48 == v83)
        goto LABEL_76;
    }
  }
LABEL_80:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206912950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  void *v19;
  void *v20;

  v19 = *(void **)(v17 - 160);
  if (v19)
  {
    *(_QWORD *)(v17 - 152) = v19;
    operator delete(v19);
  }
  v20 = *(void **)a17;
  if (*(_QWORD *)a17)
  {
    *(_QWORD *)(a17 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, int a12, __int16 a13, __int16 a14, uint64_t a15)
{
  unint64_t *v15;
  uint64_t v16;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  MIL::Fp16 *Float;
  float v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  MIL::Fp16 *v36;
  float *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  float *v43;
  int v44;
  unint64_t v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  __int16 v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int v58;
  int v59;
  uint64_t v60;
  _BOOL4 v61;
  float v62;
  double v63;
  float v64;
  long double v65;
  double v66;
  float v67;
  float v68;
  long double v69;
  double v70;
  uint64_t v71;
  float v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v84;
  int v85;
  int v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v93;
  uint64_t v94;
  __int16 v96;
  int __e;
  int64x2_t __src;
  _QWORD v99[4];

  v99[2] = *MEMORY[0x24BDAC8D0];
  v15 = *a3;
  v16 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v16 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v20 = v16 >> 3;
  if (v20 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, (char *)v99, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, &__src.i8[8], 1);
  }
  v21 = *a4;
  v22 = (a4[1] - *a4) >> 3;
  if (v22 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, (char *)v99, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, &__src.i8[8], 1);
  }
  v23 = *a5;
  v24 = a5[1] - *a5;
  if (v24 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, (char *)v99, 2);
  }
  else if (v24 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v80 = (*a3)[1];
  v81 = **a3;
  v93 = (*a3)[4];
  v89 = *((_QWORD *)*a4 + 1);
  v90 = *(_QWORD *)*a4;
  v88 = *((_QWORD *)*a4 + 2);
  v25 = **a5;
  v76 = (*a5)[1];
  v77 = (*a5)[2];
  v26 = (*a5)[4];
  v78 = (*a5)[3];
  v79 = (*a3)[2];
  v27 = ldexp(1.0, a7 + 10);
  v28 = exp2(-(double)(a7 + 10 + a8));
  __src = 0uLL;
  v99[0] = 0;
  v84 = v26;
  std::vector<float>::reserve((void **)&__src, v26);
  v30 = v28;
  v31 = *a10;
  v32 = a10[1];
  if ((char *)v32 - (char *)*a10 == 4)
  {
    v96 = MIL::Fp16::FromFloat(Float, *v31);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v96);
    *(float *)&__e = v33 * v30;
    std::vector<float>::assign((char **)&__src, v84, &__e);
  }
  else
  {
    for (; v31 != v32; ++v31)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v31);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v35 = v34 * v30;
      v36 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v99[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v38 = (__src.i64[1] - __src.i64[0]) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v40 = v99[0] - __src.i64[0];
        if ((v99[0] - __src.i64[0]) >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v99, v41);
          v36 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v42 = 0;
        }
        v43 = (float *)&v42[4 * v38];
        *v43 = v35;
        v37 = v43 + 1;
        while (v36 != Float)
        {
          v44 = *((_DWORD *)v36 - 1);
          v36 = (MIL::Fp16 *)((char *)v36 - 4);
          *((_DWORD *)v43-- - 1) = v44;
        }
        __src.i64[0] = (uint64_t)v43;
        __src.i64[1] = (uint64_t)v37;
        v99[0] = &v42[4 * v41];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v35;
        v37 = (float *)((char *)v36 + 4);
      }
      __src.i64[1] = (uint64_t)v37;
    }
  }
  if (v25)
  {
    v45 = 0;
    v85 = -20 - a7;
    v46 = v27;
    v75 = v25;
    while (!v76)
    {
LABEL_88:
      if (++v45 == v75)
        goto LABEL_89;
    }
    v47 = 0;
    while (!v77)
    {
LABEL_87:
      if (++v47 == v76)
        goto LABEL_88;
    }
    v48 = 0;
    while (!v78)
    {
LABEL_86:
      if (++v48 == v77)
        goto LABEL_87;
    }
    v94 = 0;
    while (!v84)
    {
LABEL_85:
      if (++v94 == v78)
        goto LABEL_86;
    }
    v49 = 0;
    while (1)
    {
      if (v93)
      {
        v50 = 0;
        v51 = 0;
        v86 = 0;
        do
        {
          v52 = *(unsigned __int8 *)(a1
          if (!a11 || (v53 = a13, v50 != *((_QWORD *)a4[1] - 2)))
            v53 = *(_WORD *)(a2
                           + 2
          if (!v51)
          {
            LOWORD(__e) = v53;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v55 = v54;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v57 = v55 - v56;
            v58 = ilogbf(v57);
            if (v58 <= -14)
              v59 = -14;
            else
              v59 = v58;
            if (v59 >= v85)
            {
              v60 = (int)llroundf((float)(v57 * (float)v52) * v46) + (uint64_t)v86;
              if (v60 <= 0x7FFFFFFF)
              {
                v61 = v60 < (uint64_t)0xFFFFFFFF80000000;
                if (v60 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v60) = -8388608;
                v86 = v60;
                v51 = 2 * v61;
              }
              else
              {
                v51 = 1;
                v86 = 2139095040;
              }
            }
            else
            {
              v51 = 0;
            }
          }
          ++v50;
        }
        while (v93 != v50);
        v62 = *(float *)(__src.i64[0] + 4 * v49);
        if (v51)
        {
          v63 = INFINITY;
          if (v51 == 2)
            v63 = -INFINITY;
          goto LABEL_73;
        }
        if (v86)
        {
          v63 = (double)v86;
LABEL_73:
          *(float *)&__e = 0.0;
          v65 = frexp(v63, &__e);
          v66 = ldexp(v65, 11);
          v64 = ldexp(round(v66), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        v62 = *(float *)(__src.i64[0] + 4 * v49);
      }
      v64 = 0.0;
LABEL_74:
      v67 = v62 * v64;
      v68 = 0.0;
      if (v67 != 0.0)
      {
        *(float *)&__e = 0.0;
        v69 = frexp(v67, &__e);
        v70 = ldexp(v69, 11);
        v68 = ldexp(round(v70), __e - 11);
      }
      *(float *)&__e = v68;
      v71 = *(_QWORD *)(a15 + 24);
      if (!v71)
        std::__throw_bad_function_call[abi:ne180100]();
      v72 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v71 + 48))(v71, &__e);
      if (v72 == INFINITY)
      {
        LOBYTE(v73) = -1;
      }
      else if (v72 == -INFINITY)
      {
        LOBYTE(v73) = 0;
      }
      else
      {
        v74 = llroundf(v72);
        if (v74 >= 255)
          v74 = 255;
        v73 = v74 & ~(v74 >> 31);
      }
      *(_BYTE *)(*a9
      if (v49 == v84)
        goto LABEL_85;
    }
  }
LABEL_89:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206913130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v18;

  v18 = *(void **)a17;
  if (*(_QWORD *)a17)
  {
    *(_QWORD *)(a17 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, int a12, __int16 a13, __int16 a14, uint64_t a15)
{
  unint64_t *v15;
  uint64_t v16;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  MIL::Fp16 *Float;
  float v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  MIL::Fp16 *v36;
  float *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  float *v43;
  int v44;
  unint64_t v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  __int16 v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int v58;
  int v59;
  uint64_t v60;
  _BOOL4 v61;
  float v62;
  double v63;
  float v64;
  long double v65;
  double v66;
  float v67;
  float v68;
  long double v69;
  double v70;
  uint64_t v71;
  float v72;
  char v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v84;
  int v85;
  int v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v93;
  uint64_t v94;
  __int16 v96;
  int __e;
  int64x2_t __src;
  _QWORD v99[4];

  v99[2] = *MEMORY[0x24BDAC8D0];
  v15 = *a3;
  v16 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v16 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v20 = v16 >> 3;
  if (v20 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, (char *)v99, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, &__src.i8[8], 1);
  }
  v21 = *a4;
  v22 = (a4[1] - *a4) >> 3;
  if (v22 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, (char *)v99, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, &__src.i8[8], 1);
  }
  v23 = *a5;
  v24 = a5[1] - *a5;
  if (v24 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, (char *)v99, 2);
  }
  else if (v24 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v80 = (*a3)[1];
  v81 = **a3;
  v93 = (*a3)[4];
  v89 = *((_QWORD *)*a4 + 1);
  v90 = *(_QWORD *)*a4;
  v88 = *((_QWORD *)*a4 + 2);
  v25 = **a5;
  v76 = (*a5)[1];
  v77 = (*a5)[2];
  v26 = (*a5)[4];
  v78 = (*a5)[3];
  v79 = (*a3)[2];
  v27 = ldexp(1.0, a7 + 10);
  v28 = exp2(-(double)(a7 + 10 + a8));
  __src = 0uLL;
  v99[0] = 0;
  v84 = v26;
  std::vector<float>::reserve((void **)&__src, v26);
  v30 = v28;
  v31 = *a10;
  v32 = a10[1];
  if ((char *)v32 - (char *)*a10 == 4)
  {
    v96 = MIL::Fp16::FromFloat(Float, *v31);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v96);
    *(float *)&__e = v33 * v30;
    std::vector<float>::assign((char **)&__src, v84, &__e);
  }
  else
  {
    for (; v31 != v32; ++v31)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v31);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v35 = v34 * v30;
      v36 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v99[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v38 = (__src.i64[1] - __src.i64[0]) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v40 = v99[0] - __src.i64[0];
        if ((v99[0] - __src.i64[0]) >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v99, v41);
          v36 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v42 = 0;
        }
        v43 = (float *)&v42[4 * v38];
        *v43 = v35;
        v37 = v43 + 1;
        while (v36 != Float)
        {
          v44 = *((_DWORD *)v36 - 1);
          v36 = (MIL::Fp16 *)((char *)v36 - 4);
          *((_DWORD *)v43-- - 1) = v44;
        }
        __src.i64[0] = (uint64_t)v43;
        __src.i64[1] = (uint64_t)v37;
        v99[0] = &v42[4 * v41];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v35;
        v37 = (float *)((char *)v36 + 4);
      }
      __src.i64[1] = (uint64_t)v37;
    }
  }
  if (v25)
  {
    v45 = 0;
    v85 = -20 - a7;
    v46 = v27;
    v75 = v25;
    while (!v76)
    {
LABEL_90:
      if (++v45 == v75)
        goto LABEL_91;
    }
    v47 = 0;
    while (!v77)
    {
LABEL_89:
      if (++v47 == v76)
        goto LABEL_90;
    }
    v48 = 0;
    while (!v78)
    {
LABEL_88:
      if (++v48 == v77)
        goto LABEL_89;
    }
    v94 = 0;
    while (!v84)
    {
LABEL_87:
      if (++v94 == v78)
        goto LABEL_88;
    }
    v49 = 0;
    while (1)
    {
      if (v93)
      {
        v50 = 0;
        v51 = 0;
        v86 = 0;
        do
        {
          v52 = *(unsigned __int8 *)(a1
          if (!a11 || (v53 = a13, v50 != *((_QWORD *)a4[1] - 2)))
            v53 = *(_WORD *)(a2
                           + 2
          if (!v51)
          {
            LOWORD(__e) = v53;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v55 = v54;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v57 = v55 - v56;
            v58 = ilogbf(v57);
            if (v58 <= -14)
              v59 = -14;
            else
              v59 = v58;
            if (v59 >= v85)
            {
              v60 = (int)llroundf((float)(v57 * (float)v52) * v46) + (uint64_t)v86;
              if (v60 <= 0x7FFFFFFF)
              {
                v61 = v60 < (uint64_t)0xFFFFFFFF80000000;
                if (v60 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v60) = -8388608;
                v86 = v60;
                v51 = 2 * v61;
              }
              else
              {
                v51 = 1;
                v86 = 2139095040;
              }
            }
            else
            {
              v51 = 0;
            }
          }
          ++v50;
        }
        while (v93 != v50);
        v62 = *(float *)(__src.i64[0] + 4 * v49);
        if (v51)
        {
          v63 = INFINITY;
          if (v51 == 2)
            v63 = -INFINITY;
          goto LABEL_73;
        }
        if (v86)
        {
          v63 = (double)v86;
LABEL_73:
          *(float *)&__e = 0.0;
          v65 = frexp(v63, &__e);
          v66 = ldexp(v65, 11);
          v64 = ldexp(round(v66), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        v62 = *(float *)(__src.i64[0] + 4 * v49);
      }
      v64 = 0.0;
LABEL_74:
      v67 = v62 * v64;
      v68 = 0.0;
      if (v67 != 0.0)
      {
        *(float *)&__e = 0.0;
        v69 = frexp(v67, &__e);
        v70 = ldexp(v69, 11);
        v68 = ldexp(round(v70), __e - 11);
      }
      *(float *)&__e = v68;
      v71 = *(_QWORD *)(a15 + 24);
      if (!v71)
        std::__throw_bad_function_call[abi:ne180100]();
      v72 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v71 + 48))(v71, &__e);
      if (v72 == INFINITY)
      {
        v73 = 127;
      }
      else if (v72 == -INFINITY)
      {
        v73 = 0x80;
      }
      else
      {
        v74 = llroundf(v72);
        if (v74 >= 127)
          v74 = 127;
        if (v74 <= -128)
          v73 = 0x80;
        else
          v73 = v74;
      }
      *(_BYTE *)(*a9
      if (v49 == v84)
        goto LABEL_87;
    }
  }
LABEL_91:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206913914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v18;

  v18 = *(void **)a17;
  if (*(_QWORD *)a17)
  {
    *(_QWORD *)(a17 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,unsigned char,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  MIL::Fp16 *Float;
  float v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  MIL::Fp16 *v33;
  float *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  float *v40;
  int v41;
  unint64_t v42;
  float v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  float v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  float v57;
  float v58;
  long double v59;
  double v60;
  uint64_t v61;
  MIL::Fp16 *v62;
  float v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v73;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v79;
  unint64_t v82;
  uint64_t v83;
  __int16 v85;
  int v86;
  int64x2_t __src;
  _QWORD v88[4];

  v88[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v17 = v14 >> 3;
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v18 = *a4;
  v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a5;
  v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  v69 = (*a3)[1];
  v70 = **a3;
  v68 = (*a3)[2];
  v82 = (*a3)[4];
  v76 = *((_QWORD *)*a4 + 1);
  v77 = *(_QWORD *)*a4;
  v75 = *((_QWORD *)*a4 + 2);
  v22 = **a5;
  v65 = (*a5)[1];
  v66 = (*a5)[2];
  v23 = (*a5)[4];
  v67 = (*a5)[3];
  v24 = ldexp(1.0, a7);
  v25 = exp2(-(double)(a8 + a7));
  __src = 0uLL;
  v88[0] = 0;
  v73 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  v27 = v25;
  v28 = *a10;
  v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    v85 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&v86 = v30 * v27;
    std::vector<float>::assign((char **)&__src, v73, &v86);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(v86) = MIL::Fp16::FromFloat(Float, *v28);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v86);
      v32 = v31 * v27;
      v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v37 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v38);
          v33 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v39 = 0;
        }
        v40 = (float *)&v39[4 * v35];
        *v40 = v32;
        v34 = v40 + 1;
        while (v33 != Float)
        {
          v41 = *((_DWORD *)v33 - 1);
          v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v88[0] = &v39[4 * v38];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  if (v22)
  {
    v42 = 0;
    v43 = v24;
    while (!v65)
    {
LABEL_76:
      if (++v42 == v22)
        goto LABEL_77;
    }
    v44 = 0;
    while (!v66)
    {
LABEL_75:
      if (++v44 == v65)
        goto LABEL_76;
    }
    v45 = 0;
    while (!v67)
    {
LABEL_74:
      if (++v45 == v66)
        goto LABEL_75;
    }
    v83 = 0;
    while (!v73)
    {
LABEL_73:
      if (++v83 == v67)
        goto LABEL_74;
    }
    v79 = 0;
    while (1)
    {
      if (v82)
      {
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v49 = *(unsigned __int8 *)(a1
          if (!a11 || (v50 = a12, v46 != *((_QWORD *)a4[1] - 2)))
            v50 = *(unsigned __int8 *)(a2
          if (!v47 && a7 >= -20)
          {
            v51 = (int)llroundf((float)((float)v49 * (float)v50) * v43) + (uint64_t)v48;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000)
                v48 = v51;
              else
                v48 = -8388608;
              v47 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              v47 = 1;
              v48 = 2139095040;
            }
          }
          ++v46;
        }
        while (v82 != v46);
        v52 = *(float *)(__src.i64[0] + 4 * v79);
        if (v47)
        {
          v53 = INFINITY;
          if (v47 == 2)
            v53 = -INFINITY;
          goto LABEL_68;
        }
        if (v48)
        {
          v53 = (double)v48;
LABEL_68:
          *(float *)&v86 = 0.0;
          v55 = frexp(v53, &v86);
          v56 = ldexp(v55, 11);
          v54 = ldexp(round(v56), v86 - 11);
          goto LABEL_69;
        }
      }
      else
      {
        v52 = *(float *)(__src.i64[0] + 4 * v79);
      }
      v54 = 0.0;
LABEL_69:
      v57 = v52 * v54;
      v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&v86 = 0.0;
        v59 = frexp(v57, &v86);
        v60 = ldexp(v59, 11);
        v58 = ldexp(round(v60), v86 - 11);
      }
      *(float *)&v86 = v58;
      v61 = *(_QWORD *)(a13 + 24);
      if (!v61)
        std::__throw_bad_function_call[abi:ne180100]();
      v62 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v61 + 48))(v61, &v86);
      v64 = MIL::Fp16::FromFloat(v62, v63);
      *(_WORD *)(*a9
               + 2
      if (v79 == v73)
        goto LABEL_73;
    }
  }
LABEL_77:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206914070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;
  void *v21;

  v20 = *(void **)(v18 - 160);
  if (v20)
  {
    *(_QWORD *)(v18 - 152) = v20;
    operator delete(v20);
  }
  v21 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,unsigned char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  MIL::Fp16 *Float;
  float v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  MIL::Fp16 *v33;
  float *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  float *v40;
  int v41;
  unint64_t v42;
  float v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  float v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  float v57;
  float v58;
  long double v59;
  double v60;
  uint64_t v61;
  float v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v73;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v79;
  unint64_t v82;
  uint64_t v83;
  __int16 v85;
  int v86;
  int64x2_t __src;
  _QWORD v88[4];

  v88[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v17 = v14 >> 3;
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v18 = *a4;
  v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a5;
  v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v69 = (*a3)[1];
  v70 = **a3;
  v68 = (*a3)[2];
  v82 = (*a3)[4];
  v76 = *((_QWORD *)*a4 + 1);
  v77 = *(_QWORD *)*a4;
  v75 = *((_QWORD *)*a4 + 2);
  v22 = **a5;
  v65 = (*a5)[1];
  v66 = (*a5)[2];
  v23 = (*a5)[4];
  v67 = (*a5)[3];
  v24 = ldexp(1.0, a7);
  v25 = exp2(-(double)(a8 + a7));
  __src = 0uLL;
  v88[0] = 0;
  v73 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  v27 = v25;
  v28 = *a10;
  v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    v85 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&v86 = v30 * v27;
    std::vector<float>::assign((char **)&__src, v73, &v86);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(v86) = MIL::Fp16::FromFloat(Float, *v28);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v86);
      v32 = v31 * v27;
      v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v37 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v38);
          v33 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v39 = 0;
        }
        v40 = (float *)&v39[4 * v35];
        *v40 = v32;
        v34 = v40 + 1;
        while (v33 != Float)
        {
          v41 = *((_DWORD *)v33 - 1);
          v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v88[0] = &v39[4 * v38];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  if (v22)
  {
    v42 = 0;
    v43 = v24;
    while (!v65)
    {
LABEL_85:
      if (++v42 == v22)
        goto LABEL_86;
    }
    v44 = 0;
    while (!v66)
    {
LABEL_84:
      if (++v44 == v65)
        goto LABEL_85;
    }
    v45 = 0;
    while (!v67)
    {
LABEL_83:
      if (++v45 == v66)
        goto LABEL_84;
    }
    v83 = 0;
    while (!v73)
    {
LABEL_82:
      if (++v83 == v67)
        goto LABEL_83;
    }
    v79 = 0;
    while (1)
    {
      if (v82)
      {
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v49 = *(unsigned __int8 *)(a1
          if (!a11 || (v50 = a12, v46 != *((_QWORD *)a4[1] - 2)))
            v50 = *(unsigned __int8 *)(a2
          if (!v47 && a7 >= -20)
          {
            v51 = (int)llroundf((float)((float)v49 * (float)v50) * v43) + (uint64_t)v48;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000)
                v48 = v51;
              else
                v48 = -8388608;
              v47 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              v47 = 1;
              v48 = 2139095040;
            }
          }
          ++v46;
        }
        while (v82 != v46);
        v52 = *(float *)(__src.i64[0] + 4 * v79);
        if (v47)
        {
          v53 = INFINITY;
          if (v47 == 2)
            v53 = -INFINITY;
          goto LABEL_70;
        }
        if (v48)
        {
          v53 = (double)v48;
LABEL_70:
          *(float *)&v86 = 0.0;
          v55 = frexp(v53, &v86);
          v56 = ldexp(v55, 11);
          v54 = ldexp(round(v56), v86 - 11);
          goto LABEL_71;
        }
      }
      else
      {
        v52 = *(float *)(__src.i64[0] + 4 * v79);
      }
      v54 = 0.0;
LABEL_71:
      v57 = v52 * v54;
      v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&v86 = 0.0;
        v59 = frexp(v57, &v86);
        v60 = ldexp(v59, 11);
        v58 = ldexp(round(v60), v86 - 11);
      }
      *(float *)&v86 = v58;
      v61 = *(_QWORD *)(a13 + 24);
      if (!v61)
        std::__throw_bad_function_call[abi:ne180100]();
      v62 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v61 + 48))(v61, &v86);
      if (v62 == INFINITY)
      {
        LOBYTE(v63) = -1;
      }
      else if (v62 == -INFINITY)
      {
        LOBYTE(v63) = 0;
      }
      else
      {
        v64 = llroundf(v62);
        if (v64 >= 255)
          v64 = 255;
        v63 = v64 & ~(v64 >> 31);
      }
      *(_BYTE *)(*a9
      if (v79 == v73)
        goto LABEL_82;
    }
  }
LABEL_86:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206914810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,unsigned char,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  MIL::Fp16 *Float;
  float v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  MIL::Fp16 *v33;
  float *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  float *v40;
  int v41;
  unint64_t v42;
  float v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  float v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  float v57;
  float v58;
  long double v59;
  double v60;
  uint64_t v61;
  float v62;
  char v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v73;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v79;
  unint64_t v82;
  uint64_t v83;
  __int16 v85;
  int v86;
  int64x2_t __src;
  _QWORD v88[4];

  v88[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v17 = v14 >> 3;
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v18 = *a4;
  v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a5;
  v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v69 = (*a3)[1];
  v70 = **a3;
  v68 = (*a3)[2];
  v82 = (*a3)[4];
  v76 = *((_QWORD *)*a4 + 1);
  v77 = *(_QWORD *)*a4;
  v75 = *((_QWORD *)*a4 + 2);
  v22 = **a5;
  v65 = (*a5)[1];
  v66 = (*a5)[2];
  v23 = (*a5)[4];
  v67 = (*a5)[3];
  v24 = ldexp(1.0, a7);
  v25 = exp2(-(double)(a8 + a7));
  __src = 0uLL;
  v88[0] = 0;
  v73 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  v27 = v25;
  v28 = *a10;
  v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    v85 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&v86 = v30 * v27;
    std::vector<float>::assign((char **)&__src, v73, &v86);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(v86) = MIL::Fp16::FromFloat(Float, *v28);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v86);
      v32 = v31 * v27;
      v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v37 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v38);
          v33 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v39 = 0;
        }
        v40 = (float *)&v39[4 * v35];
        *v40 = v32;
        v34 = v40 + 1;
        while (v33 != Float)
        {
          v41 = *((_DWORD *)v33 - 1);
          v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v88[0] = &v39[4 * v38];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  if (v22)
  {
    v42 = 0;
    v43 = v24;
    while (!v65)
    {
LABEL_87:
      if (++v42 == v22)
        goto LABEL_88;
    }
    v44 = 0;
    while (!v66)
    {
LABEL_86:
      if (++v44 == v65)
        goto LABEL_87;
    }
    v45 = 0;
    while (!v67)
    {
LABEL_85:
      if (++v45 == v66)
        goto LABEL_86;
    }
    v83 = 0;
    while (!v73)
    {
LABEL_84:
      if (++v83 == v67)
        goto LABEL_85;
    }
    v79 = 0;
    while (1)
    {
      if (v82)
      {
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v49 = *(unsigned __int8 *)(a1
          if (!a11 || (v50 = a12, v46 != *((_QWORD *)a4[1] - 2)))
            v50 = *(unsigned __int8 *)(a2
          if (!v47 && a7 >= -20)
          {
            v51 = (int)llroundf((float)((float)v49 * (float)v50) * v43) + (uint64_t)v48;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000)
                v48 = v51;
              else
                v48 = -8388608;
              v47 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              v47 = 1;
              v48 = 2139095040;
            }
          }
          ++v46;
        }
        while (v82 != v46);
        v52 = *(float *)(__src.i64[0] + 4 * v79);
        if (v47)
        {
          v53 = INFINITY;
          if (v47 == 2)
            v53 = -INFINITY;
          goto LABEL_70;
        }
        if (v48)
        {
          v53 = (double)v48;
LABEL_70:
          *(float *)&v86 = 0.0;
          v55 = frexp(v53, &v86);
          v56 = ldexp(v55, 11);
          v54 = ldexp(round(v56), v86 - 11);
          goto LABEL_71;
        }
      }
      else
      {
        v52 = *(float *)(__src.i64[0] + 4 * v79);
      }
      v54 = 0.0;
LABEL_71:
      v57 = v52 * v54;
      v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&v86 = 0.0;
        v59 = frexp(v57, &v86);
        v60 = ldexp(v59, 11);
        v58 = ldexp(round(v60), v86 - 11);
      }
      *(float *)&v86 = v58;
      v61 = *(_QWORD *)(a13 + 24);
      if (!v61)
        std::__throw_bad_function_call[abi:ne180100]();
      v62 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v61 + 48))(v61, &v86);
      if (v62 == INFINITY)
      {
        v63 = 127;
      }
      else if (v62 == -INFINITY)
      {
        v63 = 0x80;
      }
      else
      {
        v64 = llroundf(v62);
        if (v64 >= 127)
          v64 = 127;
        if (v64 <= -128)
          v63 = 0x80;
        else
          v63 = v64;
      }
      *(_BYTE *)(*a9
      if (v79 == v73)
        goto LABEL_84;
    }
  }
LABEL_88:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206914FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,signed char,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  MIL::Fp16 *Float;
  float v26;
  float *v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  MIL::Fp16 *v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  float *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  char v48;
  int v49;
  int v50;
  uint64_t v51;
  float v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  float v57;
  float v58;
  long double v59;
  double v60;
  uint64_t v61;
  MIL::Fp16 *v62;
  float v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v73;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v82;
  uint64_t v83;
  __int16 v85;
  int __e;
  int64x2_t __src;
  _QWORD v88[4];

  v88[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v17 = v14 >> 3;
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v18 = *a4;
  v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a5;
  v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  v69 = (*a3)[1];
  v70 = **a3;
  v68 = (*a3)[2];
  v82 = (*a3)[4];
  v77 = *((_QWORD *)*a4 + 1);
  v78 = *(_QWORD *)*a4;
  v76 = *((_QWORD *)*a4 + 2);
  v22 = **a5;
  v65 = (*a5)[1];
  v66 = (*a5)[2];
  v23 = (*a5)[4];
  v67 = (*a5)[3];
  v24 = exp2(-(double)(a8 + a7));
  __src = 0uLL;
  v88[0] = 0;
  v73 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  v26 = v24;
  v27 = *a10;
  v28 = a10[1];
  if ((char *)v28 - (char *)*a10 == 4)
  {
    v85 = MIL::Fp16::FromFloat(Float, *v27);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&__e = v29 * v26;
    std::vector<float>::assign((char **)&__src, v73, &__e);
  }
  else
  {
    for (; v27 != v28; ++v27)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v27);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v31 = v30 * v26;
      v32 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v34 = (__src.i64[1] - __src.i64[0]) >> 2;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v36 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v37);
          v32 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v38 = 0;
        }
        v39 = (float *)&v38[4 * v34];
        *v39 = v31;
        v33 = v39 + 1;
        while (v32 != Float)
        {
          v40 = *((_DWORD *)v32 - 1);
          v32 = (MIL::Fp16 *)((char *)v32 - 4);
          *((_DWORD *)v39-- - 1) = v40;
        }
        __src.i64[0] = (uint64_t)v39;
        __src.i64[1] = (uint64_t)v33;
        v88[0] = &v38[4 * v37];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v31;
        v33 = (float *)((char *)v32 + 4);
      }
      __src.i64[1] = (uint64_t)v33;
    }
  }
  if (v22)
  {
    v41 = 0;
    while (!v65)
    {
LABEL_78:
      if (++v41 == v22)
        goto LABEL_79;
    }
    v42 = 0;
    while (!v66)
    {
LABEL_77:
      if (++v42 == v65)
        goto LABEL_78;
    }
    v43 = 0;
    while (!v67)
    {
LABEL_76:
      if (++v43 == v66)
        goto LABEL_77;
    }
    v83 = 0;
    while (!v73)
    {
LABEL_75:
      if (++v83 == v67)
        goto LABEL_76;
    }
    v79 = 0;
    while (1)
    {
      if (v82)
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        do
        {
          v47 = *(unsigned __int8 *)(a1
          if (!a11 || (v48 = a12, v44 != *((_QWORD *)a4[1] - 2)))
            v48 = *(_BYTE *)(a2
          if (!v45)
          {
            v49 = v48 * v47;
            if (a7)
            {
              v50 = (v49 + (1 << ~(_BYTE)a7)) >> -(char)a7;
              v49 <<= a7;
              if (a7 < 1)
                v49 = v50;
            }
            v51 = v46 + (uint64_t)v49;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000)
                v46 = v51;
              else
                v46 = -8388608;
              v45 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              v45 = 1;
              v46 = 2139095040;
            }
          }
          ++v44;
        }
        while (v82 != v44);
        v52 = *(float *)(__src.i64[0] + 4 * v79);
        if (v45)
        {
          v53 = INFINITY;
          if (v45 == 2)
            v53 = -INFINITY;
          goto LABEL_70;
        }
        if (v46)
        {
          v53 = (double)v46;
LABEL_70:
          *(float *)&__e = 0.0;
          v55 = frexp(v53, &__e);
          v56 = ldexp(v55, 11);
          v54 = ldexp(round(v56), __e - 11);
          goto LABEL_71;
        }
      }
      else
      {
        v52 = *(float *)(__src.i64[0] + 4 * v79);
      }
      v54 = 0.0;
LABEL_71:
      v57 = v52 * v54;
      v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&__e = 0.0;
        v59 = frexp(v57, &__e);
        v60 = ldexp(v59, 11);
        v58 = ldexp(round(v60), __e - 11);
      }
      *(float *)&__e = v58;
      v61 = *(_QWORD *)(a13 + 24);
      if (!v61)
        std::__throw_bad_function_call[abi:ne180100]();
      v62 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v61 + 48))(v61, &__e);
      v64 = MIL::Fp16::FromFloat(v62, v63);
      *(_WORD *)(*a9
               + 2
      if (v79 == v73)
        goto LABEL_75;
    }
  }
LABEL_79:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206915714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;
  void *v21;

  v20 = *(void **)(v18 - 144);
  if (v20)
  {
    *(_QWORD *)(v18 - 136) = v20;
    operator delete(v20);
  }
  v21 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,signed char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  MIL::Fp16 *Float;
  float v26;
  float *v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  MIL::Fp16 *v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  float *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  char v48;
  int v49;
  int v50;
  uint64_t v51;
  float v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  float v57;
  float v58;
  long double v59;
  double v60;
  uint64_t v61;
  float v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v73;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v82;
  uint64_t v83;
  __int16 v85;
  int __e;
  int64x2_t __src;
  _QWORD v88[4];

  v88[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v17 = v14 >> 3;
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v18 = *a4;
  v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a5;
  v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v69 = (*a3)[1];
  v70 = **a3;
  v68 = (*a3)[2];
  v82 = (*a3)[4];
  v77 = *((_QWORD *)*a4 + 1);
  v78 = *(_QWORD *)*a4;
  v76 = *((_QWORD *)*a4 + 2);
  v22 = **a5;
  v65 = (*a5)[1];
  v66 = (*a5)[2];
  v23 = (*a5)[4];
  v67 = (*a5)[3];
  v24 = exp2(-(double)(a8 + a7));
  __src = 0uLL;
  v88[0] = 0;
  v73 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  v26 = v24;
  v27 = *a10;
  v28 = a10[1];
  if ((char *)v28 - (char *)*a10 == 4)
  {
    v85 = MIL::Fp16::FromFloat(Float, *v27);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&__e = v29 * v26;
    std::vector<float>::assign((char **)&__src, v73, &__e);
  }
  else
  {
    for (; v27 != v28; ++v27)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v27);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v31 = v30 * v26;
      v32 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v34 = (__src.i64[1] - __src.i64[0]) >> 2;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v36 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v37);
          v32 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v38 = 0;
        }
        v39 = (float *)&v38[4 * v34];
        *v39 = v31;
        v33 = v39 + 1;
        while (v32 != Float)
        {
          v40 = *((_DWORD *)v32 - 1);
          v32 = (MIL::Fp16 *)((char *)v32 - 4);
          *((_DWORD *)v39-- - 1) = v40;
        }
        __src.i64[0] = (uint64_t)v39;
        __src.i64[1] = (uint64_t)v33;
        v88[0] = &v38[4 * v37];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v31;
        v33 = (float *)((char *)v32 + 4);
      }
      __src.i64[1] = (uint64_t)v33;
    }
  }
  if (v22)
  {
    v41 = 0;
    while (!v65)
    {
LABEL_87:
      if (++v41 == v22)
        goto LABEL_88;
    }
    v42 = 0;
    while (!v66)
    {
LABEL_86:
      if (++v42 == v65)
        goto LABEL_87;
    }
    v43 = 0;
    while (!v67)
    {
LABEL_85:
      if (++v43 == v66)
        goto LABEL_86;
    }
    v83 = 0;
    while (!v73)
    {
LABEL_84:
      if (++v83 == v67)
        goto LABEL_85;
    }
    v79 = 0;
    while (1)
    {
      if (v82)
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        do
        {
          v47 = *(unsigned __int8 *)(a1
          if (!a11 || (v48 = a12, v44 != *((_QWORD *)a4[1] - 2)))
            v48 = *(_BYTE *)(a2
          if (!v45)
          {
            v49 = v48 * v47;
            if (a7)
            {
              v50 = (v49 + (1 << ~(_BYTE)a7)) >> -(char)a7;
              v49 <<= a7;
              if (a7 < 1)
                v49 = v50;
            }
            v51 = v46 + (uint64_t)v49;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000)
                v46 = v51;
              else
                v46 = -8388608;
              v45 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              v45 = 1;
              v46 = 2139095040;
            }
          }
          ++v44;
        }
        while (v82 != v44);
        v52 = *(float *)(__src.i64[0] + 4 * v79);
        if (v45)
        {
          v53 = INFINITY;
          if (v45 == 2)
            v53 = -INFINITY;
          goto LABEL_72;
        }
        if (v46)
        {
          v53 = (double)v46;
LABEL_72:
          *(float *)&__e = 0.0;
          v55 = frexp(v53, &__e);
          v56 = ldexp(v55, 11);
          v54 = ldexp(round(v56), __e - 11);
          goto LABEL_73;
        }
      }
      else
      {
        v52 = *(float *)(__src.i64[0] + 4 * v79);
      }
      v54 = 0.0;
LABEL_73:
      v57 = v52 * v54;
      v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&__e = 0.0;
        v59 = frexp(v57, &__e);
        v60 = ldexp(v59, 11);
        v58 = ldexp(round(v60), __e - 11);
      }
      *(float *)&__e = v58;
      v61 = *(_QWORD *)(a13 + 24);
      if (!v61)
        std::__throw_bad_function_call[abi:ne180100]();
      v62 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v61 + 48))(v61, &__e);
      if (v62 == INFINITY)
      {
        LOBYTE(v63) = -1;
      }
      else if (v62 == -INFINITY)
      {
        LOBYTE(v63) = 0;
      }
      else
      {
        v64 = llroundf(v62);
        if (v64 >= 255)
          v64 = 255;
        v63 = v64 & ~(v64 >> 31);
      }
      *(_BYTE *)(*a9
      if (v79 == v73)
        goto LABEL_84;
    }
  }
LABEL_88:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206915EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<unsigned char,signed char,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  MIL::Fp16 *Float;
  float v26;
  float *v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  MIL::Fp16 *v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  float *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  char v48;
  int v49;
  int v50;
  uint64_t v51;
  float v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  float v57;
  float v58;
  long double v59;
  double v60;
  uint64_t v61;
  float v62;
  char v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v73;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v82;
  uint64_t v83;
  __int16 v85;
  int __e;
  int64x2_t __src;
  _QWORD v88[4];

  v88[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v17 = v14 >> 3;
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v18 = *a4;
  v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a5;
  v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v69 = (*a3)[1];
  v70 = **a3;
  v68 = (*a3)[2];
  v82 = (*a3)[4];
  v77 = *((_QWORD *)*a4 + 1);
  v78 = *(_QWORD *)*a4;
  v76 = *((_QWORD *)*a4 + 2);
  v22 = **a5;
  v65 = (*a5)[1];
  v66 = (*a5)[2];
  v23 = (*a5)[4];
  v67 = (*a5)[3];
  v24 = exp2(-(double)(a8 + a7));
  __src = 0uLL;
  v88[0] = 0;
  v73 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  v26 = v24;
  v27 = *a10;
  v28 = a10[1];
  if ((char *)v28 - (char *)*a10 == 4)
  {
    v85 = MIL::Fp16::FromFloat(Float, *v27);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&__e = v29 * v26;
    std::vector<float>::assign((char **)&__src, v73, &__e);
  }
  else
  {
    for (; v27 != v28; ++v27)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v27);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v31 = v30 * v26;
      v32 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v34 = (__src.i64[1] - __src.i64[0]) >> 2;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v36 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v37);
          v32 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v38 = 0;
        }
        v39 = (float *)&v38[4 * v34];
        *v39 = v31;
        v33 = v39 + 1;
        while (v32 != Float)
        {
          v40 = *((_DWORD *)v32 - 1);
          v32 = (MIL::Fp16 *)((char *)v32 - 4);
          *((_DWORD *)v39-- - 1) = v40;
        }
        __src.i64[0] = (uint64_t)v39;
        __src.i64[1] = (uint64_t)v33;
        v88[0] = &v38[4 * v37];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v31;
        v33 = (float *)((char *)v32 + 4);
      }
      __src.i64[1] = (uint64_t)v33;
    }
  }
  if (v22)
  {
    v41 = 0;
    while (!v65)
    {
LABEL_89:
      if (++v41 == v22)
        goto LABEL_90;
    }
    v42 = 0;
    while (!v66)
    {
LABEL_88:
      if (++v42 == v65)
        goto LABEL_89;
    }
    v43 = 0;
    while (!v67)
    {
LABEL_87:
      if (++v43 == v66)
        goto LABEL_88;
    }
    v83 = 0;
    while (!v73)
    {
LABEL_86:
      if (++v83 == v67)
        goto LABEL_87;
    }
    v79 = 0;
    while (1)
    {
      if (v82)
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        do
        {
          v47 = *(unsigned __int8 *)(a1
          if (!a11 || (v48 = a12, v44 != *((_QWORD *)a4[1] - 2)))
            v48 = *(_BYTE *)(a2
          if (!v45)
          {
            v49 = v48 * v47;
            if (a7)
            {
              v50 = (v49 + (1 << ~(_BYTE)a7)) >> -(char)a7;
              v49 <<= a7;
              if (a7 < 1)
                v49 = v50;
            }
            v51 = v46 + (uint64_t)v49;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000)
                v46 = v51;
              else
                v46 = -8388608;
              v45 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              v45 = 1;
              v46 = 2139095040;
            }
          }
          ++v44;
        }
        while (v82 != v44);
        v52 = *(float *)(__src.i64[0] + 4 * v79);
        if (v45)
        {
          v53 = INFINITY;
          if (v45 == 2)
            v53 = -INFINITY;
          goto LABEL_72;
        }
        if (v46)
        {
          v53 = (double)v46;
LABEL_72:
          *(float *)&__e = 0.0;
          v55 = frexp(v53, &__e);
          v56 = ldexp(v55, 11);
          v54 = ldexp(round(v56), __e - 11);
          goto LABEL_73;
        }
      }
      else
      {
        v52 = *(float *)(__src.i64[0] + 4 * v79);
      }
      v54 = 0.0;
LABEL_73:
      v57 = v52 * v54;
      v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&__e = 0.0;
        v59 = frexp(v57, &__e);
        v60 = ldexp(v59, 11);
        v58 = ldexp(round(v60), __e - 11);
      }
      *(float *)&__e = v58;
      v61 = *(_QWORD *)(a13 + 24);
      if (!v61)
        std::__throw_bad_function_call[abi:ne180100]();
      v62 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v61 + 48))(v61, &__e);
      if (v62 == INFINITY)
      {
        v63 = 127;
      }
      else if (v62 == -INFINITY)
      {
        v63 = 0x80;
      }
      else
      {
        v64 = llroundf(v62);
        if (v64 >= 127)
          v64 = 127;
        if (v64 <= -128)
          v63 = 0x80;
        else
          v63 = v64;
      }
      *(_BYTE *)(*a9
      if (v79 == v73)
        goto LABEL_86;
    }
  }
LABEL_90:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206916660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, float **a10, char a11, int a12, __int16 a13, uint64_t a14)
{
  unint64_t *v14;
  uint64_t v15;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  MIL::Fp16 *Float;
  float v29;
  float *v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  MIL::Fp16 *v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float *v42;
  int v43;
  unint64_t v44;
  float v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  __int16 v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  int v58;
  uint64_t v59;
  _BOOL4 v60;
  float v61;
  double v62;
  float v63;
  long double v64;
  double v65;
  float v66;
  float v67;
  long double v68;
  double v69;
  uint64_t v70;
  MIL::Fp16 *v71;
  float v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v83;
  int v84;
  int v85;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v92;
  uint64_t v93;
  __int16 v95;
  int __e;
  int64x2_t __src;
  _QWORD v98[4];

  v98[2] = *MEMORY[0x24BDAC8D0];
  v14 = *a3;
  v15 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v15 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v19 = v15 >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v14 + 1), __src.i8, (char *)v98, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v14 + 1), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a4;
  v21 = (a4[1] - *a4) >> 3;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, (char *)v98, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, &__src.i8[8], 1);
  }
  v22 = *a5;
  v23 = a5[1] - *a5;
  if (v23 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, (char *)v98, 2);
  }
  else if (v23 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  v79 = (*a3)[1];
  v80 = **a3;
  v92 = (*a3)[4];
  v88 = *((_QWORD *)*a4 + 1);
  v89 = *(_QWORD *)*a4;
  v87 = *((_QWORD *)*a4 + 2);
  v24 = **a5;
  v75 = (*a5)[1];
  v76 = (*a5)[2];
  v25 = (*a5)[4];
  v77 = (*a5)[3];
  v78 = (*a3)[2];
  v26 = ldexp(1.0, a7 + 10);
  v27 = exp2(-(double)(a7 + 10 + a8));
  __src = 0uLL;
  v98[0] = 0;
  v83 = v25;
  std::vector<float>::reserve((void **)&__src, v25);
  v29 = v27;
  v30 = *a10;
  v31 = a10[1];
  if ((char *)v31 - (char *)*a10 == 4)
  {
    v95 = MIL::Fp16::FromFloat(Float, *v30);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v95);
    *(float *)&__e = v32 * v29;
    std::vector<float>::assign((char **)&__src, v83, &__e);
  }
  else
  {
    for (; v30 != v31; ++v30)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v30);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v34 = v33 * v29;
      v35 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v98[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v37 = (__src.i64[1] - __src.i64[0]) >> 2;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v39 = v98[0] - __src.i64[0];
        if ((v98[0] - __src.i64[0]) >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v98, v40);
          v35 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v41 = 0;
        }
        v42 = (float *)&v41[4 * v37];
        *v42 = v34;
        v36 = v42 + 1;
        while (v35 != Float)
        {
          v43 = *((_DWORD *)v35 - 1);
          v35 = (MIL::Fp16 *)((char *)v35 - 4);
          *((_DWORD *)v42-- - 1) = v43;
        }
        __src.i64[0] = (uint64_t)v42;
        __src.i64[1] = (uint64_t)v36;
        v98[0] = &v41[4 * v40];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v34;
        v36 = (float *)((char *)v35 + 4);
      }
      __src.i64[1] = (uint64_t)v36;
    }
  }
  if (v24)
  {
    v44 = 0;
    v84 = -20 - a7;
    v45 = v26;
    v74 = v24;
    while (!v75)
    {
LABEL_79:
      if (++v44 == v74)
        goto LABEL_80;
    }
    v46 = 0;
    while (!v76)
    {
LABEL_78:
      if (++v46 == v75)
        goto LABEL_79;
    }
    v47 = 0;
    while (!v77)
    {
LABEL_77:
      if (++v47 == v76)
        goto LABEL_78;
    }
    v93 = 0;
    while (!v83)
    {
LABEL_76:
      if (++v93 == v77)
        goto LABEL_77;
    }
    v48 = 0;
    while (1)
    {
      if (v92)
      {
        v49 = 0;
        v50 = 0;
        v85 = 0;
        do
        {
          v51 = *(_BYTE *)(a1
          if (!a11 || (v52 = a13, v49 != *((_QWORD *)a4[1] - 2)))
            v52 = *(_WORD *)(a2
                           + 2
          if (!v50)
          {
            LOWORD(__e) = v52;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v54 = v53;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v56 = v54 - v55;
            v57 = ilogbf(v56);
            if (v57 <= -14)
              v58 = -14;
            else
              v58 = v57;
            if (v58 >= v84)
            {
              v59 = (int)llroundf((float)(v56 * (float)v51) * v45) + (uint64_t)v85;
              if (v59 <= 0x7FFFFFFF)
              {
                v60 = v59 < (uint64_t)0xFFFFFFFF80000000;
                if (v59 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v59) = -8388608;
                v85 = v59;
                v50 = 2 * v60;
              }
              else
              {
                v50 = 1;
                v85 = 2139095040;
              }
            }
            else
            {
              v50 = 0;
            }
          }
          ++v49;
        }
        while (v92 != v49);
        v61 = *(float *)(__src.i64[0] + 4 * v48);
        if (v50)
        {
          v62 = INFINITY;
          if (v50 == 2)
            v62 = -INFINITY;
          goto LABEL_71;
        }
        if (v85)
        {
          v62 = (double)v85;
LABEL_71:
          *(float *)&__e = 0.0;
          v64 = frexp(v62, &__e);
          v65 = ldexp(v64, 11);
          v63 = ldexp(round(v65), __e - 11);
          goto LABEL_72;
        }
      }
      else
      {
        v61 = *(float *)(__src.i64[0] + 4 * v48);
      }
      v63 = 0.0;
LABEL_72:
      v66 = v61 * v63;
      v67 = 0.0;
      if (v66 != 0.0)
      {
        *(float *)&__e = 0.0;
        v68 = frexp(v66, &__e);
        v69 = ldexp(v68, 11);
        v67 = ldexp(round(v69), __e - 11);
      }
      *(float *)&__e = v67;
      v70 = *(_QWORD *)(a14 + 24);
      if (!v70)
        std::__throw_bad_function_call[abi:ne180100]();
      v71 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v70 + 48))(v70, &__e);
      v73 = MIL::Fp16::FromFloat(v71, v72);
      *(_WORD *)(*a9
               + 2
      if (v48 == v83)
        goto LABEL_76;
    }
  }
LABEL_80:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206916E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  void *v19;
  void *v20;

  v19 = *(void **)(v17 - 160);
  if (v19)
  {
    *(_QWORD *)(v17 - 152) = v19;
    operator delete(v19);
  }
  v20 = *(void **)a17;
  if (*(_QWORD *)a17)
  {
    *(_QWORD *)(a17 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,MIL::Fp16,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, int a12, __int16 a13, __int16 a14, uint64_t a15)
{
  unint64_t *v15;
  uint64_t v16;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  MIL::Fp16 *Float;
  float v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  MIL::Fp16 *v36;
  float *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  float *v43;
  int v44;
  unint64_t v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  __int16 v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int v58;
  int v59;
  uint64_t v60;
  _BOOL4 v61;
  float v62;
  double v63;
  float v64;
  long double v65;
  double v66;
  float v67;
  float v68;
  long double v69;
  double v70;
  uint64_t v71;
  float v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v84;
  int v85;
  int v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v93;
  uint64_t v94;
  __int16 v96;
  int __e;
  int64x2_t __src;
  _QWORD v99[4];

  v99[2] = *MEMORY[0x24BDAC8D0];
  v15 = *a3;
  v16 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v16 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v20 = v16 >> 3;
  if (v20 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, (char *)v99, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, &__src.i8[8], 1);
  }
  v21 = *a4;
  v22 = (a4[1] - *a4) >> 3;
  if (v22 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, (char *)v99, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, &__src.i8[8], 1);
  }
  v23 = *a5;
  v24 = a5[1] - *a5;
  if (v24 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, (char *)v99, 2);
  }
  else if (v24 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v80 = (*a3)[1];
  v81 = **a3;
  v93 = (*a3)[4];
  v89 = *((_QWORD *)*a4 + 1);
  v90 = *(_QWORD *)*a4;
  v88 = *((_QWORD *)*a4 + 2);
  v25 = **a5;
  v76 = (*a5)[1];
  v77 = (*a5)[2];
  v26 = (*a5)[4];
  v78 = (*a5)[3];
  v79 = (*a3)[2];
  v27 = ldexp(1.0, a7 + 10);
  v28 = exp2(-(double)(a7 + 10 + a8));
  __src = 0uLL;
  v99[0] = 0;
  v84 = v26;
  std::vector<float>::reserve((void **)&__src, v26);
  v30 = v28;
  v31 = *a10;
  v32 = a10[1];
  if ((char *)v32 - (char *)*a10 == 4)
  {
    v96 = MIL::Fp16::FromFloat(Float, *v31);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v96);
    *(float *)&__e = v33 * v30;
    std::vector<float>::assign((char **)&__src, v84, &__e);
  }
  else
  {
    for (; v31 != v32; ++v31)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v31);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v35 = v34 * v30;
      v36 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v99[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v38 = (__src.i64[1] - __src.i64[0]) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v40 = v99[0] - __src.i64[0];
        if ((v99[0] - __src.i64[0]) >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v99, v41);
          v36 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v42 = 0;
        }
        v43 = (float *)&v42[4 * v38];
        *v43 = v35;
        v37 = v43 + 1;
        while (v36 != Float)
        {
          v44 = *((_DWORD *)v36 - 1);
          v36 = (MIL::Fp16 *)((char *)v36 - 4);
          *((_DWORD *)v43-- - 1) = v44;
        }
        __src.i64[0] = (uint64_t)v43;
        __src.i64[1] = (uint64_t)v37;
        v99[0] = &v42[4 * v41];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v35;
        v37 = (float *)((char *)v36 + 4);
      }
      __src.i64[1] = (uint64_t)v37;
    }
  }
  if (v25)
  {
    v45 = 0;
    v85 = -20 - a7;
    v46 = v27;
    v75 = v25;
    while (!v76)
    {
LABEL_88:
      if (++v45 == v75)
        goto LABEL_89;
    }
    v47 = 0;
    while (!v77)
    {
LABEL_87:
      if (++v47 == v76)
        goto LABEL_88;
    }
    v48 = 0;
    while (!v78)
    {
LABEL_86:
      if (++v48 == v77)
        goto LABEL_87;
    }
    v94 = 0;
    while (!v84)
    {
LABEL_85:
      if (++v94 == v78)
        goto LABEL_86;
    }
    v49 = 0;
    while (1)
    {
      if (v93)
      {
        v50 = 0;
        v51 = 0;
        v86 = 0;
        do
        {
          v52 = *(_BYTE *)(a1
          if (!a11 || (v53 = a13, v50 != *((_QWORD *)a4[1] - 2)))
            v53 = *(_WORD *)(a2
                           + 2
          if (!v51)
          {
            LOWORD(__e) = v53;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v55 = v54;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v57 = v55 - v56;
            v58 = ilogbf(v57);
            if (v58 <= -14)
              v59 = -14;
            else
              v59 = v58;
            if (v59 >= v85)
            {
              v60 = (int)llroundf((float)(v57 * (float)v52) * v46) + (uint64_t)v86;
              if (v60 <= 0x7FFFFFFF)
              {
                v61 = v60 < (uint64_t)0xFFFFFFFF80000000;
                if (v60 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v60) = -8388608;
                v86 = v60;
                v51 = 2 * v61;
              }
              else
              {
                v51 = 1;
                v86 = 2139095040;
              }
            }
            else
            {
              v51 = 0;
            }
          }
          ++v50;
        }
        while (v93 != v50);
        v62 = *(float *)(__src.i64[0] + 4 * v49);
        if (v51)
        {
          v63 = INFINITY;
          if (v51 == 2)
            v63 = -INFINITY;
          goto LABEL_73;
        }
        if (v86)
        {
          v63 = (double)v86;
LABEL_73:
          *(float *)&__e = 0.0;
          v65 = frexp(v63, &__e);
          v66 = ldexp(v65, 11);
          v64 = ldexp(round(v66), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        v62 = *(float *)(__src.i64[0] + 4 * v49);
      }
      v64 = 0.0;
LABEL_74:
      v67 = v62 * v64;
      v68 = 0.0;
      if (v67 != 0.0)
      {
        *(float *)&__e = 0.0;
        v69 = frexp(v67, &__e);
        v70 = ldexp(v69, 11);
        v68 = ldexp(round(v70), __e - 11);
      }
      *(float *)&__e = v68;
      v71 = *(_QWORD *)(a15 + 24);
      if (!v71)
        std::__throw_bad_function_call[abi:ne180100]();
      v72 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v71 + 48))(v71, &__e);
      if (v72 == INFINITY)
      {
        LOBYTE(v73) = -1;
      }
      else if (v72 == -INFINITY)
      {
        LOBYTE(v73) = 0;
      }
      else
      {
        v74 = llroundf(v72);
        if (v74 >= 255)
          v74 = 255;
        v73 = v74 & ~(v74 >> 31);
      }
      *(_BYTE *)(*a9
      if (v49 == v84)
        goto LABEL_85;
    }
  }
LABEL_89:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_2069175E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v18;

  v18 = *(void **)a17;
  if (*(_QWORD *)a17)
  {
    *(_QWORD *)(a17 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,MIL::Fp16,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, int a12, __int16 a13, __int16 a14, uint64_t a15)
{
  unint64_t *v15;
  uint64_t v16;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  MIL::Fp16 *Float;
  float v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  MIL::Fp16 *v36;
  float *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  float *v43;
  int v44;
  unint64_t v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  __int16 v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int v58;
  int v59;
  uint64_t v60;
  _BOOL4 v61;
  float v62;
  double v63;
  float v64;
  long double v65;
  double v66;
  float v67;
  float v68;
  long double v69;
  double v70;
  uint64_t v71;
  float v72;
  char v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v84;
  int v85;
  int v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v93;
  uint64_t v94;
  __int16 v96;
  int __e;
  int64x2_t __src;
  _QWORD v99[4];

  v99[2] = *MEMORY[0x24BDAC8D0];
  v15 = *a3;
  v16 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v16 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v20 = v16 >> 3;
  if (v20 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, (char *)v99, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, &__src.i8[8], 1);
  }
  v21 = *a4;
  v22 = (a4[1] - *a4) >> 3;
  if (v22 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, (char *)v99, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, &__src.i8[8], 1);
  }
  v23 = *a5;
  v24 = a5[1] - *a5;
  if (v24 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, (char *)v99, 2);
  }
  else if (v24 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v80 = (*a3)[1];
  v81 = **a3;
  v93 = (*a3)[4];
  v89 = *((_QWORD *)*a4 + 1);
  v90 = *(_QWORD *)*a4;
  v88 = *((_QWORD *)*a4 + 2);
  v25 = **a5;
  v76 = (*a5)[1];
  v77 = (*a5)[2];
  v26 = (*a5)[4];
  v78 = (*a5)[3];
  v79 = (*a3)[2];
  v27 = ldexp(1.0, a7 + 10);
  v28 = exp2(-(double)(a7 + 10 + a8));
  __src = 0uLL;
  v99[0] = 0;
  v84 = v26;
  std::vector<float>::reserve((void **)&__src, v26);
  v30 = v28;
  v31 = *a10;
  v32 = a10[1];
  if ((char *)v32 - (char *)*a10 == 4)
  {
    v96 = MIL::Fp16::FromFloat(Float, *v31);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v96);
    *(float *)&__e = v33 * v30;
    std::vector<float>::assign((char **)&__src, v84, &__e);
  }
  else
  {
    for (; v31 != v32; ++v31)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v31);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v35 = v34 * v30;
      v36 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v99[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v38 = (__src.i64[1] - __src.i64[0]) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v40 = v99[0] - __src.i64[0];
        if ((v99[0] - __src.i64[0]) >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v99, v41);
          v36 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v42 = 0;
        }
        v43 = (float *)&v42[4 * v38];
        *v43 = v35;
        v37 = v43 + 1;
        while (v36 != Float)
        {
          v44 = *((_DWORD *)v36 - 1);
          v36 = (MIL::Fp16 *)((char *)v36 - 4);
          *((_DWORD *)v43-- - 1) = v44;
        }
        __src.i64[0] = (uint64_t)v43;
        __src.i64[1] = (uint64_t)v37;
        v99[0] = &v42[4 * v41];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v35;
        v37 = (float *)((char *)v36 + 4);
      }
      __src.i64[1] = (uint64_t)v37;
    }
  }
  if (v25)
  {
    v45 = 0;
    v85 = -20 - a7;
    v46 = v27;
    v75 = v25;
    while (!v76)
    {
LABEL_90:
      if (++v45 == v75)
        goto LABEL_91;
    }
    v47 = 0;
    while (!v77)
    {
LABEL_89:
      if (++v47 == v76)
        goto LABEL_90;
    }
    v48 = 0;
    while (!v78)
    {
LABEL_88:
      if (++v48 == v77)
        goto LABEL_89;
    }
    v94 = 0;
    while (!v84)
    {
LABEL_87:
      if (++v94 == v78)
        goto LABEL_88;
    }
    v49 = 0;
    while (1)
    {
      if (v93)
      {
        v50 = 0;
        v51 = 0;
        v86 = 0;
        do
        {
          v52 = *(_BYTE *)(a1
          if (!a11 || (v53 = a13, v50 != *((_QWORD *)a4[1] - 2)))
            v53 = *(_WORD *)(a2
                           + 2
          if (!v51)
          {
            LOWORD(__e) = v53;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v55 = v54;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            v57 = v55 - v56;
            v58 = ilogbf(v57);
            if (v58 <= -14)
              v59 = -14;
            else
              v59 = v58;
            if (v59 >= v85)
            {
              v60 = (int)llroundf((float)(v57 * (float)v52) * v46) + (uint64_t)v86;
              if (v60 <= 0x7FFFFFFF)
              {
                v61 = v60 < (uint64_t)0xFFFFFFFF80000000;
                if (v60 < (uint64_t)0xFFFFFFFF80000000)
                  LODWORD(v60) = -8388608;
                v86 = v60;
                v51 = 2 * v61;
              }
              else
              {
                v51 = 1;
                v86 = 2139095040;
              }
            }
            else
            {
              v51 = 0;
            }
          }
          ++v50;
        }
        while (v93 != v50);
        v62 = *(float *)(__src.i64[0] + 4 * v49);
        if (v51)
        {
          v63 = INFINITY;
          if (v51 == 2)
            v63 = -INFINITY;
          goto LABEL_73;
        }
        if (v86)
        {
          v63 = (double)v86;
LABEL_73:
          *(float *)&__e = 0.0;
          v65 = frexp(v63, &__e);
          v66 = ldexp(v65, 11);
          v64 = ldexp(round(v66), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        v62 = *(float *)(__src.i64[0] + 4 * v49);
      }
      v64 = 0.0;
LABEL_74:
      v67 = v62 * v64;
      v68 = 0.0;
      if (v67 != 0.0)
      {
        *(float *)&__e = 0.0;
        v69 = frexp(v67, &__e);
        v70 = ldexp(v69, 11);
        v68 = ldexp(round(v70), __e - 11);
      }
      *(float *)&__e = v68;
      v71 = *(_QWORD *)(a15 + 24);
      if (!v71)
        std::__throw_bad_function_call[abi:ne180100]();
      v72 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v71 + 48))(v71, &__e);
      if (v72 == INFINITY)
      {
        v73 = 127;
      }
      else if (v72 == -INFINITY)
      {
        v73 = 0x80;
      }
      else
      {
        v74 = llroundf(v72);
        if (v74 >= 127)
          v74 = 127;
        if (v74 <= -128)
          v73 = 0x80;
        else
          v73 = v74;
      }
      *(_BYTE *)(*a9
      if (v49 == v84)
        goto LABEL_87;
    }
  }
LABEL_91:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206917DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v18;

  v18 = *(void **)a17;
  if (*(_QWORD *)a17)
  {
    *(_QWORD *)(a17 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,unsigned char,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  MIL::Fp16 *Float;
  float v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  MIL::Fp16 *v33;
  float *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  float *v40;
  int v41;
  unint64_t v42;
  float v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  float v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  float v57;
  float v58;
  long double v59;
  double v60;
  uint64_t v61;
  MIL::Fp16 *v62;
  float v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v73;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v79;
  unint64_t v82;
  uint64_t v83;
  __int16 v85;
  int v86;
  int64x2_t __src;
  _QWORD v88[4];

  v88[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v17 = v14 >> 3;
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v18 = *a4;
  v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a5;
  v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  v69 = (*a3)[1];
  v70 = **a3;
  v68 = (*a3)[2];
  v82 = (*a3)[4];
  v76 = *((_QWORD *)*a4 + 1);
  v77 = *(_QWORD *)*a4;
  v75 = *((_QWORD *)*a4 + 2);
  v22 = **a5;
  v65 = (*a5)[1];
  v66 = (*a5)[2];
  v23 = (*a5)[4];
  v67 = (*a5)[3];
  v24 = ldexp(1.0, a7);
  v25 = exp2(-(double)(a8 + a7));
  __src = 0uLL;
  v88[0] = 0;
  v73 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  v27 = v25;
  v28 = *a10;
  v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    v85 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&v86 = v30 * v27;
    std::vector<float>::assign((char **)&__src, v73, &v86);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(v86) = MIL::Fp16::FromFloat(Float, *v28);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v86);
      v32 = v31 * v27;
      v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v37 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v38);
          v33 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v39 = 0;
        }
        v40 = (float *)&v39[4 * v35];
        *v40 = v32;
        v34 = v40 + 1;
        while (v33 != Float)
        {
          v41 = *((_DWORD *)v33 - 1);
          v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v88[0] = &v39[4 * v38];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  if (v22)
  {
    v42 = 0;
    v43 = v24;
    while (!v65)
    {
LABEL_76:
      if (++v42 == v22)
        goto LABEL_77;
    }
    v44 = 0;
    while (!v66)
    {
LABEL_75:
      if (++v44 == v65)
        goto LABEL_76;
    }
    v45 = 0;
    while (!v67)
    {
LABEL_74:
      if (++v45 == v66)
        goto LABEL_75;
    }
    v83 = 0;
    while (!v73)
    {
LABEL_73:
      if (++v83 == v67)
        goto LABEL_74;
    }
    v79 = 0;
    while (1)
    {
      if (v82)
      {
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v49 = *(_BYTE *)(a1
          if (!a11 || (v50 = a12, v46 != *((_QWORD *)a4[1] - 2)))
            v50 = *(unsigned __int8 *)(a2
          if (!v47 && a7 >= -20)
          {
            v51 = (int)llroundf((float)((float)v49 * (float)v50) * v43) + (uint64_t)v48;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000)
                v48 = v51;
              else
                v48 = -8388608;
              v47 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              v47 = 1;
              v48 = 2139095040;
            }
          }
          ++v46;
        }
        while (v82 != v46);
        v52 = *(float *)(__src.i64[0] + 4 * v79);
        if (v47)
        {
          v53 = INFINITY;
          if (v47 == 2)
            v53 = -INFINITY;
          goto LABEL_68;
        }
        if (v48)
        {
          v53 = (double)v48;
LABEL_68:
          *(float *)&v86 = 0.0;
          v55 = frexp(v53, &v86);
          v56 = ldexp(v55, 11);
          v54 = ldexp(round(v56), v86 - 11);
          goto LABEL_69;
        }
      }
      else
      {
        v52 = *(float *)(__src.i64[0] + 4 * v79);
      }
      v54 = 0.0;
LABEL_69:
      v57 = v52 * v54;
      v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&v86 = 0.0;
        v59 = frexp(v57, &v86);
        v60 = ldexp(v59, 11);
        v58 = ldexp(round(v60), v86 - 11);
      }
      *(float *)&v86 = v58;
      v61 = *(_QWORD *)(a13 + 24);
      if (!v61)
        std::__throw_bad_function_call[abi:ne180100]();
      v62 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v61 + 48))(v61, &v86);
      v64 = MIL::Fp16::FromFloat(v62, v63);
      *(_WORD *)(*a9
               + 2
      if (v79 == v73)
        goto LABEL_73;
    }
  }
LABEL_77:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_20691852C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;
  void *v21;

  v20 = *(void **)(v18 - 160);
  if (v20)
  {
    *(_QWORD *)(v18 - 152) = v20;
    operator delete(v20);
  }
  v21 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,unsigned char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  MIL::Fp16 *Float;
  float v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  MIL::Fp16 *v33;
  float *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  float *v40;
  int v41;
  unint64_t v42;
  float v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  float v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  float v57;
  float v58;
  long double v59;
  double v60;
  uint64_t v61;
  float v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v73;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v79;
  unint64_t v82;
  uint64_t v83;
  __int16 v85;
  int v86;
  int64x2_t __src;
  _QWORD v88[4];

  v88[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v17 = v14 >> 3;
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v18 = *a4;
  v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a5;
  v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v69 = (*a3)[1];
  v70 = **a3;
  v68 = (*a3)[2];
  v82 = (*a3)[4];
  v76 = *((_QWORD *)*a4 + 1);
  v77 = *(_QWORD *)*a4;
  v75 = *((_QWORD *)*a4 + 2);
  v22 = **a5;
  v65 = (*a5)[1];
  v66 = (*a5)[2];
  v23 = (*a5)[4];
  v67 = (*a5)[3];
  v24 = ldexp(1.0, a7);
  v25 = exp2(-(double)(a8 + a7));
  __src = 0uLL;
  v88[0] = 0;
  v73 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  v27 = v25;
  v28 = *a10;
  v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    v85 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&v86 = v30 * v27;
    std::vector<float>::assign((char **)&__src, v73, &v86);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(v86) = MIL::Fp16::FromFloat(Float, *v28);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v86);
      v32 = v31 * v27;
      v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v37 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v38);
          v33 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v39 = 0;
        }
        v40 = (float *)&v39[4 * v35];
        *v40 = v32;
        v34 = v40 + 1;
        while (v33 != Float)
        {
          v41 = *((_DWORD *)v33 - 1);
          v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v88[0] = &v39[4 * v38];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  if (v22)
  {
    v42 = 0;
    v43 = v24;
    while (!v65)
    {
LABEL_85:
      if (++v42 == v22)
        goto LABEL_86;
    }
    v44 = 0;
    while (!v66)
    {
LABEL_84:
      if (++v44 == v65)
        goto LABEL_85;
    }
    v45 = 0;
    while (!v67)
    {
LABEL_83:
      if (++v45 == v66)
        goto LABEL_84;
    }
    v83 = 0;
    while (!v73)
    {
LABEL_82:
      if (++v83 == v67)
        goto LABEL_83;
    }
    v79 = 0;
    while (1)
    {
      if (v82)
      {
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v49 = *(_BYTE *)(a1
          if (!a11 || (v50 = a12, v46 != *((_QWORD *)a4[1] - 2)))
            v50 = *(unsigned __int8 *)(a2
          if (!v47 && a7 >= -20)
          {
            v51 = (int)llroundf((float)((float)v49 * (float)v50) * v43) + (uint64_t)v48;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000)
                v48 = v51;
              else
                v48 = -8388608;
              v47 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              v47 = 1;
              v48 = 2139095040;
            }
          }
          ++v46;
        }
        while (v82 != v46);
        v52 = *(float *)(__src.i64[0] + 4 * v79);
        if (v47)
        {
          v53 = INFINITY;
          if (v47 == 2)
            v53 = -INFINITY;
          goto LABEL_70;
        }
        if (v48)
        {
          v53 = (double)v48;
LABEL_70:
          *(float *)&v86 = 0.0;
          v55 = frexp(v53, &v86);
          v56 = ldexp(v55, 11);
          v54 = ldexp(round(v56), v86 - 11);
          goto LABEL_71;
        }
      }
      else
      {
        v52 = *(float *)(__src.i64[0] + 4 * v79);
      }
      v54 = 0.0;
LABEL_71:
      v57 = v52 * v54;
      v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&v86 = 0.0;
        v59 = frexp(v57, &v86);
        v60 = ldexp(v59, 11);
        v58 = ldexp(round(v60), v86 - 11);
      }
      *(float *)&v86 = v58;
      v61 = *(_QWORD *)(a13 + 24);
      if (!v61)
        std::__throw_bad_function_call[abi:ne180100]();
      v62 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v61 + 48))(v61, &v86);
      if (v62 == INFINITY)
      {
        LOBYTE(v63) = -1;
      }
      else if (v62 == -INFINITY)
      {
        LOBYTE(v63) = 0;
      }
      else
      {
        v64 = llroundf(v62);
        if (v64 >= 255)
          v64 = 255;
        v63 = v64 & ~(v64 >> 31);
      }
      *(_BYTE *)(*a9
      if (v79 == v73)
        goto LABEL_82;
    }
  }
LABEL_86:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206918CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,unsigned char,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  MIL::Fp16 *Float;
  float v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  MIL::Fp16 *v33;
  float *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  float *v40;
  int v41;
  unint64_t v42;
  float v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  float v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  float v57;
  float v58;
  long double v59;
  double v60;
  uint64_t v61;
  float v62;
  char v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v73;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v79;
  unint64_t v82;
  uint64_t v83;
  __int16 v85;
  int v86;
  int64x2_t __src;
  _QWORD v88[4];

  v88[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v17 = v14 >> 3;
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v18 = *a4;
  v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a5;
  v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v69 = (*a3)[1];
  v70 = **a3;
  v68 = (*a3)[2];
  v82 = (*a3)[4];
  v76 = *((_QWORD *)*a4 + 1);
  v77 = *(_QWORD *)*a4;
  v75 = *((_QWORD *)*a4 + 2);
  v22 = **a5;
  v65 = (*a5)[1];
  v66 = (*a5)[2];
  v23 = (*a5)[4];
  v67 = (*a5)[3];
  v24 = ldexp(1.0, a7);
  v25 = exp2(-(double)(a8 + a7));
  __src = 0uLL;
  v88[0] = 0;
  v73 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  v27 = v25;
  v28 = *a10;
  v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    v85 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&v86 = v30 * v27;
    std::vector<float>::assign((char **)&__src, v73, &v86);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(v86) = MIL::Fp16::FromFloat(Float, *v28);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v86);
      v32 = v31 * v27;
      v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v37 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v38);
          v33 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v39 = 0;
        }
        v40 = (float *)&v39[4 * v35];
        *v40 = v32;
        v34 = v40 + 1;
        while (v33 != Float)
        {
          v41 = *((_DWORD *)v33 - 1);
          v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v88[0] = &v39[4 * v38];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  if (v22)
  {
    v42 = 0;
    v43 = v24;
    while (!v65)
    {
LABEL_87:
      if (++v42 == v22)
        goto LABEL_88;
    }
    v44 = 0;
    while (!v66)
    {
LABEL_86:
      if (++v44 == v65)
        goto LABEL_87;
    }
    v45 = 0;
    while (!v67)
    {
LABEL_85:
      if (++v45 == v66)
        goto LABEL_86;
    }
    v83 = 0;
    while (!v73)
    {
LABEL_84:
      if (++v83 == v67)
        goto LABEL_85;
    }
    v79 = 0;
    while (1)
    {
      if (v82)
      {
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v49 = *(_BYTE *)(a1
          if (!a11 || (v50 = a12, v46 != *((_QWORD *)a4[1] - 2)))
            v50 = *(unsigned __int8 *)(a2
          if (!v47 && a7 >= -20)
          {
            v51 = (int)llroundf((float)((float)v49 * (float)v50) * v43) + (uint64_t)v48;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000)
                v48 = v51;
              else
                v48 = -8388608;
              v47 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              v47 = 1;
              v48 = 2139095040;
            }
          }
          ++v46;
        }
        while (v82 != v46);
        v52 = *(float *)(__src.i64[0] + 4 * v79);
        if (v47)
        {
          v53 = INFINITY;
          if (v47 == 2)
            v53 = -INFINITY;
          goto LABEL_70;
        }
        if (v48)
        {
          v53 = (double)v48;
LABEL_70:
          *(float *)&v86 = 0.0;
          v55 = frexp(v53, &v86);
          v56 = ldexp(v55, 11);
          v54 = ldexp(round(v56), v86 - 11);
          goto LABEL_71;
        }
      }
      else
      {
        v52 = *(float *)(__src.i64[0] + 4 * v79);
      }
      v54 = 0.0;
LABEL_71:
      v57 = v52 * v54;
      v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&v86 = 0.0;
        v59 = frexp(v57, &v86);
        v60 = ldexp(v59, 11);
        v58 = ldexp(round(v60), v86 - 11);
      }
      *(float *)&v86 = v58;
      v61 = *(_QWORD *)(a13 + 24);
      if (!v61)
        std::__throw_bad_function_call[abi:ne180100]();
      v62 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v61 + 48))(v61, &v86);
      if (v62 == INFINITY)
      {
        v63 = 127;
      }
      else if (v62 == -INFINITY)
      {
        v63 = 0x80;
      }
      else
      {
        v64 = llroundf(v62);
        if (v64 >= 127)
          v64 = 127;
        if (v64 <= -128)
          v63 = 0x80;
        else
          v63 = v64;
      }
      *(_BYTE *)(*a9
      if (v79 == v73)
        goto LABEL_84;
    }
  }
LABEL_88:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206919478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,signed char,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, _QWORD *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  MIL::Fp16 *Float;
  float v26;
  float *v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  MIL::Fp16 *v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  float *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  char v48;
  int v49;
  int v50;
  uint64_t v51;
  float v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  float v57;
  float v58;
  long double v59;
  double v60;
  uint64_t v61;
  MIL::Fp16 *v62;
  float v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v73;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v82;
  uint64_t v83;
  __int16 v85;
  int __e;
  int64x2_t __src;
  _QWORD v88[4];

  v88[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v17 = v14 >> 3;
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v18 = *a4;
  v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a5;
  v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  v69 = (*a3)[1];
  v70 = **a3;
  v68 = (*a3)[2];
  v82 = (*a3)[4];
  v77 = *((_QWORD *)*a4 + 1);
  v78 = *(_QWORD *)*a4;
  v76 = *((_QWORD *)*a4 + 2);
  v22 = **a5;
  v65 = (*a5)[1];
  v66 = (*a5)[2];
  v23 = (*a5)[4];
  v67 = (*a5)[3];
  v24 = exp2(-(double)(a8 + a7));
  __src = 0uLL;
  v88[0] = 0;
  v73 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  v26 = v24;
  v27 = *a10;
  v28 = a10[1];
  if ((char *)v28 - (char *)*a10 == 4)
  {
    v85 = MIL::Fp16::FromFloat(Float, *v27);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&__e = v29 * v26;
    std::vector<float>::assign((char **)&__src, v73, &__e);
  }
  else
  {
    for (; v27 != v28; ++v27)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v27);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v31 = v30 * v26;
      v32 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v34 = (__src.i64[1] - __src.i64[0]) >> 2;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v36 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v37);
          v32 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v38 = 0;
        }
        v39 = (float *)&v38[4 * v34];
        *v39 = v31;
        v33 = v39 + 1;
        while (v32 != Float)
        {
          v40 = *((_DWORD *)v32 - 1);
          v32 = (MIL::Fp16 *)((char *)v32 - 4);
          *((_DWORD *)v39-- - 1) = v40;
        }
        __src.i64[0] = (uint64_t)v39;
        __src.i64[1] = (uint64_t)v33;
        v88[0] = &v38[4 * v37];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v31;
        v33 = (float *)((char *)v32 + 4);
      }
      __src.i64[1] = (uint64_t)v33;
    }
  }
  if (v22)
  {
    v41 = 0;
    while (!v65)
    {
LABEL_78:
      if (++v41 == v22)
        goto LABEL_79;
    }
    v42 = 0;
    while (!v66)
    {
LABEL_77:
      if (++v42 == v65)
        goto LABEL_78;
    }
    v43 = 0;
    while (!v67)
    {
LABEL_76:
      if (++v43 == v66)
        goto LABEL_77;
    }
    v83 = 0;
    while (!v73)
    {
LABEL_75:
      if (++v83 == v67)
        goto LABEL_76;
    }
    v79 = 0;
    while (1)
    {
      if (v82)
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        do
        {
          v47 = *(char *)(a1
          if (!a11 || (v48 = a12, v44 != *((_QWORD *)a4[1] - 2)))
            v48 = *(_BYTE *)(a2
          if (!v45)
          {
            v49 = v48 * v47;
            if (a7)
            {
              v50 = (v49 + (1 << ~(_BYTE)a7)) >> -(char)a7;
              v49 <<= a7;
              if (a7 < 1)
                v49 = v50;
            }
            v51 = v46 + (uint64_t)v49;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000)
                v46 = v51;
              else
                v46 = -8388608;
              v45 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              v45 = 1;
              v46 = 2139095040;
            }
          }
          ++v44;
        }
        while (v82 != v44);
        v52 = *(float *)(__src.i64[0] + 4 * v79);
        if (v45)
        {
          v53 = INFINITY;
          if (v45 == 2)
            v53 = -INFINITY;
          goto LABEL_70;
        }
        if (v46)
        {
          v53 = (double)v46;
LABEL_70:
          *(float *)&__e = 0.0;
          v55 = frexp(v53, &__e);
          v56 = ldexp(v55, 11);
          v54 = ldexp(round(v56), __e - 11);
          goto LABEL_71;
        }
      }
      else
      {
        v52 = *(float *)(__src.i64[0] + 4 * v79);
      }
      v54 = 0.0;
LABEL_71:
      v57 = v52 * v54;
      v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&__e = 0.0;
        v59 = frexp(v57, &__e);
        v60 = ldexp(v59, 11);
        v58 = ldexp(round(v60), __e - 11);
      }
      *(float *)&__e = v58;
      v61 = *(_QWORD *)(a13 + 24);
      if (!v61)
        std::__throw_bad_function_call[abi:ne180100]();
      v62 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v61 + 48))(v61, &__e);
      v64 = MIL::Fp16::FromFloat(v62, v63);
      *(_WORD *)(*a9
               + 2
      if (v79 == v73)
        goto LABEL_75;
    }
  }
LABEL_79:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_206919BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;
  void *v21;

  v20 = *(void **)(v18 - 144);
  if (v20)
  {
    *(_QWORD *)(v18 - 136) = v20;
    operator delete(v20);
  }
  v21 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,signed char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  MIL::Fp16 *Float;
  float v26;
  float *v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  MIL::Fp16 *v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  float *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  char v48;
  int v49;
  int v50;
  uint64_t v51;
  float v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  float v57;
  float v58;
  long double v59;
  double v60;
  uint64_t v61;
  float v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v73;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v82;
  uint64_t v83;
  __int16 v85;
  int __e;
  int64x2_t __src;
  _QWORD v88[4];

  v88[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v17 = v14 >> 3;
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v18 = *a4;
  v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a5;
  v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v69 = (*a3)[1];
  v70 = **a3;
  v68 = (*a3)[2];
  v82 = (*a3)[4];
  v77 = *((_QWORD *)*a4 + 1);
  v78 = *(_QWORD *)*a4;
  v76 = *((_QWORD *)*a4 + 2);
  v22 = **a5;
  v65 = (*a5)[1];
  v66 = (*a5)[2];
  v23 = (*a5)[4];
  v67 = (*a5)[3];
  v24 = exp2(-(double)(a8 + a7));
  __src = 0uLL;
  v88[0] = 0;
  v73 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  v26 = v24;
  v27 = *a10;
  v28 = a10[1];
  if ((char *)v28 - (char *)*a10 == 4)
  {
    v85 = MIL::Fp16::FromFloat(Float, *v27);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&__e = v29 * v26;
    std::vector<float>::assign((char **)&__src, v73, &__e);
  }
  else
  {
    for (; v27 != v28; ++v27)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v27);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v31 = v30 * v26;
      v32 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v34 = (__src.i64[1] - __src.i64[0]) >> 2;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v36 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v37);
          v32 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v38 = 0;
        }
        v39 = (float *)&v38[4 * v34];
        *v39 = v31;
        v33 = v39 + 1;
        while (v32 != Float)
        {
          v40 = *((_DWORD *)v32 - 1);
          v32 = (MIL::Fp16 *)((char *)v32 - 4);
          *((_DWORD *)v39-- - 1) = v40;
        }
        __src.i64[0] = (uint64_t)v39;
        __src.i64[1] = (uint64_t)v33;
        v88[0] = &v38[4 * v37];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v31;
        v33 = (float *)((char *)v32 + 4);
      }
      __src.i64[1] = (uint64_t)v33;
    }
  }
  if (v22)
  {
    v41 = 0;
    while (!v65)
    {
LABEL_87:
      if (++v41 == v22)
        goto LABEL_88;
    }
    v42 = 0;
    while (!v66)
    {
LABEL_86:
      if (++v42 == v65)
        goto LABEL_87;
    }
    v43 = 0;
    while (!v67)
    {
LABEL_85:
      if (++v43 == v66)
        goto LABEL_86;
    }
    v83 = 0;
    while (!v73)
    {
LABEL_84:
      if (++v83 == v67)
        goto LABEL_85;
    }
    v79 = 0;
    while (1)
    {
      if (v82)
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        do
        {
          v47 = *(char *)(a1
          if (!a11 || (v48 = a12, v44 != *((_QWORD *)a4[1] - 2)))
            v48 = *(_BYTE *)(a2
          if (!v45)
          {
            v49 = v48 * v47;
            if (a7)
            {
              v50 = (v49 + (1 << ~(_BYTE)a7)) >> -(char)a7;
              v49 <<= a7;
              if (a7 < 1)
                v49 = v50;
            }
            v51 = v46 + (uint64_t)v49;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000)
                v46 = v51;
              else
                v46 = -8388608;
              v45 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              v45 = 1;
              v46 = 2139095040;
            }
          }
          ++v44;
        }
        while (v82 != v44);
        v52 = *(float *)(__src.i64[0] + 4 * v79);
        if (v45)
        {
          v53 = INFINITY;
          if (v45 == 2)
            v53 = -INFINITY;
          goto LABEL_72;
        }
        if (v46)
        {
          v53 = (double)v46;
LABEL_72:
          *(float *)&__e = 0.0;
          v55 = frexp(v53, &__e);
          v56 = ldexp(v55, 11);
          v54 = ldexp(round(v56), __e - 11);
          goto LABEL_73;
        }
      }
      else
      {
        v52 = *(float *)(__src.i64[0] + 4 * v79);
      }
      v54 = 0.0;
LABEL_73:
      v57 = v52 * v54;
      v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&__e = 0.0;
        v59 = frexp(v57, &__e);
        v60 = ldexp(v59, 11);
        v58 = ldexp(round(v60), __e - 11);
      }
      *(float *)&__e = v58;
      v61 = *(_QWORD *)(a13 + 24);
      if (!v61)
        std::__throw_bad_function_call[abi:ne180100]();
      v62 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v61 + 48))(v61, &__e);
      if (v62 == INFINITY)
      {
        LOBYTE(v63) = -1;
      }
      else if (v62 == -INFINITY)
      {
        LOBYTE(v63) = 0;
      }
      else
      {
        v64 = llroundf(v62);
        if (v64 >= 255)
          v64 = 255;
        v63 = v64 & ~(v64 >> 31);
      }
      *(_BYTE *)(*a9
      if (v79 == v73)
        goto LABEL_84;
    }
  }
LABEL_88:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_20691A37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<signed char,signed char,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  unint64_t *v13;
  uint64_t v14;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  MIL::Fp16 *Float;
  float v26;
  float *v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  MIL::Fp16 *v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  float *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  char v48;
  int v49;
  int v50;
  uint64_t v51;
  float v52;
  double v53;
  float v54;
  long double v55;
  double v56;
  float v57;
  float v58;
  long double v59;
  double v60;
  uint64_t v61;
  float v62;
  char v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v73;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v82;
  uint64_t v83;
  __int16 v85;
  int __e;
  int64x2_t __src;
  _QWORD v88[4];

  v88[2] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F)
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F)
  v17 = v14 >> 3;
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v18 = *a4;
  v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a5;
  v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6)
    std::vector<unsigned char>::__append(a9, a6);
  v69 = (*a3)[1];
  v70 = **a3;
  v68 = (*a3)[2];
  v82 = (*a3)[4];
  v77 = *((_QWORD *)*a4 + 1);
  v78 = *(_QWORD *)*a4;
  v76 = *((_QWORD *)*a4 + 2);
  v22 = **a5;
  v65 = (*a5)[1];
  v66 = (*a5)[2];
  v23 = (*a5)[4];
  v67 = (*a5)[3];
  v24 = exp2(-(double)(a8 + a7));
  __src = 0uLL;
  v88[0] = 0;
  v73 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  v26 = v24;
  v27 = *a10;
  v28 = a10[1];
  if ((char *)v28 - (char *)*a10 == 4)
  {
    v85 = MIL::Fp16::FromFloat(Float, *v27);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&__e = v29 * v26;
    std::vector<float>::assign((char **)&__src, v73, &__e);
  }
  else
  {
    for (; v27 != v28; ++v27)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v27);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      v31 = v30 * v26;
      v32 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        v34 = (__src.i64[1] - __src.i64[0]) >> 2;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v36 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v37);
          v32 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v38 = 0;
        }
        v39 = (float *)&v38[4 * v34];
        *v39 = v31;
        v33 = v39 + 1;
        while (v32 != Float)
        {
          v40 = *((_DWORD *)v32 - 1);
          v32 = (MIL::Fp16 *)((char *)v32 - 4);
          *((_DWORD *)v39-- - 1) = v40;
        }
        __src.i64[0] = (uint64_t)v39;
        __src.i64[1] = (uint64_t)v33;
        v88[0] = &v38[4 * v37];
        if (Float)
          operator delete(Float);
      }
      else
      {
        *(float *)__src.i64[1] = v31;
        v33 = (float *)((char *)v32 + 4);
      }
      __src.i64[1] = (uint64_t)v33;
    }
  }
  if (v22)
  {
    v41 = 0;
    while (!v65)
    {
LABEL_89:
      if (++v41 == v22)
        goto LABEL_90;
    }
    v42 = 0;
    while (!v66)
    {
LABEL_88:
      if (++v42 == v65)
        goto LABEL_89;
    }
    v43 = 0;
    while (!v67)
    {
LABEL_87:
      if (++v43 == v66)
        goto LABEL_88;
    }
    v83 = 0;
    while (!v73)
    {
LABEL_86:
      if (++v83 == v67)
        goto LABEL_87;
    }
    v79 = 0;
    while (1)
    {
      if (v82)
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        do
        {
          v47 = *(char *)(a1
          if (!a11 || (v48 = a12, v44 != *((_QWORD *)a4[1] - 2)))
            v48 = *(_BYTE *)(a2
          if (!v45)
          {
            v49 = v48 * v47;
            if (a7)
            {
              v50 = (v49 + (1 << ~(_BYTE)a7)) >> -(char)a7;
              v49 <<= a7;
              if (a7 < 1)
                v49 = v50;
            }
            v51 = v46 + (uint64_t)v49;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000)
                v46 = v51;
              else
                v46 = -8388608;
              v45 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              v45 = 1;
              v46 = 2139095040;
            }
          }
          ++v44;
        }
        while (v82 != v44);
        v52 = *(float *)(__src.i64[0] + 4 * v79);
        if (v45)
        {
          v53 = INFINITY;
          if (v45 == 2)
            v53 = -INFINITY;
          goto LABEL_72;
        }
        if (v46)
        {
          v53 = (double)v46;
LABEL_72:
          *(float *)&__e = 0.0;
          v55 = frexp(v53, &__e);
          v56 = ldexp(v55, 11);
          v54 = ldexp(round(v56), __e - 11);
          goto LABEL_73;
        }
      }
      else
      {
        v52 = *(float *)(__src.i64[0] + 4 * v79);
      }
      v54 = 0.0;
LABEL_73:
      v57 = v52 * v54;
      v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&__e = 0.0;
        v59 = frexp(v57, &__e);
        v60 = ldexp(v59, 11);
        v58 = ldexp(round(v60), __e - 11);
      }
      *(float *)&__e = v58;
      v61 = *(_QWORD *)(a13 + 24);
      if (!v61)
        std::__throw_bad_function_call[abi:ne180100]();
      v62 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v61 + 48))(v61, &__e);
      if (v62 == INFINITY)
      {
        v63 = 127;
      }
      else if (v62 == -INFINITY)
      {
        v63 = 0x80;
      }
      else
      {
        v64 = llroundf(v62);
        if (v64 >= 127)
          v64 = 127;
        if (v64 <= -128)
          v63 = 0x80;
        else
          v63 = v64;
      }
      *(_BYTE *)(*a9
      if (v79 == v73)
        goto LABEL_86;
    }
  }
LABEL_90:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_20691AB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::NeBatchMatmulCpu::~NeBatchMatmulCpu(MIL::ANEMachineIR::Interpreter::NeBatchMatmulCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

uint64_t MIL::ANEMachineIR::Interpreter::`anonymous namespace'::GetRank5TensorIndex(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1[1] - *a1 != 40)
  return a6
       + (a5
        + (a4 + *(_QWORD *)(*a1 + 16) * a3 + *(_QWORD *)(*a1 + 8) * a2 * *(_QWORD *)(*a1 + 16))
        * *(_QWORD *)(*a1 + 24))
       * *(_QWORD *)(*a1 + 32);
}

void OUTLINED_FUNCTION_0_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 64, a4);
}

void OUTLINED_FUNCTION_1_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 65, a4);
}

void OUTLINED_FUNCTION_2_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 63, a4);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,MIL::Fp16>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_1("ComputeValue", "NeBatchMatmulCpu.cpp", a3, "o_shape.size() >= 3 && o_shape.size() <= 5");
}

{
  OUTLINED_FUNCTION_0_2("ComputeValue", "NeBatchMatmulCpu.cpp", a3, "y_shape.size() >= 3 && y_shape.size() <= 5");
}

{
  OUTLINED_FUNCTION_2_2("ComputeValue", "NeBatchMatmulCpu.cpp", a3, "x_shape.size() >= 3 && x_shape.size() <= 5");
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::GetRank5TensorIndex()
{
  __assert_rtn("GetRank5TensorIndex", "NeBatchMatmulCpu.cpp", 43, "shape5d.size() == 5");
}

void MilTranslator::MilTranslator::~MilTranslator(MilTranslator::MilTranslator *this)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

_QWORD *MilTranslator::MilTranslator::MilTranslator(_QWORD *result, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = a2[1];
  *result = *a2;
  result[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[2] = a3;
  v7 = a4[1];
  result[3] = *a4;
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void MilTranslator::MilTranslator::Compile(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t Function;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const void ***v31;
  uint64_t v32;
  __int128 **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string v37;
  uint64_t v38[3];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  _BYTE v47[336];
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::string *v50;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 48))(&v48);
  Function = MIL::IRProgram::GetFunction();
  v45 = v48;
  v46 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)a1[1];
  v43 = *a1;
  v44 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  MilTranslator::OpTranslator::OpTranslator(v47, &v45, &v43, a4, a1[2], a3, 1);
  v16 = v44;
  if (v44)
  {
    v17 = (unint64_t *)&v44->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v46;
  if (v46)
  {
    v20 = (unint64_t *)&v46->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  MilTranslator::OpTranslator::Translate((MilTranslator::OpTranslator *)v47, Function, a5);
  if (!*(_DWORD *)a5)
  {
    if (*(char *)(a5 + 31) < 0)
      operator delete(*(void **)(a5 + 8));
    MilTranslator::OpTranslator::GetBlockBuilder((uint64_t)v47, &v41);
    v25 = a1[3];
    v39 = v41;
    v40 = v42;
    if (v42)
    {
      v26 = (unint64_t *)&v42->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    MilTranslator::Passes::PassManager::Run(v25, &v39, a5);
    v28 = v40;
    if (v40)
    {
      v29 = (unint64_t *)&v40->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (!*(_DWORD *)a5)
    {
      if (*(char *)(a5 + 31) < 0)
        operator delete(*(void **)(a5 + 8));
      v31 = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 128))(Function);
      std::map<std::string,MIL::IRValueType const*>::map[abi:ne180100](v38, v31);
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
      v33 = (__int128 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 88))(v32);
      memset(&v37, 0, sizeof(v37));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v37, *v33, v33[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v33[1] - (char *)*v33) >> 3));
      MilTranslator::OpTranslator::ConstructProgram((uint64_t)v47, a2, v38, (uint64_t *)&v37, a5);
      if (!*(_DWORD *)a5)
      {
        if (*(char *)(a5 + 31) < 0)
          operator delete(*(void **)(a5 + 8));
        *(_DWORD *)a5 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a5 + 8), (char *)&unk_2069A5097);
      }
      v50 = &v37;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)v38, (char *)v38[1]);
    }
    v34 = v42;
    if (v42)
    {
      v35 = (unint64_t *)&v42->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  MilTranslator::OpTranslator::~OpTranslator((MilTranslator::OpTranslator *)v47);
  v22 = v49;
  if (v49)
  {
    v23 = (unint64_t *)&v49->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_20691B028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, char *);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  *(_QWORD *)(v6 - 72) = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 72));
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)va, v10);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  MilTranslator::OpTranslator::~OpTranslator((MilTranslator::OpTranslator *)va2);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v6 - 88);
  _Unwind_Resume(a1);
}

uint64_t MilTranslator::RegisterDefaultOptimizationPasses(_QWORD **a1)
{
  _QWORD *v1;
  MilTranslator::Passes::FuseConvScale *v2;
  uint64_t result;
  MilTranslator::Passes::FuseConvScale *v4;

  v1 = *a1;
  v2 = (MilTranslator::Passes::FuseConvScale *)operator new();
  MilTranslator::Passes::FuseConvScale::FuseConvScale(v2);
  v4 = v2;
  MilTranslator::Passes::PassManager::Register(v1, (uint64_t *)&v4);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20691B11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void MilTranslator::TranslateProgram(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *exception;
  int v39;
  void *__p;
  char v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  _QWORD *v47[2];
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;

  v10 = (std::__shared_weak_count *)operator new(0x38uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24BFEB6F0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)off_24BFEB740;
  v10[1].__shared_weak_owners_ = 0;
  v10[2].__vftable = 0;
  v10[1].__shared_owners_ = 0;
  v48 = v10 + 1;
  v49 = v10;
  v47[0] = &v10[1].__vftable;
  v47[1] = &v10->__vftable;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  MilTranslator::RegisterDefaultOptimizationPasses(v47);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  v14 = *a1;
  v15 = (std::__shared_weak_count *)a1[1];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = v48;
  v19 = v49;
  if (v49)
  {
    v20 = (unint64_t *)&v49->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v42 = v14;
  v43 = v15;
  if (v15)
  {
    v22 = (unint64_t *)&v15->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v44 = a2;
  v45 = v18;
  v46 = v19;
  if (v19)
  {
    v24 = (unint64_t *)&v19->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v15)
  {
    v27 = (unint64_t *)&v15->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *a5 = 0;
  MilTranslator::MilTranslator::Compile(&v42, a5, a3, a4, (uint64_t)&v39);
  if (v39)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x20BCFEF9C](exception, &__p);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (v41 < 0)
    operator delete(__p);
  v29 = v46;
  if (v46)
  {
    v30 = (unint64_t *)&v46->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v43;
  if (v43)
  {
    v33 = (unint64_t *)&v43->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v49;
  if (v49)
  {
    v36 = (unint64_t *)&v49->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20691B418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;

  if (a16 < 0)
    operator delete(__p);
  v25 = *v22;
  *v22 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v23 - 80);
  _Unwind_Resume(a1);
}

void MilTranslator::TranslateProgram(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  MIL::MILContext *v10;
  ANEMachineIR::H2020::Opsets *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count_vtbl *v13;
  MIL::ParserOptions *v14;
  ANEMachineIR::H2020::Opsets *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count_vtbl *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  ANEMachineIR::H2020::Opsets *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29[3];
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::string v32;
  ANEMachineIR::H2020::Opsets *v33;
  ANEMachineIR::H2020::Opsets *v34;
  std::__shared_weak_count *v35;

  MIL::MILContext::Make((MIL::MILContext *)a1);
  v11 = v33;
  v34 = v33;
  if (v33)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v13 = (std::__shared_weak_count_vtbl *)v33;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEB770;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = v13;
  }
  else
  {
    v12 = 0;
  }
  v35 = v12;
  v14 = (MIL::ParserOptions *)register_aneflow_opsets(v11, v10);
  MIL::ParserOptions::Make(v14);
  v15 = v33;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v32 = *(std::string *)a1;
  (*(void (**)(ANEMachineIR::H2020::Opsets *, std::string *))(*(_QWORD *)v15 + 48))(v15, &v32);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  (*(void (**)(ANEMachineIR::H2020::Opsets *, uint64_t))(*(_QWORD *)v33 + 64))(v33, 1);
  v29[2] = (uint64_t)v11;
  v30 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  MIL::Text::ParseProgramFromFile();
  if (v30)
  {
    v18 = &v30->__shared_owners_;
    do
      v19 = __ldaxr((unint64_t *)v18);
    while (__stlxr(v19 - 1, (unint64_t *)v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v29[0] = v31;
  if (v31)
  {
    v20 = (std::__shared_weak_count *)operator new();
    v21 = (std::__shared_weak_count_vtbl *)v31;
    v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEB7D0;
    v20->__shared_owners_ = 0;
    v20->__shared_weak_owners_ = 0;
    v20[1].__vftable = v21;
  }
  else
  {
    v20 = 0;
  }
  v29[1] = (uint64_t)v20;
  v31 = 0;
  MilTranslator::TranslateProgram(v29, a2, a3, a4, a5);
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v24 = v31;
  v31 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v33;
  v33 = 0;
  if (v25)
    (*(void (**)(ANEMachineIR::H2020::Opsets *))(*(_QWORD *)v25 + 8))(v25);
  v26 = v35;
  if (v35)
  {
    v27 = (unint64_t *)&v35->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_20691B710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void MilTranslator::CheckSupportedOps()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_20691B7FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20691B84C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,MIL::IRValueType const*>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,MIL::IRValueType const*>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,MIL::IRValueType const*>,std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_20691B89C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,MIL::IRValueType const*>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,MIL::IRValueType const*>,std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__construct_node<std::pair<std::string const,MIL::IRValueType const*> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

void std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__construct_node<std::pair<std::string const,MIL::IRValueType const*> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_20691BBD8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

MilTranslator::Passes::FuseConvScale *MilTranslator::Passes::FuseConvScale::FuseConvScale(MilTranslator::Passes::FuseConvScale *this)
{
  _OWORD v3[2];
  int v4;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "FuseConvScale");
  memset(v3, 0, sizeof(v3));
  v4 = 1065353216;
  MilTranslator::Passes::Pass::Pass((uint64_t)this, (__int128 *)__p, (uint64_t)v3);
  *(_QWORD *)this = off_24BFEB668;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v3);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = &unk_24BFEC0B0;
  return this;
}

void sub_20691BF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t MilTranslator::Passes::Pass::Pass(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  *(_QWORD *)a1 = off_24BFEB6C8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  std::unordered_set<std::string>::unordered_set(a1 + 32, a3);
  return a1;
}

void sub_20691BFA0(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void MilTranslator::Passes::PatternPass::Apply(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD v23[3];
  void **v24;

  v6 = (void **)(a3 + 8);
  while (1)
  {
    v7 = (std::__shared_weak_count *)a2[1];
    v21 = *a2;
    v22 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(v23, a1, &v21);
    v10 = v22;
    if (v22)
    {
      v11 = (unint64_t *)&v22->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v23[0] == v23[1])
    {
      v24 = (void **)v23;
      std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&v24);
      *(_DWORD *)a3 = 0;
      std::string::basic_string[abi:ne180100]<0>(v6, (char *)&unk_2069A5097);
      return;
    }
    v13 = (std::__shared_weak_count *)a2[1];
    v19 = *a2;
    v20 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)a1 + 32))(a1, &v19, v23);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (*(_DWORD *)a3)
      break;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*v6);
    v24 = (void **)v23;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&v24);
  }
  v24 = (void **)v23;
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&v24);
}

void sub_20691C150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a16 = (void **)&a13;
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_20691C1E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MilTranslator::Passes::PassManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24BFEB6F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MilTranslator::Passes::PassManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24BFEB6F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_emplace<MilTranslator::Passes::PassManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void MilTranslator::Passes::PassManager::~PassManager(MilTranslator::Passes::PassManager *this)
{
  void **v1;

  *(_QWORD *)this = off_24BFEB740;
  v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<MilTranslator::Passes::Pass>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_24BFEB740;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<MilTranslator::Passes::Pass>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x20BCFF140](this, 0xA1C4030951706);
}

void std::vector<std::unique_ptr<MilTranslator::Passes::Pass>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_pointer<MIL::MILContext  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<MIL::IRProgram  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BCFF140);
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void ANEMachineIR::Validators::ValidateBaseActivation(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  MIL::IRValueType *Type;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  MIL::IRValueType *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  MIL::IRValueType *v22;
  uint64_t v23;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  void *v46[2];
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  void *__p;
  char v51;
  void *v52[2];
  char v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *v56[2];
  char v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *v60[2];
  char v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  void *v64;
  _BYTE *v65;
  uint64_t v66;
  _QWORD **v67;
  _BYTE *v68;
  uint64_t v69;

  std::string::basic_string[abi:ne180100]<0>(&v64, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v5 = MIL::IRValueType::AsTensorType(ParameterType);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
  v67 = 0;
  v68 = 0;
  v69 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v67, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
  if (SHIBYTE(v66) < 0)
    operator delete(v64);
  v7 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 176))(a1);
  if (*(_QWORD *)(v7 + 8) == *(_QWORD *)v7)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v7);
  v9 = MIL::IRValueType::AsTensorType(Type);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v64 = 0;
  v65 = 0;
  v66 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v64, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
  v11 = (v68 - (_BYTE *)v67) >> 3;
  if (v11 != (v65 - (_BYTE *)v64) >> 3)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v25 = (std::__shared_weak_count *)LocationPtr[1];
    v62 = *LocationPtr;
    v63 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v60, "Activation input and output must have same rank.");
    MEMORY[0x20BCFEAD4](a2, &v62, 319, v60);
    if (v61 < 0)
      operator delete(v60[0]);
    v28 = v63;
    if (!v63)
      goto LABEL_59;
    v29 = (unint64_t *)&v63->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
LABEL_57:
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    goto LABEL_59;
  }
  if (v68 != (_BYTE *)v67)
  {
    v12 = 0;
    if (v11 <= 1)
      v13 = 1;
    else
      v13 = (v68 - (_BYTE *)v67) >> 3;
    while (1)
    {
      if (v12 >= (v68 - (_BYTE *)v67) >> 3)
        goto LABEL_64;
      if (!(*(uint64_t (**)(_QWORD *))(*v67[v12] + 16))(v67[v12]))
        break;
      if (v12 >= (v65 - (_BYTE *)v64) >> 3)
LABEL_64:
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      if (!(*(uint64_t (**)(_QWORD))(**((_QWORD **)v64 + v12) + 16))(*((_QWORD *)v64 + v12)))
        break;
      if (v12 >= (v65 - (_BYTE *)v64) >> 3)
        goto LABEL_64;
      v14 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v64 + v12));
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
      if (v12 >= (v68 - (_BYTE *)v67) >> 3)
        goto LABEL_64;
      v16 = v15;
      v17 = MIL::IRDimension::AsConstant((MIL::IRDimension *)v67[v12]);
      if (v16 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17))
      {
        v41 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
        v42 = (std::__shared_weak_count *)v41[1];
        v54 = *v41;
        v55 = v42;
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        std::string::basic_string[abi:ne180100]<0>(v52, "Activation input and output must have same shape.");
        MEMORY[0x20BCFEAD4](a2, &v54, 319, v52);
        if (v53 < 0)
          operator delete(v52[0]);
        v28 = v55;
        if (v55)
        {
          v45 = (unint64_t *)&v55->__shared_owners_;
          do
            v30 = __ldaxr(v45);
          while (__stlxr(v30 - 1, v45));
          goto LABEL_57;
        }
        goto LABEL_59;
      }
      if (v13 == ++v12)
        goto LABEL_17;
    }
    v31 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v32 = (std::__shared_weak_count *)v31[1];
    v58 = *v31;
    v59 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    std::string::basic_string[abi:ne180100]<0>(v56, "Activation input and output must have known shape.");
    MEMORY[0x20BCFEAD4](a2, &v58, 319, v56);
    if (v57 < 0)
      operator delete(v56[0]);
    v28 = v59;
    if (v59)
    {
      v35 = (unint64_t *)&v59->__shared_owners_;
      do
        v30 = __ldaxr(v35);
      while (__stlxr(v30 - 1, v35));
      goto LABEL_57;
    }
    goto LABEL_59;
  }
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  v18 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v19 = MIL::IRValueType::AsTensorType(v18);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19);
  if (v51 < 0)
    operator delete(__p);
  v21 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 176))(a1);
  if (*(_QWORD *)(v21 + 8) == *(_QWORD *)v21)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v22 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v21);
  v23 = MIL::IRValueType::AsTensorType(v22);
  if (v20 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 88))(v23))
  {
    MIL::ValidationResult::ValidationResult(a2);
    goto LABEL_59;
  }
  v36 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  v37 = (std::__shared_weak_count *)v36[1];
  v48 = *v36;
  v49 = v37;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  std::string::basic_string[abi:ne180100]<0>(v46, "Activation inputs and outputs must have same data type.");
  MEMORY[0x20BCFEAD4](a2, &v48, 304, v46);
  if (v47 < 0)
    operator delete(v46[0]);
  v28 = v49;
  if (v49)
  {
    v40 = (unint64_t *)&v49->__shared_owners_;
    do
      v30 = __ldaxr(v40);
    while (__stlxr(v30 - 1, v40));
    goto LABEL_57;
  }
LABEL_59:
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
}

void sub_20691C8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  uint64_t v38;
  void *v40;
  void *v41;

  if (a29 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  v40 = *(void **)(v38 - 96);
  if (v40)
  {
    *(_QWORD *)(v38 - 88) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(v38 - 72);
  if (v41)
  {
    *(_QWORD *)(v38 - 64) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::Validators::ValidateLinear@<X0>(MIL::IRObject *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[8];
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  int v8;

  ANEMachineIR::Validators::ValidateBaseActivation(a1, (MIL::ValidationResult *)v4);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)v4) & 1) != 0)
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v5;
    v5 = 0uLL;
    *(_OWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 40) = v7;
    v6 = 0uLL;
    v7 = 0;
    *(_QWORD *)a2 = MEMORY[0x24BE620D8] + 16;
    *(_DWORD *)(a2 + 48) = v8;
  }
  return MEMORY[0x20BCFEAEC](v4);
}

uint64_t ANEMachineIR::Validators::ValidateLrelu@<X0>(MIL::IRObject *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *LocationPtr;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16[2];
  char v17;
  _QWORD v18[2];
  char v19;
  float v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;
  char v27;
  float v28;
  char v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;

  ANEMachineIR::Validators::ValidateBaseActivation(a1, (MIL::ValidationResult *)v29);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)v29) & 1) != 0)
  {
    v28 = 1.0;
    v27 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "scale");
    MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<float>(a1, &v27, &v28, (MIL::ValidationResult *)a2);
    if (v26 < 0)
      operator delete(__p[0]);
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2))
    {
      MEMORY[0x20BCFEAEC](a2);
      if (!v27 || v28 == 1.0)
      {
        v20 = 0.3;
        v19 = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
        MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<float>(a1, &v19, &v20, (MIL::ValidationResult *)a2);
        if (v26 < 0)
          operator delete(__p[0]);
        if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2))
        {
          MEMORY[0x20BCFEAEC](a2);
          if (v19 && (v20 <= 0.0 || v20 >= 1.0))
          {
            LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
            v13 = LocationPtr[1];
            v18[0] = *LocationPtr;
            v18[1] = v13;
            if (v13)
            {
              v14 = (unint64_t *)(v13 + 8);
              do
                v15 = __ldxr(v14);
              while (__stxr(v15 + 1, v14));
            }
            std::string::basic_string[abi:ne180100]<0>(v16, "Alpha is out of range (0 < alpha < 1).");
            MEMORY[0x20BCFEAD4](a2, v18, 319, v16);
            if (v17 < 0)
              operator delete(v16[0]);
            std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)v18);
          }
          else
          {
            MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
          }
        }
      }
      else
      {
        v4 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
        v5 = (std::__shared_weak_count *)v4[1];
        v23 = *v4;
        v24 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        std::string::basic_string[abi:ne180100]<0>(v21, "Scale must be 1, otherwise convert scale into post_scale and alpha. This restriction is an arbitrary behavior of pyANE compiler");
        MEMORY[0x20BCFEAD4](a2, &v23, 319, v21);
        if (v22 < 0)
          operator delete(v21[0]);
        v8 = v24;
        if (v24)
        {
          v9 = (unint64_t *)&v24->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v30;
    v30 = 0uLL;
    *(_OWORD *)(a2 + 24) = v31;
    *(_QWORD *)(a2 + 40) = v32;
    v31 = 0uLL;
    v32 = 0;
    *(_QWORD *)a2 = MEMORY[0x24BE620D8] + 16;
    *(_DWORD *)(a2 + 48) = v33;
  }
  return MEMORY[0x20BCFEAEC](v29);
}

void sub_20691CD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  MEMORY[0x20BCFEAEC](v31 - 72);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<float>(MIL::IRObject *a1@<X0>, _BYTE *a2@<X2>, _DWORD *a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t ParameterValue;
  _DWORD *v9;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;
  void *__p[2];
  std::string::size_type v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (!ParameterValue)
  {
    *a2 = 0;
    goto LABEL_29;
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue))
  {
    v9 = (_DWORD *)MEMORY[0x20BCFEEAC]();
    if (v9)
    {
      *a3 = *v9;
      *a2 = 1;
LABEL_29:
      MIL::ValidationResult::ValidationResult(a4);
      return;
    }
  }
  *a2 = 0;
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  v11 = (std::__shared_weak_count *)LocationPtr[1];
  v32 = *LocationPtr;
  v33 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  std::operator+<char>();
  v14 = std::string::append(&v27, "\" in operation \"");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
  v17 = *(char *)(v16 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)v16;
  else
    v18 = *(const std::string::value_type **)v16;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(v16 + 23);
  else
    v19 = *(_QWORD *)(v16 + 8);
  v20 = std::string::append(&v28, v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v29, "\".");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v31 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x20BCFEAD4](a4, &v32, 304, __p);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v24 = v33;
  if (v33)
  {
    v25 = (unint64_t *)&v33->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_20691CFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v35 - 64);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::Validators::ValidateNePiecewiseV2@<X0>(MIL::IRObject *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::Fp16 *v4;
  __int16 v5;
  uint64_t ParameterValue;
  __int16 *v7;
  MIL::Fp16 *v8;
  __int16 v9;
  uint64_t v10;
  __int16 *v11;
  MIL::Fp16 *v12;
  __int16 v13;
  uint64_t v14;
  __int16 *v15;
  MIL::Fp16 *v16;
  __int16 v17;
  uint64_t v18;
  __int16 *v19;
  MIL::Fp16 *v20;
  __int16 v21;
  uint64_t v22;
  __int16 *v23;
  MIL::Fp16 *v24;
  __int16 v25;
  uint64_t v26;
  __int16 *v27;
  MIL::Fp16 *v28;
  __int16 v29;
  uint64_t v30;
  __int16 *v31;
  MIL::Fp16 *v32;
  __int16 v33;
  uint64_t v34;
  __int16 *v35;
  uint64_t v36;
  _BYTE *v37;
  _BOOL4 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  float v43;
  float v44;
  float v45;
  float v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  float v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  float v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  float v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  _BOOL4 v74;
  _BOOL4 v75;
  float v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  void *v86[2];
  char v87;
  _QWORD v88[2];
  void *v89[2];
  char v90;
  _QWORD v91[2];
  void *v92[2];
  char v93;
  _QWORD v94[2];
  void *v95[2];
  char v96;
  _QWORD v97[2];
  void *v98[2];
  char v99;
  _QWORD v100[2];
  void *__p[2];
  char v102;
  _QWORD v103[2];
  void *v104[2];
  char v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string v108;
  void *v109;
  char v110;
  __int16 v111;
  __int16 v112;
  __int16 v113;
  __int16 v114;
  __int16 v115;
  __int16 v116;
  __int16 v117;
  std::string v118;
  __int16 v119;
  char v120[8];
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  int v124;

  ANEMachineIR::Validators::ValidateBaseActivation(a1, (MIL::ValidationResult *)v120);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)v120) & 1) == 0)
  {
    v39 = v122;
    *(_OWORD *)(a2 + 8) = v121;
    v121 = 0uLL;
    *(_OWORD *)(a2 + 24) = v39;
    *(_QWORD *)(a2 + 40) = v123;
    v122 = 0uLL;
    v123 = 0;
    *(_QWORD *)a2 = MEMORY[0x24BE620D8] + 16;
    *(_DWORD *)(a2 + 48) = v124;
    return MEMORY[0x20BCFEAEC](v120);
  }
  v4 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v118, "x_sat_left");
  v5 = MIL::Fp16::FromFloat(v4, 0.0);
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue))
    {
      v7 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v7)
        v5 = *v7;
    }
  }
  v119 = v5;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  v8 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v118, "x_sat_right");
  v9 = MIL::Fp16::FromFloat(v8, 0.0);
  v10 = MIL::IROperation::TryGetParameterValue();
  if (v10)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10))
    {
      v11 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v11)
        v9 = *v11;
    }
  }
  v117 = v9;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  v12 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v118, "y_sat_left");
  v13 = MIL::Fp16::FromFloat(v12, 0.0);
  v14 = MIL::IROperation::TryGetParameterValue();
  if (v14)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14))
    {
      v15 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v15)
        v13 = *v15;
    }
  }
  v116 = v13;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  v16 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v118, "y_sat_right");
  v17 = MIL::Fp16::FromFloat(v16, 0.0);
  v18 = MIL::IROperation::TryGetParameterValue();
  if (v18)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18))
    {
      v19 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v19)
        v17 = *v19;
    }
  }
  v115 = v17;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  v20 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v118, "slope_left");
  v21 = MIL::Fp16::FromFloat(v20, 0.0);
  v22 = MIL::IROperation::TryGetParameterValue();
  if (v22)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22))
    {
      v23 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v23)
        v21 = *v23;
    }
  }
  v114 = v21;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  v24 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v118, "slope_right");
  v25 = MIL::Fp16::FromFloat(v24, 0.0);
  v26 = MIL::IROperation::TryGetParameterValue();
  if (v26)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26))
    {
      v27 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v27)
        v25 = *v27;
    }
  }
  v113 = v25;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  v28 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v118, "intercept_left");
  v29 = MIL::Fp16::FromFloat(v28, 0.0);
  v30 = MIL::IROperation::TryGetParameterValue();
  if (v30)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30))
    {
      v31 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v31)
        v29 = *v31;
    }
  }
  v112 = v29;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  v32 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v118, "intercept_right");
  v33 = MIL::Fp16::FromFloat(v32, 0.0);
  v34 = MIL::IROperation::TryGetParameterValue();
  if (v34)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34))
    {
      v35 = (__int16 *)MEMORY[0x20BCFEE7C]();
      if (v35)
        v33 = *v35;
    }
  }
  v111 = v33;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v118, "in_abs");
  v36 = MIL::IROperation::TryGetParameterValue();
  v38 = v36
     && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36)
     && (v37 = (_BYTE *)MEMORY[0x20BCFEEA0]()) != 0
     && *v37 != 0;
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v109, "lut_mode");
  std::string::basic_string[abi:ne180100]<0>(&v108, "sqrt");
  v40 = MIL::IROperation::TryGetParameterValue();
  if (v40 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40) && (v41 = MEMORY[0x20BCFEE88]()) != 0)
  {
    if (*(char *)(v41 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)v41, *(_QWORD *)(v41 + 8));
    }
    else
    {
      v42 = *(_OWORD *)v41;
      v118.__r_.__value_.__r.__words[2] = *(_QWORD *)(v41 + 16);
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v42;
    }
  }
  else
  {
    v118 = v108;
    memset(&v108, 0, sizeof(v108));
  }
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (v110 < 0)
    operator delete(v109);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v119);
  v44 = v43;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v117);
  if (v44 >= v45)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v53 = (std::__shared_weak_count *)LocationPtr[1];
    v106 = *LocationPtr;
    v107 = v53;
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(p_shared_owners);
      while (__stxr(v55 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v104, "x_sat_left should be smaller than x_sat_right");
    MEMORY[0x20BCFEAD4](a2, &v106, 319, v104);
    if (v105 < 0)
      operator delete(v104[0]);
    v56 = v107;
    if (v107)
    {
      v57 = (unint64_t *)&v107->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    goto LABEL_132;
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v119);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v117);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v116);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v115);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v114);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v114);
  if (fabsf(v46) == INFINITY)
  {
    v47 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
    v48 = v47[1];
    v103[0] = *v47;
    v103[1] = v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "slope_left should not be NaN, +inf or -inf.");
    MEMORY[0x20BCFEAD4](a2, v103, 319, __p);
    if (v102 < 0)
      operator delete(__p[0]);
    v51 = v103;
LABEL_131:
    std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)v51);
    goto LABEL_132;
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v113);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v113);
  if (fabsf(v59) == INFINITY)
  {
    v60 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
    v61 = v60[1];
    v100[0] = *v60;
    v100[1] = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    std::string::basic_string[abi:ne180100]<0>(v98, "slope_right should not be NaN, +inf or -inf.");
    MEMORY[0x20BCFEAD4](a2, v100, 319, v98);
    if (v99 < 0)
      operator delete(v98[0]);
    v51 = v100;
    goto LABEL_131;
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v112);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v112);
  if (fabsf(v64) == INFINITY)
  {
    v65 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
    v66 = v65[1];
    v97[0] = *v65;
    v97[1] = v66;
    if (v66)
    {
      v67 = (unint64_t *)(v66 + 8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    std::string::basic_string[abi:ne180100]<0>(v95, "intercept_left should not be NaN, +inf or -inf.");
    MEMORY[0x20BCFEAD4](a2, v97, 319, v95);
    if (v96 < 0)
      operator delete(v95[0]);
    v51 = v97;
    goto LABEL_131;
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v111);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v111);
  if (fabsf(v69) == INFINITY)
  {
    v70 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
    v71 = v70[1];
    v94[0] = *v70;
    v94[1] = v71;
    if (v71)
    {
      v72 = (unint64_t *)(v71 + 8);
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    std::string::basic_string[abi:ne180100]<0>(v92, "intercept_right should not be NaN, +inf or -inf.");
    MEMORY[0x20BCFEAD4](a2, v94, 319, v92);
    if (v93 < 0)
      operator delete(v92[0]);
    v51 = v94;
    goto LABEL_131;
  }
  v74 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v118, "frac")
     || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v118, "int");
  v75 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v118, "inv")
     || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v118, "log2")
     || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v118, "sqr")
     || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v118, "sqrt")
     || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v118, "rsqrt");
  if (!v38 && v74)
  {
    v81 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
    v82 = v81[1];
    v91[0] = *v81;
    v91[1] = v82;
    if (v82)
    {
      v83 = (unint64_t *)(v82 + 8);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    std::string::basic_string[abi:ne180100]<0>(v89, "If lut_mode is FRAC or INT then in_abs must be True.");
    MEMORY[0x20BCFEAD4](a2, v91, 319, v89);
    if (v90 < 0)
      operator delete(v89[0]);
    v51 = v91;
    goto LABEL_131;
  }
  if (v75)
  {
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v119);
    if (v76 < 0.0)
    {
      v77 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
      v78 = v77[1];
      v88[0] = *v77;
      v88[1] = v78;
      if (v78)
      {
        v79 = (unint64_t *)(v78 + 8);
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      std::string::basic_string[abi:ne180100]<0>(v86, "If lut_mode is INV, LOG2, SQR, SQRT, RSQRT, then x_sat_left should be non-negative");
      MEMORY[0x20BCFEAD4](a2, v88, 319, v86);
      if (v87 < 0)
        operator delete(v86[0]);
      v51 = v88;
      goto LABEL_131;
    }
  }
  MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
LABEL_132:
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  return MEMORY[0x20BCFEAEC](v120);
}

void sub_20691DB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;

  if (a45 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  if (*(char *)(v46 - 137) < 0)
    operator delete(*(void **)(v46 - 160));
  MEMORY[0x20BCFEAEC](v46 - 120);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ParseNePoolParamValues(ANEMachineIR::Validators *this@<X0>, const MIL::IROperation *a2@<X1>, char **a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t ParameterValue;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  __int16 v15;
  MIL::Fp16 *v16;
  __int16 v17;
  uint64_t v18;
  __int16 *v19;
  uint64_t v20;
  int v21;
  MIL::Fp16 *v23;
  __int16 v24;
  uint64_t v25;
  __int16 *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  __int16 v29;
  uint64_t v30;
  unsigned __int8 *v31;
  __int16 v32;
  uint64_t v33;
  _BYTE *v34;
  __int16 v35;
  uint64_t v36;
  _BYTE *v37;
  __int16 v38;
  void *__p[2];
  char v40;
  void *v41;
  _BYTE *v42;

  ANEMachineIR::Utils::GetStaticTensorShape(a2, a2, (uint64_t)&v41);
  v9 = v41;
  v8 = v42;
  std::string::basic_string[abi:ne180100]<0>(__p, "kernel_sizes");
  v10 = v8 - v9;
  if (v40 < 0)
    operator delete(__p[0]);
  if (MIL::ValidationResult::IsGood(a4))
  {
    MEMORY[0x20BCFEAEC](a4);
    std::string::basic_string[abi:ne180100]<0>(__p, "strides");
    if (v40 < 0)
      operator delete(__p[0]);
    if (MIL::ValidationResult::IsGood(a4))
    {
      MEMORY[0x20BCFEAEC](a4);
      std::string::basic_string[abi:ne180100]<0>(__p, "custom_pads");
      ParameterValue = MIL::IROperation::TryGetParameterValue();
      v12 = ParameterValue;
      if (v40 < 0)
      {
        operator delete(__p[0]);
        if (!v12)
        {
LABEL_15:
          std::string::basic_string[abi:ne180100]<0>(__p, "post_right_shift");
          v13 = MIL::IROperation::TryGetParameterValue();
          if (v13
            && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13)
            && (v14 = (unsigned __int8 *)MEMORY[0x20BCFEE94]()) != 0)
          {
            v15 = *v14;
          }
          else
          {
            v15 = 0;
          }
          *((_WORD *)a3 + 36) = v15 | 0x100;
          if (v40 < 0)
            operator delete(__p[0]);
          v16 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(__p, "post_scale");
          v17 = MIL::Fp16::FromFloat(v16, 1.0);
          v18 = MIL::IROperation::TryGetParameterValue();
          if (v18)
          {
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18))
            {
              v19 = (__int16 *)MEMORY[0x20BCFEE7C]();
              if (v19)
                v17 = *v19;
            }
          }
          if (!*((_BYTE *)a3 + 76))
            *((_BYTE *)a3 + 76) = 1;
          *((_WORD *)a3 + 37) = v17;
          if (v40 < 0)
            operator delete(__p[0]);
          v20 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(_QWORD *)this + 56))(this);
          v21 = *(char *)(v20 + 23);
          if (v21 < 0)
          {
            if (*(_QWORD *)(v20 + 8) != 11)
              goto LABEL_39;
            v20 = *(_QWORD *)v20;
          }
          else if (v21 != 11)
          {
            goto LABEL_39;
          }
          if (*(_QWORD *)v20 == 0x705F6776615F656ELL && *(_QWORD *)(v20 + 3) == 0x6C6F6F705F677661)
          {
            v23 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(__p, "bias");
            v24 = MIL::Fp16::FromFloat(v23, 0.0);
            v25 = MIL::IROperation::TryGetParameterValue();
            if (v25)
            {
              if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25))
              {
                v26 = (__int16 *)MEMORY[0x20BCFEE7C]();
                if (v26)
                  v24 = *v26;
              }
            }
            if (!*((_BYTE *)a3 + 80))
              *((_BYTE *)a3 + 80) = 1;
            *((_WORD *)a3 + 39) = v24;
            if (v40 < 0)
              operator delete(__p[0]);
            std::string::basic_string[abi:ne180100]<0>(__p, "acc_left_shift");
            v27 = MIL::IROperation::TryGetParameterValue();
            if (v27
              && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27)
              && (v28 = (unsigned __int8 *)MEMORY[0x20BCFEE94]()) != 0)
            {
              v29 = *v28;
            }
            else
            {
              v29 = 0;
            }
            *((_WORD *)a3 + 41) = v29 | 0x100;
            if (v40 < 0)
              operator delete(__p[0]);
            std::string::basic_string[abi:ne180100]<0>(__p, "acc_bias_shift");
            v30 = MIL::IROperation::TryGetParameterValue();
            if (v30
              && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30)
              && (v31 = (unsigned __int8 *)MEMORY[0x20BCFEE94]()) != 0)
            {
              v32 = *v31;
            }
            else
            {
              v32 = 0;
            }
            *((_WORD *)a3 + 42) = v32 | 0x100;
            if (v40 < 0)
              operator delete(__p[0]);
            std::string::basic_string[abi:ne180100]<0>(__p, "include_pads");
            v33 = MIL::IROperation::TryGetParameterValue();
            v35 = v33
               && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33)
               && (v34 = (_BYTE *)MEMORY[0x20BCFEEA0]()) != 0
               && *v34 != 0;
            *((_WORD *)a3 + 43) = v35 | 0x100;
            if (v40 < 0)
              operator delete(__p[0]);
            std::string::basic_string[abi:ne180100]<0>(__p, "pre_relu");
            v36 = MIL::IROperation::TryGetParameterValue();
            v38 = v36
               && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36)
               && (v37 = (_BYTE *)MEMORY[0x20BCFEEA0]()) != 0
               && *v37 != 0;
            *((_WORD *)a3 + 44) = v38 | 0x100;
            if (v40 < 0)
              operator delete(__p[0]);
            goto LABEL_49;
          }
LABEL_39:
          if (*((_BYTE *)a3 + 80))
            *((_BYTE *)a3 + 80) = 0;
          if (*((_BYTE *)a3 + 83))
            *((_BYTE *)a3 + 83) = 0;
          if (*((_BYTE *)a3 + 85))
            *((_BYTE *)a3 + 85) = 0;
          if (*((_BYTE *)a3 + 87))
            *((_BYTE *)a3 + 87) = 0;
          if (*((_BYTE *)a3 + 89))
            *((_BYTE *)a3 + 89) = 0;
LABEL_49:
          MIL::ValidationResult::ValidationResult(a4);
          goto LABEL_50;
        }
      }
      else if (!ParameterValue)
      {
        goto LABEL_15;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "custom_pads");
      if (v40 < 0)
        operator delete(__p[0]);
      if (MIL::ValidationResult::IsGood(a4))
      {
        MEMORY[0x20BCFEAEC](a4);
        goto LABEL_15;
      }
    }
  }
LABEL_50:
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
}

void sub_20691E2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::GetParamValuesOfInt32Vector(MIL::IRObject *a1@<X0>, unint64_t a2@<X2>, char **a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  MIL::IRValue *ParameterValue;
  std::string::size_type v14;
  std::string::size_type v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  std::string::size_type size;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  unint64_t v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  unint64_t *v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  __int128 __p;
  std::string::size_type v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::string v65;
  __int128 v66;
  std::string::size_type v67;
  uint64_t v68;
  std::__shared_weak_count *v69;

  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v9 = MIL::IRValueType::AsTensorType(ParameterType);
  v10 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  if (v10[1] == *v10)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v10 + 16))(**v10);
  if (v11)
  {
    v12 = v11;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11) == a2)
    {
      ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(ParameterValue);
      v65.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<int>();
      v65.__r_.__value_.__l.__size_ = v14;
      a3[1] = *a3;
      if (v14)
      {
        v15 = 0;
        do
        {
          v16 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v65, v15);
          v17 = v16;
          v19 = a3[1];
          v18 = (unint64_t)a3[2];
          if ((unint64_t)v19 >= v18)
          {
            v21 = *a3;
            v22 = (v19 - *a3) >> 2;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62)
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            v24 = v18 - (_QWORD)v21;
            if (v24 >> 1 > v23)
              v23 = v24 >> 1;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
              v25 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v25);
              v21 = *a3;
              v19 = a3[1];
            }
            else
            {
              v26 = 0;
            }
            v27 = &v26[4 * v22];
            *(_DWORD *)v27 = *v17;
            v20 = v27 + 4;
            while (v19 != v21)
            {
              v28 = *((_DWORD *)v19 - 1);
              v19 -= 4;
              *((_DWORD *)v27 - 1) = v28;
              v27 -= 4;
            }
            *a3 = v27;
            a3[1] = v20;
            a3[2] = &v26[4 * v25];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_DWORD *)v19 = *v16;
            v20 = v19 + 4;
          }
          a3[1] = v20;
          ++v15;
        }
        while (v15 < v65.__r_.__value_.__l.__size_);
      }
      MIL::ValidationResult::ValidationResult(a4);
      return;
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v39 = (std::__shared_weak_count *)LocationPtr[1];
    v63 = *LocationPtr;
    v64 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(p_shared_owners);
      while (__stxr(v41 + 1, p_shared_owners));
    }
    std::operator+<char>();
    v42 = std::string::append(&v58, "' must have length of ");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v57, a2);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = &v57;
    else
      v44 = (std::string *)v57.__r_.__value_.__r.__words[0];
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    else
      size = v57.__r_.__value_.__l.__size_;
    v46 = std::string::append(&v59, (const std::string::value_type *)v44, size);
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    v48 = std::string::append(&v60, ", got ");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
    std::to_string(&v56, v50);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &v56;
    else
      v51 = (std::string *)v56.__r_.__value_.__r.__words[0];
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    else
      v52 = v56.__r_.__value_.__l.__size_;
    v53 = std::string::append(&v65, (const std::string::value_type *)v51, v52);
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v62 = v53->__r_.__value_.__r.__words[2];
    __p = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x20BCFEAD4](a4, &v63, 319, &__p);
    if (SHIBYTE(v62) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v35 = v64;
    if (v64)
    {
      v55 = (unint64_t *)&v64->__shared_owners_;
      do
        v37 = __ldaxr(v55);
      while (__stlxr(v37 - 1, v55));
      goto LABEL_67;
    }
  }
  else
  {
    v29 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v30 = (std::__shared_weak_count *)v29[1];
    v68 = *v29;
    v69 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    std::operator+<char>();
    v33 = std::string::append(&v65, "'  must have static shape.");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v67 = v33->__r_.__value_.__r.__words[2];
    v66 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x20BCFEAD4](a4, &v68, 302, &v66);
    if (SHIBYTE(v67) < 0)
      operator delete((void *)v66);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    v35 = v69;
    if (v69)
    {
      v36 = (unint64_t *)&v69->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
LABEL_67:
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
}

void sub_20691E7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49)
{
  uint64_t v49;

  if (a47 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v49 - 137) < 0)
    operator delete(*(void **)(v49 - 160));
  if (a40 < 0)
    operator delete(a35);
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ParsePePoolParamValues(ANEMachineIR::Utils *this@<X1>, MIL::IRObject *a2@<X0>, uint64_t a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t ParameterValue;
  uint64_t v11;
  MIL::Fp16 *v12;
  __int16 v13;
  uint64_t v14;
  __int16 *v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  _BYTE *v20;
  __int16 v21;
  uint64_t v22;
  _BYTE *v23;
  __int16 v24;
  void *__p[2];
  char v26;
  void *v27;
  _BYTE *v28;

  ANEMachineIR::Utils::GetStaticTensorShape(this, this, (uint64_t)&v27);
  v8 = v27;
  v7 = v28;
  std::string::basic_string[abi:ne180100]<0>(__p, "kernel_sizes");
  v9 = ((v7 - v8) >> 3) - 2;
  if (v26 < 0)
    operator delete(__p[0]);
  if (MIL::ValidationResult::IsGood(a4))
  {
    MEMORY[0x20BCFEAEC](a4);
    std::string::basic_string[abi:ne180100]<0>(__p, "strides");
    if (v26 < 0)
      operator delete(__p[0]);
    if (MIL::ValidationResult::IsGood(a4))
    {
      MEMORY[0x20BCFEAEC](a4);
      std::string::basic_string[abi:ne180100]<0>(__p, "custom_pads");
      ParameterValue = MIL::IROperation::TryGetParameterValue();
      v11 = ParameterValue;
      if (v26 < 0)
      {
        operator delete(__p[0]);
        if (!v11)
        {
LABEL_15:
          v12 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(__p, "post_scale");
          v13 = MIL::Fp16::FromFloat(v12, 1.0);
          v14 = MIL::IROperation::TryGetParameterValue();
          if (v14)
          {
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14))
            {
              v15 = (__int16 *)MEMORY[0x20BCFEE7C]();
              if (v15)
                v13 = *v15;
            }
          }
          if (!*(_BYTE *)(a3 + 74))
            *(_BYTE *)(a3 + 74) = 1;
          *(_WORD *)(a3 + 72) = v13;
          if (v26 < 0)
            operator delete(__p[0]);
          v16 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 56))(a2);
          v17 = *(char *)(v16 + 23);
          if (v17 < 0)
          {
            if (*(_QWORD *)(v16 + 8) != 11)
              goto LABEL_32;
            v16 = *(_QWORD *)v16;
          }
          else if (v17 != 11)
          {
            goto LABEL_32;
          }
          if (*(_QWORD *)v16 == 0x705F6776615F6570 && *(_QWORD *)(v16 + 3) == 0x6C6F6F705F677661)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "include_pads");
            v19 = MIL::IROperation::TryGetParameterValue();
            v21 = v19
               && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19)
               && (v20 = (_BYTE *)MEMORY[0x20BCFEEA0]()) != 0
               && *v20 != 0;
            *(_WORD *)(a3 + 76) = v21 | 0x100;
            if (v26 < 0)
              operator delete(__p[0]);
            std::string::basic_string[abi:ne180100]<0>(__p, "pre_relu");
            v22 = MIL::IROperation::TryGetParameterValue();
            v24 = v22
               && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22)
               && (v23 = (_BYTE *)MEMORY[0x20BCFEEA0]()) != 0
               && *v23 != 0;
            *(_WORD *)(a3 + 78) = v24 | 0x100;
            if (v26 < 0)
              operator delete(__p[0]);
            goto LABEL_36;
          }
LABEL_32:
          if (*(_BYTE *)(a3 + 77))
            *(_BYTE *)(a3 + 77) = 0;
          if (*(_BYTE *)(a3 + 79))
            *(_BYTE *)(a3 + 79) = 0;
LABEL_36:
          MIL::ValidationResult::ValidationResult(a4);
          goto LABEL_37;
        }
      }
      else if (!ParameterValue)
      {
        goto LABEL_15;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "custom_pads");
      if (v26 < 0)
        operator delete(__p[0]);
      if (MIL::ValidationResult::IsGood(a4))
      {
        MEMORY[0x20BCFEAEC](a4);
        goto LABEL_15;
      }
    }
  }
LABEL_37:
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_20691EC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::InferOutputShape(uint64_t *a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X4>, uint64_t a6@<X5>, MIL::ValidationResult *a7@<X8>)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int **v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int *v36;
  int *v37;
  unint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int *v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  int *v49;
  unint64_t v50;
  int *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char **v66;
  _QWORD *v67;
  int64_t *v68;
  int v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  int64_t v84;
  int64_t *v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  int64_t *v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  int64_t *v107;
  char *v108;
  int64_t v109;
  int64_t v110;
  int64_t *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  unint64_t *v119;
  int64_t *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  int64_t *v129;
  char *v130;
  int64_t v131;
  int64_t v132;
  char *v133;
  char *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  __int128 v141;
  unint64_t *v142;
  int64_t *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  int64_t *v149;
  int64_t v150;
  unint64_t v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::string *v166;
  __int128 v167;
  std::string *v168;
  __int128 v169;
  std::string *v170;
  std::string::size_type size;
  std::string *v172;
  __int128 v173;
  unint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v196;
  std::string v198;
  std::string v199;
  void *v200[2];
  std::string::size_type v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  void *v204[2];
  std::string::size_type v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  void *__p[2];
  std::string::size_type v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  std::string v212;
  std::string v213;
  __int128 v214;
  std::string::size_type v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  char *v218;
  char *v219;
  char *v220;

  v10 = a5[1] - *a5;
  v11 = v10 - 2;
  *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
  std::vector<unsigned long long>::reserve((void **)a6, v10);
  v218 = 0;
  v219 = 0;
  v220 = 0;
  v12 = *(_QWORD *)(a4 + 8);
  if (*(_QWORD *)a4 == v12)
  {
    if (v10 != 2)
    {
      v13 = 0;
      v14 = 0;
      if (2 * v11 <= 1)
        v15 = 1;
      else
        v15 = 2 * v11;
      do
      {
        if (v13 >= v220)
        {
          v17 = v218;
          v18 = (v13 - v218) >> 2;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          v20 = v220 - v218;
          if ((v220 - v218) >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v220, v21);
            v17 = v218;
            v13 = v219;
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[4 * v18];
          *(_DWORD *)v23 = 0;
          v16 = v23 + 4;
          while (v13 != v17)
          {
            v24 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          v218 = v23;
          v219 = v16;
          v220 = &v22[4 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_DWORD *)v13 = 0;
          v16 = v13 + 4;
        }
        v219 = v16;
        ++v14;
        v13 = v16;
      }
      while (v14 != v15);
    }
  }
  else if (&v218 != (char **)a4)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v218, *(char **)a4, v12, (v12 - *(_QWORD *)a4) >> 2);
  }
  v25 = *a5;
  v26 = (char *)a5[1] - (char *)*a5;
  if (!v26)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v27 = v26 >> 3;
  v28 = *v25;
  if (v10 == 5)
  {
    if (v27 <= 1)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    v29 = v25[1];
  }
  else
  {
    v29 = 1;
    if (v11 < 2)
    {
      v32 = 0;
      v31 = 1;
      v30 = a2;
      goto LABEL_33;
    }
  }
  v30 = a2;
  if (v27 <= v10 - 3)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v31 = v25[v10 - 3];
  v32 = 1;
LABEL_33:
  if (v27 <= v11)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v33 = v10 - 1;
  if (v27 <= v10 - 1)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v34 = v25[v11];
  v35 = v25[v33];
  v36 = *v30;
  v37 = v30[1];
  v38 = v37 - *v30;
  if (v38 != v33)
  {
    if (v10 == 5)
    {
      if (v37 == v36)
        goto LABEL_245;
      v39 = *v36;
      if (!v32)
        goto LABEL_42;
    }
    else
    {
      v39 = 1;
      if (!v32)
      {
LABEL_42:
        v40 = 1;
        goto LABEL_55;
      }
    }
    if (v38 <= v10 - 4)
      goto LABEL_245;
    v40 = v36[v10 - 4];
LABEL_55:
    v48 = v10 - 3;
    if (v38 <= v10 - 3)
      goto LABEL_245;
    v42 = v36[v48];
    if (v10 == 5)
    {
      if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
        goto LABEL_245;
      v44 = **(_DWORD **)a3;
      if ((v32 & 1) == 0)
        goto LABEL_59;
    }
    else
    {
      v44 = 1;
      if ((v32 & 1) == 0)
      {
LABEL_59:
        v49 = *(int **)a3;
        v50 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
        v47 = 1;
LABEL_63:
        if (v50 > v48)
        {
          v51 = &v49[v48];
          v43 = 1;
          goto LABEL_70;
        }
LABEL_245:
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
    }
    v49 = *(int **)a3;
    v50 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
    if (v50 <= v10 - 4)
      goto LABEL_245;
    v47 = v49[v10 - 4];
    goto LABEL_63;
  }
  if (v10 == 5)
  {
    v39 = *v36;
    if (!v32)
    {
LABEL_38:
      v40 = 1;
      goto LABEL_46;
    }
  }
  else
  {
    v39 = 1;
    if (!v32)
      goto LABEL_38;
  }
  if (v33 <= v10 - 4)
    goto LABEL_245;
  v40 = v36[v10 - 4];
LABEL_46:
  v41 = v10 - 3;
  if (v33 <= v10 - 3 || v33 <= v11)
    goto LABEL_245;
  v42 = v36[v41];
  v43 = v36[v11];
  if (v10 == 5)
  {
    if (!((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2))
      goto LABEL_245;
    v44 = **(_DWORD **)a3;
    if ((v32 & 1) == 0)
      goto LABEL_51;
  }
  else
  {
    v44 = 1;
    if ((v32 & 1) == 0)
    {
LABEL_51:
      v45 = *(int **)a3;
      v46 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
      v47 = 1;
      goto LABEL_68;
    }
  }
  v45 = *(int **)a3;
  v46 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
  if (v46 <= v10 - 4)
    goto LABEL_245;
  v47 = v45[v10 - 4];
LABEL_68:
  if (v46 <= v41)
    goto LABEL_245;
  v51 = &v45[v41];
LABEL_70:
  v52 = *v51;
  if (v10 == 5)
  {
    if ((unint64_t)(v219 - v218) <= 4)
      goto LABEL_240;
    v53 = *(int *)v218;
    v54 = *((int *)v218 + 1);
    if ((v32 & 1) == 0)
      goto LABEL_73;
  }
  else
  {
    v53 = 0;
    v54 = 0;
    if ((v32 & 1) == 0)
    {
LABEL_73:
      v55 = 0;
      v56 = 0;
      v57 = v218;
      v58 = 2 * v11;
      v59 = (v219 - v218) >> 2;
      goto LABEL_78;
    }
  }
  v58 = 2 * v11;
  v60 = 2 * v11 - 4;
  v57 = v218;
  v59 = (v219 - v218) >> 2;
  if (v59 <= v60 || v59 <= v58 - 3)
LABEL_240:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v55 = *(int *)&v218[4 * v60];
  v56 = *(int *)&v218[4 * v58 - 12];
LABEL_78:
  v61 = v58 - 2;
  if (v59 <= v58 - 2)
    goto LABEL_240;
  v62 = v58 - 1;
  if (v59 <= v62)
    goto LABEL_240;
  v192 = v43;
  v196 = v35;
  v63 = *(int *)&v57[4 * v61];
  v64 = *(int *)&v57[4 * v62];
  v66 = (char **)(a6 + 16);
  v65 = *(_QWORD *)(a6 + 16);
  v67 = *(_QWORD **)(a6 + 8);
  if ((unint64_t)v67 >= v65)
  {
    v175 = v54;
    v176 = v53;
    v180 = v56;
    v182 = v55;
    v177 = v44;
    v178 = v39;
    v184 = v64;
    v186 = v63;
    v188 = v47;
    v190 = v52;
    v69 = v32;
    v179 = v40;
    v70 = *(_QWORD **)a6;
    v71 = ((uint64_t)v67 - *(_QWORD *)a6) >> 3;
    v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 61)
      goto LABEL_241;
    v73 = v29;
    v74 = v31;
    v75 = v42;
    v76 = v34;
    v77 = v65 - (_QWORD)v70;
    if (v77 >> 2 > v72)
      v72 = v77 >> 2;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
      v78 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v78 = v72;
    if (v78)
    {
      v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a6 + 16, v78);
      v80 = v28;
      v70 = *(_QWORD **)a6;
      v67 = *(_QWORD **)(a6 + 8);
    }
    else
    {
      v80 = v28;
      v79 = 0;
    }
    v81 = &v79[8 * v71];
    v82 = &v79[8 * v78];
    *(_QWORD *)v81 = v80;
    v68 = (int64_t *)(v81 + 8);
    v32 = v69;
    while (v67 != v70)
    {
      v83 = *--v67;
      *((_QWORD *)v81 - 1) = v83;
      v81 -= 8;
    }
    *(_QWORD *)a6 = v81;
    *(_QWORD *)(a6 + 8) = v68;
    *(_QWORD *)(a6 + 16) = v82;
    if (v70)
      operator delete(v70);
    v34 = v76;
    v42 = v75;
    v31 = v74;
    v39 = v178;
    v40 = v179;
    v29 = v73;
    v47 = v188;
    v52 = v190;
    v64 = v184;
    v63 = v186;
    v53 = v176;
    v44 = v177;
    v56 = v180;
    v55 = v182;
    v54 = v175;
  }
  else
  {
    *v67 = v28;
    v68 = v67 + 1;
  }
  *(_QWORD *)(a6 + 8) = v68;
  if (v11 == 3)
  {
    v84 = (v29 - v39 + v44 + v53 + v54) / (unint64_t)v44;
    if (v84 <= 0)
    {
      v86 = (std::__shared_weak_count *)a1[1];
      v216 = *a1;
      v217 = v86;
      if (v86)
      {
        p_shared_owners = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldxr(p_shared_owners);
        while (__stxr(v88 + 1, p_shared_owners));
      }
      std::to_string(&v212, (v29 - v39 + v44 + v53 + v54) / (unint64_t)v44);
      v89 = std::string::insert(&v212, 0, "Inferred zero or negative output size ");
      v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      v213.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      v91 = std::string::append(&v213, " on depth.");
      v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v215 = v91->__r_.__value_.__r.__words[2];
      v214 = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x20BCFEAD4](a7, &v216, 319, &v214);
      if (SHIBYTE(v215) < 0)
        operator delete((void *)v214);
      if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v213.__r_.__value_.__l.__data_);
      if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v212.__r_.__value_.__l.__data_);
      v93 = v217;
      if (!v217)
        goto LABEL_236;
      v94 = (unint64_t *)&v217->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
LABEL_234:
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
      goto LABEL_236;
    }
    if (v68 >= (int64_t *)*v66)
    {
      v181 = v56;
      v183 = v55;
      v185 = v64;
      v187 = v63;
      v189 = v47;
      v191 = v52;
      v96 = *(int64_t **)a6;
      v97 = ((uint64_t)v68 - *(_QWORD *)a6) >> 3;
      v98 = v97 + 1;
      if ((unint64_t)(v97 + 1) >> 61)
        goto LABEL_241;
      v99 = v32;
      v100 = v40;
      v101 = v31;
      v102 = v42;
      v103 = v34;
      v104 = *v66 - (char *)v96;
      if (v104 >> 2 > v98)
        v98 = v104 >> 2;
      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
        v105 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v105 = v98;
      if (v105)
      {
        v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a6 + 16, v105);
        v96 = *(int64_t **)a6;
        v68 = *(int64_t **)(a6 + 8);
      }
      else
      {
        v106 = 0;
      }
      v107 = (int64_t *)&v106[8 * v97];
      v108 = &v106[8 * v105];
      *v107 = v84;
      v85 = v107 + 1;
      while (v68 != v96)
      {
        v109 = *--v68;
        *--v107 = v109;
      }
      *(_QWORD *)a6 = v107;
      *(_QWORD *)(a6 + 8) = v85;
      *(_QWORD *)(a6 + 16) = v108;
      if (v96)
        operator delete(v96);
      v34 = v103;
      v42 = v102;
      v31 = v101;
      v40 = v100;
      v32 = v99;
      v47 = v189;
      v52 = v191;
      v64 = v185;
      v63 = v187;
      v56 = v181;
      v55 = v183;
    }
    else
    {
      *v68 = v84;
      v85 = v68 + 1;
    }
    *(_QWORD *)(a6 + 8) = v85;
    v68 = v85;
  }
  if (!v32)
    goto LABEL_163;
  v110 = (v31 - v40 + v47 + v55 + v56) / (unint64_t)v47;
  if (v110 <= 0)
  {
    v112 = (std::__shared_weak_count *)a1[1];
    v210 = *a1;
    v211 = v112;
    if (v112)
    {
      v113 = (unint64_t *)&v112->__shared_owners_;
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 1, v113));
    }
    std::to_string(&v212, (v31 - v40 + v47 + v55 + v56) / (unint64_t)v47);
    v115 = std::string::insert(&v212, 0, "Inferred zero or negative output size ");
    v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
    v213.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v116;
    v115->__r_.__value_.__l.__size_ = 0;
    v115->__r_.__value_.__r.__words[2] = 0;
    v115->__r_.__value_.__r.__words[0] = 0;
    v117 = std::string::append(&v213, " on height.");
    v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    v209 = v117->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v118;
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x20BCFEAD4](a7, &v210, 319, __p);
    if (SHIBYTE(v209) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v213.__r_.__value_.__l.__data_);
    if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v212.__r_.__value_.__l.__data_);
    v93 = v211;
    if (!v211)
      goto LABEL_236;
    v119 = (unint64_t *)&v211->__shared_owners_;
    do
      v95 = __ldaxr(v119);
    while (__stlxr(v95 - 1, v119));
    goto LABEL_234;
  }
  if (v68 >= (int64_t *)*v66)
  {
    v120 = *(int64_t **)a6;
    v121 = ((uint64_t)v68 - *(_QWORD *)a6) >> 3;
    v122 = v121 + 1;
    if ((unint64_t)(v121 + 1) >> 61)
      goto LABEL_241;
    v123 = v52;
    v124 = v42;
    v125 = v34;
    v126 = *v66 - (char *)v120;
    if (v126 >> 2 > v122)
      v122 = v126 >> 2;
    if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
      v127 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v127 = v122;
    if (v127)
    {
      v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a6 + 16, v127);
      v120 = *(int64_t **)a6;
      v68 = *(int64_t **)(a6 + 8);
    }
    else
    {
      v128 = 0;
    }
    v129 = (int64_t *)&v128[8 * v121];
    v130 = &v128[8 * v127];
    *v129 = v110;
    v111 = v129 + 1;
    while (v68 != v120)
    {
      v131 = *--v68;
      *--v129 = v131;
    }
    *(_QWORD *)a6 = v129;
    *(_QWORD *)(a6 + 8) = v111;
    *(_QWORD *)(a6 + 16) = v130;
    if (v120)
      operator delete(v120);
    v34 = v125;
    v42 = v124;
    v52 = v123;
  }
  else
  {
    *v68 = v110;
    v111 = v68 + 1;
  }
  *(_QWORD *)(a6 + 8) = v111;
  v68 = v111;
LABEL_163:
  v132 = (v34 - v42 + v52 + v63 + v64) / v52;
  if (v132 <= 0)
  {
    v135 = (std::__shared_weak_count *)a1[1];
    v206 = *a1;
    v207 = v135;
    if (v135)
    {
      v136 = (unint64_t *)&v135->__shared_owners_;
      do
        v137 = __ldxr(v136);
      while (__stxr(v137 + 1, v136));
    }
    std::to_string(&v212, (v34 - v42 + v52 + v63 + v64) / v52);
    v138 = std::string::insert(&v212, 0, "Inferred zero or negative output size ");
    v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
    v213.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v139;
    v138->__r_.__value_.__l.__size_ = 0;
    v138->__r_.__value_.__r.__words[2] = 0;
    v138->__r_.__value_.__r.__words[0] = 0;
    v140 = std::string::append(&v213, " on width.");
    v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
    v205 = v140->__r_.__value_.__r.__words[2];
    *(_OWORD *)v204 = v141;
    v140->__r_.__value_.__l.__size_ = 0;
    v140->__r_.__value_.__r.__words[2] = 0;
    v140->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x20BCFEAD4](a7, &v206, 319, v204);
    if (SHIBYTE(v205) < 0)
      operator delete(v204[0]);
    if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v213.__r_.__value_.__l.__data_);
    if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v212.__r_.__value_.__l.__data_);
    v93 = v207;
    if (!v207)
      goto LABEL_236;
    v142 = (unint64_t *)&v207->__shared_owners_;
    do
      v95 = __ldaxr(v142);
    while (__stlxr(v95 - 1, v142));
    goto LABEL_234;
  }
  v133 = *v66;
  if (v68 >= (int64_t *)*v66)
  {
    v143 = *(int64_t **)a6;
    v144 = ((uint64_t)v68 - *(_QWORD *)a6) >> 3;
    v145 = v144 + 1;
    if ((unint64_t)(v144 + 1) >> 61)
      goto LABEL_241;
    v146 = v133 - (char *)v143;
    if (v146 >> 2 > v145)
      v145 = v146 >> 2;
    if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8)
      v147 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v147 = v145;
    if (v147)
    {
      v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a6 + 16, v147);
      v143 = *(int64_t **)a6;
      v68 = *(int64_t **)(a6 + 8);
    }
    else
    {
      v148 = 0;
    }
    v149 = (int64_t *)&v148[8 * v144];
    v133 = &v148[8 * v147];
    *v149 = v132;
    v134 = (char *)(v149 + 1);
    while (v68 != v143)
    {
      v150 = *--v68;
      *--v149 = v150;
    }
    *(_QWORD *)a6 = v149;
    *(_QWORD *)(a6 + 8) = v134;
    *(_QWORD *)(a6 + 16) = v133;
    if (v143)
    {
      operator delete(v143);
      v133 = *v66;
    }
  }
  else
  {
    *v68 = v132;
    v134 = (char *)(v68 + 1);
  }
  *(_QWORD *)(a6 + 8) = v134;
  v151 = v196 / v192;
  if (v134 < v133)
  {
    *(_QWORD *)v134 = v151;
    v152 = v134 + 8;
    goto LABEL_209;
  }
  v153 = *(char **)a6;
  v154 = (uint64_t)&v134[-*(_QWORD *)a6] >> 3;
  v155 = v154 + 1;
  if ((unint64_t)(v154 + 1) >> 61)
LABEL_241:
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  v156 = v133 - v153;
  if (v156 >> 2 > v155)
    v155 = v156 >> 2;
  if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
    v157 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v157 = v155;
  if (v157)
  {
    v158 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a6 + 16, v157);
    v153 = *(char **)a6;
    v134 = *(char **)(a6 + 8);
  }
  else
  {
    v158 = 0;
  }
  v159 = &v158[8 * v154];
  v160 = &v158[8 * v157];
  *(_QWORD *)v159 = v151;
  v152 = v159 + 8;
  while (v134 != v153)
  {
    v161 = *((_QWORD *)v134 - 1);
    v134 -= 8;
    *((_QWORD *)v159 - 1) = v161;
    v159 -= 8;
  }
  *(_QWORD *)a6 = v159;
  *(_QWORD *)(a6 + 8) = v152;
  *(_QWORD *)(a6 + 16) = v160;
  if (v153)
    operator delete(v153);
LABEL_209:
  *(_QWORD *)(a6 + 8) = v152;
  v162 = (uint64_t)v152 - *(_QWORD *)a6;
  if (v162 == (char *)a5[1] - (char *)*a5)
  {
    MIL::ValidationResult::ValidationResult(a7);
    goto LABEL_236;
  }
  v163 = (std::__shared_weak_count *)a1[1];
  v202 = *a1;
  v203 = v163;
  if (v163)
  {
    v164 = (unint64_t *)&v163->__shared_owners_;
    do
      v165 = __ldxr(v164);
    while (__stxr(v165 + 1, v164));
    v162 = *(_QWORD *)(a6 + 8) - *(_QWORD *)a6;
  }
  std::to_string(&v199, v162 >> 3);
  v166 = std::string::insert(&v199, 0, "Output rank ");
  v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v167;
  v166->__r_.__value_.__l.__size_ = 0;
  v166->__r_.__value_.__r.__words[2] = 0;
  v166->__r_.__value_.__r.__words[0] = 0;
  v168 = std::string::append(&v212, " does not match rank of input tensor of shape ");
  v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
  v213.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v169;
  v168->__r_.__value_.__l.__size_ = 0;
  v168->__r_.__value_.__r.__words[2] = 0;
  v168->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v198, a5[1] - *a5);
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v170 = &v198;
  else
    v170 = (std::string *)v198.__r_.__value_.__r.__words[0];
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v198.__r_.__value_.__r.__words[2]);
  else
    size = v198.__r_.__value_.__l.__size_;
  v172 = std::string::append(&v213, (const std::string::value_type *)v170, size);
  v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
  v201 = v172->__r_.__value_.__r.__words[2];
  *(_OWORD *)v200 = v173;
  v172->__r_.__value_.__l.__size_ = 0;
  v172->__r_.__value_.__r.__words[2] = 0;
  v172->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x20BCFEAD4](a7, &v202, 313, v200);
  if (SHIBYTE(v201) < 0)
    operator delete(v200[0]);
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v198.__r_.__value_.__l.__data_);
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v213.__r_.__value_.__l.__data_);
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v199.__r_.__value_.__l.__data_);
  v93 = v203;
  if (v203)
  {
    v174 = (unint64_t *)&v203->__shared_owners_;
    do
      v95 = __ldaxr(v174);
    while (__stlxr(v95 - 1, v174));
    goto LABEL_234;
  }
LABEL_236:
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
}

void sub_20691FA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,char a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;
  void *v62;

  if (a60 < 0)
    operator delete(__p);
  if (*(char *)(v60 - 169) < 0)
    operator delete(*(void **)(v60 - 192));
  if (*(char *)(v60 - 201) < 0)
    operator delete(*(void **)(v60 - 224));
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v60 - 240);
  v62 = *(void **)(v60 - 112);
  if (v62)
  {
    *(_QWORD *)(v60 - 104) = v62;
    operator delete(v62);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ValidateNePool(uint64_t a1@<X0>, uint64_t a2@<X1>, ANEMachineIR::Utils *a3@<X2>, ANEMachineIR::Utils *a4@<X3>, uint64_t a5@<X4>, MIL::ValidationResult *a6@<X8>)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int *v22;
  int *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  std::string::size_type v30;
  unint64_t *v31;
  unint64_t v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::string *v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  std::string::size_type size;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  unint64_t *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::string *v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  std::string::size_type v89;
  std::string *v90;
  __int128 v91;
  unint64_t *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  __int128 v99;
  const std::string::value_type *v100;
  std::string::size_type v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  std::string::size_type v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  std::string::size_type v113;
  std::string *v114;
  __int128 v115;
  unint64_t *v116;
  unint64_t v117;
  int v118;
  std::string::size_type v119;
  unint64_t *v120;
  unint64_t v121;
  std::string *v122;
  __int128 v123;
  std::string *v124;
  __int128 v125;
  std::string *v126;
  std::string::size_type v127;
  std::string *v128;
  __int128 v129;
  unint64_t *v130;
  unint64_t v131;
  BOOL v132;
  int v133;
  int v134;
  int v135;
  std::string::size_type v136;
  unint64_t *v137;
  unint64_t v138;
  std::string *v139;
  __int128 v140;
  std::string *v141;
  __int128 v142;
  std::string *v143;
  std::string::size_type v144;
  std::string *v145;
  __int128 v146;
  unint64_t *v147;
  const MIL::IRTensorValueType *v148;
  const MIL::IRTensorValueType *v149;
  MIL::ValidationResult *v150;
  void *v151[2];
  std::string::size_type v152;
  void *v153;
  std::__shared_weak_count *v154;
  void *v155;
  std::__shared_weak_count *v156;
  void *__p[2];
  std::string::size_type v158;
  std::string v159;
  std::string v160;
  void *v161;
  std::__shared_weak_count *v162;
  unsigned __int8 v163;
  void *v164;
  std::__shared_weak_count *v165;
  std::string v166;
  std::string v167;
  std::string v168;
  std::string v169;
  std::string v170;
  std::string v171;
  std::string v172;

  v12 = *(std::__shared_weak_count **)(a1 + 8);
  v155 = *(void **)a1;
  v156 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&v172, "x");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v155, (uint64_t)a3, (uint64_t)&v172, a2, (MIL::ValidationResult *)__p);
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v172.__r_.__value_.__l.__data_);
  v15 = v156;
  if (v156)
  {
    v16 = (unint64_t *)&v156->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p) & 1) != 0)
  {
    MEMORY[0x20BCFEAEC](__p);
    v18 = (_QWORD *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)a3 + 96))(a3);
    v19 = (uint64_t)(v18[1] - *v18) >> 3;
    v20 = (*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)a3 + 88))(a3);
    v21 = v19 - 1;
    v22 = *(int **)a5;
    v23 = *(int **)(a5 + 8);
    if (v19 - 1 != ((uint64_t)v23 - *(_QWORD *)a5) >> 2)
    {
      v55 = *(std::__shared_weak_count **)(a1 + 8);
      v161 = *(void **)a1;
      v162 = v55;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v58 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v168, "kernel_sizes");
      v59 = std::string::insert(v58, 0, "Expect '");
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v169.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      v61 = std::string::append(&v169, "' to be array of size ");
      v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v170.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v167, v19 - 1);
      if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &v167;
      else
        v63 = (std::string *)v167.__r_.__value_.__r.__words[0];
      if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v167.__r_.__value_.__r.__words[2]);
      else
        size = v167.__r_.__value_.__l.__size_;
      v65 = std::string::append(&v170, (const std::string::value_type *)v63, size);
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v171.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      v67 = std::string::append(&v171, ", got ");
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v172.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v166, (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = &v166;
      else
        v69 = (std::string *)v166.__r_.__value_.__r.__words[0];
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v70 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
      else
        v70 = v166.__r_.__value_.__l.__size_;
      v71 = std::string::append(&v172, (const std::string::value_type *)v69, v70);
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v158 = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x20BCFEAD4](a6, &v161, 319, __p);
      if (SHIBYTE(v158) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v167.__r_.__value_.__l.__data_);
      if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v168.__r_.__value_.__l.__data_);
      v41 = v162;
      if (!v162)
        goto LABEL_243;
      v73 = (unint64_t *)&v162->__shared_owners_;
      do
        v43 = __ldaxr(v73);
      while (__stlxr(v43 - 1, v73));
      goto LABEL_241;
    }
    v25 = *(_DWORD **)(a5 + 24);
    v24 = *(_DWORD **)(a5 + 32);
    if (v21 != v24 - v25)
    {
      v74 = *(std::__shared_weak_count **)(a1 + 8);
      v161 = *(void **)a1;
      v162 = v74;
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
      v77 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v168, "strides");
      v78 = std::string::insert(v77, 0, "Expect '");
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v169.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      v80 = std::string::append(&v169, "' to be array of size ");
      v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v170.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v167, v19 - 1);
      if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = &v167;
      else
        v82 = (std::string *)v167.__r_.__value_.__r.__words[0];
      if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = HIBYTE(v167.__r_.__value_.__r.__words[2]);
      else
        v83 = v167.__r_.__value_.__l.__size_;
      v84 = std::string::append(&v170, (const std::string::value_type *)v82, v83);
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v171.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      v86 = std::string::append(&v171, ", got ");
      v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
      v172.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v87;
      v86->__r_.__value_.__l.__size_ = 0;
      v86->__r_.__value_.__r.__words[2] = 0;
      v86->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v166, (uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 2);
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v88 = &v166;
      else
        v88 = (std::string *)v166.__r_.__value_.__r.__words[0];
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v89 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
      else
        v89 = v166.__r_.__value_.__l.__size_;
      v90 = std::string::append(&v172, (const std::string::value_type *)v88, v89);
      v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v158 = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x20BCFEAD4](a6, &v161, 319, __p);
      if (SHIBYTE(v158) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v172.__r_.__value_.__l.__data_);
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v171.__r_.__value_.__l.__data_);
      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v167.__r_.__value_.__l.__data_);
      if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v170.__r_.__value_.__l.__data_);
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v168.__r_.__value_.__l.__data_);
      v41 = v162;
      if (!v162)
        goto LABEL_243;
      v92 = (unint64_t *)&v162->__shared_owners_;
      do
        v43 = __ldaxr(v92);
      while (__stlxr(v43 - 1, v92));
      goto LABEL_241;
    }
    v26 = v19 - 2;
    if (v21 > v19 - 2)
    {
      v27 = v22[v26];
      v28 = v25[v26];
      if (v27 != v28)
      {
        v93 = *(std::__shared_weak_count **)(a1 + 8);
        v164 = *(void **)a1;
        v165 = v93;
        if (v93)
        {
          v94 = (unint64_t *)&v93->__shared_owners_;
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        std::string::basic_string[abi:ne180100]<0>(&v166, "kernel_sizes");
        v96 = std::string::insert(&v166, 0, "Expect same channel dimension for '");
        v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        v167.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        v98 = std::string::append(&v167, "' and '");
        v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        v168.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v99;
        v98->__r_.__value_.__l.__size_ = 0;
        v98->__r_.__value_.__r.__words[2] = 0;
        v98->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v161, "strides");
        if ((v163 & 0x80u) == 0)
          v100 = (const std::string::value_type *)&v161;
        else
          v100 = (const std::string::value_type *)v161;
        if ((v163 & 0x80u) == 0)
          v101 = v163;
        else
          v101 = (std::string::size_type)v162;
        v102 = std::string::append(&v168, v100, v101);
        v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
        v169.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v103;
        v102->__r_.__value_.__l.__size_ = 0;
        v102->__r_.__value_.__r.__words[2] = 0;
        v102->__r_.__value_.__r.__words[0] = 0;
        v104 = std::string::append(&v169, "' got ");
        v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
        v170.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v105;
        v104->__r_.__value_.__l.__size_ = 0;
        v104->__r_.__value_.__r.__words[2] = 0;
        v104->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v160, v27);
        if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v106 = &v160;
        else
          v106 = (std::string *)v160.__r_.__value_.__r.__words[0];
        if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v107 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
        else
          v107 = v160.__r_.__value_.__l.__size_;
        v108 = std::string::append(&v170, (const std::string::value_type *)v106, v107);
        v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
        v171.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v109;
        v108->__r_.__value_.__l.__size_ = 0;
        v108->__r_.__value_.__r.__words[2] = 0;
        v108->__r_.__value_.__r.__words[0] = 0;
        v110 = std::string::append(&v171, " vs. ");
        v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        v172.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v111;
        v110->__r_.__value_.__l.__size_ = 0;
        v110->__r_.__value_.__r.__words[2] = 0;
        v110->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v159, v28);
        if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v112 = &v159;
        else
          v112 = (std::string *)v159.__r_.__value_.__r.__words[0];
        if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v113 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
        else
          v113 = v159.__r_.__value_.__l.__size_;
        v114 = std::string::append(&v172, (const std::string::value_type *)v112, v113);
        v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
        v158 = v114->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v115;
        v114->__r_.__value_.__l.__size_ = 0;
        v114->__r_.__value_.__r.__words[2] = 0;
        v114->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x20BCFEAD4](a6, &v164, 319, __p);
        if (SHIBYTE(v158) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v159.__r_.__value_.__l.__data_);
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v172.__r_.__value_.__l.__data_);
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v171.__r_.__value_.__l.__data_);
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v160.__r_.__value_.__l.__data_);
        if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v170.__r_.__value_.__l.__data_);
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v169.__r_.__value_.__l.__data_);
        if ((char)v163 < 0)
          operator delete(v161);
        if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v168.__r_.__value_.__l.__data_);
        if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v167.__r_.__value_.__l.__data_);
        if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v166.__r_.__value_.__l.__data_);
        v41 = v165;
        if (!v165)
          goto LABEL_243;
        v116 = (unint64_t *)&v165->__shared_owners_;
        do
          v43 = __ldaxr(v116);
        while (__stlxr(v43 - 1, v116));
        goto LABEL_241;
      }
      if (v19 != 5)
      {
        if (v21 < 3)
          goto LABEL_209;
        goto LABEL_180;
      }
      if (v24 == v25)
        goto LABEL_253;
      if (*v25 == 2)
        v29 = 16;
      else
        v29 = 8;
      if (v23 != v22)
      {
        if (*v22 > v29)
        {
          v30 = *(_QWORD *)(a1 + 8);
          v168.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
          v168.__r_.__value_.__l.__size_ = v30;
          if (v30)
          {
            v31 = (unint64_t *)(v30 + 8);
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          std::to_string(&v170, v29);
          v33 = std::string::insert(&v170, 0, "Expect kernel_sizes of depth in range [1, ");
          v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          v171.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
          v35 = std::string::append(&v171, "], got ");
          v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v172.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          if (*(_QWORD *)(a5 + 8) == *(_QWORD *)a5)
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          std::to_string(&v169, **(_DWORD **)a5);
          if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = &v169;
          else
            v37 = (std::string *)v169.__r_.__value_.__r.__words[0];
          if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
          else
            v38 = v169.__r_.__value_.__l.__size_;
          v39 = std::string::append(&v172, (const std::string::value_type *)v37, v38);
          v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v158 = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x20BCFEAD4](a6, &v168, 319, __p);
          if (SHIBYTE(v158) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v169.__r_.__value_.__l.__data_);
          if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v172.__r_.__value_.__l.__data_);
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v171.__r_.__value_.__l.__data_);
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v170.__r_.__value_.__l.__data_);
          v41 = (std::__shared_weak_count *)v168.__r_.__value_.__l.__size_;
          if (!v168.__r_.__value_.__l.__size_)
            goto LABEL_243;
          v42 = (unint64_t *)(v168.__r_.__value_.__l.__size_ + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          goto LABEL_241;
        }
LABEL_180:
        v117 = v19 - 4;
        if (v21 <= v19 - 4)
          goto LABEL_253;
        if (v25[v117] == 2)
          v118 = 32;
        else
          v118 = 16;
        if (v22[v117] > v118)
        {
          v119 = *(_QWORD *)(a1 + 8);
          v168.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
          v168.__r_.__value_.__l.__size_ = v119;
          if (v119)
          {
            v120 = (unint64_t *)(v119 + 8);
            do
              v121 = __ldxr(v120);
            while (__stxr(v121 + 1, v120));
          }
          std::to_string(&v170, v118);
          v122 = std::string::insert(&v170, 0, "Expect kernel_sizes of height in range [1, ");
          v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
          v171.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v123;
          v122->__r_.__value_.__l.__size_ = 0;
          v122->__r_.__value_.__r.__words[2] = 0;
          v122->__r_.__value_.__r.__words[0] = 0;
          v124 = std::string::append(&v171, "], got ");
          v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
          v172.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v125;
          v124->__r_.__value_.__l.__size_ = 0;
          v124->__r_.__value_.__r.__words[2] = 0;
          v124->__r_.__value_.__r.__words[0] = 0;
          if (v117 >= (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          std::to_string(&v169, *(_DWORD *)(*(_QWORD *)a5 + 4 * v117));
          if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v126 = &v169;
          else
            v126 = (std::string *)v169.__r_.__value_.__r.__words[0];
          if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v127 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
          else
            v127 = v169.__r_.__value_.__l.__size_;
          v128 = std::string::append(&v172, (const std::string::value_type *)v126, v127);
          v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
          v158 = v128->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v129;
          v128->__r_.__value_.__l.__size_ = 0;
          v128->__r_.__value_.__r.__words[2] = 0;
          v128->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x20BCFEAD4](a6, &v168, 319, __p);
          if (SHIBYTE(v158) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v169.__r_.__value_.__l.__data_);
          if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v172.__r_.__value_.__l.__data_);
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v171.__r_.__value_.__l.__data_);
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v170.__r_.__value_.__l.__data_);
          v41 = (std::__shared_weak_count *)v168.__r_.__value_.__l.__size_;
          if (!v168.__r_.__value_.__l.__size_)
            goto LABEL_243;
          v130 = (unint64_t *)(v168.__r_.__value_.__l.__size_ + 8);
          do
            v43 = __ldaxr(v130);
          while (__stlxr(v43 - 1, v130));
          goto LABEL_241;
        }
LABEL_209:
        v131 = v19 - 3;
        if (v20 == 4)
        {
          if (v21 > v131)
          {
            v132 = v25[v131] == 2;
            v133 = 8;
            v134 = 16;
LABEL_214:
            if (v132)
              v135 = v134;
            else
              v135 = v133;
            if (v22[v131] <= v135)
            {
              MIL::ValidationResult::ValidationResult(a6);
LABEL_243:
              if (MIL::ValidationResult::IsGood(a6))
              {
                MEMORY[0x20BCFEAEC](a6);
                ANEMachineIR::Utils::GetStaticTensorShape(a3, v148, (uint64_t)__p);
                ANEMachineIR::Utils::GetStaticTensorShape(a4, v149, (uint64_t)&v172);
                if (MIL::ValidationResult::IsGood(a6))
                {
                  v150 = (MIL::ValidationResult *)MEMORY[0x20BCFEAEC](a6);
                  MIL::ValidationResult::ValidationResult(v150);
                }
                if (v172.__r_.__value_.__r.__words[0])
                {
                  v172.__r_.__value_.__l.__size_ = v172.__r_.__value_.__r.__words[0];
                  operator delete(v172.__r_.__value_.__l.__data_);
                }
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              return;
            }
            v136 = *(_QWORD *)(a1 + 8);
            v168.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
            v168.__r_.__value_.__l.__size_ = v136;
            if (v136)
            {
              v137 = (unint64_t *)(v136 + 8);
              do
                v138 = __ldxr(v137);
              while (__stxr(v138 + 1, v137));
            }
            std::to_string(&v170, v135);
            v139 = std::string::insert(&v170, 0, "Expect kernel_sizes of width in range [1, ");
            v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
            v171.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v140;
            v139->__r_.__value_.__l.__size_ = 0;
            v139->__r_.__value_.__r.__words[2] = 0;
            v139->__r_.__value_.__r.__words[0] = 0;
            v141 = std::string::append(&v171, "], got ");
            v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
            v172.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v142;
            v141->__r_.__value_.__l.__size_ = 0;
            v141->__r_.__value_.__r.__words[2] = 0;
            v141->__r_.__value_.__r.__words[0] = 0;
            if (v131 >= (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            std::to_string(&v169, *(_DWORD *)(*(_QWORD *)a5 + 4 * v131));
            if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v143 = &v169;
            else
              v143 = (std::string *)v169.__r_.__value_.__r.__words[0];
            if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v144 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
            else
              v144 = v169.__r_.__value_.__l.__size_;
            v145 = std::string::append(&v172, (const std::string::value_type *)v143, v144);
            v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
            v158 = v145->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v146;
            v145->__r_.__value_.__l.__size_ = 0;
            v145->__r_.__value_.__r.__words[2] = 0;
            v145->__r_.__value_.__r.__words[0] = 0;
            MEMORY[0x20BCFEAD4](a6, &v168, 319, __p);
            if (SHIBYTE(v158) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v169.__r_.__value_.__l.__data_);
            if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v172.__r_.__value_.__l.__data_);
            if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v171.__r_.__value_.__l.__data_);
            if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v170.__r_.__value_.__l.__data_);
            v41 = (std::__shared_weak_count *)v168.__r_.__value_.__l.__size_;
            if (!v168.__r_.__value_.__l.__size_)
              goto LABEL_243;
            v147 = (unint64_t *)(v168.__r_.__value_.__l.__size_ + 8);
            do
              v43 = __ldaxr(v147);
            while (__stlxr(v43 - 1, v147));
LABEL_241:
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
            goto LABEL_243;
          }
        }
        else if (v21 > v131)
        {
          v132 = v25[v131] == 2;
          v133 = 16;
          v134 = 32;
          goto LABEL_214;
        }
LABEL_253:
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
    }
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v44 = *(std::__shared_weak_count **)(a1 + 8);
  v153 = *(void **)a1;
  v154 = v44;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v171, "x");
  v48 = std::string::insert(v47, 0, "Input '");
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v172.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = std::string::append(&v172, "' violates size constraints");
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v152 = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)v151 = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x20BCFEAD4](a6, &v153, 319, v151);
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v172.__r_.__value_.__l.__data_);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  v52 = v154;
  if (v154)
  {
    v53 = (unint64_t *)&v154->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  MEMORY[0x20BCFEAEC](__p);
}

void sub_206920A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v62 - 185) < 0)
    operator delete(*(void **)(v62 - 208));
  if (*(char *)(v62 - 89) < 0)
    operator delete(*(void **)(v62 - 112));
  if (*(char *)(v62 - 121) < 0)
    operator delete(*(void **)(v62 - 144));
  if (*(char *)(v62 - 153) < 0)
    operator delete(*(void **)(v62 - 176));
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v62 - 240);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ValidateOutputShape(uint64_t *a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X4>, uint64_t *a6@<X5>, MIL::ValidationResult *a7@<X8>)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::string v24;
  std::string v25;
  std::string v26;
  void *__p[2];
  std::string::size_type v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31[2];
  unsigned __int8 v32;
  void *v33;
  char v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;

  v35 = 0;
  v36 = 0;
  v37 = 0;
  ANEMachineIR::Validators::InferOutputShape(a1, a2, a3, a4, a5, (uint64_t)&v35, a7);
  if (MIL::ValidationResult::IsGood(a7))
  {
    MEMORY[0x20BCFEAEC](a7);
    if (v36 - v35 == a6[1] - *a6 && !memcmp(v35, (const void *)*a6, v36 - v35))
    {
      MIL::ValidationResult::ValidationResult(a7);
    }
    else
    {
      ANEMachineIR::Utils::ShapeString(a6);
      ANEMachineIR::Utils::ShapeString((uint64_t *)&v35);
      v10 = a1[1];
      v29 = *a1;
      v30 = (std::__shared_weak_count *)v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      std::operator+<char>();
      v13 = std::string::append(&v24, " does not match inferred shape ");
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if ((v32 & 0x80u) == 0)
        v15 = (const std::string::value_type *)v31;
      else
        v15 = (const std::string::value_type *)v31[0];
      if ((v32 & 0x80u) == 0)
        v16 = v32;
      else
        v16 = (std::string::size_type)v31[1];
      v17 = std::string::append(&v25, v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v26, ".");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v28 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x20BCFEAD4](a7, &v29, 313, __p);
      if (SHIBYTE(v28) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      v21 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if ((char)v32 < 0)
        operator delete(v31[0]);
      if (v34 < 0)
        operator delete(v33);
    }
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
}

void sub_20692101C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;
  void *v38;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  if (*(char *)(v36 - 81) < 0)
    operator delete(*(void **)(v36 - 104));
  if (*(char *)(v36 - 57) < 0)
    operator delete(*(void **)(v36 - 80));
  v38 = *(void **)(v36 - 56);
  if (v38)
  {
    *(_QWORD *)(v36 - 48) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ValidatePePool(uint64_t a1@<X0>, uint64_t a2@<X1>, ANEMachineIR::Utils *a3@<X2>, ANEMachineIR::Utils *a4@<X3>, uint64_t a5@<X4>, MIL::ValidationResult *a6@<X8>)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  void **v25;
  void *v26;
  int v27;
  int *v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string *v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  std::string *v45;
  MIL::ValidationResult *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type size;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  unint64_t *v80;
  _QWORD *v81;
  _BYTE *v82;
  std::string::size_type v83;
  unint64_t *v84;
  unint64_t v85;
  std::string::size_type *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t *v105;
  char *v106;
  uint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  std::string::size_type v111;
  unint64_t *v112;
  unint64_t v113;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  std::string::size_type v119;
  std::string *v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::string::size_type v125;
  unint64_t *v126;
  unint64_t v127;
  std::string *v128;
  __int128 v129;
  std::string *v130;
  __int128 v131;
  uint64_t v132;
  std::string *v133;
  std::string::size_type v134;
  std::string *v135;
  __int128 v136;
  unint64_t *v137;
  void *v138;
  std::string *v139;
  __int128 v140;
  std::string *v141;
  __int128 v142;
  std::string *v143;
  std::string::size_type v144;
  std::string *v145;
  __int128 v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  const MIL::IRTensorValueType *v150;
  const MIL::IRTensorValueType *v151;
  int *v152;
  int *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  std::string *v158;
  __int128 v159;
  std::string *v160;
  __int128 v161;
  int *v162;
  std::string *v163;
  std::string::size_type v164;
  std::string *v165;
  __int128 v166;
  std::string *v167;
  __int128 v168;
  uint64_t v169;
  std::string *v170;
  std::string::size_type v171;
  std::string *v172;
  __int128 v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unsigned int v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  unint64_t v195;
  int v196;
  int *v197;
  int *v198;
  unsigned int v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  int v203;
  int v204;
  _DWORD *v205;
  _DWORD *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  std::string *v221;
  __int128 v222;
  std::string *v223;
  __int128 v224;
  std::string *v225;
  std::string::size_type v226;
  std::string *v227;
  __int128 v228;
  std::string *v229;
  __int128 v230;
  std::string *v231;
  std::string::size_type v232;
  std::string *v233;
  __int128 v234;
  unint64_t *v235;
  std::string::size_type v236;
  unint64_t *v237;
  unint64_t v238;
  std::string *v239;
  std::string *v240;
  __int128 v241;
  std::string *v242;
  __int128 v243;
  unint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  std::string *v254;
  __int128 v255;
  std::string *v256;
  __int128 v257;
  std::string *v258;
  std::string::size_type v259;
  std::string *v260;
  __int128 v261;
  std::string *v262;
  __int128 v263;
  std::string *v264;
  std::string::size_type v265;
  std::string *v266;
  __int128 v267;
  unint64_t *v268;
  uint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  std::string *v272;
  __int128 v273;
  std::string *v274;
  __int128 v275;
  std::string *v276;
  std::string::size_type v277;
  std::string *v278;
  __int128 v279;
  std::string *v280;
  __int128 v281;
  std::string *v282;
  std::string::size_type v283;
  std::string *v284;
  __int128 v285;
  unint64_t *v286;
  MIL::ValidationResult *v287;
  uint64_t v288;
  uint64_t *v289;
  ANEMachineIR::Utils *v290;
  MIL::ValidationResult *v291;
  void *v292;
  _BYTE *v293;
  void *v294;
  std::__shared_weak_count *v295;
  void *v296[2];
  std::string::size_type v297;
  uint64_t v298;
  std::__shared_weak_count *v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  void *__p[2];
  _QWORD v303[6];
  std::string v304;
  std::string v305;
  std::string v306;
  std::string v307;
  std::string v308;
  std::string v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  std::string v312;
  uint64_t v313;

  v313 = *MEMORY[0x24BDAC8D0];
  v12 = *(std::__shared_weak_count **)(a1 + 8);
  v300 = *(_QWORD *)a1;
  v301 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&v309, "x");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v300, (uint64_t)a3, (uint64_t)&v309, a2, (MIL::ValidationResult *)__p);
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v309.__r_.__value_.__l.__data_);
  v15 = v301;
  if (v301)
  {
    v16 = (unint64_t *)&v301->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v290 = a4;
  v291 = a6;
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p) & 1) == 0)
  {
    v31 = *(std::__shared_weak_count **)(a1 + 8);
    v298 = *(_QWORD *)a1;
    v299 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v308, "x");
    v35 = std::string::insert(v34, 0, "Input '");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v309.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    v37 = std::string::append(&v309, "' violates size constraints");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v297 = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)v296 = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x20BCFEAD4](a6, &v298, 319, v296);
    if (SHIBYTE(v297) < 0)
      operator delete(v296[0]);
    if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v309.__r_.__value_.__l.__data_);
    if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v308.__r_.__value_.__l.__data_);
    v39 = v299;
    if (v299)
    {
      v40 = (unint64_t *)&v299->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    MEMORY[0x20BCFEAEC](__p);
    return;
  }
  v289 = (uint64_t *)a1;
  MEMORY[0x20BCFEAEC](__p);
  v18 = (_QWORD *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)a3 + 96))(a3);
  v19 = a5 + 24;
  v20 = v18[1] - *v18;
  v21 = v20 >> 3;
  v22 = (v20 >> 3) - 2;
  if (v22 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v42 = *(unint64_t **)(a1 + 8);
    v294 = *(void **)a1;
    v295 = (std::__shared_weak_count *)v42;
    if (v42)
    {
      v43 = v42 + 1;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    std::string::basic_string[abi:ne180100]<0>(&v305, "kernel_sizes");
    v45 = std::string::insert(&v305, 0, "Expect '");
    v46 = a6;
    v47 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v306.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v47;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v48 = std::string::append(&v306, "' to be array of size ");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v307.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v312, (v20 >> 3) - 2);
    if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = &v312;
    else
      v50 = (std::string *)v312.__r_.__value_.__r.__words[0];
    if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v312.__r_.__value_.__r.__words[2]);
    else
      size = v312.__r_.__value_.__l.__size_;
    v52 = std::string::append(&v307, (const std::string::value_type *)v50, size);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v308.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v308.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = std::string::append(&v308, ", got ");
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v309.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v304, (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = &v304;
    else
      v56 = (std::string *)v304.__r_.__value_.__r.__words[0];
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
    else
      v57 = v304.__r_.__value_.__l.__size_;
    v58 = std::string::append(&v309, (const std::string::value_type *)v56, v57);
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v303[0] = *((_QWORD *)&v58->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x20BCFEAD4](a6, &v294, 319, __p);
    if (SHIBYTE(v303[0]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v304.__r_.__value_.__l.__data_);
    if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v309.__r_.__value_.__l.__data_);
    if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v308.__r_.__value_.__l.__data_);
    if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v312.__r_.__value_.__l.__data_);
    if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v307.__r_.__value_.__l.__data_);
    if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v306.__r_.__value_.__l.__data_);
    if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v305.__r_.__value_.__l.__data_);
    v60 = v295;
    if (!v295)
      goto LABEL_244;
    v61 = (unint64_t *)&v295->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
LABEL_117:
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
    goto LABEL_244;
  }
  if (v22 != (uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 2)
  {
    v63 = *(unint64_t **)(a1 + 8);
    v294 = *(void **)a1;
    v295 = (std::__shared_weak_count *)v63;
    if (v63)
    {
      v64 = v63 + 1;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    std::string::basic_string[abi:ne180100]<0>(&v305, "strides");
    v46 = a6;
    v66 = std::string::insert(&v305, 0, "Expect '");
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v306.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    v68 = std::string::append(&v306, "' to be array of size ");
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v307.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v312, (v20 >> 3) - 2);
    if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v312;
    else
      v70 = (std::string *)v312.__r_.__value_.__r.__words[0];
    if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = HIBYTE(v312.__r_.__value_.__r.__words[2]);
    else
      v71 = v312.__r_.__value_.__l.__size_;
    v72 = std::string::append(&v307, (const std::string::value_type *)v70, v71);
    v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v308.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v308.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    v74 = std::string::append(&v308, ", got ");
    v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v309.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v304, (uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 2);
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &v304;
    else
      v76 = (std::string *)v304.__r_.__value_.__r.__words[0];
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v77 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
    else
      v77 = v304.__r_.__value_.__l.__size_;
    v78 = std::string::append(&v309, (const std::string::value_type *)v76, v77);
    v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v303[0] = *((_QWORD *)&v78->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x20BCFEAD4](a6, &v294, 319, __p);
    if (SHIBYTE(v303[0]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v304.__r_.__value_.__l.__data_);
    if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v309.__r_.__value_.__l.__data_);
    if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v308.__r_.__value_.__l.__data_);
    if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v312.__r_.__value_.__l.__data_);
    if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v307.__r_.__value_.__l.__data_);
    if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v306.__r_.__value_.__l.__data_);
    if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v305.__r_.__value_.__l.__data_);
    v60 = v295;
    if (!v295)
      goto LABEL_244;
    v80 = (unint64_t *)&v295->__shared_owners_;
    do
      v62 = __ldaxr(v80);
    while (__stlxr(v62 - 1, v80));
    goto LABEL_117;
  }
  v23 = 0;
  v312.__r_.__value_.__r.__words[0] = (std::string::size_type)"kernel_sizes";
  v312.__r_.__value_.__l.__size_ = (std::string::size_type)"strides";
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, *(char **)((char *)&v312.__r_.__value_.__l.__data_ + v23));
    v24 = HIBYTE(v303[0]);
    if (v20 == 40)
      break;
LABEL_27:
    if ((v303[0] & 0x8000000000000000) != 0)
      operator delete(__p[0]);
    v23 += 8;
    if (v23 == 16)
    {
      __p[0] = 0;
      __p[1] = 0;
      v303[0] = 0;
      if (v20 >> 3 == 5)
      {
        v81 = operator new(8uLL);
        *v81 = 0;
        v82 = v81 + 1;
        __p[1] = v81 + 1;
        v303[0] = v81 + 1;
        __p[0] = v81;
        goto LABEL_129;
      }
      if (v22 <= 1)
      {
        v94 = 0;
        v93 = 0;
        v97 = v21 - 3;
        v46 = a6;
        v86 = (std::string::size_type *)v289;
      }
      else
      {
        v82 = 0;
        v81 = 0;
LABEL_129:
        v46 = a6;
        v86 = (std::string::size_type *)v289;
        v87 = v82 - (_BYTE *)v81;
        v88 = (v82 - (_BYTE *)v81) >> 3;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 61)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        if (v87 >> 2 > v89)
          v89 = v87 >> 2;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v303, v90);
          v81 = __p[0];
          v82 = __p[1];
        }
        else
        {
          v91 = 0;
        }
        v92 = &v91[8 * v88];
        v93 = &v91[8 * v90];
        *(_QWORD *)v92 = v21 - 4;
        v94 = v92 + 8;
        v95 = v92;
        if (v82 != (_BYTE *)v81)
        {
          v95 = v92;
          do
          {
            v96 = *((_QWORD *)v82 - 1);
            v82 -= 8;
            *((_QWORD *)v95 - 1) = v96;
            v95 -= 8;
          }
          while (v82 != (_BYTE *)v81);
        }
        __p[0] = v95;
        __p[1] = v92 + 8;
        v303[0] = v93;
        if (v81)
        {
          operator delete(v81);
          v93 = (char *)v303[0];
        }
        __p[1] = v92 + 8;
        v97 = v21 - 3;
        if (v94 < v93)
        {
          *((_QWORD *)v92 + 1) = v97;
          v98 = (unint64_t *)(v92 + 16);
          goto LABEL_160;
        }
      }
      v99 = (char *)__p[0];
      v100 = (v94 - (char *)__p[0]) >> 3;
      v101 = v100 + 1;
      if ((unint64_t)(v100 + 1) >> 61)
        std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
      v102 = v93 - (char *)__p[0];
      if (v102 >> 2 > v101)
        v101 = v102 >> 2;
      if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
        v103 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v103 = v101;
      if (v103)
      {
        v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v303, v103);
        v99 = (char *)__p[0];
        v94 = (char *)__p[1];
      }
      else
      {
        v104 = 0;
      }
      v105 = (uint64_t *)&v104[8 * v100];
      v106 = &v104[8 * v103];
      *v105 = v97;
      v98 = (unint64_t *)(v105 + 1);
      while (v94 != v99)
      {
        v107 = *((_QWORD *)v94 - 1);
        v94 -= 8;
        *--v105 = v107;
      }
      __p[0] = v105;
      __p[1] = v98;
      v303[0] = v106;
      if (v99)
        operator delete(v99);
LABEL_160:
      __p[1] = v98;
      v108 = (unint64_t *)__p[0];
      if (__p[0] == v98)
      {
LABEL_167:
        MIL::ValidationResult::ValidationResult(v46);
        v19 = a5 + 24;
      }
      else
      {
        v109 = *(_QWORD *)(a5 + 24);
        while (1)
        {
          v110 = *v108;
          if ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2 <= *v108)
LABEL_456:
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          if ((*(_DWORD *)(*(_QWORD *)a5 + 4 * v110) - 6) <= 0xFFFFFFFA)
            break;
          if ((*(_QWORD *)(a5 + 32) - v109) >> 2 <= v110)
            goto LABEL_456;
          if ((*(_DWORD *)(v109 + 4 * v110) - 3) <= 0xFFFFFFFD)
          {
            v125 = v86[1];
            v312.__r_.__value_.__r.__words[0] = *v86;
            v312.__r_.__value_.__l.__size_ = v125;
            if (v125)
            {
              v126 = (unint64_t *)(v125 + 8);
              do
                v127 = __ldxr(v126);
              while (__stxr(v127 + 1, v126));
            }
            std::string::basic_string[abi:ne180100]<0>(&v306, "strides");
            v19 = a5 + 24;
            v128 = std::string::insert(&v306, 0, "Expect ");
            v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
            v307.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v129;
            v128->__r_.__value_.__l.__size_ = 0;
            v128->__r_.__value_.__r.__words[2] = 0;
            v128->__r_.__value_.__r.__words[0] = 0;
            v130 = std::string::append(&v307, " in range [1, 2], got ");
            v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
            v308.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v308.__r_.__value_.__l.__data_ = v131;
            v130->__r_.__value_.__l.__size_ = 0;
            v130->__r_.__value_.__r.__words[2] = 0;
            v130->__r_.__value_.__r.__words[0] = 0;
            v132 = *(_QWORD *)(a5 + 24);
            if (v110 >= (*(_QWORD *)(a5 + 32) - v132) >> 2)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            std::to_string(&v305, *(_DWORD *)(v132 + 4 * v110));
            if ((v305.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v133 = &v305;
            else
              v133 = (std::string *)v305.__r_.__value_.__r.__words[0];
            if ((v305.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v134 = HIBYTE(v305.__r_.__value_.__r.__words[2]);
            else
              v134 = v305.__r_.__value_.__l.__size_;
            v135 = std::string::append(&v308, (const std::string::value_type *)v133, v134);
            v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
            v309.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v136;
            v135->__r_.__value_.__l.__size_ = 0;
            v135->__r_.__value_.__r.__words[2] = 0;
            v135->__r_.__value_.__r.__words[0] = 0;
            MEMORY[0x20BCFEAD4](v46, &v312, 319, &v309);
            if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v309.__r_.__value_.__l.__data_);
            if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v305.__r_.__value_.__l.__data_);
            if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v308.__r_.__value_.__l.__data_);
            if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v307.__r_.__value_.__l.__data_);
            if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v306.__r_.__value_.__l.__data_);
            v122 = (std::__shared_weak_count *)v312.__r_.__value_.__l.__size_;
            if (v312.__r_.__value_.__l.__size_)
            {
              v137 = (unint64_t *)(v312.__r_.__value_.__l.__size_ + 8);
              do
                v124 = __ldaxr(v137);
              while (__stlxr(v124 - 1, v137));
              goto LABEL_215;
            }
            goto LABEL_217;
          }
          if (++v108 == v98)
            goto LABEL_167;
        }
        v111 = v86[1];
        v312.__r_.__value_.__r.__words[0] = *v86;
        v312.__r_.__value_.__l.__size_ = v111;
        if (v111)
        {
          v112 = (unint64_t *)(v111 + 8);
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
        std::string::basic_string[abi:ne180100]<0>(&v306, "kernel_sizes");
        v19 = a5 + 24;
        v114 = std::string::insert(&v306, 0, "Expect ");
        v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
        v307.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v115;
        v114->__r_.__value_.__l.__size_ = 0;
        v114->__r_.__value_.__r.__words[2] = 0;
        v114->__r_.__value_.__r.__words[0] = 0;
        v116 = std::string::append(&v307, " in range [1, 5], got ");
        v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
        v308.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v308.__r_.__value_.__l.__data_ = v117;
        v116->__r_.__value_.__l.__size_ = 0;
        v116->__r_.__value_.__r.__words[2] = 0;
        v116->__r_.__value_.__r.__words[0] = 0;
        if (v110 >= (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        std::to_string(&v305, *(_DWORD *)(*(_QWORD *)a5 + 4 * v110));
        if ((v305.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v118 = &v305;
        else
          v118 = (std::string *)v305.__r_.__value_.__r.__words[0];
        if ((v305.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v119 = HIBYTE(v305.__r_.__value_.__r.__words[2]);
        else
          v119 = v305.__r_.__value_.__l.__size_;
        v120 = std::string::append(&v308, (const std::string::value_type *)v118, v119);
        v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
        v309.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v121;
        v120->__r_.__value_.__l.__size_ = 0;
        v120->__r_.__value_.__r.__words[2] = 0;
        v120->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x20BCFEAD4](v46, &v312, 319, &v309);
        if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v309.__r_.__value_.__l.__data_);
        if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v305.__r_.__value_.__l.__data_);
        if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v308.__r_.__value_.__l.__data_);
        if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v307.__r_.__value_.__l.__data_);
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v306.__r_.__value_.__l.__data_);
        v122 = (std::__shared_weak_count *)v312.__r_.__value_.__l.__size_;
        if (v312.__r_.__value_.__l.__size_)
        {
          v123 = (unint64_t *)(v312.__r_.__value_.__l.__size_ + 8);
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
LABEL_215:
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
      }
LABEL_217:
      v138 = __p[0];
      if (__p[0])
      {
        __p[1] = __p[0];
LABEL_243:
        operator delete(v138);
        goto LABEL_244;
      }
      goto LABEL_244;
    }
  }
  if ((v303[0] & 0x8000000000000000) != 0)
  {
    if (__p[1] != (void *)12)
      goto LABEL_25;
    v25 = (void **)__p[0];
  }
  else
  {
    if (HIBYTE(v303[0]) != 12)
      goto LABEL_25;
    v25 = __p;
  }
  v26 = *v25;
  v27 = *((_DWORD *)v25 + 2);
  if (v26 != (void *)0x735F6C656E72656BLL || v27 != 1936030313)
  {
LABEL_25:
    v29 = *(int **)(a5 + 24);
    if (*(int **)(a5 + 32) == v29)
      goto LABEL_32;
    goto LABEL_26;
  }
  v29 = *(int **)a5;
  if (*(_QWORD *)(a5 + 8) == *(_QWORD *)a5)
LABEL_32:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
LABEL_26:
  v30 = *v29;
  if (*v29 == 1)
    goto LABEL_27;
  v19 = a5 + 24;
  v83 = *(_QWORD *)(a1 + 8);
  v304.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
  v304.__r_.__value_.__l.__size_ = v83;
  v46 = a6;
  if (v83)
  {
    v84 = (unint64_t *)(v83 + 8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
    v24 = HIBYTE(v303[0]);
  }
  if (v24 < 0)
  {
    std::string::__init_copy_ctor_external(&v306, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v306.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v306.__r_.__value_.__r.__words[2] = v303[0];
  }
  v139 = std::string::insert(&v306, 0, "PE does not support '");
  v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
  v307.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v140;
  v139->__r_.__value_.__l.__size_ = 0;
  v139->__r_.__value_.__r.__words[2] = 0;
  v139->__r_.__value_.__r.__words[0] = 0;
  v141 = std::string::append(&v307, "' in depth dimension, got: ");
  v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
  v308.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v308.__r_.__value_.__l.__data_ = v142;
  v141->__r_.__value_.__l.__size_ = 0;
  v141->__r_.__value_.__r.__words[2] = 0;
  v141->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v305, v30);
  if ((v305.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v143 = &v305;
  else
    v143 = (std::string *)v305.__r_.__value_.__r.__words[0];
  if ((v305.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v144 = HIBYTE(v305.__r_.__value_.__r.__words[2]);
  else
    v144 = v305.__r_.__value_.__l.__size_;
  v145 = std::string::append(&v308, (const std::string::value_type *)v143, v144);
  v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
  v309.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v146;
  v145->__r_.__value_.__l.__size_ = 0;
  v145->__r_.__value_.__r.__words[2] = 0;
  v145->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x20BCFEAD4](a6, &v304, 319, &v309);
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v309.__r_.__value_.__l.__data_);
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v305.__r_.__value_.__l.__data_);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  v147 = (std::__shared_weak_count *)v304.__r_.__value_.__l.__size_;
  if (v304.__r_.__value_.__l.__size_)
  {
    v148 = (unint64_t *)(v304.__r_.__value_.__l.__size_ + 8);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  if (SHIBYTE(v303[0]) < 0)
  {
    v138 = __p[0];
    goto LABEL_243;
  }
LABEL_244:
  if (!MIL::ValidationResult::IsGood(v46))
    return;
  v288 = v19;
  MEMORY[0x20BCFEAEC](v46);
  ANEMachineIR::Utils::GetStaticTensorShape(a3, v150, (uint64_t)&v294);
  ANEMachineIR::Utils::GetStaticTensorShape(v290, v151, (uint64_t)&v292);
  v153 = *(int **)(a5 + 48);
  v152 = *(int **)(a5 + 56);
  if (v153 == v152)
  {
LABEL_449:
    if (MIL::ValidationResult::IsGood(v291))
    {
      v287 = (MIL::ValidationResult *)MEMORY[0x20BCFEAEC](v291);
      MIL::ValidationResult::ValidationResult(v287);
    }
    goto LABEL_451;
  }
  v154 = (char *)v152 - (char *)v153;
  if (v154 == 24 && (*v153 || v153[1]))
  {
    v155 = v289[1];
    v310 = *v289;
    v311 = (std::__shared_weak_count *)v155;
    if (v155)
    {
      v156 = (unint64_t *)(v155 + 8);
      do
        v157 = __ldxr(v156);
      while (__stxr(v157 + 1, v156));
    }
    std::string::basic_string[abi:ne180100]<0>(&v305, "custom_pads");
    v158 = std::string::insert(&v305, 0, "PE does not support '");
    v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
    v306.__r_.__value_.__r.__words[2] = v158->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v159;
    v158->__r_.__value_.__l.__size_ = 0;
    v158->__r_.__value_.__r.__words[2] = 0;
    v158->__r_.__value_.__r.__words[0] = 0;
    v160 = std::string::append(&v306, "' in depth dimension, got ");
    v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
    v307.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v161;
    v160->__r_.__value_.__l.__size_ = 0;
    v160->__r_.__value_.__r.__words[2] = 0;
    v160->__r_.__value_.__r.__words[0] = 0;
    v162 = *(int **)(a5 + 48);
    if (*(int **)(a5 + 56) == v162)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    std::to_string(&v312, *v162);
    if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v163 = &v312;
    else
      v163 = (std::string *)v312.__r_.__value_.__r.__words[0];
    if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v164 = HIBYTE(v312.__r_.__value_.__r.__words[2]);
    else
      v164 = v312.__r_.__value_.__l.__size_;
    v165 = std::string::append(&v307, (const std::string::value_type *)v163, v164);
    v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
    v308.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v308.__r_.__value_.__l.__data_ = v166;
    v165->__r_.__value_.__l.__size_ = 0;
    v165->__r_.__value_.__r.__words[2] = 0;
    v165->__r_.__value_.__r.__words[0] = 0;
    v167 = std::string::append(&v308, ", ");
    v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
    v309.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v168;
    v167->__r_.__value_.__l.__size_ = 0;
    v167->__r_.__value_.__r.__words[2] = 0;
    v167->__r_.__value_.__r.__words[0] = 0;
    v169 = *(_QWORD *)(a5 + 48);
    if ((unint64_t)(*(_QWORD *)(a5 + 56) - v169) <= 4)
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    std::to_string(&v304, *(_DWORD *)(v169 + 4));
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v170 = &v304;
    else
      v170 = (std::string *)v304.__r_.__value_.__r.__words[0];
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v171 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
    else
      v171 = v304.__r_.__value_.__l.__size_;
    v172 = std::string::append(&v309, (const std::string::value_type *)v170, v171);
    v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
    v303[0] = *((_QWORD *)&v172->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v173;
    v172->__r_.__value_.__l.__size_ = 0;
    v172->__r_.__value_.__r.__words[2] = 0;
    v172->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x20BCFEAD4](v291, &v310, 319, __p);
    if (SHIBYTE(v303[0]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v304.__r_.__value_.__l.__data_);
    if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v309.__r_.__value_.__l.__data_);
    if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v308.__r_.__value_.__l.__data_);
    if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v312.__r_.__value_.__l.__data_);
    if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v307.__r_.__value_.__l.__data_);
    if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v306.__r_.__value_.__l.__data_);
    if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v305.__r_.__value_.__l.__data_);
    v174 = v311;
    if (v311)
    {
      v175 = (unint64_t *)&v311->__shared_owners_;
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
LABEL_369:
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
    goto LABEL_447;
  }
  v177 = (char *)v295 - (_BYTE *)v294;
  v178 = ((char *)v295 - (_BYTE *)v294) >> 3;
  v179 = v178 - 2;
  v180 = v154 >> 2;
  if (v178 != 5)
  {
    if (v179 < 2)
    {
      if (v179 < (v293 - (_BYTE *)v292) >> 3)
      {
        v212 = 2 * v179 - 2;
        if (v180 <= v212)
          goto LABEL_458;
        v213 = v178 - 3;
        if (v213 >= (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
          goto LABEL_458;
        v188 = 0;
        v187 = 0;
        v194 = 0;
        v209 = 0;
        v186 = 0;
        v195 = *((_QWORD *)v294 + v179);
        v196 = v153[v212];
        v193 = *((_QWORD *)v292 + v179);
        v204 = *(_DWORD *)(*(_QWORD *)a5 + 4 * v213);
        v205 = *(_DWORD **)(a5 + 24);
        v208 = (uint64_t)(*(_QWORD *)(a5 + 32) - (_QWORD)v205) >> 2;
        v207 = 1;
        v210 = 1;
        v203 = 1;
        v192 = 1;
        v184 = 1;
        v191 = 1;
        v185 = 1;
        v199 = 1;
        v200 = 1;
        v211 = 1;
        goto LABEL_315;
      }
    }
    else if ((unint64_t)v177 >= 0x11)
    {
      v183 = (unint64_t *)((char *)v294 + 8 * v179);
      v186 = v178 - 3;
      v181 = v292;
      v182 = (v293 - (_BYTE *)v292) >> 3;
      v185 = 1;
      v184 = 1;
      goto LABEL_292;
    }
LABEL_457:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v181 = v292;
  v182 = (v293 - (_BYTE *)v292) >> 3;
  if (v182 <= 1)
    goto LABEL_457;
  v183 = (unint64_t *)((char *)v294 + 24);
  v184 = *((_QWORD *)v294 + 1);
  v185 = *((_QWORD *)v292 + 1);
  v186 = 2;
LABEL_292:
  if (v182 <= v186 || v182 <= v179)
    goto LABEL_457;
  if (v177 >> 3 == 5)
  {
    v187 = *v153;
    v188 = *v153;
  }
  else
  {
    v188 = 0;
    v187 = 0;
  }
  v189 = 2 * v179 - 4;
  if (v180 <= v189)
    goto LABEL_458;
  v190 = 2 * v179 - 2;
  if (v180 <= v190)
    goto LABEL_458;
  v191 = *((_QWORD *)v294 + v186);
  v192 = v181[v186];
  v193 = v181[v179];
  v194 = v153[v189];
  v195 = *v183;
  v196 = v153[v190];
  v197 = *(int **)a5;
  v198 = *(int **)(a5 + 8);
  if (v177 >> 3 != 5)
  {
    v200 = 1;
    v199 = 1;
    goto LABEL_303;
  }
  if (v198 == v197)
    goto LABEL_458;
  v199 = *v197;
  v200 = *v197;
LABEL_303:
  v201 = v178 - 4;
  v202 = v198 - v197;
  if (v202 <= v201 || v202 <= v186)
    goto LABEL_458;
  v203 = v197[v201];
  v204 = v197[v186];
  v205 = *(_DWORD **)(a5 + 24);
  v206 = *(_DWORD **)(a5 + 32);
  if (v177 >> 3 == 5)
  {
    if (v206 != v205)
    {
      LODWORD(v207) = *v205;
      goto LABEL_309;
    }
    goto LABEL_458;
  }
  LODWORD(v207) = 1;
LABEL_309:
  v208 = v206 - v205;
  if (v208 <= v201)
LABEL_458:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  v209 = (int)v194;
  v210 = v203;
  v207 = (int)v207;
  v211 = v205[v201];
LABEL_315:
  if (v208 <= v186)
    goto LABEL_458;
  if (v196 >= v204 || v194 >= v203 || v187 >= v199)
  {
    v236 = v289[1];
    v307.__r_.__value_.__r.__words[0] = *v289;
    v307.__r_.__value_.__l.__size_ = v236;
    if (v236)
    {
      v237 = (unint64_t *)(v236 + 8);
      do
        v238 = __ldxr(v237);
      while (__stxr(v238 + 1, v237));
    }
    v239 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v308, "custom_pads");
    v240 = std::string::insert(v239, 0, "PE pool value of ");
    v241 = *(_OWORD *)&v240->__r_.__value_.__l.__data_;
    v309.__r_.__value_.__r.__words[2] = v240->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v241;
    v240->__r_.__value_.__l.__size_ = 0;
    v240->__r_.__value_.__r.__words[2] = 0;
    v240->__r_.__value_.__r.__words[0] = 0;
    v242 = std::string::append(&v309, " exceed limits, must in range [0, K] where K is the kernel_size at that dimension");
    v243 = *(_OWORD *)&v242->__r_.__value_.__l.__data_;
    v303[0] = *((_QWORD *)&v242->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v243;
    v242->__r_.__value_.__l.__size_ = 0;
    v242->__r_.__value_.__r.__words[2] = 0;
    v242->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x20BCFEAD4](v291, &v307, 319, __p);
    if (SHIBYTE(v303[0]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v309.__r_.__value_.__l.__data_);
    if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v308.__r_.__value_.__l.__data_);
    v174 = (std::__shared_weak_count *)v307.__r_.__value_.__l.__size_;
    if (v307.__r_.__value_.__l.__size_)
    {
      v244 = (unint64_t *)(v307.__r_.__value_.__l.__size_ + 8);
      do
        v176 = __ldaxr(v244);
      while (__stlxr(v176 - 1, v244));
      goto LABEL_369;
    }
    goto LABEL_447;
  }
  v214 = (int)v205[v186];
  if (v177 != 40)
  {
    if ((unint64_t)v177 < 0x19)
    {
LABEL_374:
      v248 = (v193 - 1) * v214;
      v249 = v248 - v196;
      v250 = v248 + v204 - (uint64_t)v196;
      if (v195 <= v249 || v195 > v250)
      {
        v269 = v289[1];
        v310 = *v289;
        v311 = (std::__shared_weak_count *)v269;
        if (v269)
        {
          v270 = (unint64_t *)(v269 + 8);
          do
            v271 = __ldxr(v270);
          while (__stxr(v271 + 1, v270));
        }
        std::to_string(&v305, v249);
        v272 = std::string::insert(&v305, 0, "Input dimension width exceed limits, expect [");
        v273 = *(_OWORD *)&v272->__r_.__value_.__l.__data_;
        v306.__r_.__value_.__r.__words[2] = v272->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v273;
        v272->__r_.__value_.__l.__size_ = 0;
        v272->__r_.__value_.__r.__words[2] = 0;
        v272->__r_.__value_.__r.__words[0] = 0;
        v274 = std::string::append(&v306, ", ");
        v275 = *(_OWORD *)&v274->__r_.__value_.__l.__data_;
        v307.__r_.__value_.__r.__words[2] = v274->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v275;
        v274->__r_.__value_.__l.__size_ = 0;
        v274->__r_.__value_.__r.__words[2] = 0;
        v274->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v312, v250);
        if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v276 = &v312;
        else
          v276 = (std::string *)v312.__r_.__value_.__r.__words[0];
        if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v277 = HIBYTE(v312.__r_.__value_.__r.__words[2]);
        else
          v277 = v312.__r_.__value_.__l.__size_;
        v278 = std::string::append(&v307, (const std::string::value_type *)v276, v277);
        v279 = *(_OWORD *)&v278->__r_.__value_.__l.__data_;
        v308.__r_.__value_.__r.__words[2] = v278->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v308.__r_.__value_.__l.__data_ = v279;
        v278->__r_.__value_.__l.__size_ = 0;
        v278->__r_.__value_.__r.__words[2] = 0;
        v278->__r_.__value_.__r.__words[0] = 0;
        v280 = std::string::append(&v308, "), got ");
        v281 = *(_OWORD *)&v280->__r_.__value_.__l.__data_;
        v309.__r_.__value_.__r.__words[2] = v280->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v281;
        v280->__r_.__value_.__l.__size_ = 0;
        v280->__r_.__value_.__r.__words[2] = 0;
        v280->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v304, v195);
        if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v282 = &v304;
        else
          v282 = (std::string *)v304.__r_.__value_.__r.__words[0];
        if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v283 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
        else
          v283 = v304.__r_.__value_.__l.__size_;
        v284 = std::string::append(&v309, (const std::string::value_type *)v282, v283);
        v285 = *(_OWORD *)&v284->__r_.__value_.__l.__data_;
        v303[0] = *((_QWORD *)&v284->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v285;
        v284->__r_.__value_.__l.__size_ = 0;
        v284->__r_.__value_.__r.__words[2] = 0;
        v284->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x20BCFEAD4](v291, &v310, 319, __p);
        if (SHIBYTE(v303[0]) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v304.__r_.__value_.__l.__data_);
        if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v309.__r_.__value_.__l.__data_);
        if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v308.__r_.__value_.__l.__data_);
        if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v312.__r_.__value_.__l.__data_);
        if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v307.__r_.__value_.__l.__data_);
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v306.__r_.__value_.__l.__data_);
        if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v305.__r_.__value_.__l.__data_);
        v174 = v311;
        if (v311)
        {
          v286 = (unint64_t *)&v311->__shared_owners_;
          do
            v176 = __ldaxr(v286);
          while (__stlxr(v176 - 1, v286));
          goto LABEL_369;
        }
      }
      else
      {
        MIL::ValidationResult::ValidationResult(v291);
      }
      goto LABEL_447;
    }
LABEL_372:
    v245 = (v192 - 1) * v211;
    v246 = v245 - v209;
    v247 = v245 + v210 - v209;
    if (v191 <= v245 - v209 || v191 > v247)
    {
      v251 = v289[1];
      v310 = *v289;
      v311 = (std::__shared_weak_count *)v251;
      if (v251)
      {
        v252 = (unint64_t *)(v251 + 8);
        do
          v253 = __ldxr(v252);
        while (__stxr(v253 + 1, v252));
      }
      std::to_string(&v305, v246);
      v254 = std::string::insert(&v305, 0, "Input dimension height exceed limits, expect [");
      v255 = *(_OWORD *)&v254->__r_.__value_.__l.__data_;
      v306.__r_.__value_.__r.__words[2] = v254->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v255;
      v254->__r_.__value_.__l.__size_ = 0;
      v254->__r_.__value_.__r.__words[2] = 0;
      v254->__r_.__value_.__r.__words[0] = 0;
      v256 = std::string::append(&v306, ", ");
      v257 = *(_OWORD *)&v256->__r_.__value_.__l.__data_;
      v307.__r_.__value_.__r.__words[2] = v256->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v257;
      v256->__r_.__value_.__l.__size_ = 0;
      v256->__r_.__value_.__r.__words[2] = 0;
      v256->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v312, v247);
      if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v258 = &v312;
      else
        v258 = (std::string *)v312.__r_.__value_.__r.__words[0];
      if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v259 = HIBYTE(v312.__r_.__value_.__r.__words[2]);
      else
        v259 = v312.__r_.__value_.__l.__size_;
      v260 = std::string::append(&v307, (const std::string::value_type *)v258, v259);
      v261 = *(_OWORD *)&v260->__r_.__value_.__l.__data_;
      v308.__r_.__value_.__r.__words[2] = v260->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v308.__r_.__value_.__l.__data_ = v261;
      v260->__r_.__value_.__l.__size_ = 0;
      v260->__r_.__value_.__r.__words[2] = 0;
      v260->__r_.__value_.__r.__words[0] = 0;
      v262 = std::string::append(&v308, "), got ");
      v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
      v309.__r_.__value_.__r.__words[2] = v262->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v263;
      v262->__r_.__value_.__l.__size_ = 0;
      v262->__r_.__value_.__r.__words[2] = 0;
      v262->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v304, v191);
      if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v264 = &v304;
      else
        v264 = (std::string *)v304.__r_.__value_.__r.__words[0];
      if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v265 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
      else
        v265 = v304.__r_.__value_.__l.__size_;
      v266 = std::string::append(&v309, (const std::string::value_type *)v264, v265);
      v267 = *(_OWORD *)&v266->__r_.__value_.__l.__data_;
      v303[0] = *((_QWORD *)&v266->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v267;
      v266->__r_.__value_.__l.__size_ = 0;
      v266->__r_.__value_.__r.__words[2] = 0;
      v266->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x20BCFEAD4](v291, &v310, 319, __p);
      if (SHIBYTE(v303[0]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v304.__r_.__value_.__l.__data_);
      if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v309.__r_.__value_.__l.__data_);
      if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v308.__r_.__value_.__l.__data_);
      if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v312.__r_.__value_.__l.__data_);
      if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v307.__r_.__value_.__l.__data_);
      if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v306.__r_.__value_.__l.__data_);
      if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v305.__r_.__value_.__l.__data_);
      v174 = v311;
      if (v311)
      {
        v268 = (unint64_t *)&v311->__shared_owners_;
        do
          v176 = __ldaxr(v268);
        while (__stlxr(v176 - 1, v268));
        goto LABEL_369;
      }
      goto LABEL_447;
    }
    goto LABEL_374;
  }
  v215 = (v185 - 1) * v207;
  v216 = v215 - v188;
  v217 = v200 - v188 + v215;
  if (v184 > v215 - v188 && v184 <= v217)
    goto LABEL_372;
  v218 = v289[1];
  v310 = *v289;
  v311 = (std::__shared_weak_count *)v218;
  if (v218)
  {
    v219 = (unint64_t *)(v218 + 8);
    do
      v220 = __ldxr(v219);
    while (__stxr(v220 + 1, v219));
  }
  std::to_string(&v305, v216);
  v221 = std::string::insert(&v305, 0, "Input dimension depth exceed limits, expect [");
  v222 = *(_OWORD *)&v221->__r_.__value_.__l.__data_;
  v306.__r_.__value_.__r.__words[2] = v221->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v222;
  v221->__r_.__value_.__l.__size_ = 0;
  v221->__r_.__value_.__r.__words[2] = 0;
  v221->__r_.__value_.__r.__words[0] = 0;
  v223 = std::string::append(&v306, ", ");
  v224 = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
  v307.__r_.__value_.__r.__words[2] = v223->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v224;
  v223->__r_.__value_.__l.__size_ = 0;
  v223->__r_.__value_.__r.__words[2] = 0;
  v223->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v312, v217);
  if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v225 = &v312;
  else
    v225 = (std::string *)v312.__r_.__value_.__r.__words[0];
  if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v226 = HIBYTE(v312.__r_.__value_.__r.__words[2]);
  else
    v226 = v312.__r_.__value_.__l.__size_;
  v227 = std::string::append(&v307, (const std::string::value_type *)v225, v226);
  v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
  v308.__r_.__value_.__r.__words[2] = v227->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v308.__r_.__value_.__l.__data_ = v228;
  v227->__r_.__value_.__l.__size_ = 0;
  v227->__r_.__value_.__r.__words[2] = 0;
  v227->__r_.__value_.__r.__words[0] = 0;
  v229 = std::string::append(&v308, "), got ");
  v230 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
  v309.__r_.__value_.__r.__words[2] = v229->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v230;
  v229->__r_.__value_.__l.__size_ = 0;
  v229->__r_.__value_.__r.__words[2] = 0;
  v229->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v304, v184);
  if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v231 = &v304;
  else
    v231 = (std::string *)v304.__r_.__value_.__r.__words[0];
  if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v232 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
  else
    v232 = v304.__r_.__value_.__l.__size_;
  v233 = std::string::append(&v309, (const std::string::value_type *)v231, v232);
  v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
  v303[0] = *((_QWORD *)&v233->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v234;
  v233->__r_.__value_.__l.__size_ = 0;
  v233->__r_.__value_.__r.__words[2] = 0;
  v233->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x20BCFEAD4](v291, &v310, 319, __p);
  if (SHIBYTE(v303[0]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v304.__r_.__value_.__l.__data_);
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v309.__r_.__value_.__l.__data_);
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v308.__r_.__value_.__l.__data_);
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v312.__r_.__value_.__l.__data_);
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v307.__r_.__value_.__l.__data_);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v305.__r_.__value_.__l.__data_);
  v174 = v311;
  if (v311)
  {
    v235 = (unint64_t *)&v311->__shared_owners_;
    do
      v176 = __ldaxr(v235);
    while (__stlxr(v176 - 1, v235));
    goto LABEL_369;
  }
LABEL_447:
  if (MIL::ValidationResult::IsGood(v291))
  {
    MEMORY[0x20BCFEAEC](v291);
    goto LABEL_449;
  }
LABEL_451:
  if (v292)
  {
    v293 = v292;
    operator delete(v292);
  }
  if (v294)
  {
    v295 = (std::__shared_weak_count *)v294;
    operator delete(v294);
  }
}

void sub_206922BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a35 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  if (*(char *)(v58 - 137) < 0)
    operator delete(*(void **)(v58 - 160));
  if (*(char *)(v58 - 169) < 0)
    operator delete(*(void **)(v58 - 192));
  if (*(char *)(v58 - 97) < 0)
    operator delete(*(void **)(v58 - 120));
  if (*(char *)(v58 - 201) < 0)
    operator delete(*(void **)(v58 - 224));
  if (a58 < 0)
    operator delete(a53);
  if (a52 < 0)
    operator delete(a47);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100](v58 - 136);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ValidateNePool(ANEMachineIR::Validators *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  const MIL::IROperation *v5;
  uint64_t v6;
  MIL::IRValueType *Type;
  ANEMachineIR::Utils *v8;
  uint64_t LocationPtr;
  uint64_t v10;
  void *__p[2];
  __int128 v12;
  __int128 v13;
  _BYTE v14[27];
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v5 = (const MIL::IROperation *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SBYTE7(v12) < 0)
    operator delete(__p[0]);
  v6 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(_QWORD *)a1 + 176))(a1);
  if (*(_QWORD *)(v6 + 8) == *(_QWORD *)v6)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v6);
  v8 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v18 = 0;
  ANEMachineIR::Validators::ParseNePoolParamValues(a1, v5, (char **)__p, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x20BCFEAEC](a2);
    LocationPtr = MIL::IRObject::GetLocationPtr(a1);
    v10 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(_QWORD *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidateNePool(LocationPtr, v10, v5, v8, (uint64_t)__p, a2);
  }
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)&v14[8] = *(_QWORD *)v14;
    operator delete(*(void **)v14);
  }
  if (*((_QWORD *)&v12 + 1))
  {
    *(_QWORD *)&v13 = *((_QWORD *)&v12 + 1);
    operator delete(*((void **)&v12 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void ANEMachineIR::Validators::ValidatePePool(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  ANEMachineIR::Utils *v5;
  uint64_t v6;
  MIL::IRValueType *Type;
  ANEMachineIR::Utils *v8;
  uint64_t LocationPtr;
  uint64_t v10;
  void *__p[2];
  __int128 v12;
  __int128 v13;
  _BYTE v14[25];
  char v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v5 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SBYTE7(v12) < 0)
    operator delete(__p[0]);
  v6 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 176))(a1);
  if (*(_QWORD *)(v6 + 8) == *(_QWORD *)v6)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v6);
  v8 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
  v15 = 0;
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v16 = 0;
  ANEMachineIR::Validators::ParsePePoolParamValues(v5, a1, (uint64_t)__p, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x20BCFEAEC](a2);
    LocationPtr = MIL::IRObject::GetLocationPtr(a1);
    v10 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidatePePool(LocationPtr, v10, v5, v8, (uint64_t)__p, a2);
  }
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)&v14[8] = *(_QWORD *)v14;
    operator delete(*(void **)v14);
  }
  if (*((_QWORD *)&v12 + 1))
  {
    *(_QWORD *)&v13 = *((_QWORD *)&v12 + 1);
    operator delete(*((void **)&v12 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t ANEMachineIR::H2022::BaseNeMatmul::Make(MIL::IRUnknownDimension *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t result;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  void *v40[2];
  uint64_t v41;
  void *__p;
  void *v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  _QWORD *v49;
  _BYTE v50[24];
  _BYTE *v51;
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t Scalar;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  v49 = (_QWORD *)v4;
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v4, "acc_left_shift", (uint64_t *)&__p);
  v6 = __p;
  __p = 0;
  if (v6)
    (*(void (**)(void *))(*(_QWORD *)v6 + 8))(v6);
  v7 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v5 + 5) + 32))(*((_QWORD *)v5 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v5 + 5) + 48))(*((_QWORD *)v5 + 5), 1);
  v10 = v49;
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v10, "post_right_shift", (uint64_t *)&__p);
  v12 = __p;
  __p = 0;
  if (v12)
    (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
  v13 = v47;
  if (v47)
  {
    v14 = (unint64_t *)&v47->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 32))(*((_QWORD *)v11 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 48))(*((_QWORD *)v11 + 5), 1);
  v16 = v49;
  Scalar = MIL::IRTensorValueType::MakeScalar();
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v43 = v18 + 1;
  v44 = v18 + 1;
  v55 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v16, "post_scale", &v46);
  v20 = v46;
  v46 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v45;
  if (v45)
  {
    v22 = (unint64_t *)&v45->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v19 + 5) + 32))(*((_QWORD *)v19 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v19 + 5) + 48))(*((_QWORD *)v19 + 5), 1);
  __p = 0;
  *(_OWORD *)v40 = *(_OWORD *)a2;
  v41 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v24 = (uint64_t)v49;
  if (v49)
  {
    v25 = (std::__shared_weak_count *)operator new();
    v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v25->__shared_owners_ = 0;
    v25->__shared_weak_owners_ = 0;
    v25[1].__vftable = (std::__shared_weak_count_vtbl *)v24;
    v39 = v25;
    v49 = 0;
    if (__p)
    {
      v26 = (std::__shared_weak_count *)operator new();
      v27 = (std::__shared_weak_count_vtbl *)__p;
      v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
      v26->__shared_owners_ = 0;
      v26->__shared_weak_owners_ = 0;
      v26[1].__vftable = v27;
    }
    else
    {
      v26 = 0;
    }
  }
  else
  {
    v26 = 0;
    v39 = 0;
    v49 = 0;
  }
  v38 = v26;
  __p = 0;
  v52[0] = &unk_24BFE7440;
  v52[1] = ANEMachineIR::H2022::Validators::ValidateBaseNeMatmul;
  v53 = v52;
  v51 = 0;
  MIL::IROperator::Make();
  v28 = v51;
  if (v51 == v50)
  {
    v29 = 4;
    v28 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_34;
    v29 = 5;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v29))(v28);
LABEL_34:
  v30 = v53;
  if (v53 == v52)
  {
    v31 = 4;
    v30 = v52;
    goto LABEL_38;
  }
  if (v53)
  {
    v31 = 5;
LABEL_38:
    (*(void (**)(_QWORD *))(*v30 + 8 * v31))(v30);
  }
  if (v38)
  {
    v32 = (unint64_t *)&v38->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v39)
  {
    v34 = (unint64_t *)&v39->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v49;
  if (v49)
  {
    v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v49);
    return MEMORY[0x20BCFF140](v37, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2069238C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30)
{
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a20, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a30, 0);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2022::NeBatchMatmul::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  void **v8;
  uint64_t *p_shared_owners;
  unint64_t v10;
  unsigned __int8 *v11;
  void **v12;
  uint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  uint64_t v16;
  void **v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count_vtbl *v57;
  unsigned __int8 *v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  char **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  void **v94;
  char *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  char **v103;
  _QWORD *v104;
  uint64_t v105;
  MIL::Validation::TensorDTypeConstraints *v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  unint64_t v111;
  void **v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  void **v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count_vtbl *v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count_vtbl *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void **v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  MIL::Validation::TensorRankValueConstraints *v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count_vtbl *v153;
  void **v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count_vtbl *v160;
  void **v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  void **v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  MIL::Validation::TensorSymbolicShapeConstraints *v174;
  void **v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count_vtbl *v181;
  void **v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count_vtbl *v188;
  void **v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count_vtbl *v195;
  void **v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count_vtbl *v202;
  void **v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count_vtbl *v209;
  void **v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count_vtbl *v216;
  void **v217;
  std::__shared_weak_count *v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count_vtbl *v223;
  void **v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count_vtbl *v230;
  void **v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count_vtbl *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count_vtbl *v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  void **v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  void **v244;
  std::__shared_weak_count_vtbl *result;
  uint64_t v246;
  void **v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  void *v253[2];
  char v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  void *v257[2];
  char v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263;
  char v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  char v268;
  void *v269;
  char v270;
  std::__shared_weak_count_vtbl *v271;
  std::__shared_weak_count *v272;
  void *v273[2];
  char v274;
  void *v275;
  char v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  void *v279[2];
  char v280;
  void *v281;
  char v282;
  std::__shared_weak_count_vtbl *v283;
  std::__shared_weak_count *v284;
  void *v285[2];
  char v286;
  void *v287;
  char v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count *v290;
  void *v291[2];
  char v292;
  void *v293;
  char v294;
  std::__shared_weak_count_vtbl *v295;
  std::__shared_weak_count *v296;
  void **v297;
  std::__shared_weak_count *v298;
  std::__shared_weak_count_vtbl *v299;
  std::__shared_weak_count *v300;
  void *v301;
  char v302;
  std::__shared_weak_count_vtbl *v303;
  std::__shared_weak_count *v304;
  void *v305;
  char v306;
  std::__shared_weak_count_vtbl *v307;
  std::__shared_weak_count *v308;
  void **v309;
  std::__shared_weak_count *v310;
  void *v311[2];
  char v312;
  std::__shared_weak_count_vtbl *v313;
  std::__shared_weak_count *v314;
  void *v315[2];
  char v316;
  void *v317;
  char v318;
  std::__shared_weak_count_vtbl *v319;
  std::__shared_weak_count *v320;
  void *v321[2];
  char v322;
  void *v323;
  char v324;
  std::__shared_weak_count_vtbl *v325;
  std::__shared_weak_count *v326;
  void *v327[2];
  char v328;
  void *v329;
  char v330;
  std::__shared_weak_count_vtbl *v331;
  std::__shared_weak_count *v332;
  char **v333;
  std::__shared_weak_count *v334;
  std::__shared_weak_count_vtbl *v335;
  std::__shared_weak_count *v336;
  void *v337[2];
  uint64_t v338;
  void *v339;
  void *v340;
  _QWORD *v341;
  std::__shared_weak_count *v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  char **v346;
  std::__shared_weak_count *v347;
  std::__shared_weak_count *v348;
  void *__p;
  void *v350;
  _QWORD *v351;
  void *v352;
  void *v353;
  _QWORD *v354;
  std::__shared_weak_count *v355;
  std::__shared_weak_count *v356;
  std::__shared_weak_count *v357;
  std::__shared_weak_count *v358;
  std::__shared_weak_count_vtbl *v359;
  _BYTE v360[24];
  _BYTE *v361;
  _QWORD v362[3];
  MIL::Validation::TensorDTypeConstraints *v363;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_get_deleter;
  uint64_t v366;
  void **v367;
  void **v368;
  uint64_t v369;
  char *v370;
  char **v371;
  uint64_t v372;

  v372 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v359 = (std::__shared_weak_count_vtbl *)v6;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "acc_left_shift", (uint64_t *)&v367);
  v8 = v367;
  v367 = 0;
  if (v8)
    (*((void (**)(void **))*v8 + 1))(v8);
  if (v358)
  {
    p_shared_owners = &v358->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v10 - 1, (unint64_t *)p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
      std::__shared_weak_count::__release_weak(v358);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v7 + 5) + 32))(*((_QWORD *)v7 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v7 + 5) + 48))(*((_QWORD *)v7 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v359, "post_right_shift", (uint64_t *)&v367);
  v12 = v367;
  v367 = 0;
  if (v12)
    (*((void (**)(void **))*v12 + 1))(v12);
  if (v357)
  {
    v13 = &v357->__shared_owners_;
    do
      v14 = __ldaxr((unint64_t *)v13);
    while (__stlxr(v14 - 1, (unint64_t *)v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 32))(*((_QWORD *)v11 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 48))(*((_QWORD *)v11 + 5), 1);
  v15 = v359;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = (void **)operator new(8uLL);
  v367 = v17;
  *v17 = (void *)v16;
  v368 = v17 + 1;
  v369 = (uint64_t)(v17 + 1);
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v15, "post_scale", (uint64_t *)&v352);
  v19 = v352;
  v352 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v356;
  if (v356)
  {
    v21 = (unint64_t *)&v356->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v367)
  {
    v368 = v367;
    operator delete(v367);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v359;
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v27->__get_deleter;
  v366 = (uint64_t)&v27->__get_deleter;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v27->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  Scalar = v27;
  v367 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = operator new(0x18uLL);
  v354 = v31 + 3;
  *v31 = v28;
  v31[1] = v29;
  v31[2] = v30;
  v352 = v31;
  v353 = v31 + 3;
  v368 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = operator new(0x18uLL);
  v351 = v35 + 3;
  *v35 = v32;
  v35[1] = v33;
  v35[2] = v34;
  __p = v35;
  v350 = v35 + 3;
  v369 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v23, "x", (uint64_t *)&v339);
  v36 = v339;
  v339 = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  v37 = v355;
  if (v355)
  {
    v38 = (unint64_t *)&v355->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (__p)
  {
    v350 = __p;
    operator delete(__p);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v40 = v359;
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v44->__get_deleter;
  v366 = (uint64_t)&v44->__get_deleter;
  v44->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v41;
  v44->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v42;
  v44->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v43;
  Scalar = v44;
  v367 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = operator new(0x18uLL);
  v354 = v48 + 3;
  *v48 = v45;
  v48[1] = v46;
  v48[2] = v47;
  v352 = v48;
  v353 = v48 + 3;
  v368 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = operator new(0x18uLL);
  v351 = v52 + 3;
  *v52 = v49;
  v52[1] = v50;
  v52[2] = v51;
  __p = v52;
  v350 = v52 + 3;
  v369 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v40, "y", (uint64_t *)&v339);
  v53 = v339;
  v339 = 0;
  if (v53)
    (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
  v54 = v348;
  if (v348)
  {
    v55 = (unint64_t *)&v348->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (__p)
  {
    v350 = __p;
    operator delete(__p);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (Scalar)
  {
    p_get_deleter = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v57 = v359;
  v367 = (void **)MIL::IRTensorValueType::MakeScalar();
  v368 = (void **)MIL::IRTensorValueType::MakeScalar();
  v369 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v58 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v57, "matrix_vector_bias", (uint64_t *)&Scalar);
  v59 = Scalar;
  Scalar = 0;
  if (v59)
    (*((void (**)(std::__shared_weak_count_vtbl *))v59->~__shared_weak_count + 1))(v59);
  v60 = v347;
  if (v347)
  {
    v61 = (unint64_t *)&v347->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v58 + 5) + 32))(*((_QWORD *)v58 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v58 + 5) + 48))(*((_QWORD *)v58 + 5), 1);
  v346 = 0;
  v63 = operator new();
  *(_QWORD *)v63 = 0;
  *(_QWORD *)(v63 + 8) = 0;
  *(_QWORD *)(v63 + 16) = 0;
  v367 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v346, (void **)v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v367, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v346, 1uLL);
  v64 = v346;
  v65 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = operator new(0x18uLL);
  v354 = v68 + 3;
  *v68 = v65;
  v68[1] = v66;
  v68[2] = v67;
  v352 = v68;
  v353 = v68 + 3;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = MIL::IRUnknownDimension::Make(a1, 0);
  v72 = operator new(0x18uLL);
  v351 = v72 + 3;
  *v72 = v69;
  v72[1] = v70;
  v72[2] = v71;
  __p = v72;
  v350 = v72 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape();
  v73 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v74 = MIL::IRUnknownDimension::Make(a1, 0);
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = operator new(0x18uLL);
  v341 = v76 + 3;
  *v76 = v73;
  v76[1] = v74;
  v76[2] = v75;
  v339 = v76;
  v340 = v76 + 3;
  v366 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v77 = v343;
  v344 = v343;
  if (v343)
  {
    v78 = (_QWORD *)operator new();
    v79 = v343;
    *v78 = &unk_24BFE7320;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v79;
  }
  else
  {
    v78 = 0;
  }
  v345 = v78;
  v343 = 0;
  v80 = v64[2];
  v81 = v64[1];
  if (v81 >= v80)
  {
    v83 = (v81 - *v64) >> 4;
    v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v85 = v80 - *v64;
    if (v85 >> 3 > v84)
      v84 = v85 >> 3;
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
      v86 = 0xFFFFFFFFFFFFFFFLL;
    else
      v86 = v84;
    v371 = v64 + 2;
    v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v64 + 2), v86);
    v89 = &v87[16 * v83];
    *(_QWORD *)v89 = v77;
    *((_QWORD *)v89 + 1) = v78;
    v345 = 0;
    v344 = 0;
    v91 = *v64;
    v90 = v64[1];
    if (v90 == *v64)
    {
      v94 = (void **)v64[1];
      v92 = &v87[16 * v83];
    }
    else
    {
      v92 = &v87[16 * v83];
      do
      {
        v93 = *((_OWORD *)v90 - 1);
        v90 -= 16;
        *((_OWORD *)v92 - 1) = v93;
        v92 -= 16;
        *(_QWORD *)v90 = 0;
        *((_QWORD *)v90 + 1) = 0;
      }
      while (v90 != v91);
      v94 = (void **)*v64;
      v90 = v64[1];
    }
    v82 = v89 + 16;
    *v64 = v92;
    v367 = v94;
    v368 = v94;
    v64[1] = v89 + 16;
    v369 = (uint64_t)v90;
    v95 = v64[2];
    v64[2] = &v87[16 * v88];
    v370 = v95;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v367);
  }
  else
  {
    *(_QWORD *)v81 = v77;
    *((_QWORD *)v81 + 1) = v78;
    v82 = v81 + 16;
    v345 = 0;
    v344 = 0;
  }
  v64[1] = v82;
  v96 = v343;
  v343 = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = v342;
  if (v342)
  {
    v98 = (unint64_t *)&v342->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (v339)
  {
    v340 = v339;
    operator delete(v339);
  }
  if (__p)
  {
    v350 = __p;
    operator delete(__p);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  *(_OWORD *)v337 = *(_OWORD *)a2;
  v338 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v100 = v359;
  v335 = v359;
  if (v359)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v100;
  }
  else
  {
    v101 = 0;
  }
  v336 = v101;
  v359 = 0;
  v333 = v346;
  if (v346)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v346;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v334 = v102;
  v346 = 0;
  v362[0] = &unk_24BFE7440;
  v362[1] = ANEMachineIR::H2022::Validators::ValidateNeBatchMatmul;
  v363 = (MIL::Validation::TensorDTypeConstraints *)v362;
  v361 = 0;
  MIL::IROperator::Make();
  v104 = v361;
  if (v361 == v360)
  {
    v105 = 4;
    v104 = v360;
  }
  else
  {
    if (!v361)
      goto LABEL_98;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_98:
  v106 = v363;
  if (v363 == (MIL::Validation::TensorDTypeConstraints *)v362)
  {
    v107 = 4;
    v106 = (MIL::Validation::TensorDTypeConstraints *)v362;
    goto LABEL_102;
  }
  if (v363)
  {
    v107 = 5;
LABEL_102:
    v106 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v106 + 8 * v107))();
  }
  if (v334)
  {
    v108 = &v334->__shared_owners_;
    do
      v109 = __ldaxr((unint64_t *)v108);
    while (__stlxr(v109 - 1, (unint64_t *)v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
      std::__shared_weak_count::__release_weak(v334);
    }
  }
  if (v336)
  {
    v110 = &v336->__shared_owners_;
    do
      v111 = __ldaxr((unint64_t *)v110);
    while (__stlxr(v111 - 1, (unint64_t *)v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
      std::__shared_weak_count::__release_weak(v336);
    }
  }
  if (SHIBYTE(v338) < 0)
    operator delete(v337[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v106);
  v112 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v329, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v331 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v332 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v327, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v112 + 3))(v112, &v331, v327);
  if (v328 < 0)
    operator delete(v327[0]);
  v115 = v332;
  if (v332)
  {
    v116 = (unint64_t *)&v332->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*((void (**)(std::__shared_weak_count_vtbl *))v118->~__shared_weak_count + 1))(v118);
  if (v330 < 0)
    operator delete(v329);
  v119 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v323, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v325 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v326 = v120;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v321, "KernelT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v119 + 3))(v119, &v325, v321);
  if (v322 < 0)
    operator delete(v321[0]);
  v122 = v326;
  if (v326)
  {
    v123 = (unint64_t *)&v326->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  if (v324 < 0)
    operator delete(v323);
  v126 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v317, "matrix_vector_bias");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v319 = Scalar;
  if (Scalar)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = Scalar;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v320 = v127;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v315, "KernelT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v126 + 3))(v126, &v319, v315);
  if (v316 < 0)
    operator delete(v315[0]);
  v129 = v320;
  if (v320)
  {
    v130 = (unint64_t *)&v320->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = Scalar;
  Scalar = 0;
  if (v132)
    (*((void (**)(std::__shared_weak_count_vtbl *))v132->~__shared_weak_count + 1))(v132);
  if (v318 < 0)
    operator delete(v317);
  v133 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v313 = Scalar;
  if (Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v314 = v134;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v311, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v133 + 3))(v133, &v313, v311);
  if (v312 < 0)
    operator delete(v311[0]);
  v136 = v314;
  if (v314)
  {
    v137 = (unint64_t *)&v314->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = Scalar;
  Scalar = 0;
  if (v139)
    (*((void (**)(std::__shared_weak_count_vtbl *))v139->~__shared_weak_count + 1))(v139);
  v140 = *a3;
  v309 = v367;
  if (v367)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = v367;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = (std::__shared_weak_count_vtbl *)v142;
  }
  else
  {
    v141 = 0;
  }
  v310 = v141;
  v367 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v140 + 56))(v140, &v309);
  v143 = v310;
  if (v310)
  {
    v144 = (unint64_t *)&v310->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = (MIL::Validation::TensorRankValueConstraints *)v367;
  v367 = 0;
  if (v146)
    v146 = (MIL::Validation::TensorRankValueConstraints *)(*(uint64_t (**)(MIL::Validation::TensorRankValueConstraints *))(*(_QWORD *)v146 + 8))(v146);
  MIL::Validation::TensorRankValueConstraints::Make(v146);
  v147 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v305, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v307 = Scalar;
  if (Scalar)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = Scalar;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v308 = v148;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v147 + 4))(v147, &v307, 3, 5);
  v150 = v308;
  if (v308)
  {
    v151 = (unint64_t *)&v308->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = Scalar;
  Scalar = 0;
  if (v153)
    (*((void (**)(std::__shared_weak_count_vtbl *))v153->~__shared_weak_count + 1))(v153);
  if (v306 < 0)
    operator delete(v305);
  v154 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v301, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v303 = Scalar;
  if (Scalar)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = Scalar;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v304 = v155;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v154 + 4))(v154, &v303, 3, 5);
  v157 = v304;
  if (v304)
  {
    v158 = (unint64_t *)&v304->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = Scalar;
  Scalar = 0;
  if (v160)
    (*((void (**)(std::__shared_weak_count_vtbl *))v160->~__shared_weak_count + 1))(v160);
  if (v302 < 0)
    operator delete(v301);
  v161 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v299 = Scalar;
  if (Scalar)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = Scalar;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v300 = v162;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v161 + 4))(v161, &v299, 3, 5);
  v164 = v300;
  if (v300)
  {
    v165 = (unint64_t *)&v300->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = Scalar;
  Scalar = 0;
  if (v167)
    (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
  v168 = *a3;
  v297 = v367;
  if (v367)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = v367;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFEABE8;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = (std::__shared_weak_count_vtbl *)v170;
  }
  else
  {
    v169 = 0;
  }
  v298 = v169;
  v367 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v168 + 56))(v168, &v297);
  v171 = v298;
  if (v298)
  {
    v172 = (unint64_t *)&v298->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = (MIL::Validation::TensorSymbolicShapeConstraints *)v367;
  v367 = 0;
  if (v174)
    v174 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v174 + 8))(v174);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v174);
  v175 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v293, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v295 = Scalar;
  if (Scalar)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = Scalar;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = v177;
  }
  else
  {
    v176 = 0;
  }
  v296 = v176;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v291, "BatchX");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t, void **))*v175 + 4))(v175, &v295, 0, -3, v291);
  if (v292 < 0)
    operator delete(v291[0]);
  v178 = v296;
  if (v296)
  {
    v179 = (unint64_t *)&v296->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = Scalar;
  Scalar = 0;
  if (v181)
    (*((void (**)(std::__shared_weak_count_vtbl *))v181->~__shared_weak_count + 1))(v181);
  if (v294 < 0)
    operator delete(v293);
  v182 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v287, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v289 = Scalar;
  if (Scalar)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v184 = Scalar;
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = v184;
  }
  else
  {
    v183 = 0;
  }
  v290 = v183;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v285, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v182 + 3))(v182, &v289, -2, v285);
  if (v286 < 0)
    operator delete(v285[0]);
  v185 = v290;
  if (v290)
  {
    v186 = (unint64_t *)&v290->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = Scalar;
  Scalar = 0;
  if (v188)
    (*((void (**)(std::__shared_weak_count_vtbl *))v188->~__shared_weak_count + 1))(v188);
  if (v288 < 0)
    operator delete(v287);
  v189 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v281, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v283 = Scalar;
  if (Scalar)
  {
    v190 = (std::__shared_weak_count *)operator new();
    v191 = Scalar;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v190->__shared_owners_ = 0;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = v191;
  }
  else
  {
    v190 = 0;
  }
  v284 = v190;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v279, "M");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v189 + 3))(v189, &v283, -1, v279);
  if (v280 < 0)
    operator delete(v279[0]);
  v192 = v284;
  if (v284)
  {
    v193 = (unint64_t *)&v284->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = Scalar;
  Scalar = 0;
  if (v195)
    (*((void (**)(std::__shared_weak_count_vtbl *))v195->~__shared_weak_count + 1))(v195);
  if (v282 < 0)
    operator delete(v281);
  v196 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v275, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v277 = Scalar;
  if (Scalar)
  {
    v197 = (std::__shared_weak_count *)operator new();
    v198 = Scalar;
    v197->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v197->__shared_owners_ = 0;
    v197->__shared_weak_owners_ = 0;
    v197[1].__vftable = v198;
  }
  else
  {
    v197 = 0;
  }
  v278 = v197;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v273, "BatchY");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t, void **))*v196 + 4))(v196, &v277, 0, -3, v273);
  if (v274 < 0)
    operator delete(v273[0]);
  v199 = v278;
  if (v278)
  {
    v200 = (unint64_t *)&v278->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = Scalar;
  Scalar = 0;
  if (v202)
    (*((void (**)(std::__shared_weak_count_vtbl *))v202->~__shared_weak_count + 1))(v202);
  if (v276 < 0)
    operator delete(v275);
  v203 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v269, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v271 = Scalar;
  if (Scalar)
  {
    v204 = (std::__shared_weak_count *)operator new();
    v205 = Scalar;
    v204->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v204->__shared_owners_ = 0;
    v204->__shared_weak_owners_ = 0;
    v204[1].__vftable = v205;
  }
  else
  {
    v204 = 0;
  }
  v272 = v204;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v267, "M2");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v203 + 3))(v203, &v271, -2, v267);
  if (v268 < 0)
    operator delete(v267[0]);
  v206 = v272;
  if (v272)
  {
    v207 = (unint64_t *)&v272->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = Scalar;
  Scalar = 0;
  if (v209)
    (*((void (**)(std::__shared_weak_count_vtbl *))v209->~__shared_weak_count + 1))(v209);
  if (v270 < 0)
    operator delete(v269);
  v210 = v367;
  std::string::basic_string[abi:ne180100]<0>(&v263, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v265 = Scalar;
  if (Scalar)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = Scalar;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = v212;
  }
  else
  {
    v211 = 0;
  }
  v266 = v211;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v210 + 3))(v210, &v265, -1, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v213 = v266;
  if (v266)
  {
    v214 = (unint64_t *)&v266->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = Scalar;
  Scalar = 0;
  if (v216)
    (*((void (**)(std::__shared_weak_count_vtbl *))v216->~__shared_weak_count + 1))(v216);
  if (v264 < 0)
    operator delete(v263);
  v217 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v259 = Scalar;
  if (Scalar)
  {
    v218 = (std::__shared_weak_count *)operator new();
    v219 = Scalar;
    v218->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v218->__shared_owners_ = 0;
    v218->__shared_weak_owners_ = 0;
    v218[1].__vftable = v219;
  }
  else
  {
    v218 = 0;
  }
  v260 = v218;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v257, "BatchXBatchYBroadcasted");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, uint64_t, void **))*v217 + 4))(v217, &v259, 0, -3, v257);
  if (v258 < 0)
    operator delete(v257[0]);
  v220 = v260;
  if (v260)
  {
    v221 = (unint64_t *)&v260->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = Scalar;
  Scalar = 0;
  if (v223)
    (*((void (**)(std::__shared_weak_count_vtbl *))v223->~__shared_weak_count + 1))(v223);
  v224 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v255 = Scalar;
  if (Scalar)
  {
    v225 = (std::__shared_weak_count *)operator new();
    v226 = Scalar;
    v225->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v225->__shared_owners_ = 0;
    v225->__shared_weak_owners_ = 0;
    v225[1].__vftable = v226;
  }
  else
  {
    v225 = 0;
  }
  v256 = v225;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v253, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v224 + 3))(v224, &v255, -2, v253);
  if (v254 < 0)
    operator delete(v253[0]);
  v227 = v256;
  if (v256)
  {
    v228 = (unint64_t *)&v256->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v230 = Scalar;
  Scalar = 0;
  if (v230)
    (*((void (**)(std::__shared_weak_count_vtbl *))v230->~__shared_weak_count + 1))(v230);
  v231 = v367;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v251 = Scalar;
  if (Scalar)
  {
    v232 = (std::__shared_weak_count *)operator new();
    v233 = Scalar;
    v232->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v232->__shared_owners_ = 0;
    v232->__shared_weak_owners_ = 0;
    v232[1].__vftable = v233;
  }
  else
  {
    v232 = 0;
  }
  v252 = v232;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v231 + 3))(v231, &v251, -1, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v234 = v252;
  if (v252)
  {
    v235 = (unint64_t *)&v252->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v237 = Scalar;
  Scalar = 0;
  if (v237)
    (*((void (**)(std::__shared_weak_count_vtbl *))v237->~__shared_weak_count + 1))(v237);
  v238 = *a3;
  v247 = v367;
  if (v367)
  {
    v239 = (std::__shared_weak_count *)operator new();
    v240 = v367;
    v239->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v239->__shared_owners_ = 0;
    v239->__shared_weak_owners_ = 0;
    v239[1].__vftable = (std::__shared_weak_count_vtbl *)v240;
  }
  else
  {
    v239 = 0;
  }
  v248 = v239;
  v367 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v238 + 56))(v238, &v247);
  v241 = v248;
  if (v248)
  {
    v242 = (unint64_t *)&v248->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = v367;
  v367 = 0;
  if (v244)
    (*((void (**)(void **))*v244 + 1))(v244);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v346, 0);
  result = v359;
  if (v359)
  {
    v246 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v359);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v246, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_2069258AC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3E8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 208), 0);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl *ANEMachineIR::H2022::NeMatmul::Make@<X0>(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  void **v8;
  uint64_t *p_shared_owners;
  unint64_t v10;
  unsigned __int8 *v11;
  void **v12;
  uint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  uint64_t v16;
  void **v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned __int8 *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  uint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count_vtbl *v64;
  unsigned __int8 *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  __int128 v97;
  void **v98;
  char *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  char **v107;
  _QWORD *v108;
  uint64_t v109;
  MIL::Validation::TensorDTypeConstraints *v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  void **v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  void **v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count_vtbl *v129;
  void **v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  void **v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  void **v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  void **v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  MIL::Validation::TensorSymbolicShapeConstraints *v157;
  void **v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count_vtbl *v164;
  void **v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  void **v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count_vtbl *v178;
  void **v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count_vtbl *v185;
  void **v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count_vtbl *v192;
  void **v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count_vtbl *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  void **v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void **v206;
  std::__shared_weak_count_vtbl *result;
  uint64_t v208;
  void **v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  char v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  void *v215[2];
  char v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  void *v219[2];
  char v220;
  void *v221;
  char v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  void *v225[2];
  char v226;
  void *v227;
  char v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  void *v231[2];
  char v232;
  void *v233;
  char v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  void *v237[2];
  char v238;
  void *v239;
  char v240;
  std::__shared_weak_count_vtbl *v241;
  std::__shared_weak_count *v242;
  void **v243;
  std::__shared_weak_count *v244;
  void *v245[2];
  char v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  void *v251;
  char v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  char v256;
  void *v257;
  char v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263;
  char v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  char v268;
  void *v269;
  char v270;
  std::__shared_weak_count_vtbl *v271;
  std::__shared_weak_count *v272;
  char **v273;
  std::__shared_weak_count *v274;
  std::__shared_weak_count_vtbl *v275;
  std::__shared_weak_count *v276;
  void *v277[2];
  uint64_t v278;
  void *v279;
  void *v280;
  _QWORD *v281;
  std::__shared_weak_count *v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  char **v286;
  std::__shared_weak_count *v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count *v289;
  void *__p;
  void *v291;
  _QWORD *v292;
  void *v293;
  void *v294;
  _QWORD *v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count *v297;
  std::__shared_weak_count *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count_vtbl *v300;
  _BYTE v301[24];
  _BYTE *v302;
  _QWORD v303[3];
  MIL::Validation::TensorDTypeConstraints *v304;
  void **v305;
  void **v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v313;
  uint64_t v314;

  v314 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v300 = (std::__shared_weak_count_vtbl *)v6;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "acc_left_shift", (uint64_t *)&v305);
  v8 = v305;
  v305 = 0;
  if (v8)
    (*((void (**)(void **))*v8 + 1))(v8);
  if (v299)
  {
    p_shared_owners = &v299->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v10 - 1, (unint64_t *)p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v7 + 5) + 32))(*((_QWORD *)v7 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v7 + 5) + 48))(*((_QWORD *)v7 + 5), 1);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v300, "post_right_shift", (uint64_t *)&v305);
  v12 = v305;
  v305 = 0;
  if (v12)
    (*((void (**)(void **))*v12 + 1))(v12);
  if (v298)
  {
    v13 = &v298->__shared_owners_;
    do
      v14 = __ldaxr((unint64_t *)v13);
    while (__stlxr(v14 - 1, (unint64_t *)v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 32))(*((_QWORD *)v11 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 5) + 48))(*((_QWORD *)v11 + 5), 1);
  v15 = v300;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = (void **)operator new(8uLL);
  v305 = v17;
  *v17 = (void *)v16;
  v306 = v17 + 1;
  v307 = (uint64_t)(v17 + 1);
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v15, "post_scale", (uint64_t *)&v293);
  v19 = v293;
  v293 = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v297;
  if (v297)
  {
    v21 = (unint64_t *)&v297->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 48))(*((_QWORD *)v18 + 5), 1);
  v23 = v300;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v26->__on_zero_shared;
  v313 = (uint64_t)&v26->__on_zero_shared;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v26->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  Scalar = v26;
  v305 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(0x10uLL);
  v295 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  v293 = v29;
  v294 = v29 + 2;
  v306 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x10uLL);
  v292 = v32 + 2;
  *v32 = v30;
  v32[1] = v31;
  __p = v32;
  v291 = v32 + 2;
  v307 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v23, "x", (uint64_t *)&v279);
  v33 = v279;
  v279 = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = v296;
  if (v296)
  {
    v35 = (unint64_t *)&v296->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (__p)
  {
    v291 = __p;
    operator delete(__p);
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v37 = v300;
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v40->__on_zero_shared;
  v313 = (uint64_t)&v40->__on_zero_shared;
  v40->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
  v40->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
  Scalar = v40;
  v305 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x10uLL);
  v295 = v43 + 2;
  *v43 = v41;
  v43[1] = v42;
  v293 = v43;
  v294 = v43 + 2;
  v306 = (void **)MIL::IRTensorValueType::MakeWithShape();
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = operator new(0x10uLL);
  v292 = v46 + 2;
  *v46 = v44;
  v46[1] = v45;
  __p = v46;
  v291 = v46 + 2;
  v307 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v37, "y", (uint64_t *)&v279);
  v48 = v279;
  v279 = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = v289;
  if (v289)
  {
    v50 = (unint64_t *)&v289->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (__p)
  {
    v291 = __p;
    operator delete(__p);
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v300;
  v305 = (void **)MIL::IRTensorValueType::MakeScalar();
  v306 = (void **)MIL::IRTensorValueType::MakeScalar();
  v307 = MIL::IRTensorValueType::MakeScalar();
  v53 = MIL::IRUnknownDimension::Make(a1, 0);
  v54 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v54;
  v54->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v53;
  p_on_zero_shared = (uint64_t)&v54->~__shared_weak_count_0;
  v313 = (uint64_t)&v54->~__shared_weak_count_0;
  v308 = MIL::IRTensorValueType::MakeWithShape();
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v293 = v56;
  *v56 = v55;
  v295 = v56 + 1;
  v294 = v56 + 1;
  v309 = MIL::IRTensorValueType::MakeWithShape();
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v292 = v58 + 1;
  v291 = v58 + 1;
  v310 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v52, "bias", (uint64_t *)&v279);
  v60 = v279;
  v279 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = v288;
  if (v288)
  {
    v62 = (unint64_t *)&v288->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v291 = __p;
    operator delete(__p);
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v300;
  v305 = (void **)MIL::IRTensorValueType::MakeScalar();
  v306 = (void **)MIL::IRTensorValueType::MakeScalar();
  v307 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v64, "matrix_vector_bias", (uint64_t *)&Scalar);
  v66 = Scalar;
  Scalar = 0;
  if (v66)
    (*((void (**)(std::__shared_weak_count_vtbl *))v66->~__shared_weak_count + 1))(v66);
  v67 = v287;
  if (v287)
  {
    v68 = (unint64_t *)&v287->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v286 = 0;
  v70 = operator new();
  *(_QWORD *)v70 = 0;
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v70 + 16) = 0;
  v305 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v286, (void **)v70);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v305, 0);
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v286, 1uLL);
  v71 = v286;
  v72 = MIL::IRUnknownDimension::Make(a1, 0);
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = operator new(0x10uLL);
  v295 = v74 + 2;
  *v74 = v72;
  v74[1] = v73;
  v293 = v74;
  v294 = v74 + 2;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape();
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = operator new(0x10uLL);
  v292 = v77 + 2;
  *v77 = v75;
  v77[1] = v76;
  __p = v77;
  v291 = v77 + 2;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape();
  v78 = MIL::IRUnknownDimension::Make(a1, 0);
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = operator new(0x10uLL);
  v281 = v80 + 2;
  *v80 = v78;
  v80[1] = v79;
  v279 = v80;
  v280 = v80 + 2;
  v313 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v81 = v283;
  v284 = v283;
  if (v283)
  {
    v82 = (_QWORD *)operator new();
    v83 = v283;
    *v82 = &unk_24BFE7320;
    v82[1] = 0;
    v82[2] = 0;
    v82[3] = v83;
  }
  else
  {
    v82 = 0;
  }
  v285 = v82;
  v283 = 0;
  v84 = v71[2];
  v85 = v71[1];
  if (v85 >= v84)
  {
    v87 = (v85 - *v71) >> 4;
    v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 60)
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    v89 = v84 - *v71;
    if (v89 >> 3 > v88)
      v88 = v89 >> 3;
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF0)
      v90 = 0xFFFFFFFFFFFFFFFLL;
    else
      v90 = v88;
    v309 = (uint64_t)(v71 + 2);
    v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(v71 + 2), v90);
    v93 = &v91[16 * v87];
    *(_QWORD *)v93 = v81;
    *((_QWORD *)v93 + 1) = v82;
    v285 = 0;
    v284 = 0;
    v95 = *v71;
    v94 = v71[1];
    if (v94 == *v71)
    {
      v98 = (void **)v71[1];
      v96 = &v91[16 * v87];
    }
    else
    {
      v96 = &v91[16 * v87];
      do
      {
        v97 = *((_OWORD *)v94 - 1);
        v94 -= 16;
        *((_OWORD *)v96 - 1) = v97;
        v96 -= 16;
        *(_QWORD *)v94 = 0;
        *((_QWORD *)v94 + 1) = 0;
      }
      while (v94 != v95);
      v98 = (void **)*v71;
      v94 = v71[1];
    }
    v86 = v93 + 16;
    *v71 = v96;
    v305 = v98;
    v306 = v98;
    v71[1] = v93 + 16;
    v307 = (uint64_t)v94;
    v99 = v71[2];
    v71[2] = &v91[16 * v92];
    v308 = (uint64_t)v99;
    std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((uint64_t)&v305);
  }
  else
  {
    *(_QWORD *)v85 = v81;
    *((_QWORD *)v85 + 1) = v82;
    v86 = v85 + 16;
    v285 = 0;
    v284 = 0;
  }
  v71[1] = v86;
  v100 = v283;
  v283 = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  v101 = v282;
  if (v282)
  {
    v102 = (unint64_t *)&v282->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if (v279)
  {
    v280 = v279;
    operator delete(v279);
  }
  if (__p)
  {
    v291 = __p;
    operator delete(__p);
  }
  if (v293)
  {
    v294 = v293;
    operator delete(v293);
  }
  *(_OWORD *)v277 = *(_OWORD *)a2;
  v278 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v104 = v300;
  v275 = v300;
  if (v300)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7380;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v104;
  }
  else
  {
    v105 = 0;
  }
  v276 = v105;
  v300 = 0;
  v273 = v286;
  if (v286)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v286;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE73E0;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v274 = v106;
  v286 = 0;
  v303[0] = &unk_24BFE7440;
  v303[1] = ANEMachineIR::H2022::Validators::ValidateNeMatmul;
  v304 = (MIL::Validation::TensorDTypeConstraints *)v303;
  v302 = 0;
  MIL::IROperator::Make();
  v108 = v302;
  if (v302 == v301)
  {
    v109 = 4;
    v108 = v301;
  }
  else
  {
    if (!v302)
      goto LABEL_111;
    v109 = 5;
  }
  (*(void (**)(void))(*v108 + 8 * v109))();
LABEL_111:
  v110 = v304;
  if (v304 == (MIL::Validation::TensorDTypeConstraints *)v303)
  {
    v111 = 4;
    v110 = (MIL::Validation::TensorDTypeConstraints *)v303;
    goto LABEL_115;
  }
  if (v304)
  {
    v111 = 5;
LABEL_115:
    v110 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(void))(*(_QWORD *)v110 + 8 * v111))();
  }
  if (v274)
  {
    v112 = &v274->__shared_owners_;
    do
      v113 = __ldaxr((unint64_t *)v112);
    while (__stlxr(v113 - 1, (unint64_t *)v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
      std::__shared_weak_count::__release_weak(v274);
    }
  }
  if (v276)
  {
    v114 = &v276->__shared_owners_;
    do
      v115 = __ldaxr((unint64_t *)v114);
    while (__stlxr(v115 - 1, (unint64_t *)v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  if (SHIBYTE(v278) < 0)
    operator delete(v277[0]);
  MIL::Validation::TensorDTypeConstraints::Make(v110);
  v116 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v269, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v271 = Scalar;
  if (Scalar)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = Scalar;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v272 = v117;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v267, "KernelT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v116 + 3))(v116, &v271, v267);
  if (v268 < 0)
    operator delete(v267[0]);
  v119 = v272;
  if (v272)
  {
    v120 = (unint64_t *)&v272->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = Scalar;
  Scalar = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v270 < 0)
    operator delete(v269);
  v123 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v263, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v265 = Scalar;
  if (Scalar)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = Scalar;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = v125;
  }
  else
  {
    v124 = 0;
  }
  v266 = v124;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v123 + 3))(v123, &v265, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v126 = v266;
  if (v266)
  {
    v127 = (unint64_t *)&v266->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = Scalar;
  Scalar = 0;
  if (v129)
    (*((void (**)(std::__shared_weak_count_vtbl *))v129->~__shared_weak_count + 1))(v129);
  if (v264 < 0)
    operator delete(v263);
  v130 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v257, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v259 = Scalar;
  if (Scalar)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = Scalar;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v260 = v131;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v255, "InputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v130 + 3))(v130, &v259, v255);
  if (v256 < 0)
    operator delete(v255[0]);
  v133 = v260;
  if (v260)
  {
    v134 = (unint64_t *)&v260->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = Scalar;
  Scalar = 0;
  if (v136)
    (*((void (**)(std::__shared_weak_count_vtbl *))v136->~__shared_weak_count + 1))(v136);
  if (v258 < 0)
    operator delete(v257);
  v137 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v251, "matrix_vector_bias");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v253 = Scalar;
  if (Scalar)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = Scalar;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v254 = v138;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "KernelT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v137 + 3))(v137, &v253, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v140 = v254;
  if (v254)
  {
    v141 = (unint64_t *)&v254->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = Scalar;
  Scalar = 0;
  if (v143)
    (*((void (**)(std::__shared_weak_count_vtbl *))v143->~__shared_weak_count + 1))(v143);
  if (v252 < 0)
    operator delete(v251);
  v144 = v305;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v247 = Scalar;
  if (Scalar)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = Scalar;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v248 = v145;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v245, "OutputT");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v144 + 3))(v144, &v247, v245);
  if (v246 < 0)
    operator delete(v245[0]);
  v147 = v248;
  if (v248)
  {
    v148 = (unint64_t *)&v248->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = Scalar;
  Scalar = 0;
  if (v150)
    (*((void (**)(std::__shared_weak_count_vtbl *))v150->~__shared_weak_count + 1))(v150);
  v151 = *a3;
  v243 = v305;
  if (v305)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = v305;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE75B0;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = (std::__shared_weak_count_vtbl *)v153;
  }
  else
  {
    v152 = 0;
  }
  v244 = v152;
  v305 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v151 + 56))(v151, &v243);
  v154 = v244;
  if (v244)
  {
    v155 = (unint64_t *)&v244->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = (MIL::Validation::TensorSymbolicShapeConstraints *)v305;
  v305 = 0;
  if (v157)
    v157 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v157 + 8))(v157);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v157);
  v158 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v239, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v241 = Scalar;
  if (Scalar)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = Scalar;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v242 = v159;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v237, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v158 + 3))(v158, &v241, 0, v237);
  if (v238 < 0)
    operator delete(v237[0]);
  v161 = v242;
  if (v242)
  {
    v162 = (unint64_t *)&v242->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = Scalar;
  Scalar = 0;
  if (v164)
    (*((void (**)(std::__shared_weak_count_vtbl *))v164->~__shared_weak_count + 1))(v164);
  if (v240 < 0)
    operator delete(v239);
  v165 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v233, "x");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v235 = Scalar;
  if (Scalar)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = Scalar;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v236 = v166;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v231, "M");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v165 + 3))(v165, &v235, 1, v231);
  if (v232 < 0)
    operator delete(v231[0]);
  v168 = v236;
  if (v236)
  {
    v169 = (unint64_t *)&v236->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = Scalar;
  Scalar = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  if (v234 < 0)
    operator delete(v233);
  v172 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v227, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v229 = Scalar;
  if (Scalar)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = Scalar;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v230 = v173;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v225, "M");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v172 + 3))(v172, &v229, 0, v225);
  if (v226 < 0)
    operator delete(v225[0]);
  v175 = v230;
  if (v230)
  {
    v176 = (unint64_t *)&v230->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = Scalar;
  Scalar = 0;
  if (v178)
    (*((void (**)(std::__shared_weak_count_vtbl *))v178->~__shared_weak_count + 1))(v178);
  if (v228 < 0)
    operator delete(v227);
  v179 = v305;
  std::string::basic_string[abi:ne180100]<0>(&v221, "y");
  MIL::Validation::OpParameterConstraintTarget::Make();
  v223 = Scalar;
  if (Scalar)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = Scalar;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE74F0;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v224 = v180;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v219, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v179 + 3))(v179, &v223, 1, v219);
  if (v220 < 0)
    operator delete(v219[0]);
  v182 = v224;
  if (v224)
  {
    v183 = (unint64_t *)&v224->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = Scalar;
  Scalar = 0;
  if (v185)
    (*((void (**)(std::__shared_weak_count_vtbl *))v185->~__shared_weak_count + 1))(v185);
  if (v222 < 0)
    operator delete(v221);
  v186 = v305;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v217 = Scalar;
  if (Scalar)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = Scalar;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v218 = v187;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v215, "N");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v186 + 3))(v186, &v217, 0, v215);
  if (v216 < 0)
    operator delete(v215[0]);
  v189 = v218;
  if (v218)
  {
    v190 = (unint64_t *)&v218->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = Scalar;
  Scalar = 0;
  if (v192)
    (*((void (**)(std::__shared_weak_count_vtbl *))v192->~__shared_weak_count + 1))(v192);
  v193 = v305;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v213 = Scalar;
  if (Scalar)
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = Scalar;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7550;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = v195;
  }
  else
  {
    v194 = 0;
  }
  v214 = v194;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v211, "L");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v193 + 3))(v193, &v213, 1, v211);
  if (v212 < 0)
    operator delete(v211[0]);
  v196 = v214;
  if (v214)
  {
    v197 = (unint64_t *)&v214->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = Scalar;
  Scalar = 0;
  if (v199)
    (*((void (**)(std::__shared_weak_count_vtbl *))v199->~__shared_weak_count + 1))(v199);
  v200 = *a3;
  v209 = v305;
  if (v305)
  {
    v201 = (std::__shared_weak_count *)operator new();
    v202 = v305;
    v201->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE7610;
    v201->__shared_owners_ = 0;
    v201->__shared_weak_owners_ = 0;
    v201[1].__vftable = (std::__shared_weak_count_vtbl *)v202;
  }
  else
  {
    v201 = 0;
  }
  v210 = v201;
  v305 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v200 + 56))(v200, &v209);
  v203 = v210;
  if (v210)
  {
    v204 = (unint64_t *)&v210->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = v305;
  v305 = 0;
  if (v206)
    (*((void (**)(void **))*v206 + 1))(v206);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v286, 0);
  result = v300;
  if (v300)
  {
    v208 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)v300);
    return (std::__shared_weak_count_vtbl *)MEMORY[0x20BCFF140](v208, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_206927B80(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 144);
  *(_QWORD *)(v2 - 144) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x320], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 216), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::BaseNeMatmul::Make()
{
  _QWORD *v0;
  _QWORD *v1;
  char v2;
  uint64_t v3;

  OUTLINED_FUNCTION_2_1();
  if (v2)
  {
    v3 = 4;
    goto LABEL_5;
  }
  if (v1)
  {
    v3 = 5;
    v0 = v1;
LABEL_5:
    OUTLINED_FUNCTION_0_0(v0, v3);
  }
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_0();
}

void MilTranslator::OpTranslator::TranslateReshape(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  MIL::IRValueType *ParameterType;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  MIL::IRValueType *OutputType;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  MIL::IRValueType *v26;
  uint64_t v27;
  int v28;
  MIL::IRValueType *v29;
  uint64_t v30;
  int v31;
  MIL::IRValueType *v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  MIL::IRValueType *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  MIL::IRValueType *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  MIL::IRValueType *v46;
  ANEMachineIR::Utils *v47;
  const MIL::IRTensorValueType *v48;
  MIL::IRValueType *v49;
  ANEMachineIR::Utils *v50;
  const MIL::IRTensorValueType *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  uint64_t Message;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  MIL::IRValueType *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count_vtbl *v62;
  __int128 v63;
  MIL::IRValueType *v64;
  MIL::IRNamedValueType *v65;
  uint64_t Function;
  uint64_t v67;
  MIL::IRValueType *v68;
  ANEMachineIR::Utils *v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t Name;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::string v88;
  std::__shared_weak_count *v89;
  std::string v90;
  void *v91;
  char v92;
  std::__shared_weak_count *v93;
  void *v94;
  char v95;
  std::string v96;
  MIL::IRNamedValueType *v97;
  MIL::IRNamedValueType *v98;
  std::__shared_weak_count *v99;
  std::string v100;
  void **v101;
  std::__shared_weak_count *v102;
  void *v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::string v106;
  void *v107;
  _BYTE *v108;
  void *v109[3];
  void *v110[2];
  char v111;
  void *v112[3];
  std::vector<int> v113;
  std::vector<int> v114;
  void *__p[2];
  char v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  std::string v125;
  void **v126;

  std::string::basic_string[abi:ne180100]<0>(&v125, "x");
  v6 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, _QWORD))(*(_QWORD *)a2 + 120))(a2, &v125, 0);
  v7 = v6;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v125.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_3:
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      v9 = (std::__shared_weak_count *)LocationPtr[1];
      v123 = *LocationPtr;
      v124 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v121, "x");
      ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
      v13 = MIL::IRValueType::AsTensorType(ParameterType);
      std::string::basic_string[abi:ne180100]<0>(v117, "x");
      std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
      ANEMachineIR::Validators::ValidateLiveTensorSize(&v123, v13, (uint64_t)v117, (uint64_t)__p, (MIL::ValidationResult *)&v125);
      if (v116 < 0)
        operator delete(__p[0]);
      if (v118 < 0)
        operator delete(v117[0]);
      if (v122 < 0)
        operator delete(v121[0]);
      v14 = v124;
      if (v124)
      {
        v15 = (unint64_t *)&v124->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v125) & 1) == 0)
      {
        *(_DWORD *)a3 = 11;
        Message = MIL::MILResult::GetMessage((MIL::MILResult *)&v125);
        if (*(char *)(Message + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(a3 + 8), *(const std::string::value_type **)Message, *(_QWORD *)(Message + 8));
        }
        else
        {
          v56 = *(_OWORD *)Message;
          *(_QWORD *)(a3 + 24) = *(_QWORD *)(Message + 16);
          *(_OWORD *)(a3 + 8) = v56;
        }
        goto LABEL_140;
      }
      v17 = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      v18 = (std::__shared_weak_count *)v17[1];
      v119 = *v17;
      v120 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
      v22 = MIL::IRValueType::AsTensorType(OutputType);
      std::string::basic_string[abi:ne180100]<0>(v117, "output");
      std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
      ANEMachineIR::Validators::ValidateLiveTensorSize(&v119, v22, (uint64_t)v117, (uint64_t)__p, (MIL::ValidationResult *)v121);
      if (v116 < 0)
        operator delete(__p[0]);
      if (v118 < 0)
        operator delete(v117[0]);
      v23 = v120;
      if (v120)
      {
        v24 = (unint64_t *)&v120->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)v121) & 1) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v117, "x");
        v26 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
        v27 = MIL::IRValueType::AsTensorType(v26);
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 88))(v27);
        v29 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
        v30 = MIL::IRValueType::AsTensorType(v29);
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 88))(v30);
        if (v118 < 0)
          operator delete(v117[0]);
        if (v28 == v31)
        {
          v32 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
          v33 = MIL::IRValueType::AsTensorType(v32);
          v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 88))(v33);
          v35 = "Unsupported dtype for reshape.";
          if (v34 <= 0xE && ((1 << v34) & 0x4210) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(v117, "x");
            v36 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
            v37 = MIL::IRValueType::AsTensorType(v36);
            v38 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 96))(v37);
            v39 = (uint64_t)(v38[1] - *v38) >> 3;
            if (v118 < 0)
              operator delete(v117[0]);
            MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, v7, v39, (uint64_t)v117);
            v40 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
            v41 = MIL::IRValueType::AsTensorType(v40);
            v42 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 96))(v41);
            v44 = *v42;
            v43 = v42[1];
            (*(void (**)(std::vector<int> *__return_ptr, const MIL::IROperation *))(*(_QWORD *)a2 + 200))(&v114, a2);
            if (v114.__end_ == v114.__begin_)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v45 = (v43 - v44) >> 3;
            MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, (uint64_t)v114.__begin_, v45, (uint64_t)__p);
            v113.__begin_ = (std::vector<int>::pointer)&v114;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113);
            MilTranslator::OpTranslator::GetTransposeOpParamPerm(v39, (uint64_t)v117, &v114);
            MilTranslator::OpTranslator::GetTransposeOpParamPerm(v45, (uint64_t)__p, &v113);
            std::string::basic_string[abi:ne180100]<0>(v110, "x");
            v46 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
            v47 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v46);
            ANEMachineIR::Utils::GetStaticTensorShape(v47, v48, (uint64_t)v112);
            if (v111 < 0)
              operator delete(v110[0]);
            v49 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
            v50 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v49);
            ANEMachineIR::Utils::GetStaticTensorShape(v50, v51, (uint64_t)v110);
            MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v112, (unsigned int **)&v114, v109);
            MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v110, (unsigned int **)&v113, &v107);
            (*(void (**)(void **__return_ptr, const MIL::IROperation *))(*(_QWORD *)a2 + 200))(&v103, a2);
            if (v104 == v103)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            if (*((char *)v103 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v103, *((_QWORD *)v103 + 1));
            }
            else
            {
              v52 = *(_OWORD *)v103;
              v106.__r_.__value_.__r.__words[2] = *((_QWORD *)v103 + 2);
              *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v52;
            }
            v101 = &v103;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v101);
            if (MilTranslator::OpTranslator::IsTransposeRequired(&v113))
              std::string::append(&v106, "_channel_last");
            v59 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
            v60 = MIL::IRValueType::AsTensorType(v59);
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 88))(v60);
            v103 = 0;
            v104 = 0;
            v105 = 0;
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v103, v107, (uint64_t)v108, (v108 - (_BYTE *)v107) >> 3);
            MIL::IRTensorValueType::Make();
            if (v103)
            {
              v104 = (std::__shared_weak_count *)v103;
              operator delete(v103);
            }
            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v100, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
            else
              v100 = v106;
            MIL::IRNamedValueType::Make();
            v101 = (void **)v103;
            if (v103)
            {
              v61 = (std::__shared_weak_count *)operator new();
              v62 = (std::__shared_weak_count_vtbl *)v103;
              v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_24BFE76D0;
              v61->__shared_owners_ = 0;
              v61->__shared_weak_owners_ = 0;
              v61[1].__vftable = v62;
            }
            else
            {
              v61 = 0;
            }
            v102 = v61;
            v103 = 0;
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v100.__r_.__value_.__l.__data_);
            v98 = 0;
            v99 = 0;
            if ((MilTranslator::OpTranslator::IsTransposeRequired(&v113) & 1) != 0)
            {
              (*(void (**)(void **__return_ptr, const MIL::IROperation *))(*(_QWORD *)a2 + 200))(&v103, a2);
              if (v104 == v103)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              if (*((char *)v103 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)v103, *((_QWORD *)v103 + 1));
              }
              else
              {
                v63 = *(_OWORD *)v103;
                v96.__r_.__value_.__r.__words[2] = *((_QWORD *)v103 + 2);
                *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v63;
              }
              v64 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
              MIL::IRValueType::AsTensorType(v64);
              MIL::IRNamedValueType::Make();
              std::shared_ptr<MIL::IRNamedValueType>::operator=[abi:ne180100]<MIL::IRNamedValueType,std::default_delete<MIL::IRNamedValueType>,void>(&v98, (uint64_t *)&v97);
              v65 = v97;
              v97 = 0;
              if (v65)
              {
                MIL::IRNamedValueType::~IRNamedValueType(v65);
                MEMORY[0x20BCFF140]();
              }
              if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v96.__r_.__value_.__l.__data_);
              v126 = &v103;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v126);
            }
            else
            {
              std::shared_ptr<MIL::IRNamedValueType>::operator=[abi:ne180100](&v98, (uint64_t *)&v101);
            }
            Function = MIL::IRProgram::GetFunction();
            v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 128))(Function);
            if (!std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__count_unique<std::string>(v67, (const void **)v7))
            {
              std::string::basic_string[abi:ne180100]<0>(&v103, "x");
              v68 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
              v69 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v68);
              MilTranslator::OpTranslator::EnsureTransposeProducesChannelFirst((uint64_t)this, v7, v69);
              if (SHIBYTE(v105) < 0)
                operator delete(v103);
            }
            std::string::basic_string[abi:ne180100]<0>(&v94, "reshape");
            MilTranslator::OpTranslator::AddOperation((uint64_t)this);
            if (v95 < 0)
              operator delete(v94);
            std::string::basic_string[abi:ne180100]<0>(&v91, "x");
            if (*(char *)(v7 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
            }
            else
            {
              v70 = *(_OWORD *)v7;
              v90.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
              *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v70;
            }
            MIL::Builder::OperationBuilder::AddInput();
            v71 = v93;
            if (v93)
            {
              v72 = (unint64_t *)&v93->__shared_owners_;
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v90.__r_.__value_.__l.__data_);
            if (v92 < 0)
              operator delete(v91);
            Name = MIL::IRNamedValueType::GetName(v98);
            if (*(char *)(Name + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
            }
            else
            {
              v75 = *(_OWORD *)Name;
              v88.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
              *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v75;
            }
            MIL::IRNamedValueType::GetType(v98);
            MIL::Builder::OperationBuilder::AddOutput();
            v76 = v89;
            if (v89)
            {
              v77 = (unint64_t *)&v89->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v88.__r_.__value_.__l.__data_);
            *(_DWORD *)a3 = 0;
            std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
            v79 = v104;
            if (v104)
            {
              v80 = (unint64_t *)&v104->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            v82 = v99;
            if (v99)
            {
              v83 = (unint64_t *)&v99->__shared_owners_;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
            v85 = v102;
            if (v102)
            {
              v86 = (unint64_t *)&v102->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v106.__r_.__value_.__l.__data_);
            if (v107)
            {
              v108 = v107;
              operator delete(v107);
            }
            if (v109[0])
            {
              v109[1] = v109[0];
              operator delete(v109[0]);
            }
            if (v110[0])
            {
              v110[1] = v110[0];
              operator delete(v110[0]);
            }
            if (v112[0])
            {
              v112[1] = v112[0];
              operator delete(v112[0]);
            }
            if (v113.__begin_)
            {
              v113.__end_ = v113.__begin_;
              operator delete(v113.__begin_);
            }
            if (v114.__begin_)
            {
              v114.__end_ = v114.__begin_;
              operator delete(v114.__begin_);
            }
            if (v116 < 0)
              operator delete(__p[0]);
            if (v118 < 0)
              operator delete(v117[0]);
            goto LABEL_139;
          }
        }
        else
        {
          v35 = "Input and output dtypes must match for reshape.";
        }
        *(_DWORD *)a3 = 11;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v35);
      }
      else
      {
        *(_DWORD *)a3 = 11;
        v57 = MIL::MILResult::GetMessage((MIL::MILResult *)v121);
        if (*(char *)(v57 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(a3 + 8), *(const std::string::value_type **)v57, *(_QWORD *)(v57 + 8));
        }
        else
        {
          v58 = *(_OWORD *)v57;
          *(_QWORD *)(a3 + 24) = *(_QWORD *)(v57 + 16);
          *(_OWORD *)(a3 + 8) = v58;
        }
      }
LABEL_139:
      MEMORY[0x20BCFEAEC](v121);
LABEL_140:
      MEMORY[0x20BCFEAEC](&v125);
      return;
    }
  }
  else if (v6)
  {
    goto LABEL_3;
  }
  *(_DWORD *)a3 = 4;
  (*(void (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
  std::operator+<char>();
  v53 = std::string::append(&v125, "' does not handle immediate values");
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v53->__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 8) = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
}

void sub_206928E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,__int16 a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a65;
  uint64_t a66;
  void *a68;
  char a72;
  uint64_t v72;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  if (a49 < 0)
    operator delete(a44);
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  if (a72 < 0)
    operator delete(a68);
  if (*(char *)(v72 - 225) < 0)
    operator delete(*(void **)(v72 - 248));
  MEMORY[0x20BCFEAEC](v72 - 200);
  MEMORY[0x20BCFEAEC](v72 - 128);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<MIL::IRNamedValueType>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<MIL::IRNamedValueType>::operator=[abi:ne180100]<MIL::IRNamedValueType,std::default_delete<MIL::IRNamedValueType>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_24BFE76D0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

void ANEMachineIR::Validators::ParsePeReduceParamValues(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t ParameterValue;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float *v18;
  uint64_t v19;
  int v20;
  int *v21;
  uint64_t v22;
  char *v23;
  _BYTE *v24;
  _WORD *v25;
  void *v26;
  void *v27;
  _BYTE *v28;
  std::string v29;
  void *v30[2];
  char v31;
  std::string v32;
  void *__p[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;

  v37 = 0;
  v38 = 0;
  v39 = 0;
  if ((ANEMachineIR::Utils::TryGetStaticTensorShape(a2, (uint64_t)&v37) & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "reduction");
    std::string::basic_string[abi:ne180100]<0>(&v29, "mean");
    ParameterValue = MIL::IROperation::TryGetParameterValue();
    if (ParameterValue
      && (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue)
      && (v8 = MEMORY[0x20BCFEE88]()) != 0)
    {
      if (*(char *)(v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
      }
      else
      {
        v9 = *(_OWORD *)v8;
        v32.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v9;
      }
    }
    else
    {
      v32 = v29;
      memset(&v29, 0, sizeof(v29));
    }
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(a3, (__int128 *)&v32);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (v31 < 0)
      operator delete(v30[0]);
    std::string::basic_string[abi:ne180100]<0>(&v32, "reduction_scale");
    v16 = MIL::IROperation::TryGetParameterValue();
    v17 = 1.0;
    if (v16)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16))
      {
        v18 = (float *)MEMORY[0x20BCFEEAC]();
        if (v18)
          v17 = *v18;
      }
    }
    *(float *)(a3 + 64) = v17;
    *(_BYTE *)(a3 + 68) = 1;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v32, "reduction_epsilon");
    v19 = MIL::IROperation::TryGetParameterValue();
    v20 = 0;
    if (v19)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19))
      {
        v21 = (int *)MEMORY[0x20BCFEEAC]();
        if (v21)
          v20 = *v21;
      }
    }
    *(_DWORD *)(a3 + 72) = v20;
    *(_BYTE *)(a3 + 76) = 1;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    v22 = (v38 - v37) >> 3;
    if (v22 == 3)
    {
      std::string::basic_string[abi:ne180100]<0>(v30, "reduction_axes");
      v24 = operator new(1uLL);
      v26 = v24;
      *v24 = 1;
      v27 = v24 + 1;
      v28 = v24 + 1;
      MIL::ANEMachineIR::GetScalarOrVectorOrDefault<signed char>((uint64_t)&v26, (unint64_t *)&v32);
      std::optional<std::vector<MIL::Fp16>>::operator=[abi:ne180100]<std::vector<MIL::Fp16>,void>(a3 + 32, (__n128 *)&v32);
    }
    else if (v22 == 4)
    {
      std::string::basic_string[abi:ne180100]<0>(v30, "reduction_axes");
      v25 = operator new(2uLL);
      v26 = v25;
      *v25 = 513;
      v27 = v25 + 1;
      v28 = v25 + 1;
      MIL::ANEMachineIR::GetScalarOrVectorOrDefault<signed char>((uint64_t)&v26, (unint64_t *)&v32);
      std::optional<std::vector<MIL::Fp16>>::operator=[abi:ne180100]<std::vector<MIL::Fp16>,void>(a3 + 32, (__n128 *)&v32);
    }
    else
    {
      if (v22 == 5)
      {
        std::string::basic_string[abi:ne180100]<0>(v30, "reduction_axes");
        v23 = (char *)operator new(3uLL);
        v27 = v23 + 3;
        v28 = v23 + 3;
        *(_WORD *)v23 = 513;
        v23[2] = 3;
        v26 = v23;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v30, "reduction_axes");
        v26 = 0;
        v27 = 0;
        v28 = 0;
      }
      MIL::ANEMachineIR::GetScalarOrVectorOrDefault<signed char>((uint64_t)&v26, (unint64_t *)&v32);
      std::optional<std::vector<MIL::Fp16>>::operator=[abi:ne180100]<std::vector<MIL::Fp16>,void>(a3 + 32, (__n128 *)&v32);
    }
    if (v32.__r_.__value_.__r.__words[0])
    {
      v32.__r_.__value_.__l.__size_ = v32.__r_.__value_.__r.__words[0];
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
    if (v31 < 0)
      operator delete(v30[0]);
    MIL::ValidationResult::ValidationResult(a4);
  }
  else
  {
    v10 = (std::__shared_weak_count *)a1[1];
    v35 = *a1;
    v36 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "inputs must have static shape.");
    MEMORY[0x20BCFEAD4](a4, &v35, 309, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v13 = v36;
    if (v36)
    {
      v14 = (unint64_t *)&v36->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
}

void sub_206929734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v39;

  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  if (a24 < 0)
    operator delete(a19);
  v39 = *(void **)(v37 - 72);
  if (v39)
  {
    *(_QWORD *)(v37 - 64) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void MIL::ANEMachineIR::GetScalarOrVectorOrDefault<signed char>(uint64_t a1@<X2>, unint64_t *a2@<X8>)
{
  uint64_t ParameterValue;
  char *v5;
  char v6;
  _BYTE *v7;
  MIL::IRValue *v8;
  uint64_t v9;
  ANEMachineIR::Utils *v10;
  const MIL::IRTensorValueType *v11;
  size_t v12;
  size_t *v13;
  unint64_t i;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  char *v25;
  char *v26;
  _BYTE *v27;
  char v28;
  size_t *Data;
  size_t *v30;

  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue)
      && (v5 = (char *)MEMORY[0x20BCFEE94]()) != 0)
    {
      v6 = *v5;
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v7 = operator new(1uLL);
      *a2 = (unint64_t)v7;
      *v7++ = v6;
      a2[1] = (unint64_t)v7;
      a2[2] = (unint64_t)v7;
    }
    else
    {
      v8 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      v9 = MIL::IRValue::AsTensor(v8);
      v10 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      ANEMachineIR::Utils::GetStaticTensorShape(v10, v11, (uint64_t)&Data);
      if (v30 == Data)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      v12 = *Data;
      v30 = Data;
      operator delete(Data);
      Data = (size_t *)MIL::IRTensorValue::GetDataView<signed char>();
      v30 = v13;
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      std::vector<unsigned char>::reserve(a2, v12);
      if (v12)
      {
        for (i = 0; i != v12; ++i)
        {
          v15 = (_BYTE *)MIL::Util::Span<signed char const,18446744073709551615ul>::operator[](&Data, i);
          v16 = v15;
          v18 = (_BYTE *)a2[1];
          v17 = a2[2];
          if ((unint64_t)v18 >= v17)
          {
            v20 = *a2;
            v21 = &v18[-*a2];
            v22 = (unint64_t)(v21 + 1);
            if ((uint64_t)(v21 + 1) < 0)
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            v23 = v17 - v20;
            if (2 * v23 > v22)
              v22 = 2 * v23;
            if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
              v24 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
              v25 = (char *)operator new(v24);
            else
              v25 = 0;
            v26 = &v21[(_QWORD)v25];
            v21[(_QWORD)v25] = *v16;
            v19 = (uint64_t)&v21[(_QWORD)v25 + 1];
            if (v18 != (_BYTE *)v20)
            {
              v27 = &v18[~v20];
              do
              {
                v28 = *--v18;
                (v27--)[(_QWORD)v25] = v28;
              }
              while (v18 != (_BYTE *)v20);
              v18 = (_BYTE *)*a2;
              v26 = v25;
            }
            *a2 = (unint64_t)v26;
            a2[1] = v19;
            a2[2] = (unint64_t)&v25[v24];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *v18 = *v15;
            v19 = (uint64_t)(v18 + 1);
          }
          a2[1] = v19;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(a2, *(const void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
}

void sub_206929AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::ValidatePeReduce(uint64_t *a1@<X0>, ANEMachineIR::Utils *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, MIL::ValidationResult *a5@<X8>)
{
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  const MIL::IRTensorValueType *v19;
  _BYTE *v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v42;
  char v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  int v54;
  _DWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  void *v64;
  void *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  _QWORD *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  std::string::size_type size;
  std::string *v121;
  __int128 v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::string *v129;
  __int128 v130;
  const std::string::value_type *v131;
  std::string::size_type v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  __int128 v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  MIL::ValidationResult *v140;
  void *v141[2];
  char v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  void *v145;
  _BYTE *v146;
  uint64_t v147;
  void *v148[2];
  char v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152;
  _BYTE *v153;
  uint64_t v154;
  void *v155[2];
  char v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  void *v163;
  _BYTE *v164;
  void *__p[2];
  char v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  void *v169;
  char *v170;
  char *v171;
  std::string v172;
  std::string v173;
  std::string v174;
  std::string v175;
  __int128 v176;
  int64_t v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  char *v180;
  unint64_t v181;
  char v182;

  v10 = (_QWORD *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)a2 + 96))(a2);
  if (v10[1] - *v10 <= 0x17uLL)
  {
    v11 = (std::__shared_weak_count *)a1[1];
    v167 = *a1;
    v168 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Input rank must be >= 3");
    MEMORY[0x20BCFEAD4](a5, &v167, 319, __p);
    if (v166 < 0)
      operator delete(__p[0]);
    v14 = v168;
    if (v168)
    {
      v15 = (unint64_t *)&v168->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      goto LABEL_137;
    }
    return;
  }
  if (!*(_BYTE *)(a4 + 56))
    goto LABEL_112;
  v17 = (_QWORD *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(_QWORD *)a2 + 96))(a2);
  v18 = v17[1] - *v17;
  ANEMachineIR::Utils::GetStaticTensorShape(a2, v19, (uint64_t)&v163);
  v21 = *(_BYTE **)(a4 + 32);
  v20 = *(_BYTE **)(a4 + 40);
  v22 = v20 - v21;
  if (v20 == v21)
  {
LABEL_86:
    if (v18 == 24 && (v22 & 1) == 0)
    {
      if ((unint64_t)(v164 - (_BYTE *)v163) >= 9)
      {
        v49 = *((_QWORD *)v163 + 1);
        goto LABEL_96;
      }
LABEL_289:
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    if ((v18 != 32) | v22 & 1)
    {
      if ((v18 != 40) | v22 & 1)
        goto LABEL_97;
      if ((unint64_t)(v164 - (_BYTE *)v163) <= 0x18)
        goto LABEL_289;
      v49 = *((_QWORD *)v163 + 3);
    }
    else
    {
      if ((unint64_t)(v164 - (_BYTE *)v163) < 0x11)
        goto LABEL_289;
      v49 = *((_QWORD *)v163 + 2);
    }
LABEL_96:
    if (v49 != 1)
    {
      v50 = a1[1];
      *(_QWORD *)&v176 = *a1;
      *((_QWORD *)&v176 + 1) = v50;
      if (v50)
      {
        v51 = (unint64_t *)(v50 + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      std::string::basic_string[abi:ne180100]<0>(&v180, "PE reduce: for W dim, if its input dim size is not 1, it should be reduced (W should appear in reduction_axis).");
      MEMORY[0x20BCFEAD4](a5, &v176, 319, &v180);
      if (v182 < 0)
        operator delete(v180);
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
      if (*((_QWORD *)&v176 + 1))
      {
        v53 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
        do
          v35 = __ldaxr(v53);
        while (__stlxr(v35 - 1, v53));
        goto LABEL_106;
      }
      goto LABEL_108;
    }
LABEL_97:
    MIL::ValidationResult::ValidationResult(a5);
    goto LABEL_108;
  }
  v23 = 0;
  if (v22 <= 1)
    v24 = 1;
  else
    v24 = v20 - v21;
  v25 = 1;
  v26 = 1;
  do
  {
    v27 = v23 + 1;
    if (v22 > v23 + 1)
    {
      v28 = v21[v23];
      v29 = v25;
      while (v28 != v21[v29])
      {
        if (v22 <= ++v29)
          goto LABEL_23;
      }
      v26 = 0;
    }
LABEL_23:
    ++v25;
    v23 = v27;
  }
  while (v27 != v24);
  if ((v26 & 1) == 0)
  {
    v30 = a1[1];
    *(_QWORD *)&v176 = *a1;
    *((_QWORD *)&v176 + 1) = v30;
    if (v30)
    {
      v31 = (unint64_t *)(v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    std::string::basic_string[abi:ne180100]<0>(&v180, "PE reduce: duplicated axes not allowed.");
    MEMORY[0x20BCFEAD4](a5, &v176, 319, &v180);
    if (v182 < 0)
      operator delete(v180);
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
    if (*((_QWORD *)&v176 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
LABEL_106:
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    goto LABEL_108;
  }
  LOBYTE(v22) = 0;
  v36 = 0;
  v37 = v164 - (_BYTE *)v163;
  do
  {
    v38 = *v21;
    if (v18 == 32)
    {
      if (v38 == 3)
      {
        if (v37 < 0x19)
          goto LABEL_289;
        v39 = *((_QWORD *)v163 + 3);
      }
      else if (v38 == 1)
      {
        if (v37 < 9)
          goto LABEL_289;
        v39 = *((_QWORD *)v163 + 1);
      }
      else
      {
        if (*v21)
          goto LABEL_50;
        if (v164 == v163)
          goto LABEL_289;
        v39 = *(_QWORD *)v163;
      }
      if (v39 == 1)
      {
LABEL_50:
        LOBYTE(v40) = 0;
        goto LABEL_60;
      }
      LOBYTE(v40) = 0;
      ++v36;
    }
    else
    {
      if (v18 != 40)
        goto LABEL_50;
      LOBYTE(v40) = 1;
      switch(*v21)
      {
        case 0:
          if (v164 == v163)
            goto LABEL_289;
          v40 = *(_QWORD *)v163;
          break;
        case 1:
          if (v37 < 9)
            goto LABEL_289;
          v40 = *((_QWORD *)v163 + 1);
          break;
        case 2:
          if (v37 < 0x11)
            goto LABEL_289;
          v40 = *((_QWORD *)v163 + 2);
          break;
        case 4:
          if (v37 < 0x21)
            goto LABEL_289;
          v40 = *((_QWORD *)v163 + 4);
          break;
        default:
          goto LABEL_60;
      }
      if (v40 != 1)
      {
        ++v36;
        LOBYTE(v40) = 1;
      }
    }
LABEL_60:
    v42 = v18 == 24 && v38 == 1;
    if (v18 == 32 && v38 == 2)
      v42 = 1;
    if (v38 == 3)
      v44 = v40;
    else
      v44 = 0;
    LOBYTE(v22) = v42 | v44 | v22;
    ++v21;
  }
  while (v21 != v20);
  if (v36 < 3)
    goto LABEL_86;
  v45 = a1[1];
  *(_QWORD *)&v176 = *a1;
  *((_QWORD *)&v176 + 1) = v45;
  if (v45)
  {
    v46 = (unint64_t *)(v45 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  std::string::basic_string[abi:ne180100]<0>(&v180, "PE reduce: for N/D/H/C dims, reduce up to 2 dims is allowed.");
  MEMORY[0x20BCFEAD4](a5, &v176, 319, &v180);
  if (v182 < 0)
    operator delete(v180);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  if (*((_QWORD *)&v176 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
    do
      v35 = __ldaxr(v48);
    while (__stlxr(v35 - 1, v48));
    goto LABEL_106;
  }
LABEL_108:
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  if (!MIL::ValidationResult::IsGood(a5))
    return;
  MEMORY[0x20BCFEAEC](a5);
LABEL_112:
  if (*(_BYTE *)(a4 + 24))
  {
    v54 = *(char *)(a4 + 23);
    if (v54 < 0)
    {
      if (*(_QWORD *)(a4 + 8) != 4)
        goto LABEL_119;
      v55 = *(_DWORD **)a4;
    }
    else
    {
      v55 = (_DWORD *)a4;
      if (v54 != 4)
      {
LABEL_119:
        v56 = (std::__shared_weak_count *)a1[1];
        v161 = *a1;
        v162 = v56;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        std::string::basic_string[abi:ne180100]<0>(v159, "Only mean reduction is supported at the moment.");
        MEMORY[0x20BCFEAD4](a5, &v161, 319, v159);
        if (v160 < 0)
          operator delete(v159[0]);
        v14 = v162;
        if (v162)
        {
          v59 = (unint64_t *)&v162->__shared_owners_;
          do
            v16 = __ldaxr(v59);
          while (__stlxr(v16 - 1, v59));
          goto LABEL_137;
        }
        return;
      }
    }
    if (*v55 != 1851876717)
      goto LABEL_119;
  }
  if (!*(_BYTE *)(a4 + 104))
  {
    v152 = 0;
    v153 = 0;
    v154 = 0;
    if ((ANEMachineIR::Utils::TryGetStaticTensorShape((uint64_t)a2, (uint64_t)&v152) & 1) != 0)
    {
      v145 = 0;
      v146 = 0;
      v147 = 0;
      if ((ANEMachineIR::Utils::TryGetStaticTensorShape(a3, (uint64_t)&v145) & 1) != 0)
      {
        v169 = 0;
        v170 = 0;
        v171 = 0;
        v65 = v152;
        v64 = v153;
        v66 = v153 - (_BYTE *)v152;
        v67 = (v153 - (_BYTE *)v152) >> 3;
        v69 = *(_QWORD *)(a4 + 32);
        v68 = *(_QWORD *)(a4 + 40);
        std::vector<unsigned long long>::reserve(&v169, v67);
        std::vector<BOOL>::vector(&v180, v67);
        if (v64 != v65)
        {
          v70 = 0;
          v71 = v180;
          if (v67 <= 1)
            v72 = 1;
          else
            v72 = v67;
          do
          {
            if (v181 <= v70)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            *(_QWORD *)&v71[(v70 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v70);
            ++v70;
          }
          while (v72 != v70);
        }
        if (v68 == v69)
        {
          if (v66 >= 0x11)
          {
            if (v181 <= 1)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v90 = (uint64_t *)v180;
            v91 = *(_QWORD *)v180;
            *(_QWORD *)v180 |= 2uLL;
            if (v66 >= 0x19)
            {
              if (v181 <= 2)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              *v90 = v91 | 6;
              if (v66 == 40)
              {
                if (v181 <= 3)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                *v90 = v91 | 0xE;
              }
            }
          }
        }
        else
        {
          v73 = v68 - v69;
          v74 = *(char **)(a4 + 32);
          v75 = *(_QWORD *)(a4 + 40) - (_QWORD)v74;
          v76 = v180;
          if ((unint64_t)(v68 - v69) <= 1)
            v73 = 1;
          do
          {
            if (!v75)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            v77 = *v74;
            if (v181 <= v77)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            *(_QWORD *)&v76[(v77 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v77;
            ++v74;
            --v75;
            --v73;
          }
          while (v73);
        }
        v170 = (char *)v169;
        std::vector<unsigned long long>::reserve(&v169, v67);
        if (v64 != v65)
        {
          v92 = 0;
          if (v67 <= 1)
            v67 = 1;
          while (1)
          {
            if (v181 <= v92)
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            if (((*(_QWORD *)&v180[(v92 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v92) & 1) != 0)
            {
              v93 = v170;
              if (v170 >= v171)
              {
                v98 = (char *)v169;
                v99 = (v170 - (_BYTE *)v169) >> 3;
                v100 = v99 + 1;
                if ((unint64_t)(v99 + 1) >> 61)
                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                v101 = v171 - (_BYTE *)v169;
                if ((v171 - (_BYTE *)v169) >> 2 > v100)
                  v100 = v101 >> 2;
                if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
                  v102 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v102 = v100;
                if (v102)
                {
                  v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v171, v102);
                  v98 = (char *)v169;
                  v93 = v170;
                }
                else
                {
                  v103 = 0;
                }
                v107 = &v103[8 * v99];
                *(_QWORD *)v107 = 1;
                v97 = v107 + 8;
                while (v93 != v98)
                {
                  v108 = *((_QWORD *)v93 - 1);
                  v93 -= 8;
                  *((_QWORD *)v107 - 1) = v108;
                  v107 -= 8;
                }
LABEL_217:
                v169 = v107;
                v170 = v97;
                v171 = &v103[8 * v102];
                if (v98)
                  operator delete(v98);
                goto LABEL_219;
              }
              *(_QWORD *)v170 = 1;
              v94 = v93 + 8;
            }
            else
            {
              v95 = v152;
              if (v92 >= (v153 - (_BYTE *)v152) >> 3)
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              v96 = v170;
              if (v170 >= v171)
              {
                v98 = (char *)v169;
                v104 = (v170 - (_BYTE *)v169) >> 3;
                v105 = v104 + 1;
                if ((unint64_t)(v104 + 1) >> 61)
                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                v106 = v171 - (_BYTE *)v169;
                if ((v171 - (_BYTE *)v169) >> 2 > v105)
                  v105 = v106 >> 2;
                if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
                  v102 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v102 = v105;
                if (v102)
                {
                  v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v171, v102);
                  v98 = (char *)v169;
                  v96 = v170;
                }
                else
                {
                  v103 = 0;
                }
                v107 = &v103[8 * v104];
                *(_QWORD *)v107 = v95[v92];
                v97 = v107 + 8;
                while (v96 != v98)
                {
                  v109 = *((_QWORD *)v96 - 1);
                  v96 -= 8;
                  *((_QWORD *)v107 - 1) = v109;
                  v107 -= 8;
                }
                goto LABEL_217;
              }
              *(_QWORD *)v170 = *((_QWORD *)v152 + v92);
              v94 = v96 + 8;
            }
            v97 = v94;
LABEL_219:
            v170 = v97;
            if (++v92 == v67)
              goto LABEL_222;
          }
        }
        v97 = v170;
LABEL_222:
        v110 = v169;
        v111 = v97 - (_BYTE *)v169;
        if (v97 - (_BYTE *)v169 == v153 - (_BYTE *)v152)
        {
          MIL::ValidationResult::ValidationResult(a5);
        }
        else
        {
          v112 = (std::__shared_weak_count *)a1[1];
          v178 = *a1;
          v179 = v112;
          if (v112)
          {
            v113 = (unint64_t *)&v112->__shared_owners_;
            do
              v114 = __ldxr(v113);
            while (__stxr(v114 + 1, v113));
            v111 = v170 - v110;
          }
          std::to_string(&v173, v111 >> 3);
          v115 = std::string::insert(&v173, 0, "Output rank ");
          v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
          v174.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v116;
          v115->__r_.__value_.__l.__size_ = 0;
          v115->__r_.__value_.__r.__words[2] = 0;
          v115->__r_.__value_.__r.__words[0] = 0;
          v117 = std::string::append(&v174, " does not match rank of input tensor of shape ");
          v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
          v175.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v118;
          v117->__r_.__value_.__l.__size_ = 0;
          v117->__r_.__value_.__r.__words[2] = 0;
          v117->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v172, (v153 - (_BYTE *)v152) >> 3);
          if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v119 = &v172;
          else
            v119 = (std::string *)v172.__r_.__value_.__r.__words[0];
          if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v172.__r_.__value_.__r.__words[2]);
          else
            size = v172.__r_.__value_.__l.__size_;
          v121 = std::string::append(&v175, (const std::string::value_type *)v119, size);
          v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
          v177 = v121->__r_.__value_.__r.__words[2];
          v176 = v122;
          v121->__r_.__value_.__l.__size_ = 0;
          v121->__r_.__value_.__r.__words[2] = 0;
          v121->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x20BCFEAD4](a5, &v178, 313, &v176);
          if (SHIBYTE(v177) < 0)
            operator delete((void *)v176);
          if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v172.__r_.__value_.__l.__data_);
          if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v175.__r_.__value_.__l.__data_);
          if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v174.__r_.__value_.__l.__data_);
          if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v173.__r_.__value_.__l.__data_);
          v123 = v179;
          if (v179)
          {
            v124 = (unint64_t *)&v179->__shared_owners_;
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
        }
        if (v180)
          operator delete(v180);
        if (MIL::ValidationResult::IsGood(a5))
        {
          MEMORY[0x20BCFEAEC](a5);
          if (v170 - (_BYTE *)v169 == v146 - (_BYTE *)v145 && !memcmp(v169, v145, v170 - (_BYTE *)v169))
          {
            MIL::ValidationResult::ValidationResult(a5);
          }
          else
          {
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v145);
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v169);
            v126 = (std::__shared_weak_count *)a1[1];
            v178 = *a1;
            v179 = v126;
            if (v126)
            {
              v127 = (unint64_t *)&v126->__shared_owners_;
              do
                v128 = __ldxr(v127);
              while (__stxr(v128 + 1, v127));
            }
            std::operator+<char>();
            v129 = std::string::append(&v172, " does not match inferred shape ");
            v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
            v173.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v130;
            v129->__r_.__value_.__l.__size_ = 0;
            v129->__r_.__value_.__r.__words[2] = 0;
            v129->__r_.__value_.__r.__words[0] = 0;
            if (v177 >= 0)
              v131 = (const std::string::value_type *)&v176;
            else
              v131 = (const std::string::value_type *)v176;
            if (v177 >= 0)
              v132 = HIBYTE(v177);
            else
              v132 = *((_QWORD *)&v176 + 1);
            v133 = std::string::append(&v173, v131, v132);
            v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
            v174.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v134;
            v133->__r_.__value_.__l.__size_ = 0;
            v133->__r_.__value_.__r.__words[2] = 0;
            v133->__r_.__value_.__r.__words[0] = 0;
            v135 = std::string::append(&v174, ".");
            v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
            v175.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v136;
            v135->__r_.__value_.__l.__size_ = 0;
            v135->__r_.__value_.__r.__words[2] = 0;
            v135->__r_.__value_.__r.__words[0] = 0;
            MEMORY[0x20BCFEAD4](a5, &v178, 313, &v175);
            if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v175.__r_.__value_.__l.__data_);
            if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v174.__r_.__value_.__l.__data_);
            if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v173.__r_.__value_.__l.__data_);
            if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v172.__r_.__value_.__l.__data_);
            v137 = v179;
            if (v179)
            {
              v138 = (unint64_t *)&v179->__shared_owners_;
              do
                v139 = __ldaxr(v138);
              while (__stlxr(v139 - 1, v138));
              if (!v139)
              {
                ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                std::__shared_weak_count::__release_weak(v137);
              }
            }
            if (SHIBYTE(v177) < 0)
              operator delete((void *)v176);
            if (v182 < 0)
              operator delete(v180);
          }
        }
        if (v169)
        {
          v170 = (char *)v169;
          operator delete(v169);
        }
        if (MIL::ValidationResult::IsGood(a5))
        {
          v140 = (MIL::ValidationResult *)MEMORY[0x20BCFEAEC](a5);
          MIL::ValidationResult::ValidationResult(v140);
        }
      }
      else
      {
        v84 = (std::__shared_weak_count *)a1[1];
        v143 = *a1;
        v144 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
        std::string::basic_string[abi:ne180100]<0>(v141, "outputs must have static shape.");
        MEMORY[0x20BCFEAD4](a5, &v143, 313, v141);
        if (v142 < 0)
          operator delete(v141[0]);
        v87 = v144;
        if (v144)
        {
          v88 = (unint64_t *)&v144->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
      }
      if (v145)
      {
        v146 = v145;
        operator delete(v145);
      }
    }
    else
    {
      v78 = (std::__shared_weak_count *)a1[1];
      v150 = *a1;
      v151 = v78;
      if (v78)
      {
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      std::string::basic_string[abi:ne180100]<0>(v148, "inputs must have static shape.");
      MEMORY[0x20BCFEAD4](a5, &v150, 309, v148);
      if (v149 < 0)
        operator delete(v148[0]);
      v81 = v151;
      if (v151)
      {
        v82 = (unint64_t *)&v151->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
    }
    if (v152)
    {
      v153 = v152;
      operator delete(v152);
    }
    return;
  }
  v60 = (std::__shared_weak_count *)a1[1];
  v157 = *a1;
  v158 = v60;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  std::string::basic_string[abi:ne180100]<0>(v155, "reduction_post_processing is not supported at the moment.");
  MEMORY[0x20BCFEAD4](a5, &v157, 319, v155);
  if (v156 < 0)
    operator delete(v155[0]);
  v14 = v158;
  if (v158)
  {
    v63 = (unint64_t *)&v158->__shared_owners_;
    do
      v16 = __ldaxr(v63);
    while (__stlxr(v16 - 1, v63));
LABEL_137:
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_20692A994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  uint64_t v43;
  void *v45;

  v45 = *(void **)(v43 - 112);
  if (v45)
    operator delete(v45);
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ValidatePeReduce(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  ANEMachineIR::Utils *v5;
  uint64_t v6;
  MIL::IRValueType *Type;
  uint64_t v8;
  uint64_t *LocationPtr;
  uint64_t *v10;
  void *__p[2];
  char v12;
  char v13;
  void *v14;
  void *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  char v23;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  v5 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v12 < 0)
    operator delete(__p[0]);
  v6 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 176))(a1);
  if (*(_QWORD *)(v6 + 8) == *(_QWORD *)v6)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v6);
  v8 = MIL::IRValueType::AsTensorType(Type);
  LOBYTE(__p[0]) = 0;
  v13 = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  LOBYTE(v21) = 0;
  v23 = 0;
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  ANEMachineIR::Validators::ParsePeReduceParamValues(LocationPtr, (uint64_t)v5, (uint64_t)__p, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x20BCFEAEC](a2);
    v10 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    (*(void (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidatePeReduce(v10, v5, v8, (uint64_t)__p, a2);
  }
  if (v23 && v22 < 0)
    operator delete(v21);
  if (v16 && v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v13)
  {
    if (v12 < 0)
      operator delete(__p[0]);
  }
}

void ANEMachineIR::Validators::ValidateNeReduce(MIL::IRObject *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *LocationPtr;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  v4 = (std::__shared_weak_count *)LocationPtr[1];
  v12 = *LocationPtr;
  v13 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ne_reduce is not implemented.");
  MEMORY[0x20BCFEAD4](a2, &v12, 209, __p);
  if (v11 < 0)
    operator delete(__p[0]);
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20692AEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::Location const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        v10 = *a1 + 8 * (v4 >> 6);
        v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      v6 = v5 - 1;
    }
    v7 = v6 >> 6;
    if (v5 >= 0x41)
      v8 = v7;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void MilTranslator::OpTranslator::TranslateConst(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t Attributes;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int128 v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  uint64_t v28;
  std::string *v29;
  __int128 v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *size;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t Location;
  std::string *v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  std::string v51;
  std::__shared_weak_count *v52;
  std::string v53;
  std::__shared_weak_count *v54;
  void *__p;
  char v56;
  void *v57;
  std::string::size_type v58;
  unsigned __int8 v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  uint64_t v64;

  if (!(*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 144))(a2))
  {
    Attributes = MIL::IRObject::GetAttributes(a2);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v63, Attributes);
    std::string::basic_string[abi:ne180100]<0>(&v62, "val");
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>(&v63, (unsigned __int8 *)&v62);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (v64 == 1 && v10)
    {
      v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v10 + 5) + 40))(*((_QWORD *)v10 + 5));
      if (v11)
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
        if (v13 <= 0xE && ((1 << v13) & 0x4210) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "const");
          MilTranslator::OpTranslator::AddOperation((uint64_t)this);
          if (v56 < 0)
            operator delete(__p);
          (*(void (**)(std::string *__return_ptr, const MIL::IROperation *))(*(_QWORD *)a2 + 200))(&v62, a2);
          if (v62.__r_.__value_.__l.__size_ == v62.__r_.__value_.__r.__words[0])
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          if (*(char *)(v62.__r_.__value_.__r.__words[0] + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v62.__r_.__value_.__l.__data_, *(_QWORD *)(v62.__r_.__value_.__r.__words[0] + 8));
          }
          else
          {
            v15 = *(_OWORD *)v62.__r_.__value_.__l.__data_;
            v53.__r_.__value_.__r.__words[2] = *(_QWORD *)(v62.__r_.__value_.__r.__words[0] + 16);
            *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v15;
          }
          MIL::IROperation::GetOutputType(a2);
          MIL::Builder::OperationBuilder::AddOutput();
          v32 = v54;
          if (v54)
          {
            p_shared_owners = (unint64_t *)&v54->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
          v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
          if ((char)v10[39] < 0)
            std::string::__init_copy_ctor_external(&v51, *((const std::string::value_type **)v10 + 2), *((_QWORD *)v10 + 3));
          else
            v51 = *(std::string *)(v10 + 16);
          v35 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
          v50 = v35;
          if (v35)
          {
            v36 = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          MIL::Builder::OperationBuilder::SetAttribute();
          v38 = v52;
          if (v52)
          {
            v39 = (unint64_t *)&v52->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          if (v50)
          {
            v41 = (unint64_t *)&v50->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v51.__r_.__value_.__l.__data_);
          *(_DWORD *)a3 = 0;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
          size = (std::__shared_weak_count *)v61.__r_.__value_.__l.__size_;
          if (v61.__r_.__value_.__l.__size_)
          {
            v44 = (unint64_t *)(v61.__r_.__value_.__l.__size_ + 8);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          goto LABEL_71;
        }
        *(_DWORD *)a3 = 4;
        v46 = a3 + 8;
        Location = MIL::IRObject::GetLocation(a2);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)Location + 24))(&v62);
        v48 = std::string::insert(&v62, 0, "DTypes not compatible with live tensors are not implemented in ANEFlow const. Violation at ");
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        *(_QWORD *)(v46 + 16) = *((_QWORD *)&v48->__r_.__value_.__l + 2);
        *(_OWORD *)v46 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_71:
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)&v63);
          return;
        }
        v31 = (void *)v62.__r_.__value_.__r.__words[0];
LABEL_38:
        operator delete(v31);
        goto LABEL_71;
      }
      *(_DWORD *)a3 = 4;
      v16 = a3 + 8;
      std::string::basic_string[abi:ne180100]<0>(&v60, "val");
      v24 = std::string::insert(&v60, 0, "Only tensors are handled for const attribute ");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v26 = std::string::append(&v61, ". Violated at ");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v28 = MIL::IRObject::GetLocation(a2);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v28 + 24))(&v57);
      if ((v59 & 0x80u) == 0)
        v22 = (const std::string::value_type *)&v57;
      else
        v22 = (const std::string::value_type *)v57;
      if ((v59 & 0x80u) == 0)
        v23 = v59;
      else
        v23 = v58;
    }
    else
    {
      *(_DWORD *)a3 = 4;
      v16 = a3 + 8;
      std::string::basic_string[abi:ne180100]<0>(&v60, "val");
      v17 = std::string::insert(&v60, 0, "Const expected to have exactly one bound attribute named ");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v61, ". Violated at ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = MIL::IRObject::GetLocation(a2);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v21 + 24))(&v57);
      if ((v59 & 0x80u) == 0)
        v22 = (const std::string::value_type *)&v57;
      else
        v22 = (const std::string::value_type *)v57;
      if ((v59 & 0x80u) == 0)
        v23 = v59;
      else
        v23 = v58;
    }
    v29 = std::string::append(&v62, v22, v23);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    *(_QWORD *)(v16 + 16) = *((_QWORD *)&v29->__r_.__value_.__l + 2);
    *(_OWORD *)v16 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if ((char)v59 < 0)
      operator delete(v57);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_71;
    v31 = (void *)v60.__r_.__value_.__r.__words[0];
    goto LABEL_38;
  }
  *(_DWORD *)a3 = 4;
  v6 = MIL::IRObject::GetLocation(a2);
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v6 + 24))(&v63);
  v7 = std::string::insert(&v63, 0, "Const not expected to have bound parameters. Violated at ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 8) = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
}

void sub_20692B630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 89) < 0)
    operator delete(*(void **)(v45 - 112));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v45 - 88);
  _Unwind_Resume(a1);
}

void sub_20692B758()
{
  uint64_t v0;

  if (*(char *)(v0 - 65) < 0)
    operator delete(*(void **)(v0 - 88));
  JUMPOUT(0x20692B750);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_20692B7CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20692BA4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20692BAC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return this;
}

_QWORD *MIL::ANEMachineIR::Interpreter::ReshapeCpu::Run@<X0>(MIL::IROperation *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t InterpretedTensorValue;
  uint64_t v7;
  uint64_t OutputType;
  ANEMachineIR::Utils *v9;
  const MIL::IRTensorValueType *v10;
  ANEMachineIR::Utils *v11;
  size_t NumberOfElementsFromStaticTensorShape;
  uint64_t v13;
  unint64_t k;
  _WORD *v15;
  _WORD *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int16 v26;
  unsigned __int8 *v27;
  char *v28;
  int v29;
  uint64_t v30;
  unint64_t i;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unint64_t j;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  size_t v56;
  char *v57;
  char *v58;
  char *v59;
  char v60;
  unsigned __int8 *v61;
  void **v62;
  uint64_t v64;
  uint64_t Data;
  uint64_t v66;
  void *__p;
  char *v68;
  char *v69;
  void **p_Data;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  v64 = (uint64_t)a2;
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  v7 = InterpretedTensorValue;
  if ((SHIBYTE(v69) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue)
      goto LABEL_3;
LABEL_28:
    v28 = "Value is not a tensor.";
    goto LABEL_30;
  }
  operator delete(__p);
  if (!v7)
    goto LABEL_28;
LABEL_3:
  OutputType = MIL::IROperation::GetOutputType(a1);
  v9 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)OutputType + 24))(OutputType);
  if (!v9)
  {
    v28 = "Output type is not a tensor.";
    goto LABEL_30;
  }
  v11 = v9;
  NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(v9, v10);
  if ((*(unsigned int (**)(ANEMachineIR::Utils *))(*(_QWORD *)v11 + 88))(v11) != 4)
  {
    if ((*(unsigned int (**)(ANEMachineIR::Utils *))(*(_QWORD *)v11 + 88))(v11) == 14)
    {
      Data = MIL::IRTensorValue::GetDataView<unsigned char>();
      v66 = v30;
      v68 = 0;
      v69 = 0;
      __p = 0;
      std::vector<unsigned char>::reserve((unint64_t *)&__p, NumberOfElementsFromStaticTensorShape);
      if (NumberOfElementsFromStaticTensorShape)
      {
        for (i = 0; i != NumberOfElementsFromStaticTensorShape; ++i)
        {
          v32 = (char *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(&Data, i);
          v33 = v32;
          v34 = v68;
          if (v68 >= v69)
          {
            v36 = (unint64_t)__p;
            v37 = v68 - (_BYTE *)__p;
            v38 = v68 - (_BYTE *)__p + 1;
            if (v38 < 0)
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            v39 = v69 - (_BYTE *)__p;
            if (2 * (v69 - (_BYTE *)__p) > (unint64_t)v38)
              v38 = 2 * v39;
            if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
              v40 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (v40)
              v41 = (char *)operator new(v40);
            else
              v41 = 0;
            v42 = &v41[v37];
            v41[v37] = *v33;
            v35 = (uint64_t)&v41[v37 + 1];
            if (v34 != (char *)v36)
            {
              v43 = &v34[~v36];
              do
              {
                v44 = *--v34;
                (v43--)[(_QWORD)v41] = v44;
              }
              while (v34 != (char *)v36);
              v34 = (char *)__p;
              v42 = v41;
            }
            __p = v42;
            v68 = &v41[v37 + 1];
            v69 = &v41[v40];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *v68 = *v32;
            v35 = (uint64_t)(v34 + 1);
          }
          v68 = (char *)v35;
        }
      }
      (*(void (**)(uint64_t *__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&Data, a1);
      v45 = (unsigned __int8 *)Data;
      if (v66 == Data)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      MIL::IRTensorValueType::MakeUInt8Value();
      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v64, v45, (uint64_t *)&p_Data);
      goto LABEL_77;
    }
    if ((*(unsigned int (**)(ANEMachineIR::Utils *))(*(_QWORD *)v11 + 88))(v11) == 9)
    {
      Data = MIL::IRTensorValue::GetDataView<signed char>();
      v66 = v46;
      v68 = 0;
      v69 = 0;
      __p = 0;
      std::vector<unsigned char>::reserve((unint64_t *)&__p, NumberOfElementsFromStaticTensorShape);
      if (NumberOfElementsFromStaticTensorShape)
      {
        for (j = 0; j != NumberOfElementsFromStaticTensorShape; ++j)
        {
          v48 = (char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&Data, j);
          v49 = v48;
          v50 = v68;
          if (v68 >= v69)
          {
            v52 = (unint64_t)__p;
            v53 = v68 - (_BYTE *)__p;
            v54 = v68 - (_BYTE *)__p + 1;
            if (v54 < 0)
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            v55 = v69 - (_BYTE *)__p;
            if (2 * (v69 - (_BYTE *)__p) > (unint64_t)v54)
              v54 = 2 * v55;
            if (v55 >= 0x3FFFFFFFFFFFFFFFLL)
              v56 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v56 = v54;
            if (v56)
              v57 = (char *)operator new(v56);
            else
              v57 = 0;
            v58 = &v57[v53];
            v57[v53] = *v49;
            v51 = (uint64_t)&v57[v53 + 1];
            if (v50 != (char *)v52)
            {
              v59 = &v50[~v52];
              do
              {
                v60 = *--v50;
                (v59--)[(_QWORD)v57] = v60;
              }
              while (v50 != (char *)v52);
              v50 = (char *)__p;
              v58 = v57;
            }
            __p = v58;
            v68 = &v57[v53 + 1];
            v69 = &v57[v56];
            if (v50)
              operator delete(v50);
          }
          else
          {
            *v68 = *v48;
            v51 = (uint64_t)(v50 + 1);
          }
          v68 = (char *)v51;
        }
      }
      (*(void (**)(uint64_t *__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&Data, a1);
      v61 = (unsigned __int8 *)Data;
      if (v66 == Data)
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      MIL::IRTensorValueType::MakeInt8Value();
      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v64, v61, (uint64_t *)&p_Data);
      goto LABEL_77;
    }
    v28 = "Unsupported dtype.";
LABEL_30:
    v29 = 3;
    goto LABEL_82;
  }
  Data = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
  v66 = v13;
  v68 = 0;
  v69 = 0;
  __p = 0;
  std::vector<MIL::Fp16>::reserve(&__p, NumberOfElementsFromStaticTensorShape);
  if (NumberOfElementsFromStaticTensorShape)
  {
    for (k = 0; k != NumberOfElementsFromStaticTensorShape; ++k)
    {
      v15 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&Data, k);
      v16 = v15;
      v17 = v68;
      if (v68 >= v69)
      {
        v19 = (char *)__p;
        v20 = v68 - (_BYTE *)__p;
        if (v68 - (_BYTE *)__p <= -3)
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        v21 = v20 >> 1;
        if (v69 - (_BYTE *)__p <= (unint64_t)((v20 >> 1) + 1))
          v22 = v21 + 1;
        else
          v22 = v69 - (_BYTE *)__p;
        if ((unint64_t)(v69 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
          v23 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v69, v23);
          v19 = (char *)__p;
          v17 = v68;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[2 * v21];
        *(_WORD *)v25 = *v16;
        v18 = v25 + 2;
        while (v17 != v19)
        {
          v26 = *((_WORD *)v17 - 1);
          v17 -= 2;
          *((_WORD *)v25 - 1) = v26;
          v25 -= 2;
        }
        __p = v25;
        v68 = v18;
        v69 = &v24[2 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_WORD *)v68 = *v15;
        v18 = v17 + 2;
      }
      v68 = v18;
    }
  }
  (*(void (**)(uint64_t *__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&Data, a1);
  v27 = (unsigned __int8 *)Data;
  if (v66 == Data)
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  MIL::IRTensorValueType::MakeFloat16Value();
  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v64, v27, (uint64_t *)&p_Data);
LABEL_77:
  v62 = p_Data;
  p_Data = 0;
  if (v62)
    (*((void (**)(void **))*v62 + 1))(v62);
  p_Data = (void **)&Data;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_Data);
  if (__p)
  {
    v68 = (char *)__p;
    operator delete(__p);
  }
  v29 = 0;
  v28 = (char *)&unk_2069A5097;
LABEL_82:
  *(_DWORD *)a3 = v29;
  return std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v28);
}

void sub_20692C0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  uint64_t v20;

  v20 = (uint64_t)a19;
  a19 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  a19 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::ReshapeCpu::~ReshapeCpu(MIL::ANEMachineIR::Interpreter::ReshapeCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

unint64_t MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_24BFE70B8, MEMORY[0x24BEDAAD0]);
  }
  return *a1 + a2;
}

void sub_20692C1D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Util::Span<signed char const,18446744073709551615ul>::At(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_24BFE70B8, MEMORY[0x24BEDAAD0]);
  }
  return *a1 + a2;
}

void sub_20692C248(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::PeAvgPoolCpu::Run(MIL::IROperation *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void *v20;
  uint64_t InterpretedTensorValue;
  uint64_t v22;
  MIL::IRValue *ParameterValue;
  std::vector<int>::size_type v24;
  unint64_t v25;
  _DWORD *v26;
  std::string::size_type v27;
  MIL::IRValue *v28;
  std::vector<int>::size_type v29;
  unint64_t v30;
  int *v31;
  std::vector<int>::pointer begin;
  MIL::Fp16 *v33;
  __int16 v34;
  uint64_t v35;
  __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  int v43;
  MIL::IRValueType *OutputType;
  uint64_t v45;
  MIL::IRValueType *v46;
  uint64_t v47;
  ANEMachineIR::Utils *v48;
  const MIL::IRTensorValueType *v49;
  MIL::IRValueType *v50;
  ANEMachineIR::Utils *v51;
  const MIL::IRTensorValueType *v52;
  __int16 v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  std::string::size_type v59;
  uint64_t v60;
  std::string *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unsigned __int8 *v89;
  MIL::IRValueType *v90;
  void **v91;
  _QWORD *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  MIL::IRValueType *v95;
  void **v96;
  _QWORD *v97;
  uint64_t v98;
  unsigned __int8 *v99;
  MIL::IRValueType *v100;
  void **v101;
  _QWORD *v102;
  uint64_t v103;
  unsigned __int8 *v104;
  MIL::IRValueType *v105;
  void **v106;
  _QWORD *v107;
  uint64_t v108;
  unsigned __int8 *v109;
  MIL::IRValueType *v110;
  void **v111;
  _QWORD *v112;
  uint64_t v113;
  unsigned __int8 *v114;
  MIL::IRValueType *v115;
  void **v116;
  _QWORD *v117;
  uint64_t v118;
  unsigned __int8 *v119;
  MIL::IRValueType *v120;
  void **v121;
  _QWORD *v122;
  uint64_t v123;
  unsigned __int8 *v124;
  MIL::IRValueType *v125;
  void **v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned __int8 *v129;
  MIL::IRValueType *v130;
  void **v131;
  std::string *v132;
  uint64_t v133;
  char v134;
  unint64_t v135;
  char v136;
  int v137;
  int v138;
  uint64_t v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  void *__p[3];
  std::string v143;
  uint64_t v144;
  _DWORD v145[6];
  void *v146[3];
  void *v147;
  _BYTE *v148;
  std::vector<int> v149;
  uint64_t v150;
  std::vector<int>::size_type v151;
  uint64_t Data;
  std::vector<int>::size_type __n;
  std::string v154;
  void **v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  _BYTE v160[24];
  _BYTE *v161;
  _BYTE v162[24];
  _BYTE *v163;
  _BYTE v164[24];
  _BYTE *v165;
  _BYTE v166[24];
  _BYTE *v167;
  _BYTE v168[24];
  _BYTE *v169;
  _BYTE v170[24];
  _BYTE *v171;
  _BYTE v172[24];
  _BYTE *v173;
  std::string v174;
  std::string *v175;
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(v6 + 8) != 11)
      goto LABEL_10;
    v6 = *(_QWORD *)v6;
  }
  else if (v7 != 11)
  {
    goto LABEL_10;
  }
  if (*(_QWORD *)v6 != 0x705F6776615F6570 || *(_QWORD *)(v6 + 3) != 0x6C6F6F705F677661)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    v9 = a3 + 8;
    std::string::basic_string[abi:ne180100]<0>(&v154, "pe_avg_pool");
    v10 = std::string::insert(&v154, 0, "Expected '");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v174.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v174, "' op. Got ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v143.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
    v15 = *(char *)(v14 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)v14;
    else
      v16 = *(const std::string::value_type **)v14;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v14 + 23);
    else
      v17 = *(_QWORD *)(v14 + 8);
    v18 = std::string::append(&v143, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(_QWORD *)(v9 + 16) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)v9 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v174.__r_.__value_.__l.__data_);
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v154.__r_.__value_.__r.__words[0];
LABEL_22:
      operator delete(v20);
      return;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v143, "x");
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v143);
  v22 = InterpretedTensorValue;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v143.__r_.__value_.__l.__data_);
    if (v22)
    {
LABEL_26:
      std::string::basic_string[abi:ne180100]<0>(&v143, "kernel_sizes");
      ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(ParameterValue);
      Data = MIL::IRTensorValue::GetDataView<int>();
      __n = v24;
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v143.__r_.__value_.__l.__data_);
        v24 = __n;
      }
      std::vector<int>::vector((std::vector<int> *)&v154, v24);
      if (v154.__r_.__value_.__l.__size_ != v154.__r_.__value_.__r.__words[0])
      {
        v25 = 0;
        do
        {
          v26 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v25);
          v27 = v154.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v154.__r_.__value_.__r.__words[0] + 4 * v25++) = *v26;
        }
        while (v25 < (uint64_t)(v154.__r_.__value_.__l.__size_ - v27) >> 2);
      }
      std::string::basic_string[abi:ne180100]<0>(&v143, "strides");
      v28 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(v28);
      v150 = MIL::IRTensorValue::GetDataView<int>();
      v151 = v29;
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v143.__r_.__value_.__l.__data_);
        v29 = v151;
      }
      std::vector<int>::vector(&v149, v29);
      if (v149.__end_ != v149.__begin_)
      {
        v30 = 0;
        do
        {
          v31 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v150, v30);
          begin = v149.__begin_;
          v149.__begin_[v30++] = *v31;
        }
        while (v30 < v149.__end_ - begin);
      }
      v33 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v143, "post_scale");
      v34 = MIL::Fp16::FromFloat(v33, 1.0);
      v35 = MIL::IROperation::TryGetParameterValue();
      if (v35)
      {
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35))
        {
          v36 = (__int16 *)MEMORY[0x20BCFEE7C]();
          if (v36)
            v34 = *v36;
        }
      }
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v143.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v143, "custom_pads");
      v37 = MIL::IROperation::TryGetParameterValue();
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v143.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v143, "include_pads");
      v38 = MIL::IROperation::TryGetParameterValue();
      v136 = v38
          && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38)
          && (v39 = (_BYTE *)MEMORY[0x20BCFEEA0]()) != 0
          && *v39 != 0;
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v143.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v143, "pre_relu");
      v40 = MIL::IROperation::TryGetParameterValue();
      v134 = v40
          && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40)
          && (v41 = (_BYTE *)MEMORY[0x20BCFEEA0]()) != 0
          && *v41 != 0;
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v143.__r_.__value_.__l.__data_);
      v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
      v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 88))(v42);
      OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      v45 = MIL::IRValueType::AsTensorType(OutputType);
      v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 88))(v45);
      v46 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      v47 = MIL::IRValueType::AsTensorType(v46);
      v135 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
      v48 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
      ANEMachineIR::Utils::GetStaticTensorShape(v48, v49, (uint64_t)&v147);
      v50 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      v51 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v50);
      ANEMachineIR::Utils::GetStaticTensorShape(v51, v52, (uint64_t)v146);
      v138 = v43;
      v139 = (uint64_t)a2;
      if (!v37)
      {
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v60 = 0;
LABEL_70:
        v145[0] = v37;
        v145[1] = v60;
        v145[2] = v66;
        v145[3] = v65;
        v145[4] = v64;
        v145[5] = v63;
        if (v37 || v60 || v66 || v65 || v64 || v63)
        {
          *(_DWORD *)a3 = 3;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "Unimplemented pad: rdar://84906152");
          goto LABEL_228;
        }
        *(_OWORD *)&v143.__r_.__value_.__r.__words[1] = 0uLL;
        v144 = 0;
        MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v143, (uint64_t (***)())&v174);
        if (LODWORD(v143.__r_.__value_.__l.__data_))
        {
          *(_DWORD *)a3 = v143.__r_.__value_.__l.__data_;
          *(_OWORD *)(a3 + 8) = *(_OWORD *)&v143.__r_.__value_.__r.__words[1];
          *(_QWORD *)(a3 + 24) = v144;
          *(_OWORD *)&v143.__r_.__value_.__r.__words[1] = 0uLL;
          v144 = 0;
          goto LABEL_221;
        }
        if (v138 != 14)
        {
          if (v138 != 9)
          {
            if (v138 != 4)
            {
              v74 = "Unimplemented input dtype";
LABEL_105:
              *(_DWORD *)a3 = 3;
              std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), v74);
              goto LABEL_221;
            }
            if (v137 != 14)
            {
              if (v137 != 9)
              {
                if (v137 == 4)
                {
                  v68 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                  v69 = (uint64_t)v175;
                  if (v175)
                  {
                    if (v175 == &v174)
                    {
                      v173 = v172;
                      (*(void (**)(std::string *, _BYTE *))(v174.__r_.__value_.__r.__words[0] + 24))(&v174, v172);
LABEL_211:
                      v127 = v173;
                      if (v173 == v172)
                      {
                        v128 = 4;
                        v127 = v172;
                      }
                      else
                      {
                        if (!v173)
                        {
LABEL_216:
                          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v140, a1);
                          v129 = v140;
                          if (v141 == v140)
                            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                          v130 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                          MIL::IRValueType::AsTensorType(v130);
                          MIL::IRTensorValueType::MakeFloat16Value();
                          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v139, v129, (uint64_t *)&v155);
                          v131 = v155;
                          v155 = 0;
                          if (v131)
                            (*((void (**)(void **))*v131 + 1))(v131);
LABEL_219:
                          v155 = (void **)&v140;
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v155);
                          *(_DWORD *)a3 = 0;
                          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), (char *)&unk_2069A5097);
                          if (__p[0])
                          {
                            __p[1] = __p[0];
                            operator delete(__p[0]);
                          }
LABEL_221:
                          v132 = v175;
                          if (v175 == &v174)
                          {
                            v133 = 4;
                            v132 = &v174;
                          }
                          else
                          {
                            if (!v175)
                              goto LABEL_226;
                            v133 = 5;
                          }
                          (*(void (**)(void))(v132->__r_.__value_.__r.__words[0] + 8 * v133))();
LABEL_226:
                          if (SHIBYTE(v144) < 0)
                            operator delete((void *)v143.__r_.__value_.__l.__size_);
LABEL_228:
                          if (v146[0])
                          {
                            v146[1] = v146[0];
                            operator delete(v146[0]);
                          }
                          if (v147)
                          {
                            v148 = v147;
                            operator delete(v147);
                          }
                          if (v149.__begin_)
                          {
                            v149.__end_ = v149.__begin_;
                            operator delete(v149.__begin_);
                          }
                          v20 = (void *)v154.__r_.__value_.__r.__words[0];
                          if (v154.__r_.__value_.__r.__words[0])
                          {
                            v154.__r_.__value_.__l.__size_ = v154.__r_.__value_.__r.__words[0];
                            goto LABEL_22;
                          }
                          return;
                        }
                        v128 = 5;
                      }
                      (*(void (**)(void))(*v127 + 8 * v128))();
                      goto LABEL_216;
                    }
                    v69 = (*(uint64_t (**)(std::string *))(v175->__r_.__value_.__r.__words[0] + 16))(v175);
                  }
                  v173 = (_BYTE *)v69;
                  goto LABEL_211;
                }
                goto LABEL_104;
              }
              v81 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              v82 = (uint64_t)v175;
              if (v175)
              {
                if (v175 == &v174)
                {
                  v169 = v168;
                  (*(void (**)(std::string *, _BYTE *))(v174.__r_.__value_.__r.__words[0] + 24))(&v174, v168);
LABEL_171:
                  v107 = v169;
                  if (v169 == v168)
                  {
                    v108 = 4;
                    v107 = v168;
                  }
                  else
                  {
                    if (!v169)
                    {
LABEL_176:
                      (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v140, a1);
                      v109 = v140;
                      if (v141 == v140)
                        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                      v110 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                      MIL::IRValueType::AsTensorType(v110);
                      MIL::IRTensorValueType::MakeInt8Value();
                      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v139, v109, (uint64_t *)&v155);
                      v111 = v155;
                      v155 = 0;
                      if (v111)
                        (*((void (**)(void **))*v111 + 1))(v111);
                      goto LABEL_219;
                    }
                    v108 = 5;
                  }
                  (*(void (**)(void))(*v107 + 8 * v108))();
                  goto LABEL_176;
                }
                v82 = (*(uint64_t (**)(std::string *))(v175->__r_.__value_.__r.__words[0] + 16))(v175);
              }
              v169 = (_BYTE *)v82;
              goto LABEL_171;
            }
            v85 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            v86 = (uint64_t)v175;
            if (v175)
            {
              if (v175 == &v174)
              {
                v171 = v170;
                (*(void (**)(std::string *, _BYTE *))(v174.__r_.__value_.__r.__words[0] + 24))(&v174, v170);
LABEL_201:
                v122 = v171;
                if (v171 == v170)
                {
                  v123 = 4;
                  v122 = v170;
                }
                else
                {
                  if (!v171)
                  {
LABEL_206:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v140, a1);
                    v124 = v140;
                    if (v141 == v140)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v125 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v125);
                    MIL::IRTensorValueType::MakeUInt8Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v139, v124, (uint64_t *)&v155);
                    v126 = v155;
                    v155 = 0;
                    if (v126)
                      (*((void (**)(void **))*v126 + 1))(v126);
                    goto LABEL_219;
                  }
                  v123 = 5;
                }
                (*(void (**)(void))(*v122 + 8 * v123))();
                goto LABEL_206;
              }
              v86 = (*(uint64_t (**)(std::string *))(v175->__r_.__value_.__r.__words[0] + 16))(v175);
            }
            v171 = (_BYTE *)v86;
            goto LABEL_201;
          }
          if (v137 != 14)
          {
            if (v137 != 9)
            {
              if (v137 == 4)
              {
                v70 = MIL::IRTensorValue::GetDataView<signed char>();
                v71 = (uint64_t)v175;
                if (v175)
                {
                  if (v175 == &v174)
                  {
                    v161 = v160;
                    (*(void (**)(std::string *, _BYTE *))(v174.__r_.__value_.__r.__words[0] + 24))(&v174, v160);
LABEL_161:
                    v102 = v161;
                    if (v161 == v160)
                    {
                      v103 = 4;
                      v102 = v160;
                    }
                    else
                    {
                      if (!v161)
                      {
LABEL_166:
                        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v140, a1);
                        v104 = v140;
                        if (v141 == v140)
                          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                        v105 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                        MIL::IRValueType::AsTensorType(v105);
                        MIL::IRTensorValueType::MakeFloat16Value();
                        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v139, v104, (uint64_t *)&v155);
                        v106 = v155;
                        v155 = 0;
                        if (v106)
                          (*((void (**)(void **))*v106 + 1))(v106);
                        goto LABEL_219;
                      }
                      v103 = 5;
                    }
                    (*(void (**)(void))(*v102 + 8 * v103))();
                    goto LABEL_166;
                  }
                  v71 = (*(uint64_t (**)(std::string *))(v175->__r_.__value_.__r.__words[0] + 16))(v175);
                }
                v161 = (_BYTE *)v71;
                goto LABEL_161;
              }
LABEL_104:
              v74 = "Unimplemented output dtype";
              goto LABEL_105;
            }
            v75 = MIL::IRTensorValue::GetDataView<signed char>();
            v76 = (uint64_t)v175;
            if (v175)
            {
              if (v175 == &v174)
              {
                v157 = v156;
                (*(void (**)(std::string *, _BYTE *))(v174.__r_.__value_.__r.__words[0] + 24))(&v174, v156);
LABEL_131:
                v87 = v157;
                if (v157 == v156)
                {
                  v88 = 4;
                  v87 = v156;
                }
                else
                {
                  if (!v157)
                  {
LABEL_136:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v140, a1);
                    v89 = v140;
                    if (v141 == v140)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v90 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v90);
                    MIL::IRTensorValueType::MakeInt8Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v139, v89, (uint64_t *)&v155);
                    v91 = v155;
                    v155 = 0;
                    if (v91)
                      (*((void (**)(void **))*v91 + 1))(v91);
                    goto LABEL_219;
                  }
                  v88 = 5;
                }
                (*(void (**)(void))(*v87 + 8 * v88))();
                goto LABEL_136;
              }
              v76 = (*(uint64_t (**)(std::string *))(v175->__r_.__value_.__r.__words[0] + 16))(v175);
            }
            v157 = (_BYTE *)v76;
            goto LABEL_131;
          }
          v77 = MIL::IRTensorValue::GetDataView<signed char>();
          v78 = (uint64_t)v175;
          if (v175)
          {
            if (v175 == &v174)
            {
              v159 = v158;
              (*(void (**)(std::string *, _BYTE *))(v174.__r_.__value_.__r.__words[0] + 24))(&v174, v158);
LABEL_141:
              v92 = v159;
              if (v159 == v158)
              {
                v93 = 4;
                v92 = v158;
              }
              else
              {
                if (!v159)
                {
LABEL_146:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v140, a1);
                  v94 = v140;
                  if (v141 == v140)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v95 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v95);
                  MIL::IRTensorValueType::MakeUInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v139, v94, (uint64_t *)&v155);
                  v96 = v155;
                  v155 = 0;
                  if (v96)
                    (*((void (**)(void **))*v96 + 1))(v96);
                  goto LABEL_219;
                }
                v93 = 5;
              }
              (*(void (**)(void))(*v92 + 8 * v93))();
              goto LABEL_146;
            }
            v78 = (*(uint64_t (**)(std::string *))(v175->__r_.__value_.__r.__words[0] + 16))(v175);
          }
          v159 = (_BYTE *)v78;
          goto LABEL_141;
        }
        if (v137 != 14)
        {
          if (v137 != 9)
          {
            if (v137 != 4)
              goto LABEL_104;
            v72 = MIL::IRTensorValue::GetDataView<unsigned char>();
            v73 = (uint64_t)v175;
            if (v175)
            {
              if (v175 == &v174)
              {
                v167 = v166;
                (*(void (**)(std::string *, _BYTE *))(v174.__r_.__value_.__r.__words[0] + 24))(&v174, v166);
LABEL_191:
                v117 = v167;
                if (v167 == v166)
                {
                  v118 = 4;
                  v117 = v166;
                }
                else
                {
                  if (!v167)
                  {
LABEL_196:
                    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v140, a1);
                    v119 = v140;
                    if (v141 == v140)
                      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                    v120 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                    MIL::IRValueType::AsTensorType(v120);
                    MIL::IRTensorValueType::MakeFloat16Value();
                    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v139, v119, (uint64_t *)&v155);
                    v121 = v155;
                    v155 = 0;
                    if (v121)
                      (*((void (**)(void **))*v121 + 1))(v121);
                    goto LABEL_219;
                  }
                  v118 = 5;
                }
                (*(void (**)(void))(*v117 + 8 * v118))();
                goto LABEL_196;
              }
              v73 = (*(uint64_t (**)(std::string *))(v175->__r_.__value_.__r.__words[0] + 16))(v175);
            }
            v167 = (_BYTE *)v73;
            goto LABEL_191;
          }
          v79 = MIL::IRTensorValue::GetDataView<unsigned char>();
          v80 = (uint64_t)v175;
          if (v175)
          {
            if (v175 == &v174)
            {
              v163 = v162;
              (*(void (**)(std::string *, _BYTE *))(v174.__r_.__value_.__r.__words[0] + 24))(&v174, v162);
LABEL_151:
              v97 = v163;
              if (v163 == v162)
              {
                v98 = 4;
                v97 = v162;
              }
              else
              {
                if (!v163)
                {
LABEL_156:
                  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v140, a1);
                  v99 = v140;
                  if (v141 == v140)
                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                  v100 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                  MIL::IRValueType::AsTensorType(v100);
                  MIL::IRTensorValueType::MakeInt8Value();
                  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v139, v99, (uint64_t *)&v155);
                  v101 = v155;
                  v155 = 0;
                  if (v101)
                    (*((void (**)(void **))*v101 + 1))(v101);
                  goto LABEL_219;
                }
                v98 = 5;
              }
              (*(void (**)(void))(*v97 + 8 * v98))();
              goto LABEL_156;
            }
            v80 = (*(uint64_t (**)(std::string *))(v175->__r_.__value_.__r.__words[0] + 16))(v175);
          }
          v163 = (_BYTE *)v80;
          goto LABEL_151;
        }
        v83 = MIL::IRTensorValue::GetDataView<unsigned char>();
        v84 = (uint64_t)v175;
        if (v175)
        {
          if (v175 == &v174)
          {
            v165 = v164;
            (*(void (**)(std::string *, _BYTE *))(v174.__r_.__value_.__r.__words[0] + 24))(&v174, v164);
LABEL_181:
            v112 = v165;
            if (v165 == v164)
            {
              v113 = 4;
              v112 = v164;
            }
            else
            {
              if (!v165)
              {
LABEL_186:
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(_QWORD *)a1 + 200))(&v140, a1);
                v114 = v140;
                if (v141 == v140)
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                v115 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v115);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v139, v114, (uint64_t *)&v155);
                v116 = v155;
                v155 = 0;
                if (v116)
                  (*((void (**)(void **))*v116 + 1))(v116);
                goto LABEL_219;
              }
              v113 = 5;
            }
            (*(void (**)(void))(*v112 + 8 * v113))();
            goto LABEL_186;
          }
          v84 = (*(uint64_t (**)(std::string *))(v175->__r_.__value_.__r.__words[0] + 16))(v175);
        }
        v165 = (_BYTE *)v84;
        goto LABEL_181;
      }
      v53 = v34;
      v55 = v147;
      v54 = v148;
      MIL::IRValue::AsTensor((MIL::IRValue *)v37);
      v56 = MIL::IRTensorValue::GetDataView<int>();
      v57 = (v54 - v55) >> 3;
      v58 = v57 - 2;
      v143.__r_.__value_.__r.__words[0] = v56;
      v143.__r_.__value_.__l.__size_ = v59;
      if (v57 == 5)
      {
        v37 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v143, 0);
        v60 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v143, 1uLL);
      }
      else
      {
        if (v58 <= 1)
        {
          v37 = 0;
          v60 = 0;
          v65 = 0;
          v66 = 0;
          v67 = 2 * v58;
          goto LABEL_69;
        }
        v37 = 0;
        v60 = 0;
      }
      v67 = 2 * v58;
      v66 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v143, 2 * v58 - 4);
      v65 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v143, 2 * v58 - 3);
LABEL_69:
      v64 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v143, v67 - 2);
      v63 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v143, v67 - 1);
      v34 = v53;
      goto LABEL_70;
    }
  }
  else if (InterpretedTensorValue)
  {
    goto LABEL_26;
  }
  *(_DWORD *)a3 = 2;
  std::string::basic_string[abi:ne180100]<0>(&v143, "x");
  v61 = std::string::insert(&v143, 0, "No value for ");
  v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v61->__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 8) = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
  {
    v20 = (void *)v143.__r_.__value_.__r.__words[0];
    goto LABEL_22;
  }
}

void sub_20692D62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  uint64_t v46;
  _QWORD *v48;
  uint64_t v49;

  if (__p)
    operator delete(__p);
  v48 = *(_QWORD **)(v46 - 104);
  if (v48 == (_QWORD *)(v46 - 128))
  {
    v49 = 4;
    v48 = (_QWORD *)(v46 - 128);
  }
  else
  {
    if (!v48)
      goto LABEL_8;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_8:
  if (a29 < 0)
    operator delete(a24);
  if (a33)
    operator delete(a33);
  if (a36)
    operator delete(a36);
  if (a39)
    operator delete(a39);
  if (a46)
    operator delete(a46);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, _QWORD *a9@<X8>, char a10, char a11, uint64_t a12)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64x2_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t k;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  float v47;
  float v48;
  float v49;
  long double v50;
  double v51;
  float v52;
  float v53;
  long double v54;
  double v55;
  float v56;
  float v57;
  long double v58;
  double v59;
  long double v60;
  double v61;
  float v62;
  long double v63;
  double v64;
  float v65;
  float v66;
  long double v67;
  double v68;
  float v69;
  float v70;
  long double v71;
  double v72;
  long double v73;
  double v74;
  float v75;
  float v76;
  long double v77;
  double v78;
  float v79;
  float v80;
  float v81;
  long double v82;
  double v83;
  uint64_t v84;
  MIL::Fp16 *v85;
  float v86;
  __int16 v87;
  _QWORD *v88;
  uint64_t v89;
  const char *v90;
  int v91;
  const char *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t i;
  unint64_t v102;
  uint64_t j;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v109;
  int v110[4];
  float v111;
  __int128 v112;
  float v113;
  void *__p;
  void *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  __int16 v120;
  int __e;
  _QWORD v122[3];
  _QWORD *v123;
  int64x2_t __src;
  char v125[8];
  int64x2_t *p_src;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  v120 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v90 = "x_rank == o_shape.size()";
    v91 = 64;
    goto LABEL_97;
  }
  v20 = v19 - 2;
  v21 = *(_DWORD **)a5;
  if (v19 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v90 = "kernel_sizes.size() == num_spatial_dims";
    v91 = 65;
    goto LABEL_97;
  }
  v22 = *(_DWORD **)a6;
  if (v20 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v90 = "strides.size() == num_spatial_dims";
    v91 = 66;
LABEL_97:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v91, v90);
  }
  if (v19 == 5)
  {
    if (*v21 == 1)
    {
      if (*v22 == 1)
      {
        v23 = v22 + 2;
        v96 = (int)v22[1];
        v24 = v21 + 2;
        v105 = (int)v21[1];
        goto LABEL_11;
      }
      v92 = "sz == 1";
      v93 = 77;
    }
    else
    {
      v92 = "kd == 1";
      v93 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v93, v92);
  }
  v25 = 4 * v19;
  if (v20 <= 1)
  {
    v28 = v25 - 12;
    v24 = (_DWORD *)((char *)v21 + v28);
    v23 = (_DWORD *)((char *)v22 + v28);
    v105 = 1;
    v96 = 1;
  }
  else
  {
    v26 = v25 - 16;
    v105 = (int)v21[(unint64_t)v25 / 4 - 4];
    v27 = v25 - 12;
    v24 = (_DWORD *)((char *)v21 + v27);
    v96 = *(int *)((char *)v22 + v26);
    v23 = (_DWORD *)((char *)v22 + v27);
  }
LABEL_11:
  v98 = *v23;
  v106 = *v24;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v117, v17, v18, v19);
  __p = 0;
  v115 = 0;
  v116 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v117, (uint64_t)(v117 + 8), __src.i8, v125, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v125, 2);
    v30 = v105;
  }
  else
  {
    v29 = v19 == 4;
    v30 = v105;
    if (v29)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v117, v117 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
    }
  }
  v31 = *(_QWORD *)__p;
  v32 = *((_QWORD *)__p + 1);
  v97 = *((_QWORD *)__p + 2);
  v99 = *((_QWORD *)__p + 3);
  v102 = *((_QWORD *)__p + 4);
  v104 = *((_QWORD *)v117 + 2);
  v107 = *((_QWORD *)v117 + 3);
  v122[0] = &off_24BFEB930;
  v123 = v122;
  if (!a11)
    goto LABEL_22;
  __src.i64[0] = (uint64_t)&off_24BFEB9B0;
  p_src = &__src;
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](&__src, v122);
  v33 = p_src;
  if (p_src == &__src)
  {
    v34 = 4;
    v33 = &__src;
    goto LABEL_21;
  }
  if (p_src)
  {
    v34 = 5;
LABEL_21:
    (*(void (**)(void))(v33->i64[0] + 8 * v34))();
  }
LABEL_22:
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v120);
  LODWORD(v112) = v35;
  std::vector<float>::vector(&__src, v102, &v112);
  if (!v31)
    goto LABEL_80;
  v109 = 0;
  v36 = v106;
  if (v106 <= 1)
    v36 = 1;
  v37 = v36;
  v94 = v31;
  v95 = v32;
  do
  {
    if (!v32)
      goto LABEL_79;
    v38 = 0;
    do
    {
      if (!v97)
        goto LABEL_78;
      for (i = 0; i != v97; ++i)
      {
        if (!v99)
          continue;
        v39 = 0;
        for (j = 0; j != v99; ++j)
        {
          if (!v102)
            goto LABEL_76;
          for (k = 0; k != v102; ++k)
          {
            v113 = 0.0;
            v112 = xmmword_2069A4740;
            if (!v30)
            {
              v42 = 0;
              v65 = 5.0;
              goto LABEL_65;
            }
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v41 + i * v96;
              if ((a10 & 1) == 0 && (v43 < *(int *)(a7 + 8) || v43 >= v104 - *(int *)(a7 + 12)))
                goto LABEL_61;
              v111 = 0.0;
              *(_OWORD *)v110 = xmmword_2069A4740;
              if (v106)
              {
                v44 = a7;
                v45 = 0;
                do
                {
                  v46 = v39 + v45;
                  if ((a10 & 1) != 0 || v46 >= *(int *)(v44 + 16) && v46 < v107 - *(int *)(v44 + 20))
                  {
                    LOWORD(__e) = *(_WORD *)(a1
                                           + 2
                    if (!v123)
                      std::__throw_bad_function_call[abi:ne180100]();
                    LOWORD(__e) = (*(uint64_t (**)(_QWORD *, int *))(*v123 + 48))(v123, &__e);
                    MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                    v48 = v47 * *(float *)(__src.i64[0] + 4 * k);
                    v49 = 0.0;
                    if (v48 != 0.0)
                    {
                      __e = 0;
                      v50 = frexp(v48, &__e);
                      v51 = ldexp(v50, 11);
                      v49 = ldexp(round(v51), __e - 11);
                    }
                    *(float *)&v110[v45] = v49;
                    ++v42;
                  }
                  ++v45;
                }
                while (v37 != v45);
                v52 = *(float *)v110 + *(float *)&v110[1];
                v53 = 0.0;
                a7 = v44;
                v30 = v105;
                if ((float)(*(float *)v110 + *(float *)&v110[1]) == 0.0)
                  goto LABEL_54;
              }
              else
              {
                v52 = 5.0;
              }
              __e = 0;
              v54 = frexp(v52, &__e);
              v55 = ldexp(v54, 11);
              v53 = ldexp(round(v55), __e - 11);
LABEL_54:
              v56 = 0.0;
              v57 = 0.0;
              if ((float)(v53 + *(float *)&v110[2]) != 0.0)
              {
                __e = 0;
                v58 = frexp((float)(v53 + *(float *)&v110[2]), &__e);
                v59 = ldexp(v58, 11);
                v57 = ldexp(round(v59), __e - 11);
              }
              if ((float)(*(float *)&v110[3] + v111) != 0.0)
              {
                __e = 0;
                v60 = frexp((float)(*(float *)&v110[3] + v111), &__e);
                v61 = ldexp(v60, 11);
                v56 = ldexp(round(v61), __e - 11);
              }
              v62 = 0.0;
              if ((float)(v57 + v56) != 0.0)
              {
                __e = 0;
                v63 = frexp((float)(v57 + v56), &__e);
                v64 = ldexp(v63, 11);
                v62 = ldexp(round(v64), __e - 11);
              }
              *((float *)&v112 + v41) = v62;
LABEL_61:
              ++v41;
            }
            while (v41 != v30);
            v65 = *(float *)&v112 + *((float *)&v112 + 1);
            v66 = 0.0;
            if ((float)(*(float *)&v112 + *((float *)&v112 + 1)) != 0.0)
            {
LABEL_65:
              v110[0] = 0;
              v67 = frexp(v65, v110);
              v68 = ldexp(v67, 11);
              v66 = ldexp(round(v68), v110[0] - 11);
            }
            v69 = 0.0;
            v70 = 0.0;
            if ((float)(v66 + *((float *)&v112 + 2)) != 0.0)
            {
              v110[0] = 0;
              v71 = frexp((float)(v66 + *((float *)&v112 + 2)), v110);
              v72 = ldexp(v71, 11);
              v70 = ldexp(round(v72), v110[0] - 11);
            }
            if ((float)(*((float *)&v112 + 3) + v113) != 0.0)
            {
              v110[0] = 0;
              v73 = frexp((float)(*((float *)&v112 + 3) + v113), v110);
              v74 = ldexp(v73, 11);
              v69 = ldexp(round(v74), v110[0] - 11);
            }
            v75 = v70 + v69;
            v76 = 0.0;
            if (v75 != 0.0)
            {
              v110[0] = 0;
              v77 = frexp(v75, v110);
              v78 = ldexp(v77, 11);
              v76 = ldexp(round(v78), v110[0] - 11);
            }
            LOWORD(v110[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v42];
            MIL::Fp16::GetFloat((MIL::Fp16 *)v110);
            v80 = v76 * v79;
            v81 = 0.0;
            if (v80 != 0.0)
            {
              v110[0] = 0;
              v82 = frexp(v80, v110);
              v83 = ldexp(v82, 11);
              v81 = ldexp(round(v83), v110[0] - 11);
            }
            *(float *)v110 = v81;
            v84 = *(_QWORD *)(a12 + 24);
            if (!v84)
              std::__throw_bad_function_call[abi:ne180100]();
            v85 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v84 + 48))(v84, v110);
            v87 = MIL::Fp16::FromFloat(v85, v86);
            *(_WORD *)(*a9
          }
LABEL_76:
          v39 += v98;
        }
      }
LABEL_78:
      ++v38;
      v32 = v95;
    }
    while (v38 != v95);
LABEL_79:
    ++v109;
  }
  while (v109 != v94);
LABEL_80:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  v88 = v123;
  if (v123 == v122)
  {
    v89 = 4;
    v88 = v122;
LABEL_87:
    (*(void (**)(void))(*v88 + 8 * v89))();
  }
  else if (v123)
  {
    v89 = 5;
    goto LABEL_87;
  }
  if (__p)
  {
    v115 = __p;
    operator delete(__p);
  }
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
}

void sub_20692E2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  uint64_t v37;
  void *v39;
  void *v40;

  if (__p)
    operator delete(__p);
  v39 = *(void **)(v37 - 208);
  if (v39)
  {
    *(_QWORD *)(v37 - 200) = v39;
    operator delete(v39);
  }
  v40 = *(void **)a16;
  if (*(_QWORD *)a16)
  {
    *(_QWORD *)(a16 + 8) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64x2_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t k;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  float v46;
  float v47;
  float v48;
  long double v49;
  double v50;
  float v51;
  float v52;
  long double v53;
  double v54;
  float v55;
  float v56;
  long double v57;
  double v58;
  long double v59;
  double v60;
  float v61;
  long double v62;
  double v63;
  float v64;
  float v65;
  long double v66;
  double v67;
  float v68;
  float v69;
  long double v70;
  double v71;
  long double v72;
  double v73;
  float v74;
  float v75;
  long double v76;
  double v77;
  float v78;
  float v79;
  float v80;
  long double v81;
  double v82;
  uint64_t v83;
  float v84;
  int v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  const char *v89;
  int v90;
  const char *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t i;
  unint64_t v101;
  uint64_t j;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v108;
  int v109[4];
  float v110;
  __int128 v111;
  float v112;
  void *__p;
  void *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  __int16 v119;
  int __e;
  _QWORD v121[3];
  _QWORD *v122;
  int64x2_t __src;
  char v124[8];
  int64x2_t *p_src;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v119 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v89 = "x_rank == o_shape.size()";
    v90 = 64;
    goto LABEL_106;
  }
  v20 = v19 - 2;
  v21 = *(_DWORD **)a5;
  if (v19 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v89 = "kernel_sizes.size() == num_spatial_dims";
    v90 = 65;
    goto LABEL_106;
  }
  v22 = *(_DWORD **)a6;
  if (v20 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v89 = "strides.size() == num_spatial_dims";
    v90 = 66;
LABEL_106:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v90, v89);
  }
  if (v19 == 5)
  {
    if (*v21 == 1)
    {
      if (*v22 == 1)
      {
        v23 = v22 + 2;
        v95 = (int)v22[1];
        v24 = v21 + 2;
        v104 = (int)v21[1];
        goto LABEL_13;
      }
      v91 = "sz == 1";
      v92 = 77;
    }
    else
    {
      v91 = "kd == 1";
      v92 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v92, v91);
  }
  if (v20 <= 1)
  {
    v27 = 4 * v19 - 12;
    v24 = (_DWORD *)((char *)v21 + v27);
    v23 = (_DWORD *)((char *)v22 + v27);
    v104 = 1;
    v95 = 1;
  }
  else
  {
    v25 = 4 * v19 - 16;
    v104 = *(int *)((char *)v21 + v25);
    v26 = 4 * v19 - 12;
    v24 = (_DWORD *)((char *)v21 + v26);
    v95 = *(int *)((char *)v22 + v25);
    v23 = (_DWORD *)((char *)v22 + v26);
  }
LABEL_13:
  v97 = *v23;
  v105 = *v24;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v116, v17, v18, v19);
  __p = 0;
  v114 = 0;
  v115 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v116, (uint64_t)(v116 + 8), __src.i8, v124, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v124, 2);
    v29 = v104;
  }
  else
  {
    v28 = v19 == 4;
    v29 = v104;
    if (v28)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v116, v116 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
    }
  }
  v30 = *(_QWORD *)__p;
  v31 = *((_QWORD *)__p + 1);
  v96 = *((_QWORD *)__p + 2);
  v98 = *((_QWORD *)__p + 3);
  v101 = *((_QWORD *)__p + 4);
  v103 = *((_QWORD *)v116 + 2);
  v106 = *((_QWORD *)v116 + 3);
  v121[0] = &off_24BFEBA30;
  v122 = v121;
  if (!a11)
    goto LABEL_24;
  __src.i64[0] = (uint64_t)&off_24BFEBAB0;
  p_src = &__src;
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](&__src, v121);
  v32 = p_src;
  if (p_src == &__src)
  {
    v33 = 4;
    v32 = &__src;
    goto LABEL_23;
  }
  if (p_src)
  {
    v33 = 5;
LABEL_23:
    (*(void (**)(void))(v32->i64[0] + 8 * v33))();
  }
LABEL_24:
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v119);
  LODWORD(v111) = v34;
  std::vector<float>::vector(&__src, v101, &v111);
  if (!v30)
    goto LABEL_89;
  v108 = 0;
  v35 = v105;
  if (v105 <= 1)
    v35 = 1;
  v36 = v35;
  v93 = v30;
  v94 = v31;
  do
  {
    if (!v31)
      goto LABEL_88;
    v37 = 0;
    do
    {
      if (!v96)
        goto LABEL_87;
      for (i = 0; i != v96; ++i)
      {
        if (!v98)
          continue;
        v38 = 0;
        for (j = 0; j != v98; ++j)
        {
          if (!v101)
            goto LABEL_85;
          for (k = 0; k != v101; ++k)
          {
            v112 = 0.0;
            v111 = xmmword_2069A4740;
            if (!v29)
            {
              v41 = 0;
              v64 = 5.0;
              goto LABEL_67;
            }
            v40 = 0;
            v41 = 0;
            do
            {
              v42 = v40 + i * v95;
              if ((a10 & 1) == 0 && (v42 < *(int *)(a7 + 8) || v42 >= v103 - *(int *)(a7 + 12)))
                goto LABEL_63;
              v110 = 0.0;
              *(_OWORD *)v109 = xmmword_2069A4740;
              if (v105)
              {
                v43 = a7;
                v44 = 0;
                do
                {
                  v45 = v38 + v44;
                  if ((a10 & 1) != 0 || v45 >= *(int *)(v43 + 16) && v45 < v106 - *(int *)(v43 + 20))
                  {
                    LOWORD(__e) = *(_WORD *)(a1
                                           + 2
                    if (!v122)
                      std::__throw_bad_function_call[abi:ne180100]();
                    LOWORD(__e) = (*(uint64_t (**)(_QWORD *, int *))(*v122 + 48))(v122, &__e);
                    MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                    v47 = v46 * *(float *)(__src.i64[0] + 4 * k);
                    v48 = 0.0;
                    if (v47 != 0.0)
                    {
                      __e = 0;
                      v49 = frexp(v47, &__e);
                      v50 = ldexp(v49, 11);
                      v48 = ldexp(round(v50), __e - 11);
                    }
                    *(float *)&v109[v44] = v48;
                    ++v41;
                  }
                  ++v44;
                }
                while (v36 != v44);
                v51 = *(float *)v109 + *(float *)&v109[1];
                v52 = 0.0;
                a7 = v43;
                v29 = v104;
                if ((float)(*(float *)v109 + *(float *)&v109[1]) == 0.0)
                  goto LABEL_56;
              }
              else
              {
                v51 = 5.0;
              }
              __e = 0;
              v53 = frexp(v51, &__e);
              v54 = ldexp(v53, 11);
              v52 = ldexp(round(v54), __e - 11);
LABEL_56:
              v55 = 0.0;
              v56 = 0.0;
              if ((float)(v52 + *(float *)&v109[2]) != 0.0)
              {
                __e = 0;
                v57 = frexp((float)(v52 + *(float *)&v109[2]), &__e);
                v58 = ldexp(v57, 11);
                v56 = ldexp(round(v58), __e - 11);
              }
              if ((float)(*(float *)&v109[3] + v110) != 0.0)
              {
                __e = 0;
                v59 = frexp((float)(*(float *)&v109[3] + v110), &__e);
                v60 = ldexp(v59, 11);
                v55 = ldexp(round(v60), __e - 11);
              }
              v61 = 0.0;
              if ((float)(v56 + v55) != 0.0)
              {
                __e = 0;
                v62 = frexp((float)(v56 + v55), &__e);
                v63 = ldexp(v62, 11);
                v61 = ldexp(round(v63), __e - 11);
              }
              *((float *)&v111 + v40) = v61;
LABEL_63:
              ++v40;
            }
            while (v40 != v29);
            v64 = *(float *)&v111 + *((float *)&v111 + 1);
            v65 = 0.0;
            if ((float)(*(float *)&v111 + *((float *)&v111 + 1)) != 0.0)
            {
LABEL_67:
              v109[0] = 0;
              v66 = frexp(v64, v109);
              v67 = ldexp(v66, 11);
              v65 = ldexp(round(v67), v109[0] - 11);
            }
            v68 = 0.0;
            v69 = 0.0;
            if ((float)(v65 + *((float *)&v111 + 2)) != 0.0)
            {
              v109[0] = 0;
              v70 = frexp((float)(v65 + *((float *)&v111 + 2)), v109);
              v71 = ldexp(v70, 11);
              v69 = ldexp(round(v71), v109[0] - 11);
            }
            if ((float)(*((float *)&v111 + 3) + v112) != 0.0)
            {
              v109[0] = 0;
              v72 = frexp((float)(*((float *)&v111 + 3) + v112), v109);
              v73 = ldexp(v72, 11);
              v68 = ldexp(round(v73), v109[0] - 11);
            }
            v74 = v69 + v68;
            v75 = 0.0;
            if (v74 != 0.0)
            {
              v109[0] = 0;
              v76 = frexp(v74, v109);
              v77 = ldexp(v76, 11);
              v75 = ldexp(round(v77), v109[0] - 11);
            }
            LOWORD(v109[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v41];
            MIL::Fp16::GetFloat((MIL::Fp16 *)v109);
            v79 = v75 * v78;
            v80 = 0.0;
            if (v79 != 0.0)
            {
              v109[0] = 0;
              v81 = frexp(v79, v109);
              v82 = ldexp(v81, 11);
              v80 = ldexp(round(v82), v109[0] - 11);
            }
            *(float *)v109 = v80;
            v83 = *(_QWORD *)(a12 + 24);
            if (!v83)
              std::__throw_bad_function_call[abi:ne180100]();
            v84 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v83 + 48))(v83, v109);
            if (v84 == INFINITY)
            {
              LOBYTE(v85) = -1;
            }
            else if (v84 == -INFINITY)
            {
              LOBYTE(v85) = 0;
            }
            else
            {
              v86 = llroundf(v84);
              if (v86 >= 255)
                v86 = 255;
              v85 = v86 & ~(v86 >> 31);
            }
          }
LABEL_85:
          v38 += v97;
        }
      }
LABEL_87:
      ++v37;
      v31 = v94;
    }
    while (v37 != v94);
LABEL_88:
    ++v108;
  }
  while (v108 != v93);
LABEL_89:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  v87 = v122;
  if (v122 == v121)
  {
    v88 = 4;
    v87 = v121;
LABEL_96:
    (*(void (**)(void))(*v87 + 8 * v88))();
  }
  else if (v122)
  {
    v88 = 5;
    goto LABEL_96;
  }
  if (__p)
  {
    v114 = __p;
    operator delete(__p);
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
}

void sub_20692ECB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  uint64_t v37;
  void *v39;
  void *v40;

  if (__p)
    operator delete(__p);
  v39 = *(void **)(v37 - 208);
  if (v39)
  {
    *(_QWORD *)(v37 - 200) = v39;
    operator delete(v39);
  }
  v40 = *(void **)a16;
  if (*(_QWORD *)a16)
  {
    *(_QWORD *)(a16 + 8) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64x2_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t k;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  float v46;
  float v47;
  float v48;
  long double v49;
  double v50;
  float v51;
  float v52;
  long double v53;
  double v54;
  float v55;
  float v56;
  long double v57;
  double v58;
  long double v59;
  double v60;
  float v61;
  long double v62;
  double v63;
  float v64;
  float v65;
  long double v66;
  double v67;
  float v68;
  float v69;
  long double v70;
  double v71;
  long double v72;
  double v73;
  float v74;
  float v75;
  long double v76;
  double v77;
  float v78;
  float v79;
  float v80;
  long double v81;
  double v82;
  uint64_t v83;
  float v84;
  char v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  const char *v89;
  int v90;
  const char *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t i;
  unint64_t v101;
  uint64_t j;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v108;
  int v109[4];
  float v110;
  __int128 v111;
  float v112;
  void *__p;
  void *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  __int16 v119;
  int __e;
  _QWORD v121[3];
  _QWORD *v122;
  int64x2_t __src;
  char v124[8];
  int64x2_t *p_src;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v119 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v89 = "x_rank == o_shape.size()";
    v90 = 64;
    goto LABEL_108;
  }
  v20 = v19 - 2;
  v21 = *(_DWORD **)a5;
  if (v19 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v89 = "kernel_sizes.size() == num_spatial_dims";
    v90 = 65;
    goto LABEL_108;
  }
  v22 = *(_DWORD **)a6;
  if (v20 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v89 = "strides.size() == num_spatial_dims";
    v90 = 66;
LABEL_108:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v90, v89);
  }
  if (v19 == 5)
  {
    if (*v21 == 1)
    {
      if (*v22 == 1)
      {
        v23 = v22 + 2;
        v95 = (int)v22[1];
        v24 = v21 + 2;
        v104 = (int)v21[1];
        goto LABEL_13;
      }
      v91 = "sz == 1";
      v92 = 77;
    }
    else
    {
      v91 = "kd == 1";
      v92 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v92, v91);
  }
  if (v20 <= 1)
  {
    v27 = 4 * v19 - 12;
    v24 = (_DWORD *)((char *)v21 + v27);
    v23 = (_DWORD *)((char *)v22 + v27);
    v104 = 1;
    v95 = 1;
  }
  else
  {
    v25 = 4 * v19 - 16;
    v104 = *(int *)((char *)v21 + v25);
    v26 = 4 * v19 - 12;
    v24 = (_DWORD *)((char *)v21 + v26);
    v95 = *(int *)((char *)v22 + v25);
    v23 = (_DWORD *)((char *)v22 + v26);
  }
LABEL_13:
  v97 = *v23;
  v105 = *v24;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v116, v17, v18, v19);
  __p = 0;
  v114 = 0;
  v115 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v116, (uint64_t)(v116 + 8), __src.i8, v124, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v124, 2);
    v29 = v104;
  }
  else
  {
    v28 = v19 == 4;
    v29 = v104;
    if (v28)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v116, v116 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
    }
  }
  v30 = *(_QWORD *)__p;
  v31 = *((_QWORD *)__p + 1);
  v96 = *((_QWORD *)__p + 2);
  v98 = *((_QWORD *)__p + 3);
  v101 = *((_QWORD *)__p + 4);
  v103 = *((_QWORD *)v116 + 2);
  v106 = *((_QWORD *)v116 + 3);
  v121[0] = &off_24BFEBB30;
  v122 = v121;
  if (!a11)
    goto LABEL_24;
  __src.i64[0] = (uint64_t)&off_24BFEBBB0;
  p_src = &__src;
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](&__src, v121);
  v32 = p_src;
  if (p_src == &__src)
  {
    v33 = 4;
    v32 = &__src;
    goto LABEL_23;
  }
  if (p_src)
  {
    v33 = 5;
LABEL_23:
    (*(void (**)(void))(v32->i64[0] + 8 * v33))();
  }
LABEL_24:
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v119);
  LODWORD(v111) = v34;
  std::vector<float>::vector(&__src, v101, &v111);
  if (!v30)
    goto LABEL_91;
  v108 = 0;
  v35 = v105;
  if (v105 <= 1)
    v35 = 1;
  v36 = v35;
  v93 = v30;
  v94 = v31;
  do
  {
    if (!v31)
      goto LABEL_90;
    v37 = 0;
    do
    {
      if (!v96)
        goto LABEL_89;
      for (i = 0; i != v96; ++i)
      {
        if (!v98)
          continue;
        v38 = 0;
        for (j = 0; j != v98; ++j)
        {
          if (!v101)
            goto LABEL_87;
          for (k = 0; k != v101; ++k)
          {
            v112 = 0.0;
            v111 = xmmword_2069A4740;
            if (!v29)
            {
              v41 = 0;
              v64 = 5.0;
              goto LABEL_67;
            }
            v40 = 0;
            v41 = 0;
            do
            {
              v42 = v40 + i * v95;
              if ((a10 & 1) == 0 && (v42 < *(int *)(a7 + 8) || v42 >= v103 - *(int *)(a7 + 12)))
                goto LABEL_63;
              v110 = 0.0;
              *(_OWORD *)v109 = xmmword_2069A4740;
              if (v105)
              {
                v43 = a7;
                v44 = 0;
                do
                {
                  v45 = v38 + v44;
                  if ((a10 & 1) != 0 || v45 >= *(int *)(v43 + 16) && v45 < v106 - *(int *)(v43 + 20))
                  {
                    LOWORD(__e) = *(_WORD *)(a1
                                           + 2
                    if (!v122)
                      std::__throw_bad_function_call[abi:ne180100]();
                    LOWORD(__e) = (*(uint64_t (**)(_QWORD *, int *))(*v122 + 48))(v122, &__e);
                    MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                    v47 = v46 * *(float *)(__src.i64[0] + 4 * k);
                    v48 = 0.0;
                    if (v47 != 0.0)
                    {
                      __e = 0;
                      v49 = frexp(v47, &__e);
                      v50 = ldexp(v49, 11);
                      v48 = ldexp(round(v50), __e - 11);
                    }
                    *(float *)&v109[v44] = v48;
                    ++v41;
                  }
                  ++v44;
                }
                while (v36 != v44);
                v51 = *(float *)v109 + *(float *)&v109[1];
                v52 = 0.0;
                a7 = v43;
                v29 = v104;
                if ((float)(*(float *)v109 + *(float *)&v109[1]) == 0.0)
                  goto LABEL_56;
              }
              else
              {
                v51 = 5.0;
              }
              __e = 0;
              v53 = frexp(v51, &__e);
              v54 = ldexp(v53, 11);
              v52 = ldexp(round(v54), __e - 11);
LABEL_56:
              v55 = 0.0;
              v56 = 0.0;
              if ((float)(v52 + *(float *)&v109[2]) != 0.0)
              {
                __e = 0;
                v57 = frexp((float)(v52 + *(float *)&v109[2]), &__e);
                v58 = ldexp(v57, 11);
                v56 = ldexp(round(v58), __e - 11);
              }
              if ((float)(*(float *)&v109[3] + v110) != 0.0)
              {
                __e = 0;
                v59 = frexp((float)(*(float *)&v109[3] + v110), &__e);
                v60 = ldexp(v59, 11);
                v55 = ldexp(round(v60), __e - 11);
              }
              v61 = 0.0;
              if ((float)(v56 + v55) != 0.0)
              {
                __e = 0;
                v62 = frexp((float)(v56 + v55), &__e);
                v63 = ldexp(v62, 11);
                v61 = ldexp(round(v63), __e - 11);
              }
              *((float *)&v111 + v40) = v61;
LABEL_63:
              ++v40;
            }
            while (v40 != v29);
            v64 = *(float *)&v111 + *((float *)&v111 + 1);
            v65 = 0.0;
            if ((float)(*(float *)&v111 + *((float *)&v111 + 1)) != 0.0)
            {
LABEL_67:
              v109[0] = 0;
              v66 = frexp(v64, v109);
              v67 = ldexp(v66, 11);
              v65 = ldexp(round(v67), v109[0] - 11);
            }
            v68 = 0.0;
            v69 = 0.0;
            if ((float)(v65 + *((float *)&v111 + 2)) != 0.0)
            {
              v109[0] = 0;
              v70 = frexp((float)(v65 + *((float *)&v111 + 2)), v109);
              v71 = ldexp(v70, 11);
              v69 = ldexp(round(v71), v109[0] - 11);
            }
            if ((float)(*((float *)&v111 + 3) + v112) != 0.0)
            {
              v109[0] = 0;
              v72 = frexp((float)(*((float *)&v111 + 3) + v112), v109);
              v73 = ldexp(v72, 11);
              v68 = ldexp(round(v73), v109[0] - 11);
            }
            v74 = v69 + v68;
            v75 = 0.0;
            if (v74 != 0.0)
            {
              v109[0] = 0;
              v76 = frexp(v74, v109);
              v77 = ldexp(v76, 11);
              v75 = ldexp(round(v77), v109[0] - 11);
            }
            LOWORD(v109[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v41];
            MIL::Fp16::GetFloat((MIL::Fp16 *)v109);
            v79 = v75 * v78;
            v80 = 0.0;
            if (v79 != 0.0)
            {
              v109[0] = 0;
              v81 = frexp(v79, v109);
              v82 = ldexp(v81, 11);
              v80 = ldexp(round(v82), v109[0] - 11);
            }
            *(float *)v109 = v80;
            v83 = *(_QWORD *)(a12 + 24);
            if (!v83)
              std::__throw_bad_function_call[abi:ne180100]();
            v84 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v83 + 48))(v83, v109);
            if (v84 == INFINITY)
            {
              v85 = 127;
            }
            else if (v84 == -INFINITY)
            {
              v85 = 0x80;
            }
            else
            {
              v86 = llroundf(v84);
              if (v86 >= 127)
                v86 = 127;
              if (v86 <= -128)
                v85 = 0x80;
              else
                v85 = v86;
            }
          }
LABEL_87:
          v38 += v97;
        }
      }
LABEL_89:
      ++v37;
      v31 = v94;
    }
    while (v37 != v94);
LABEL_90:
    ++v108;
  }
  while (v108 != v93);
LABEL_91:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  v87 = v122;
  if (v122 == v121)
  {
    v88 = 4;
    v87 = v121;
LABEL_98:
    (*(void (**)(void))(*v87 + 8 * v88))();
  }
  else if (v122)
  {
    v88 = 5;
    goto LABEL_98;
  }
  if (__p)
  {
    v114 = __p;
    operator delete(__p);
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
}

void sub_20692F6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  uint64_t v37;
  void *v39;
  void *v40;

  if (__p)
    operator delete(__p);
  v39 = *(void **)(v37 - 208);
  if (v39)
  {
    *(_QWORD *)(v37 - 200) = v39;
    operator delete(v39);
  }
  v40 = *(void **)a16;
  if (*(_QWORD *)a16)
  {
    *(_QWORD *)(a16 + 8) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, _QWORD *a9@<X8>, char a10, uint64_t a11)
{
  const void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t k;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  float v46;
  float v47;
  long double v48;
  double v49;
  float v50;
  float v51;
  long double v52;
  double v53;
  float v54;
  float v55;
  long double v56;
  double v57;
  long double v58;
  double v59;
  float v60;
  long double v61;
  double v62;
  float v63;
  float v64;
  long double v65;
  double v66;
  float v67;
  float v68;
  long double v69;
  double v70;
  long double v71;
  double v72;
  float v73;
  float v74;
  long double v75;
  double v76;
  float v77;
  float v78;
  float v79;
  long double v80;
  double v81;
  uint64_t v82;
  MIL::Fp16 *v83;
  float v84;
  __int16 v85;
  int64x2_t *v86;
  uint64_t v87;
  const char *v88;
  int v89;
  const char *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t i;
  uint64_t j;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v107;
  int v108[4];
  float v109;
  __int128 v110;
  float v111;
  void *__p[3];
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  __int16 v119;
  int __e;
  int64x2_t __src;
  char v122[8];
  int64x2_t *p_src;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  v119 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  v16 = *(const void **)a3;
  v17 = *(_QWORD *)(a3 + 8);
  v18 = (v17 - *(_QWORD *)a3) >> 3;
  if (v18 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v88 = "x_rank == o_shape.size()";
    v89 = 64;
    goto LABEL_91;
  }
  v19 = v18 - 2;
  v20 = *(_DWORD **)a5;
  if (v18 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v88 = "kernel_sizes.size() == num_spatial_dims";
    v89 = 65;
    goto LABEL_91;
  }
  v21 = *(_DWORD **)a6;
  if (v19 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v88 = "strides.size() == num_spatial_dims";
    v89 = 66;
LABEL_91:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v89, v88);
  }
  if (v18 == 5)
  {
    if (*v20 == 1)
    {
      if (*v21 == 1)
      {
        v22 = v21 + 2;
        v94 = (int)v21[1];
        v23 = v20 + 2;
        v103 = (int)v20[1];
        goto LABEL_11;
      }
      v90 = "sz == 1";
      v91 = 77;
    }
    else
    {
      v90 = "kd == 1";
      v91 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v91, v90);
  }
  if (v19 <= 1)
  {
    v26 = 4 * v18 - 12;
    v23 = (_DWORD *)((char *)v20 + v26);
    v22 = (_DWORD *)((char *)v21 + v26);
    v103 = 1;
    v94 = 1;
  }
  else
  {
    v24 = 4 * v18 - 16;
    v103 = *(int *)((char *)v20 + v24);
    v25 = 4 * v18 - 12;
    v23 = (_DWORD *)((char *)v20 + v25);
    v94 = *(int *)((char *)v21 + v24);
    v22 = (_DWORD *)((char *)v21 + v25);
  }
LABEL_11:
  v96 = *v22;
  v104 = *v23;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v116, v16, v17, v18);
  v113 = 0;
  v114 = 0;
  v115 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v113, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v18 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v116, (uint64_t)(v116 + 8), __src.i8, v122, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v113, (uint64_t)(v113 + 8), __src.i8, v122, 2);
    v28 = v103;
  }
  else
  {
    v27 = v18 == 4;
    v28 = v103;
    if (v27)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v116, v116 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v113, v113 + 8, &__src);
    }
  }
  v29 = *(_QWORD *)v113;
  v30 = *((_QWORD *)v113 + 1);
  v95 = *((_QWORD *)v113 + 2);
  v31 = *((_QWORD *)v113 + 4);
  v97 = *((_QWORD *)v113 + 3);
  v102 = *((_QWORD *)v116 + 2);
  v105 = *((_QWORD *)v116 + 3);
  __src.i64[0] = (uint64_t)&off_24BFEBC30;
  p_src = &__src;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v119);
  LODWORD(v110) = v32;
  std::vector<float>::vector(__p, v31, &v110);
  v98 = v31;
  if (v29)
  {
    v107 = 0;
    v33 = v104;
    if (v104 <= 1)
      v33 = 1;
    v34 = v33;
    v92 = v29;
    v93 = v30;
    do
    {
      if (!v30)
        goto LABEL_73;
      v35 = 0;
      do
      {
        v36 = v98;
        if (!v95)
          goto LABEL_72;
        for (i = 0; i != v95; ++i)
        {
          if (!v97)
            continue;
          v37 = 0;
          for (j = 0; j != v97; ++j)
          {
            if (!v36)
              goto LABEL_70;
            for (k = 0; k != v36; ++k)
            {
              v111 = 0.0;
              v110 = xmmword_2069A4740;
              if (!v28)
              {
                v40 = 0;
                v63 = 5.0;
                goto LABEL_59;
              }
              v39 = 0;
              v40 = 0;
              do
              {
                v41 = v39 + i * v94;
                if ((a10 & 1) == 0 && (v41 < *(int *)(a7 + 8) || v41 >= v102 - *(int *)(a7 + 12)))
                  goto LABEL_55;
                v109 = 0.0;
                *(_OWORD *)v108 = xmmword_2069A4740;
                if (v104)
                {
                  v42 = a7;
                  v43 = 0;
                  do
                  {
                    v44 = v37 + v43;
                    if ((a10 & 1) != 0 || v44 >= *(int *)(v42 + 16) && v44 < v105 - *(int *)(v42 + 20))
                    {
                      LOBYTE(__e) = *(_BYTE *)(a1
                      if (!p_src)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v45 = (*(uint64_t (**)(int64x2_t *, int *))(p_src->i64[0] + 48))(p_src, &__e);
                      v46 = *((float *)__p[0] + k) * (float)v45;
                      v47 = 0.0;
                      if (v46 != 0.0)
                      {
                        __e = 0;
                        v48 = frexp(v46, &__e);
                        v49 = ldexp(v48, 11);
                        v47 = ldexp(round(v49), __e - 11);
                      }
                      *(float *)&v108[v43] = v47;
                      ++v40;
                    }
                    ++v43;
                  }
                  while (v34 != v43);
                  v50 = *(float *)v108 + *(float *)&v108[1];
                  v51 = 0.0;
                  a7 = v42;
                  v28 = v103;
                  if ((float)(*(float *)v108 + *(float *)&v108[1]) == 0.0)
                    goto LABEL_48;
                }
                else
                {
                  v50 = 5.0;
                }
                __e = 0;
                v52 = frexp(v50, &__e);
                v53 = ldexp(v52, 11);
                v51 = ldexp(round(v53), __e - 11);
LABEL_48:
                v54 = 0.0;
                v55 = 0.0;
                if ((float)(v51 + *(float *)&v108[2]) != 0.0)
                {
                  __e = 0;
                  v56 = frexp((float)(v51 + *(float *)&v108[2]), &__e);
                  v57 = ldexp(v56, 11);
                  v55 = ldexp(round(v57), __e - 11);
                }
                if ((float)(*(float *)&v108[3] + v109) != 0.0)
                {
                  __e = 0;
                  v58 = frexp((float)(*(float *)&v108[3] + v109), &__e);
                  v59 = ldexp(v58, 11);
                  v54 = ldexp(round(v59), __e - 11);
                }
                v60 = 0.0;
                if ((float)(v55 + v54) != 0.0)
                {
                  __e = 0;
                  v61 = frexp((float)(v55 + v54), &__e);
                  v62 = ldexp(v61, 11);
                  v60 = ldexp(round(v62), __e - 11);
                }
                *((float *)&v110 + v39) = v60;
LABEL_55:
                ++v39;
              }
              while (v39 != v28);
              v63 = *(float *)&v110 + *((float *)&v110 + 1);
              v64 = 0.0;
              v36 = v98;
              if ((float)(*(float *)&v110 + *((float *)&v110 + 1)) != 0.0)
              {
LABEL_59:
                v108[0] = 0;
                v65 = frexp(v63, v108);
                v66 = ldexp(v65, 11);
                v64 = ldexp(round(v66), v108[0] - 11);
              }
              v67 = 0.0;
              v68 = 0.0;
              if ((float)(v64 + *((float *)&v110 + 2)) != 0.0)
              {
                v108[0] = 0;
                v69 = frexp((float)(v64 + *((float *)&v110 + 2)), v108);
                v70 = ldexp(v69, 11);
                v68 = ldexp(round(v70), v108[0] - 11);
              }
              if ((float)(*((float *)&v110 + 3) + v111) != 0.0)
              {
                v108[0] = 0;
                v71 = frexp((float)(*((float *)&v110 + 3) + v111), v108);
                v72 = ldexp(v71, 11);
                v67 = ldexp(round(v72), v108[0] - 11);
              }
              v73 = v68 + v67;
              v74 = 0.0;
              if (v73 != 0.0)
              {
                v108[0] = 0;
                v75 = frexp(v73, v108);
                v76 = ldexp(v75, 11);
                v74 = ldexp(round(v76), v108[0] - 11);
              }
              LOWORD(v108[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v40];
              MIL::Fp16::GetFloat((MIL::Fp16 *)v108);
              v78 = v74 * v77;
              v79 = 0.0;
              if (v78 != 0.0)
              {
                v108[0] = 0;
                v80 = frexp(v78, v108);
                v81 = ldexp(v80, 11);
                v79 = ldexp(round(v81), v108[0] - 11);
              }
              *(float *)v108 = v79;
              v82 = *(_QWORD *)(a11 + 24);
              if (!v82)
                std::__throw_bad_function_call[abi:ne180100]();
              v83 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v82 + 48))(v82, v108);
              v85 = MIL::Fp16::FromFloat(v83, v84);
              *(_WORD *)(*a9
            }
LABEL_70:
            v37 += v96;
          }
        }
LABEL_72:
        ++v35;
        v30 = v93;
      }
      while (v35 != v93);
LABEL_73:
      ++v107;
    }
    while (v107 != v92);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v86 = p_src;
  if (p_src == &__src)
  {
    v87 = 4;
    v86 = &__src;
  }
  else
  {
    if (!p_src)
      goto LABEL_82;
    v87 = 5;
  }
  (*(void (**)(void))(v86->i64[0] + 8 * v87))();
LABEL_82:
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
}

void sub_206930000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  uint64_t v38;
  void *v40;
  void *v41;
  void *v42;

  v40 = *(void **)(v38 - 200);
  if (v40)
  {
    *(_QWORD *)(v38 - 192) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(v38 - 176);
  if (v41)
  {
    *(_QWORD *)(v38 - 168) = v41;
    operator delete(v41);
  }
  v42 = *(void **)a17;
  if (*(_QWORD *)a17)
  {
    *(_QWORD *)(a17 + 8) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, unint64_t *a9@<X8>, char a10, uint64_t a11)
{
  const void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t k;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  float v46;
  float v47;
  long double v48;
  double v49;
  float v50;
  float v51;
  long double v52;
  double v53;
  float v54;
  float v55;
  long double v56;
  double v57;
  long double v58;
  double v59;
  float v60;
  long double v61;
  double v62;
  float v63;
  float v64;
  long double v65;
  double v66;
  float v67;
  float v68;
  long double v69;
  double v70;
  long double v71;
  double v72;
  float v73;
  float v74;
  long double v75;
  double v76;
  float v77;
  float v78;
  float v79;
  long double v80;
  double v81;
  uint64_t v82;
  float v83;
  int v84;
  int v85;
  int64x2_t *v86;
  uint64_t v87;
  const char *v88;
  int v89;
  const char *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t i;
  uint64_t j;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v106;
  int v107[4];
  float v108;
  __int128 v109;
  float v110;
  void *__p[3];
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  __int16 v118;
  int __e;
  int64x2_t __src;
  char v121[8];
  int64x2_t *p_src;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v118 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v16 = *(const void **)a3;
  v17 = *(_QWORD *)(a3 + 8);
  v18 = (v17 - *(_QWORD *)a3) >> 3;
  if (v18 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v88 = "x_rank == o_shape.size()";
    v89 = 64;
    goto LABEL_100;
  }
  v19 = v18 - 2;
  v20 = *(_DWORD **)a5;
  if (v18 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v88 = "kernel_sizes.size() == num_spatial_dims";
    v89 = 65;
    goto LABEL_100;
  }
  v21 = *(_DWORD **)a6;
  if (v19 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v88 = "strides.size() == num_spatial_dims";
    v89 = 66;
LABEL_100:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v89, v88);
  }
  if (v18 == 5)
  {
    if (*v20 == 1)
    {
      if (*v21 == 1)
      {
        v22 = v21 + 2;
        v94 = (int)v21[1];
        v23 = v20 + 2;
        v102 = (int)v20[1];
        goto LABEL_13;
      }
      v90 = "sz == 1";
      v91 = 77;
    }
    else
    {
      v90 = "kd == 1";
      v91 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v91, v90);
  }
  if (v19 <= 1)
  {
    v26 = 4 * v18 - 12;
    v23 = (_DWORD *)((char *)v20 + v26);
    v22 = (_DWORD *)((char *)v21 + v26);
    v102 = 1;
    v94 = 1;
  }
  else
  {
    v24 = 4 * v18 - 16;
    v102 = *(int *)((char *)v20 + v24);
    v25 = 4 * v18 - 12;
    v23 = (_DWORD *)((char *)v20 + v25);
    v94 = *(int *)((char *)v21 + v24);
    v22 = (_DWORD *)((char *)v21 + v25);
  }
LABEL_13:
  v96 = *v22;
  v103 = *v23;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v115, v16, v17, v18);
  v112 = 0;
  v113 = 0;
  v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v112, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v18 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v115, (uint64_t)(v115 + 8), __src.i8, v121, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v112, (uint64_t)(v112 + 8), __src.i8, v121, 2);
    v28 = v102;
  }
  else
  {
    v27 = v18 == 4;
    v28 = v102;
    if (v27)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v115, v115 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v112, v112 + 8, &__src);
    }
  }
  v29 = *(_QWORD *)v112;
  v30 = *((_QWORD *)v112 + 1);
  v95 = *((_QWORD *)v112 + 2);
  v31 = *((_QWORD *)v112 + 4);
  v97 = *((_QWORD *)v112 + 3);
  v101 = *((_QWORD *)v115 + 2);
  v104 = *((_QWORD *)v115 + 3);
  __src.i64[0] = (uint64_t)&off_24BFEBCB0;
  p_src = &__src;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v118);
  LODWORD(v109) = v32;
  std::vector<float>::vector(__p, v31, &v109);
  if (v29)
  {
    v106 = 0;
    v33 = v103;
    if (v103 <= 1)
      v33 = 1;
    v34 = v33;
    v92 = v29;
    v93 = v30;
    do
    {
      if (!v30)
        goto LABEL_82;
      v35 = 0;
      do
      {
        v36 = v31;
        if (!v95)
          goto LABEL_81;
        for (i = 0; i != v95; ++i)
        {
          if (!v97)
            continue;
          v37 = 0;
          for (j = 0; j != v97; ++j)
          {
            if (!v36)
              goto LABEL_79;
            for (k = 0; k != v36; ++k)
            {
              v110 = 0.0;
              v109 = xmmword_2069A4740;
              if (!v28)
              {
                v40 = 0;
                v63 = 5.0;
                goto LABEL_61;
              }
              v39 = 0;
              v40 = 0;
              do
              {
                v41 = v39 + i * v94;
                if ((a10 & 1) == 0 && (v41 < *(int *)(a7 + 8) || v41 >= v101 - *(int *)(a7 + 12)))
                  goto LABEL_57;
                v108 = 0.0;
                *(_OWORD *)v107 = xmmword_2069A4740;
                if (v103)
                {
                  v42 = a7;
                  v43 = 0;
                  do
                  {
                    v44 = v37 + v43;
                    if ((a10 & 1) != 0 || v44 >= *(int *)(v42 + 16) && v44 < v104 - *(int *)(v42 + 20))
                    {
                      LOBYTE(__e) = *(_BYTE *)(a1
                      if (!p_src)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v45 = (*(uint64_t (**)(int64x2_t *, int *))(p_src->i64[0] + 48))(p_src, &__e);
                      v46 = *((float *)__p[0] + k) * (float)v45;
                      v47 = 0.0;
                      if (v46 != 0.0)
                      {
                        __e = 0;
                        v48 = frexp(v46, &__e);
                        v49 = ldexp(v48, 11);
                        v47 = ldexp(round(v49), __e - 11);
                      }
                      *(float *)&v107[v43] = v47;
                      ++v40;
                    }
                    ++v43;
                  }
                  while (v34 != v43);
                  v50 = *(float *)v107 + *(float *)&v107[1];
                  v51 = 0.0;
                  a7 = v42;
                  v28 = v102;
                  if ((float)(*(float *)v107 + *(float *)&v107[1]) == 0.0)
                    goto LABEL_50;
                }
                else
                {
                  v50 = 5.0;
                }
                __e = 0;
                v52 = frexp(v50, &__e);
                v53 = ldexp(v52, 11);
                v51 = ldexp(round(v53), __e - 11);
LABEL_50:
                v54 = 0.0;
                v55 = 0.0;
                if ((float)(v51 + *(float *)&v107[2]) != 0.0)
                {
                  __e = 0;
                  v56 = frexp((float)(v51 + *(float *)&v107[2]), &__e);
                  v57 = ldexp(v56, 11);
                  v55 = ldexp(round(v57), __e - 11);
                }
                if ((float)(*(float *)&v107[3] + v108) != 0.0)
                {
                  __e = 0;
                  v58 = frexp((float)(*(float *)&v107[3] + v108), &__e);
                  v59 = ldexp(v58, 11);
                  v54 = ldexp(round(v59), __e - 11);
                }
                v60 = 0.0;
                if ((float)(v55 + v54) != 0.0)
                {
                  __e = 0;
                  v61 = frexp((float)(v55 + v54), &__e);
                  v62 = ldexp(v61, 11);
                  v60 = ldexp(round(v62), __e - 11);
                }
                *((float *)&v109 + v39) = v60;
LABEL_57:
                ++v39;
              }
              while (v39 != v28);
              v63 = *(float *)&v109 + *((float *)&v109 + 1);
              v64 = 0.0;
              v36 = v31;
              if ((float)(*(float *)&v109 + *((float *)&v109 + 1)) != 0.0)
              {
LABEL_61:
                v107[0] = 0;
                v65 = frexp(v63, v107);
                v66 = ldexp(v65, 11);
                v64 = ldexp(round(v66), v107[0] - 11);
              }
              v67 = 0.0;
              v68 = 0.0;
              if ((float)(v64 + *((float *)&v109 + 2)) != 0.0)
              {
                v107[0] = 0;
                v69 = frexp((float)(v64 + *((float *)&v109 + 2)), v107);
                v70 = ldexp(v69, 11);
                v68 = ldexp(round(v70), v107[0] - 11);
              }
              if ((float)(*((float *)&v109 + 3) + v110) != 0.0)
              {
                v107[0] = 0;
                v71 = frexp((float)(*((float *)&v109 + 3) + v110), v107);
                v72 = ldexp(v71, 11);
                v67 = ldexp(round(v72), v107[0] - 11);
              }
              v73 = v68 + v67;
              v74 = 0.0;
              if (v73 != 0.0)
              {
                v107[0] = 0;
                v75 = frexp(v73, v107);
                v76 = ldexp(v75, 11);
                v74 = ldexp(round(v76), v107[0] - 11);
              }
              LOWORD(v107[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v40];
              MIL::Fp16::GetFloat((MIL::Fp16 *)v107);
              v78 = v74 * v77;
              v79 = 0.0;
              if (v78 != 0.0)
              {
                v107[0] = 0;
                v80 = frexp(v78, v107);
                v81 = ldexp(v80, 11);
                v79 = ldexp(round(v81), v107[0] - 11);
              }
              *(float *)v107 = v79;
              v82 = *(_QWORD *)(a11 + 24);
              if (!v82)
                std::__throw_bad_function_call[abi:ne180100]();
              v83 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v82 + 48))(v82, v107);
              if (v83 == INFINITY)
              {
                LOBYTE(v84) = -1;
              }
              else if (v83 == -INFINITY)
              {
                LOBYTE(v84) = 0;
              }
              else
              {
                v85 = llroundf(v83);
                if (v85 >= 255)
                  v85 = 255;
                v84 = v85 & ~(v85 >> 31);
              }
            }
LABEL_79:
            v37 += v96;
          }
        }
LABEL_81:
        ++v35;
        v30 = v93;
      }
      while (v35 != v93);
LABEL_82:
      ++v106;
    }
    while (v106 != v92);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v86 = p_src;
  if (p_src == &__src)
  {
    v87 = 4;
    v86 = &__src;
  }
  else
  {
    if (!p_src)
      goto LABEL_91;
    v87 = 5;
  }
  (*(void (**)(void))(v86->i64[0] + 8 * v87))();
LABEL_91:
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
}

void sub_206930998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  uint64_t v38;
  void *v40;
  void *v41;
  void *v42;

  v40 = *(void **)(v38 - 200);
  if (v40)
  {
    *(_QWORD *)(v38 - 192) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(v38 - 176);
  if (v41)
  {
    *(_QWORD *)(v38 - 168) = v41;
    operator delete(v41);
  }
  v42 = *(void **)a17;
  if (*(_QWORD *)a17)
  {
    *(_QWORD *)(a17 + 8) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, unint64_t *a9@<X8>, char a10, uint64_t a11)
{
  const void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t k;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  float v46;
  float v47;
  long double v48;
  double v49;
  float v50;
  float v51;
  long double v52;
  double v53;
  float v54;
  float v55;
  long double v56;
  double v57;
  long double v58;
  double v59;
  float v60;
  long double v61;
  double v62;
  float v63;
  float v64;
  long double v65;
  double v66;
  float v67;
  float v68;
  long double v69;
  double v70;
  long double v71;
  double v72;
  float v73;
  float v74;
  long double v75;
  double v76;
  float v77;
  float v78;
  float v79;
  long double v80;
  double v81;
  uint64_t v82;
  float v83;
  char v84;
  int v85;
  int64x2_t *v86;
  uint64_t v87;
  const char *v88;
  int v89;
  const char *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t i;
  uint64_t j;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v106;
  int v107[4];
  float v108;
  __int128 v109;
  float v110;
  void *__p[3];
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  __int16 v118;
  int __e;
  int64x2_t __src;
  char v121[8];
  int64x2_t *p_src;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v118 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v16 = *(const void **)a3;
  v17 = *(_QWORD *)(a3 + 8);
  v18 = (v17 - *(_QWORD *)a3) >> 3;
  if (v18 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v88 = "x_rank == o_shape.size()";
    v89 = 64;
    goto LABEL_102;
  }
  v19 = v18 - 2;
  v20 = *(_DWORD **)a5;
  if (v18 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v88 = "kernel_sizes.size() == num_spatial_dims";
    v89 = 65;
    goto LABEL_102;
  }
  v21 = *(_DWORD **)a6;
  if (v19 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v88 = "strides.size() == num_spatial_dims";
    v89 = 66;
LABEL_102:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v89, v88);
  }
  if (v18 == 5)
  {
    if (*v20 == 1)
    {
      if (*v21 == 1)
      {
        v22 = v21 + 2;
        v94 = (int)v21[1];
        v23 = v20 + 2;
        v102 = (int)v20[1];
        goto LABEL_13;
      }
      v90 = "sz == 1";
      v91 = 77;
    }
    else
    {
      v90 = "kd == 1";
      v91 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v91, v90);
  }
  if (v19 <= 1)
  {
    v26 = 4 * v18 - 12;
    v23 = (_DWORD *)((char *)v20 + v26);
    v22 = (_DWORD *)((char *)v21 + v26);
    v102 = 1;
    v94 = 1;
  }
  else
  {
    v24 = 4 * v18 - 16;
    v102 = *(int *)((char *)v20 + v24);
    v25 = 4 * v18 - 12;
    v23 = (_DWORD *)((char *)v20 + v25);
    v94 = *(int *)((char *)v21 + v24);
    v22 = (_DWORD *)((char *)v21 + v25);
  }
LABEL_13:
  v96 = *v22;
  v103 = *v23;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v115, v16, v17, v18);
  v112 = 0;
  v113 = 0;
  v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v112, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v18 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v115, (uint64_t)(v115 + 8), __src.i8, v121, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v112, (uint64_t)(v112 + 8), __src.i8, v121, 2);
    v28 = v102;
  }
  else
  {
    v27 = v18 == 4;
    v28 = v102;
    if (v27)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v115, v115 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v112, v112 + 8, &__src);
    }
  }
  v29 = *(_QWORD *)v112;
  v30 = *((_QWORD *)v112 + 1);
  v95 = *((_QWORD *)v112 + 2);
  v31 = *((_QWORD *)v112 + 4);
  v97 = *((_QWORD *)v112 + 3);
  v101 = *((_QWORD *)v115 + 2);
  v104 = *((_QWORD *)v115 + 3);
  __src.i64[0] = (uint64_t)&off_24BFEBD30;
  p_src = &__src;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v118);
  LODWORD(v109) = v32;
  std::vector<float>::vector(__p, v31, &v109);
  if (v29)
  {
    v106 = 0;
    v33 = v103;
    if (v103 <= 1)
      v33 = 1;
    v34 = v33;
    v92 = v29;
    v93 = v30;
    do
    {
      if (!v30)
        goto LABEL_84;
      v35 = 0;
      do
      {
        v36 = v31;
        if (!v95)
          goto LABEL_83;
        for (i = 0; i != v95; ++i)
        {
          if (!v97)
            continue;
          v37 = 0;
          for (j = 0; j != v97; ++j)
          {
            if (!v36)
              goto LABEL_81;
            for (k = 0; k != v36; ++k)
            {
              v110 = 0.0;
              v109 = xmmword_2069A4740;
              if (!v28)
              {
                v40 = 0;
                v63 = 5.0;
                goto LABEL_61;
              }
              v39 = 0;
              v40 = 0;
              do
              {
                v41 = v39 + i * v94;
                if ((a10 & 1) == 0 && (v41 < *(int *)(a7 + 8) || v41 >= v101 - *(int *)(a7 + 12)))
                  goto LABEL_57;
                v108 = 0.0;
                *(_OWORD *)v107 = xmmword_2069A4740;
                if (v103)
                {
                  v42 = a7;
                  v43 = 0;
                  do
                  {
                    v44 = v37 + v43;
                    if ((a10 & 1) != 0 || v44 >= *(int *)(v42 + 16) && v44 < v104 - *(int *)(v42 + 20))
                    {
                      LOBYTE(__e) = *(_BYTE *)(a1
                      if (!p_src)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v45 = (*(uint64_t (**)(int64x2_t *, int *))(p_src->i64[0] + 48))(p_src, &__e);
                      v46 = *((float *)__p[0] + k) * (float)v45;
                      v47 = 0.0;
                      if (v46 != 0.0)
                      {
                        __e = 0;
                        v48 = frexp(v46, &__e);
                        v49 = ldexp(v48, 11);
                        v47 = ldexp(round(v49), __e - 11);
                      }
                      *(float *)&v107[v43] = v47;
                      ++v40;
                    }
                    ++v43;
                  }
                  while (v34 != v43);
                  v50 = *(float *)v107 + *(float *)&v107[1];
                  v51 = 0.0;
                  a7 = v42;
                  v28 = v102;
                  if ((float)(*(float *)v107 + *(float *)&v107[1]) == 0.0)
                    goto LABEL_50;
                }
                else
                {
                  v50 = 5.0;
                }
                __e = 0;
                v52 = frexp(v50, &__e);
                v53 = ldexp(v52, 11);
                v51 = ldexp(round(v53), __e - 11);
LABEL_50:
                v54 = 0.0;
                v55 = 0.0;
                if ((float)(v51 + *(float *)&v107[2]) != 0.0)
                {
                  __e = 0;
                  v56 = frexp((float)(v51 + *(float *)&v107[2]), &__e);
                  v57 = ldexp(v56, 11);
                  v55 = ldexp(round(v57), __e - 11);
                }
                if ((float)(*(float *)&v107[3] + v108) != 0.0)
                {
                  __e = 0;
                  v58 = frexp((float)(*(float *)&v107[3] + v108), &__e);
                  v59 = ldexp(v58, 11);
                  v54 = ldexp(round(v59), __e - 11);
                }
                v60 = 0.0;
                if ((float)(v55 + v54) != 0.0)
                {
                  __e = 0;
                  v61 = frexp((float)(v55 + v54), &__e);
                  v62 = ldexp(v61, 11);
                  v60 = ldexp(round(v62), __e - 11);
                }
                *((float *)&v109 + v39) = v60;
LABEL_57:
                ++v39;
              }
              while (v39 != v28);
              v63 = *(float *)&v109 + *((float *)&v109 + 1);
              v64 = 0.0;
              v36 = v31;
              if ((float)(*(float *)&v109 + *((float *)&v109 + 1)) != 0.0)
              {
LABEL_61:
                v107[0] = 0;
                v65 = frexp(v63, v107);
                v66 = ldexp(v65, 11);
                v64 = ldexp(round(v66), v107[0] - 11);
              }
              v67 = 0.0;
              v68 = 0.0;
              if ((float)(v64 + *((float *)&v109 + 2)) != 0.0)
              {
                v107[0] = 0;
                v69 = frexp((float)(v64 + *((float *)&v109 + 2)), v107);
                v70 = ldexp(v69, 11);
                v68 = ldexp(round(v70), v107[0] - 11);
              }
              if ((float)(*((float *)&v109 + 3) + v110) != 0.0)
              {
                v107[0] = 0;
                v71 = frexp((float)(*((float *)&v109 + 3) + v110), v107);
                v72 = ldexp(v71, 11);
                v67 = ldexp(round(v72), v107[0] - 11);
              }
              v73 = v68 + v67;
              v74 = 0.0;
              if (v73 != 0.0)
              {
                v107[0] = 0;
                v75 = frexp(v73, v107);
                v76 = ldexp(v75, 11);
                v74 = ldexp(round(v76), v107[0] - 11);
              }
              LOWORD(v107[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v40];
              MIL::Fp16::GetFloat((MIL::Fp16 *)v107);
              v78 = v74 * v77;
              v79 = 0.0;
              if (v78 != 0.0)
              {
                v107[0] = 0;
                v80 = frexp(v78, v107);
                v81 = ldexp(v80, 11);
                v79 = ldexp(round(v81), v107[0] - 11);
              }
              *(float *)v107 = v79;
              v82 = *(_QWORD *)(a11 + 24);
              if (!v82)
                std::__throw_bad_function_call[abi:ne180100]();
              v83 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v82 + 48))(v82, v107);
              if (v83 == INFINITY)
              {
                v84 = 127;
              }
              else if (v83 == -INFINITY)
              {
                v84 = 0x80;
              }
              else
              {
                v85 = llroundf(v83);
                if (v85 >= 127)
                  v85 = 127;
                if (v85 <= -128)
                  v84 = 0x80;
                else
                  v84 = v85;
              }
            }
LABEL_81:
            v37 += v96;
          }
        }
LABEL_83:
        ++v35;
        v30 = v93;
      }
      while (v35 != v93);
LABEL_84:
      ++v106;
    }
    while (v106 != v92);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v86 = p_src;
  if (p_src == &__src)
  {
    v87 = 4;
    v86 = &__src;
  }
  else
  {
    if (!p_src)
      goto LABEL_93;
    v87 = 5;
  }
  (*(void (**)(void))(v86->i64[0] + 8 * v87))();
LABEL_93:
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
}

void sub_206931334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  uint64_t v38;
  void *v40;
  void *v41;
  void *v42;

  v40 = *(void **)(v38 - 200);
  if (v40)
  {
    *(_QWORD *)(v38 - 192) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(v38 - 176);
  if (v41)
  {
    *(_QWORD *)(v38 - 168) = v41;
    operator delete(v41);
  }
  v42 = *(void **)a17;
  if (*(_QWORD *)a17)
  {
    *(_QWORD *)(a17 + 8) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, _QWORD *a9@<X8>, char a10, char a11, uint64_t a12)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64x2_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t k;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  float v47;
  float v48;
  long double v49;
  double v50;
  float v51;
  float v52;
  long double v53;
  double v54;
  float v55;
  float v56;
  long double v57;
  double v58;
  long double v59;
  double v60;
  float v61;
  long double v62;
  double v63;
  float v64;
  float v65;
  long double v66;
  double v67;
  float v68;
  float v69;
  long double v70;
  double v71;
  long double v72;
  double v73;
  float v74;
  float v75;
  long double v76;
  double v77;
  float v78;
  float v79;
  float v80;
  long double v81;
  double v82;
  uint64_t v83;
  MIL::Fp16 *v84;
  float v85;
  __int16 v86;
  _QWORD *v87;
  uint64_t v88;
  const char *v89;
  int v90;
  const char *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t i;
  unint64_t v101;
  uint64_t j;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v108;
  int v109[4];
  float v110;
  __int128 v111;
  float v112;
  void *__p;
  void *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  __int16 v119;
  int __e;
  _QWORD v121[3];
  _QWORD *v122;
  int64x2_t __src;
  char v124[8];
  int64x2_t *p_src;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v119 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v89 = "x_rank == o_shape.size()";
    v90 = 64;
    goto LABEL_97;
  }
  v20 = v19 - 2;
  v21 = *(_DWORD **)a5;
  if (v19 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v89 = "kernel_sizes.size() == num_spatial_dims";
    v90 = 65;
    goto LABEL_97;
  }
  v22 = *(_DWORD **)a6;
  if (v20 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v89 = "strides.size() == num_spatial_dims";
    v90 = 66;
LABEL_97:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v90, v89);
  }
  if (v19 == 5)
  {
    if (*v21 == 1)
    {
      if (*v22 == 1)
      {
        v23 = v22 + 2;
        v95 = (int)v22[1];
        v24 = v21 + 2;
        v104 = (int)v21[1];
        goto LABEL_11;
      }
      v91 = "sz == 1";
      v92 = 77;
    }
    else
    {
      v91 = "kd == 1";
      v92 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v92, v91);
  }
  if (v20 <= 1)
  {
    v27 = 4 * v19 - 12;
    v24 = (_DWORD *)((char *)v21 + v27);
    v23 = (_DWORD *)((char *)v22 + v27);
    v104 = 1;
    v95 = 1;
  }
  else
  {
    v25 = 4 * v19 - 16;
    v104 = *(int *)((char *)v21 + v25);
    v26 = 4 * v19 - 12;
    v24 = (_DWORD *)((char *)v21 + v26);
    v95 = *(int *)((char *)v22 + v25);
    v23 = (_DWORD *)((char *)v22 + v26);
  }
LABEL_11:
  v97 = *v23;
  v105 = *v24;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v116, v17, v18, v19);
  __p = 0;
  v114 = 0;
  v115 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v116, (uint64_t)(v116 + 8), __src.i8, v124, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v124, 2);
    v29 = v104;
  }
  else
  {
    v28 = v19 == 4;
    v29 = v104;
    if (v28)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v116, v116 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
    }
  }
  v30 = *(_QWORD *)__p;
  v31 = *((_QWORD *)__p + 1);
  v96 = *((_QWORD *)__p + 2);
  v98 = *((_QWORD *)__p + 3);
  v101 = *((_QWORD *)__p + 4);
  v103 = *((_QWORD *)v116 + 2);
  v106 = *((_QWORD *)v116 + 3);
  v121[0] = &off_24BFEBDB0;
  v122 = v121;
  if (!a11)
    goto LABEL_22;
  __src.i64[0] = (uint64_t)&off_24BFEBE30;
  p_src = &__src;
  std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](&__src, v121);
  v32 = p_src;
  if (p_src == &__src)
  {
    v33 = 4;
    v32 = &__src;
    goto LABEL_21;
  }
  if (p_src)
  {
    v33 = 5;
LABEL_21:
    (*(void (**)(void))(v32->i64[0] + 8 * v33))();
  }
LABEL_22:
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v119);
  LODWORD(v111) = v34;
  std::vector<float>::vector(&__src, v101, &v111);
  if (!v30)
    goto LABEL_80;
  v108 = 0;
  v35 = v105;
  if (v105 <= 1)
    v35 = 1;
  v36 = v35;
  v93 = v30;
  v94 = v31;
  do
  {
    if (!v31)
      goto LABEL_79;
    v37 = 0;
    do
    {
      if (!v96)
        goto LABEL_78;
      for (i = 0; i != v96; ++i)
      {
        if (!v98)
          continue;
        v38 = 0;
        for (j = 0; j != v98; ++j)
        {
          if (!v101)
            goto LABEL_76;
          for (k = 0; k != v101; ++k)
          {
            v112 = 0.0;
            v111 = xmmword_2069A4740;
            if (!v29)
            {
              v41 = 0;
              v64 = 5.0;
              goto LABEL_65;
            }
            v40 = 0;
            v41 = 0;
            do
            {
              v42 = v40 + i * v95;
              if ((a10 & 1) == 0 && (v42 < *(int *)(a7 + 8) || v42 >= v103 - *(int *)(a7 + 12)))
                goto LABEL_61;
              v110 = 0.0;
              *(_OWORD *)v109 = xmmword_2069A4740;
              if (v105)
              {
                v43 = a7;
                v44 = 0;
                do
                {
                  v45 = v38 + v44;
                  if ((a10 & 1) != 0 || v45 >= *(int *)(v43 + 16) && v45 < v106 - *(int *)(v43 + 20))
                  {
                    LOBYTE(__e) = *(_BYTE *)(a1
                    if (!v122)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v46 = (*(uint64_t (**)(_QWORD *, int *))(*v122 + 48))(v122, &__e);
                    v47 = *(float *)(__src.i64[0] + 4 * k) * (float)v46;
                    v48 = 0.0;
                    if (v47 != 0.0)
                    {
                      __e = 0;
                      v49 = frexp(v47, &__e);
                      v50 = ldexp(v49, 11);
                      v48 = ldexp(round(v50), __e - 11);
                    }
                    *(float *)&v109[v44] = v48;
                    ++v41;
                  }
                  ++v44;
                }
                while (v36 != v44);
                v51 = *(float *)v109 + *(float *)&v109[1];
                v52 = 0.0;
                a7 = v43;
                v29 = v104;
                if ((float)(*(float *)v109 + *(float *)&v109[1]) == 0.0)
                  goto LABEL_54;
              }
              else
              {
                v51 = 5.0;
              }
              __e = 0;
              v53 = frexp(v51, &__e);
              v54 = ldexp(v53, 11);
              v52 = ldexp(round(v54), __e - 11);
LABEL_54:
              v55 = 0.0;
              v56 = 0.0;
              if ((float)(v52 + *(float *)&v109[2]) != 0.0)
              {
                __e = 0;
                v57 = frexp((float)(v52 + *(float *)&v109[2]), &__e);
                v58 = ldexp(v57, 11);
                v56 = ldexp(round(v58), __e - 11);
              }
              if ((float)(*(float *)&v109[3] + v110) != 0.0)
              {
                __e = 0;
                v59 = frexp((float)(*(float *)&v109[3] + v110), &__e);
                v60 = ldexp(v59, 11);
                v55 = ldexp(round(v60), __e - 11);
              }
              v61 = 0.0;
              if ((float)(v56 + v55) != 0.0)
              {
                __e = 0;
                v62 = frexp((float)(v56 + v55), &__e);
                v63 = ldexp(v62, 11);
                v61 = ldexp(round(v63), __e - 11);
              }
              *((float *)&v111 + v40) = v61;
LABEL_61:
              ++v40;
            }
            while (v40 != v29);
            v64 = *(float *)&v111 + *((float *)&v111 + 1);
            v65 = 0.0;
            if ((float)(*(float *)&v111 + *((float *)&v111 + 1)) != 0.0)
            {
LABEL_65:
              v109[0] = 0;
              v66 = frexp(v64, v109);
              v67 = ldexp(v66, 11);
              v65 = ldexp(round(v67), v109[0] - 11);
            }
            v68 = 0.0;
            v69 = 0.0;
            if ((float)(v65 + *((float *)&v111 + 2)) != 0.0)
            {
              v109[0] = 0;
              v70 = frexp((float)(v65 + *((float *)&v111 + 2)), v109);
              v71 = ldexp(v70, 11);
              v69 = ldexp(round(v71), v109[0] - 11);
            }
            if ((float)(*((float *)&v111 + 3) + v112) != 0.0)
            {
              v109[0] = 0;
              v72 = frexp((float)(*((float *)&v111 + 3) + v112), v109);
              v73 = ldexp(v72, 11);
              v68 = ldexp(round(v73), v109[0] - 11);
            }
            v74 = v69 + v68;
            v75 = 0.0;
            if (v74 != 0.0)
            {
              v109[0] = 0;
              v76 = frexp(v74, v109);
              v77 = ldexp(v76, 11);
              v75 = ldexp(round(v77), v109[0] - 11);
            }
            LOWORD(v109[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v41];
            MIL::Fp16::GetFloat((MIL::Fp16 *)v109);
            v79 = v75 * v78;
            v80 = 0.0;
            if (v79 != 0.0)
            {
              v109[0] = 0;
              v81 = frexp(v79, v109);
              v82 = ldexp(v81, 11);
              v80 = ldexp(round(v82), v109[0] - 11);
            }
            *(float *)v109 = v80;
            v83 = *(_QWORD *)(a12 + 24);
            if (!v83)
              std::__throw_bad_function_call[abi:ne180100]();
            v84 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v83 + 48))(v83, v109);
            v86 = MIL::Fp16::FromFloat(v84, v85);
            *(_WORD *)(*a9
          }
LABEL_76:
          v38 += v97;
        }
      }
LABEL_78:
      ++v37;
      v31 = v94;
    }
    while (v37 != v94);
LABEL_79:
    ++v108;
  }
  while (v108 != v93);
LABEL_80:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  v87 = v122;
  if (v122 == v121)
  {
    v88 = 4;
    v87 = v121;
LABEL_87:
    (*(void (**)(void))(*v87 + 8 * v88))();
  }
  else if (v122)
  {
    v88 = 5;
    goto LABEL_87;
  }
  if (__p)
  {
    v114 = __p;
    operator delete(__p);
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
}

void sub_206931CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  uint64_t v37;
  void *v39;
  void *v40;

  if (__p)
    operator delete(__p);
  v39 = *(void **)(v37 - 208);
  if (v39)
  {
    *(_QWORD *)(v37 - 200) = v39;
    operator delete(v39);
  }
  v40 = *(void **)a16;
  if (*(_QWORD *)a16)
  {
    *(_QWORD *)(a16 + 8) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64x2_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t k;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  float v47;
  float v48;
  long double v49;
  double v50;
  float v51;
  float v52;
  long double v53;
  double v54;
  float v55;
  float v56;
  long double v57;
  double v58;
  long double v59;
  double v60;
  float v61;
  long double v62;
  double v63;
  float v64;
  float v65;
  long double v66;
  double v67;
  float v68;
  float v69;
  long double v70;
  double v71;
  long double v72;
  double v73;
  float v74;
  float v75;
  long double v76;
  double v77;
  float v78;
  float v79;
  float v80;
  long double v81;
  double v82;
  uint64_t v83;
  float v84;
  int v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  const char *v89;
  int v90;
  const char *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t i;
  unint64_t v101;
  uint64_t j;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v108;
  int v109[4];
  float v110;
  __int128 v111;
  float v112;
  void *__p;
  void *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  __int16 v119;
  int __e;
  _QWORD v121[3];
  _QWORD *v122;
  int64x2_t __src;
  char v124[8];
  int64x2_t *p_src;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v119 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v89 = "x_rank == o_shape.size()";
    v90 = 64;
    goto LABEL_106;
  }
  v20 = v19 - 2;
  v21 = *(_DWORD **)a5;
  if (v19 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v89 = "kernel_sizes.size() == num_spatial_dims";
    v90 = 65;
    goto LABEL_106;
  }
  v22 = *(_DWORD **)a6;
  if (v20 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v89 = "strides.size() == num_spatial_dims";
    v90 = 66;
LABEL_106:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v90, v89);
  }
  if (v19 == 5)
  {
    if (*v21 == 1)
    {
      if (*v22 == 1)
      {
        v23 = v22 + 2;
        v95 = (int)v22[1];
        v24 = v21 + 2;
        v104 = (int)v21[1];
        goto LABEL_13;
      }
      v91 = "sz == 1";
      v92 = 77;
    }
    else
    {
      v91 = "kd == 1";
      v92 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v92, v91);
  }
  if (v20 <= 1)
  {
    v27 = 4 * v19 - 12;
    v24 = (_DWORD *)((char *)v21 + v27);
    v23 = (_DWORD *)((char *)v22 + v27);
    v104 = 1;
    v95 = 1;
  }
  else
  {
    v25 = 4 * v19 - 16;
    v104 = *(int *)((char *)v21 + v25);
    v26 = 4 * v19 - 12;
    v24 = (_DWORD *)((char *)v21 + v26);
    v95 = *(int *)((char *)v22 + v25);
    v23 = (_DWORD *)((char *)v22 + v26);
  }
LABEL_13:
  v97 = *v23;
  v105 = *v24;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v116, v17, v18, v19);
  __p = 0;
  v114 = 0;
  v115 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v116, (uint64_t)(v116 + 8), __src.i8, v124, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v124, 2);
    v29 = v104;
  }
  else
  {
    v28 = v19 == 4;
    v29 = v104;
    if (v28)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v116, v116 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
    }
  }
  v30 = *(_QWORD *)__p;
  v31 = *((_QWORD *)__p + 1);
  v96 = *((_QWORD *)__p + 2);
  v98 = *((_QWORD *)__p + 3);
  v101 = *((_QWORD *)__p + 4);
  v103 = *((_QWORD *)v116 + 2);
  v106 = *((_QWORD *)v116 + 3);
  v121[0] = &off_24BFEBEB0;
  v122 = v121;
  if (!a11)
    goto LABEL_24;
  __src.i64[0] = (uint64_t)&off_24BFEBF30;
  p_src = &__src;
  std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](&__src, v121);
  v32 = p_src;
  if (p_src == &__src)
  {
    v33 = 4;
    v32 = &__src;
    goto LABEL_23;
  }
  if (p_src)
  {
    v33 = 5;
LABEL_23:
    (*(void (**)(void))(v32->i64[0] + 8 * v33))();
  }
LABEL_24:
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v119);
  LODWORD(v111) = v34;
  std::vector<float>::vector(&__src, v101, &v111);
  if (!v30)
    goto LABEL_89;
  v108 = 0;
  v35 = v105;
  if (v105 <= 1)
    v35 = 1;
  v36 = v35;
  v93 = v30;
  v94 = v31;
  do
  {
    if (!v31)
      goto LABEL_88;
    v37 = 0;
    do
    {
      if (!v96)
        goto LABEL_87;
      for (i = 0; i != v96; ++i)
      {
        if (!v98)
          continue;
        v38 = 0;
        for (j = 0; j != v98; ++j)
        {
          if (!v101)
            goto LABEL_85;
          for (k = 0; k != v101; ++k)
          {
            v112 = 0.0;
            v111 = xmmword_2069A4740;
            if (!v29)
            {
              v41 = 0;
              v64 = 5.0;
              goto LABEL_67;
            }
            v40 = 0;
            v41 = 0;
            do
            {
              v42 = v40 + i * v95;
              if ((a10 & 1) == 0 && (v42 < *(int *)(a7 + 8) || v42 >= v103 - *(int *)(a7 + 12)))
                goto LABEL_63;
              v110 = 0.0;
              *(_OWORD *)v109 = xmmword_2069A4740;
              if (v105)
              {
                v43 = a7;
                v44 = 0;
                do
                {
                  v45 = v38 + v44;
                  if ((a10 & 1) != 0 || v45 >= *(int *)(v43 + 16) && v45 < v106 - *(int *)(v43 + 20))
                  {
                    LOBYTE(__e) = *(_BYTE *)(a1
                    if (!v122)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v46 = (*(uint64_t (**)(_QWORD *, int *))(*v122 + 48))(v122, &__e);
                    v47 = *(float *)(__src.i64[0] + 4 * k) * (float)v46;
                    v48 = 0.0;
                    if (v47 != 0.0)
                    {
                      __e = 0;
                      v49 = frexp(v47, &__e);
                      v50 = ldexp(v49, 11);
                      v48 = ldexp(round(v50), __e - 11);
                    }
                    *(float *)&v109[v44] = v48;
                    ++v41;
                  }
                  ++v44;
                }
                while (v36 != v44);
                v51 = *(float *)v109 + *(float *)&v109[1];
                v52 = 0.0;
                a7 = v43;
                v29 = v104;
                if ((float)(*(float *)v109 + *(float *)&v109[1]) == 0.0)
                  goto LABEL_56;
              }
              else
              {
                v51 = 5.0;
              }
              __e = 0;
              v53 = frexp(v51, &__e);
              v54 = ldexp(v53, 11);
              v52 = ldexp(round(v54), __e - 11);
LABEL_56:
              v55 = 0.0;
              v56 = 0.0;
              if ((float)(v52 + *(float *)&v109[2]) != 0.0)
              {
                __e = 0;
                v57 = frexp((float)(v52 + *(float *)&v109[2]), &__e);
                v58 = ldexp(v57, 11);
                v56 = ldexp(round(v58), __e - 11);
              }
              if ((float)(*(float *)&v109[3] + v110) != 0.0)
              {
                __e = 0;
                v59 = frexp((float)(*(float *)&v109[3] + v110), &__e);
                v60 = ldexp(v59, 11);
                v55 = ldexp(round(v60), __e - 11);
              }
              v61 = 0.0;
              if ((float)(v56 + v55) != 0.0)
              {
                __e = 0;
                v62 = frexp((float)(v56 + v55), &__e);
                v63 = ldexp(v62, 11);
                v61 = ldexp(round(v63), __e - 11);
              }
              *((float *)&v111 + v40) = v61;
LABEL_63:
              ++v40;
            }
            while (v40 != v29);
            v64 = *(float *)&v111 + *((float *)&v111 + 1);
            v65 = 0.0;
            if ((float)(*(float *)&v111 + *((float *)&v111 + 1)) != 0.0)
            {
LABEL_67:
              v109[0] = 0;
              v66 = frexp(v64, v109);
              v67 = ldexp(v66, 11);
              v65 = ldexp(round(v67), v109[0] - 11);
            }
            v68 = 0.0;
            v69 = 0.0;
            if ((float)(v65 + *((float *)&v111 + 2)) != 0.0)
            {
              v109[0] = 0;
              v70 = frexp((float)(v65 + *((float *)&v111 + 2)), v109);
              v71 = ldexp(v70, 11);
              v69 = ldexp(round(v71), v109[0] - 11);
            }
            if ((float)(*((float *)&v111 + 3) + v112) != 0.0)
            {
              v109[0] = 0;
              v72 = frexp((float)(*((float *)&v111 + 3) + v112), v109);
              v73 = ldexp(v72, 11);
              v68 = ldexp(round(v73), v109[0] - 11);
            }
            v74 = v69 + v68;
            v75 = 0.0;
            if (v74 != 0.0)
            {
              v109[0] = 0;
              v76 = frexp(v74, v109);
              v77 = ldexp(v76, 11);
              v75 = ldexp(round(v77), v109[0] - 11);
            }
            LOWORD(v109[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v41];
            MIL::Fp16::GetFloat((MIL::Fp16 *)v109);
            v79 = v75 * v78;
            v80 = 0.0;
            if (v79 != 0.0)
            {
              v109[0] = 0;
              v81 = frexp(v79, v109);
              v82 = ldexp(v81, 11);
              v80 = ldexp(round(v82), v109[0] - 11);
            }
            *(float *)v109 = v80;
            v83 = *(_QWORD *)(a12 + 24);
            if (!v83)
              std::__throw_bad_function_call[abi:ne180100]();
            v84 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v83 + 48))(v83, v109);
            if (v84 == INFINITY)
            {
              LOBYTE(v85) = -1;
            }
            else if (v84 == -INFINITY)
            {
              LOBYTE(v85) = 0;
            }
            else
            {
              v86 = llroundf(v84);
              if (v86 >= 255)
                v86 = 255;
              v85 = v86 & ~(v86 >> 31);
            }
          }
LABEL_85:
          v38 += v97;
        }
      }
LABEL_87:
      ++v37;
      v31 = v94;
    }
    while (v37 != v94);
LABEL_88:
    ++v108;
  }
  while (v108 != v93);
LABEL_89:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  v87 = v122;
  if (v122 == v121)
  {
    v88 = 4;
    v87 = v121;
LABEL_96:
    (*(void (**)(void))(*v87 + 8 * v88))();
  }
  else if (v122)
  {
    v88 = 5;
    goto LABEL_96;
  }
  if (__p)
  {
    v114 = __p;
    operator delete(__p);
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
}

void sub_2069326CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  uint64_t v37;
  void *v39;
  void *v40;

  if (__p)
    operator delete(__p);
  v39 = *(void **)(v37 - 208);
  if (v39)
  {
    *(_QWORD *)(v37 - 200) = v39;
    operator delete(v39);
  }
  v40 = *(void **)a16;
  if (*(_QWORD *)a16)
  {
    *(_QWORD *)(a16 + 8) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64x2_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t k;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  float v47;
  float v48;
  long double v49;
  double v50;
  float v51;
  float v52;
  long double v53;
  double v54;
  float v55;
  float v56;
  long double v57;
  double v58;
  long double v59;
  double v60;
  float v61;
  long double v62;
  double v63;
  float v64;
  float v65;
  long double v66;
  double v67;
  float v68;
  float v69;
  long double v70;
  double v71;
  long double v72;
  double v73;
  float v74;
  float v75;
  long double v76;
  double v77;
  float v78;
  float v79;
  float v80;
  long double v81;
  double v82;
  uint64_t v83;
  float v84;
  char v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  const char *v89;
  int v90;
  const char *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t i;
  unint64_t v101;
  uint64_t j;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v108;
  int v109[4];
  float v110;
  __int128 v111;
  float v112;
  void *__p;
  void *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  __int16 v119;
  int __e;
  _QWORD v121[3];
  _QWORD *v122;
  int64x2_t __src;
  char v124[8];
  int64x2_t *p_src;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v119 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 3;
  if (v19 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v89 = "x_rank == o_shape.size()";
    v90 = 64;
    goto LABEL_108;
  }
  v20 = v19 - 2;
  v21 = *(_DWORD **)a5;
  if (v19 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v89 = "kernel_sizes.size() == num_spatial_dims";
    v90 = 65;
    goto LABEL_108;
  }
  v22 = *(_DWORD **)a6;
  if (v20 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v89 = "strides.size() == num_spatial_dims";
    v90 = 66;
LABEL_108:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v90, v89);
  }
  if (v19 == 5)
  {
    if (*v21 == 1)
    {
      if (*v22 == 1)
      {
        v23 = v22 + 2;
        v95 = (int)v22[1];
        v24 = v21 + 2;
        v104 = (int)v21[1];
        goto LABEL_13;
      }
      v91 = "sz == 1";
      v92 = 77;
    }
    else
    {
      v91 = "kd == 1";
      v92 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v92, v91);
  }
  if (v20 <= 1)
  {
    v27 = 4 * v19 - 12;
    v24 = (_DWORD *)((char *)v21 + v27);
    v23 = (_DWORD *)((char *)v22 + v27);
    v104 = 1;
    v95 = 1;
  }
  else
  {
    v25 = 4 * v19 - 16;
    v104 = *(int *)((char *)v21 + v25);
    v26 = 4 * v19 - 12;
    v24 = (_DWORD *)((char *)v21 + v26);
    v95 = *(int *)((char *)v22 + v25);
    v23 = (_DWORD *)((char *)v22 + v26);
  }
LABEL_13:
  v97 = *v23;
  v105 = *v24;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v116, v17, v18, v19);
  __p = 0;
  v114 = 0;
  v115 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v19 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v116, (uint64_t)(v116 + 8), __src.i8, v124, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v124, 2);
    v29 = v104;
  }
  else
  {
    v28 = v19 == 4;
    v29 = v104;
    if (v28)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v116, v116 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
    }
  }
  v30 = *(_QWORD *)__p;
  v31 = *((_QWORD *)__p + 1);
  v96 = *((_QWORD *)__p + 2);
  v98 = *((_QWORD *)__p + 3);
  v101 = *((_QWORD *)__p + 4);
  v103 = *((_QWORD *)v116 + 2);
  v106 = *((_QWORD *)v116 + 3);
  v121[0] = &off_24BFEBFB0;
  v122 = v121;
  if (!a11)
    goto LABEL_24;
  __src.i64[0] = (uint64_t)&off_24BFEC030;
  p_src = &__src;
  std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](&__src, v121);
  v32 = p_src;
  if (p_src == &__src)
  {
    v33 = 4;
    v32 = &__src;
    goto LABEL_23;
  }
  if (p_src)
  {
    v33 = 5;
LABEL_23:
    (*(void (**)(void))(v32->i64[0] + 8 * v33))();
  }
LABEL_24:
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v119);
  LODWORD(v111) = v34;
  std::vector<float>::vector(&__src, v101, &v111);
  if (!v30)
    goto LABEL_91;
  v108 = 0;
  v35 = v105;
  if (v105 <= 1)
    v35 = 1;
  v36 = v35;
  v93 = v30;
  v94 = v31;
  do
  {
    if (!v31)
      goto LABEL_90;
    v37 = 0;
    do
    {
      if (!v96)
        goto LABEL_89;
      for (i = 0; i != v96; ++i)
      {
        if (!v98)
          continue;
        v38 = 0;
        for (j = 0; j != v98; ++j)
        {
          if (!v101)
            goto LABEL_87;
          for (k = 0; k != v101; ++k)
          {
            v112 = 0.0;
            v111 = xmmword_2069A4740;
            if (!v29)
            {
              v41 = 0;
              v64 = 5.0;
              goto LABEL_67;
            }
            v40 = 0;
            v41 = 0;
            do
            {
              v42 = v40 + i * v95;
              if ((a10 & 1) == 0 && (v42 < *(int *)(a7 + 8) || v42 >= v103 - *(int *)(a7 + 12)))
                goto LABEL_63;
              v110 = 0.0;
              *(_OWORD *)v109 = xmmword_2069A4740;
              if (v105)
              {
                v43 = a7;
                v44 = 0;
                do
                {
                  v45 = v38 + v44;
                  if ((a10 & 1) != 0 || v45 >= *(int *)(v43 + 16) && v45 < v106 - *(int *)(v43 + 20))
                  {
                    LOBYTE(__e) = *(_BYTE *)(a1
                    if (!v122)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v46 = (*(uint64_t (**)(_QWORD *, int *))(*v122 + 48))(v122, &__e);
                    v47 = *(float *)(__src.i64[0] + 4 * k) * (float)v46;
                    v48 = 0.0;
                    if (v47 != 0.0)
                    {
                      __e = 0;
                      v49 = frexp(v47, &__e);
                      v50 = ldexp(v49, 11);
                      v48 = ldexp(round(v50), __e - 11);
                    }
                    *(float *)&v109[v44] = v48;
                    ++v41;
                  }
                  ++v44;
                }
                while (v36 != v44);
                v51 = *(float *)v109 + *(float *)&v109[1];
                v52 = 0.0;
                a7 = v43;
                v29 = v104;
                if ((float)(*(float *)v109 + *(float *)&v109[1]) == 0.0)
                  goto LABEL_56;
              }
              else
              {
                v51 = 5.0;
              }
              __e = 0;
              v53 = frexp(v51, &__e);
              v54 = ldexp(v53, 11);
              v52 = ldexp(round(v54), __e - 11);
LABEL_56:
              v55 = 0.0;
              v56 = 0.0;
              if ((float)(v52 + *(float *)&v109[2]) != 0.0)
              {
                __e = 0;
                v57 = frexp((float)(v52 + *(float *)&v109[2]), &__e);
                v58 = ldexp(v57, 11);
                v56 = ldexp(round(v58), __e - 11);
              }
              if ((float)(*(float *)&v109[3] + v110) != 0.0)
              {
                __e = 0;
                v59 = frexp((float)(*(float *)&v109[3] + v110), &__e);
                v60 = ldexp(v59, 11);
                v55 = ldexp(round(v60), __e - 11);
              }
              v61 = 0.0;
              if ((float)(v56 + v55) != 0.0)
              {
                __e = 0;
                v62 = frexp((float)(v56 + v55), &__e);
                v63 = ldexp(v62, 11);
                v61 = ldexp(round(v63), __e - 11);
              }
              *((float *)&v111 + v40) = v61;
LABEL_63:
              ++v40;
            }
            while (v40 != v29);
            v64 = *(float *)&v111 + *((float *)&v111 + 1);
            v65 = 0.0;
            if ((float)(*(float *)&v111 + *((float *)&v111 + 1)) != 0.0)
            {
LABEL_67:
              v109[0] = 0;
              v66 = frexp(v64, v109);
              v67 = ldexp(v66, 11);
              v65 = ldexp(round(v67), v109[0] - 11);
            }
            v68 = 0.0;
            v69 = 0.0;
            if ((float)(v65 + *((float *)&v111 + 2)) != 0.0)
            {
              v109[0] = 0;
              v70 = frexp((float)(v65 + *((float *)&v111 + 2)), v109);
              v71 = ldexp(v70, 11);
              v69 = ldexp(round(v71), v109[0] - 11);
            }
            if ((float)(*((float *)&v111 + 3) + v112) != 0.0)
            {
              v109[0] = 0;
              v72 = frexp((float)(*((float *)&v111 + 3) + v112), v109);
              v73 = ldexp(v72, 11);
              v68 = ldexp(round(v73), v109[0] - 11);
            }
            v74 = v69 + v68;
            v75 = 0.0;
            if (v74 != 0.0)
            {
              v109[0] = 0;
              v76 = frexp(v74, v109);
              v77 = ldexp(v76, 11);
              v75 = ldexp(round(v77), v109[0] - 11);
            }
            LOWORD(v109[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v41];
            MIL::Fp16::GetFloat((MIL::Fp16 *)v109);
            v79 = v75 * v78;
            v80 = 0.0;
            if (v79 != 0.0)
            {
              v109[0] = 0;
              v81 = frexp(v79, v109);
              v82 = ldexp(v81, 11);
              v80 = ldexp(round(v82), v109[0] - 11);
            }
            *(float *)v109 = v80;
            v83 = *(_QWORD *)(a12 + 24);
            if (!v83)
              std::__throw_bad_function_call[abi:ne180100]();
            v84 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v83 + 48))(v83, v109);
            if (v84 == INFINITY)
            {
              v85 = 127;
            }
            else if (v84 == -INFINITY)
            {
              v85 = 0x80;
            }
            else
            {
              v86 = llroundf(v84);
              if (v86 >= 127)
                v86 = 127;
              if (v86 <= -128)
                v85 = 0x80;
              else
                v85 = v86;
            }
          }
LABEL_87:
          v38 += v97;
        }
      }
LABEL_89:
      ++v37;
      v31 = v94;
    }
    while (v37 != v94);
LABEL_90:
    ++v108;
  }
  while (v108 != v93);
LABEL_91:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  v87 = v122;
  if (v122 == v121)
  {
    v88 = 4;
    v87 = v121;
LABEL_98:
    (*(void (**)(void))(*v87 + 8 * v88))();
  }
  else if (v122)
  {
    v88 = 5;
    goto LABEL_98;
  }
  if (__p)
  {
    v114 = __p;
    operator delete(__p);
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
}

void sub_2069330C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  uint64_t v37;
  void *v39;
  void *v40;

  if (__p)
    operator delete(__p);
  v39 = *(void **)(v37 - 208);
  if (v39)
  {
    *(_QWORD *)(v37 - 200) = v39;
    operator delete(v39);
  }
  v40 = *(void **)a16;
  if (*(_QWORD *)a16)
  {
    *(_QWORD *)(a16 + 8) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::PeMaxPoolCpu::Run(MIL::IROperation *a1@<X1>, _QWORD *a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  _DWORD *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string v20;
  std::string v21;
  std::string v22;

  v6 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(v6 + 8) != 11)
      goto LABEL_10;
    v6 = *(_QWORD *)v6;
  }
  else if (v7 != 11)
  {
    goto LABEL_10;
  }
  if (*(_QWORD *)v6 == 0x705F78616D5F6570 && *(_QWORD *)(v6 + 3) == 0x6C6F6F705F78616DLL)
  {
    return;
  }
LABEL_10:
  *a3 = 1;
  v9 = a3 + 2;
  std::string::basic_string[abi:ne180100]<0>(&v20, "pe_max_pool");
  v10 = std::string::insert(&v20, 0, "Expected '");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v21, "' op. Got ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  v15 = *(char *)(v14 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)v14;
  else
    v16 = *(const std::string::value_type **)v14;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v14 + 23);
  else
    v17 = *(_QWORD *)(v14 + 8);
  v18 = std::string::append(&v22, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *((_QWORD *)v9 + 2) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)v9 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_20693332C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_206934338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,int a25,__int16 a26,char a27,char a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  _QWORD *v65;
  uint64_t v66;

  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  v65 = *(_QWORD **)(v63 - 96);
  if (v65 == (_QWORD *)(v63 - 120))
  {
    v66 = 4;
    v65 = (_QWORD *)(v63 - 120);
  }
  else
  {
    if (!v65)
      goto LABEL_12;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_12:
  if (a32 < 0)
    operator delete(a24);
  if (a33)
    operator delete(a33);
  if (a38)
    operator delete(a38);
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::PeMinPoolCpu::Run(MIL::IROperation *a1@<X1>, _QWORD *a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  _DWORD *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string v20;
  std::string v21;
  std::string v22;

  v6 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(v6 + 8) != 11)
      goto LABEL_10;
    v6 = *(_QWORD *)v6;
  }
  else if (v7 != 11)
  {
    goto LABEL_10;
  }
  if (*(_QWORD *)v6 == 0x705F6E696D5F6570 && *(_QWORD *)(v6 + 3) == 0x6C6F6F705F6E696DLL)
  {
    return;
  }
LABEL_10:
  *a3 = 1;
  v9 = a3 + 2;
  std::string::basic_string[abi:ne180100]<0>(&v20, "pe_min_pool");
  v10 = std::string::insert(&v20, 0, "Expected '");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v21, "' op. Got ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  v15 = *(char *)(v14 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)v14;
  else
    v16 = *(const std::string::value_type **)v14;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v14 + 23);
  else
    v17 = *(_QWORD *)(v14 + 8);
  v18 = std::string::append(&v22, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *((_QWORD *)v9 + 2) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)v9 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_206934824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::PeAvgPoolCpu::~PeAvgPoolCpu(MIL::ANEMachineIR::Interpreter::PeAvgPoolCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

void MIL::ANEMachineIR::Interpreter::PeMaxPoolCpu::~PeMaxPoolCpu(MIL::ANEMachineIR::Interpreter::PeMaxPoolCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

void MIL::ANEMachineIR::Interpreter::PeMinPoolCpu::~PeMinPoolCpu(MIL::ANEMachineIR::Interpreter::PeMinPoolCpu *this)
{
  JUMPOUT(0x20BCFF140);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, char a10)
{
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  long double v49;
  double v50;
  uint64_t v51;
  MIL::Fp16 *v52;
  float v53;
  __int16 v54;
  const char *v55;
  int v56;
  const char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v67;
  uint64_t i;
  uint64_t j;
  unsigned int v70;
  uint64_t v71;
  void *__p;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  __int16 v79;
  int __e;
  int64x2_t __src;
  char v82[16];
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v79 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  v15 = *(const void **)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v17 = (v16 - *(_QWORD *)a3) >> 3;
  if (v17 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v55 = "x_rank == o_shape.size()";
    v56 = 189;
    goto LABEL_64;
  }
  v18 = v17 - 2;
  v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v55 = "kernel_sizes.size() == num_spatial_dims";
    v56 = 190;
    goto LABEL_64;
  }
  v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v55 = "strides.size() == num_spatial_dims";
    v56 = 191;
LABEL_64:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v56, v55);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        v21 = v20 + 2;
        v61 = (int)v20[1];
        v22 = v19 + 2;
        v71 = (int)v19[1];
        goto LABEL_11;
      }
      v57 = "sz == 1";
      v58 = 202;
    }
    else
    {
      v57 = "kd == 1";
      v58 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v58, v57);
  }
  if (v18 <= 1)
  {
    v25 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v25);
    v21 = (_DWORD *)((char *)v20 + v25);
    v71 = 1;
    v61 = 1;
  }
  else
  {
    v23 = 4 * v17 - 16;
    v71 = *(int *)((char *)v19 + v23);
    v24 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v24);
    v61 = *(int *)((char *)v20 + v23);
    v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_11:
  v63 = *v21;
  v70 = *v22;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v76, v15, v16, v17);
  __p = 0;
  v74 = 0;
  v75 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v76, (uint64_t)v76 + 8, __src.i8, v82, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v82, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v76, (char *)v76 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  v26 = *(_QWORD *)__p;
  v27 = *((_QWORD *)__p + 1);
  v62 = *((_QWORD *)__p + 2);
  v28 = *((_QWORD *)__p + 4);
  v64 = *((_QWORD *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v79);
  __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    v30 = 0;
    v31 = v70;
    if (v70 <= 1)
      v31 = 1;
    v32 = v31;
    v67 = a9;
    v59 = v26;
    v60 = v27;
    v65 = v28;
    do
    {
      if (v27)
      {
        v33 = 0;
        do
        {
          if (v62)
          {
            for (i = 0; i != v62; ++i)
            {
              if (v64)
              {
                v34 = 0;
                for (j = 0; j != v64; ++j)
                {
                  if (v28)
                  {
                    v35 = 0;
                    do
                    {
                      if (v71)
                      {
                        v36 = 0;
                        v37 = 0;
                        do
                        {
                          if (v70)
                          {
                            v38 = 0;
                            do
                            {
                              v39 = *(unsigned __int16 *)(a1
                                                        + 2
                              if (v38 | v36)
                              {
                                if (a10)
                                {
                                  LOWORD(__e) = v37;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  v41 = v40;
                                  LOWORD(__e) = v39;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  if (v41 < v42)
                                    v39 = v39;
                                  else
                                    v39 = v37;
                                }
                                else
                                {
                                  LOWORD(__e) = v37;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  v44 = v43;
                                  LOWORD(__e) = v39;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  if (v44 > v45)
                                    v39 = v39;
                                  else
                                    v39 = v37;
                                }
                              }
                              ++v38;
                              LODWORD(v37) = v39;
                            }
                            while (v32 != v38);
                          }
                          else
                          {
                            v39 = v37;
                          }
                          ++v36;
                          v37 = v39;
                        }
                        while (v36 != v71);
                      }
                      else
                      {
                        LOWORD(v39) = 0;
                      }
                      LOWORD(__e) = v39;
                      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                      v47 = v46 * *(float *)(__src.i64[0] + 4 * v35);
                      v48 = 0.0;
                      if (v47 != 0.0)
                      {
                        __e = 0;
                        v49 = frexp(v47, &__e);
                        v50 = ldexp(v49, 11);
                        v48 = ldexp(round(v50), __e - 11);
                      }
                      __e = LODWORD(v48);
                      v51 = *(_QWORD *)(a8 + 24);
                      if (!v51)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v52 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v51 + 48))(v51, &__e);
                      v54 = MIL::Fp16::FromFloat(v52, v53);
                      *(_WORD *)(*v67
                               + 2
                      v28 = v65;
                    }
                    while (v35 != v65);
                  }
                  v34 += v63;
                }
              }
            }
          }
          ++v33;
          v27 = v60;
        }
        while (v33 != v60);
      }
      ++v30;
    }
    while (v30 != v59);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
}

void sub_206934E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  v32 = *(void **)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<unsigned char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, char a10)
{
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  long double v49;
  double v50;
  uint64_t v51;
  float v52;
  int v53;
  int v54;
  const char *v55;
  int v56;
  const char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t *v67;
  uint64_t i;
  uint64_t j;
  unsigned int v70;
  uint64_t v71;
  void *__p;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  __int16 v79;
  int __e;
  int64x2_t __src;
  char v82[16];
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v79 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v15 = *(const void **)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v17 = (v16 - *(_QWORD *)a3) >> 3;
  if (v17 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v55 = "x_rank == o_shape.size()";
    v56 = 189;
    goto LABEL_73;
  }
  v18 = v17 - 2;
  v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v55 = "kernel_sizes.size() == num_spatial_dims";
    v56 = 190;
    goto LABEL_73;
  }
  v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v55 = "strides.size() == num_spatial_dims";
    v56 = 191;
LABEL_73:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v56, v55);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        v21 = v20 + 2;
        v61 = (int)v20[1];
        v22 = v19 + 2;
        v71 = (int)v19[1];
        goto LABEL_13;
      }
      v57 = "sz == 1";
      v58 = 202;
    }
    else
    {
      v57 = "kd == 1";
      v58 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v58, v57);
  }
  if (v18 <= 1)
  {
    v25 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v25);
    v21 = (_DWORD *)((char *)v20 + v25);
    v71 = 1;
    v61 = 1;
  }
  else
  {
    v23 = 4 * v17 - 16;
    v71 = *(int *)((char *)v19 + v23);
    v24 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v24);
    v61 = *(int *)((char *)v20 + v23);
    v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_13:
  v63 = *v21;
  v70 = *v22;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v76, v15, v16, v17);
  __p = 0;
  v74 = 0;
  v75 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v76, (uint64_t)v76 + 8, __src.i8, v82, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v82, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v76, (char *)v76 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  v26 = *(_QWORD *)__p;
  v27 = *((_QWORD *)__p + 1);
  v62 = *((_QWORD *)__p + 2);
  v28 = *((_QWORD *)__p + 4);
  v64 = *((_QWORD *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v79);
  __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    v30 = 0;
    v31 = v70;
    if (v70 <= 1)
      v31 = 1;
    v32 = v31;
    v67 = a9;
    v59 = v26;
    v60 = v27;
    v65 = v28;
    do
    {
      if (v27)
      {
        v33 = 0;
        do
        {
          if (v62)
          {
            for (i = 0; i != v62; ++i)
            {
              if (v64)
              {
                v34 = 0;
                for (j = 0; j != v64; ++j)
                {
                  if (v28)
                  {
                    v35 = 0;
                    do
                    {
                      if (v71)
                      {
                        v36 = 0;
                        v37 = 0;
                        do
                        {
                          if (v70)
                          {
                            v38 = 0;
                            do
                            {
                              v39 = *(unsigned __int16 *)(a1
                                                        + 2
                              if (v38 | v36)
                              {
                                if (a10)
                                {
                                  LOWORD(__e) = v37;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  v41 = v40;
                                  LOWORD(__e) = v39;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  if (v41 < v42)
                                    v39 = v39;
                                  else
                                    v39 = v37;
                                }
                                else
                                {
                                  LOWORD(__e) = v37;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  v44 = v43;
                                  LOWORD(__e) = v39;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  if (v44 > v45)
                                    v39 = v39;
                                  else
                                    v39 = v37;
                                }
                              }
                              ++v38;
                              LODWORD(v37) = v39;
                            }
                            while (v32 != v38);
                          }
                          else
                          {
                            v39 = v37;
                          }
                          ++v36;
                          v37 = v39;
                        }
                        while (v36 != v71);
                      }
                      else
                      {
                        LOWORD(v39) = 0;
                      }
                      LOWORD(__e) = v39;
                      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                      v28 = v65;
                      v47 = v46 * *(float *)(__src.i64[0] + 4 * v35);
                      v48 = 0.0;
                      if (v47 != 0.0)
                      {
                        __e = 0;
                        v49 = frexp(v47, &__e);
                        v50 = ldexp(v49, 11);
                        v48 = ldexp(round(v50), __e - 11);
                      }
                      __e = LODWORD(v48);
                      v51 = *(_QWORD *)(a8 + 24);
                      if (!v51)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v52 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v51 + 48))(v51, &__e);
                      if (v52 == INFINITY)
                      {
                        LOBYTE(v53) = -1;
                      }
                      else if (v52 == -INFINITY)
                      {
                        LOBYTE(v53) = 0;
                      }
                      else
                      {
                        v54 = llroundf(v52);
                        if (v54 >= 255)
                          v54 = 255;
                        v53 = v54 & ~(v54 >> 31);
                      }
                      *(_BYTE *)(*v67
                    }
                    while (v35 != v65);
                  }
                  v34 += v63;
                }
              }
            }
          }
          ++v33;
          v27 = v60;
        }
        while (v33 != v60);
      }
      ++v30;
    }
    while (v30 != v59);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
}

void sub_206935494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  v32 = *(void **)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<signed char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, char a10)
{
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  long double v49;
  double v50;
  uint64_t v51;
  float v52;
  char v53;
  int v54;
  const char *v55;
  int v56;
  const char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t *v67;
  uint64_t i;
  uint64_t j;
  unsigned int v70;
  uint64_t v71;
  void *__p;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  __int16 v79;
  int __e;
  int64x2_t __src;
  char v82[16];
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v79 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v15 = *(const void **)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v17 = (v16 - *(_QWORD *)a3) >> 3;
  if (v17 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v55 = "x_rank == o_shape.size()";
    v56 = 189;
    goto LABEL_75;
  }
  v18 = v17 - 2;
  v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v55 = "kernel_sizes.size() == num_spatial_dims";
    v56 = 190;
    goto LABEL_75;
  }
  v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v55 = "strides.size() == num_spatial_dims";
    v56 = 191;
LABEL_75:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v56, v55);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        v21 = v20 + 2;
        v61 = (int)v20[1];
        v22 = v19 + 2;
        v71 = (int)v19[1];
        goto LABEL_13;
      }
      v57 = "sz == 1";
      v58 = 202;
    }
    else
    {
      v57 = "kd == 1";
      v58 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v58, v57);
  }
  if (v18 <= 1)
  {
    v25 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v25);
    v21 = (_DWORD *)((char *)v20 + v25);
    v71 = 1;
    v61 = 1;
  }
  else
  {
    v23 = 4 * v17 - 16;
    v71 = *(int *)((char *)v19 + v23);
    v24 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v24);
    v61 = *(int *)((char *)v20 + v23);
    v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_13:
  v63 = *v21;
  v70 = *v22;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v76, v15, v16, v17);
  __p = 0;
  v74 = 0;
  v75 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v76, (uint64_t)v76 + 8, __src.i8, v82, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v82, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v76, (char *)v76 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  v26 = *(_QWORD *)__p;
  v27 = *((_QWORD *)__p + 1);
  v62 = *((_QWORD *)__p + 2);
  v28 = *((_QWORD *)__p + 4);
  v64 = *((_QWORD *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v79);
  __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    v30 = 0;
    v31 = v70;
    if (v70 <= 1)
      v31 = 1;
    v32 = v31;
    v67 = a9;
    v59 = v26;
    v60 = v27;
    v65 = v28;
    do
    {
      if (v27)
      {
        v33 = 0;
        do
        {
          if (v62)
          {
            for (i = 0; i != v62; ++i)
            {
              if (v64)
              {
                v34 = 0;
                for (j = 0; j != v64; ++j)
                {
                  if (v28)
                  {
                    v35 = 0;
                    do
                    {
                      if (v71)
                      {
                        v36 = 0;
                        v37 = 0;
                        do
                        {
                          if (v70)
                          {
                            v38 = 0;
                            do
                            {
                              v39 = *(unsigned __int16 *)(a1
                                                        + 2
                              if (v38 | v36)
                              {
                                if (a10)
                                {
                                  LOWORD(__e) = v37;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  v41 = v40;
                                  LOWORD(__e) = v39;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  if (v41 < v42)
                                    v39 = v39;
                                  else
                                    v39 = v37;
                                }
                                else
                                {
                                  LOWORD(__e) = v37;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  v44 = v43;
                                  LOWORD(__e) = v39;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  if (v44 > v45)
                                    v39 = v39;
                                  else
                                    v39 = v37;
                                }
                              }
                              ++v38;
                              LODWORD(v37) = v39;
                            }
                            while (v32 != v38);
                          }
                          else
                          {
                            v39 = v37;
                          }
                          ++v36;
                          v37 = v39;
                        }
                        while (v36 != v71);
                      }
                      else
                      {
                        LOWORD(v39) = 0;
                      }
                      LOWORD(__e) = v39;
                      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                      v28 = v65;
                      v47 = v46 * *(float *)(__src.i64[0] + 4 * v35);
                      v48 = 0.0;
                      if (v47 != 0.0)
                      {
                        __e = 0;
                        v49 = frexp(v47, &__e);
                        v50 = ldexp(v49, 11);
                        v48 = ldexp(round(v50), __e - 11);
                      }
                      __e = LODWORD(v48);
                      v51 = *(_QWORD *)(a8 + 24);
                      if (!v51)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v52 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v51 + 48))(v51, &__e);
                      if (v52 == INFINITY)
                      {
                        v53 = 127;
                      }
                      else if (v52 == -INFINITY)
                      {
                        v53 = 0x80;
                      }
                      else
                      {
                        v54 = llroundf(v52);
                        if (v54 >= 127)
                          v54 = 127;
                        if (v54 <= -128)
                          v53 = 0x80;
                        else
                          v53 = v54;
                      }
                      *(_BYTE *)(*v67
                    }
                    while (v35 != v65);
                  }
                  v34 += v63;
                }
              }
            }
          }
          ++v33;
          v27 = v60;
        }
        while (v33 != v60);
      }
      ++v30;
    }
    while (v30 != v59);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
}

void sub_206935AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  v32 = *(void **)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<MIL::Fp16,unsigned char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, char a10)
{
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Index;
  unsigned int v40;
  float v41;
  float v42;
  long double v43;
  double v44;
  uint64_t v45;
  MIL::Fp16 *v46;
  float v47;
  __int16 v48;
  const char *v49;
  int v50;
  const char *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v61;
  uint64_t i;
  uint64_t j;
  unsigned int v64;
  uint64_t v65;
  void *__p;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  __int16 v73;
  int __e;
  int64x2_t __src;
  char v76[16];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v73 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  v15 = *(const void **)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v17 = (v16 - *(_QWORD *)a3) >> 3;
  if (v17 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v49 = "x_rank == o_shape.size()";
    v50 = 189;
    goto LABEL_59;
  }
  v18 = v17 - 2;
  v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v49 = "kernel_sizes.size() == num_spatial_dims";
    v50 = 190;
    goto LABEL_59;
  }
  v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v49 = "strides.size() == num_spatial_dims";
    v50 = 191;
LABEL_59:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v50, v49);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        v21 = v20 + 2;
        v55 = (int)v20[1];
        v22 = v19 + 2;
        v65 = (int)v19[1];
        goto LABEL_11;
      }
      v51 = "sz == 1";
      v52 = 202;
    }
    else
    {
      v51 = "kd == 1";
      v52 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v52, v51);
  }
  if (v18 <= 1)
  {
    v25 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v25);
    v21 = (_DWORD *)((char *)v20 + v25);
    v65 = 1;
    v55 = 1;
  }
  else
  {
    v23 = 4 * v17 - 16;
    v65 = *(int *)((char *)v19 + v23);
    v24 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v24);
    v55 = *(int *)((char *)v20 + v23);
    v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_11:
  v57 = *v21;
  v64 = *v22;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v70, v15, v16, v17);
  __p = 0;
  v68 = 0;
  v69 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v70, (uint64_t)v70 + 8, __src.i8, v76, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v76, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v70, (char *)v70 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  v26 = *(_QWORD *)__p;
  v27 = *((_QWORD *)__p + 1);
  v56 = *((_QWORD *)__p + 2);
  v28 = *((_QWORD *)__p + 4);
  v58 = *((_QWORD *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v73);
  __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    v30 = 0;
    v31 = v64;
    if (v64 <= 1)
      v31 = 1;
    v32 = v31;
    v61 = a9;
    v53 = v26;
    v54 = v27;
    v59 = v28;
    do
    {
      if (v27)
      {
        v33 = 0;
        do
        {
          if (v56)
          {
            for (i = 0; i != v56; ++i)
            {
              if (v58)
              {
                v34 = 0;
                for (j = 0; j != v58; ++j)
                {
                  if (v28)
                  {
                    v35 = 0;
                    do
                    {
                      v36 = a10 - 1;
                      if (v65)
                      {
                        v37 = 0;
                        v36 = a10 - 1;
                        do
                        {
                          if (v64)
                          {
                            v38 = 0;
                            do
                            {
                              v40 = *(unsigned __int8 *)(a1 + Index);
                              if (v38 | v37)
                              {
                                if (a10)
                                {
                                  if (v36 <= v40)
                                    v36 = *(_BYTE *)(a1 + Index);
                                }
                                else if (v36 >= v40)
                                {
                                  v36 = *(_BYTE *)(a1 + Index);
                                }
                              }
                              else
                              {
                                v36 = *(_BYTE *)(a1 + Index);
                              }
                              ++v38;
                            }
                            while (v32 != v38);
                          }
                          ++v37;
                        }
                        while (v37 != v65);
                      }
                      v41 = *(float *)(__src.i64[0] + 4 * v35) * (float)v36;
                      v42 = 0.0;
                      if (v41 != 0.0)
                      {
                        __e = 0;
                        v43 = frexp(v41, &__e);
                        v44 = ldexp(v43, 11);
                        v42 = ldexp(round(v44), __e - 11);
                      }
                      __e = LODWORD(v42);
                      v45 = *(_QWORD *)(a8 + 24);
                      if (!v45)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v46 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v45 + 48))(v45, &__e);
                      v48 = MIL::Fp16::FromFloat(v46, v47);
                      *(_WORD *)(*v61
                               + 2
                      v28 = v59;
                    }
                    while (v35 != v59);
                  }
                  v34 += v57;
                }
              }
            }
          }
          ++v33;
          v27 = v54;
        }
        while (v33 != v54);
      }
      ++v30;
    }
    while (v30 != v53);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
}

void sub_2069360B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  v32 = *(void **)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<unsigned char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, char a10)
{
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Index;
  unsigned int v40;
  float v41;
  float v42;
  long double v43;
  double v44;
  uint64_t v45;
  float v46;
  int v47;
  int v48;
  const char *v49;
  int v50;
  const char *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t *v61;
  uint64_t i;
  uint64_t j;
  unsigned int v64;
  uint64_t v65;
  void *__p;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  __int16 v73;
  int __e;
  int64x2_t __src;
  char v76[16];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v73 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v15 = *(const void **)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v17 = (v16 - *(_QWORD *)a3) >> 3;
  if (v17 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v49 = "x_rank == o_shape.size()";
    v50 = 189;
    goto LABEL_68;
  }
  v18 = v17 - 2;
  v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v49 = "kernel_sizes.size() == num_spatial_dims";
    v50 = 190;
    goto LABEL_68;
  }
  v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v49 = "strides.size() == num_spatial_dims";
    v50 = 191;
LABEL_68:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v50, v49);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        v21 = v20 + 2;
        v55 = (int)v20[1];
        v22 = v19 + 2;
        v65 = (int)v19[1];
        goto LABEL_13;
      }
      v51 = "sz == 1";
      v52 = 202;
    }
    else
    {
      v51 = "kd == 1";
      v52 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v52, v51);
  }
  if (v18 <= 1)
  {
    v25 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v25);
    v21 = (_DWORD *)((char *)v20 + v25);
    v65 = 1;
    v55 = 1;
  }
  else
  {
    v23 = 4 * v17 - 16;
    v65 = *(int *)((char *)v19 + v23);
    v24 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v24);
    v55 = *(int *)((char *)v20 + v23);
    v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_13:
  v57 = *v21;
  v64 = *v22;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v70, v15, v16, v17);
  __p = 0;
  v68 = 0;
  v69 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v70, (uint64_t)v70 + 8, __src.i8, v76, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v76, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v70, (char *)v70 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  v26 = *(_QWORD *)__p;
  v27 = *((_QWORD *)__p + 1);
  v56 = *((_QWORD *)__p + 2);
  v28 = *((_QWORD *)__p + 4);
  v58 = *((_QWORD *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v73);
  __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    v30 = 0;
    v31 = v64;
    if (v64 <= 1)
      v31 = 1;
    v32 = v31;
    v61 = a9;
    v53 = v26;
    v54 = v27;
    v59 = v28;
    do
    {
      if (v27)
      {
        v33 = 0;
        do
        {
          if (v56)
          {
            for (i = 0; i != v56; ++i)
            {
              if (v58)
              {
                v34 = 0;
                for (j = 0; j != v58; ++j)
                {
                  if (v28)
                  {
                    v35 = 0;
                    do
                    {
                      v36 = a10 - 1;
                      if (v65)
                      {
                        v37 = 0;
                        v36 = a10 - 1;
                        do
                        {
                          if (v64)
                          {
                            v38 = 0;
                            do
                            {
                              v40 = *(unsigned __int8 *)(a1 + Index);
                              if (v38 | v37)
                              {
                                if (a10)
                                {
                                  if (v36 <= v40)
                                    v36 = *(_BYTE *)(a1 + Index);
                                }
                                else if (v36 >= v40)
                                {
                                  v36 = *(_BYTE *)(a1 + Index);
                                }
                              }
                              else
                              {
                                v36 = *(_BYTE *)(a1 + Index);
                              }
                              ++v38;
                            }
                            while (v32 != v38);
                          }
                          ++v37;
                        }
                        while (v37 != v65);
                      }
                      v41 = *(float *)(__src.i64[0] + 4 * v35) * (float)v36;
                      v42 = 0.0;
                      if (v41 != 0.0)
                      {
                        __e = 0;
                        v43 = frexp(v41, &__e);
                        v44 = ldexp(v43, 11);
                        v42 = ldexp(round(v44), __e - 11);
                      }
                      __e = LODWORD(v42);
                      v45 = *(_QWORD *)(a8 + 24);
                      v28 = v59;
                      if (!v45)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v46 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v45 + 48))(v45, &__e);
                      if (v46 == INFINITY)
                      {
                        LOBYTE(v47) = -1;
                      }
                      else if (v46 == -INFINITY)
                      {
                        LOBYTE(v47) = 0;
                      }
                      else
                      {
                        v48 = llroundf(v46);
                        if (v48 >= 255)
                          v48 = 255;
                        v47 = v48 & ~(v48 >> 31);
                      }
                      *(_BYTE *)(*v61
                    }
                    while (v35 != v59);
                  }
                  v34 += v57;
                }
              }
            }
          }
          ++v33;
          v27 = v54;
        }
        while (v33 != v54);
      }
      ++v30;
    }
    while (v30 != v53);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
}

void sub_2069366B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  v32 = *(void **)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<signed char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, char a10)
{
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Index;
  unsigned int v40;
  float v41;
  float v42;
  long double v43;
  double v44;
  uint64_t v45;
  float v46;
  char v47;
  int v48;
  const char *v49;
  int v50;
  const char *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t *v61;
  uint64_t i;
  uint64_t j;
  unsigned int v64;
  uint64_t v65;
  void *__p;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  __int16 v73;
  int __e;
  int64x2_t __src;
  char v76[16];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v73 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v15 = *(const void **)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v17 = (v16 - *(_QWORD *)a3) >> 3;
  if (v17 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v49 = "x_rank == o_shape.size()";
    v50 = 189;
    goto LABEL_70;
  }
  v18 = v17 - 2;
  v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v49 = "kernel_sizes.size() == num_spatial_dims";
    v50 = 190;
    goto LABEL_70;
  }
  v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v49 = "strides.size() == num_spatial_dims";
    v50 = 191;
LABEL_70:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v50, v49);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        v21 = v20 + 2;
        v55 = (int)v20[1];
        v22 = v19 + 2;
        v65 = (int)v19[1];
        goto LABEL_13;
      }
      v51 = "sz == 1";
      v52 = 202;
    }
    else
    {
      v51 = "kd == 1";
      v52 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v52, v51);
  }
  if (v18 <= 1)
  {
    v25 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v25);
    v21 = (_DWORD *)((char *)v20 + v25);
    v65 = 1;
    v55 = 1;
  }
  else
  {
    v23 = 4 * v17 - 16;
    v65 = *(int *)((char *)v19 + v23);
    v24 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v24);
    v55 = *(int *)((char *)v20 + v23);
    v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_13:
  v57 = *v21;
  v64 = *v22;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v70, v15, v16, v17);
  __p = 0;
  v68 = 0;
  v69 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v70, (uint64_t)v70 + 8, __src.i8, v76, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v76, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v70, (char *)v70 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  v26 = *(_QWORD *)__p;
  v27 = *((_QWORD *)__p + 1);
  v56 = *((_QWORD *)__p + 2);
  v28 = *((_QWORD *)__p + 4);
  v58 = *((_QWORD *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v73);
  __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    v30 = 0;
    v31 = v64;
    if (v64 <= 1)
      v31 = 1;
    v32 = v31;
    v61 = a9;
    v53 = v26;
    v54 = v27;
    v59 = v28;
    do
    {
      if (v27)
      {
        v33 = 0;
        do
        {
          if (v56)
          {
            for (i = 0; i != v56; ++i)
            {
              if (v58)
              {
                v34 = 0;
                for (j = 0; j != v58; ++j)
                {
                  if (v28)
                  {
                    v35 = 0;
                    do
                    {
                      v36 = a10 - 1;
                      if (v65)
                      {
                        v37 = 0;
                        v36 = a10 - 1;
                        do
                        {
                          if (v64)
                          {
                            v38 = 0;
                            do
                            {
                              v40 = *(unsigned __int8 *)(a1 + Index);
                              if (v38 | v37)
                              {
                                if (a10)
                                {
                                  if (v36 <= v40)
                                    v36 = *(_BYTE *)(a1 + Index);
                                }
                                else if (v36 >= v40)
                                {
                                  v36 = *(_BYTE *)(a1 + Index);
                                }
                              }
                              else
                              {
                                v36 = *(_BYTE *)(a1 + Index);
                              }
                              ++v38;
                            }
                            while (v32 != v38);
                          }
                          ++v37;
                        }
                        while (v37 != v65);
                      }
                      v41 = *(float *)(__src.i64[0] + 4 * v35) * (float)v36;
                      v42 = 0.0;
                      if (v41 != 0.0)
                      {
                        __e = 0;
                        v43 = frexp(v41, &__e);
                        v44 = ldexp(v43, 11);
                        v42 = ldexp(round(v44), __e - 11);
                      }
                      __e = LODWORD(v42);
                      v45 = *(_QWORD *)(a8 + 24);
                      v28 = v59;
                      if (!v45)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v46 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v45 + 48))(v45, &__e);
                      if (v46 == INFINITY)
                      {
                        v47 = 127;
                      }
                      else if (v46 == -INFINITY)
                      {
                        v47 = 0x80;
                      }
                      else
                      {
                        v48 = llroundf(v46);
                        if (v48 >= 127)
                          v48 = 127;
                        if (v48 <= -128)
                          v47 = 0x80;
                        else
                          v47 = v48;
                      }
                      *(_BYTE *)(*v61
                    }
                    while (v35 != v59);
                  }
                  v34 += v57;
                }
              }
            }
          }
          ++v33;
          v27 = v54;
        }
        while (v33 != v54);
      }
      ++v30;
    }
    while (v30 != v53);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
}

void sub_206936CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  v32 = *(void **)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<MIL::Fp16,signed char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, char a10)
{
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Index;
  char v41;
  float v42;
  float v43;
  long double v44;
  double v45;
  uint64_t v46;
  MIL::Fp16 *v47;
  float v48;
  __int16 v49;
  const char *v50;
  int v51;
  const char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v62;
  uint64_t i;
  uint64_t j;
  char v65;
  unsigned int v66;
  uint64_t v67;
  void *__p;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  __int16 v75;
  int __e;
  int64x2_t __src;
  char v78[16];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v75 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  v15 = *(const void **)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v17 = (v16 - *(_QWORD *)a3) >> 3;
  if (v17 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v50 = "x_rank == o_shape.size()";
    v51 = 189;
    goto LABEL_62;
  }
  v18 = v17 - 2;
  v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v50 = "kernel_sizes.size() == num_spatial_dims";
    v51 = 190;
    goto LABEL_62;
  }
  v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v50 = "strides.size() == num_spatial_dims";
    v51 = 191;
LABEL_62:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v51, v50);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        v21 = v20 + 2;
        v56 = (int)v20[1];
        v22 = v19 + 2;
        v67 = (int)v19[1];
        goto LABEL_11;
      }
      v52 = "sz == 1";
      v53 = 202;
    }
    else
    {
      v52 = "kd == 1";
      v53 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v53, v52);
  }
  if (v18 <= 1)
  {
    v25 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v25);
    v21 = (_DWORD *)((char *)v20 + v25);
    v67 = 1;
    v56 = 1;
  }
  else
  {
    v23 = 4 * v17 - 16;
    v67 = *(int *)((char *)v19 + v23);
    v24 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v24);
    v56 = *(int *)((char *)v20 + v23);
    v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_11:
  v58 = *v21;
  v66 = *v22;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v72, v15, v16, v17);
  __p = 0;
  v70 = 0;
  v71 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v72, (uint64_t)v72 + 8, __src.i8, v78, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v78, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v72, (char *)v72 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  v26 = *(_QWORD *)__p;
  v27 = *((_QWORD *)__p + 1);
  v57 = *((_QWORD *)__p + 2);
  v28 = *((_QWORD *)__p + 4);
  v59 = *((_QWORD *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v75);
  __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    v30 = 0;
    if (a10)
      v31 = 0x80;
    else
      v31 = 127;
    v65 = v31;
    v32 = v66;
    if (v66 <= 1)
      v32 = 1;
    v33 = v32;
    v62 = a9;
    v54 = v26;
    v55 = v27;
    v60 = v28;
    do
    {
      if (v27)
      {
        v34 = 0;
        do
        {
          if (v57)
          {
            for (i = 0; i != v57; ++i)
            {
              if (v59)
              {
                v35 = 0;
                for (j = 0; j != v59; ++j)
                {
                  if (v28)
                  {
                    v36 = 0;
                    do
                    {
                      v37 = v65;
                      if (v67)
                      {
                        v38 = 0;
                        v37 = v65;
                        do
                        {
                          if (v66)
                          {
                            v39 = 0;
                            do
                            {
                              v41 = *(_BYTE *)(a1 + Index);
                              if (v39 | v38)
                              {
                                if (a10)
                                {
                                  if (v37 <= v41)
                                    v37 = *(_BYTE *)(a1 + Index);
                                }
                                else if (v37 > v41)
                                {
                                  v37 = *(_BYTE *)(a1 + Index);
                                }
                              }
                              else
                              {
                                v37 = *(_BYTE *)(a1 + Index);
                              }
                              ++v39;
                            }
                            while (v33 != v39);
                          }
                          ++v38;
                        }
                        while (v38 != v67);
                      }
                      v42 = *(float *)(__src.i64[0] + 4 * v36) * (float)v37;
                      v43 = 0.0;
                      if (v42 != 0.0)
                      {
                        __e = 0;
                        v44 = frexp(v42, &__e);
                        v45 = ldexp(v44, 11);
                        v43 = ldexp(round(v45), __e - 11);
                      }
                      __e = LODWORD(v43);
                      v46 = *(_QWORD *)(a8 + 24);
                      if (!v46)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v47 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v46 + 48))(v46, &__e);
                      v49 = MIL::Fp16::FromFloat(v47, v48);
                      *(_WORD *)(*v62
                               + 2
                      v28 = v60;
                    }
                    while (v36 != v60);
                  }
                  v35 += v58;
                }
              }
            }
          }
          ++v34;
          v27 = v55;
        }
        while (v34 != v55);
      }
      ++v30;
    }
    while (v30 != v54);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    v70 = __p;
    operator delete(__p);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
}

void sub_206937294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  v32 = *(void **)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::`anonymous namespace'::ComputeValueMinMaxPool<unsigned char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, char a10)
{
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Index;
  char v41;
  float v42;
  float v43;
  long double v44;
  double v45;
  uint64_t v46;
  float v47;
  int v48;
  int v49;
  const char *v50;
  int v51;
  const char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t *v62;
  uint64_t i;
  uint64_t j;
  char v65;
  unsigned int v66;
  uint64_t v67;
  void *__p;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  __int16 v75;
  int __e;
  int64x2_t __src;
  char v78[16];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v75 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2)
    std::vector<unsigned char>::__append(a9, a2);
  v15 = *(const void **)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v17 = (v16 - *(_QWORD *)a3) >> 3;
  if (v17 != (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)
  {
    v50 = "x_rank == o_shape.size()";
    v51 = 189;
    goto LABEL_71;
  }
  v18 = v17 - 2;
  v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2)
  {
    v50 = "kernel_sizes.size() == num_spatial_dims";
    v51 = 190;
    goto LABEL_71;
  }
  v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2)
  {
    v50 = "strides.size() == num_spatial_dims";
    v51 = 191;
LABEL_71:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v51, v50);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        v21 = v20 + 2;
        v56 = (int)v20[1];
        v22 = v19 + 2;
        v67 = (int)v19[1];
        goto LABEL_13;
      }
      v52 = "sz == 1";
      v53 = 202;
    }
    else
    {
      v52 = "kd == 1";
      v53 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v53, v52);
  }
  if (v18 <= 1)
  {
    v25 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v25);
    v21 = (_DWORD *)((char *)v20 + v25);
    v67 = 1;
    v56 = 1;
  }
  else
  {
    v23 = 4 * v17 - 16;
    v67 = *(int *)((char *)v19 + v23);
    v24 = 4 * v17 - 12;
    v22 = (_DWORD *)((char *)v19 + v24);
    v56 = *(int *)((char *)v20 + v23);
    v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_13:
  v58 = *v21;
  v66 = *v22;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v72, v15, v16, v17);
  __p = 0;
  v70 = 0;
  v71 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v17 == 3)
  {
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v72, (uint64_t)v72 + 8, __src.i8, v78, 2);
    __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v78, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v72, (char *)v72 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  v26 = *(_QWORD *)__p;
  v27 = *((_QWORD *)__p + 1);
  v57 = *((_QWORD *)__p + 2);
  v28 = *((_QWORD *)__p + 4);
  v59 = *((_QWORD *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v75);
  __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    v30 = 0;
    if (a10)
      v31 = 0x80;
    else
      v31 = 127;
    v65 = v31;
    v32 = v66;
    if (v66 <= 1)
      v32 = 1;
    v33 = v32;
    v62 = a9;
    v54 = v26;
    v55 = v27;
    v60 = v28;
    do
    {
      if (v27)
      {
        v34 = 0;
        do
        {
          if (v57)
          {
            for (i = 0; i != v57; ++i)
            {
              if (v59)
              {
                v35 = 0;
                for (j = 0; j != v59; ++j)
                {
                  if (v28)
                  {
                    v36 = 0;
                    do
                    {
                      v37 = v65;
                      if (v67)
                      {
                        v38 = 0;
                        v37 = v65;
                        do
                        {
                          if (v66)
                          {
                            v39 = 0;
                            do
                            {
                              v41 = *(_BYTE *)(a1 + Index);
                              if (v39 | v38)
                              {
                                if (a10)
                                {
                                  if (v37 <= v41)
                                    v37 = *(_BYTE *)(a1 + Index);
                                }
                                else if (v37 > v41)
                                {
                                  v37 = *(_BYTE *)(a1 + Index);
                                }
                              }
                              else
                              {
                                v37 = *(_BYTE *)(a1 + Index);
                              }
                              ++v39;
                            }
                            while (v33 != v39);
                          }
                          ++v38;
                        }
                        while (v38 != v67);
                      }
                      v42 = *(float *)(__src.i64[0] + 4 * v36) * (float)v37;
                      v43 = 0.0;
                      if (v42 != 0.0)
                      {
                        __e = 0;
                        v44 = frexp(v42, &__e);
                        v45 = ldexp(v44, 11);
                        v43 = ldexp(round(v45), __e - 11);
                      }
                      __e = LODWORD(v43);
                      v46 = *(_QWORD *)(a8 + 24);
                      v28 = v60;
                      if (!v46)
                        std::__throw_bad_function_call[abi:ne180100]();
                      v47 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v46 + 48))(v46, &__e);
                      if (v47 == INFINITY)
                      {
                        LOBYTE(v48) = -1;
                      }
                      else if (v47 == -INFINITY)
                      {
                        LOBYTE(v48) = 0;
                      }
                      else
                      {
                        v49 = llroundf(v47);
                        if (v49 >= 255)
                          v49 = 255;
                        v48 = v49 & ~(v49 >> 31);
                      }
                      *(_BYTE *)(*v62
                    }
                    while (v36 != v60);
                  }
                  v35 += v58;
                }
              }
            }
          }
          ++v34;
          v27 = v55;
        }
        while (v34 != v55);
      }
      ++v30;
    }
    while (v30 != v54);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    v70 = __p;
    operator delete(__p);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
}

