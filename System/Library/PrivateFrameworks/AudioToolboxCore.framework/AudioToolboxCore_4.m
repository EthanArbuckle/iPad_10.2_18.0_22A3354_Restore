uint64_t AUProcessingBlockBase::sAUSetProperty(AUProcessingBlockBase *this, void *a2, OpaqueRemoteAudioUnit *a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *, OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, const void *))(*(_QWORD *)this + 56))(this, a2, a3, a4, a5, a6, a7);
}

uint64_t AUProcessingBlockBase::sAUGetParameter(AUProcessingBlockBase *this, void *a2, OpaqueRemoteAudioUnit *a3, unsigned int a4, unsigned int a5, unsigned int a6, float *a7)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *, OpaqueRemoteAudioUnit *))(*(_QWORD *)this + 64))(this, a2, a3);
}

uint64_t AUProcessingBlockBase::sAUSetParameter(AUProcessingBlockBase *this, void *a2, OpaqueRemoteAudioUnit *a3, float a4)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *, OpaqueRemoteAudioUnit *, float))(*(_QWORD *)this + 72))(this, a2, a3, a4);
}

void AUProcessingBlockBase::AUProcessingBlockBase(AUProcessingBlockBase *this)
{
  AUProcessingBlockBase::AUProcessingBlockBase(this, &stru_1E2923288);
}

void AUProcessingBlockBase::UnitsChanged(AUProcessingBlockBase *this, int a2, OpaqueRemoteAudioUnit **a3)
{
  size_t v5;
  _DWORD *v6;
  int v7;
  void *__p[3];

  if (a2 && a3)
  {
    v5 = (8 * a2);
    std::vector<unsigned char>::vector(__p, (v5 + 8));
    v6 = __p[0];
    *(_DWORD *)__p[0] = 1685417580;
    v6[1] = v5;
    memcpy(v6 + 2, a3, v5);
    v7 = 1685417580;
    AUPBPropertiesChanged(*((_QWORD *)this + 2), 1, (uint64_t)&v7, (uint64_t)v6, (v5 + 8));
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_18EFC024C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUProcessingBlockBase_NonAU::AddItemToBlock(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t **v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31[2];
  int v32;

  v6 = (std::__shared_weak_count *)a3[1];
  v31[0] = *a3;
  v31[1] = (unint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  AUProcessingBlockBase_NonAU::RemoveItemFromBlock((_QWORD *)a1, v31);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v27 = *a2;
  v28 = *((_DWORD *)a2 + 2);
  v29 = 0;
  v30 = *a3;
  std::vector<AUPBUnit>::insert(a1 + 24, *(char **)(a1 + 24), (unint64_t)&v27);
  v11 = AUPBRegisterAU(*(_QWORD *)(a1 + 16), v30);
  if ((_DWORD)v11)
  {
    v13 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    if (v12 != v13)
    {
      v14 = v12 - (v13 + 24);
      if (v12 != v13 + 24)
        memmove(*(void **)(a1 + 24), (const void *)(v13 + 24), v12 - (v13 + 24));
      *(_QWORD *)(a1 + 32) = v13 + v14;
    }
  }
  else
  {
    v16 = (uint64_t **)(a1 + 56);
    v15 = *(uint64_t **)(a1 + 56);
    if (v15)
    {
      v17 = *a3;
      while (1)
      {
        while (1)
        {
          v18 = (uint64_t **)v15;
          v19 = v15[4];
          if (v17 >= v19)
            break;
          v15 = *v18;
          v16 = v18;
          if (!*v18)
            goto LABEL_23;
        }
        if (v19 >= v17)
          break;
        v15 = v18[1];
        if (!v15)
        {
          v16 = v18 + 1;
          goto LABEL_23;
        }
      }
    }
    else
    {
      v18 = (uint64_t **)(a1 + 56);
LABEL_23:
      v20 = (uint64_t *)operator new(0x30uLL);
      v21 = v20;
      v22 = a3[1];
      v20[4] = *a3;
      v20[5] = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      *v20 = 0;
      v20[1] = 0;
      v20[2] = (uint64_t)v18;
      *v16 = v20;
      v25 = **(_QWORD **)(a1 + 48);
      if (v25)
      {
        *(_QWORD *)(a1 + 48) = v25;
        v21 = *v16;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v21);
      ++*(_QWORD *)(a1 + 64);
    }
  }
  v32 = 1635087726;
  AUPBPropertiesChanged(*(_QWORD *)(a1 + 16), 1, (uint64_t)&v32, 0, 0);
  return v11;
}

void sub_18EFC044C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CA::extractMetadata(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  double v40;
  uint64_t *v41;
  double v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t *v45;
  __int128 v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::string *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  int v61;
  char v62;
  int v63;
  int v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t **v95;
  uint64_t *v96;
  uint64_t *v97;
  char *v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t **v106;
  uint64_t *v107;
  char *v108;
  uint64_t *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  char *v115;
  uint64_t *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  char *v120;
  unint64_t *v121;
  unint64_t v122;
  char *v123;
  uint64_t *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  unint64_t *v129;
  unint64_t v130;
  char *v131;
  __int128 *v132;
  uint64_t v133;
  uint64_t *v134;
  __int128 v135;
  __int128 v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::string *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::string *v146;
  unint64_t *v147;
  unint64_t v148;
  int v149;
  int v150;
  char v151;
  int v152;
  int v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  unsigned int v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t *v169;
  unint64_t *v170;
  unint64_t v171;
  double v172;
  double v173;
  uint64_t *v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t **v183;
  uint64_t *v184;
  uint64_t *v185;
  char *v186;
  uint64_t *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t **v194;
  uint64_t *v195;
  char *v196;
  uint64_t *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  char *v203;
  uint64_t *v204;
  unint64_t *v205;
  unint64_t v206;
  char *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  char *v211;
  uint64_t *v212;
  double v213;
  uint64_t *v214;
  double v215;
  uint64_t *v216;
  BOOL v217;
  int v218;
  char v219;
  char v220;
  char v221;
  char v222;
  unsigned int v223;
  char *v224;
  char *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  uint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  uint64_t *v236;
  char *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t **v245;
  uint64_t *v246;
  uint64_t *v247;
  unint64_t *v248;
  unint64_t v249;
  char *v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  uint64_t *v254;
  unint64_t *v255;
  unint64_t v256;
  char *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  char TypeDefinition;
  uint64_t *v262;
  unint64_t *v263;
  unint64_t v264;
  char *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  int v269;
  char *v270;
  char *v271;
  uint64_t v272;
  char **v273;
  uint64_t v274;
  char **v275;
  uint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t *v279;
  char *v280;
  char *v281;
  char *v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t **v288;
  uint64_t *v289;
  uint64_t *v290;
  char *v291;
  char *v292;
  char *v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t **v299;
  uint64_t *v300;
  char *v301;
  uint64_t *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  char *v308;
  uint64_t *v309;
  unint64_t *v310;
  unint64_t v311;
  char *v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  char *v316;
  char v317;
  std::string *v318;
  char v319;
  char v320;
  char v321;
  char v322;
  char v323;
  char v324;
  char v325;
  char v326;
  char v327;
  int v328;
  char *v329;
  uint64_t *v330;
  unint64_t *v331;
  unint64_t v332;
  char *v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  unint64_t *v353;
  unint64_t v354;
  uint64_t *v355;
  uint64_t *v356;
  unint64_t v357;
  char *v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 *v368;
  __int128 *v369;
  unint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  __int128 *v373;
  uint64_t *v374;
  __int128 v375;
  __int128 v376;
  std::string *v377;
  __int128 v378;
  __int128 *v379;
  uint64_t v380;
  uint64_t v381;
  double v382;
  double v383;
  std::string::size_type v384;
  char *v385;
  char *v386;
  char *v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  std::string::size_type *v393;
  std::string::size_type v394;
  std::string::size_type v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t *v399;
  void *v400;
  int64_t v401;
  char *v402;
  uint64_t v403;
  std::__shared_weak_count *i;
  unint64_t *v405;
  unint64_t v406;
  char *v407;
  unint64_t *v408;
  unint64_t v409;
  double v410;
  double v411;
  char v412;
  float v413;
  char v414;
  BOOL v415;
  int v416;
  unint64_t *v417;
  unint64_t v418;
  char *v419;
  unint64_t *v420;
  unint64_t v421;
  BOOL v422;
  int *v424;
  int *v425;
  uint64_t *v426;
  char *v427;
  std::string::size_type v428;
  std::string::size_type v429;
  uint64_t v430;
  unint64_t v431;
  int64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t **v435;
  uint64_t *v436;
  std::__shared_weak_count *v437;
  uint64_t *v438;
  unint64_t *v439;
  unint64_t v440;
  const char *v441;
  size_t v442;
  uint64_t v443;
  void *v444;
  uint64_t **v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  unint64_t *v449;
  unint64_t v450;
  uint64_t *v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  unint64_t *v463;
  unint64_t v464;
  unint64_t *v465;
  unint64_t v466;
  void *v467;
  unint64_t *v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  std::__shared_weak_count *v473;
  std::__shared_weak_count *v474;
  std::__shared_weak_count *v475;
  uint64_t v476;
  unint64_t *v477;
  unint64_t v478;
  std::__shared_weak_count *v479;
  char *v480;
  std::__shared_weak_count *size;
  unint64_t *v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  std::string::size_type v486;
  uint64_t v487;
  unint64_t *v488;
  unint64_t v489;
  uint64_t *v490;
  char *v491;
  _QWORD *v492;
  char *v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t **v499;
  uint64_t *v500;
  uint64_t *v501;
  BOOL v502;
  float v503;
  float v504;
  unint64_t *v505;
  unint64_t v506;
  char *v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  uint64_t *v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  std::string *v515;
  unint64_t *v516;
  unint64_t v517;
  uint64_t *v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  char *v522;
  unint64_t *v523;
  unint64_t v524;
  char *v525;
  char **v526;
  std::__shared_weak_count *v527;
  unint64_t *v528;
  unint64_t v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  unint64_t *v533;
  unint64_t v534;
  unint64_t *v535;
  unint64_t v536;
  uint64_t *v537;
  unint64_t *v538;
  unint64_t v539;
  std::__shared_weak_count *v540;
  unint64_t *v541;
  unint64_t v542;
  std::__shared_weak_count *v543;
  unint64_t *v544;
  unint64_t v545;
  uint64_t *v546;
  unint64_t *v547;
  unint64_t v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  char *v552;
  char **v553;
  char **v554;
  uint64_t *v555;
  char *v556;
  char *v557;
  char *v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t **v564;
  uint64_t *v565;
  uint64_t *v566;
  char *v567;
  char *v568;
  char *v569;
  uint64_t v570;
  unint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t **v575;
  uint64_t *v576;
  char *v577;
  uint64_t *v578;
  unint64_t *v579;
  unint64_t v580;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  char *v584;
  std::__shared_weak_count *v585;
  uint64_t v586;
  unint64_t *v587;
  unint64_t v588;
  std::__shared_weak_count *v589;
  uint64_t *v590;
  char *v591;
  char *v592;
  char *v593;
  uint64_t v594;
  unint64_t v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t **v599;
  uint64_t *v600;
  unint64_t *v601;
  unint64_t v602;
  char *v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  unint64_t v606;
  unint64_t *v607;
  unint64_t v608;
  char *v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  unint64_t *v613;
  unint64_t v614;
  char *v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  unint64_t *v619;
  unint64_t v620;
  char *v621;
  std::__shared_weak_count *v622;
  unint64_t *v623;
  unint64_t v624;
  std::__shared_weak_count *v625;
  std::__shared_weak_count *v626;
  uint64_t v627;
  char *v628;
  char *v629;
  char *v630;
  uint64_t v631;
  unint64_t v632;
  uint64_t v633;
  unint64_t v634;
  uint64_t v635;
  char *v636;
  uint64_t v637;
  char *v638;
  _QWORD *v639;
  unint64_t *v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  std::string::size_type v645;
  uint64_t v646;
  unint64_t *v647;
  unint64_t v648;
  char *v649;
  std::__shared_weak_count *v650;
  unint64_t *v651;
  unint64_t v652;
  std::string::size_type v653;
  uint64_t v654;
  unint64_t *v655;
  unint64_t v656;
  char *v657;
  std::__shared_weak_count *v658;
  unint64_t *v659;
  unint64_t v660;
  std::string::size_type v661;
  uint64_t v662;
  unint64_t *v663;
  unint64_t v664;
  char *v665;
  std::__shared_weak_count *v666;
  unint64_t *v667;
  unint64_t v668;
  char *v669;
  char **v670;
  std::__shared_weak_count *v671;
  unint64_t *v672;
  unint64_t v673;
  unint64_t *v674;
  unint64_t v675;
  char *v676;
  char *v677;
  char ***v678;
  char ***v679;
  char v680;
  std::string::size_type v681;
  uint64_t v682;
  int v683;
  __int128 *v684;
  uint64_t v685;
  std::string *p_s1;
  int v687;
  int v688;
  int v689;
  int v690;
  BOOL v692;
  BOOL v693;
  char *v694;
  char **v695;
  unint64_t *v696;
  unint64_t v697;
  unint64_t *v698;
  unint64_t v699;
  std::__shared_weak_count *v700;
  unint64_t *v701;
  unint64_t v702;
  uint64_t *v703;
  unint64_t *v704;
  unint64_t v705;
  std::__shared_weak_count *v706;
  unint64_t *v707;
  unint64_t v708;
  std::__shared_weak_count *v709;
  unint64_t *v710;
  unint64_t v711;
  unint64_t *v712;
  unint64_t v713;
  std::__shared_weak_count *v714;
  unint64_t *v715;
  unint64_t v716;
  uint64_t *v717;
  unint64_t *v718;
  unint64_t v719;
  std::__shared_weak_count *v720;
  unint64_t *v721;
  unint64_t v722;
  std::__shared_weak_count *v723;
  unint64_t *v724;
  unint64_t v725;
  uint64_t *v726;
  std::__shared_weak_count *v727;
  unint64_t *v728;
  unint64_t v729;
  unint64_t *v730;
  unint64_t v731;
  std::__shared_weak_count *v732;
  unint64_t *v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t *v736;
  unint64_t *v737;
  unint64_t v738;
  unint64_t *v739;
  unint64_t v740;
  uint64_t v741;
  std::__shared_weak_count *v742;
  unint64_t *v743;
  unint64_t v744;
  std::__shared_weak_count *v745;
  unint64_t *v746;
  unint64_t v747;
  uint64_t v748;
  std::__shared_weak_count *v749;
  unint64_t *v750;
  unint64_t v751;
  std::__shared_weak_count *v752;
  unint64_t *v753;
  unint64_t v754;
  uint64_t v755;
  std::__shared_weak_count *v756;
  unint64_t *v757;
  unint64_t v758;
  std::__shared_weak_count *v759;
  unint64_t *v760;
  unint64_t v761;
  uint64_t v762;
  std::__shared_weak_count *v763;
  unint64_t *v764;
  unint64_t v765;
  std::__shared_weak_count *v766;
  unint64_t *v767;
  unint64_t v768;
  uint64_t v769;
  std::__shared_weak_count *v770;
  unint64_t *v771;
  unint64_t v772;
  std::__shared_weak_count *v773;
  unint64_t *v774;
  unint64_t v775;
  uint64_t v776;
  std::__shared_weak_count *v777;
  unint64_t *v778;
  unint64_t v779;
  std::__shared_weak_count *v780;
  unint64_t *v781;
  unint64_t v782;
  uint64_t v783;
  std::__shared_weak_count *v784;
  unint64_t *v785;
  unint64_t v786;
  std::__shared_weak_count *v787;
  unint64_t *v788;
  unint64_t v789;
  uint64_t v790;
  uint64_t *v791;
  uint64_t v793;
  char **v794;
  uint64_t *v795;
  std::__shared_weak_count *v796;
  char **v797;
  char **v798;
  char **v799;
  uint64_t v800;
  std::__shared_weak_count *v801;
  uint64_t *v803;
  std::__shared_weak_count *v804;
  uint64_t *v805;
  std::__shared_weak_count *v806;
  uint64_t *v807;
  std::__shared_weak_count *v808;
  uint64_t *v809;
  std::__shared_weak_count *v810;
  uint64_t *v811;
  std::__shared_weak_count *v812;
  uint64_t *v813;
  std::__shared_weak_count *v814;
  uint64_t *v815;
  std::__shared_weak_count *v816;
  uint64_t *v817[2];
  uint64_t *v818[2];
  uint64_t *v819;
  std::__shared_weak_count *v820;
  uint64_t *v821;
  std::__shared_weak_count *v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  uint64_t *v827;
  std::__shared_weak_count *v828;
  uint64_t *v829;
  std::__shared_weak_count *v830;
  uint64_t *v831;
  std::__shared_weak_count *v832;
  uint64_t *v833;
  std::__shared_weak_count *v834;
  uint64_t *v835;
  std::__shared_weak_count *v836;
  uint64_t *v837;
  std::__shared_weak_count *v838;
  uint64_t *v839;
  std::__shared_weak_count *v840;
  void *v841;
  char *v842;
  char *v843;
  int v844[2];
  std::__shared_weak_count *v845;
  int v846[2];
  uint64_t *v847;
  uint64_t v848;
  uint64_t *v849;
  std::__shared_weak_count *v850;
  std::string v851;
  std::string v852;
  uint64_t *v853;
  std::__shared_weak_count *v854;
  uint64_t *v855;
  std::__shared_weak_count *v856;
  int v857[2];
  std::__shared_weak_count *v858;
  void *v859;
  char *v860;
  unint64_t v861;
  char **v862;
  char **v863;
  char **v864;
  void *v865;
  char *v866;
  unint64_t v867;
  uint64_t *v868;
  std::__shared_weak_count *v869;
  std::string v870;
  uint64_t *v871;
  std::__shared_weak_count *v872;
  uint64_t *v873;
  std::__shared_weak_count *v874;
  int v875[2];
  std::__shared_weak_count *v876;
  _QWORD *v877;
  _QWORD *v878;
  _QWORD *v879;
  uint64_t *v880;
  std::__shared_weak_count *v881;
  uint64_t *v882;
  std::__shared_weak_count *v883;
  int v884[2];
  std::__shared_weak_count *v885;
  uint64_t *v886;
  uint64_t *v887;
  uint64_t *v888;
  void *v889;
  uint64_t *v890;
  unint64_t v891;
  uint64_t *v892[2];
  uint64_t *v893[2];
  uint64_t *v894[2];
  int v895[2];
  uint64_t *v896;
  uint64_t *v897;
  uint64_t *v898;
  uint64_t *v899;
  void *v900;
  uint64_t *v901;
  unint64_t v902;
  uint64_t *v903[2];
  uint64_t *v904[2];
  uint64_t *v905[2];
  int v906[2];
  uint64_t *v907;
  void *v908;
  char *v909;
  unint64_t v910;
  void *v911;
  char *v912;
  unint64_t v913;
  void *v914;
  char *v915;
  unint64_t v916;
  void *v917;
  char *v918;
  unint64_t v919;
  void *v920;
  char *v921;
  unint64_t v922;
  void *v923;
  char *v924;
  unint64_t v925;
  void *v926;
  char *v927;
  unint64_t v928;
  void *v929;
  char *v930;
  unint64_t v931;
  uint64_t *v932[2];
  uint64_t *v933[2];
  uint64_t *v934;
  std::__shared_weak_count *v935;
  std::string __s1;
  char v937;
  std::string v938;
  std::string v939;
  char v940;
  char v941;
  uint64_t v942;
  __int128 v943;
  _BYTE v944[32];
  uint64_t *v945;
  uint64_t *v946;
  __int128 v947;
  int64_t v948;
  uint64_t *v949;
  std::__shared_weak_count *v950;

  AudioMetadataMemoryPool::create<AudioMetadataFormatExtended>(a3, (uint64_t)a1);
  v930 = 0;
  v929 = 0;
  v931 = 0;
  v927 = 0;
  v926 = 0;
  v928 = 0;
  v924 = 0;
  v923 = 0;
  v925 = 0;
  v921 = 0;
  v920 = 0;
  v922 = 0;
  v918 = 0;
  v917 = 0;
  v919 = 0;
  v915 = 0;
  v914 = 0;
  v916 = 0;
  v912 = 0;
  v911 = 0;
  v913 = 0;
  v909 = 0;
  v908 = 0;
  v910 = 0;
  v4 = *a2;
  v790 = a2[1];
  if (*a2 != v790)
  {
    while (1)
    {
      v793 = v4;
      AudioMetadataMemoryPool::create<AudioMetadataProgramme>(v906, (uint64_t)a1);
      v7 = *(uint64_t **)v906;
      v8 = v930;
      if ((unint64_t)v930 >= v931)
      {
        v10 = (char *)v929;
        v11 = (v930 - (_BYTE *)v929) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v13 = v931 - (_QWORD)v929;
        if ((uint64_t)(v931 - (_QWORD)v929) >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v14);
        else
          v15 = 0;
        v16 = (uint64_t **)(v14 + 8 * v11);
        *v16 = v7;
        v9 = (char *)(v16 + 1);
        if (v8 != v10)
        {
          do
          {
            v17 = (uint64_t *)*((_QWORD *)v8 - 1);
            v8 -= 8;
            *--v16 = v17;
          }
          while (v8 != v10);
          v8 = (char *)v929;
        }
        v929 = v16;
        v931 = v14 + 8 * v15;
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_QWORD *)v930 = *(_QWORD *)v906;
        v9 = v8 + 8;
      }
      v930 = v9;
      if (*(_BYTE *)(v793 + 24))
      {
        v18 = *(uint64_t **)v906;
        v19 = (std::__shared_weak_count *)v907;
        v905[0] = *(uint64_t **)v906;
        v905[1] = v907;
        if (v907)
        {
          v20 = (unint64_t *)(v907 + 1);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = (char *)v793;
        if (*(char *)(v793 + 23) < 0)
          v22 = *(char **)v793;
        AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(a1, v905, v18, v22);
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      if (*(_BYTE *)(v793 + 56))
      {
        v25 = *(uint64_t **)v906;
        v26 = (std::__shared_weak_count *)v907;
        v904[0] = *(uint64_t **)v906;
        v904[1] = v907;
        if (v907)
        {
          v27 = (unint64_t *)(v907 + 1);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = (char *)(v793 + 32);
        if (*(char *)(v793 + 55) < 0)
          v29 = *(char **)v29;
        AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(a1, v904, v25 + 1, v29);
        if (v26)
        {
          v30 = (unint64_t *)&v26->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
      if (*(_BYTE *)(v793 + 88))
      {
        v32 = *(uint64_t **)v906;
        v33 = (std::__shared_weak_count *)v907;
        v903[0] = *(uint64_t **)v906;
        v903[1] = v907;
        if (v907)
        {
          v34 = (unint64_t *)(v907 + 1);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = (char *)(v793 + 64);
        if (*(char *)(v793 + 87) < 0)
          v36 = *(char **)v36;
        AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(a1, v903, v32 + 2, v36);
        if (v33)
        {
          v37 = (unint64_t *)&v33->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      if (*(_BYTE *)(v793 + 120))
      {
        v39 = *(uint64_t **)v906;
        *(_BYTE *)(*(_QWORD *)v906 + 24) = 1;
        if (*(_BYTE *)(v793 + 112))
        {
          LODWORD(v5) = *(_DWORD *)(v793 + 104);
          LODWORD(v6) = *(_DWORD *)(v793 + 108);
          v40 = (double)*(unint64_t *)&v5 / (double)*(unint64_t *)&v6;
        }
        else
        {
          v40 = *(double *)(v793 + 104);
        }
        v6 = (double)*(unsigned int *)(v793 + 96);
        v5 = (v40 + v6) * 48000.0;
        *(double *)((char *)v39 + 28) = v5;
      }
      if (*(_BYTE *)(v793 + 152))
      {
        v41 = *(uint64_t **)v906;
        *(_BYTE *)(*(_QWORD *)v906 + 36) = 1;
        if (*(_BYTE *)(v793 + 144))
        {
          LODWORD(v5) = *(_DWORD *)(v793 + 136);
          LODWORD(v6) = *(_DWORD *)(v793 + 140);
          v42 = (double)*(unint64_t *)&v5 / (double)*(unint64_t *)&v6;
        }
        else
        {
          v42 = *(double *)(v793 + 136);
        }
        *((double *)v41 + 5) = (v42 + (double)*(unsigned int *)(v793 + 128)) * 48000.0;
      }
      if (*(_BYTE *)(v793 + 164))
        *(_DWORD *)(*(_QWORD *)v906 + 48) = *(_DWORD *)(v793 + 160);
      v43 = *(__int128 **)(v793 + 216);
      v44 = *(_QWORD *)(v793 + 224) - (_QWORD)v43;
      if (0x8E38E38E38E38E39 * (v44 >> 4) >= 2)
        __assert_rtn("extractMetadata", "AudioMetadataExtractor.cpp", 421, "audioProgram.loudness_metadata.size() <= 1");
      if (v44 == 144)
        break;
LABEL_122:
      if (*(_BYTE *)(v793 + 284))
      {
        v71 = *(uint64_t **)v906;
        *(_BYTE *)(*(_QWORD *)v906 + 148) = 1;
        if (*(_BYTE *)(v793 + 249))
          *((_BYTE *)v71 + 140) = *(_BYTE *)(v793 + 248);
        else
          *((_BYTE *)v71 + 140) = 0;
        v72 = 0;
        v73 = 0;
        if (*(_BYTE *)(v793 + 256))
          v73 = *(_DWORD *)(v793 + 252);
        *((_DWORD *)v71 + 32) = v73;
        if (*(_BYTE *)(v793 + 264))
          v72 = *(_DWORD *)(v793 + 260);
        *((_DWORD *)v71 + 33) = v72;
        if (*(_BYTE *)(v793 + 272))
          v74 = *(_DWORD *)(v793 + 268);
        else
          v74 = 0;
        *((_DWORD *)v71 + 34) = v74;
        v75 = 0;
        v76 = 0;
        if (*(_BYTE *)(v793 + 280))
          v76 = *(_DWORD *)(v793 + 276);
        *((_DWORD *)v71 + 36) = v76;
        if (*(_BYTE *)(v793 + 244))
          v75 = *(_DWORD *)(v793 + 240);
        *((_DWORD *)v71 + 31) = v75;
      }
      v901 = 0;
      v900 = 0;
      v902 = 0;
      v898 = 0;
      v897 = 0;
      v899 = 0;
      v77 = *(uint64_t **)(v793 + 192);
      v78 = *(uint64_t **)(v793 + 200);
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v897;
      __s1.__r_.__value_.__s.__data_[8] = 0;
      v79 = (char *)v78 - (char *)v77;
      if (v78 != v77)
      {
        if (v79 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v80 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v79 >> 4);
        v897 = v80;
        v898 = v80;
        v899 = &v80[2 * v81];
        v795 = v80;
        do
        {
          *v80 = *v77;
          v82 = v77[1];
          v83 = v80;
          v80[1] = v82;
          if (v82)
          {
            v84 = (unint64_t *)(v82 + 8);
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
          v77 += 2;
          v80 += 2;
        }
        while (v77 != v78);
        v898 = v83 + 2;
        if (v80 != v795)
        {
          v791 = v83 + 2;
          while (1)
          {
            AudioMetadataMemoryPool::create<AudioMetadataContent>(v895, (uint64_t)a1);
            v86 = *(uint64_t **)v895;
            v87 = v927;
            if ((unint64_t)v927 >= v928)
            {
              v89 = (char *)v926;
              v90 = (v927 - (_BYTE *)v926) >> 3;
              v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v92 = v928 - (_QWORD)v926;
              if ((uint64_t)(v928 - (_QWORD)v926) >> 2 > v91)
                v91 = v92 >> 2;
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
                v93 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v93 = v91;
              if (v93)
                v93 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v93);
              else
                v94 = 0;
              v95 = (uint64_t **)(v93 + 8 * v90);
              *v95 = v86;
              v88 = (char *)(v95 + 1);
              if (v87 != v89)
              {
                do
                {
                  v96 = (uint64_t *)*((_QWORD *)v87 - 1);
                  v87 -= 8;
                  *--v95 = v96;
                }
                while (v87 != v89);
                v87 = (char *)v926;
              }
              v926 = v95;
              v928 = v93 + 8 * v94;
              if (v87)
                operator delete(v87);
            }
            else
            {
              *(_QWORD *)v927 = *(_QWORD *)v895;
              v88 = v87 + 8;
            }
            v927 = v88;
            v97 = *(uint64_t **)v895;
            v98 = (char *)v901;
            if ((unint64_t)v901 >= v902)
            {
              v100 = (char *)v900;
              v101 = ((char *)v901 - (_BYTE *)v900) >> 3;
              v102 = v101 + 1;
              if ((unint64_t)(v101 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v103 = v902 - (_QWORD)v900;
              if ((uint64_t)(v902 - (_QWORD)v900) >> 2 > v102)
                v102 = v103 >> 2;
              if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
                v104 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v104 = v102;
              if (v104)
                v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v104);
              else
                v105 = 0;
              v106 = (uint64_t **)(v104 + 8 * v101);
              *v106 = v97;
              v99 = (uint64_t *)(v106 + 1);
              if (v98 != v100)
              {
                do
                {
                  v107 = (uint64_t *)*((_QWORD *)v98 - 1);
                  v98 -= 8;
                  *--v106 = v107;
                }
                while (v98 != v100);
                v98 = (char *)v900;
              }
              v900 = v106;
              v902 = v104 + 8 * v105;
              if (v98)
                operator delete(v98);
            }
            else
            {
              *v901 = *(_QWORD *)v895;
              v99 = (uint64_t *)(v98 + 8);
            }
            v901 = v99;
            v108 = (char *)*v795;
            if (*(_BYTE *)(*v795 + 24))
            {
              v109 = *(uint64_t **)v895;
              v110 = (std::__shared_weak_count *)v896;
              v894[0] = *(uint64_t **)v895;
              v894[1] = v896;
              if (v896)
              {
                v111 = (unint64_t *)(v896 + 1);
                do
                  v112 = __ldxr(v111);
                while (__stxr(v112 + 1, v111));
                v108 = (char *)*v795;
              }
              if (v108[23] < 0)
                v108 = *(char **)v108;
              AudioMetadataMemoryPool::fillString<AudioMetadataContent>(a1, v894, v109, v108);
              if (v110)
              {
                v113 = (unint64_t *)&v110->__shared_owners_;
                do
                  v114 = __ldaxr(v113);
                while (__stlxr(v114 - 1, v113));
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
            }
            v115 = (char *)*v795;
            if (*(_BYTE *)(*v795 + 56))
            {
              v116 = *(uint64_t **)v895;
              v117 = (std::__shared_weak_count *)v896;
              v893[0] = *(uint64_t **)v895;
              v893[1] = v896;
              if (v896)
              {
                v118 = (unint64_t *)(v896 + 1);
                do
                  v119 = __ldxr(v118);
                while (__stxr(v119 + 1, v118));
                v115 = (char *)*v795;
              }
              v120 = v115 + 32;
              if (v115[55] < 0)
                v120 = *(char **)v120;
              AudioMetadataMemoryPool::fillString<AudioMetadataContent>(a1, v893, v116 + 1, v120);
              if (v117)
              {
                v121 = (unint64_t *)&v117->__shared_owners_;
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                }
              }
            }
            v123 = (char *)*v795;
            if (*(_BYTE *)(*v795 + 88))
            {
              v124 = *(uint64_t **)v895;
              v125 = (std::__shared_weak_count *)v896;
              v892[0] = *(uint64_t **)v895;
              v892[1] = v896;
              if (v896)
              {
                v126 = (unint64_t *)(v896 + 1);
                do
                  v127 = __ldxr(v126);
                while (__stxr(v127 + 1, v126));
                v123 = (char *)*v795;
              }
              v128 = v123 + 64;
              if (v123[87] < 0)
                v128 = *(char **)v128;
              AudioMetadataMemoryPool::fillString<AudioMetadataContent>(a1, v892, v124 + 2, v128);
              if (v125)
              {
                v129 = (unint64_t *)&v125->__shared_owners_;
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 - 1, v129));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                  std::__shared_weak_count::__release_weak(v125);
                }
              }
            }
            v131 = (char *)*v795;
            v132 = *(__int128 **)(*v795 + 144);
            v133 = *(_QWORD *)(*v795 + 152) - (_QWORD)v132;
            if (0x8E38E38E38E38E39 * (v133 >> 4) >= 2)
              __assert_rtn("extractMetadata", "AudioMetadataExtractor.cpp", 461, "audioContent->loudness_metadata.size() <= 1");
            if (v133 == 144)
              break;
LABEL_275:
            if (v131[171] && v131[169])
            {
              v160 = v131[168];
              if (v160 >= 3)
                __assert_rtn("mapDialogType", "AudioMetadataExtractor.cpp", 61, "false");
              v161 = *(uint64_t **)v895;
              *(_BYTE *)(*(_QWORD *)v895 + 96) = v160 + 1;
              *((_BYTE *)v161 + 97) = v131[170];
            }
            v890 = 0;
            v889 = 0;
            v891 = 0;
            v887 = 0;
            v886 = 0;
            v888 = 0;
            v162 = (uint64_t *)*((_QWORD *)v131 + 15);
            v163 = (uint64_t *)*((_QWORD *)v131 + 16);
            __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v886;
            __s1.__r_.__value_.__s.__data_[8] = 0;
            v164 = (char *)v163 - (char *)v162;
            if (v163 != v162)
            {
              if (v164 < 0)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v165 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v164 >> 4);
              v886 = v165;
              v887 = v165;
              v888 = &v165[2 * v166];
              v167 = v165;
              do
              {
                *v165 = *v162;
                v168 = v162[1];
                v169 = v165;
                v165[1] = v168;
                if (v168)
                {
                  v170 = (unint64_t *)(v168 + 8);
                  do
                    v171 = __ldxr(v170);
                  while (__stxr(v171 + 1, v170));
                }
                v162 += 2;
                v165 += 2;
              }
              while (v162 != v163);
              v887 = v169 + 2;
              if (v165 != v167)
              {
                v794 = (char **)(v169 + 2);
                while (1)
                {
                  v797 = (char **)v167;
                  AudioMetadataMemoryPool::create<AudioMetadataObject>(v884, (uint64_t)a1);
                  v174 = *(uint64_t **)v884;
                  v175 = v924;
                  if ((unint64_t)v924 >= v925)
                  {
                    v177 = (char *)v923;
                    v178 = (v924 - (_BYTE *)v923) >> 3;
                    v179 = v178 + 1;
                    if ((unint64_t)(v178 + 1) >> 61)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v180 = v925 - (_QWORD)v923;
                    if ((uint64_t)(v925 - (_QWORD)v923) >> 2 > v179)
                      v179 = v180 >> 2;
                    if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8)
                      v181 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v181 = v179;
                    if (v181)
                      v181 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v181);
                    else
                      v182 = 0;
                    v183 = (uint64_t **)(v181 + 8 * v178);
                    *v183 = v174;
                    v176 = (char *)(v183 + 1);
                    if (v175 != v177)
                    {
                      do
                      {
                        v184 = (uint64_t *)*((_QWORD *)v175 - 1);
                        v175 -= 8;
                        *--v183 = v184;
                      }
                      while (v175 != v177);
                      v175 = (char *)v923;
                    }
                    v923 = v183;
                    v925 = v181 + 8 * v182;
                    if (v175)
                      operator delete(v175);
                  }
                  else
                  {
                    *(_QWORD *)v924 = *(_QWORD *)v884;
                    v176 = v175 + 8;
                  }
                  v924 = v176;
                  v185 = *(uint64_t **)v884;
                  v186 = (char *)v890;
                  if ((unint64_t)v890 >= v891)
                  {
                    v188 = (char *)v889;
                    v189 = ((char *)v890 - (_BYTE *)v889) >> 3;
                    v190 = v189 + 1;
                    if ((unint64_t)(v189 + 1) >> 61)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v191 = v891 - (_QWORD)v889;
                    if ((uint64_t)(v891 - (_QWORD)v889) >> 2 > v190)
                      v190 = v191 >> 2;
                    if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8)
                      v192 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v192 = v190;
                    if (v192)
                      v192 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v192);
                    else
                      v193 = 0;
                    v194 = (uint64_t **)(v192 + 8 * v189);
                    *v194 = v185;
                    v187 = (uint64_t *)(v194 + 1);
                    if (v186 != v188)
                    {
                      do
                      {
                        v195 = (uint64_t *)*((_QWORD *)v186 - 1);
                        v186 -= 8;
                        *--v194 = v195;
                      }
                      while (v186 != v188);
                      v186 = (char *)v889;
                    }
                    v889 = v194;
                    v891 = v192 + 8 * v193;
                    if (v186)
                      operator delete(v186);
                  }
                  else
                  {
                    *v890 = *(_QWORD *)v884;
                    v187 = (uint64_t *)(v186 + 8);
                  }
                  v890 = v187;
                  v196 = *v797;
                  if ((*v797)[24])
                  {
                    v197 = *(uint64_t **)v884;
                    v882 = *(uint64_t **)v884;
                    v883 = v885;
                    if (v885)
                    {
                      v198 = (unint64_t *)&v885->__shared_owners_;
                      do
                        v199 = __ldxr(v198);
                      while (__stxr(v199 + 1, v198));
                      v196 = *v797;
                    }
                    if (v196[23] < 0)
                      v196 = *(char **)v196;
                    AudioMetadataMemoryPool::fillString<AudioMetadataObject>(a1, &v882, v197, v196);
                    v200 = v883;
                    if (v883)
                    {
                      v201 = (unint64_t *)&v883->__shared_owners_;
                      do
                        v202 = __ldaxr(v201);
                      while (__stlxr(v202 - 1, v201));
                      if (!v202)
                      {
                        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                        std::__shared_weak_count::__release_weak(v200);
                      }
                    }
                  }
                  v203 = *v797;
                  if ((*v797)[56])
                  {
                    v204 = *(uint64_t **)v884;
                    v880 = *(uint64_t **)v884;
                    v881 = v885;
                    if (v885)
                    {
                      v205 = (unint64_t *)&v885->__shared_owners_;
                      do
                        v206 = __ldxr(v205);
                      while (__stxr(v206 + 1, v205));
                      v203 = *v797;
                    }
                    v207 = v203 + 32;
                    if (v203[55] < 0)
                      v207 = *(char **)v207;
                    AudioMetadataMemoryPool::fillString<AudioMetadataObject>(a1, &v880, v204 + 1, v207);
                    v208 = v881;
                    if (v881)
                    {
                      v209 = (unint64_t *)&v881->__shared_owners_;
                      do
                        v210 = __ldaxr(v209);
                      while (__stlxr(v210 - 1, v209));
                      if (!v210)
                      {
                        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                        std::__shared_weak_count::__release_weak(v208);
                      }
                    }
                  }
                  v211 = *v797;
                  if ((*v797)[88])
                  {
                    v212 = *(uint64_t **)v884;
                    *(_BYTE *)(*(_QWORD *)v884 + 16) = 1;
                    if (v211[80])
                    {
                      LODWORD(v172) = *((_DWORD *)v211 + 18);
                      LODWORD(v173) = *((_DWORD *)v211 + 19);
                      v213 = (double)*(unint64_t *)&v172 / (double)*(unint64_t *)&v173;
                    }
                    else
                    {
                      v213 = *((double *)v211 + 9);
                    }
                    v173 = (double)*((unsigned int *)v211 + 16);
                    v172 = (v213 + v173) * 48000.0;
                    *(double *)((char *)v212 + 20) = v172;
                  }
                  if (v211[120])
                  {
                    v214 = *(uint64_t **)v884;
                    *(_BYTE *)(*(_QWORD *)v884 + 28) = 1;
                    if (v211[112])
                    {
                      LODWORD(v172) = *((_DWORD *)v211 + 26);
                      LODWORD(v173) = *((_DWORD *)v211 + 27);
                      v215 = (double)*(unint64_t *)&v172 / (double)*(unint64_t *)&v173;
                    }
                    else
                    {
                      v215 = *((double *)v211 + 13);
                    }
                    *((double *)v214 + 4) = (v215 + (double)*((unsigned int *)v211 + 24)) * 48000.0;
                  }
                  if (v211[384])
                  {
                    v216 = *(uint64_t **)v884;
                    *(_DWORD *)(*(_QWORD *)v884 + 164) = *((_DWORD *)v211 + 94);
                    v217 = v211[380] != 0;
                  }
                  else
                  {
                    v217 = 0;
                    v216 = *(uint64_t **)v884;
                    *(_DWORD *)(*(_QWORD *)v884 + 164) = 1065353216;
                  }
                  *((_BYTE *)v216 + 170) = v217;
                  if (v211[136])
                    v218 = *((_DWORD *)v211 + 33);
                  else
                    LOBYTE(v218) = 10;
                  *((_BYTE *)v216 + 169) = v218;
                  if (v211[141])
                    *((_BYTE *)v216 + 172) = v211[140];
                  if (v211[372])
                  {
                    v219 = v211[289];
                    if (v219)
                      v219 = v211[288];
                    *((_BYTE *)v216 + 84) = v219;
                    v220 = v211[291];
                    if (v220)
                      v220 = v211[290];
                    *((_BYTE *)v216 + 85) = v220;
                    v221 = v211[293];
                    if (v221)
                      v221 = v211[292];
                    *((_BYTE *)v216 + 86) = v221;
                    *((_BYTE *)v216 + 48) = v211[300] != 0;
                    *((_DWORD *)v216 + 10) = *((_DWORD *)v211 + 74);
                    *((_DWORD *)v216 + 11) = *((_DWORD *)v211 + 77);
                    if (v211[369])
                    {
                      v222 = v211[368];
                      *((_BYTE *)v216 + 64) = v222;
                      *((_BYTE *)v216 + 80) = v222;
                      if (v211[324])
                      {
                        *((_DWORD *)v216 + 13) = *((_DWORD *)v211 + 80);
                        v211 = *v797;
                      }
                      if (v211[332])
                      {
                        *((_DWORD *)v216 + 14) = *((_DWORD *)v211 + 82);
                        v211 = *v797;
                      }
                      if (v211[340])
                      {
                        *((_DWORD *)v216 + 15) = *((_DWORD *)v211 + 84);
                        v211 = *v797;
                      }
                      if (v211[348])
                      {
                        *((_DWORD *)v216 + 17) = *((_DWORD *)v211 + 86);
                        v211 = *v797;
                      }
                      if (v211[356])
                      {
                        *((_DWORD *)v216 + 18) = *((_DWORD *)v211 + 88);
                        v211 = *v797;
                      }
                      if (v211[364])
                      {
                        *((_DWORD *)v216 + 19) = *((_DWORD *)v211 + 90);
                        v211 = *v797;
                      }
                    }
                  }
                  if (v211[143])
                    *((_BYTE *)v216 + 171) = v211[142];
                  if (v211[389])
                    *((_BYTE *)v216 + 173) = v211[388];
                  if (v211[419])
                    *((_BYTE *)v216 + 174) = v211[418];
                  if (v211[129])
                  {
                    v223 = v211[128];
                    if (v223 >= 3)
                      __assert_rtn("mapDialogType", "AudioMetadataExtractor.cpp", 61, "false");
                    *((_BYTE *)v216 + 168) = v223 + 1;
                  }
                  if (v211[417])
                  {
                    *((_BYTE *)v216 + 160) = v211[416];
                    if (v211[396])
                    {
                      *((_DWORD *)v216 + 37) = *((_DWORD *)v211 + 98);
                      v211 = *v797;
                    }
                    if (v211[404])
                    {
                      *((_DWORD *)v216 + 38) = *((_DWORD *)v211 + 100);
                      v211 = *v797;
                    }
                    if (v211[412])
                    {
                      *((_DWORD *)v216 + 39) = *((_DWORD *)v211 + 102);
                      v211 = *v797;
                    }
                  }
                  v878 = 0;
                  v877 = 0;
                  v879 = 0;
                  v224 = (char *)*((_QWORD *)v211 + 18);
                  v225 = (char *)*((_QWORD *)v211 + 19);
                  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v877;
                  __s1.__r_.__value_.__s.__data_[8] = 0;
                  v226 = v225 - v224;
                  if (v225 == v224)
                  {
                    v227 = 0;
                  }
                  else
                  {
                    if (v226 < 0)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v227 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v226 >> 4);
                    v877 = v227;
                    v878 = v227;
                    v879 = &v227[2 * v228];
                    v226 = (uint64_t)v227;
                    do
                    {
                      *(_QWORD *)v226 = *(_QWORD *)v224;
                      v229 = *((_QWORD *)v224 + 1);
                      *(_QWORD *)(v226 + 8) = v229;
                      if (v229)
                      {
                        v230 = (unint64_t *)(v229 + 8);
                        do
                          v231 = __ldxr(v230);
                        while (__stxr(v231 + 1, v230));
                      }
                      v224 += 16;
                      v226 += 16;
                    }
                    while (v224 != v225);
                    v878 = (_QWORD *)v226;
                  }
                  if (v226 - (_QWORD)v227 != 16)
                    __assert_rtn("extractMetadata", "AudioMetadataExtractor.cpp", 622, "audioPackFormats.size() == 1");
                  v233 = *v227;
                  v232 = (std::__shared_weak_count *)v227[1];
                  if (v232)
                  {
                    v234 = (unint64_t *)&v232->__shared_owners_;
                    do
                      v235 = __ldxr(v234);
                    while (__stxr(v235 + 1, v234));
                  }
                  v796 = v232;
                  AudioMetadataMemoryPool::create<AudioMetadataPackFormat>(v875, (uint64_t)a1);
                  v236 = *(uint64_t **)v875;
                  v237 = v921;
                  if ((unint64_t)v921 >= v922)
                  {
                    v239 = (char *)v920;
                    v240 = (v921 - (_BYTE *)v920) >> 3;
                    v241 = v240 + 1;
                    if ((unint64_t)(v240 + 1) >> 61)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v242 = v922 - (_QWORD)v920;
                    if ((uint64_t)(v922 - (_QWORD)v920) >> 2 > v241)
                      v241 = v242 >> 2;
                    if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFF8)
                      v243 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v243 = v241;
                    if (v243)
                      v243 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v243);
                    else
                      v244 = 0;
                    v245 = (uint64_t **)(v243 + 8 * v240);
                    *v245 = v236;
                    v238 = (char *)(v245 + 1);
                    if (v237 != v239)
                    {
                      do
                      {
                        v246 = (uint64_t *)*((_QWORD *)v237 - 1);
                        v237 -= 8;
                        *--v245 = v246;
                      }
                      while (v237 != v239);
                      v237 = (char *)v920;
                    }
                    v920 = v245;
                    v922 = v243 + 8 * v244;
                    if (v237)
                      operator delete(v237);
                  }
                  else
                  {
                    *(_QWORD *)v921 = *(_QWORD *)v875;
                    v238 = v237 + 8;
                  }
                  v921 = v238;
                  v247 = *(uint64_t **)v875;
                  *(_QWORD *)(*(_QWORD *)v884 + 104) = *(_QWORD *)v875;
                  if (*(_BYTE *)(v233 + 24))
                  {
                    v873 = v247;
                    v874 = v876;
                    if (v876)
                    {
                      v248 = (unint64_t *)&v876->__shared_owners_;
                      do
                        v249 = __ldxr(v248);
                      while (__stxr(v249 + 1, v248));
                    }
                    v250 = (char *)v233;
                    if (*(char *)(v233 + 23) < 0)
                      v250 = *(char **)v233;
                    AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(a1, &v873, v247, v250);
                    v251 = v874;
                    if (v874)
                    {
                      v252 = (unint64_t *)&v874->__shared_owners_;
                      do
                        v253 = __ldaxr(v252);
                      while (__stlxr(v253 - 1, v252));
                      if (!v253)
                      {
                        ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                        std::__shared_weak_count::__release_weak(v251);
                      }
                    }
                  }
                  if (*(_BYTE *)(v233 + 56))
                  {
                    v254 = *(uint64_t **)v875;
                    v871 = *(uint64_t **)v875;
                    v872 = v876;
                    if (v876)
                    {
                      v255 = (unint64_t *)&v876->__shared_owners_;
                      do
                        v256 = __ldxr(v255);
                      while (__stxr(v256 + 1, v255));
                    }
                    v257 = (char *)(v233 + 32);
                    if (*(char *)(v233 + 55) < 0)
                      v257 = *(char **)v257;
                    AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(a1, &v871, v254 + 1, v257);
                    v258 = v872;
                    if (v872)
                    {
                      v259 = (unint64_t *)&v872->__shared_owners_;
                      do
                        v260 = __ldaxr(v259);
                      while (__stlxr(v260 - 1, v259));
                      if (!v260)
                      {
                        ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                        std::__shared_weak_count::__release_weak(v258);
                      }
                    }
                  }
                  if (*(_BYTE *)(v233 + 120))
                  {
                    if (*(char *)(v233 + 119) < 0)
                      std::string::__init_copy_ctor_external(&v870, *(const std::string::value_type **)(v233 + 96), *(_QWORD *)(v233 + 104));
                    else
                      v870 = *(std::string *)(v233 + 96);
                    *(_BYTE *)(*(_QWORD *)v875 + 24) = TypeDefinition;
                    if (SHIBYTE(v870.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v870.__r_.__value_.__l.__data_);
                  }
                  if (*(_BYTE *)(v233 + 88))
                  {
                    v262 = *(uint64_t **)v875;
                    v868 = *(uint64_t **)v875;
                    v869 = v876;
                    if (v876)
                    {
                      v263 = (unint64_t *)&v876->__shared_owners_;
                      do
                        v264 = __ldxr(v263);
                      while (__stxr(v264 + 1, v263));
                    }
                    v265 = (char *)(v233 + 64);
                    if (*(char *)(v233 + 87) < 0)
                      v265 = *(char **)v265;
                    AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(a1, &v868, v262 + 2, v265);
                    v266 = v869;
                    if (v869)
                    {
                      v267 = (unint64_t *)&v869->__shared_owners_;
                      do
                        v268 = __ldaxr(v267);
                      while (__stlxr(v268 - 1, v267));
                      if (!v268)
                      {
                        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                        std::__shared_weak_count::__release_weak(v266);
                      }
                    }
                  }
                  if (*(_BYTE *)(v233 + 188))
                    *(_DWORD *)(*(_QWORD *)v875 + 52) = *(_DWORD *)(v233 + 184);
                  if (*(_BYTE *)(v233 + 132))
                    v269 = *(_DWORD *)(v233 + 128);
                  else
                    LOBYTE(v269) = 10;
                  *(_BYTE *)(*(_QWORD *)v875 + 96) = v269;
                  v866 = 0;
                  v865 = 0;
                  v867 = 0;
                  v863 = 0;
                  v862 = 0;
                  v864 = 0;
                  v270 = *(char **)(v233 + 136);
                  v271 = *(char **)(v233 + 144);
                  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v862;
                  __s1.__r_.__value_.__s.__data_[8] = 0;
                  v272 = v271 - v270;
                  if (v271 != v270)
                  {
                    if (v272 < 0)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v273 = (char **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v272 >> 4);
                    v862 = v273;
                    v863 = v273;
                    v864 = &v273[2 * v274];
                    v275 = v273;
                    do
                    {
                      *v273 = *(char **)v270;
                      v276 = *((_QWORD *)v270 + 1);
                      v273[1] = (char *)v276;
                      if (v276)
                      {
                        v277 = (unint64_t *)(v276 + 8);
                        do
                          v278 = __ldxr(v277);
                        while (__stxr(v278 + 1, v277));
                      }
                      v270 += 16;
                      v273 += 2;
                    }
                    while (v270 != v271);
                    v863 = v273;
                    if (v273 != v275)
                    {
                      v798 = v273;
                      while (1)
                      {
                        v799 = v275;
                        v860 = 0;
                        v859 = 0;
                        v861 = 0;
                        AudioMetadataMemoryPool::create<AudioMetadataChannelFormat>(v857, (uint64_t)a1);
                        v279 = *(uint64_t **)v857;
                        v280 = v918;
                        if ((unint64_t)v918 >= v919)
                        {
                          v282 = (char *)v917;
                          v283 = (v918 - (_BYTE *)v917) >> 3;
                          v284 = v283 + 1;
                          if ((unint64_t)(v283 + 1) >> 61)
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          v285 = v919 - (_QWORD)v917;
                          if ((uint64_t)(v919 - (_QWORD)v917) >> 2 > v284)
                            v284 = v285 >> 2;
                          if ((unint64_t)v285 >= 0x7FFFFFFFFFFFFFF8)
                            v286 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v286 = v284;
                          if (v286)
                            v286 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v286);
                          else
                            v287 = 0;
                          v288 = (uint64_t **)(v286 + 8 * v283);
                          *v288 = v279;
                          v281 = (char *)(v288 + 1);
                          if (v280 != v282)
                          {
                            do
                            {
                              v289 = (uint64_t *)*((_QWORD *)v280 - 1);
                              v280 -= 8;
                              *--v288 = v289;
                            }
                            while (v280 != v282);
                            v280 = (char *)v917;
                          }
                          v917 = v288;
                          v919 = v286 + 8 * v287;
                          if (v280)
                            operator delete(v280);
                        }
                        else
                        {
                          *(_QWORD *)v918 = *(_QWORD *)v857;
                          v281 = v280 + 8;
                        }
                        v918 = v281;
                        v290 = *(uint64_t **)v857;
                        v291 = v866;
                        if ((unint64_t)v866 >= v867)
                        {
                          v293 = (char *)v865;
                          v294 = (v866 - (_BYTE *)v865) >> 3;
                          v295 = v294 + 1;
                          if ((unint64_t)(v294 + 1) >> 61)
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          v296 = v867 - (_QWORD)v865;
                          if ((uint64_t)(v867 - (_QWORD)v865) >> 2 > v295)
                            v295 = v296 >> 2;
                          if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFF8)
                            v297 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v297 = v295;
                          if (v297)
                            v297 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v297);
                          else
                            v298 = 0;
                          v299 = (uint64_t **)(v297 + 8 * v294);
                          *v299 = v290;
                          v292 = (char *)(v299 + 1);
                          if (v291 != v293)
                          {
                            do
                            {
                              v300 = (uint64_t *)*((_QWORD *)v291 - 1);
                              v291 -= 8;
                              *--v299 = v300;
                            }
                            while (v291 != v293);
                            v291 = (char *)v865;
                          }
                          v865 = v299;
                          v867 = v297 + 8 * v298;
                          if (v291)
                            operator delete(v291);
                        }
                        else
                        {
                          *(_QWORD *)v866 = *(_QWORD *)v857;
                          v292 = v291 + 8;
                        }
                        v866 = v292;
                        v301 = *v799;
                        if ((*v799)[24])
                        {
                          v302 = *(uint64_t **)v857;
                          v855 = *(uint64_t **)v857;
                          v856 = v858;
                          if (v858)
                          {
                            v303 = (unint64_t *)&v858->__shared_owners_;
                            do
                              v304 = __ldxr(v303);
                            while (__stxr(v304 + 1, v303));
                            v301 = *v799;
                          }
                          if (v301[23] < 0)
                            v301 = *(char **)v301;
                          AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(a1, &v855, v302, v301);
                          v305 = v856;
                          if (v856)
                          {
                            v306 = (unint64_t *)&v856->__shared_owners_;
                            do
                              v307 = __ldaxr(v306);
                            while (__stlxr(v307 - 1, v306));
                            if (!v307)
                            {
                              ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                              std::__shared_weak_count::__release_weak(v305);
                            }
                          }
                        }
                        v308 = *v799;
                        if ((*v799)[56])
                        {
                          v309 = *(uint64_t **)v857;
                          v853 = *(uint64_t **)v857;
                          v854 = v858;
                          if (v858)
                          {
                            v310 = (unint64_t *)&v858->__shared_owners_;
                            do
                              v311 = __ldxr(v310);
                            while (__stxr(v311 + 1, v310));
                            v308 = *v799;
                          }
                          v312 = v308 + 32;
                          if (v308[55] < 0)
                            v312 = *(char **)v312;
                          AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(a1, &v853, v309 + 1, v312);
                          v313 = v854;
                          if (v854)
                          {
                            v314 = (unint64_t *)&v854->__shared_owners_;
                            do
                              v315 = __ldaxr(v314);
                            while (__stlxr(v315 - 1, v314));
                            if (!v315)
                            {
                              ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                              std::__shared_weak_count::__release_weak(v313);
                            }
                          }
                        }
                        v316 = *v799;
                        if ((*v799)[120])
                        {
                          if (v316[119] < 0)
                            std::string::__init_copy_ctor_external(&v852, *((const std::string::value_type **)v316 + 12), *((_QWORD *)v316 + 13));
                          else
                            v852 = *(std::string *)(v316 + 4);
                          *(_BYTE *)(*(_QWORD *)v857 + 52) = v317;
                          if ((SHIBYTE(v852.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_570;
                          v318 = &v852;
                          goto LABEL_569;
                        }
                        if (v316[88])
                          break;
LABEL_570:
                        v329 = *v799;
                        if ((*v799)[88])
                        {
                          v330 = *(uint64_t **)v857;
                          v849 = *(uint64_t **)v857;
                          v850 = v858;
                          if (v858)
                          {
                            v331 = (unint64_t *)&v858->__shared_owners_;
                            do
                              v332 = __ldxr(v331);
                            while (__stxr(v332 + 1, v331));
                            v329 = *v799;
                          }
                          v333 = v329 + 64;
                          if (v329[87] < 0)
                            v333 = *(char **)v333;
                          AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(a1, &v849, v330 + 2, v333);
                          v334 = v850;
                          if (v850)
                          {
                            v335 = (unint64_t *)&v850->__shared_owners_;
                            do
                              v336 = __ldaxr(v335);
                            while (__stlxr(v336 - 1, v335));
                            if (!v336)
                            {
                              ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                              std::__shared_weak_count::__release_weak(v334);
                            }
                          }
                        }
                        v337 = *v799;
                        v847 = 0;
                        *(_QWORD *)v846 = 0;
                        v848 = 0;
                        v339 = *((_QWORD *)v337 + 18);
                        v338 = *((_QWORD *)v337 + 19);
                        v949 = (uint64_t *)v846;
                        LOBYTE(v950) = 0;
                        v800 = v338;
                        if (v338 != v339)
                        {
                          v340 = 0xEEEEEEEEEEEEEEEFLL * ((v338 - v339) >> 5);
                          if (v340 >= 0x88888888888889)
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          *(_QWORD *)v846 = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMBlockFormat>>(v340);
                          v847 = *(uint64_t **)v846;
                          v848 = *(_QWORD *)v846 + 480 * v341;
                          v342 = *(uint64_t **)v846;
                          do
                          {
                            std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)v342, (__int128 *)v339);
                            v343 = *(_OWORD *)(v339 + 48);
                            *((_OWORD *)v342 + 2) = *(_OWORD *)(v339 + 32);
                            *((_OWORD *)v342 + 3) = v343;
                            v344 = *(_OWORD *)(v339 + 64);
                            v345 = *(_OWORD *)(v339 + 80);
                            v346 = *(_OWORD *)(v339 + 112);
                            *((_OWORD *)v342 + 6) = *(_OWORD *)(v339 + 96);
                            *((_OWORD *)v342 + 7) = v346;
                            *((_OWORD *)v342 + 4) = v344;
                            *((_OWORD *)v342 + 5) = v345;
                            v347 = *(_OWORD *)(v339 + 128);
                            v348 = *(_OWORD *)(v339 + 144);
                            v349 = *(_OWORD *)(v339 + 160);
                            *(uint64_t *)((char *)v342 + 174) = *(_QWORD *)(v339 + 174);
                            *((_OWORD *)v342 + 9) = v348;
                            *((_OWORD *)v342 + 10) = v349;
                            *((_OWORD *)v342 + 8) = v347;
                            std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(v342 + 23), (__int128 *)(v339 + 184));
                            v350 = *(_OWORD *)(v339 + 216);
                            v351 = *(_OWORD *)(v339 + 232);
                            *(_OWORD *)((char *)v342 + 245) = *(_OWORD *)(v339 + 245);
                            *(_OWORD *)(v342 + 29) = v351;
                            *(_OWORD *)(v342 + 27) = v350;
                            v342[33] = *(_QWORD *)(v339 + 264);
                            v352 = *(_QWORD *)(v339 + 272);
                            v342[34] = v352;
                            if (v352)
                            {
                              v353 = (unint64_t *)(v352 + 16);
                              do
                                v354 = __ldxr(v353);
                              while (__stxr(v354 + 1, v353));
                            }
                            v342[35] = 0;
                            v342[36] = 0;
                            v342[37] = 0;
                            v355 = *(uint64_t **)(v339 + 280);
                            v356 = *(uint64_t **)(v339 + 288);
                            __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)(v342 + 35);
                            __s1.__r_.__value_.__s.__data_[8] = 0;
                            if (v356 != v355)
                            {
                              v357 = 0x8E38E38E38E38E39 * (((char *)v356 - (char *)v355) >> 4);
                              if (v357 >= 0x1C71C71C71C71C8)
                                std::vector<float>::__throw_length_error[abi:ne180100]();
                              v358 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMMatrixCoefficient>>(v357);
                              v342[35] = (uint64_t)v358;
                              v342[36] = (uint64_t)v358;
                              v342[37] = (uint64_t)&v358[144 * v359];
                              v360 = v358;
                              do
                              {
                                v361 = *v355;
                                *((_DWORD *)v360 + 2) = *((_DWORD *)v355 + 2);
                                *(_QWORD *)v360 = v361;
                                std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(v360 + 16), (__int128 *)v355 + 1);
                                *((_QWORD *)v360 + 6) = v355[6];
                                std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(v360 + 56), (__int128 *)(v355 + 7));
                                *((_QWORD *)v360 + 11) = v355[11];
                                std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)v360 + 4, (__int128 *)v355 + 6);
                                *((_QWORD *)v360 + 16) = v355[16];
                                v362 = v355[17];
                                *((_QWORD *)v360 + 17) = v362;
                                if (v362)
                                {
                                  v363 = (unint64_t *)(v362 + 8);
                                  do
                                    v364 = __ldxr(v363);
                                  while (__stxr(v364 + 1, v363));
                                }
                                v355 += 18;
                                v360 += 144;
                              }
                              while (v355 != v356);
                              v342[36] = (uint64_t)v360;
                            }
                            v365 = *(_OWORD *)(v339 + 304);
                            v366 = *(_OWORD *)(v339 + 320);
                            v367 = *(_OWORD *)(v339 + 336);
                            *(_OWORD *)((char *)v342 + 349) = *(_OWORD *)(v339 + 349);
                            *((_OWORD *)v342 + 20) = v366;
                            *((_OWORD *)v342 + 21) = v367;
                            *((_OWORD *)v342 + 19) = v365;
                            v342[47] = 0;
                            v342[48] = 0;
                            v342[46] = 0;
                            v369 = *(__int128 **)(v339 + 368);
                            v368 = *(__int128 **)(v339 + 376);
                            *(_QWORD *)&v947 = v342 + 46;
                            BYTE8(v947) = 0;
                            if (v368 != v369)
                            {
                              v370 = 0x8E38E38E38E38E39 * (((char *)v368 - (char *)v369) >> 3);
                              if (v370 >= 0x38E38E38E38E38FLL)
                                std::vector<float>::__throw_length_error[abi:ne180100]();
                              v371 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMZone>>(v370);
                              v342[46] = (uint64_t)v371;
                              v342[47] = (uint64_t)v371;
                              v342[48] = (uint64_t)&v371[9 * v372];
                              v945 = v371;
                              v934 = v371;
                              __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)(v342 + 48);
                              __s1.__r_.__value_.__l.__size_ = (std::string::size_type)&v934;
                              __s1.__r_.__value_.__r.__words[2] = (std::string::size_type)&v945;
                              v937 = 0;
                              v373 = v369 + 3;
                              v374 = v371;
                              do
                              {
                                v375 = *(v373 - 3);
                                v376 = *(v373 - 2);
                                *(_OWORD *)((char *)v374 + 29) = *(__int128 *)((char *)v373 - 19);
                                *(_OWORD *)v374 = v375;
                                *((_OWORD *)v374 + 1) = v376;
                                v377 = (std::string *)(v374 + 6);
                                if (*((char *)v373 + 23) < 0)
                                {
                                  std::string::__init_copy_ctor_external(v377, *(const std::string::value_type **)v373, *((_QWORD *)v373 + 1));
                                  v374 = v945;
                                }
                                else
                                {
                                  v378 = *v373;
                                  v374[8] = *((_QWORD *)v373 + 2);
                                  *(_OWORD *)&v377->__r_.__value_.__l.__data_ = v378;
                                }
                                v379 = v373 - 3;
                                v374 += 9;
                                v945 = v374;
                                v373 = (__int128 *)((char *)v373 + 72);
                              }
                              while ((__int128 *)((char *)v379 + 72) != v368);
                              v937 = 1;
                              std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CA::ADMZone>,CA::ADMZone*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&__s1);
                              v342[47] = (uint64_t)v374;
                            }
                            std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(v342 + 49), (__int128 *)(v339 + 392));
                            v380 = *(_QWORD *)(v339 + 424);
                            *(uint64_t *)((char *)v342 + 429) = *(_QWORD *)(v339 + 429);
                            v342[53] = v380;
                            std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(v342 + 55), (__int128 *)(v339 + 440));
                            v342[59] = *(_QWORD *)(v339 + 472);
                            v339 += 480;
                            v342 += 60;
                          }
                          while (v339 != v800);
                          v381 = *(_QWORD *)v846;
                          v847 = v342;
LABEL_606:
                          if ((uint64_t *)v381 != v342)
                          {
                            AudioMetadataMemoryPool::create<AudioMetadataBlockFormat>(v844, (uint64_t)a1);
                            v384 = *(_QWORD *)v844;
                            v385 = v860;
                            if ((unint64_t)v860 >= v861)
                            {
                              v387 = (char *)v859;
                              v388 = (v860 - (_BYTE *)v859) >> 3;
                              v389 = v388 + 1;
                              if ((unint64_t)(v388 + 1) >> 61)
                                std::vector<float>::__throw_length_error[abi:ne180100]();
                              v390 = v861 - (_QWORD)v859;
                              if ((uint64_t)(v861 - (_QWORD)v859) >> 2 > v389)
                                v389 = v390 >> 2;
                              if ((unint64_t)v390 >= 0x7FFFFFFFFFFFFFF8)
                                v391 = 0x1FFFFFFFFFFFFFFFLL;
                              else
                                v391 = v389;
                              if (v391)
                                v391 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v391);
                              else
                                v392 = 0;
                              v393 = (std::string::size_type *)(v391 + 8 * v388);
                              *v393 = v384;
                              v386 = (char *)(v393 + 1);
                              if (v385 != v387)
                              {
                                do
                                {
                                  v394 = *((_QWORD *)v385 - 1);
                                  v385 -= 8;
                                  *--v393 = v394;
                                }
                                while (v385 != v387);
                                v385 = (char *)v859;
                              }
                              v859 = v393;
                              v861 = v391 + 8 * v392;
                              if (v385)
                                operator delete(v385);
                            }
                            else
                            {
                              *(_QWORD *)v860 = *(_QWORD *)v844;
                              v386 = v385 + 8;
                            }
                            v860 = v386;
                            v395 = *(_QWORD *)v844;
                            v396 = v845;
                            if (v845)
                            {
                              v397 = (unint64_t *)&v845->__shared_owners_;
                              do
                                v398 = __ldxr(v397);
                              while (__stxr(v398 + 1, v397));
                            }
                            v801 = v396;
                            v399 = *(uint64_t **)v857;
                            v842 = 0;
                            v843 = 0;
                            v841 = 0;
                            v400 = v917;
                            v401 = v918 - (_BYTE *)v917;
                            if (v918 != v917)
                            {
                              if (v401 < 0)
                                std::vector<float>::__throw_length_error[abi:ne180100]();
                              v402 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v401 >> 3);
                              v841 = v402;
                              v843 = &v402[8 * v403];
                              memmove(v402, v400, v401);
                              v842 = &v402[8 * (v401 >> 3)];
                            }
                            i = v801;
                            if (*(_BYTE *)(v381 + 24))
                            {
                              v949 = (uint64_t *)v395;
                              v950 = v801;
                              if (v801)
                              {
                                v405 = (unint64_t *)&v801->__shared_owners_;
                                do
                                  v406 = __ldxr(v405);
                                while (__stxr(v406 + 1, v405));
                              }
                              if (*(char *)(v381 + 23) >= 0)
                                v407 = (char *)v381;
                              else
                                v407 = *(char **)v381;
                              AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(a1, &v949, (_QWORD *)v395, v407);
                              if (v801)
                              {
                                v408 = (unint64_t *)&v801->__shared_owners_;
                                do
                                  v409 = __ldaxr(v408);
                                while (__stlxr(v409 - 1, v408));
                                if (!v409)
                                {
                                  ((void (*)(std::__shared_weak_count *))v801->__on_zero_shared)(v801);
                                  std::__shared_weak_count::__release_weak(v801);
                                }
                              }
                            }
                            if (*(_BYTE *)(v381 + 56))
                            {
                              *(_BYTE *)(v395 + 8) = 1;
                              if (*(_BYTE *)(v381 + 48))
                              {
                                LODWORD(v382) = *(_DWORD *)(v381 + 40);
                                LODWORD(v383) = *(_DWORD *)(v381 + 44);
                                v410 = (double)*(unint64_t *)&v382 / (double)*(unint64_t *)&v383;
                              }
                              else
                              {
                                v410 = *(double *)(v381 + 40);
                              }
                              v383 = (double)*(unsigned int *)(v381 + 32);
                              v382 = (v410 + v383) * 48000.0;
                              *(double *)(v395 + 12) = v382;
                            }
                            if (*(_BYTE *)(v381 + 88))
                            {
                              *(_BYTE *)(v395 + 20) = 1;
                              if (*(_BYTE *)(v381 + 80))
                              {
                                LODWORD(v382) = *(_DWORD *)(v381 + 72);
                                LODWORD(v383) = *(_DWORD *)(v381 + 76);
                                v411 = (double)*(unint64_t *)&v382 / (double)*(unint64_t *)&v383;
                              }
                              else
                              {
                                v411 = *(double *)(v381 + 72);
                              }
                              *(double *)(v395 + 24) = (v411 + (double)*(unsigned int *)(v381 + 64)) * 48000.0;
                            }
                            v412 = *(_BYTE *)(v381 + 104);
                            if (v412)
                            {
                              v413 = *(float *)(v381 + 96);
                              v412 = *(_BYTE *)(v381 + 100) != 0;
                            }
                            else
                            {
                              v413 = 1.0;
                            }
                            *(float *)(v395 + 32) = v413;
                            *(_BYTE *)(v395 + 156) = v412;
                            if (*(_BYTE *)(v381 + 112))
                              v414 = *(_BYTE *)(v381 + 108);
                            else
                              v414 = 10;
                            *(_BYTE *)(v395 + 157) = v414;
                            if (*(_BYTE *)(v381 + 117))
                              *(_BYTE *)(v395 + 158) = *(_BYTE *)(v381 + 116);
                            if (*(_BYTE *)(v381 + 132))
                            {
                              *(_BYTE *)(v395 + 41) = 1;
                              if (*(_BYTE *)(v381 + 121))
                                *(_BYTE *)(v395 + 40) = *(_BYTE *)(v381 + 120);
                              if (*(_BYTE *)(v381 + 128))
                                *(_DWORD *)(v395 + 36) = *(_DWORD *)(v381 + 124);
                            }
                            if (*(_BYTE *)(v381 + 329))
                              v415 = *(_BYTE *)(v381 + 328) == 0;
                            else
                              v415 = 1;
                            v416 = !v415;
                            switch(*((_BYTE *)v399 + 52))
                            {
                              case 1:
                                if (*(_BYTE *)(v381 + 208))
                                {
                                  __s1.__r_.__value_.__r.__words[0] = v395;
                                  __s1.__r_.__value_.__l.__size_ = (std::string::size_type)v801;
                                  if (v801)
                                  {
                                    v417 = (unint64_t *)&v801->__shared_owners_;
                                    do
                                      v418 = __ldxr(v417);
                                    while (__stxr(v418 + 1, v417));
                                  }
                                  if (*(char *)(v381 + 207) >= 0)
                                    v419 = (char *)(v381 + 184);
                                  else
                                    v419 = *(char **)(v381 + 184);
                                  AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(a1, (uint64_t **)&__s1, (_QWORD *)(v395 + 44), v419);
                                  if (v801)
                                  {
                                    v420 = (unint64_t *)&v801->__shared_owners_;
                                    do
                                      v421 = __ldaxr(v420);
                                    while (__stlxr(v421 - 1, v420));
                                    if (!v421)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v801->__on_zero_shared)(v801);
                                      std::__shared_weak_count::__release_weak(v801);
                                    }
                                  }
                                }
                                if (*(_BYTE *)(v381 + 220))
                                  v422 = 0;
                                else
                                  v422 = *(_BYTE *)(v381 + 228) == 0;
                                if (!v422 || *(_BYTE *)(v381 + 236) != 0)
                                {
                                  *(_BYTE *)(v395 + 52) = 1;
                                  *(_BYTE *)(v395 + 68) = v416;
                                  if (*(_BYTE *)(v381 + 220))
                                    *(_DWORD *)(v395 + 56) = *(_DWORD *)(v381 + 216);
                                  if (*(_BYTE *)(v381 + 228))
                                    *(_DWORD *)(v395 + 60) = *(_DWORD *)(v381 + 224);
                                  if (*(_BYTE *)(v381 + 236))
                                    *(_DWORD *)(v395 + 64) = *(_DWORD *)(v381 + 232);
                                }
                                if (*(_BYTE *)(v381 + 244) || *(_BYTE *)(v381 + 252) || *(_BYTE *)(v381 + 260))
                                {
                                  *(_BYTE *)(v395 + 53) = 1;
                                  *(_BYTE *)(v395 + 84) = v416;
                                  if (*(_BYTE *)(v381 + 244))
                                    *(_DWORD *)(v395 + 72) = *(_DWORD *)(v381 + 240);
                                  if (*(_BYTE *)(v381 + 252))
                                    *(_DWORD *)(v395 + 76) = *(_DWORD *)(v381 + 248);
                                  if (*(_BYTE *)(v381 + 260))
                                    *(_DWORD *)(v395 + 80) = *(_DWORD *)(v381 + 256);
                                }
                                goto LABEL_795;
                              case 2:
                                v473 = *(std::__shared_weak_count **)(v381 + 272);
                                if (!v473)
                                  goto LABEL_823;
                                v474 = std::__shared_weak_count::lock(v473);
                                if (!v474)
                                  goto LABEL_823;
                                v475 = v474;
                                v476 = *(_QWORD *)(v381 + 264);
                                v477 = (unint64_t *)&v474->__shared_owners_;
                                do
                                  v478 = __ldaxr(v477);
                                while (__stlxr(v478 - 1, v477));
                                if (v478)
                                {
                                  if (!v476)
                                    goto LABEL_823;
                                }
                                else
                                {
                                  ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
                                  std::__shared_weak_count::__release_weak(v475);
                                  if (!v476)
                                    goto LABEL_823;
                                }
                                v479 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v381 + 272));
                                v480 = *(char **)(v381 + 264);
                                __s1.__r_.__value_.__l.__size_ = (std::string::size_type)v479;
                                __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v480;
                                if (v480[23] < 0)
                                  v480 = *(char **)v480;
                                size = (std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_;
                                if (__s1.__r_.__value_.__l.__size_)
                                {
                                  v482 = (unint64_t *)(__s1.__r_.__value_.__l.__size_ + 8);
                                  do
                                    v483 = __ldaxr(v482);
                                  while (__stlxr(v483 - 1, v482));
                                  if (!v483)
                                  {
                                    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                                    std::__shared_weak_count::__release_weak(size);
                                  }
                                }
LABEL_823:
                                if (*(_BYTE *)(v381 + 176))
                                {
                                  *(_BYTE *)(v395 + 56) = *(_BYTE *)(v381 + 164);
                                  if (*(_BYTE *)(v381 + 172))
                                    *(_DWORD *)(v395 + 52) = *(_DWORD *)(v381 + 168);
                                }
                                v947 = 0uLL;
                                v948 = 0;
                                v484 = *(_QWORD *)(v381 + 280);
                                v485 = *(_QWORD *)(v381 + 288);
                                for (i = v801; v484 != v485; v484 += 144)
                                {
                                  v486 = *(_QWORD *)v484;
                                  LODWORD(__s1.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v484 + 8);
                                  __s1.__r_.__value_.__r.__words[0] = v486;
                                  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&__s1.__r_.__value_.__r.__words[2], (__int128 *)(v484 + 16));
                                  v938.__r_.__value_.__r.__words[2] = *(_QWORD *)(v484 + 48);
                                  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v939, (__int128 *)(v484 + 56));
                                  v942 = *(_QWORD *)(v484 + 88);
                                  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&v943, (__int128 *)(v484 + 96));
                                  v487 = *(_QWORD *)(v484 + 136);
                                  *(_QWORD *)&v944[16] = *(_QWORD *)(v484 + 128);
                                  *(_QWORD *)&v944[24] = v487;
                                  if (v487)
                                  {
                                    v488 = (unint64_t *)(v487 + 8);
                                    do
                                      v489 = __ldxr(v488);
                                    while (__stxr(v489 + 1, v488));
                                  }
                                  AudioMetadataMemoryPool::create<AudioMetadataMatrixCoefficient>(&v945, (uint64_t)a1);
                                  v490 = v945;
                                  v491 = (char *)*((_QWORD *)&v947 + 1);
                                  if (*((_QWORD *)&v947 + 1) >= (unint64_t)v948)
                                  {
                                    v493 = (char *)v947;
                                    v494 = (uint64_t)(*((_QWORD *)&v947 + 1) - v947) >> 3;
                                    v495 = v494 + 1;
                                    if ((unint64_t)(v494 + 1) >> 61)
                                      std::vector<float>::__throw_length_error[abi:ne180100]();
                                    v496 = v948 - v947;
                                    if ((v948 - (uint64_t)v947) >> 2 > v495)
                                      v495 = v496 >> 2;
                                    if ((unint64_t)v496 >= 0x7FFFFFFFFFFFFFF8)
                                      v497 = 0x1FFFFFFFFFFFFFFFLL;
                                    else
                                      v497 = v495;
                                    if (v497)
                                      v497 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v497);
                                    else
                                      v498 = 0;
                                    v499 = (uint64_t **)(v497 + 8 * v494);
                                    *v499 = v490;
                                    v492 = v499 + 1;
                                    if (v491 != v493)
                                    {
                                      do
                                      {
                                        v500 = (uint64_t *)*((_QWORD *)v491 - 1);
                                        v491 -= 8;
                                        *--v499 = v500;
                                      }
                                      while (v491 != v493);
                                      v491 = (char *)v947;
                                    }
                                    *(_QWORD *)&v947 = v499;
                                    v948 = v497 + 8 * v498;
                                    if (v491)
                                      operator delete(v491);
                                  }
                                  else
                                  {
                                    **((_QWORD **)&v947 + 1) = v945;
                                    v492 = v491 + 8;
                                  }
                                  *((_QWORD *)&v947 + 1) = v492;
                                  if (__s1.__r_.__value_.__s.__data_[8])
                                  {
                                    v501 = v945;
                                    *(_DWORD *)v945 = __s1.__r_.__value_.__l.__data_;
                                    v502 = __s1.__r_.__value_.__s.__data_[4] != 0;
                                  }
                                  else
                                  {
                                    v502 = 0;
                                    v501 = v945;
                                    *(_DWORD *)v945 = 1065353216;
                                  }
                                  *((_BYTE *)v501 + 44) = v502;
                                  v503 = *(float *)&v938.__r_.__value_.__r.__words[2];
                                  if (!v938.__r_.__value_.__s.__data_[20])
                                    v503 = 0.0;
                                  *((float *)v501 + 2) = v503;
                                  v504 = *(float *)&v942;
                                  if (!BYTE4(v942))
                                    v504 = 0.0;
                                  *((float *)v501 + 1) = v504;
                                  if (v938.__r_.__value_.__s.__data_[8])
                                  {
                                    v934 = v501;
                                    v935 = (std::__shared_weak_count *)v946;
                                    if (v946)
                                    {
                                      v505 = (unint64_t *)(v946 + 1);
                                      do
                                        v506 = __ldxr(v505);
                                      while (__stxr(v506 + 1, v505));
                                    }
                                    if (v938.__r_.__value_.__s.__data_[7] >= 0)
                                      v507 = &__s1.__r_.__value_.__s.__data_[16];
                                    else
                                      v507 = (char *)__s1.__r_.__value_.__r.__words[2];
                                    AudioMetadataMemoryPool::fillString<AudioMetadataMatrixCoefficient>(a1, &v934, (uint64_t *)((char *)v501 + 12), v507);
                                    v508 = v935;
                                    if (v935)
                                    {
                                      v509 = (unint64_t *)&v935->__shared_owners_;
                                      do
                                        v510 = __ldaxr(v509);
                                      while (__stlxr(v510 - 1, v509));
                                      if (!v510)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
                                        std::__shared_weak_count::__release_weak(v508);
                                      }
                                    }
                                  }
                                  if (v940)
                                  {
                                    v511 = v945;
                                    v512 = (std::__shared_weak_count *)v946;
                                    v933[0] = v945;
                                    v933[1] = v946;
                                    if (v946)
                                    {
                                      v513 = (unint64_t *)(v946 + 1);
                                      do
                                        v514 = __ldxr(v513);
                                      while (__stxr(v514 + 1, v513));
                                    }
                                    if ((v939.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v515 = &v939;
                                    else
                                      v515 = (std::string *)v939.__r_.__value_.__r.__words[0];
                                    AudioMetadataMemoryPool::fillString<AudioMetadataMatrixCoefficient>(a1, v933, (uint64_t *)((char *)v511 + 28), (char *)v515);
                                    if (v512)
                                    {
                                      v516 = (unint64_t *)&v512->__shared_owners_;
                                      do
                                        v517 = __ldaxr(v516);
                                      while (__stlxr(v517 - 1, v516));
                                      if (!v517)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
                                        std::__shared_weak_count::__release_weak(v512);
                                      }
                                    }
                                  }
                                  if (v944[8])
                                  {
                                    v518 = v945;
                                    v519 = (std::__shared_weak_count *)v946;
                                    v932[0] = v945;
                                    v932[1] = v946;
                                    if (v946)
                                    {
                                      v520 = (unint64_t *)(v946 + 1);
                                      do
                                        v521 = __ldxr(v520);
                                      while (__stxr(v521 + 1, v520));
                                    }
                                    if (v944[7] >= 0)
                                      v522 = (char *)&v943;
                                    else
                                      v522 = (char *)v943;
                                    AudioMetadataMemoryPool::fillString<AudioMetadataMatrixCoefficient>(a1, v932, (uint64_t *)((char *)v518 + 20), v522);
                                    if (v519)
                                    {
                                      v523 = (unint64_t *)&v519->__shared_owners_;
                                      do
                                        v524 = __ldaxr(v523);
                                      while (__stlxr(v524 - 1, v523));
                                      if (!v524)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
                                        std::__shared_weak_count::__release_weak(v519);
                                      }
                                    }
                                  }
                                  v525 = *(char **)&v944[16];
                                  if (*(_QWORD *)&v944[16])
                                  {
                                    if (*(char *)(*(_QWORD *)&v944[16] + 23) < 0)
                                      v525 = **(char ***)&v944[16];
                                    *(uint64_t *)((char *)v945 + 36) = (uint64_t)v526;
                                  }
                                  v527 = (std::__shared_weak_count *)v946;
                                  if (v946)
                                  {
                                    v528 = (unint64_t *)(v946 + 1);
                                    do
                                      v529 = __ldaxr(v528);
                                    while (__stlxr(v529 - 1, v528));
                                    if (!v529)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
                                      std::__shared_weak_count::__release_weak(v527);
                                    }
                                  }
                                  v530 = *(std::__shared_weak_count **)&v944[24];
                                  if (*(_QWORD *)&v944[24])
                                  {
                                    v531 = (unint64_t *)(*(_QWORD *)&v944[24] + 8);
                                    do
                                      v532 = __ldaxr(v531);
                                    while (__stlxr(v532 - 1, v531));
                                    if (!v532)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
                                      std::__shared_weak_count::__release_weak(v530);
                                    }
                                  }
                                  if (v944[8] && (v944[7] & 0x80000000) != 0)
                                    operator delete((void *)v943);
                                  i = v801;
                                  if (v940 && SHIBYTE(v939.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v939.__r_.__value_.__l.__data_);
                                  if (v938.__r_.__value_.__s.__data_[8] && v938.__r_.__value_.__s.__data_[7] < 0)
                                    operator delete((void *)__s1.__r_.__value_.__r.__words[2]);
                                }
                                __s1.__r_.__value_.__r.__words[0] = v395;
                                __s1.__r_.__value_.__l.__size_ = (std::string::size_type)i;
                                if (i)
                                {
                                  v533 = (unint64_t *)&i->__shared_owners_;
                                  do
                                    v534 = __ldxr(v533);
                                  while (__stxr(v534 + 1, v533));
                                }
                                AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataMatrixCoefficient,AudioMetadataMatrix,AudioMetadataBlockFormat>((uint64_t)a1, (uint64_t **)&__s1, v395 + 60, &v947);
                                if (i)
                                {
                                  v535 = (unint64_t *)&i->__shared_owners_;
                                  do
                                    v536 = __ldaxr(v535);
                                  while (__stlxr(v536 - 1, v535));
                                  if (!v536)
                                  {
                                    ((void (*)(std::__shared_weak_count *))i->__on_zero_shared)(i);
                                    std::__shared_weak_count::__release_weak(i);
                                  }
                                }
                                v467 = (void *)v947;
                                if (!(_QWORD)v947)
                                  goto LABEL_795;
                                goto LABEL_794;
                              case 3:
                                if (*(_BYTE *)(v381 + 176))
                                {
                                  *(_BYTE *)(v395 + 104) = *(_BYTE *)(v381 + 164);
                                  if (*(_BYTE *)(v381 + 172))
                                    *(_DWORD *)(v395 + 100) = *(_DWORD *)(v381 + 168);
                                }
                                if (*(_BYTE *)(v381 + 308) || *(_BYTE *)(v381 + 316) || *(_BYTE *)(v381 + 324))
                                {
                                  *(_BYTE *)(v395 + 72) = 1;
                                  *(_BYTE *)(v395 + 73) = v416;
                                  if (*(_BYTE *)(v381 + 308))
                                    *(_DWORD *)(v395 + 60) = *(_DWORD *)(v381 + 304);
                                }
                                if (*(_BYTE *)(v381 + 316))
                                  *(_DWORD *)(v395 + 64) = *(_DWORD *)(v381 + 312);
                                if (*(_BYTE *)(v381 + 324))
                                  *(_DWORD *)(v395 + 68) = *(_DWORD *)(v381 + 320);
                                if (*(_BYTE *)(v381 + 336))
                                  *(_DWORD *)(v395 + 76) = *(_DWORD *)(v381 + 332);
                                if (*(_BYTE *)(v381 + 352))
                                {
                                  *(_BYTE *)(v395 + 84) = *(_BYTE *)(v381 + 340);
                                  if (*(_BYTE *)(v381 + 348))
                                    *(_DWORD *)(v395 + 80) = *(_DWORD *)(v381 + 344);
                                }
                                if (*(_BYTE *)(v381 + 364))
                                {
                                  *(_BYTE *)(v395 + 96) = 1;
                                  *(_BYTE *)(v395 + 97) = v416;
                                  *(_DWORD *)(v395 + 88) = *(_DWORD *)(v381 + 356);
                                  *(_DWORD *)(v395 + 92) = *(_DWORD *)(v381 + 360);
                                }
                                memset(&__s1, 0, sizeof(__s1));
                                v424 = *(int **)(v381 + 368);
                                v425 = *(int **)(v381 + 376);
                                if (v424 == v425)
                                  goto LABEL_785;
                                break;
                              case 4:
                              case 5:
                                goto LABEL_795;
                              default:
                                __assert_rtn("populateBlockFormat", "AudioMetadataExtractor.cpp", 371, "false");
                            }
                            while (1)
                            {
                              AudioMetadataMemoryPool::create<AudioMetadataZone>(&v945, (uint64_t)a1);
                              v426 = v945;
                              v427 = (char *)__s1.__r_.__value_.__l.__size_;
                              if (__s1.__r_.__value_.__l.__size_ >= __s1.__r_.__value_.__r.__words[2])
                              {
                                v429 = __s1.__r_.__value_.__r.__words[0];
                                v430 = (uint64_t)(__s1.__r_.__value_.__l.__size_ - __s1.__r_.__value_.__r.__words[0]) >> 3;
                                v431 = v430 + 1;
                                if ((unint64_t)(v430 + 1) >> 61)
                                  std::vector<float>::__throw_length_error[abi:ne180100]();
                                v432 = __s1.__r_.__value_.__r.__words[2] - __s1.__r_.__value_.__r.__words[0];
                                if ((uint64_t)(__s1.__r_.__value_.__r.__words[2] - __s1.__r_.__value_.__r.__words[0]) >> 2 > v431)
                                  v431 = v432 >> 2;
                                if ((unint64_t)v432 >= 0x7FFFFFFFFFFFFFF8)
                                  v433 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v433 = v431;
                                if (v433)
                                  v433 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v433);
                                else
                                  v434 = 0;
                                v435 = (uint64_t **)(v433 + 8 * v430);
                                *v435 = v426;
                                v428 = (std::string::size_type)(v435 + 1);
                                if (v427 != (char *)v429)
                                {
                                  do
                                  {
                                    v436 = (uint64_t *)*((_QWORD *)v427 - 1);
                                    v427 -= 8;
                                    *--v435 = v436;
                                  }
                                  while (v427 != (char *)v429);
                                  v427 = (char *)__s1.__r_.__value_.__r.__words[0];
                                }
                                __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v435;
                                __s1.__r_.__value_.__r.__words[2] = v433 + 8 * v434;
                                if (v427)
                                  operator delete(v427);
                              }
                              else
                              {
                                *(_QWORD *)__s1.__r_.__value_.__l.__size_ = v945;
                                v428 = (std::string::size_type)(v427 + 8);
                              }
                              __s1.__r_.__value_.__l.__size_ = v428;
                              v438 = v945;
                              v437 = (std::__shared_weak_count *)v946;
                              if (v946)
                              {
                                v439 = (unint64_t *)(v946 + 1);
                                do
                                  v440 = __ldxr(v439);
                                while (__stxr(v440 + 1, v439));
                              }
                              v441 = (const char *)(v424 + 12);
                              if (*((char *)v424 + 71) < 0)
                                v441 = *(const char **)v441;
                              v442 = strlen(v441) + 1;
                              v443 = operator new[]();
                              std::shared_ptr<char []>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(&v947, v443);
                              v444 = (void *)v947;
                              *v438 = v947;
                              memcpy(v444, v441, v442);
                              v934 = v438;
                              v445 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(a1, (unint64_t)v438, &v934);
                              std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v445 + 5, &v947);
                              v446 = (std::__shared_weak_count *)*((_QWORD *)&v947 + 1);
                              if (!*((_QWORD *)&v947 + 1))
                                goto LABEL_750;
                              v447 = (unint64_t *)(*((_QWORD *)&v947 + 1) + 8);
                              do
                                v448 = __ldaxr(v447);
                              while (__stlxr(v448 - 1, v447));
                              if (!v448)
                              {
                                ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
                                std::__shared_weak_count::__release_weak(v446);
                                if (v437)
                                {
LABEL_751:
                                  v449 = (unint64_t *)&v437->__shared_owners_;
                                  do
                                    v450 = __ldaxr(v449);
                                  while (__stlxr(v450 - 1, v449));
                                  if (!v450)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
                                    std::__shared_weak_count::__release_weak(v437);
                                  }
                                }
                              }
                              else
                              {
LABEL_750:
                                if (v437)
                                  goto LABEL_751;
                              }
                              v451 = v945;
                              *((_BYTE *)v945 + 32) = v416;
                              v452 = 0;
                              v453 = 0;
                              if (v416)
                              {
                                if (*((_BYTE *)v424 + 4))
                                  v453 = *v424;
                                *((_DWORD *)v451 + 2) = v453;
                                if (*((_BYTE *)v424 + 12))
                                  v452 = v424[2];
                                *((_DWORD *)v451 + 3) = v452;
                                v454 = 0;
                                v455 = 0;
                                if (*((_BYTE *)v424 + 20))
                                  v455 = v424[4];
                                *((_DWORD *)v451 + 4) = v455;
                                if (*((_BYTE *)v424 + 28))
                                  v454 = v424[6];
                                *((_DWORD *)v451 + 5) = v454;
                                v456 = 0;
                                v457 = 0;
                                if (*((_BYTE *)v424 + 36))
                                  v457 = v424[8];
                                *((_DWORD *)v451 + 6) = v457;
                                if (*((_BYTE *)v424 + 44))
                                  v456 = v424[10];
                                *((_DWORD *)v451 + 7) = v456;
                              }
                              else
                              {
                                if (*((_BYTE *)v424 + 4))
                                  v453 = *v424;
                                *((_DWORD *)v451 + 2) = v453;
                                if (*((_BYTE *)v424 + 12))
                                  v452 = v424[2];
                                *((_DWORD *)v451 + 3) = v452;
                                v458 = 0;
                                v459 = 0;
                                if (*((_BYTE *)v424 + 20))
                                  v459 = v424[4];
                                *((_DWORD *)v451 + 4) = v459;
                                if (*((_BYTE *)v424 + 28))
                                  v458 = v424[6];
                                *((_DWORD *)v451 + 5) = v458;
                              }
                              v460 = (std::__shared_weak_count *)v946;
                              if (v946)
                              {
                                v461 = (unint64_t *)(v946 + 1);
                                do
                                  v462 = __ldaxr(v461);
                                while (__stlxr(v462 - 1, v461));
                                if (!v462)
                                {
                                  ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
                                  std::__shared_weak_count::__release_weak(v460);
                                }
                              }
                              v424 += 18;
                              i = v801;
                              if (v424 == v425)
                              {
LABEL_785:
                                *(_QWORD *)&v947 = v395;
                                *((_QWORD *)&v947 + 1) = i;
                                if (i)
                                {
                                  v463 = (unint64_t *)&i->__shared_owners_;
                                  do
                                    v464 = __ldxr(v463);
                                  while (__stxr(v464 + 1, v463));
                                }
                                AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataZone,AudioMetadataZoneExclusions,AudioMetadataBlockFormat>((uint64_t)a1, (uint64_t **)&v947, v395 + 108, &__s1);
                                if (i)
                                {
                                  v465 = (unint64_t *)&i->__shared_owners_;
                                  do
                                    v466 = __ldaxr(v465);
                                  while (__stlxr(v466 - 1, v465));
                                  if (!v466)
                                  {
                                    ((void (*)(std::__shared_weak_count *))i->__on_zero_shared)(i);
                                    std::__shared_weak_count::__release_weak(i);
                                  }
                                }
                                v467 = (void *)__s1.__r_.__value_.__r.__words[0];
                                if (__s1.__r_.__value_.__r.__words[0])
LABEL_794:
                                  operator delete(v467);
LABEL_795:
                                if (v841)
                                {
                                  v842 = (char *)v841;
                                  operator delete(v841);
                                }
                                if (i)
                                {
                                  v468 = (unint64_t *)&i->__shared_owners_;
                                  do
                                    v469 = __ldaxr(v468);
                                  while (__stlxr(v469 - 1, v468));
                                  if (!v469)
                                  {
                                    ((void (*)(std::__shared_weak_count *))i->__on_zero_shared)(i);
                                    std::__shared_weak_count::__release_weak(i);
                                  }
                                }
                                v470 = v845;
                                if (v845)
                                {
                                  v471 = (unint64_t *)&v845->__shared_owners_;
                                  do
                                    v472 = __ldaxr(v471);
                                  while (__stlxr(v472 - 1, v471));
                                  if (!v472)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
                                    std::__shared_weak_count::__release_weak(v470);
                                  }
                                }
                                v381 += 480;
                                goto LABEL_606;
                              }
                            }
                          }
                        }
                        v537 = *(uint64_t **)v857;
                        v839 = *(uint64_t **)v857;
                        v840 = v858;
                        if (v858)
                        {
                          v538 = (unint64_t *)&v858->__shared_owners_;
                          do
                            v539 = __ldxr(v538);
                          while (__stxr(v539 + 1, v538));
                        }
                        AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataBlockFormat,AudioMetadataBlockFormatRefs,AudioMetadataChannelFormat>((uint64_t)a1, &v839, (uint64_t)(v537 + 3), &v859);
                        v540 = v840;
                        if (v840)
                        {
                          v541 = (unint64_t *)&v840->__shared_owners_;
                          do
                            v542 = __ldaxr(v541);
                          while (__stlxr(v542 - 1, v541));
                          if (!v542)
                          {
                            ((void (*)(std::__shared_weak_count *))v540->__on_zero_shared)(v540);
                            std::__shared_weak_count::__release_weak(v540);
                          }
                        }
                        __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v846;
                        std::vector<CA::ADMBlockFormat>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
                        v543 = v858;
                        if (v858)
                        {
                          v544 = (unint64_t *)&v858->__shared_owners_;
                          do
                            v545 = __ldaxr(v544);
                          while (__stlxr(v545 - 1, v544));
                          if (!v545)
                          {
                            ((void (*)(std::__shared_weak_count *))v543->__on_zero_shared)(v543);
                            std::__shared_weak_count::__release_weak(v543);
                          }
                        }
                        if (v859)
                          operator delete(v859);
                        v275 = v799 + 2;
                        if (v799 + 2 == v798)
                          goto LABEL_939;
                      }
                      if (v316[87] < 0)
                        std::string::__init_copy_ctor_external(&v851, *((const std::string::value_type **)v316 + 8), *((_QWORD *)v316 + 9));
                      else
                        v851 = *(std::string *)(v316 + 64);
                      std::string::basic_string[abi:ne180100]<0>(&__s1, "0001");
                      v320 = v319;
                      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(__s1.__r_.__value_.__l.__data_);
                        if ((v320 & 1) == 0)
                          goto LABEL_550;
LABEL_548:
                        v321 = 1;
                      }
                      else
                      {
                        if ((v319 & 1) != 0)
                          goto LABEL_548;
LABEL_550:
                        std::string::basic_string[abi:ne180100]<0>(&__s1, "0002");
                        v323 = v322;
                        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(__s1.__r_.__value_.__l.__data_);
                          if ((v323 & 1) == 0)
                            goto LABEL_554;
LABEL_552:
                          v321 = 2;
                        }
                        else
                        {
                          if ((v322 & 1) != 0)
                            goto LABEL_552;
LABEL_554:
                          std::string::basic_string[abi:ne180100]<0>(&__s1, "0003");
                          v325 = v324;
                          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                          {
                            operator delete(__s1.__r_.__value_.__l.__data_);
                            if ((v325 & 1) == 0)
                              goto LABEL_558;
LABEL_556:
                            v321 = 3;
                          }
                          else
                          {
                            if ((v324 & 1) != 0)
                              goto LABEL_556;
LABEL_558:
                            std::string::basic_string[abi:ne180100]<0>(&__s1, "0004");
                            v327 = v326;
                            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(__s1.__r_.__value_.__l.__data_);
                              if ((v327 & 1) == 0)
                                goto LABEL_562;
LABEL_560:
                              v321 = 4;
                            }
                            else
                            {
                              if ((v326 & 1) != 0)
                                goto LABEL_560;
LABEL_562:
                              std::string::basic_string[abi:ne180100]<0>(&__s1, "0005");
                              if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(__s1.__r_.__value_.__l.__data_);
                              if (v328)
                                v321 = 5;
                              else
                                v321 = 0;
                            }
                          }
                        }
                      }
                      *(_BYTE *)(*(_QWORD *)v857 + 52) = v321;
                      if (SHIBYTE(v851.__r_.__value_.__r.__words[2]) < 0)
                      {
                        v318 = &v851;
LABEL_569:
                        operator delete(v318->__r_.__value_.__l.__data_);
                        goto LABEL_570;
                      }
                      goto LABEL_570;
                    }
                  }
LABEL_939:
                  v546 = *(uint64_t **)v875;
                  v837 = *(uint64_t **)v875;
                  v838 = v876;
                  if (v876)
                  {
                    v547 = (unint64_t *)&v876->__shared_owners_;
                    do
                      v548 = __ldxr(v547);
                    while (__stxr(v548 + 1, v547));
                  }
                  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataChannelFormat,AudioMetadataChannelFormatRefs,AudioMetadataPackFormat>((uint64_t)a1, &v837, (uint64_t)v546 + 28, &v865);
                  v549 = v838;
                  if (v838)
                  {
                    v550 = (unint64_t *)&v838->__shared_owners_;
                    do
                      v551 = __ldaxr(v550);
                    while (__stlxr(v551 - 1, v550));
                    if (!v551)
                    {
                      ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
                      std::__shared_weak_count::__release_weak(v549);
                    }
                  }
                  v552 = *v797;
                  v860 = 0;
                  v859 = 0;
                  v861 = 0;
                  v553 = (char **)*((_QWORD *)v552 + 33);
                  v554 = (char **)*((_QWORD *)v552 + 34);
LABEL_948:
                  if (v553 != v554)
                    break;
                  v703 = *(uint64_t **)v884;
                  v821 = *(uint64_t **)v884;
                  v822 = v885;
                  if (v885)
                  {
                    v704 = (unint64_t *)&v885->__shared_owners_;
                    do
                      v705 = __ldxr(v704);
                    while (__stxr(v705 + 1, v704));
                  }
                  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataTrackUID,AudioMetadataTrackUIDRefs,AudioMetadataObject>((uint64_t)a1, &v821, (uint64_t)(v703 + 17), &v859);
                  v706 = v822;
                  if (v822)
                  {
                    v707 = (unint64_t *)&v822->__shared_owners_;
                    do
                      v708 = __ldaxr(v707);
                    while (__stlxr(v708 - 1, v707));
                    if (!v708)
                    {
                      ((void (*)(std::__shared_weak_count *))v706->__on_zero_shared)(v706);
                      std::__shared_weak_count::__release_weak(v706);
                    }
                  }
                  if (v859)
                    operator delete(v859);
                  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v862;
                  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
                  if (v865)
                    operator delete(v865);
                  v709 = v876;
                  if (v876)
                  {
                    v710 = (unint64_t *)&v876->__shared_owners_;
                    do
                      v711 = __ldaxr(v710);
                    while (__stlxr(v711 - 1, v710));
                    if (!v711)
                    {
                      ((void (*)(std::__shared_weak_count *))v709->__on_zero_shared)(v709);
                      std::__shared_weak_count::__release_weak(v709);
                    }
                  }
                  if (v796)
                  {
                    v712 = (unint64_t *)&v796->__shared_owners_;
                    do
                      v713 = __ldaxr(v712);
                    while (__stlxr(v713 - 1, v712));
                    if (!v713)
                    {
                      ((void (*)(std::__shared_weak_count *))v796->__on_zero_shared)(v796);
                      std::__shared_weak_count::__release_weak(v796);
                    }
                  }
                  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v877;
                  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
                  v714 = v885;
                  if (v885)
                  {
                    v715 = (unint64_t *)&v885->__shared_owners_;
                    do
                      v716 = __ldaxr(v715);
                    while (__stlxr(v716 - 1, v715));
                    if (!v716)
                    {
                      ((void (*)(std::__shared_weak_count *))v714->__on_zero_shared)(v714);
                      std::__shared_weak_count::__release_weak(v714);
                    }
                  }
                  v167 = (uint64_t *)(v797 + 2);
                  if (v797 + 2 == v794)
                    goto LABEL_1230;
                }
                AudioMetadataMemoryPool::create<AudioMetadataTrackUID>(v846, (uint64_t)a1);
                v555 = *(uint64_t **)v846;
                v556 = v915;
                if ((unint64_t)v915 >= v916)
                {
                  v558 = (char *)v914;
                  v559 = (v915 - (_BYTE *)v914) >> 3;
                  v560 = v559 + 1;
                  if ((unint64_t)(v559 + 1) >> 61)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v561 = v916 - (_QWORD)v914;
                  if ((uint64_t)(v916 - (_QWORD)v914) >> 2 > v560)
                    v560 = v561 >> 2;
                  if ((unint64_t)v561 >= 0x7FFFFFFFFFFFFFF8)
                    v562 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v562 = v560;
                  if (v562)
                    v562 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v562);
                  else
                    v563 = 0;
                  v564 = (uint64_t **)(v562 + 8 * v559);
                  *v564 = v555;
                  v557 = (char *)(v564 + 1);
                  if (v556 != v558)
                  {
                    do
                    {
                      v565 = (uint64_t *)*((_QWORD *)v556 - 1);
                      v556 -= 8;
                      *--v564 = v565;
                    }
                    while (v556 != v558);
                    v556 = (char *)v914;
                  }
                  v914 = v564;
                  v916 = v562 + 8 * v563;
                  if (v556)
                    operator delete(v556);
                }
                else
                {
                  *(_QWORD *)v915 = *(_QWORD *)v846;
                  v557 = v556 + 8;
                }
                v915 = v557;
                v566 = *(uint64_t **)v846;
                v567 = v860;
                if ((unint64_t)v860 >= v861)
                {
                  v569 = (char *)v859;
                  v570 = (v860 - (_BYTE *)v859) >> 3;
                  v571 = v570 + 1;
                  if ((unint64_t)(v570 + 1) >> 61)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v572 = v861 - (_QWORD)v859;
                  if ((uint64_t)(v861 - (_QWORD)v859) >> 2 > v571)
                    v571 = v572 >> 2;
                  if ((unint64_t)v572 >= 0x7FFFFFFFFFFFFFF8)
                    v573 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v573 = v571;
                  if (v573)
                    v573 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v573);
                  else
                    v574 = 0;
                  v575 = (uint64_t **)(v573 + 8 * v570);
                  *v575 = v566;
                  v568 = (char *)(v575 + 1);
                  if (v567 != v569)
                  {
                    do
                    {
                      v576 = (uint64_t *)*((_QWORD *)v567 - 1);
                      v567 -= 8;
                      *--v575 = v576;
                    }
                    while (v567 != v569);
                    v567 = (char *)v859;
                  }
                  v859 = v575;
                  v861 = v573 + 8 * v574;
                  if (v567)
                    operator delete(v567);
                }
                else
                {
                  *(_QWORD *)v860 = *(_QWORD *)v846;
                  v568 = v567 + 8;
                }
                v860 = v568;
                v577 = *v553;
                if ((*v553)[24])
                {
                  v578 = *(uint64_t **)v846;
                  v835 = *(uint64_t **)v846;
                  v836 = (std::__shared_weak_count *)v847;
                  if (v847)
                  {
                    v579 = (unint64_t *)(v847 + 1);
                    do
                      v580 = __ldxr(v579);
                    while (__stxr(v580 + 1, v579));
                    v577 = *v553;
                  }
                  if (v577[23] < 0)
                    v577 = *(char **)v577;
                  AudioMetadataMemoryPool::fillString<AudioMetadataTrackUID>(a1, &v835, v578, v577);
                  v581 = v836;
                  if (v836)
                  {
                    v582 = (unint64_t *)&v836->__shared_owners_;
                    do
                      v583 = __ldaxr(v582);
                    while (__stlxr(v583 - 1, v582));
                    if (!v583)
                    {
                      ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
                      std::__shared_weak_count::__release_weak(v581);
                    }
                  }
                }
                v584 = *v553;
                if ((*v553)[44])
                  *(_DWORD *)(*(_QWORD *)v846 + 36) = *((_DWORD *)v584 + 10);
                if (v584[36])
                  *(float *)(*(_QWORD *)v846 + 8) = (float)*((unsigned int *)v584 + 8);
                v586 = *((_QWORD *)v584 + 19);
                v585 = (std::__shared_weak_count *)*((_QWORD *)v584 + 20);
                if (v585)
                {
                  v587 = (unint64_t *)&v585->__shared_owners_;
                  do
                    v588 = __ldxr(v587);
                  while (__stxr(v588 + 1, v587));
                }
                if (v586)
                {
                  AudioMetadataMemoryPool::create<AudioMetadataTrackFormat>(&__s1, (uint64_t)a1);
                  v589 = (std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_;
                  v590 = (uint64_t *)__s1.__r_.__value_.__r.__words[0];
                  v591 = v912;
                  if ((unint64_t)v912 >= v913)
                  {
                    v593 = (char *)v911;
                    v594 = (v912 - (_BYTE *)v911) >> 3;
                    v595 = v594 + 1;
                    if ((unint64_t)(v594 + 1) >> 61)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v596 = v913 - (_QWORD)v911;
                    if ((uint64_t)(v913 - (_QWORD)v911) >> 2 > v595)
                      v595 = v596 >> 2;
                    if ((unint64_t)v596 >= 0x7FFFFFFFFFFFFFF8)
                      v597 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v597 = v595;
                    if (v597)
                      v597 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v597);
                    else
                      v598 = 0;
                    v599 = (uint64_t **)(v597 + 8 * v594);
                    *v599 = v590;
                    v592 = (char *)(v599 + 1);
                    if (v591 != v593)
                    {
                      do
                      {
                        v600 = (uint64_t *)*((_QWORD *)v591 - 1);
                        v591 -= 8;
                        *--v599 = v600;
                      }
                      while (v591 != v593);
                      v591 = (char *)v911;
                    }
                    v911 = v599;
                    v913 = v597 + 8 * v598;
                    if (v591)
                      operator delete(v591);
                  }
                  else
                  {
                    *(_QWORD *)v912 = __s1.__r_.__value_.__r.__words[0];
                    v592 = v591 + 8;
                  }
                  v912 = v592;
                  if (*(_BYTE *)(v586 + 24))
                  {
                    v833 = v590;
                    v834 = v589;
                    if (v589)
                    {
                      v601 = (unint64_t *)&v589->__shared_owners_;
                      do
                        v602 = __ldxr(v601);
                      while (__stxr(v602 + 1, v601));
                    }
                    v603 = (char *)v586;
                    if (*(char *)(v586 + 23) < 0)
                      v603 = *(char **)v586;
                    AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(a1, &v833, v590, v603);
                    v604 = v834;
                    if (v834)
                    {
                      v605 = (unint64_t *)&v834->__shared_owners_;
                      do
                        v606 = __ldaxr(v605);
                      while (__stlxr(v606 - 1, v605));
                      if (!v606)
                      {
                        ((void (*)(std::__shared_weak_count *))v604->__on_zero_shared)(v604);
                        std::__shared_weak_count::__release_weak(v604);
                      }
                    }
                  }
                  if (*(_BYTE *)(v586 + 56))
                  {
                    v831 = v590;
                    v832 = v589;
                    if (v589)
                    {
                      v607 = (unint64_t *)&v589->__shared_owners_;
                      do
                        v608 = __ldxr(v607);
                      while (__stxr(v608 + 1, v607));
                    }
                    v609 = (char *)(v586 + 32);
                    if (*(char *)(v586 + 55) < 0)
                      v609 = *(char **)v609;
                    AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(a1, &v831, v590 + 1, v609);
                    v610 = v832;
                    if (v832)
                    {
                      v611 = (unint64_t *)&v832->__shared_owners_;
                      do
                        v612 = __ldaxr(v611);
                      while (__stlxr(v612 - 1, v611));
                      if (!v612)
                      {
                        ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
                        std::__shared_weak_count::__release_weak(v610);
                      }
                    }
                  }
                  if (*(_BYTE *)(v586 + 88))
                  {
                    v829 = v590;
                    v830 = v589;
                    if (v589)
                    {
                      v613 = (unint64_t *)&v589->__shared_owners_;
                      do
                        v614 = __ldxr(v613);
                      while (__stxr(v614 + 1, v613));
                    }
                    v615 = (char *)(v586 + 64);
                    if (*(char *)(v586 + 87) < 0)
                      v615 = *(char **)v615;
                    AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(a1, &v829, v590 + 2, v615);
                    v616 = v830;
                    if (v830)
                    {
                      v617 = (unint64_t *)&v830->__shared_owners_;
                      do
                        v618 = __ldaxr(v617);
                      while (__stlxr(v618 - 1, v617));
                      if (!v618)
                      {
                        ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
                        std::__shared_weak_count::__release_weak(v616);
                      }
                    }
                  }
                  if (*(_BYTE *)(v586 + 120))
                  {
                    v827 = v590;
                    v828 = v589;
                    if (v589)
                    {
                      v619 = (unint64_t *)&v589->__shared_owners_;
                      do
                        v620 = __ldxr(v619);
                      while (__stxr(v620 + 1, v619));
                    }
                    v621 = (char *)(v586 + 96);
                    if (*(char *)(v586 + 119) < 0)
                      v621 = *(char **)v621;
                    AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(a1, &v827, v590 + 3, v621);
                    v622 = v828;
                    if (v828)
                    {
                      v623 = (unint64_t *)&v828->__shared_owners_;
                      do
                        v624 = __ldaxr(v623);
                      while (__stlxr(v624 - 1, v623));
                      if (!v624)
                      {
                        ((void (*)(std::__shared_weak_count *))v622->__on_zero_shared)(v622);
                        std::__shared_weak_count::__release_weak(v622);
                      }
                    }
                  }
                  __s1.__r_.__value_.__r.__words[0] = 0;
                  v625 = *(std::__shared_weak_count **)(v586 + 136);
                  if (v625)
                  {
                    v626 = std::__shared_weak_count::lock(v625);
                    __s1.__r_.__value_.__l.__size_ = (std::string::size_type)v626;
                    if (v626)
                    {
                      __s1.__r_.__value_.__r.__words[0] = *(_QWORD *)(v586 + 128);
                      if (!__s1.__r_.__value_.__r.__words[0])
                        goto LABEL_1139;
                    }
                    else if (!__s1.__r_.__value_.__r.__words[0])
                    {
                      goto LABEL_1139;
                    }
                    AudioMetadataMemoryPool::create<AudioMetadataStreamFormat>(&v947, (uint64_t)a1);
                    v627 = v947;
                    v628 = v909;
                    if ((unint64_t)v909 >= v910)
                    {
                      v630 = (char *)v908;
                      v631 = (v909 - (_BYTE *)v908) >> 3;
                      v632 = v631 + 1;
                      if ((unint64_t)(v631 + 1) >> 61)
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      v633 = v910 - (_QWORD)v908;
                      if ((uint64_t)(v910 - (_QWORD)v908) >> 2 > v632)
                        v632 = v633 >> 2;
                      if ((unint64_t)v633 >= 0x7FFFFFFFFFFFFFF8)
                        v634 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v634 = v632;
                      if (v634)
                        v634 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v634);
                      else
                        v635 = 0;
                      v636 = (char *)(v634 + 8 * v631);
                      *(_QWORD *)v636 = v627;
                      v629 = v636 + 8;
                      if (v628 != v630)
                      {
                        do
                        {
                          v637 = *((_QWORD *)v628 - 1);
                          v628 -= 8;
                          *((_QWORD *)v636 - 1) = v637;
                          v636 -= 8;
                        }
                        while (v628 != v630);
                        v628 = (char *)v908;
                      }
                      v908 = v636;
                      v910 = v634 + 8 * v635;
                      if (v628)
                        operator delete(v628);
                    }
                    else
                    {
                      *(_QWORD *)v909 = v947;
                      v629 = v628 + 8;
                    }
                    v909 = v629;
                    v638 = (char *)__s1.__r_.__value_.__r.__words[0];
                    if (*(_BYTE *)(__s1.__r_.__value_.__r.__words[0] + 24))
                    {
                      v639 = (_QWORD *)v947;
                      v826 = v947;
                      if (*((_QWORD *)&v947 + 1))
                      {
                        v640 = (unint64_t *)(*((_QWORD *)&v947 + 1) + 8);
                        do
                          v641 = __ldxr(v640);
                        while (__stxr(v641 + 1, v640));
                      }
                      if (v638[23] < 0)
                        v638 = *(char **)v638;
                      AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(a1, (uint64_t **)&v826, v639, v638);
                      v642 = (std::__shared_weak_count *)*((_QWORD *)&v826 + 1);
                      if (*((_QWORD *)&v826 + 1))
                      {
                        v643 = (unint64_t *)(*((_QWORD *)&v826 + 1) + 8);
                        do
                          v644 = __ldaxr(v643);
                        while (__stlxr(v644 - 1, v643));
                        if (!v644)
                        {
                          ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
                          std::__shared_weak_count::__release_weak(v642);
                        }
                      }
                    }
                    v645 = __s1.__r_.__value_.__r.__words[0];
                    if (*(_BYTE *)(__s1.__r_.__value_.__r.__words[0] + 56))
                    {
                      v646 = v947;
                      v825 = v947;
                      if (*((_QWORD *)&v947 + 1))
                      {
                        v647 = (unint64_t *)(*((_QWORD *)&v947 + 1) + 8);
                        do
                          v648 = __ldxr(v647);
                        while (__stxr(v648 + 1, v647));
                      }
                      v649 = (char *)(v645 + 32);
                      if (*(char *)(v645 + 55) < 0)
                        v649 = *(char **)v649;
                      AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(a1, (uint64_t **)&v825, (_QWORD *)(v646 + 8), v649);
                      v650 = (std::__shared_weak_count *)*((_QWORD *)&v825 + 1);
                      if (*((_QWORD *)&v825 + 1))
                      {
                        v651 = (unint64_t *)(*((_QWORD *)&v825 + 1) + 8);
                        do
                          v652 = __ldaxr(v651);
                        while (__stlxr(v652 - 1, v651));
                        if (!v652)
                        {
                          ((void (*)(std::__shared_weak_count *))v650->__on_zero_shared)(v650);
                          std::__shared_weak_count::__release_weak(v650);
                        }
                      }
                    }
                    v653 = __s1.__r_.__value_.__r.__words[0];
                    if (*(_BYTE *)(__s1.__r_.__value_.__r.__words[0] + 88))
                    {
                      v654 = v947;
                      v824 = v947;
                      if (*((_QWORD *)&v947 + 1))
                      {
                        v655 = (unint64_t *)(*((_QWORD *)&v947 + 1) + 8);
                        do
                          v656 = __ldxr(v655);
                        while (__stxr(v656 + 1, v655));
                      }
                      v657 = (char *)(v653 + 64);
                      if (*(char *)(v653 + 87) < 0)
                        v657 = *(char **)v657;
                      AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(a1, (uint64_t **)&v824, (_QWORD *)(v654 + 16), v657);
                      v658 = (std::__shared_weak_count *)*((_QWORD *)&v824 + 1);
                      if (*((_QWORD *)&v824 + 1))
                      {
                        v659 = (unint64_t *)(*((_QWORD *)&v824 + 1) + 8);
                        do
                          v660 = __ldaxr(v659);
                        while (__stlxr(v660 - 1, v659));
                        if (!v660)
                        {
                          ((void (*)(std::__shared_weak_count *))v658->__on_zero_shared)(v658);
                          std::__shared_weak_count::__release_weak(v658);
                        }
                      }
                    }
                    v661 = __s1.__r_.__value_.__r.__words[0];
                    if (*(_BYTE *)(__s1.__r_.__value_.__r.__words[0] + 120))
                    {
                      v662 = v947;
                      v823 = v947;
                      if (*((_QWORD *)&v947 + 1))
                      {
                        v663 = (unint64_t *)(*((_QWORD *)&v947 + 1) + 8);
                        do
                          v664 = __ldxr(v663);
                        while (__stxr(v664 + 1, v663));
                      }
                      v665 = (char *)(v661 + 96);
                      if (*(char *)(v661 + 119) < 0)
                        v665 = *(char **)v665;
                      AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(a1, (uint64_t **)&v823, (_QWORD *)(v662 + 24), v665);
                      v666 = (std::__shared_weak_count *)*((_QWORD *)&v823 + 1);
                      if (*((_QWORD *)&v823 + 1))
                      {
                        v667 = (unint64_t *)(*((_QWORD *)&v823 + 1) + 8);
                        do
                          v668 = __ldaxr(v667);
                        while (__stlxr(v668 - 1, v667));
                        if (!v668)
                        {
                          ((void (*)(std::__shared_weak_count *))v666->__on_zero_shared)(v666);
                          std::__shared_weak_count::__release_weak(v666);
                        }
                      }
                    }
                    v669 = *(char **)(__s1.__r_.__value_.__r.__words[0] + 128);
                    if (v669[24])
                    {
                      if (v669[23] < 0)
                        v669 = *(char **)v669;
                      *(_QWORD *)(v947 + 32) = v670;
                    }
                    if (v590)
                      v590[4] = v947;
                    v671 = (std::__shared_weak_count *)*((_QWORD *)&v947 + 1);
                    if (*((_QWORD *)&v947 + 1))
                    {
                      v672 = (unint64_t *)(*((_QWORD *)&v947 + 1) + 8);
                      do
                        v673 = __ldaxr(v672);
                      while (__stlxr(v673 - 1, v672));
                      if (!v673)
                      {
                        ((void (*)(std::__shared_weak_count *))v671->__on_zero_shared)(v671);
                        std::__shared_weak_count::__release_weak(v671);
                      }
                    }
                    v626 = (std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_;
LABEL_1139:
                    if (v626)
                    {
                      v674 = (unint64_t *)&v626->__shared_owners_;
                      do
                        v675 = __ldaxr(v674);
                      while (__stlxr(v675 - 1, v674));
                      if (!v675)
                      {
                        ((void (*)(std::__shared_weak_count *))v626->__on_zero_shared)(v626);
                        std::__shared_weak_count::__release_weak(v626);
                      }
                    }
                  }
                }
                else
                {
                  v590 = 0;
                  v589 = 0;
                }
                *(_QWORD *)(*(_QWORD *)v846 + 12) = v590;
                v676 = *v553;
                v677 = (char *)*((_QWORD *)*v553 + 23);
                if (!v677 || !v677[24])
                  goto LABEL_1181;
                if (v677[23] < 0)
                  v677 = *(char **)v677;
                v678 = (char ***)v920;
                v679 = (char ***)v921;
                while (2)
                {
                  if (v678 == v679)
                    goto LABEL_1354;
                  std::string::basic_string[abi:ne180100]<0>(&__s1, **v678);
                  std::string::basic_string[abi:ne180100]<0>(&v947, v677);
                  v680 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
                  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v681 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
                  else
                    v681 = __s1.__r_.__value_.__l.__size_;
                  v682 = HIBYTE(v948);
                  v683 = SHIBYTE(v948);
                  if (v948 < 0)
                    v682 = *((_QWORD *)&v947 + 1);
                  if (v681 == v682)
                  {
                    if (v948 >= 0)
                      v684 = &v947;
                    else
                      v684 = (__int128 *)v947;
                    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v693 = memcmp(__s1.__r_.__value_.__l.__data_, v684, __s1.__r_.__value_.__l.__size_) == 0;
                      if ((v683 & 0x80000000) == 0)
                        goto LABEL_1168;
                    }
                    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
                    {
                      v685 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
                      p_s1 = &__s1;
                      do
                      {
                        v688 = p_s1->__r_.__value_.__s.__data_[0];
                        p_s1 = (std::string *)((char *)p_s1 + 1);
                        v687 = v688;
                        v690 = *(unsigned __int8 *)v684;
                        v684 = (__int128 *)((char *)v684 + 1);
                        v689 = v690;
                        v692 = v685-- != 0;
                        v693 = v687 == v689;
                      }
                      while (v687 == v689 && v692);
                      if ((SHIBYTE(v948) & 0x80000000) == 0)
                      {
LABEL_1168:
                        if ((v680 & 0x80) == 0)
                        {
LABEL_1169:
                          if (v693)
                            goto LABEL_1179;
LABEL_1174:
                          ++v678;
                          continue;
                        }
LABEL_1173:
                        operator delete(__s1.__r_.__value_.__l.__data_);
                        if (v693)
                        {
LABEL_1179:
                          if (v678 == v679)
LABEL_1354:
                            __assert_rtn("findById", "AudioMetadataExtractor.cpp", 76, "false");
                          *(_QWORD *)(*(_QWORD *)v846 + 28) = *v678;
                          v676 = *v553;
LABEL_1181:
                          v694 = (char *)*((_QWORD *)v676 + 21);
                          if (v694 && v694[24])
                          {
                            if (v694[23] < 0)
                              v694 = *(char **)v694;
                            *(_QWORD *)(*(_QWORD *)v846 + 20) = v695;
                          }
                          if (!v589)
                            goto LABEL_1190;
                          v696 = (unint64_t *)&v589->__shared_owners_;
                          do
                            v697 = __ldaxr(v696);
                          while (__stlxr(v697 - 1, v696));
                          if (!v697)
                          {
                            ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
                            std::__shared_weak_count::__release_weak(v589);
                            if (v585)
                            {
LABEL_1191:
                              v698 = (unint64_t *)&v585->__shared_owners_;
                              do
                                v699 = __ldaxr(v698);
                              while (__stlxr(v699 - 1, v698));
                              if (!v699)
                              {
                                ((void (*)(std::__shared_weak_count *))v585->__on_zero_shared)(v585);
                                std::__shared_weak_count::__release_weak(v585);
                              }
                            }
                          }
                          else
                          {
LABEL_1190:
                            if (v585)
                              goto LABEL_1191;
                          }
                          v700 = (std::__shared_weak_count *)v847;
                          if (v847)
                          {
                            v701 = (unint64_t *)(v847 + 1);
                            do
                              v702 = __ldaxr(v701);
                            while (__stlxr(v702 - 1, v701));
                            if (!v702)
                            {
                              ((void (*)(std::__shared_weak_count *))v700->__on_zero_shared)(v700);
                              std::__shared_weak_count::__release_weak(v700);
                            }
                          }
                          v553 += 2;
                          goto LABEL_948;
                        }
                        goto LABEL_1174;
                      }
                    }
                    else
                    {
                      v693 = 1;
                      if ((SHIBYTE(v948) & 0x80000000) == 0)
                        goto LABEL_1168;
                    }
                  }
                  else
                  {
                    v693 = 0;
                    if ((SHIBYTE(v948) & 0x80000000) == 0)
                      goto LABEL_1168;
                  }
                  break;
                }
                operator delete((void *)v947);
                if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
                  goto LABEL_1169;
                goto LABEL_1173;
              }
            }
LABEL_1230:
            v717 = *(uint64_t **)v895;
            v819 = *(uint64_t **)v895;
            v820 = (std::__shared_weak_count *)v896;
            if (v896)
            {
              v718 = (unint64_t *)(v896 + 1);
              do
                v719 = __ldxr(v718);
              while (__stxr(v719 + 1, v718));
            }
            AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataObject,AudioMetadataObjectRefs,AudioMetadataContent>((uint64_t)a1, &v819, (uint64_t)(v717 + 3), &v889);
            v720 = v820;
            if (v820)
            {
              v721 = (unint64_t *)&v820->__shared_owners_;
              do
                v722 = __ldaxr(v721);
              while (__stlxr(v722 - 1, v721));
              if (!v722)
              {
                ((void (*)(std::__shared_weak_count *))v720->__on_zero_shared)(v720);
                std::__shared_weak_count::__release_weak(v720);
              }
            }
            __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v886;
            std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
            if (v889)
              operator delete(v889);
            v723 = (std::__shared_weak_count *)v896;
            if (v896)
            {
              v724 = (unint64_t *)(v896 + 1);
              do
                v725 = __ldaxr(v724);
              while (__stlxr(v725 - 1, v724));
              if (!v725)
              {
                ((void (*)(std::__shared_weak_count *))v723->__on_zero_shared)(v723);
                std::__shared_weak_count::__release_weak(v723);
              }
            }
            v795 += 2;
            if (v795 == v791)
              goto LABEL_1246;
          }
          v134 = *(uint64_t **)v895;
          *(_BYTE *)(*(_QWORD *)v895 + 77) = 1;
          std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__s1, v132);
          std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v938, v132 + 2);
          std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&v939.__r_.__value_.__r.__words[1], v132 + 4);
          v135 = v132[6];
          v136 = v132[7];
          *(_OWORD *)&v944[13] = *(__int128 *)((char *)v132 + 125);
          v943 = v135;
          *(_OWORD *)v944 = v136;
          if (v937)
          {
            v137 = (std::__shared_weak_count *)v896;
            v889 = *(void **)v895;
            v890 = v896;
            if (v896)
            {
              v138 = (unint64_t *)(v896 + 1);
              do
                v139 = __ldxr(v138);
              while (__stxr(v139 + 1, v138));
            }
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v140 = &__s1;
            else
              v140 = (std::string *)__s1.__r_.__value_.__r.__words[0];
            AudioMetadataMemoryPool::fillString<AudioMetadataContent>(a1, (uint64_t **)&v889, (uint64_t *)((char *)v134 + 36), (char *)v140);
            if (v137)
            {
              v141 = (unint64_t *)&v137->__shared_owners_;
              do
                v142 = __ldaxr(v141);
              while (__stlxr(v142 - 1, v141));
              if (!v142)
              {
                ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                std::__shared_weak_count::__release_weak(v137);
              }
            }
          }
          if (v939.__r_.__value_.__s.__data_[0])
          {
            v143 = (std::__shared_weak_count *)v896;
            v886 = *(uint64_t **)v895;
            v887 = v896;
            if (v896)
            {
              v144 = (unint64_t *)(v896 + 1);
              do
                v145 = __ldxr(v144);
              while (__stxr(v145 + 1, v144));
            }
            if ((v938.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v146 = &v938;
            else
              v146 = (std::string *)v938.__r_.__value_.__r.__words[0];
            AudioMetadataMemoryPool::fillString<AudioMetadataContent>(a1, &v886, (uint64_t *)((char *)v134 + 44), (char *)v146);
            if (v143)
            {
              v147 = (unint64_t *)&v143->__shared_owners_;
              do
                v148 = __ldaxr(v147);
              while (__stlxr(v148 - 1, v147));
              if (!v148)
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
              }
            }
          }
          if (!(_BYTE)v942)
            goto LABEL_253;
          std::string::basic_string[abi:ne180100]<0>(&v947, "File-based");
          v150 = v149;
          if (SHIBYTE(v948) < 0)
          {
            operator delete((void *)v947);
            if (!v150)
              goto LABEL_246;
LABEL_244:
            v151 = 1;
          }
          else
          {
            if (v149)
              goto LABEL_244;
LABEL_246:
            if (!(_BYTE)v942)
              std::__throw_bad_optional_access[abi:ne180100]();
            std::string::basic_string[abi:ne180100]<0>(&v947, "Real-time");
            v153 = v152;
            if ((SHIBYTE(v948) & 0x80000000) == 0)
            {
              if (v152)
                goto LABEL_249;
LABEL_252:
              *((_BYTE *)v134 + 76) = 0;
LABEL_253:
              v154 = *(float *)&v943;
              if (!BYTE4(v943))
                v154 = 0.0;
              *((float *)v134 + 13) = v154;
              v155 = *((float *)&v943 + 2);
              if (!BYTE12(v943))
                v155 = 0.0;
              *((float *)v134 + 14) = v155;
              v156 = *(float *)v944;
              if (!v944[4])
                v156 = 0.0;
              *((float *)v134 + 15) = v156;
              v157 = *(float *)&v944[8];
              if (!v944[12])
                v157 = 0.0;
              *((float *)v134 + 16) = v157;
              v158 = *(float *)&v944[16];
              if (!v944[20])
                v158 = 0.0;
              *((float *)v134 + 17) = v158;
              v159 = *(float *)&v944[24];
              if (!v944[28])
                v159 = 0.0;
              *((float *)v134 + 18) = v159;
              if ((_BYTE)v942 && v941 < 0)
                operator delete((void *)v939.__r_.__value_.__l.__size_);
              if (v939.__r_.__value_.__s.__data_[0] && SHIBYTE(v938.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v938.__r_.__value_.__l.__data_);
              if (v937 && SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s1.__r_.__value_.__l.__data_);
              v131 = (char *)*v795;
              goto LABEL_275;
            }
            operator delete((void *)v947);
            if (!v153)
              goto LABEL_252;
LABEL_249:
            v151 = 2;
          }
          *((_BYTE *)v134 + 76) = v151;
          goto LABEL_253;
        }
      }
LABEL_1246:
      v726 = *(uint64_t **)v906;
      v727 = (std::__shared_weak_count *)v907;
      v818[0] = *(uint64_t **)v906;
      v818[1] = v907;
      if (v907)
      {
        v728 = (unint64_t *)(v907 + 1);
        do
          v729 = __ldxr(v728);
        while (__stxr(v729 + 1, v728));
      }
      AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataContent,AudioMetadataContentRefs,AudioMetadataProgramme>((uint64_t)a1, v818, (uint64_t)v726 + 52, &v900);
      if (v727)
      {
        v730 = (unint64_t *)&v727->__shared_owners_;
        do
          v731 = __ldaxr(v730);
        while (__stlxr(v731 - 1, v730));
        if (!v731)
        {
          ((void (*)(std::__shared_weak_count *))v727->__on_zero_shared)(v727);
          std::__shared_weak_count::__release_weak(v727);
        }
      }
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v897;
      std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
      if (v900)
        operator delete(v900);
      v732 = (std::__shared_weak_count *)v907;
      if (v907)
      {
        v733 = (unint64_t *)(v907 + 1);
        do
          v734 = __ldaxr(v733);
        while (__stlxr(v734 - 1, v733));
        if (!v734)
        {
          ((void (*)(std::__shared_weak_count *))v732->__on_zero_shared)(v732);
          std::__shared_weak_count::__release_weak(v732);
        }
      }
      v4 = v793 + 368;
      if (v793 + 368 == v790)
        goto LABEL_1262;
    }
    v45 = *(uint64_t **)v906;
    *(_BYTE *)(*(_QWORD *)v906 + 105) = 1;
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__s1, v43);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v938, v43 + 2);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&v939.__r_.__value_.__r.__words[1], v43 + 4);
    v46 = v43[6];
    v47 = v43[7];
    *(_OWORD *)&v944[13] = *(__int128 *)((char *)v43 + 125);
    v943 = v46;
    *(_OWORD *)v944 = v47;
    if (v937)
    {
      v48 = (std::__shared_weak_count *)v907;
      v900 = *(void **)v906;
      v901 = v907;
      if (v907)
      {
        v49 = (unint64_t *)(v907 + 1);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &__s1;
      else
        v51 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(a1, (uint64_t **)&v900, v45 + 8, (char *)v51);
      if (v48)
      {
        v52 = (unint64_t *)&v48->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
    }
    if (v939.__r_.__value_.__s.__data_[0])
    {
      v54 = (std::__shared_weak_count *)v907;
      v897 = *(uint64_t **)v906;
      v898 = v907;
      if (v907)
      {
        v55 = (unint64_t *)(v907 + 1);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      if ((v938.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &v938;
      else
        v57 = (std::string *)v938.__r_.__value_.__r.__words[0];
      AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(a1, &v897, v45 + 9, (char *)v57);
      if (v54)
      {
        v58 = (unint64_t *)&v54->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
    }
    if (!(_BYTE)v942)
    {
LABEL_101:
      v65 = *(float *)&v943;
      if (!BYTE4(v943))
        v65 = 0.0;
      *((float *)v45 + 20) = v65;
      v66 = *((float *)&v943 + 2);
      if (!BYTE12(v943))
        v66 = 0.0;
      *((float *)v45 + 21) = v66;
      v67 = *(float *)v944;
      if (!v944[4])
        v67 = 0.0;
      *((float *)v45 + 22) = v67;
      v68 = *(float *)&v944[8];
      if (!v944[12])
        v68 = 0.0;
      *((float *)v45 + 23) = v68;
      v69 = *(float *)&v944[16];
      if (!v944[20])
        v69 = 0.0;
      *((float *)v45 + 24) = v69;
      v70 = *(float *)&v944[24];
      if (!v944[28])
        v70 = 0.0;
      *((float *)v45 + 25) = v70;
      if ((_BYTE)v942 && v941 < 0)
        operator delete((void *)v939.__r_.__value_.__l.__size_);
      if (v939.__r_.__value_.__s.__data_[0] && SHIBYTE(v938.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v938.__r_.__value_.__l.__data_);
      if (v937 && SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      goto LABEL_122;
    }
    std::string::basic_string[abi:ne180100]<0>(&v947, "File-based");
    v61 = v60;
    if (SHIBYTE(v948) < 0)
    {
      operator delete((void *)v947);
      if (v61)
        goto LABEL_92;
    }
    else if (v60)
    {
LABEL_92:
      v62 = 1;
LABEL_98:
      *((_BYTE *)v45 + 104) = v62;
      goto LABEL_101;
    }
    if (!(_BYTE)v942)
      std::__throw_bad_optional_access[abi:ne180100]();
    std::string::basic_string[abi:ne180100]<0>(&v947, "Real-time");
    v64 = v63;
    if (SHIBYTE(v948) < 0)
    {
      operator delete((void *)v947);
      if (v64)
        goto LABEL_97;
    }
    else if (v63)
    {
LABEL_97:
      v62 = 2;
      goto LABEL_98;
    }
    *((_BYTE *)v45 + 104) = 0;
    goto LABEL_101;
  }
LABEL_1262:
  v735 = *a3;
  v736 = (uint64_t *)a3[1];
  v817[0] = (uint64_t *)*a3;
  v817[1] = v736;
  if (v736)
  {
    v737 = (unint64_t *)(v736 + 1);
    do
      v738 = __ldxr(v737);
    while (__stxr(v738 + 1, v737));
    v735 = *a3;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataProgramme,AudioMetadataProgrammeRefs,AudioMetadataFormatExtended>((uint64_t)a1, v817, v735, &v929);
  if (v736)
  {
    v739 = (unint64_t *)(v736 + 1);
    do
      v740 = __ldaxr(v739);
    while (__stlxr(v740 - 1, v739));
    if (!v740)
    {
      (*(void (**)(uint64_t *))(*v736 + 16))(v736);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v736);
    }
  }
  v741 = *a3;
  v742 = (std::__shared_weak_count *)a3[1];
  v815 = (uint64_t *)*a3;
  v816 = v742;
  if (v742)
  {
    v743 = (unint64_t *)&v742->__shared_owners_;
    do
      v744 = __ldxr(v743);
    while (__stxr(v744 + 1, v743));
    v741 = *a3;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataContent,AudioMetadataContentRefs,AudioMetadataFormatExtended>((uint64_t)a1, &v815, v741 + 12, &v926);
  v745 = v816;
  if (v816)
  {
    v746 = (unint64_t *)&v816->__shared_owners_;
    do
      v747 = __ldaxr(v746);
    while (__stlxr(v747 - 1, v746));
    if (!v747)
    {
      ((void (*)(std::__shared_weak_count *))v745->__on_zero_shared)(v745);
      std::__shared_weak_count::__release_weak(v745);
    }
  }
  v748 = *a3;
  v749 = (std::__shared_weak_count *)a3[1];
  v813 = (uint64_t *)*a3;
  v814 = v749;
  if (v749)
  {
    v750 = (unint64_t *)&v749->__shared_owners_;
    do
      v751 = __ldxr(v750);
    while (__stxr(v751 + 1, v750));
    v748 = *a3;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataObject,AudioMetadataObjectRefs,AudioMetadataFormatExtended>((uint64_t)a1, &v813, v748 + 24, &v923);
  v752 = v814;
  if (v814)
  {
    v753 = (unint64_t *)&v814->__shared_owners_;
    do
      v754 = __ldaxr(v753);
    while (__stlxr(v754 - 1, v753));
    if (!v754)
    {
      ((void (*)(std::__shared_weak_count *))v752->__on_zero_shared)(v752);
      std::__shared_weak_count::__release_weak(v752);
    }
  }
  v755 = *a3;
  v756 = (std::__shared_weak_count *)a3[1];
  v811 = (uint64_t *)*a3;
  v812 = v756;
  if (v756)
  {
    v757 = (unint64_t *)&v756->__shared_owners_;
    do
      v758 = __ldxr(v757);
    while (__stxr(v758 + 1, v757));
    v755 = *a3;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataPackFormat,AudioMetadataPackFormatRefs,AudioMetadataFormatExtended>((uint64_t)a1, &v811, v755 + 36, &v920);
  v759 = v812;
  if (v812)
  {
    v760 = (unint64_t *)&v812->__shared_owners_;
    do
      v761 = __ldaxr(v760);
    while (__stlxr(v761 - 1, v760));
    if (!v761)
    {
      ((void (*)(std::__shared_weak_count *))v759->__on_zero_shared)(v759);
      std::__shared_weak_count::__release_weak(v759);
    }
  }
  v762 = *a3;
  v763 = (std::__shared_weak_count *)a3[1];
  v809 = (uint64_t *)*a3;
  v810 = v763;
  if (v763)
  {
    v764 = (unint64_t *)&v763->__shared_owners_;
    do
      v765 = __ldxr(v764);
    while (__stxr(v765 + 1, v764));
    v762 = *a3;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataChannelFormat,AudioMetadataChannelFormatRefs,AudioMetadataFormatExtended>((uint64_t)a1, &v809, v762 + 48, &v917);
  v766 = v810;
  if (v810)
  {
    v767 = (unint64_t *)&v810->__shared_owners_;
    do
      v768 = __ldaxr(v767);
    while (__stlxr(v768 - 1, v767));
    if (!v768)
    {
      ((void (*)(std::__shared_weak_count *))v766->__on_zero_shared)(v766);
      std::__shared_weak_count::__release_weak(v766);
    }
  }
  v769 = *a3;
  v770 = (std::__shared_weak_count *)a3[1];
  v807 = (uint64_t *)*a3;
  v808 = v770;
  if (v770)
  {
    v771 = (unint64_t *)&v770->__shared_owners_;
    do
      v772 = __ldxr(v771);
    while (__stxr(v772 + 1, v771));
    v769 = *a3;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataStreamFormat,AudioMetadataStreamFormatRefs,AudioMetadataFormatExtended>((uint64_t)a1, &v807, v769 + 60, &v908);
  v773 = v808;
  if (v808)
  {
    v774 = (unint64_t *)&v808->__shared_owners_;
    do
      v775 = __ldaxr(v774);
    while (__stlxr(v775 - 1, v774));
    if (!v775)
    {
      ((void (*)(std::__shared_weak_count *))v773->__on_zero_shared)(v773);
      std::__shared_weak_count::__release_weak(v773);
    }
  }
  v776 = *a3;
  v777 = (std::__shared_weak_count *)a3[1];
  v805 = (uint64_t *)*a3;
  v806 = v777;
  if (v777)
  {
    v778 = (unint64_t *)&v777->__shared_owners_;
    do
      v779 = __ldxr(v778);
    while (__stxr(v779 + 1, v778));
    v776 = *a3;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataTrackFormat,AudioMetadataTrackFormatRefs,AudioMetadataFormatExtended>((uint64_t)a1, &v805, v776 + 72, &v911);
  v780 = v806;
  if (v806)
  {
    v781 = (unint64_t *)&v806->__shared_owners_;
    do
      v782 = __ldaxr(v781);
    while (__stlxr(v782 - 1, v781));
    if (!v782)
    {
      ((void (*)(std::__shared_weak_count *))v780->__on_zero_shared)(v780);
      std::__shared_weak_count::__release_weak(v780);
    }
  }
  v783 = *a3;
  v784 = (std::__shared_weak_count *)a3[1];
  v803 = (uint64_t *)*a3;
  v804 = v784;
  if (v784)
  {
    v785 = (unint64_t *)&v784->__shared_owners_;
    do
      v786 = __ldxr(v785);
    while (__stxr(v786 + 1, v785));
    v783 = *a3;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataTrackUID,AudioMetadataTrackUIDRefs,AudioMetadataFormatExtended>((uint64_t)a1, &v803, v783 + 84, &v914);
  v787 = v804;
  if (v804)
  {
    v788 = (unint64_t *)&v804->__shared_owners_;
    do
      v789 = __ldaxr(v788);
    while (__stlxr(v789 - 1, v788));
    if (!v789)
    {
      ((void (*)(std::__shared_weak_count *))v787->__on_zero_shared)(v787);
      std::__shared_weak_count::__release_weak(v787);
    }
  }
  if (v908)
    operator delete(v908);
  if (v911)
    operator delete(v911);
  if (v914)
    operator delete(v914);
  if (v917)
    operator delete(v917);
  if (v920)
    operator delete(v920);
  if (v923)
    operator delete(v923);
  if (v926)
    operator delete(v926);
  if (v929)
    operator delete(v929);
}

void sub_18EFC4848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  CA::ADMLoudnessMetadata::~ADMLoudnessMetadata((void **)&STACK[0x560]);
  v14 = (std::__shared_weak_count *)STACK[0x468];
  if (STACK[0x468])
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (STACK[0x470])
    operator delete((void *)STACK[0x470]);
  if (STACK[0x488])
    operator delete((void *)STACK[0x488]);
  if (STACK[0x4A0])
    operator delete((void *)STACK[0x4A0]);
  if (STACK[0x4B8])
    operator delete((void *)STACK[0x4B8]);
  if (STACK[0x4D0])
    operator delete((void *)STACK[0x4D0]);
  if (STACK[0x4E8])
    operator delete((void *)STACK[0x4E8]);
  if (STACK[0x500])
    operator delete((void *)STACK[0x500]);
  if (STACK[0x518])
    operator delete((void *)STACK[0x518]);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a13);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::stringsEqual(unsigned __int8 *a1, char *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  __darwin_ct_rune_t v9;

  v2 = (char)a1[23];
  if (v2 >= 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 == v4)
  {
    if (v2 >= 0)
      v6 = a1;
    else
      v6 = *(unsigned __int8 **)a1;
    if (!v3)
      return 1;
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a2;
    else
      v7 = *(unsigned __int8 **)a2;
    while (1)
    {
      v8 = *v6;
      if (v8 != *v7)
      {
        v9 = __tolower((char)v8);
        if (v9 != __tolower((char)*v7))
          break;
      }
      ++v6;
      ++v7;
      if (!--v3)
        return 1;
    }
  }
  return 0;
}

void CA::ADMLoudnessMetadata::~ADMLoudnessMetadata(void **this)
{
  if (*((_BYTE *)this + 88) && *((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((_BYTE *)this + 56) && *((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*this);
  }
}

uint64_t `anonymous namespace'::getTypeDefinition(unsigned __int8 *a1)
{
  char v2;
  char v3;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  int v11;
  void *__p[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "DirectSpeakers");
  v3 = v2;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if ((v3 & 1) != 0)
      return 1;
  }
  else if ((v2 & 1) != 0)
  {
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Matrix");
  v6 = v5;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if ((v6 & 1) != 0)
      return 2;
  }
  else if ((v5 & 1) != 0)
  {
    return 2;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Objects");
  v8 = v7;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if ((v8 & 1) != 0)
      return 3;
  }
  else if ((v7 & 1) != 0)
  {
    return 3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "HOA");
  v10 = v9;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if ((v10 & 1) != 0)
      return 4;
  }
  else if ((v9 & 1) != 0)
  {
    return 4;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Binaural");
  if (v13 < 0)
    operator delete(__p[0]);
  if (v11)
    return 5;
  else
    return 0;
}

void sub_18EFC57EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float `anonymous namespace'::populatePosition(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v3;
  float result;

  if (*(_BYTE *)(a2 + 329))
    v2 = *(_BYTE *)(a2 + 328) == 0;
  else
    v2 = 1;
  v3 = !v2;
  *(_BYTE *)(a1 + 12) = v3;
  if (*(_BYTE *)(a2 + 140))
  {
    result = *(float *)(a2 + 136);
    *(float *)a1 = result;
  }
  if (*(_BYTE *)(a2 + 148))
  {
    result = *(float *)(a2 + 144);
    *(float *)(a1 + 4) = result;
  }
  if (*(_BYTE *)(a2 + 156))
  {
    result = *(float *)(a2 + 152);
    *(float *)(a1 + 8) = result;
  }
  return result;
}

char **`anonymous namespace'::findById<AudioMetadataChannelFormat,char *AudioMetadataChannelFormat::*>(char *a1, char ****a2)
{
  char ***v2;
  char ***v3;
  unsigned __int8 v6;
  size_t v7;
  unint64_t v8;
  int v9;
  void **v10;
  uint64_t v11;
  void **p_s1;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  BOOL v19;
  void *__p[2];
  unsigned __int8 v22;
  void *__s1;
  size_t __n;
  unsigned __int8 v25;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    goto LABEL_34;
  do
  {
    std::string::basic_string[abi:ne180100]<0>(&__s1, **v2);
    std::string::basic_string[abi:ne180100]<0>(__p, a1);
    v6 = v25;
    if ((v25 & 0x80u) == 0)
      v7 = v25;
    else
      v7 = __n;
    v8 = v22;
    v9 = (char)v22;
    if ((v22 & 0x80u) != 0)
      v8 = (unint64_t)__p[1];
    if (v7 != v8)
    {
      v19 = 0;
      if (((char)v22 & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_28;
    }
    if ((v22 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((char)v25 < 0)
    {
      v19 = memcmp(__s1, v10, __n) == 0;
      goto LABEL_23;
    }
    if (v25)
    {
      v11 = v25 - 1;
      p_s1 = &__s1;
      do
      {
        v14 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v13 = v14;
        v16 = *(unsigned __int8 *)v10;
        v10 = (void **)((char *)v10 + 1);
        v15 = v16;
        v18 = v11-- != 0;
        v19 = v13 == v15;
      }
      while (v13 == v15 && v18);
LABEL_23:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_28;
    }
    v19 = 1;
    if (((char)v22 & 0x80000000) == 0)
    {
LABEL_24:
      if ((v6 & 0x80) == 0)
        goto LABEL_25;
      goto LABEL_29;
    }
LABEL_28:
    operator delete(__p[0]);
    if ((v25 & 0x80) == 0)
    {
LABEL_25:
      if (v19)
        goto LABEL_32;
      goto LABEL_30;
    }
LABEL_29:
    operator delete(__s1);
    if (v19)
      goto LABEL_32;
LABEL_30:
    ++v2;
  }
  while (v2 != v3);
  v2 = v3;
LABEL_32:
  if (v2 == a2[1])
LABEL_34:
    __assert_rtn("findById", "AudioMetadataExtractor.cpp", 76, "false");
  return *v2;
}

void sub_18EFC59D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataMatrixCoefficient>(uint64_t **a1, uint64_t **a2, _QWORD *a3, char *__s)
{
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 __dst;

  v8 = strlen(__s) + 1;
  v9 = operator new[]();
  std::shared_ptr<char []>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(&__dst, v9);
  v10 = (void *)__dst;
  *a3 = __dst;
  memcpy(v10, __s, v8);
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(a1, (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &__dst);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EFC5AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CA::ADMZone>,CA::ADMZone*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 72;
    }
  }
  return a1;
}

__n128 std::construct_at[abi:ne180100]<CA::ADMRenderer,CA::ADMRenderer,CA::ADMRenderer*>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v2 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    v3 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v3;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    v4 = a2[4];
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v4;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_BYTE *)(a1 + 88) = 1;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  result = (__n128)a2[6];
  *(__n128 *)(a1 + 96) = result;
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  return result;
}

void MP4LDSpatialConfigWriter::~MP4LDSpatialConfigWriter(MP4LDSpatialConfigWriter *this)
{
  MP4SpatialAudioSpecificConfig::~MP4SpatialAudioSpecificConfig(this);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4LDSpatialConfigWriter::Serialize(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  unint64_t i;
  uint64_t v7;
  unint64_t j;
  int *v9;
  unsigned int v11;

  if (!*(_BYTE *)(a1 + 136))
    return 0xFFFFFFFFLL;
  v4 = MP4SampleRate::Index((MP4SampleRate *)**(unsigned int **)(a1 + 8));
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, v4, 4u);
  v5 = **(_DWORD **)(a1 + 8);
  if (MP4SampleRate::Index((MP4SampleRate *)v5) == 15)
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v5, 0x18u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 16), 5u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 20), 3u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 24), 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 28), 2u);
  if (*(_DWORD *)(a1 + 24) != 7)
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 32), 1u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 36), 1u);
  if (*(_DWORD *)(a1 + 24) != 7)
  {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 40), 3u);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 44), 3u);
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 48), 3u);
  if (*(_DWORD *)(a1 + 24) != 7)
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 52), 1u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 56), 2u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 60), 2u);
  if (*(_DWORD *)(a1 + 24) != 7)
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 64), 1u);
  for (i = 0; ; ++i)
  {
    v7 = *(unsigned int *)(a1 + 24);
    if (i >= kBsTreeConfigurationTable[7 * v7 + 1])
      break;
    if (((HIWORD(kBsTreeConfigurationTable[7 * v7 + 2]) >> i) & 1) != 0)
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 76 + 4 * i), 5u);
  }
  for (j = 0; j < kBsTreeConfigurationTable[7 * v7 + 3]; ++j)
  {
    v9 = (int *)(a1 + 4 * j);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v9[24], 1u);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v9[25], 3u);
    if (v9[24])
    {
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, v9[26], 3u);
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, v9[27], 5u);
    }
    v7 = *(unsigned int *)(a1 + 24);
  }
  if (*(_DWORD *)(a1 + 56) == 2)
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 68), 1u);
  if (*(_DWORD *)(a1 + 64))
  {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 72), 2u);
    if (*(_DWORD *)(a1 + 72))
      return 0xFFFFFFFFLL;
  }
  v11 = *(_DWORD *)(a2 + 28) & 7;
  if (v11)
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, v11);
  return 0;
}

uint64_t MP4LDSpatialConfigWriter::size(MP4LDSpatialConfigWriter *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _DWORD *v11;
  int v12;
  unsigned __int16 *v13;
  _DWORD *v14;
  uint64_t i;
  int v17;

  if (*((_BYTE *)this + 136))
  {
    v2 = MP4SampleRate::Index((MP4SampleRate *)**((unsigned int **)this + 1));
    v3 = 0;
    if (v2 == 15)
      v4 = 42;
    else
      v4 = 18;
    v5 = *((unsigned int *)this + 6);
    v6 = v4 | (v5 != 7);
    if (v5 == 7)
      v7 = v6 + 1;
    else
      v7 = v6 + 7;
    if (v5 == 7)
      v8 = 3;
    else
      v8 = 4;
    if (v5 == 7)
      v9 = 4;
    else
      v9 = 5;
    v10 = v7 + v8 + v9;
    v11 = &kBsTreeConfigurationTable[7 * v5];
    v12 = v11[1];
    v13 = (unsigned __int16 *)v11 + 5;
    while (v12 != v3)
    {
      if (((*v13 >> v3) & 1) != 0)
        v10 += 5;
      ++v3;
    }
    v14 = (_DWORD *)((char *)this + 96);
    for (i = kBsTreeConfigurationTable[7 * v5 + 3]; i; --i)
    {
      if (*v14++)
        v17 = 12;
      else
        v17 = 4;
      v10 += v17;
    }
    if (*((_DWORD *)this + 14) == 2)
      ++v10;
    if (!*((_DWORD *)this + 16))
      return (v10 + 7) >> 3;
    if (*((_DWORD *)this + 18))
    {
      v10 += 2;
      return (v10 + 7) >> 3;
    }
  }
  return 0;
}

void MP4LDSpatialConfigWriter::MP4LDSpatialConfigWriter(MP4LDSpatialConfigWriter *this, const MP4SpatialAudioSpecificConfig *a2)
{
  _QWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;

  MP4SpatialAudioSpecificConfig::MP4SpatialAudioSpecificConfig(this);
  *v4 = &off_1E2908D90;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  v6 = (_DWORD *)v4[1];
  if (v5)
  {
    if (!v6)
    {
      v6 = (_DWORD *)operator new();
      *v6 = 0;
      *((_QWORD *)this + 1) = v6;
      v5 = (_DWORD *)*((_QWORD *)a2 + 1);
    }
    *v6 = *v5;
  }
  else if (v6)
  {
    MEMORY[0x193FFE460](v6, 0x1000C4052888210);
    *((_QWORD *)this + 1) = 0;
  }
  v7 = *((_QWORD *)a2 + 16);
  v8 = *((_QWORD *)this + 16);
  if (v7)
  {
    if (!v8)
    {
      v8 = operator new();
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 23) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_DWORD *)(v8 + 80) = 0;
      *((_QWORD *)this + 16) = v8;
      v7 = *((_QWORD *)a2 + 16);
    }
    if (v8 != v7)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v8, *(char **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 2);
      v9 = *(_WORD *)(v7 + 24);
      *(_BYTE *)(v8 + 26) = *(_BYTE *)(v7 + 26);
      *(_WORD *)(v8 + 24) = v9;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v8 + 32), *(char **)(v7 + 32), *(char **)(v7 + 40), *(_QWORD *)(v7 + 40) - *(_QWORD *)(v7 + 32));
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v8 + 56), *(char **)(v7 + 56), *(char **)(v7 + 64), *(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56));
    }
    *(_DWORD *)(v8 + 80) = *(_DWORD *)(v7 + 80);
  }
  else if (v8)
  {
    v10 = *(void **)(v8 + 56);
    if (v10)
    {
      *(_QWORD *)(v8 + 64) = v10;
      operator delete(v10);
    }
    v11 = *(void **)(v8 + 32);
    if (v11)
    {
      *(_QWORD *)(v8 + 40) = v11;
      operator delete(v11);
    }
    v12 = *(void **)v8;
    if (*(_QWORD *)v8)
    {
      *(_QWORD *)(v8 + 8) = v12;
      operator delete(v12);
    }
    MEMORY[0x193FFE460](v8, 0x1010C40ADE5291FLL);
    *((_QWORD *)this + 16) = 0;
  }
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  v13 = *(_OWORD *)((char *)a2 + 76);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *(_OWORD *)((char *)this + 76) = v13;
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_BYTE *)this + 136) = *((_BYTE *)a2 + 136);
}

void sub_18EFC61C4(_Unwind_Exception *a1)
{
  MP4SpatialAudioSpecificConfig *v1;

  MP4SpatialAudioSpecificConfig::~MP4SpatialAudioSpecificConfig(v1);
  _Unwind_Resume(a1);
}

void DSPGraph::GraphInput::~GraphInput(void **this)
{
  void *v2;

  *this = off_1E290BDC0;
  if (*((char *)this + 911) < 0)
    operator delete(this[111]);
  v2 = this[110];
  this[110] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  *this = off_1E290CA98;
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 101));
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 101));
  DSPGraph::Box::~Box((DSPGraph::Box *)this);
}

{
  void *v2;

  *this = off_1E290BDC0;
  if (*((char *)this + 911) < 0)
    operator delete(this[111]);
  v2 = this[110];
  this[110] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  *this = off_1E290CA98;
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 101));
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 101));
  DSPGraph::Box::~Box((DSPGraph::Box *)this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::GraphInput::ClassName(DSPGraph::GraphInput *this)
{
  return "GraphInput";
}

void DSPGraph::GraphInput::record(std::string *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::string *v12;
  int64_t size;
  _BYTE *v14;
  std::string *v15;
  _BYTE *v16;
  std::string *v17;
  std::string v18;

  v12 = &v18;
  std::string::basic_string[abi:ne180100]<0>(&v18, a2);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    size = v18.__r_.__value_.__l.__size_;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if (size >= 1)
  {
    v14 = (char *)v12 + size;
    v15 = v12;
    do
    {
      v16 = memchr(v15, 46, size);
      if (!v16)
        break;
      if (*v16 == 46)
      {
        if (v16 != v14 && v16 - (_BYTE *)v12 != -1)
        {
          v17 = std::string::replace(&v18, v16 - (_BYTE *)v12, 1uLL, "_raw.", 5uLL);
          std::string::operator=(a1 + 37, v17);
        }
        break;
      }
      v15 = (std::string *)(v16 + 1);
      size = v14 - (_BYTE *)v15;
    }
    while (v14 - (_BYTE *)v15 >= 1);
  }
  a1[38].__r_.__value_.__s.__data_[0] = a5;
  a1[38].__r_.__value_.__s.__data_[1] = a4;
  a1[38].__r_.__value_.__l.__size_ = a6;
  DSPGraph::Box::record((uint64_t)a1, a2, a3, a4, a5, a6);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_18EFC6400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GraphInput::stopRecording(DSPGraph::GraphInput *this, uint64_t a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_BYTE *)this + 913) = 0;
  return DSPGraph::Box::stopRecording(this, a2);
}

uint64_t DSPGraph::GraphInput::recordEnable(DSPGraph::Box *this, uint64_t a2, char a3)
{
  *((_BYTE *)this + 913) = a3;
  return DSPGraph::Box::recordEnable(this, a2, a3);
}

double DSPGraph::GraphInput::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 7.28117482e199;
  *(_OWORD *)a1 = xmmword_18F1170F0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::GraphIOBox::hasPresetData(DSPGraph::GraphIOBox *this)
{
  return 0;
}

void DSPGraph::GraphInput::decompileBox(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v4;
  char *v6;
  std::string *p_p;
  std::string::size_type size;
  char *v9;
  void *v10[2];
  char v11;
  std::string __p;

  v4 = a2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"in ", 3);
  if ((a3 & 1) != 0)
  {
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
    v9 = (char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v9 = *(char **)v9;
    std::string::basic_string[abi:ne180100]<0>(v10, v9);
    DSPGraph::asDecompileString((uint64_t)v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
  }
  else
  {
    v6 = (char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v6 = *(char **)v6;
    std::string::basic_string[abi:ne180100]<0>(v10, v6);
    DSPGraph::asDecompileString((uint64_t)v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_18EFC65D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DSPGraph::GraphOutput::~GraphOutput(DSPGraph::GraphOutput *this)
{
  DSPGraph::SimpleABL *v2;

  *(_QWORD *)this = off_1E290CA98;
  v2 = (DSPGraph::GraphOutput *)((char *)this + 808);
  DSPGraph::SimpleABL::free((DSPGraph::GraphOutput *)((char *)this + 808));
  DSPGraph::SimpleABL::free(v2);
  DSPGraph::Box::~Box(this);
}

{
  DSPGraph::SimpleABL *v2;

  *(_QWORD *)this = off_1E290CA98;
  v2 = (DSPGraph::GraphOutput *)((char *)this + 808);
  DSPGraph::SimpleABL::free((DSPGraph::GraphOutput *)((char *)this + 808));
  DSPGraph::SimpleABL::free(v2);
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::GraphOutput::ClassName(DSPGraph::GraphOutput *this)
{
  return "GraphOutput";
}

double DSPGraph::GraphOutput::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 8.1261874e228;
  *(_OWORD *)a1 = xmmword_18F117100;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void DSPGraph::GraphOutput::decompileBox(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v4;
  char *v6;
  std::string *p_p;
  std::string::size_type size;
  char *v9;
  void *v10[2];
  char v11;
  std::string __p;

  v4 = a2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"out ", 4);
  if ((a3 & 1) != 0)
  {
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
    v9 = (char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v9 = *(char **)v9;
    std::string::basic_string[abi:ne180100]<0>(v10, v9);
    DSPGraph::asDecompileString((uint64_t)v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
  }
  else
  {
    v6 = (char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v6 = *(char **)v6;
    std::string::basic_string[abi:ne180100]<0>(v10, v6);
    DSPGraph::asDecompileString((uint64_t)v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_18EFC6848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFileFormatBase::GetHFSCodes(AudioFileFormatBase *this, unsigned int *a2, void *a3)
{
  return 1886681407;
}

uint64_t AudioFileFormatBase::AsAudioFileFormat(AudioFileFormatBase *this)
{
  return 0;
}

uint64_t AudioFileFormat::NewStream(AudioFileFormat *this)
{
  return 0;
}

void AudioFileFormatBase::AudioFileFormatBase(AudioFileFormatBase *this, int a2)
{
  *(_QWORD *)this = off_1E2907AB8;
  *((_DWORD *)this + 2) = a2;
}

void AudioFileFormat::AudioFileFormat(AudioFileFormat *this, int a2)
{
  *((_DWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E2904F78;
}

void sub_18EFC695C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFC6D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  uint64_t v27;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_18EFC6EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AUAudioUnit;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18EFC711C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFC7188(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFC72A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18EFC73F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFC7498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EFC77BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFC7CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_18EFC7D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_18EFC7DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_18EFC7E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_18EFC80C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EFC832C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  void *v12;

  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EFC846C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18EFC85B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  MEMORY[0x193FFD878](va);
  _Unwind_Resume(a1);
}

void sub_18EFC8890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EFC8E10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFC8EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EFC8F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EFC92D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFC9398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFC9458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFC962C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18EFC9700(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFC97E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18EFC9B54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  AUEventSchedule *v3;

  AUEventSchedule::~AUEventSchedule(v3);
  TThreadSafeList<RenderObserver>::NodeStack::free_all(v2);
  TThreadSafeList<RenderObserver>::NodeStack::free_all((uint64_t *)(v1 + 80));
  TThreadSafeList<RenderObserver>::NodeStack::free_all((uint64_t *)(v1 + 88));
  _Unwind_Resume(a1);
}

void AUEventSchedule::~AUEventSchedule(AUEventSchedule *this)
{
  AUEventSchedule::uninitialize(this);

}

uint64_t *TThreadSafeList<RenderObserver>::NodeStack::free_all(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  void *v3;

  v1 = *result;
  if (*result)
  {
    v2 = result;
    do
    {
      *v2 = *(_QWORD *)v1;
      v3 = *(void **)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;

      result = (uint64_t *)MEMORY[0x193FFE460](v1, 0x10A0C40CEAA8FA1);
      v1 = *v2;
    }
    while (*v2);
  }
  return result;
}

void AUEventSchedule::uninitialize(AUEventSchedule *this)
{
  unsigned __int128 *padding;
  unsigned __int128 v3;
  AURenderEvent *v4;
  uint64_t v5;

  padding = (unsigned __int128 *)this[1].mAddedEventQueue.mDequeueHead.padding;
  do
    v3 = __ldaxp(padding);
  while (__stlxp(v3, padding));
  AUEventSchedule::parameterWatchdogFired((AUEventSchedule *)&v5, (uint64_t)this, (AUEventSchedule *)v3, 0);
  v4 = (AURenderEvent *)AUEventSchedule::preRender(this, 0x7FFFFFFFFFFFFFFEuLL, 1u, 0);
  AUEventSchedule::postRender(this, v4);
  do
    __ldaxp(padding);
  while (__stlxp(0, padding));
}

AUEventSchedule *AUEventSchedule::parameterWatchdogFired(AUEventSchedule *this, uint64_t a2, AUEventSchedule *a3, unint64_t a4)
{
  AUEventSchedule *v4;
  unsigned __int8 v5;
  AURenderEventAllocator *v9;
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v4 = this;
  v5 = atomic_load((unsigned __int8 *)(a2 + 96));
  if ((v5 & 1) == 0)
    goto LABEL_6;
  this = (AUEventSchedule *)PreviousRenderTime::parameterWatchdogFireTime((PreviousRenderTime *)(a2 + 128));
  if (this == a3 || (unint64_t)v9 <= a4)
  {
    v18 = 0x8000;
    v15 = 0u;
    v16 = 0u;
    v14 = 0u;
    v13 = 0xC200000000000000;
    v17 = 1;
    memset(v12, 0, sizeof(v12));
    this = (AUEventSchedule *)(*(uint64_t (**)(_QWORD, int *, unint64_t *, uint64_t, _QWORD, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)(a2 + 120) + 16))(*(_QWORD *)(a2 + 120), &v18, &v13, 0x1000000, 0, v12, 0, v10);
LABEL_6:
    v11 = 0;
    LOBYTE(v4->mAUv2GetParameterSynchronizer) = 0;
    goto LABEL_7;
  }
  v4->mAUv2GetParameterSynchronizer = (AUv2GetParameterSynchronizer *)this;
  v4->mAllocator = v9;
  v11 = 1;
LABEL_7:
  LOBYTE(v4->mScheduledParameterRefresher) = v11;
  return this;
}

uint64_t AUEventSchedule::preRender(AUEventSchedule *this, unint64_t a2, unsigned int a3, int a4)
{
  unsigned __int128 *padding;
  uint64_t v8;
  AURenderEventNode *v9;
  unint64_t *p_mAddedEventQueue;
  AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **p_mScheduleHead;
  uint64_t v12;
  AURenderEventNode *value;
  unint64_t *v14;
  unint64_t v15;
  AURenderEventNode *v16;
  unint64_t v17;
  char v18;
  AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime *v24;
  _QWORD *v25;
  int64_t v26;
  AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **v27;
  _QWORD *v28;
  AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **v29;
  AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **v30;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;

  atomic_store(0, (unsigned __int8 *)&this->mHavePendingSetParameter);
  if (a2 >> 28 != 0xFFFFFFFE0)
  {
    padding = (unsigned __int128 *)this[1].mAddedEventQueue.mDequeueHead.padding;
    v8 = mach_absolute_time();
    v34 = v8;
    v35 = a3;
    do
      __ldxp(padding);
    while (__stxp(__PAIR128__(a3, v8), padding));
  }
  v9 = 0;
  p_mAddedEventQueue = (unint64_t *)&this->mAddedEventQueue;
  p_mScheduleHead = &this->mScheduleHead;
  v12 = a2 + a3;
  while (1)
  {
    value = this->mAddedEventQueue.mDequeueHead.value;
    if (!value)
    {
      do
        v14 = (unint64_t *)__ldaxr(p_mAddedEventQueue);
      while (__stxr(0, p_mAddedEventQueue));
      if (!v14)
        goto LABEL_40;
      value = 0;
      do
      {
        v15 = (unint64_t)value;
        value = (AURenderEventNode *)v14;
        v14 = (unint64_t *)atomic_load(v14);
        atomic_store(v15, (unint64_t *)value);
      }
      while (v14);
      this->mAddedEventQueue.mDequeueHead.value = value;
    }
    v16 = (AURenderEventNode *)atomic_load((unint64_t *)value);
    this->mAddedEventQueue.mDequeueHead.value = v16;
    v17 = *((_QWORD *)value + 1);
    if (v17 >> 28 == 0xFFFFFFFF0)
    {
      v17 = a2 + v17;
      *((_QWORD *)value + 1) = v17;
    }
    if (v17 == 1589718640
      && *((_QWORD *)value + 3) == 1589718640
      && *((float *)value + 8) >> 8 == 6209838)
    {
      break;
    }
    if (*((_BYTE *)value + 16) == 1 && *((_DWORD *)value + 9) && !*((_BYTE *)value + 19))
    {
      if (pthread_self() == *((pthread_t *)value + 5))
        v18 = 3;
      else
        v18 = 1;
      *((_BYTE *)value + 19) |= v18;
    }
    v19 = &this->mScheduleHead;
    if (v9 && (v19 = &this->mScheduleHead, *((_QWORD *)value + 1) >= *((_QWORD *)v9 + 1)))
    {
      v19 = *(AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime ***)v9;
      v20 = v9;
    }
    else
    {
      do
      {
        v20 = v19;
        v19 = (AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **)*v19;
      }
      while (v19 && *((_QWORD *)value + 1) >= (uint64_t)v19[1]);
    }
    *(_QWORD *)value = v19;
    if (!v19)
      v9 = value;
    *v20 = value;
  }
  *(_QWORD *)value = 0;
  this->mScheduleHead = 0;
  v21 = (unint64_t *)this->mAddedEventQueue.mDequeueHead.value;
  if (v21)
    goto LABEL_38;
  while (1)
  {
    do
      v22 = (unint64_t *)__ldaxr(p_mAddedEventQueue);
    while (__stxr(0, p_mAddedEventQueue));
    if (!v22)
      break;
    v21 = 0;
    do
    {
      v23 = (unint64_t)v21;
      v21 = v22;
      v22 = (unint64_t *)atomic_load(v22);
      atomic_store(v23, v21);
    }
    while (v22);
    this->mAddedEventQueue.mDequeueHead.value = (AURenderEventNode *)v21;
    do
    {
LABEL_38:
      v21 = (unint64_t *)atomic_load(v21);
      this->mAddedEventQueue.mDequeueHead.value = (AURenderEventNode *)v21;
    }
    while (v21);
  }
LABEL_40:
  v34 = 0;
  v35 = 0;
  v33[0] = 0;
  v33[1] = 0;
  v24 = *p_mScheduleHead;
  if (*p_mScheduleHead)
  {
    v25 = (_QWORD *)((char *)v24 + 8);
    v26 = *((_QWORD *)v24 + 1);
    if (v26 >= v12)
      return v34;
    while (1)
    {
      v27 = (AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **)v24;
      if (*((_BYTE *)v24 + 16) != 1 || !a4 || !*((_DWORD *)v24 + 9))
        goto LABEL_49;
      if ((unint64_t)v26 >> 28 == 0xFFFFFFFE0)
        *v25 = v26 + 0x100000000;
      if ((*((_BYTE *)v24 + 19) & 2) == 0)
        v28 = v33;
      else
LABEL_49:
        v28 = &v34;
      if (*v28)
      {
        v30 = (AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **)v28[1];
        v29 = (AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **)(v28 + 1);
        *v30 = v24;
      }
      else
      {
        *v28 = v24;
        v29 = (AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **)(v28 + 1);
      }
      *v29 = v24;
      v24 = *(AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **)v24;
      if (!*v27)
        break;
      v25 = (_QWORD *)((char *)v24 + 8);
      v26 = *((_QWORD *)v24 + 1);
      if (v26 >= v12)
      {
        *p_mScheduleHead = v24;
        if (v27 != p_mScheduleHead)
          goto LABEL_58;
        return v34;
      }
    }
  }
  v27 = &this->mScheduleHead;
LABEL_58:
  *v27 = 0;
  return v34;
}

void AUEventSchedule::postRender(AUEventSchedule *this, AURenderEvent *a2)
{
  AUParameterAddress v4;
  AURenderEvent *v5;
  AURenderEvent *next;
  AUParameterAddress parameterAddress;
  AUScheduledParameterRefresher2 *mScheduledParameterRefresher;
  unsigned int wordCount;

  if (a2)
  {
    v4 = 0;
    v5 = a2;
    while (1)
    {
      next = v5->head.next;
      if (v5->head.eventType - 1 <= 1)
        break;
LABEL_13:
      if (!v5->head.reserved)
        AURenderEventAllocator::dealloc(this->mAllocator, v5);
      v5 = next;
      if (!next)
        return;
    }
    if (v5 == a2)
    {
      parameterAddress = a2->parameter.parameterAddress;
    }
    else
    {
      parameterAddress = v5->parameter.parameterAddress;
      if (parameterAddress == v4)
      {
LABEL_11:
        wordCount = v5->MIDIEventsList.eventList.packet[0].wordCount;
        if (wordCount)
          AUv2GetParameterSynchronizer::setLatestV2SetParameterSequenceNumber(this->mAUv2GetParameterSynchronizer, wordCount);
        goto LABEL_13;
      }
    }
    mScheduledParameterRefresher = this->mScheduledParameterRefresher;
    if (mScheduledParameterRefresher)
      AUScheduledParameterRefresher::deferInvalidateParameter((AUScheduledParameterRefresher *)mScheduledParameterRefresher, (unint64_t)this[1].mAUv2GetParameterSynchronizer, parameterAddress);
    v4 = parameterAddress;
    goto LABEL_11;
  }
}

unint64_t *AUScheduledParameterRefresher::deferInvalidateParameter(AUScheduledParameterRefresher *this, unint64_t a2, unint64_t a3)
{
  unint64_t *result;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;

  result = (unint64_t *)XAtomicPoolAllocator::alloc((AUScheduledParameterRefresher *)((char *)this + 16));
  result[1] = a2;
  result[2] = a3;
  v7 = (unint64_t *)((char *)this + 216);
  v8 = *((_QWORD *)this + 27);
  atomic_store(v8, result);
  v9 = __ldaxr((unint64_t *)this + 27);
  if (v9 != v8)
  {
    __clrex();
LABEL_5:
    while (1)
    {
      atomic_store(v9, result);
      v10 = __ldaxr(v7);
      if (v10 != v9)
        break;
      if (__stlxr((unint64_t)result, v7))
        goto LABEL_9;
      v11 = 1;
LABEL_10:
      v9 = v10;
      if (v11)
        goto LABEL_11;
    }
    __clrex();
LABEL_9:
    v11 = 0;
    goto LABEL_10;
  }
  if (__stlxr((unint64_t)result, v7))
    goto LABEL_5;
LABEL_11:
  v12 = (unsigned __int8 *)this + 176;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(1u, v12));
  if ((v13 & 1) == 0)
    return (unint64_t *)caulk::concurrent::messenger::enqueue(*((caulk::concurrent::messenger **)this + 21), (AUScheduledParameterRefresher *)((char *)this + 144));
  return result;
}

AUv2GetParameterSynchronizer *AUv2GetParameterSynchronizer::setLatestV2SetParameterSequenceNumber(AUv2GetParameterSynchronizer *this, unsigned int a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  BOOL v5;
  _BOOL4 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  v2 = HIDWORD(*(unint64_t *)this);
  v3 = a2 - v2;
  v4 = *(_QWORD *)this & 0xFFFFFFFF00000000;
  if ((int)(a2 - v2) >= 0)
    v4 = 0;
  v5 = (_DWORD)v2 == 0;
  v6 = v2 != 0;
  if (v5)
    v7 = 0;
  else
    v7 = v4;
  v8 = __ldaxr((unint64_t *)this);
  if (v8 != *this)
  {
    __clrex();
    while (1)
    {
LABEL_10:
      v3 = a2 - HIDWORD(v8);
      v9 = v8 & 0xFFFFFFFF00000000;
      if ((int)(a2 - HIDWORD(v8)) >= 0)
        v9 = 0;
      v6 = HIDWORD(v8) != 0;
      v10 = HIDWORD(v8) ? v9 : 0;
      v11 = __ldaxr((unint64_t *)this);
      if (v11 != v8)
        break;
      if (__stlxr(v10 | a2, (unint64_t *)this))
        goto LABEL_19;
      v12 = 1;
LABEL_20:
      v8 = v11;
      if ((v12 & 1) != 0)
        goto LABEL_21;
    }
    __clrex();
LABEL_19:
    v12 = 0;
    goto LABEL_20;
  }
  if (__stlxr(v7 | a2, (unint64_t *)this))
    goto LABEL_10;
LABEL_21:
  if (v6 && v3 >= 0)
    return (AUv2GetParameterSynchronizer *)caulk::semaphore::signal((caulk::semaphore *)&this[1]);
  return this;
}

void AURenderEventAllocator::dealloc(AURenderEventAllocator *this, AURenderEvent *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;

  switch(a2->head.eventType)
  {
    case AURenderEventParameter:
    case AURenderEventParameterRamp:
      OSAtomicEnqueue((OSQueueHead *)this + 2, a2, *((_QWORD *)this + 6));
      v3 = (unsigned int *)((char *)this + 96);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
      break;
    case AURenderEventMIDI:
      OSAtomicEnqueue((OSQueueHead *)this + 9, a2, *((_QWORD *)this + 20));
      v5 = (unsigned int *)((char *)this + 208);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      break;
    case AURenderEventMIDISysEx:
      if (a2->MIDI.length < 0x1Cu)
      {
        OSAtomicEnqueue((OSQueueHead *)this + 2, a2, *((_QWORD *)this + 6));
        v9 = (unsigned int *)((char *)this + 96);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      else
      {
        free(a2);
      }
      break;
    case AURenderEventMIDIEventList:
      OSAtomicEnqueue((OSQueueHead *)this + 16, a2, *((_QWORD *)this + 34));
      v7 = (unsigned int *)((char *)this + 320);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      break;
    default:
      return;
  }
}

void *XAtomicPoolAllocator::alloc(XAtomicPoolAllocator *this)
{
  unsigned int *v2;
  unsigned int v3;
  void *result;

  v2 = (unsigned int *)((char *)this + 96);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 - 1, v2));
  result = OSAtomicDequeue((OSQueueHead *)this + 2, *((_QWORD *)this + 6));
  if (!result)
  {
    XAtomicPoolAllocator::allocChunk(this);
    return OSAtomicDequeue((OSQueueHead *)this + 2, *((_QWORD *)this + 6));
  }
  return result;
}

uint64_t PreviousRenderTime::parameterWatchdogFireTime(PreviousRenderTime *this)
{
  unsigned __int128 *v1;
  unsigned __int128 v2;

  v1 = (unsigned __int128 *)((char *)this + 16);
  do
    v2 = __ldxp(v1);
  while (__stxp(v2, v1));
  if (!(_QWORD)v2)
    mach_absolute_time();
  return v2;
}

uint64_t CADeprecated::TSingleton<AURenderEventAllocator>::instance()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(CADeprecated::TSingleton<AURenderEventAllocator>::sOnce);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(CADeprecated::TSingleton<AURenderEventAllocator>::sOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AURenderEventAllocator>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<AURenderEventAllocator>::sInstance;
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AURenderEventAllocator>::instance(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_OWORD *)v0 = xmmword_18F117110;
  *(_QWORD *)(v0 + 16) = 4080;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_DWORD *)(v0 + 96) = 0;
  *(_OWORD *)(v0 + 112) = xmmword_18F117120;
  *(_QWORD *)(v0 + 128) = 4080;
  *(_QWORD *)(v0 + 144) = 0;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_QWORD *)(v0 + 192) = 0;
  *(_DWORD *)(v0 + 208) = 0;
  *(_QWORD *)&result = 296;
  *(_OWORD *)(v0 + 224) = xmmword_18F117130;
  *(_QWORD *)(v0 + 240) = 3848;
  *(_QWORD *)(v0 + 256) = 0;
  *(_QWORD *)(v0 + 264) = 0;
  *(_QWORD *)(v0 + 272) = 0;
  *(_QWORD *)(v0 + 288) = 0;
  *(_QWORD *)(v0 + 296) = 0;
  *(_QWORD *)(v0 + 304) = 0;
  *(_DWORD *)(v0 + 320) = 0;
  __dmb(0xBu);
  CADeprecated::TSingleton<AURenderEventAllocator>::sInstance = v0;
  return result;
}

Class ___ZL42getAVSpeechSynthesisProviderAudioUnitClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
    AVFAudioLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AVFAudioLibrary()");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AVFASoftLink.h"), 63, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("AVSpeechSynthesisProviderAudioUnit");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVSpeechSynthesisProviderAudioUnitClass()_block_invoke");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("AVFASoftLink.h"), 66, CFSTR("Unable to find class %s"), "AVSpeechSynthesisProviderAudioUnit");

LABEL_8:
    __break(1u);
  }
  getAVSpeechSynthesisProviderAudioUnitClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void sub_18EFCA6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18EFCA790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EFCA880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_18EFCA99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_18EFCAA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_18EFCC0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c55_ZTSNSt3__110shared_ptrIN4MIDI20DynamicMIDIConverterEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c55_ZTSNSt3__110shared_ptrIN4MIDI20DynamicMIDIConverterEEE(uint64_t a1)
{
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t MIDI::EventList::PacketReader::read(uint64_t *a1, _QWORD *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;

  v3 = a1[1];
  v4 = a1[3];
  if (v4 >= v3)
    return 0;
  v5 = *a1;
  v6 = (unsigned int *)(*a1 + 4 * v4);
  v7 = *v6;
  v8 = v4 + MIDI::UniversalPacket::word_sizes[v7 >> 28];
  if (v8 > v3)
    return 0;
  *a2 = a1[2];
  switch((uint64_t)(v5 + 4 * v8 - (_QWORD)v6) >> 2)
  {
    case 0:
      goto LABEL_9;
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      *a3++ = v7;
      v10 = v6[1];
      ++v6;
      LODWORD(v7) = v10;
LABEL_6:
      *a3++ = v7;
      v11 = v6[1];
      ++v6;
      LODWORD(v7) = v11;
LABEL_7:
      *a3++ = v7;
      LODWORD(v7) = v6[1];
LABEL_8:
      *a3 = v7;
LABEL_9:
      a1[3] = v8;
      result = 1;
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

void std::__shared_ptr_emplace<MIDI::DynamicMIDIConverter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIDI::DynamicMIDIConverter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t MIDI::convertEventListToPacketList(_DWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE v5[48];
  void (**v6)(MIDI::MIDIPacketList_Deliverer *__hidden);
  uint64_t v7;
  _BYTE v8[48];
  _QWORD v9[97];

  v9[96] = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  (*(void (**)(_BYTE *, uint64_t *))(*a2 + 8))(v5, a2 + 1);
  v6 = &off_1E290A288;
  v7 = v4;
  (*(void (**)(_BYTE *, _BYTE *))(v4 + 16))(v8, v5);
  bzero(v9, 0x300uLL);
  caulk::inplace_function_detail::vtable<void,MIDI::LegacyPacketList const*>::vtable(void)::{lambda(void *)#1}::__invoke(v5);
  MIDI::MIDIPacketList_Deliverer::operator()((uint64_t)&v6, a1);
  v6 = &off_1E290A288;
  return (*(uint64_t (**)(_BYTE *))(v7 + 24))(v8);
}

void sub_18EFCC364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t MIDI::MIDIPacketList_Deliverer::operator()(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  size_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t *v22;
  char v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int v65;
  int v66;
  uint64_t __src[3];

  __src[1] = *MEMORY[0x1E0C80C00];
  v62 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t *, uint64_t))(v62 + 8))(&v63, a1 + 16);
  v65 = 0;
  v64 = &v66;
  v53 = a2;
  if (*a2 == 2)
  {
    if (!a2[1])
      return MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase((uint64_t)&v62);
    v25 = 0;
    v26 = (uint64_t)(a2 + 2);
    v49 = a1 + 64;
LABEL_77:
    v52 = v25;
    v27 = *(unsigned int *)(v26 + 8);
    v58 = (_DWORD *)(v26 + 12);
    v59 = v27;
    v51 = v26;
    v60 = *(_QWORD *)v26;
    v61 = 0;
    while (1)
    {
      v56 = 0;
      v57 = 0;
      v55 = 0;
      if (!MIDI::EventList::PacketReader::read((uint64_t *)&v58, &v57, &v55))
      {
        v26 = v51 + 4 * *(unsigned int *)(v51 + 8) + 12;
        v25 = v52 + 1;
        if ((v52 + 1) >= v53[1])
          return MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase((uint64_t)&v62);
        goto LABEL_77;
      }
      __src[0] = v57;
      v28 = v55;
      if (((1 << (v55 >> 28)) & 0xA02B) != 0)
        break;
      if (v55 >> 28 == 4)
      {
        v30 = BYTE3(v55) & 0xF | 0x20;
        v31 = HIDWORD(v55);
        switch(BYTE2(v55) >> 4)
        {
          case 2:
          case 3:
            v34 = v49 + 48 * (BYTE3(v55) & 0xF);
            v35 = ((unint64_t)v55 >> 16) & 0xF;
            v36 = (unsigned __int8 *)(v34 + 3 * v35);
            v37 = (v55 >> 8) & 0x7F;
            v38 = v55 & 0x7F;
            if ((v55 & 0x100000) != 0)
              v39 = 2;
            else
              v39 = 1;
            if (v39 == *v36 && v37 == v36[1])
            {
              v40 = v35 | 0xB0;
              if (v38 == *(unsigned __int8 *)(v34 + 3 * v35 + 2))
              {
                v41 = (v30 << 24) | (v40 << 16);
                goto LABEL_100;
              }
            }
            else
            {
              v40 = v35 | 0xB0;
            }
            v50 = ((unint64_t)v55 >> 16) & 0xF;
            if ((v55 & 0x100000) != 0)
              v42 = 25344;
            else
              v42 = 25856;
            v41 = (v30 << 24) | (v40 << 16);
            v43 = (v55 >> 8) & 0x7F;
            MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v41 | v42 | v37, 0, (uint64_t)&v62, __src);
            MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v41 | (v42 - 256) | v38, 0, (uint64_t)&v62, __src);
            *v36 = v39;
            v44 = v34 + 3 * v50;
            *(_BYTE *)(v44 + 1) = v43;
            *(_BYTE *)(v44 + 2) = v38;
LABEL_100:
            MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v41 | (v31 >> 25) | 0x600, 0, (uint64_t)&v62, __src);
            v45 = (v31 >> 18) & 0x7F;
            if (!v45)
              continue;
            v29 = 0;
            v28 = v45 | v41 | 0x2600u;
            break;
          case 8:
          case 9:
          case 10:
          case 11:
            v29 = 0;
            v32 = BYTE2(v55) >> 4 == 9;
            if (HIDWORD(v55) >> 25)
              v32 = HIDWORD(v55) >> 25;
            v33 = (BYTE2(v55) << 16) | (v30 << 24) | v55 & 0x7F00;
            goto LABEL_87;
          case 12:
            if ((v55 & 1) != 0)
            {
              v47 = BYTE2(v55) << 16;
              MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>((v47 - 0x100000) & 0xFFFFFF80 | (v30 << 24) | (HIDWORD(v55) >> 8) & 0x7F, 0, (uint64_t)&v62, __src);
              MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>((v47 - 0x100000) | (v30 << 24) | v31 & 0x7F | 0x2000, 0, (uint64_t)&v62, __src);
              v46 = v30 << 24;
            }
            else
            {
              v46 = v30 << 24;
              v47 = BYTE2(v55) << 16;
            }
            v29 = 0;
            v33 = v46 | v47;
            v32 = HIWORD(v31) & 0x7F00;
LABEL_87:
            v28 = v32 | v33;
            break;
          case 13:
            v29 = 0;
            v28 = (BYTE2(v55) << 16) | (v30 << 24) | (HIDWORD(v55) >> 25 << 8);
            break;
          case 14:
            v29 = 0;
            v28 = (HIDWORD(v55) >> 10) & 0x7F00 | (BYTE2(v55) << 16) | (v30 << 24) | (HIDWORD(v55) >> 25);
            break;
          default:
            continue;
        }
LABEL_81:
        MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v28, v29, (uint64_t)&v62, __src);
      }
    }
    v29 = HIDWORD(v55);
    goto LABEL_81;
  }
  if (*a2 != 1)
    std::terminate();
  if (a2[1])
  {
    v4 = 0;
    v5 = a2 + 2;
    do
    {
      v6 = v5[2];
      v58 = v5 + 3;
      v59 = v6;
      v60 = *(_QWORD *)v5;
      v61 = 0;
      while (1)
      {
        v54 = 0;
        v55 = 0;
        v56 = 0;
        if (!MIDI::EventList::PacketReader::read((uint64_t *)&v58, &v54, &v55))
          break;
        v7 = v54;
        v8 = v55;
        v9 = v55 >> 28;
        if (v55 >> 28 == 3)
        {
          v13 = ((unint64_t)v55 >> 16) & 0xF;
          if (v13 <= 6 && BYTE2(v55) <= 0x3Fu)
          {
            v57 = _byteswap_uint64(__PAIR64__(v55, HIDWORD(v55)));
            if ((v55 & 0x200000) != 0)
            {
              v10 = 0;
              if (!(_DWORD)v13)
                goto LABEL_45;
LABEL_44:
              memcpy((char *)__src + v10, (char *)&v57 + 2, ((unint64_t)v55 >> 16) & 0xF);
              v10 += (v13 - 1) + 1;
              goto LABEL_45;
            }
            LOBYTE(__src[0]) = -16;
            v10 = 1;
            if ((_DWORD)v13)
              goto LABEL_44;
LABEL_45:
            if ((((v8 >> 20) + 3) & 2) != 0)
              *((_BYTE *)__src + v10++) = -9;
            v11 = (unint64_t)v64;
            if (v65)
            {
              v20 = *((unsigned __int16 *)v64 + 4);
              if (*(_QWORD *)v64 == v7 && *((unsigned __int8 *)v64 + v20 + 9) != 247 && LOBYTE(__src[0]) != 240)
              {
                if ((char *)v64 + v10 + v20 + 10 > (char *)__src)
                  goto LABEL_63;
                goto LABEL_60;
              }
              v11 = ((unint64_t)v64 + v20 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            }
            if (v11 + v10 + 10 > (unint64_t)__src)
              goto LABEL_63;
            v20 = 0;
            ++v65;
            *(_QWORD *)v11 = v7;
            *(_WORD *)(v11 + 8) = 0;
LABEL_60:
            v21 = (_BYTE *)(v11 + v20 + 10);
            v22 = __src;
            switch(v10)
            {
              case 0uLL:
                break;
              case 1uLL:
                goto LABEL_69;
              case 2uLL:
                goto LABEL_68;
              case 3uLL:
                goto LABEL_67;
              case 4uLL:
LABEL_66:
                *v21++ = __src[0];
                v22 = (uint64_t *)((char *)__src + 1);
LABEL_67:
                v23 = *(_BYTE *)v22;
                v22 = (uint64_t *)((char *)v22 + 1);
                *v21++ = v23;
LABEL_68:
                v24 = *(_BYTE *)v22;
                v22 = (uint64_t *)((char *)v22 + 1);
                *v21++ = v24;
LABEL_69:
                *v21 = *(_BYTE *)v22;
                break;
              default:
LABEL_70:
                memmove(v21, __src, v10);
                break;
            }
            *(_WORD *)(v11 + 8) += v10;
LABEL_72:
            v64 = (int *)v11;
          }
        }
        else if (v9 == 2)
        {
          v14 = v55 & 0xE00000;
          LOBYTE(__src[0]) = BYTE2(v55);
          BYTE1(__src[0]) = BYTE1(v55) & 0x7F;
          if ((v55 & 0xE00000) == 0xC00000)
            v15 = 2;
          else
            v15 = 3;
          if (v14 != 12582912)
            BYTE2(__src[0]) = v55 & 0x7F;
          v16 = (unint64_t)v64;
          if (v65)
          {
            v17 = *((unsigned __int16 *)v64 + 4);
            if (*(_QWORD *)v64 == v54 && BYTE2(v55) != 240 && *((unsigned __int8 *)v64 + v17 + 9) != 247)
            {
              if ((char *)v64 + v15 + v17 + 10 > (char *)__src)
                goto LABEL_39;
              goto LABEL_41;
            }
            v16 = ((unint64_t)v64 + v17 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v16 + v15 + 10 > (unint64_t)__src)
          {
LABEL_39:
            v16 = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet((uint64_t)&v62, v54, (char *)__src, v15);
            goto LABEL_55;
          }
          v17 = 0;
          ++v65;
          *(_QWORD *)v16 = v54;
          *(_WORD *)(v16 + 8) = 0;
LABEL_41:
          v18 = (_BYTE *)(v16 + v17 + 10);
          if (v14 == 12582912)
          {
            v19 = __src;
          }
          else
          {
            *v18++ = __src[0];
            v19 = (uint64_t *)((char *)__src + 1);
          }
          *v18 = *(_BYTE *)v19;
          v18[1] = *((_BYTE *)v19 + 1);
          *(_WORD *)(v16 + 8) += v15;
LABEL_55:
          v64 = (int *)v16;
        }
        else if (v9 == 1 && BYTE2(v55) >= 0xF0u && ((0x22B1uLL >> (BYTE2(v55) + 16)) & 1) == 0)
        {
          v10 = MIDI::system_message_size::sizes[BYTE2(v55) - 240];
          LOBYTE(__src[0]) = BYTE2(v55);
          if (((0xDD40uLL >> (BYTE2(v55) + 16)) & 1) == 0)
          {
            BYTE1(__src[0]) = BYTE1(v55) & 0x7F;
            if (BYTE2(v55) == 242)
              BYTE2(__src[0]) = v55 & 0x7F;
          }
          v11 = (unint64_t)v64;
          if (v65)
          {
            v12 = *((unsigned __int16 *)v64 + 4);
            if (*(_QWORD *)v64 == v54 && BYTE2(v55) != 240 && *((unsigned __int8 *)v64 + v12 + 9) != 247)
            {
              if ((char *)v64 + v12 + v10 + 10 <= (char *)__src)
                goto LABEL_65;
LABEL_63:
              v11 = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet((uint64_t)&v62, v7, (char *)__src, v10);
              goto LABEL_72;
            }
            v11 = ((unint64_t)v64 + v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v11 + v10 + 10 <= (unint64_t)__src)
          {
            v12 = 0;
            ++v65;
            *(_QWORD *)v11 = v54;
            *(_WORD *)(v11 + 8) = 0;
LABEL_65:
            v21 = (_BYTE *)(v11 + v12 + 10);
            v22 = __src;
            switch((int)v10)
            {
              case 1:
                goto LABEL_69;
              case 2:
                goto LABEL_68;
              case 3:
                goto LABEL_67;
              case 4:
                goto LABEL_66;
              default:
                goto LABEL_70;
            }
          }
          goto LABEL_63;
        }
      }
      v5 += v5[2] + 3;
      ++v4;
    }
    while (v4 < v53[1]);
  }
  return MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase((uint64_t)&v62);
}

void sub_18EFCCB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  _Unwind_Resume(exception_object);
}

uint64_t MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase(uint64_t a1)
{
  uint64_t v3;

  if (*(_DWORD *)(a1 + 64))
  {
    v3 = a1 + 64;
    (**(void (***)(uint64_t, uint64_t *))a1)(a1 + 8, &v3);
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 68;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1 + 8);
  return a1;
}

uint64_t MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  size_t v14;
  unsigned int v15;
  int v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unsigned __int8 *p_src;
  char v29;
  char v30;
  _DWORD v31[2];
  unsigned __int8 __src;
  char v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = BYTE2(result);
  v7 = result >> 28;
  if (result >> 28 == 3)
  {
    v14 = WORD1(result) & 0xF;
    if (v14 > 6 || BYTE2(result) > 0x3Fu)
      return result;
    v15 = (result >> 20) + 3;
    v31[0] = bswap32(result);
    v31[1] = bswap32(a2);
    if ((result & 0x200000) != 0)
    {
      v8 = 0;
      if (!(_DWORD)v14)
        goto LABEL_39;
    }
    else
    {
      __src = -16;
      v8 = 1;
      if (!(_DWORD)v14)
      {
LABEL_39:
        if ((v15 & 2) != 0)
          *(&__src + v8++) = -9;
        v24 = *a4;
        v10 = *(_QWORD *)(a3 + 56);
        v25 = a3 + 1088;
        v26 = *(_DWORD *)(a3 + 64);
        if (v26)
        {
          v27 = *(unsigned __int16 *)(v10 + 8);
          if (*(_QWORD *)v10 == v24 && *(unsigned __int8 *)(v27 + v10 + 9) != 247 && __src != 240)
          {
            if (v10 + v8 + v27 + 10 <= v25)
              goto LABEL_54;
            goto LABEL_52;
          }
          v10 = (v10 + v27 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        }
        if (v10 + v8 + 10 <= v25)
        {
          LODWORD(v27) = 0;
          *(_DWORD *)(a3 + 64) = v26 + 1;
          *(_QWORD *)v10 = v24;
          *(_WORD *)(v10 + 8) = 0;
LABEL_54:
          result = v10 + v27 + 10;
          p_src = &__src;
          switch(v8)
          {
            case 0uLL:
              break;
            case 1uLL:
              goto LABEL_64;
            case 2uLL:
              goto LABEL_63;
            case 3uLL:
              goto LABEL_62;
            case 4uLL:
LABEL_61:
              p_src = (unsigned __int8 *)&v33;
              *(_BYTE *)result++ = __src;
LABEL_62:
              v29 = *p_src++;
              *(_BYTE *)result++ = v29;
LABEL_63:
              v30 = *p_src++;
              *(_BYTE *)result++ = v30;
LABEL_64:
              *(_BYTE *)result = *p_src;
              break;
            default:
LABEL_65:
              result = (uint64_t)memmove((void *)result, &__src, v8);
              break;
          }
          *(_WORD *)(v10 + 8) += v8;
          goto LABEL_67;
        }
LABEL_52:
        result = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(a3, v24, (char *)&__src, v8);
LABEL_58:
        v10 = result;
LABEL_67:
        *(_QWORD *)(a3 + 56) = v10;
        return result;
      }
    }
    memcpy(&__src + v8, (char *)v31 + 2, v14);
    v8 += (v14 - 1) + 1;
    goto LABEL_39;
  }
  if (v7 == 2)
  {
    v16 = result & 0xE00000;
    __src = BYTE2(result);
    v33 = BYTE1(result) & 0x7F;
    if ((result & 0xE00000) == 0xC00000)
      v17 = 2;
    else
      v17 = 3;
    if (v16 != 12582912)
      v34 = result & 0x7F;
    v18 = *a4;
    result = *(_QWORD *)(a3 + 56);
    v19 = a3 + 1088;
    v20 = *(_DWORD *)(a3 + 64);
    if (v20)
    {
      v21 = *(unsigned __int16 *)(result + 8);
      if (*(_QWORD *)result == v18 && v6 != 240 && *(unsigned __int8 *)(v21 + result + 9) != 247)
      {
        if (result + v17 + v21 + 10 <= v19)
          goto LABEL_35;
        goto LABEL_33;
      }
      result = (result + v21 + 13) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (result + v17 + 10 <= v19)
    {
      LODWORD(v21) = 0;
      *(_DWORD *)(a3 + 64) = v20 + 1;
      *(_QWORD *)result = v18;
      *(_WORD *)(result + 8) = 0;
LABEL_35:
      v22 = (unsigned __int8 *)(result + v21 + 10);
      if (v16 == 12582912)
      {
        v23 = &__src;
      }
      else
      {
        v23 = (unsigned __int8 *)&v33;
        *v22 = __src;
        v22 = (unsigned __int8 *)(result + v21 + 11);
      }
      *v22 = *v23;
      v22[1] = v23[1];
      *(_WORD *)(result + 8) += v17;
      goto LABEL_49;
    }
LABEL_33:
    result = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(a3, v18, (char *)&__src, v17);
LABEL_49:
    *(_QWORD *)(a3 + 56) = result;
    return result;
  }
  if (v7 == 1 && BYTE2(result) >= 0xF0u && ((0x22B1uLL >> (BYTE2(result) + 16)) & 1) == 0)
  {
    v8 = MIDI::system_message_size::sizes[BYTE2(result) - 240];
    __src = BYTE2(result);
    if (((0xDD40uLL >> (BYTE2(result) + 16)) & 1) == 0)
    {
      v33 = BYTE1(result) & 0x7F;
      if (BYTE2(result) == 242)
        v34 = result & 0x7F;
    }
    v9 = *a4;
    v10 = *(_QWORD *)(a3 + 56);
    v11 = a3 + 1088;
    v12 = *(_DWORD *)(a3 + 64);
    if (v12)
    {
      v13 = *(unsigned __int16 *)(v10 + 8);
      if (*(_QWORD *)v10 == v9 && BYTE2(result) != 240 && *(unsigned __int8 *)(v13 + v10 + 9) != 247)
      {
        if (v10 + v13 + v8 + 10 <= v11)
          goto LABEL_60;
LABEL_57:
        result = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(a3, v9, (char *)&__src, v8);
        goto LABEL_58;
      }
      v10 = (v10 + v13 + 13) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (v10 + v8 + 10 <= v11)
    {
      LODWORD(v13) = 0;
      *(_DWORD *)(a3 + 64) = v12 + 1;
      *(_QWORD *)v10 = v9;
      *(_WORD *)(v10 + 8) = 0;
LABEL_60:
      result = v10 + v13 + 10;
      p_src = &__src;
      switch((int)v8)
      {
        case 1:
          goto LABEL_64;
        case 2:
          goto LABEL_63;
        case 3:
          goto LABEL_62;
        case 4:
          goto LABEL_61;
        default:
          goto LABEL_65;
      }
    }
    goto LABEL_57;
  }
  return result;
}

uint64_t MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  uint64_t v8;
  char *v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  if (*(_DWORD *)(a1 + 64)
    && (v16 = a1 + 64,
        (**(void (***)(uint64_t, uint64_t *))a1)(a1 + 8, &v16),
        *(_DWORD *)(a1 + 64) = 0,
        v8 = a1 + 68,
        a1 + 68 + a4 + 10 <= a1 + 1088))
  {
    *(_DWORD *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 68) = a2;
    *(_WORD *)(a1 + 76) = 0;
    v9 = (char *)(a1 + 78);
    v10 = 0;
    switch(a4)
    {
      case 0uLL:
        break;
      case 1uLL:
        goto LABEL_8;
      case 2uLL:
        goto LABEL_7;
      case 3uLL:
        goto LABEL_6;
      case 4uLL:
        v11 = *a3++;
        v9 = (char *)(a1 + 79);
        *(_BYTE *)(a1 + 78) = v11;
LABEL_6:
        v12 = *a3++;
        *v9++ = v12;
LABEL_7:
        v13 = *a3++;
        *v9++ = v13;
LABEL_8:
        *v9 = *a3;
        v10 = *(_WORD *)(a1 + 76);
        break;
      default:
        if (a4)
          memmove(v9, a3, a4);
        v10 = 0;
        break;
    }
    *(_WORD *)(a1 + 76) = v10 + a4;
  }
  else
  {
    MIDI::LegacyPacketList::create();
    v16 = v15;
    (**(void (***)(uint64_t, uint64_t *))a1)(a1 + 8, &v16);
    std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](&v15);
    v8 = a1 + 68;
    *(_QWORD *)(a1 + 56) = a1 + 68;
    *(_DWORD *)(a1 + 64) = 0;
    std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](&v15);
  }
  return v8;
}

void sub_18EFCD1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
    return (uint64_t *)MIDI::LegacyPacketListDeleter::operator()();
  return result;
}

void caulk::inplace_function_detail::vtable<void,MIDI::LegacyPacketList const*>::vtable(void)::{lambda(void *,MIDI::LegacyPacketList const*&&)#1}::__invoke()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void MIDI::MIDIPacketList_Deliverer::~MIDIPacketList_Deliverer(MIDI::MIDIPacketList_Deliverer *this)
{
  *(_QWORD *)this = &off_1E290A288;
  (*(void (**)(char *))(*((_QWORD *)this + 1) + 24))((char *)this + 16);
}

{
  *(_QWORD *)this = &off_1E290A288;
  (*(void (**)(char *))(*((_QWORD *)this + 1) + 24))((char *)this + 16);
  JUMPOUT(0x193FFE460);
}

uint64_t MIDI::MIDIPacketList_Deliverer::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return (**(uint64_t (***)(uint64_t, uint64_t *))(a1 + 8))(a1 + 16, &v3);
}

uint64_t _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb5_E3__7EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESC_SD_(uint64_t result, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;

  v2 = *a2;
  if (**a2)
  {
    v3 = result;
    v4 = 0;
    v5 = (unint64_t)(v2 + 1);
    do
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 24) + 16))();
      **(_DWORD **)v3 = result;
      if ((_DWORD)result)
        break;
      v5 = (v5 + *(unsigned __int16 *)(v5 + 8) + 13) & 0xFFFFFFFFFFFFFFFCLL;
      ++v4;
    }
    while (v4 < *v2);
  }
  return result;
}

void *_ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb5_E3__7EENS0_7wrapperIT_EEENUlPvSC_E_8__invokeESC_SC_(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  void *result;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  result = _Block_copy(*((const void **)a2 + 3));
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

void _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb5_E3__7EENS0_7wrapperIT_EEENUlPvSC_E0_8__invokeESC_SC_(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 24) = _Block_copy(*((const void **)a2 + 3));

}

void _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb5_E3__7EENS0_7wrapperIT_EEENUlPvE_8__invokeESC_(uint64_t a1)
{

}

uint64_t __copy_helper_block_ea8_40c85_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_22MIDI_1_to_2_TranslatorEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c85_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_22MIDI_1_to_2_TranslatorEEEEE(uint64_t a1)
{
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t MIDI::LegacyMIDIConverter<MIDI::MIDI_1_to_2_Translator>::convertLegacyDataToEventList(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  MIDIEventPacket *v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  UInt32 v15;
  unsigned int v16;
  BOOL v17;
  MIDIEventPacket *v18;
  int v19;
  unsigned int v20;
  UInt32 v21;
  unsigned int v22;
  MIDITimeStamp v23;
  MIDIEventPacket *v24;
  unsigned int v25;
  unsigned int v26;
  UInt32 v27;
  unsigned int v28;
  unsigned int v29;
  UInt32 v30;
  MIDIEventPacket *v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int j;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  char v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned __int8 *v53;
  unsigned int v54;
  UInt32 v55;
  unsigned int i;
  uint64_t v57;
  unsigned int v58;
  MIDIEventPacket *v59;
  _OWORD *v61;
  uint64_t v62[4];
  UInt32 v63[4];
  MIDITimeStamp time;
  MIDIEventList evtlist;
  UInt32 v66[2];
  uint64_t v67;
  UInt32 words[2];
  uint64_t v69;
  MIDIEventList *p_evtlist;
  uint64_t v71;
  _QWORD v72[9];

  v72[6] = *MEMORY[0x1E0C80C00];
  v62[0] = a2;
  v62[1] = a3;
  v62[2] = a4;
  v62[3] = 0;
  v71 = *a5;
  (*(void (**)(void))(v71 + 8))();
  v6 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
  v61 = a1 + 4;
  time = 0;
  memset(v63, 0, sizeof(v63));
  while ((MIDI::LegacyPacketList::PacketReader::read(v62, &time, v63) & 1) != 0)
  {
    v7 = v63[0];
    if (v63[0] >> 28 == 2)
    {
      *(_QWORD *)v66 = 0;
      v67 = 0;
      v8 = BYTE2(v63[0]);
      v9 = *((unsigned __int8 *)a1 + 32);
      v10 = BYTE2(v63[0]) >> 4;
      if (!*((_BYTE *)a1 + 32))
      {
        v32 = *a1;
        if ((*a1 & 0xFF0000) != 0)
        {
          if (((v32 ^ v63[0]) & 0xF0000) != 0)
          {
            v9 = 1;
            *((_BYTE *)a1 + 32) = 1;
          }
          else
          {
            if (v10 == 11)
            {
              v44 = BYTE1(v32);
              switch(v44)
              {
                case 'b':
                  v45 = v63[0] & 0xFF00;
                  v46 = 25344;
                  goto LABEL_105;
                case 'c':
                  v45 = v63[0] & 0xFF00;
                  v46 = 25088;
                  goto LABEL_105;
                case 'd':
                  v45 = v63[0] & 0xFF00;
                  v46 = 25856;
                  goto LABEL_105;
                case 'e':
                  v45 = v63[0] & 0xFF00;
                  v46 = 25600;
LABEL_105:
                  if (v45 != v46 && (v63[0] & 0xF0DF00) != 0xB00600)
                    break;
                  goto LABEL_109;
                default:
                  if (v44 == 32)
                  {
                    if ((v63[0] & 0xFF00) != 0)
                      break;
LABEL_109:
                    v9 = 0;
                    *v61 = *(_OWORD *)v63;
                    goto LABEL_5;
                  }
                  if (!v44 && (v63[0] & 0xFF00) == 0x2000)
                    goto LABEL_109;
                  break;
              }
LABEL_107:
              v9 = 1;
              goto LABEL_5;
            }
            v9 = (v32 & 0xDF00) != 0 || v10 != 12;
          }
        }
        else
        {
          v9 = 1;
          if (v10 == 11 && (v63[0] & 0xF00000) == 0xB00000)
          {
            if (BYTE1(v63[0]) - 98 >= 4 && BYTE1(v63[0]) != 32 && BYTE1(v63[0]))
              goto LABEL_107;
            v9 = 0;
            *(_OWORD *)a1 = *(_OWORD *)v63;
          }
        }
      }
LABEL_5:
      v11 = BYTE3(v7) & 0xF;
      v12 = BYTE3(v7) & 0xF | 0x40;
      v13 = *a1;
      v14 = BYTE2(*a1);
      if (BYTE2(*a1) && v9)
      {
        *((_BYTE *)a1 + 32) = 1;
        v69 = 0;
        words[0] = v13 & 0xFF00 | (v14 << 16) & 0x80FFFFFF | ((BYTE3(v7) & 0xF | 0x40) << 24);
        v15 = v13 << 25;
        if (v13 >= 0x41u)
        {
          v16 = (v13 & 0x3F) << 19;
          if (v16)
          {
            do
            {
              v15 |= v16;
              v17 = v16 > 0x3F;
              v16 >>= 6;
            }
            while (v17);
          }
        }
        words[1] = v15;
        v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v6, time, 2uLL, words);
        if (!v6)
        {
          p_evtlist = &evtlist;
          (*(void (**)(_QWORD *, MIDIEventList **))v71)(v72, &p_evtlist);
          memset(&evtlist, 0, sizeof(evtlist));
          v18 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
          v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v18, time, MIDI::UniversalPacket::word_sizes[(unint64_t)words[0] >> 28], words);
        }
        *a1 = 0;
        v69 = 0;
        v19 = a1[4];
        if (BYTE2(v19))
        {
          LOWORD(words[0]) = v19 & 0xFF00;
          BYTE2(words[0]) = BYTE2(v19);
          HIBYTE(words[0]) = BYTE3(v7) & 0xF | 0x40;
          v20 = v19;
          v21 = v19 << 25;
          if (v20 >= 0x41)
          {
            v22 = (v20 & 0x3F) << 19;
            if (v22)
            {
              do
              {
                v21 |= v22;
                v17 = v22 > 0x3F;
                v22 >>= 6;
              }
              while (v17);
            }
          }
          words[1] = v21;
          v23 = time;
          v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v6, time, 2uLL, words);
          if (!v6)
          {
            p_evtlist = &evtlist;
            (*(void (**)(_QWORD *, MIDIEventList **))v71)(v72, &p_evtlist);
            memset(&evtlist, 0, sizeof(evtlist));
            v24 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
            v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v24, v23, MIDI::UniversalPacket::word_sizes[(unint64_t)words[0] >> 28], words);
          }
          *(_DWORD *)v61 = 0;
        }
        *(_QWORD *)((char *)&a1[32 * v11 + 8 + 2 * ((v7 >> 16) & 0xF)] + 1) = 0;
      }
      v25 = (v7 >> 8) & 0x7F;
      v26 = v7 & 0x7F;
      switch(v10)
      {
        case 8:
          goto LABEL_23;
        case 9:
          if ((v7 & 0x7F) == 0)
          {
            v8 = BYTE2(v7) - 16;
            v26 = 64;
          }
LABEL_23:
          v27 = (v12 << 24) | (v8 << 16) | (v25 << 8);
          v66[0] = v27;
          v28 = v26 << 9;
          if (v26 >= 0x41)
          {
            v29 = 8 * (v26 & 0x3F);
            if (v29)
            {
              do
              {
                v28 |= v29;
                v17 = v29 > 0x3F;
                v29 >>= 6;
              }
              while (v17);
            }
          }
          v30 = v28 << 16;
          goto LABEL_99;
        case 10:
          v27 = (BYTE2(v7) << 16) | (v12 << 24) | (v25 << 8);
          v66[0] = v27;
          v30 = (_DWORD)v7 << 25;
          if (v26 >= 0x41)
          {
            v33 = (v7 & 0x3F) << 19;
            if (v33)
            {
              do
              {
                v30 |= v33;
                v17 = v33 > 0x3F;
                v33 >>= 6;
              }
              while (v17);
            }
          }
          goto LABEL_99;
        case 11:
          v34 = (uint64_t)&a1[32 * v11 + 8] + 1;
          v35 = (v7 >> 16) & 0xF;
          if (((v7 >> 8) & 0x7F) > 0x25)
          {
            switch(v25)
            {
              case 'b':
                v47 = v34 + 8 * v35;
                *(_BYTE *)(v47 + 1) = 2;
                goto LABEL_92;
              case 'c':
                v57 = v34 + 8 * v35;
                *(_BYTE *)(v57 + 1) = 2;
                goto LABEL_94;
              case 'd':
                v47 = v34 + 8 * v35;
                *(_BYTE *)(v47 + 1) = 1;
LABEL_92:
                *(_BYTE *)(v47 + 5) = v26;
                break;
              case 'e':
                v57 = v34 + 8 * v35;
                *(_BYTE *)(v57 + 1) = 1;
LABEL_94:
                *(_BYTE *)(v57 + 4) = v26;
                break;
              default:
                if (v25 != 38)
                  goto LABEL_96;
                v49 = v7 & 0x7F;
                v50 = v7 & 0x7F;
                goto LABEL_81;
            }
LABEL_95:
            if (!*((_BYTE *)a1 + 32))
              continue;
            goto LABEL_96;
          }
          if (!v25)
          {
            *(_BYTE *)(v34 + 8 * v35 + 2) = v26;
LABEL_77:
            *(_BYTE *)(v34 + 8 * v35) = 1;
            goto LABEL_95;
          }
          if (v25 != 6)
          {
            if (v25 == 32)
            {
              *(_BYTE *)(v34 + 8 * v35 + 3) = v26;
              goto LABEL_77;
            }
LABEL_96:
            v27 = (BYTE2(v7) << 16) | (v12 << 24) | (v25 << 8);
            v66[0] = v27;
            v30 = (_DWORD)v7 << 25;
            if (v26 >= 0x41)
            {
              v58 = (v7 & 0x3F) << 19;
              if (v58)
              {
                do
                {
                  v30 |= v58;
                  v17 = v58 > 0x3F;
                  v58 >>= 6;
                }
                while (v17);
              }
            }
LABEL_99:
            v66[1] = v30;
            goto LABEL_100;
          }
          v49 = 0;
          v50 = 0;
          *(_BYTE *)(v34 + 8 * v35 + 6) = v26;
LABEL_81:
          v51 = v34 + 8 * v35;
          *(_BYTE *)(v51 + 7) = v49;
          if (*((_BYTE *)a1 + 32) || !*(_BYTE *)(v51 + 1))
            goto LABEL_96;
          if (*(_BYTE *)(v51 + 1) == 1)
            v52 = 32;
          else
            v52 = 48;
          v53 = (unsigned __int8 *)(v34 + 8 * v35);
          v27 = (v12 << 24) | ((v52 | v35) << 16) | (v53[4] << 8) | v53[5];
          v66[0] = v27;
          v54 = v50 | (v53[6] << 7);
          v55 = v54 << 18;
          if (v54 > 0x2000)
          {
            for (i = 32 * (v54 & 0x1FFF); i; i >>= 13)
              v55 |= i;
          }
          v66[1] = v55;
LABEL_49:
          *(_OWORD *)a1 = 0u;
          *((_OWORD *)a1 + 1) = 0u;
LABEL_100:
          v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v6, time, MIDI::UniversalPacket::word_sizes[(unint64_t)v27 >> 28], v66);
          if (!v6)
          {
            *(_QWORD *)words = &evtlist;
            (*(void (**)(_QWORD *, UInt32 *))v71)(v72, words);
            memset(&evtlist, 0, sizeof(evtlist));
            v59 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
            v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v59, time, MIDI::UniversalPacket::word_sizes[(unint64_t)v66[0] >> 28], v66);
          }
          break;
        case 12:
          v36 = (uint64_t)&a1[32 * v11 + 8] + 1;
          v37 = *(unsigned __int8 *)(v36 + 8 * (WORD1(v7) & 0xF));
          if (*(_BYTE *)(v36 + 8 * (WORD1(v7) & 0xF)))
            v37 = *((unsigned __int8 *)a1 + 32) ^ 1;
          v27 = (v12 << 24) | (BYTE2(v7) << 16) | v37;
          v38 = v36 + 8 * (WORD1(v7) & 0xF);
          v39 = (v25 << 24) | (*(unsigned __int8 *)(v38 + 2) << 8) | *(unsigned __int8 *)(v38 + 3);
          v66[0] = v27;
          v66[1] = v39;
          *(_QWORD *)v38 = 0;
          goto LABEL_49;
        case 13:
          v27 = (v12 << 24) | (BYTE2(v7) << 16);
          v66[0] = v27;
          v40 = v7 >> 8 << 25;
          if (v25 >= 0x41)
          {
            v41 = ((v7 >> 8) & 0x3F) << 19;
            if (v41)
            {
              do
              {
                v40 |= v41;
                v17 = v41 > 0x3F;
                v41 >>= 6;
              }
              while (v17);
            }
          }
          v66[1] = v40;
          goto LABEL_100;
        case 14:
          v27 = (v12 << 24) | (BYTE2(v7) << 16);
          v66[0] = v27;
          v42 = v25 | (v26 << 7);
          v30 = v42 << 18;
          if (v42 > 0x2000)
          {
            for (j = 32 * (v42 & 0x1FFF); j; j >>= 13)
              v30 |= j;
          }
          goto LABEL_99;
        default:
          v27 = v66[0];
          goto LABEL_100;
      }
    }
    else
    {
      v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v6, time, MIDI::UniversalPacket::word_sizes[(unint64_t)v63[0] >> 28], v63);
      if (!v6)
      {
        *(_QWORD *)words = &evtlist;
        (*(void (**)(_QWORD *, UInt32 *))v71)(v72, words);
        memset(&evtlist, 0, sizeof(evtlist));
        v31 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
        v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v31, time, MIDI::UniversalPacket::word_sizes[(unint64_t)v63[0] >> 28], v63);
      }
    }
  }
  if (evtlist.numPackets)
  {
    *(_QWORD *)words = &evtlist;
    (*(void (**)(_QWORD *, UInt32 *))v71)(v72, words);
  }
  return (*(uint64_t (**)(_QWORD *))(v71 + 24))(v72);
}

void sub_18EFCDD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t MIDI::LegacyPacketList::PacketReader::read(uint64_t *a1, _QWORD *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _BOOL8 v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  _BYTE v29[2];
  unsigned int v30;

  v3 = a1[1];
  v4 = a1[3];
  if (v4 >= v3)
    return 0;
  v5 = *a1;
  v6 = *(unsigned __int8 *)(*a1 + v4);
  if (*(char *)(*a1 + v4) < -16)
  {
LABEL_3:
    v7 = 2;
    if ((v6 & 0xE0) != 0xC0)
      v7 = 3;
    v8 = v7 + v4;
    v9 = v7 + v4 > v3;
    v10 = v7 + v4 <= v3;
    if (!v9)
    {
      v11 = v4 + v5;
      v12 = *(_BYTE *)(v4 + v5 + 1) & 0x7F;
      if ((v6 & 0xE0) == 0xC0)
        v13 = 0;
      else
        v13 = *(_BYTE *)(v11 + 2) & 0x7F;
      *a3 = v13 | (v6 << 16) | (v12 << 8) | 0x20000000;
      *a2 = a1[2];
      v3 = v8;
    }
    goto LABEL_19;
  }
LABEL_8:
  if (v6 < 0xF1)
  {
    if (v6 == 240)
      v18 = 1;
    else
      v18 = 2;
    if (v6 == 240)
      a1[3] = ++v4;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = (v4 < v3) | v20;
      if (v4 < v3 && (v20 & 1) == 0)
      {
        v23 = *(char *)(v5 + v4);
        if ((v23 & 0x80000000) == 0)
        {
          if (v19 > 5)
          {
            v22 = 0;
            goto LABEL_42;
          }
          v22 = 0;
          a1[3] = ++v4;
          ++v21;
          goto LABEL_40;
        }
        if (v23 == -9)
          a1[3] = ++v4;
        if (v18 == 1)
          v18 = 0;
        else
          v18 = 3;
        v22 = 1;
      }
      if (v19 <= 5)
      {
        LOBYTE(v23) = 0;
LABEL_40:
        v29[v19] = v23;
      }
LABEL_42:
      ++v19;
      v20 = v22;
      if (v19 == 7)
      {
        v24 = bswap32(v30);
        *a3 = (v18 << 20) | (v21 << 16) | (v29[0] << 8) | v29[1] | 0x30000000;
        a3[1] = v24;
        *a2 = a1[2];
        return 1;
      }
    }
  }
  if (v6 == 247)
  {
    *(_QWORD *)a3 = 808452096;
    *a2 = a1[2];
    v25 = v4 + 1;
    goto LABEL_53;
  }
  v14 = v6 - 240;
  if (((0x22B1uLL >> (v6 + 16)) & 1) != 0)
  {
    v15 = v4;
    while (1)
    {
      v4 = v15 + 1;
      a1[3] = v15 + 1;
      if (v15 + 1 >= v3)
        return 0;
      v16 = *(char *)(v5 + 1 + v15++);
      if (v16 < 0)
      {
        v6 = v16;
        if ((char)v16 > -17)
          goto LABEL_8;
        goto LABEL_3;
      }
    }
  }
  v25 = v4 + MIDI::system_message_size::sizes[v14];
  if (v25 > v3)
  {
    v10 = 0;
LABEL_19:
    a1[3] = v3;
    return v10;
  }
  if ((unint64_t)(v14 - 1) > 2)
  {
    v27 = 0;
    goto LABEL_51;
  }
  v26 = v4 + v5;
  v27 = *(_BYTE *)(v4 + v5 + 1) & 0x7F;
  if ((v14 & 0xFFFFFFFD) == 1)
  {
LABEL_51:
    v28 = 0;
    goto LABEL_52;
  }
  v28 = *(_BYTE *)(v26 + 2) & 0x7F;
LABEL_52:
  *a3 = (v6 << 16) | (v27 << 8) | v28 | 0x10000000;
  *a2 = a1[2];
LABEL_53:
  a1[3] = v25;
  return 1;
}

uint64_t (***_ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb4_E3__6EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESC_SD_(uint64_t (***result)(void)))(void)
{
  uint64_t (***v1)(void);

  if (!*(_DWORD *)result[3])
  {
    v1 = result;
    result = (uint64_t (***)(void))(*result)[2]();
    *(_DWORD *)v1[3] = (_DWORD)result;
  }
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb4_E3__6EENS0_7wrapperIT_EEENUlPvSC_E_8__invokeESC_SC_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;

  *(_QWORD *)a1 = _Block_copy(*(const void **)a2);
  v4 = *(_QWORD *)(a2 + 24);
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = v4;
  return result;
}

void _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb4_E3__6EENS0_7wrapperIT_EEENUlPvSC_E0_8__invokeESC_SC_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = _Block_copy(*(const void **)a2);
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;

}

void _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb4_E3__6EENS0_7wrapperIT_EEENUlPvE_8__invokeESC_(id *a1)
{

}

void std::__shared_ptr_emplace<MIDI::LegacyMIDIConverter<MIDI::MIDI_1_to_2_Translator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIDI::LegacyMIDIConverter<MIDI::MIDI_1_to_2_Translator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t __copy_helper_block_ea8_40c81_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_18IdentityTranslatorEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c81_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_18IdentityTranslatorEEEEE(uint64_t a1)
{
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t MIDI::LegacyMIDIConverter<MIDI::IdentityTranslator>::convertLegacyDataToEventList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  MIDIEventPacket *v4;
  MIDIEventPacket *v5;
  uint64_t v7[4];
  UInt32 words[2];
  uint64_t v9;
  MIDITimeStamp time;
  MIDIEventList evtlist;
  MIDIEventList *p_evtlist;
  uint64_t v13;
  _QWORD v14[7];

  v14[6] = *MEMORY[0x1E0C80C00];
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = 0;
  v13 = *a4;
  (*(void (**)(_QWORD *, uint64_t *))(v13 + 8))(v14, a4 + 1);
  v4 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
  v9 = 0;
  time = 0;
  *(_QWORD *)words = 0;
  while (MIDI::LegacyPacketList::PacketReader::read(v7, &time, words))
  {
    v4 = MIDIEventListAdd(&evtlist, 0x114uLL, v4, time, MIDI::UniversalPacket::word_sizes[(unint64_t)words[0] >> 28], words);
    if (!v4)
    {
      p_evtlist = &evtlist;
      (*(void (**)(_QWORD *, MIDIEventList **))v13)(v14, &p_evtlist);
      memset(&evtlist, 0, sizeof(evtlist));
      v5 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
      v4 = MIDIEventListAdd(&evtlist, 0x114uLL, v5, time, MIDI::UniversalPacket::word_sizes[(unint64_t)words[0] >> 28], words);
    }
  }
  if (evtlist.numPackets)
  {
    p_evtlist = &evtlist;
    (*(void (**)(_QWORD *, MIDIEventList **))v13)(v14, &p_evtlist);
  }
  return (*(uint64_t (**)(_QWORD *))(v13 + 24))(v14);
}

void sub_18EFCE2B8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t (***_ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb3_E3__5EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESC_SD_(uint64_t (***result)(void)))(void)
{
  uint64_t (***v1)(void);

  if (!*(_DWORD *)result[3])
  {
    v1 = result;
    result = (uint64_t (***)(void))(*result)[2]();
    *(_DWORD *)v1[3] = (_DWORD)result;
  }
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb3_E3__5EENS0_7wrapperIT_EEENUlPvSC_E_8__invokeESC_SC_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;

  *(_QWORD *)a1 = _Block_copy(*(const void **)a2);
  v4 = *(_QWORD *)(a2 + 24);
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = v4;
  return result;
}

void _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb3_E3__5EENS0_7wrapperIT_EEENUlPvSC_E0_8__invokeESC_SC_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = _Block_copy(*(const void **)a2);
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;

}

void _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb3_E3__5EENS0_7wrapperIT_EEENUlPvE_8__invokeESC_(id *a1)
{

}

void std::__shared_ptr_emplace<MIDI::LegacyMIDIConverter<MIDI::IdentityTranslator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIDI::LegacyMIDIConverter<MIDI::IdentityTranslator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
  return a1;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey(uint64_t *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v17;

  v3 = *((_DWORD *)a1 + 2);
  v4 = *a1;
  v17 = a2;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    goto LABEL_24;
  v7 = (*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v17) % *((_DWORD *)a1 + 2);
  if ((int)v7 >= 3)
    v8 = 0;
  else
    v8 = v3;
  v9 = (v7 + v8 - 3);
  v10 = 0xFFFFFFFFLL;
  v11 = 1;
  v12 = v7;
  while (1)
  {
    v13 = v9;
    v14 = atomic_load((unint64_t *)&a1[v12 + 2]);
    if (v14 != -1)
      break;
    if ((int)v10 >= 0)
      v10 = v10;
    else
      v10 = v12;
LABEL_13:
    if ((int)v9 >= 3)
      v15 = 0;
    else
      v15 = v3;
    v9 = (v9 + v15 - 3);
    v12 = v13;
    if ((_DWORD)v13 == (_DWORD)v7)
    {
      if ((v10 & 0x80000000) == 0)
      {
        v11 = 0;
        v12 = v10;
        return v11 | (v12 << 32);
      }
      __break(1u);
LABEL_24:
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  if (v14)
  {
    if (*(_QWORD *)(v14 + 8) == a2)
      return v11 | (v12 << 32);
    goto LABEL_13;
  }
  v11 = 0;
  if ((int)v10 >= 0)
    v12 = v10;
  else
    v12 = v12;
  return v11 | (v12 << 32);
}

void std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000000l>>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5;
  std::chrono::nanoseconds __ns;
  uint64_t v7;
  uint64_t v8;

  if (a1 >= 1)
  {
    v7 = v1;
    v8 = v2;
    if ((double)a1 == 9.22337204e15)
      v3 = 0;
    else
      v3 = -127;
    if ((double)a1 > 9.22337204e15)
      v3 = 1;
    if ((double)a1 < 9.22337204e15)
      v3 = -1;
    v4 = v3 >= 0 || v3 == -127;
    v5 = 1000 * a1;
    if (v4)
      v5 = 0x7FFFFFFFFFFFFFFFLL;
    __ns.__rep_ = v5;
    std::this_thread::sleep_for (&__ns);
  }
}

void std::unique_lock<std::mutex>::lock(std::unique_lock<std::mutex> *this)
{
  std::unique_lock<std::mutex>::mutex_type *m;

  m = this->__m_;
  if (m)
  {
    if (!this->__owns_)
    {
      std::mutex::lock(m);
      this->__owns_ = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::element_t::release();
}

unsigned int *caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::element_t::release(unsigned int *result)
{
  unsigned int v1;

  do
    v1 = __ldaxr(result);
  while (__stlxr(v1 - 0x10000, result));
  if ((v1 & 0xFFFF0000) == 0x10000)
  {
    if (atomic_load(result))
    {
      _os_assert_log();
      _os_crash();
      __break(1u);
    }
    JUMPOUT(0x193FFE460);
  }
  return result;
}

_DWORD *caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::rehash(unint64_t *a1, unsigned int a2)
{
  unint64_t *v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  unint64_t SlotForKey;
  unsigned int v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t *v25;

  v4 = a1 + 5;
  v5 = atomic_load(a1 + 5);
  v6 = operator new(8 * (a2 - 1) + 24);
  *(_QWORD *)v6 = a1;
  v6[2] = a2;
  *((_QWORD *)v6 + 2) = 0;
  bzero(v6 + 4, 8 * a2);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 + 8);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(_QWORD *)(v5 + 8 * i + 16);
        if (v9 + 1 >= 2)
        {
          SlotForKey = caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey((uint64_t *)v6, *(_QWORD *)(v9 + 8));
          if ((SlotForKey & 1) == 0)
          {
            do
              v11 = __ldaxr((unsigned int *)v9);
            while (__stlxr(v11 + 0x10000, (unsigned int *)v9));
            atomic_store(v9, (unint64_t *)&v6[2 * HIDWORD(SlotForKey) + 4]);
          }
        }
      }
    }
    atomic_store((unint64_t)v6, a1 + 5);
    v13 = (unint64_t *)a1[8];
    v12 = a1[9];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (_QWORD *)a1[7];
      v16 = v13 - v15;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v20 = (char *)operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = (unint64_t *)&v20[8 * v16];
      *v21 = v5;
      v14 = v21 + 1;
      while (v13 != v15)
      {
        v22 = *--v13;
        *v13 = 0;
        *--v21 = v22;
      }
      v23 = *(_OWORD *)(a1 + 7);
      a1[7] = (unint64_t)v21;
      a1[8] = (unint64_t)v14;
      a1[9] = (unint64_t)&v20[8 * v19];
      v24 = (uint64_t *)*((_QWORD *)&v23 + 1);
      v25 = (uint64_t *)v23;
      while (v24 != v25)
        std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl>>::reset[abi:ne180100](--v24);
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v13 = v5;
      v14 = v13 + 1;
    }
    a1[8] = (unint64_t)v14;
  }
  else
  {
    atomic_store((unint64_t)v6, v4);
  }
  return v6;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::emptyReleasePool(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t *v4;

  v1 = atomic_load((unsigned int *)(result + 48));
  if (v1 <= 0)
  {
    v2 = result;
    v4 = *(uint64_t **)(result + 56);
    for (i = *(uint64_t **)(result + 64);
          i != v4;
          result = std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl>>::reset[abi:ne180100](i))
    {
      --i;
    }
    *(_QWORD *)(v2 + 64) = v4;
  }
  return result;
}

uint64_t std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::~table_impl(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::~table_impl(uint64_t a1)
{
  uint64_t v2;
  unsigned int **v3;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v3 = (unsigned int **)(a1 + 16);
    do
    {
      if ((unint64_t)*v3 + 1 >= 2)
        caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::element_t::release(*v3);
      ++v3;
      --v2;
    }
    while (v2);
  }
  return a1;
}

_QWORD *RenderObserver::RenderObserver(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v6;
  uint64_t v7;
  void *v8;

  *a1 = a2;
  a1[1] = 0;
  a1[2] = a4;
  a1[3] = a5;
  v6 = a3;
  v7 = objc_msgSend(v6, "copy");
  v8 = (void *)a1[1];
  a1[1] = v7;

  return a1;
}

void sub_18EFCE940(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TThreadSafeList<RenderObserver>::deferred_remove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  TThreadSafeList<RenderObserver>::AllocNode(a1);
  v5 = (unint64_t *)v4;
  *(_DWORD *)(v4 + 8) = 1;
  result = RenderObserver::operator=(v4 + 16, a2);
  v7 = (unint64_t *)(a1 + 8);
LABEL_2:
  v8 = *v7;
  *v5 = *v7;
  do
  {
    v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_2;
    }
  }
  while (__stlxr((unint64_t)v5, v7));
  return result;
}

double TThreadSafeList<RenderObserver>::AllocNode(uint64_t a1)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  double result;

  v1 = (unint64_t *)(a1 + 16);
LABEL_2:
  v2 = (unint64_t *)*v1;
  if (*v1)
  {
    do
    {
      v3 = __ldaxr(v1);
      if ((unint64_t *)v3 != v2)
      {
        __clrex();
        goto LABEL_2;
      }
    }
    while (__stlxr(0, v1));
    v4 = *v2;
    if (*v2)
    {
      v5 = (unint64_t *)*v2;
      do
      {
        v6 = v5;
        v5 = (unint64_t *)*v5;
      }
      while (v5);
      while (1)
      {
        v7 = *v1;
        *v6 = *v1;
        while (1)
        {
          v8 = __ldaxr(v1);
          if (v8 != v7)
            break;
          if (!__stlxr(v4, v1))
            return result;
        }
        __clrex();
      }
    }
  }
  else
  {
    v9 = (_OWORD *)operator new();
    result = 0.0;
    *v9 = 0u;
    v9[1] = 0u;
    v9[2] = 0u;
  }
  return result;
}

uint64_t RenderObserver::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  v5 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = objc_msgSend(v5, "copy");
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t TThreadSafeList<RenderObserver>::deferred_add(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  TThreadSafeList<RenderObserver>::AllocNode(a1);
  v5 = (unint64_t *)v4;
  *(_DWORD *)(v4 + 8) = 0;
  result = RenderObserver::operator=(v4 + 16, a2);
  v7 = (unint64_t *)(a1 + 8);
LABEL_2:
  v8 = *v7;
  *v5 = *v7;
  do
  {
    v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_2;
    }
  }
  while (__stlxr((unint64_t)v5, v7));
  return result;
}

void sub_18EFCEBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_ea8_32c55_ZTSNSt3__110shared_ptrIN4MIDI20DynamicMIDIConverterEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c55_ZTSNSt3__110shared_ptrIN4MIDI20DynamicMIDIConverterEEE(uint64_t a1)
{
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 32);
}

void *AUEventSchedule::midiEventList(AUEventSchedule *this, uint64_t a2, char a3, MIDIEventList *a4)
{
  _QWORD *v8;
  size_t v9;
  void *result;
  unint64_t *p_mAddedEventQueue;
  AURenderEventNode *a_value;
  unint64_t v13;
  unint64_t v14;
  int v15;

  if (!a4)
    __assert_rtn("midiEventList", "AUEventSchedule.h", 797, "eventList != nullptr");
  if ((unint64_t)MIDI::EventList::size((MIDI::EventList *)a4) >= 0x115)
    __assert_rtn("midiEventList", "AUEventSchedule.h", 800, "srcEvl->size() <= sizeof(MIDIEventList)");
  v8 = XAtomicPoolAllocator::alloc((XAtomicPoolAllocator *)((char *)this->mAllocator + 224));
  *v8 = 0;
  v8[1] = a2;
  *((_WORD *)v8 + 8) = 10;
  *((_BYTE *)v8 + 18) = a3;
  v9 = MIDI::EventList::size((MIDI::EventList *)a4);
  result = memcpy((char *)v8 + 20, a4, v9);
  p_mAddedEventQueue = (unint64_t *)&this->mAddedEventQueue;
  a_value = this->mAddedEventQueue.mEnqueueHead.__a_.__a_value;
  atomic_store((unint64_t)a_value, v8);
  v13 = __ldaxr((unint64_t *)&this->mAddedEventQueue);
  if ((AURenderEventNode *)v13 != a_value)
  {
    __clrex();
LABEL_7:
    while (1)
    {
      atomic_store(v13, v8);
      v14 = __ldaxr(p_mAddedEventQueue);
      if (v14 != v13)
        break;
      if (__stlxr((unint64_t)v8, p_mAddedEventQueue))
        goto LABEL_11;
      v15 = 1;
LABEL_12:
      v13 = v14;
      if (v15)
        return result;
    }
    __clrex();
LABEL_11:
    v15 = 0;
    goto LABEL_12;
  }
  if (__stlxr((unint64_t)v8, p_mAddedEventQueue))
    goto LABEL_7;
  return result;
}

MIDIEventPacket *_ZZN4MIDI27readUMPToSegmentedEventListINS_22MIDI_1_to_2_TranslatorENS_9EventList12PacketReaderEZZ41__AUAudioUnit_scheduleMIDIEventListBlock_EUb2_E3__4EEv14MIDIProtocolIDRT_RT0_T1_ENKUlRKNS_15UniversalPacketEE_clESD_(uint64_t a1, UInt32 *words)
{
  MIDIEventPacket *result;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  MIDIEventList v12;

  result = MIDIEventListAdd(*(MIDIEventList **)(a1 + 8), 0x114uLL, **(MIDIEventPacket ***)a1, **(_QWORD **)(a1 + 16), MIDI::UniversalPacket::word_sizes[(unint64_t)*words >> 28], words);
  **(_QWORD **)a1 = result;
  if (!**(_QWORD **)a1)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(unsigned int **)(a1 + 8);
    v7 = MIDI::EventList::size((MIDI::EventList *)v6);
    if (v6[1])
    {
      v8 = 0;
      v9 = v6 + 2;
      v10 = (unsigned int *)((char *)v6 + v7 + 8);
      do
      {
        if (v9 > v10)
          **(_DWORD **)(v5 + 24) = -50;
        v12.protocol = *v6;
        v12.numPackets = 1;
        memcpy(v12.packet, v9, sizeof(v12.packet));
        AUEventSchedule::midiEventList((AUEventSchedule *)(*(_QWORD *)v5 + 48), *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16), &v12);
        v9 += v9[2] + 3;
        ++v8;
      }
      while (v8 < v6[1]);
    }
    v11 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(v11 + 272) = 0;
    *(_OWORD *)(v11 + 240) = 0u;
    *(_OWORD *)(v11 + 256) = 0u;
    *(_OWORD *)(v11 + 208) = 0u;
    *(_OWORD *)(v11 + 224) = 0u;
    *(_OWORD *)(v11 + 176) = 0u;
    *(_OWORD *)(v11 + 192) = 0u;
    *(_OWORD *)(v11 + 144) = 0u;
    *(_OWORD *)(v11 + 160) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_OWORD *)(v11 + 128) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)v11 = 0u;
    **(_QWORD **)a1 = MIDIEventListInit(*(MIDIEventList **)(a1 + 8), (MIDIProtocolID)**(_DWORD **)(a1 + 32));
    result = MIDIEventListAdd(*(MIDIEventList **)(a1 + 8), 0x114uLL, **(MIDIEventPacket ***)a1, **(_QWORD **)(a1 + 16), MIDI::UniversalPacket::word_sizes[(unint64_t)*words >> 28], words);
    **(_QWORD **)a1 = result;
  }
  return result;
}

AUEventSchedule *_ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ41__AUAudioUnit_scheduleMIDIEventListBlock_EUb1_E3__3EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESC_SD_(AUEventSchedule *result, unsigned int **a2)
{
  unsigned int *v2;
  AUEventSchedule *v3;
  unsigned int v4;
  unint64_t v5;

  v2 = *a2;
  if (**a2)
  {
    v3 = result;
    v4 = 0;
    v5 = (unint64_t)(v2 + 1);
    do
    {
      result = AUEventSchedule::midiEvents((AUEventSchedule *)&v3->mAUv2GetParameterSynchronizer[6], (uint64_t)v3->mAllocator, (char)v3->mScheduledParameterRefresher, *(unsigned __int16 *)(v5 + 8), (AUEventSchedule *)(v5 + 10));
      v5 = (v5 + 10 + *(unsigned __int16 *)(v5 + 8) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      ++v4;
    }
    while (v4 < *v2);
  }
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ41__AUAudioUnit_scheduleMIDIEventListBlock_EUb1_E3__3EENS0_7wrapperIT_EEENUlPvSC_E_8__invokeESC_SC_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ41__AUAudioUnit_scheduleMIDIEventListBlock_EUb1_E3__3EENS0_7wrapperIT_EEENUlPvSC_E0_8__invokeESC_SC_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

AUEventSchedule *AUEventSchedule::midiEvents(AUEventSchedule *this, uint64_t a2, char a3, int64_t a4, AUEventSchedule *a5)
{
  AUEventSchedule *v5;
  AUEventSchedule *v9;
  const unsigned __int8 *v10;
  unint64_t *p_mAddedEventQueue;
  AURenderEventAllocator *mAllocator;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;

  if (a4 < 1)
    return this;
  v5 = a5;
  v9 = this;
  v10 = (const unsigned __int8 *)a5 + a4;
  p_mAddedEventQueue = (unint64_t *)&this->mAddedEventQueue;
  while (1)
  {
    mAllocator = v9->mAllocator;
    if (LOBYTE(v5->mAUv2GetParameterSynchronizer) == 240)
      break;
    v13 = XAtomicPoolAllocator::alloc((XAtomicPoolAllocator *)((char *)mAllocator + 112));
    *v13 = 0;
    v13[1] = a2;
    *((_WORD *)v13 + 8) = 8;
    this = (AUEventSchedule *)NextMIDIEvent((const unsigned __int8 *)v5, v10);
    *((_WORD *)v13 + 9) = (_WORD)this - (_WORD)v5;
    *((_BYTE *)v13 + 20) = a3;
    *((_BYTE *)v13 + 21) = v5->mAUv2GetParameterSynchronizer;
    *((_BYTE *)v13 + 22) = BYTE1(v5->mAUv2GetParameterSynchronizer);
    if ((unint64_t)((char *)this - (char *)v5) < 3)
      v14 = -1;
    else
      v14 = BYTE2(v5->mAUv2GetParameterSynchronizer);
    *((_BYTE *)v13 + 23) = v14;
    v15 = *p_mAddedEventQueue;
    atomic_store(*p_mAddedEventQueue, v13);
    v16 = __ldaxr(p_mAddedEventQueue);
    if (v16 != v15)
    {
      __clrex();
LABEL_11:
      while (1)
      {
        atomic_store(v16, v13);
        v17 = __ldaxr(p_mAddedEventQueue);
        if (v17 != v16)
          break;
        if (__stlxr((unint64_t)v13, p_mAddedEventQueue))
          goto LABEL_15;
        v18 = 1;
LABEL_16:
        v16 = v17;
        if (v18)
          goto LABEL_17;
      }
      __clrex();
LABEL_15:
      v18 = 0;
      goto LABEL_16;
    }
    if (__stlxr((unint64_t)v13, p_mAddedEventQueue))
      goto LABEL_11;
LABEL_17:
    v5 = this;
    if (this >= (AUEventSchedule *)v10)
      return this;
  }
  v19 = AURenderEventAllocator::allocMIDISysEx(mAllocator, a4);
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = a2;
  *((_WORD *)v19 + 8) = 9;
  *((_WORD *)v19 + 9) = a4;
  v19[20] = a3;
  this = (AUEventSchedule *)memcpy(v19 + 21, v5, a4);
  v20 = *p_mAddedEventQueue;
  atomic_store(*p_mAddedEventQueue, (unint64_t *)v19);
  v21 = __ldaxr(p_mAddedEventQueue);
  if (v21 != v20)
  {
    __clrex();
LABEL_23:
    while (1)
    {
      atomic_store(v21, (unint64_t *)v19);
      v22 = __ldaxr(p_mAddedEventQueue);
      if (v22 != v21)
        break;
      if (__stlxr((unint64_t)v19, p_mAddedEventQueue))
        goto LABEL_27;
      v23 = 1;
LABEL_28:
      v21 = v22;
      if ((v23 & 1) != 0)
        return this;
    }
    __clrex();
LABEL_27:
    v23 = 0;
    goto LABEL_28;
  }
  if (__stlxr((unint64_t)v19, p_mAddedEventQueue))
    goto LABEL_23;
  return this;
}

_BYTE *AURenderEventAllocator::allocMIDISysEx(AURenderEventAllocator *this, unint64_t a2)
{
  _BYTE *result;

  if (a2 < 0x1C)
    result = XAtomicPoolAllocator::alloc((XAtomicPoolAllocator *)this);
  else
    result = malloc_type_malloc(a2 + 21, 0xA75504D1uLL);
  result[17] = 0;
  return result;
}

void sub_18EFD016C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_18EFD0244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_ea8_32c85_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_22MIDI_1_to_2_TranslatorEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c85_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_22MIDI_1_to_2_TranslatorEEEEE(uint64_t a1)
{
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 32);
}

void *_ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ37__AUAudioUnit_scheduleMIDIEventBlock_EUb0_E3__2EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESC_SD_(uint64_t a1, MIDIEventList **a2)
{
  return AUEventSchedule::midiEventList((AUEventSchedule *)(*(_QWORD *)a1 + 48), *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *a2);
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ37__AUAudioUnit_scheduleMIDIEventBlock_EUb0_E3__2EENS0_7wrapperIT_EEENUlPvSC_E_8__invokeESC_SC_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ37__AUAudioUnit_scheduleMIDIEventBlock_EUb0_E3__2EENS0_7wrapperIT_EEENUlPvSC_E0_8__invokeESC_SC_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c81_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_18IdentityTranslatorEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c81_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_18IdentityTranslatorEEEEE(uint64_t a1)
{
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 32);
}

void *_ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ37__AUAudioUnit_scheduleMIDIEventBlock_EUb_E3__1EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESC_SD_(uint64_t a1, MIDIEventList **a2)
{
  return AUEventSchedule::midiEventList((AUEventSchedule *)(*(_QWORD *)a1 + 48), *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *a2);
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ37__AUAudioUnit_scheduleMIDIEventBlock_EUb_E3__1EENS0_7wrapperIT_EEENUlPvSC_E_8__invokeESC_SC_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ37__AUAudioUnit_scheduleMIDIEventBlock_EUb_E3__1EENS0_7wrapperIT_EEENUlPvSC_E0_8__invokeESC_SC_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::armParameterWatchdog(ParameterWatchdogQueueElem const&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x193FFE460);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::armParameterWatchdog(ParameterWatchdogQueueElem const&)::{lambda(void)#1}>::perform(_QWORD *a1)
{
  uint64_t v1;
  _OWORD *v2;
  _OWORD *v3;
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  char *v16;
  char *v17;
  __int128 v18;
  caulk::concurrent::message *v20;

  v20 = (caulk::concurrent::message *)a1;
  v1 = a1[3];
  v2 = a1 + 4;
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 440));
  v3 = *(_OWORD **)(v1 + 456);
  v4 = *(_QWORD *)(v1 + 464);
  if ((unint64_t)v3 >= v4)
  {
    v7 = *(_QWORD *)(v1 + 448);
    v8 = ((uint64_t)v3 - v7) >> 5;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (v10 >> 4 > v9)
      v9 = v10 >> 4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v11);
    else
      v12 = 0;
    v13 = (_OWORD *)(v11 + 32 * v8);
    v14 = v11 + 32 * v12;
    v15 = v2[1];
    *v13 = *v2;
    v13[1] = v15;
    v6 = (uint64_t)(v13 + 2);
    v17 = *(char **)(v1 + 448);
    v16 = *(char **)(v1 + 456);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_OWORD *)v16 - 1);
        *(v13 - 2) = *((_OWORD *)v16 - 2);
        *(v13 - 1) = v18;
        v13 -= 2;
        v16 -= 32;
      }
      while (v16 != v17);
      v16 = *(char **)(v1 + 448);
    }
    *(_QWORD *)(v1 + 448) = v13;
    *(_QWORD *)(v1 + 456) = v6;
    *(_QWORD *)(v1 + 464) = v14;
    if (v16)
      operator delete(v16);
  }
  else
  {
    v5 = v2[1];
    *v3 = *v2;
    v3[1] = v5;
    v6 = (uint64_t)(v3 + 2);
  }
  *(_QWORD *)(v1 + 456) = v6;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<ParameterWatchdogQueueElem> &,std::__wrap_iter<ParameterWatchdogQueueElem*>>(*(_QWORD *)(v1 + 448), v6, (v6 - *(_QWORD *)(v1 + 448)) >> 5);
  ParameterWatchdog::evaluate((ParameterWatchdog *)(v1 + 432));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 440));
  return caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::armParameterWatchdog(ParameterWatchdogQueueElem const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v20);
}

void sub_18EFD04B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, caulk::concurrent::message *a10)
{
  os_unfair_lock_s *v10;

  os_unfair_lock_unlock(v10);
  caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::armParameterWatchdog(ParameterWatchdogQueueElem const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&a10);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::armParameterWatchdog(ParameterWatchdogQueueElem const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 72, 8);
  return a1;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<ParameterWatchdogQueueElem> &,std::__wrap_iter<ParameterWatchdogQueueElem*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __n128 result;
  __n128 v11;
  uint64_t v12;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = *(_QWORD *)(a1 + 32 * (v3 >> 1) + 24);
    v6 = *(_QWORD *)(a2 - 8);
    if (v5 > v6)
    {
      v7 = a2 - 32;
      v11 = *(__n128 *)(a2 - 32);
      v12 = *(_QWORD *)(a2 - 16);
      do
      {
        v8 = (_OWORD *)v7;
        v7 = a1 + 32 * v4;
        v9 = *(_OWORD *)(v7 + 16);
        *v8 = *(_OWORD *)v7;
        v8[1] = v9;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
      }
      while (*(_QWORD *)(a1 + 32 * v4 + 24) > v6);
      result = v11;
      *(__n128 *)v7 = v11;
      *(_QWORD *)(v7 + 16) = v12;
      *(_QWORD *)(v7 + 24) = v6;
    }
  }
  return result;
}

void ParameterWatchdog::evaluate(ParameterWatchdog *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  unsigned int v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  int64_t v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  __int128 v67;
  AUEventSchedule v68;

  v1 = *((_QWORD *)this + 2);
  if (v1 != *((_QWORD *)this + 3))
  {
    while (1)
    {
      v3 = *(_QWORD *)(v1 + 24);
      v4 = mach_absolute_time();
      v5 = *((_QWORD *)this + 6) + v4;
      if (v3 > v5)
      {
        CAEventReceiver::Impl::timerShouldFireWithin(*((CAEventReceiver::Impl **)this + 8), (double)(uint64_t)(v3 - v4) * 0.0000000416666667);
        return;
      }
      v6 = *(_QWORD *)this;
      v7 = *(_QWORD *)v1;
      v8 = (unsigned int *)(*(_QWORD *)this + 336);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (uint64_t *)atomic_load((unint64_t *)(v6 + 328));
      if (!v10)
        break;
      caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey(v10, v7);
      v12 = v11;
      if (!v11)
        break;
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 + 1, v11));
      do
        v14 = __ldaxr(v8);
      while (__stlxr(v14 - 1, v8));
      AUEventSchedule::parameterWatchdogFired(&v68, *(_QWORD *)(v1 + 8), *(AUEventSchedule **)(v1 + 16), v5);
      do
        v15 = __ldaxr(v12);
      while (__stlxr(v15 - 1, v12));
      if (!LOBYTE(v68.mScheduledParameterRefresher))
        goto LABEL_21;
      v17 = *(_QWORD *)v1;
      v16 = *(_QWORD *)(v1 + 8);
      v18 = (_OWORD *)*((_QWORD *)this + 2);
      v19 = *((_QWORD *)this + 3);
      v20 = v19 - (_QWORD)v18;
      if (v19 - (uint64_t)v18 >= 33)
      {
        v21 = 0;
        v22 = v20 >> 5;
        v23 = v18[1];
        *(_OWORD *)&v68.mAddedEventQueue.mEnqueueHead.__a_.__a_value = *v18;
        *(_OWORD *)&v68.mAddedEventQueue.mDequeueHead.padding[8] = v23;
        v24 = (unint64_t)((v20 >> 5) - 2) >> 1;
        v25 = v18;
        do
        {
          v26 = &v25[2 * v21 + 2];
          v27 = (2 * v21) | 1;
          v28 = 2 * v21 + 2;
          if (v28 < v22)
          {
            v29 = *((_QWORD *)v26 + 3);
            v30 = *((_QWORD *)v26 + 7);
            v26 += 2 * (v29 > v30);
            if (v29 > v30)
              v27 = v28;
          }
          v31 = v26[1];
          *v25 = *v26;
          v25[1] = v31;
          v25 = v26;
          v21 = v27;
        }
        while (v27 <= v24);
        v32 = (_OWORD *)(v19 - 32);
        if (v26 == (_OWORD *)(v19 - 32))
        {
          v55 = *(_OWORD *)&v68.mAddedEventQueue.mDequeueHead.padding[8];
          *v26 = *(_OWORD *)&v68.mAddedEventQueue.mEnqueueHead.__a_.__a_value;
          v26[1] = v55;
        }
        else
        {
          v33 = *(_OWORD *)(v19 - 16);
          *v26 = *v32;
          v26[1] = v33;
          v34 = *(_OWORD *)&v68.mAddedEventQueue.mDequeueHead.padding[8];
          *v32 = *(_OWORD *)&v68.mAddedEventQueue.mEnqueueHead.__a_.__a_value;
          *(_OWORD *)(v19 - 16) = v34;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<ParameterWatchdogQueueElem> &,std::__wrap_iter<ParameterWatchdogQueueElem*>>((uint64_t)v18, (uint64_t)(v26 + 2), ((char *)(v26 + 2) - (char *)v18) >> 5);
        }
        v19 = *((_QWORD *)this + 3);
      }
      *((_QWORD *)this + 3) = v19 - 32;
      v56 = *((_QWORD *)this + 4);
      if (v19 - 32 >= v56)
      {
        v57 = *((_QWORD *)this + 2);
        v58 = (v19 - 32 - v57) >> 5;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 59)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v60 = v56 - v57;
        if (v60 >> 4 > v59)
          v59 = v60 >> 4;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFE0)
          v61 = 0x7FFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
          v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v61);
        else
          v62 = 0;
        v63 = v61 + 32 * v58;
        *(_QWORD *)v63 = v17;
        *(_QWORD *)(v63 + 8) = v16;
        *(_OWORD *)(v63 + 16) = *(_OWORD *)&v68.mAUv2GetParameterSynchronizer;
        v65 = (char *)*((_QWORD *)this + 2);
        v64 = (char *)*((_QWORD *)this + 3);
        v66 = v63;
        if (v64 != v65)
        {
          do
          {
            v67 = *((_OWORD *)v64 - 1);
            *(_OWORD *)(v66 - 32) = *((_OWORD *)v64 - 2);
            *(_OWORD *)(v66 - 16) = v67;
            v66 -= 32;
            v64 -= 32;
          }
          while (v64 != v65);
          v64 = (char *)*((_QWORD *)this + 2);
        }
        v19 = v63 + 32;
        *((_QWORD *)this + 2) = v66;
        *((_QWORD *)this + 3) = v63 + 32;
        *((_QWORD *)this + 4) = v61 + 32 * v62;
        if (v64)
          operator delete(v64);
      }
      else
      {
        *(_QWORD *)(v19 - 32) = v17;
        *(_QWORD *)(v19 - 24) = v16;
        *(_OWORD *)(v19 - 16) = *(_OWORD *)&v68.mAUv2GetParameterSynchronizer;
      }
      *((_QWORD *)this + 3) = v19;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<ParameterWatchdogQueueElem> &,std::__wrap_iter<ParameterWatchdogQueueElem*>>(*((_QWORD *)this + 2), v19, (v19 - *((_QWORD *)this + 2)) >> 5);
      v54 = *((_QWORD *)this + 3);
LABEL_51:
      v1 = *((_QWORD *)this + 2);
      if (v1 == v54)
        return;
    }
    do
      v35 = __ldaxr(v8);
    while (__stlxr(v35 - 1, v8));
LABEL_21:
    v36 = (_OWORD *)*((_QWORD *)this + 2);
    v37 = *((_QWORD *)this + 3);
    v38 = v37 - (_QWORD)v36;
    if (v37 - (uint64_t)v36 > 32)
    {
      v39 = 0;
      v40 = v38 >> 5;
      v41 = v36[1];
      *(_OWORD *)&v68.mAddedEventQueue.mEnqueueHead.__a_.__a_value = *v36;
      *(_OWORD *)&v68.mAddedEventQueue.mDequeueHead.padding[8] = v41;
      v42 = (unint64_t)((v38 >> 5) - 2) >> 1;
      v43 = v36;
      do
      {
        v44 = &v43[2 * v39 + 2];
        v45 = (2 * v39) | 1;
        v46 = 2 * v39 + 2;
        if (v46 < v40)
        {
          v47 = *((_QWORD *)v44 + 3);
          v48 = *((_QWORD *)v44 + 7);
          v44 += 2 * (v47 > v48);
          if (v47 > v48)
            v45 = v46;
        }
        v49 = v44[1];
        *v43 = *v44;
        v43[1] = v49;
        v43 = v44;
        v39 = v45;
      }
      while (v45 <= v42);
      v50 = (_OWORD *)(v37 - 32);
      if (v44 == v50)
      {
        v53 = *(_OWORD *)&v68.mAddedEventQueue.mDequeueHead.padding[8];
        *v44 = *(_OWORD *)&v68.mAddedEventQueue.mEnqueueHead.__a_.__a_value;
        v44[1] = v53;
      }
      else
      {
        v51 = v50[1];
        *v44 = *v50;
        v44[1] = v51;
        v52 = *(_OWORD *)&v68.mAddedEventQueue.mDequeueHead.padding[8];
        *v50 = *(_OWORD *)&v68.mAddedEventQueue.mEnqueueHead.__a_.__a_value;
        v50[1] = v52;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<ParameterWatchdogQueueElem> &,std::__wrap_iter<ParameterWatchdogQueueElem*>>((uint64_t)v36, (uint64_t)(v44 + 2), ((char *)(v44 + 2) - (char *)v36) >> 5);
      }
      v37 = *((_QWORD *)this + 3);
    }
    v54 = v37 - 32;
    *((_QWORD *)this + 3) = v54;
    goto LABEL_51;
  }
}

void sub_18EFD0C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

RenderObserverList *RenderObserverList::callAll(RenderObserverList *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, AudioBufferList *a6)
{
  Node *i;
  uint64_t (*v12)(_QWORD, unsigned int *, const AudioTimeStamp *, _QWORD, uint64_t, AudioBufferList *);
  unint64_t *p_mPendingList;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *p_mFreeList;
  _QWORD *v19;
  int v20;
  Node *mHead;
  RenderObserverList *v22;
  RenderObserverList *v23;
  Node *v24;
  Node *v25;
  Node *v26;
  Node *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Node *v32;
  RenderObserverList *v33;
  Node *v34;
  Node *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (!this->mTouched)
    return this;
  if ((*(_BYTE *)a2 & 4) != 0)
  {
    p_mPendingList = (unint64_t *)&this->mObservers.mPendingList;
LABEL_11:
    v14 = (_QWORD *)*p_mPendingList;
    if (!*p_mPendingList)
      goto LABEL_3;
    do
    {
      v15 = __ldaxr(p_mPendingList);
      if ((_QWORD *)v15 != v14)
      {
        __clrex();
        goto LABEL_11;
      }
    }
    while (__stlxr(0, p_mPendingList));
    v16 = 0;
    do
    {
      v17 = (_QWORD *)v16;
      v16 = (unint64_t)v14;
      v14 = (_QWORD *)*v14;
      *(_QWORD *)v16 = v17;
    }
    while (v14);
    p_mFreeList = (unint64_t *)&this->mObservers.mFreeList;
    while (2)
    {
      v19 = v17;
      v20 = *(_DWORD *)(v16 + 8);
      if (v20)
      {
        if (v20 != 2)
        {
          if (v20 == 1)
          {
            mHead = this->mObservers.mActiveList.mHead;
            v22 = this;
            if (!this->mObservers.mActiveList.mHead)
            {
              while (1)
              {
LABEL_65:
                v40 = *p_mFreeList;
                *(_QWORD *)v16 = *p_mFreeList;
                while (1)
                {
                  v41 = __ldaxr(p_mFreeList);
                  if (v41 != v40)
                    break;
                  if (!__stlxr(v16, p_mFreeList))
                    goto LABEL_53;
                }
                __clrex();
              }
            }
            while (2)
            {
              v23 = v22;
              v22 = (RenderObserverList *)mHead;
              v24 = (Node *)*((_QWORD *)mHead + 2);
              if (v24)
              {
                v25 = *(Node **)(v16 + 16);
LABEL_24:
                if (v24 == v25)
                {
                  v23->mObservers.mActiveList.mHead = v22->mObservers.mActiveList.mHead;
                  while (1)
                  {
                    v38 = *p_mFreeList;
                    v22->mObservers.mActiveList.mHead = (Node *)*p_mFreeList;
                    while (1)
                    {
                      v39 = __ldaxr(p_mFreeList);
                      if (v39 != v38)
                        break;
                      if (!__stlxr((unint64_t)v22, p_mFreeList))
                        goto LABEL_65;
                    }
                    __clrex();
                  }
                }
              }
              else if (v22[1].mObservers.mActiveList.mHead == *(Node **)(v16 + 32))
              {
                v24 = v22[1].mObservers.mPendingList.mHead;
                v25 = *(Node **)(v16 + 40);
                goto LABEL_24;
              }
              mHead = v22->mObservers.mActiveList.mHead;
              if (!v22->mObservers.mActiveList.mHead)
                goto LABEL_65;
              continue;
            }
          }
LABEL_53:
          if (v19)
          {
            v17 = (_QWORD *)*v19;
            v16 = (unint64_t)v19;
            continue;
          }
          goto LABEL_3;
        }
        v26 = this->mObservers.mActiveList.mHead;
        if (!this->mObservers.mActiveList.mHead)
          goto LABEL_38;
LABEL_31:
        v27 = *(Node **)v26;
        while (1)
        {
          v28 = *p_mFreeList;
          *(_QWORD *)v26 = *p_mFreeList;
          while (1)
          {
            v29 = __ldaxr(p_mFreeList);
            if (v29 != v28)
              break;
            if (!__stlxr((unint64_t)v26, p_mFreeList))
            {
              v26 = v27;
              if (!v27)
              {
                while (1)
                {
LABEL_38:
                  v30 = *p_mFreeList;
                  *(_QWORD *)v16 = *p_mFreeList;
                  while (1)
                  {
                    v31 = __ldaxr(p_mFreeList);
                    if (v31 != v30)
                      break;
                    if (!__stlxr(v16, p_mFreeList))
                      goto LABEL_53;
                  }
                  __clrex();
                }
              }
              goto LABEL_31;
            }
          }
          __clrex();
        }
      }
      break;
    }
    v32 = this->mObservers.mActiveList.mHead;
    v33 = this;
    if (!this->mObservers.mActiveList.mHead)
    {
LABEL_52:
      v33->mObservers.mActiveList.mHead = (Node *)v16;
      *(_QWORD *)v16 = 0;
      goto LABEL_53;
    }
    while (1)
    {
      v33 = (RenderObserverList *)v32;
      v34 = (Node *)*((_QWORD *)v32 + 2);
      if (v34)
        break;
      if (v33[1].mObservers.mActiveList.mHead == *(Node **)(v16 + 32))
      {
        v34 = v33[1].mObservers.mPendingList.mHead;
        v35 = *(Node **)(v16 + 40);
LABEL_46:
        if (v34 == v35)
        {
          while (1)
          {
            v36 = *p_mFreeList;
            *(_QWORD *)v16 = *p_mFreeList;
            while (1)
            {
              v37 = __ldaxr(p_mFreeList);
              if (v37 != v36)
                break;
              if (!__stlxr(v16, p_mFreeList))
                goto LABEL_53;
            }
            __clrex();
          }
        }
      }
      v32 = v33->mObservers.mActiveList.mHead;
      if (!v33->mObservers.mActiveList.mHead)
        goto LABEL_52;
    }
    v35 = *(Node **)(v16 + 16);
    goto LABEL_46;
  }
LABEL_3:
  for (i = this->mObservers.mActiveList.mHead; i; i = *(Node **)i)
  {
    v12 = (uint64_t (*)(_QWORD, unsigned int *, const AudioTimeStamp *, _QWORD, uint64_t, AudioBufferList *))*((_QWORD *)i + 4);
    if (v12)
    {
      this = (RenderObserverList *)v12(*((_QWORD *)i + 5), a2, a3, 0, a4, a6);
    }
    else
    {
      this = (RenderObserverList *)*((_QWORD *)i + 3);
      if (this)
        this = (RenderObserverList *)((uint64_t (*)(RenderObserverList *, _QWORD, const AudioTimeStamp *, uint64_t, uint64_t))this->mObservers.mFreeList.mHead)(this, *a2, a3, a4, a5);
    }
  }
  return this;
}

void AUEventSchedule::dispatchV2SetParamEvents(AUEventSchedule *this, AURenderEvent *a2, int a3)
{
  AURenderEvent *v3;
  AURenderEvent *next;
  unint64_t v6;
  AURenderEvent *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  caulk::rt_safe_memory_resource *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  AUScheduledParameterRefresher2 *mScheduledParameterRefresher;
  AUv2GetParameterSynchronizer *mAUv2GetParameterSynchronizer;
  uint64_t v27;
  __int128 v28;

  v3 = a2;
  if (a3)
  {
    AUEventSchedule::deliverDeferredV2ParameterUpdates(this, a2);
    if (v3)
    {
      do
      {
        next = v3->head.next;
        if (!v3->head.reserved)
          AURenderEventAllocator::dealloc(this->mAllocator, v3);
        v3 = next;
      }
      while (next);
    }
  }
  else
  {
    v6 = 0;
    if (a2)
    {
      v28 = 0uLL;
      while (1)
      {
        v7 = v3->head.next;
        v8 = *((_QWORD *)&v28 + 1);
        if (*((_QWORD *)&v28 + 1) >= v6)
        {
          v12 = (caulk::rt_safe_memory_resource *)v28;
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v28 + 1) - v28) >> 4) + 1;
          if (v13 > 0x555555555555555)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v28) >> 4);
          if (0x5555555555555556 * ((uint64_t)(v6 - v28) >> 4) > v13)
            v13 = 0x5555555555555556 * ((uint64_t)(v6 - v28) >> 4);
          if (v14 >= 0x2AAAAAAAAAAAAAALL)
            v15 = 0x555555555555555;
          else
            v15 = v13;
          if (v15)
          {
            if (v15 > 0x555555555555555 || !*MEMORY[0x1E0DDB4F0])
            {
              __break(1u);
              return;
            }
            v16 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
          }
          else
          {
            v16 = 0;
          }
          v17 = (_OWORD *)(v16 + 16 * ((uint64_t)(*((_QWORD *)&v28 + 1) - v28) >> 4));
          v18 = *(_OWORD *)&v3->head.next;
          v19 = *(_OWORD *)((char *)&v3->MIDIEventsList.eventList.packet[0].timeStamp + 4);
          v17[1] = *(_OWORD *)&v3->MIDIEventsList.eventType;
          v17[2] = v19;
          *v17 = v18;
          if (*((_QWORD *)&v28 + 1) == (_QWORD)v28)
          {
            v23 = v16 + 16 * ((uint64_t)(*((_QWORD *)&v28 + 1) - v28) >> 4);
          }
          else
          {
            v20 = v16 + 16 * ((uint64_t)(*((_QWORD *)&v28 + 1) - v28) >> 4);
            do
            {
              v21 = *(_OWORD *)(v8 - 48);
              v22 = *(_OWORD *)(v8 - 16);
              v23 = v20 - 48;
              *(_OWORD *)(v20 - 32) = *(_OWORD *)(v8 - 32);
              *(_OWORD *)(v20 - 16) = v22;
              *(_OWORD *)(v20 - 48) = v21;
              v8 -= 48;
              v20 -= 48;
            }
            while (v8 != (_QWORD)v28);
          }
          v11 = (uint64_t)(v17 + 3);
          v6 = v16 + 48 * v15;
          *(_QWORD *)&v28 = v23;
          if (v12)
            std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](v12, v14);
        }
        else
        {
          v9 = *(_OWORD *)&v3->head.next;
          v10 = *(_OWORD *)((char *)&v3->MIDIEventsList.eventList.packet[0].timeStamp + 4);
          *(_OWORD *)(*((_QWORD *)&v28 + 1) + 16) = *(_OWORD *)&v3->MIDIEventsList.eventType;
          *(_OWORD *)(*((_QWORD *)&v28 + 1) + 32) = v10;
          **((_OWORD **)&v28 + 1) = v9;
          v11 = *((_QWORD *)&v28 + 1) + 48;
        }
        *(_QWORD *)&v24 = v28;
        *((_QWORD *)&v24 + 1) = v11;
        v28 = v24;
        *(_QWORD *)(v11 - 40) = 0;
        if (!v3->head.reserved)
          AURenderEventAllocator::dealloc(this->mAllocator, v3);
        v3 = v7;
        if (!v7)
          goto LABEL_34;
      }
    }
    v28 = 0uLL;
LABEL_34:
    mScheduledParameterRefresher = this->mScheduledParameterRefresher;
    mAUv2GetParameterSynchronizer = this[1].mAUv2GetParameterSynchronizer;
    v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 80, 8);
    *(_DWORD *)(v27 + 16) = 0;
    *(_QWORD *)(v27 + 24) = mScheduledParameterRefresher;
    *(_QWORD *)(v27 + 32) = mAUv2GetParameterSynchronizer;
    *(_QWORD *)(v27 + 40) = this;
    *(_OWORD *)(v27 + 48) = v28;
    *(_QWORD *)(v27 + 64) = v6;
    *(_QWORD *)v27 = &off_1E290B458;
    *(_QWORD *)(v27 + 8) = 0;
    caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)((char *)mScheduledParameterRefresher + 128), (caulk::concurrent::message *)v27);
  }
}

void sub_18EFD1170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  uint64_t v9;

  if ((_QWORD)a9)
    std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)a9, 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)a9) >> 4));
  _Unwind_Resume(exception_object);
}

void *AUEventSchedule::deliverDeferredV2ParameterUpdates(AUEventSchedule *this, AURenderEvent *a2)
{
  void *result;
  AUParameterAddress v5;
  AURenderEvent *next;
  AUParameterAddress parameterAddress;
  unsigned int wordCount;

  result = (void *)-[AUv2GetParameterSynchronizer deliverV2Parameters:](this[1].mAUv2GetParameterSynchronizer, "deliverV2Parameters:", a2);
  if (a2)
  {
    v5 = 0;
    next = a2;
    do
    {
      if (next == a2)
      {
        parameterAddress = a2->parameter.parameterAddress;
      }
      else
      {
        parameterAddress = next->parameter.parameterAddress;
        if (parameterAddress == v5)
          goto LABEL_8;
      }
      result = AUScheduledParameterRefresher::deferInvalidateParameter((AUScheduledParameterRefresher *)this->mScheduledParameterRefresher, (unint64_t)this[1].mAUv2GetParameterSynchronizer, parameterAddress);
      v5 = parameterAddress;
LABEL_8:
      wordCount = next->MIDIEventsList.eventList.packet[0].wordCount;
      if (wordCount)
        result = AUv2GetParameterSynchronizer::setLatestV2SetParameterSequenceNumber(this->mAUv2GetParameterSynchronizer, wordCount);
      next = next->head.next;
    }
    while (next);
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (a2 < 0x555555555555556)
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

void caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *this)
{
  caulk::rt_safe_memory_resource *v2;

  *(_QWORD *)this = &off_1E290B3E0;
  v2 = (caulk::rt_safe_memory_resource *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](v2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - (_QWORD)v2) >> 4));
  }
  caulk::concurrent::message::~message(this);
}

{
  caulk::rt_safe_memory_resource *v2;

  *(_QWORD *)this = &off_1E290B3E0;
  v2 = (caulk::rt_safe_memory_resource *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](v2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - (_QWORD)v2) >> 4));
  }
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x193FFE460);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_18EFD13AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

uint64_t *caulk::concurrent::details::message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::perform(uint64_t a1)
{
  uint64_t v2;
  AUEventSchedule *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t *result;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;

  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 56))
    std::terminate();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(AUEventSchedule **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = (unsigned int *)(v4 + 336);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  result = (uint64_t *)atomic_load((unint64_t *)(v4 + 328));
  if (result)
  {
    result = (uint64_t *)caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey(result, v2);
    if (v8)
    {
      v9 = v8;
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 + 1, v8));
      do
        v11 = __ldaxr(v5);
      while (__stlxr(v11 - 1, v5));
      v13 = *(_QWORD **)(a1 + 48);
      v12 = *(_QWORD **)(a1 + 56);
      if (v13 == v12)
      {
        v5 = v8;
      }
      else
      {
        v14 = 0;
        do
        {
          if (v14)
            *v14 = v13;
          v15 = v13 + 6;
          v14 = v13;
          v13 = v15;
        }
        while (v15 != v12);
        *(v15 - 6) = 0;
        result = (uint64_t *)AUEventSchedule::deliverDeferredV2ParameterUpdates(v3, *(AURenderEvent **)(a1 + 48));
        v5 = v9;
      }
    }
  }
  do
    v16 = __ldaxr(v5);
  while (__stlxr(v16 - 1, v5));
  return result;
}

void sub_18EFD14A0(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;
  caulk::rt_safe_memory_resource *v3;

  v2 = *a1;
  *(_QWORD *)v2 = &off_1E290B3E0;
  v3 = (caulk::rt_safe_memory_resource *)*((_QWORD *)v2 + 6);
  if (v3)
  {
    *((_QWORD *)v2 + 7) = v3;
    std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](v3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v2 + 8) - (_QWORD)v3) >> 4));
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 80, 8);
  return a1;
}

void caulk::concurrent::details::message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *this)
{
  caulk::rt_safe_memory_resource *v2;

  *(_QWORD *)this = &off_1E290B3E0;
  v2 = (caulk::rt_safe_memory_resource *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](v2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - (_QWORD)v2) >> 4));
  }
  caulk::concurrent::message::~message(this);
}

{
  caulk::rt_safe_memory_resource *v2;

  *(_QWORD *)this = &off_1E290B3E0;
  v2 = (caulk::rt_safe_memory_resource *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](v2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - (_QWORD)v2) >> 4));
  }
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x193FFE460);
}

void AUScheduledParameterRefresher2::AUScheduledParameterRefresher2(AUScheduledParameterRefresher2 *this)
{
  os_unfair_lock_s *v2;
  XAtomicPoolAllocator *v3;
  NSObject *v4;
  void *v5;
  std::string *v6;
  uint64_t v7;
  std::string __p;
  std::string v9;
  std::string *v10;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &unk_1E2909548;
  *((_DWORD *)this + 2) = 0;
  v2 = (os_unfair_lock_s *)((char *)this + 8);
  *((_OWORD *)this + 1) = xmmword_18F117120;
  v3 = (XAtomicPoolAllocator *)((char *)this + 16);
  *((_QWORD *)this + 4) = 4080;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 28) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "com.apple.audio.toolbox.AUScheduledParameterRefresher");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v9 = __p;
  LOBYTE(v10) = 1;
  v11 = 25;
  v12 = 0;
  v13 = 1;
  v14 = 0;
  v15 = 0;
  MEMORY[0x193FFDC14]((char *)this + 128, 1, &v9);
  if ((_BYTE)v10 && SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 18) = &off_1E290B390;
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2913488;
  v9.__r_.__value_.__l.__size_ = (std::string::size_type)this;
  v10 = &v9;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_QWORD *)this + 21) = (char *)this + 128;
  *((_BYTE *)this + 176) = 0;
  *((_QWORD *)this + 26) = (char *)this + 184;
  _ZNKSt3__110__function6__funcIN29AUScheduledParameterRefresher9mWorkToDoMUlvE_ENS_9allocatorIS3_EEFvvEE7__cloneEPNS0_6__baseIS6_EE((uint64_t)&v9, (_QWORD *)this + 23);
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 35) = 0;
  if (*((int *)this + 28) <= 511)
  {
    do
      XAtomicPoolAllocator::allocChunk(v3);
    while (*((int *)this + 28) < 512);
  }
  os_unfair_lock_lock(v2);
  os_unfair_lock_unlock(v2);
  *(_QWORD *)this = &off_1E2909718;
  *((_QWORD *)this + 36) = &off_1E29134D0;
  *((_QWORD *)this + 39) = (char *)this + 288;
  *((_DWORD *)this + 80) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_DWORD *)this + 84) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 850045863;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = this;
  *((_DWORD *)this + 110) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 60) = 1200;
  dispatch_get_global_queue(25, 0);
  v4 = objc_claimAutoreleasedReturnValue();
  *((_QWORD *)this + 61) = dispatch_queue_create_with_target_V2("ParameterWatchdog", 0, v4);

  v5 = (void *)*((_QWORD *)this + 61);
  applesauce::dispatch::v1::source::operator*(v5);
  objc_claimAutoreleasedReturnValue();
  CAEventReceiver::CAEventReceiver((_QWORD *)this + 62, v5);

  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2915690;
  v9.__r_.__value_.__l.__size_ = (std::string::size_type)this + 432;
  v10 = &v9;
  CAEventReceiver::createTimer(*((_QWORD *)this + 62), (uint64_t)&v9);
  v6 = v10;
  if (v10 == &v9)
  {
    v7 = 4;
    v6 = &v9;
  }
  else
  {
    if (!v10)
      return;
    v7 = 5;
  }
  (*(void (**)(void))(v6->__r_.__value_.__r.__words[0] + 8 * v7))();
}

void sub_18EFD18C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  XAtomicPoolAllocator *v22;

  if (a15 < 0)
    operator delete(__p);
  XAtomicPoolAllocator::~XAtomicPoolAllocator(v22);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::~guarded_lookup_hash_table(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;

  if (!atomic_load((unsigned int *)(a1 + 48)))
  {
    v3 = atomic_load((unint64_t *)(a1 + 40));
    if (v3)
    {
      v4 = caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::~table_impl(v3);
      MEMORY[0x193FFE460](v4, 0x1060C402CF69088);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    v5 = *(uint64_t **)(a1 + 56);
    if (v5)
    {
      v6 = *(uint64_t **)(a1 + 64);
      v7 = *(void **)(a1 + 56);
      if (v6 != v5)
      {
        do
          std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl>>::reset[abi:ne180100](--v6);
        while (v6 != v5);
        v7 = *(void **)(a1 + 56);
      }
      *(_QWORD *)(a1 + 64) = v5;
      operator delete(v7);
    }
    v8 = *(_QWORD **)(a1 + 24);
    if (v8 == (_QWORD *)a1)
    {
      v9 = 4;
      v8 = (_QWORD *)a1;
    }
    else
    {
      if (!v8)
        return a1;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    return a1;
  }
  _os_assert_log();
  result = _os_crash();
  __break(1u);
  return result;
}

void AUScheduledParameterRefresher::~AUScheduledParameterRefresher(AUScheduledParameterRefresher *this)
{
  caulk::concurrent::message *v2;
  char *v3;
  char *v4;
  uint64_t v5;

  *(_QWORD *)this = &unk_1E2909548;
  *((_QWORD *)this + 18) = &off_1E290B390;
  v2 = (AUScheduledParameterRefresher *)((char *)this + 144);
  v3 = (char *)this + 184;
  v4 = (char *)*((_QWORD *)this + 26);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
    goto LABEL_5;
  }
  if (v4)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  caulk::concurrent::message::~message(v2);
  MEMORY[0x193FFDC20]((char *)this + 128);
  XAtomicPoolAllocator::~XAtomicPoolAllocator((AUScheduledParameterRefresher *)((char *)this + 16));
}

_QWORD *CAEventReceiver::CAEventReceiver(_QWORD *a1, void *a2)
{
  id v3;
  char *v4;
  id v5;

  v3 = a2;
  v4 = (char *)operator new(0x90uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_1E29175C8;
  v5 = v3;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_QWORD *)v4 + 7) = v5;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 12) = 0;
  *((_QWORD *)v4 + 13) = -1;
  *((_OWORD *)v4 + 7) = 0u;
  *((_QWORD *)v4 + 16) = dispatch_semaphore_create(0);
  *((_DWORD *)v4 + 34) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  std::shared_ptr<CAEventReceiver::Impl>::__enable_weak_this[abi:ne180100]<CAEventReceiver::Impl,CAEventReceiver::Impl,void>((uint64_t)a1, (_QWORD *)v4 + 3, (uint64_t)(v4 + 24));

  return a1;
}

void sub_18EFD1BA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1},std::allocator<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1},std::allocator<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915690;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1},std::allocator<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915690;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1},std::allocator<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  os_unfair_lock_s *v1;

  v1 = *(os_unfair_lock_s **)(a1 + 8);
  os_unfair_lock_lock(v1 + 2);
  ParameterWatchdog::evaluate((ParameterWatchdog *)v1);
  os_unfair_lock_unlock(v1 + 2);
}

void sub_18EFD1C50(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<CAEventReceiver::Impl>::__enable_weak_this[abi:ne180100]<CAEventReceiver::Impl,CAEventReceiver::Impl,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void std::__shared_ptr_emplace<CAEventReceiver::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29175C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CAEventReceiver::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29175C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<CAEventReceiver::Impl>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  const void *v8;
  const void *v9;
  std::__shared_weak_count *v10;

  v2 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;

  v3 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;

  v4 = *(_QWORD **)(a1 + 96);
  if (v4 == (_QWORD *)(a1 + 72))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;

  v7 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;

  v8 = *(const void **)(a1 + 48);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(a1 + 40);
  if (v9)
    CFRelease(v9);
  v10 = *(std::__shared_weak_count **)(a1 + 32);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

void std::__function::__func<std::hash<void *>,std::allocator<std::hash<void *>>,unsigned int ()(void *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<std::hash<void *>,std::allocator<std::hash<void *>>,unsigned int ()(void *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29134D0;
  return result;
}

void std::__function::__func<std::hash<void *>,std::allocator<std::hash<void *>>,unsigned int ()(void *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29134D0;
}

unint64_t std::__function::__func<std::hash<void *>,std::allocator<std::hash<void *>>,unsigned int ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v3 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2);
  return -348639895 * ((v3 >> 47) ^ v3);
}

void AUScheduledParameterRefresher2::invalidateParameter(AUScheduledParameterRefresher2 *this, void *a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  unsigned int v16;

  v5 = (unsigned int *)((char *)this + 336);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = (uint64_t *)atomic_load((unint64_t *)this + 41);
  if (v7)
  {
    caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey(v7, (uint64_t)a2);
    if (v8)
    {
      v9 = v8;
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 + 1, v8));
      do
        v11 = __ldaxr(v5);
      while (__stlxr(v11 - 1, v5));
      v12 = a2;
      objc_msgSend(v12, "parameterTree");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "parameterWithAddress:", a3);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (v14)
      {
        LODWORD(v15) = 0;
        objc_msgSend(v14, "setValue:originator:atHostTime:", 2, 0, v15);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          objc_msgSend(v12, "_notifyParameterChange:", a3);
      }

      v5 = v9;
    }
  }
  do
    v16 = __ldaxr(v5);
  while (__stlxr(v16 - 1, v5));
}

void sub_18EFD1FCC(_Unwind_Exception *a1)
{
  unsigned int *v1;
  void *v2;
  void *v3;
  unsigned int v5;

  do
    v5 = __ldaxr(v1);
  while (__stlxr(v5 - 1, v1));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5799(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5800(uint64_t a1)
{

}

void sub_18EFD20C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18EFD2178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EFD2650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, AUHostingServiceClient *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,AUHostingServiceClient *a27,const void *a28)
{
  void *v28;

  std::unique_ptr<AUHostingServiceClient>::reset[abi:ne180100](&a18, 0);
  std::unique_ptr<AUHostingServiceClient>::reset[abi:ne180100](&a27, 0);
  applesauce::CF::ArrayRef::~ArrayRef(&a28);

  _Unwind_Resume(a1);
}

void sub_18EFD27D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id getAUOutputUnitClass(const AudioComponentDescription *a1)
{
  objc_opt_self();
  return (id)objc_claimAutoreleasedReturnValue();
}

AUHostingServiceClient *std::unique_ptr<AUHostingServiceClient>::reset[abi:ne180100](AUHostingServiceClient **a1, AUHostingServiceClient *a2)
{
  AUHostingServiceClient *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    AUHostingServiceClient::~AUHostingServiceClient(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void sub_18EFD2A88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD2B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EFD2D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, void *a19)
{
  void *v19;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18EFD2F3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EFD308C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFD32F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<BusPropertyObserver>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<BusPropertyObserver>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (id *)*v2);
    operator delete(**a1);
  }
}

void std::vector<BusPropertyObserver>::__base_destruct_at_end[abi:ne180100](uint64_t a1, id *a2)
{
  id *v4;
  id *v5;
  BOOL v6;

  v4 = *(id **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 4;
    do
    {

      objc_destroyWeak(v5);
      v6 = v5 == a2;
      v5 -= 4;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<BusPropertyObserver>::__assign_with_size[abi:ne180100]<BusPropertyObserver*,BusPropertyObserver*>(uint64_t a1, id *location, id *a3, unint64_t a4)
{
  uint64_t v8;
  int v9;
  id *v10;
  uint64_t v11;
  unint64_t v12;
  id *v13;
  int v14;
  id *v15;
  unint64_t v16;
  id *v17;
  id *v18;

  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(id **)a1;
  if (a4 > (v8 - *(_QWORD *)a1) >> 5)
  {
    if (v10)
    {
      std::vector<BusPropertyObserver>::__base_destruct_at_end[abi:ne180100](a1, *(id **)a1);
      operator delete(*(void **)a1);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<BusPropertyObserver>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = *(id **)(a1 + 8);
    v14 = v9;
    v15 = location;
    goto LABEL_13;
  }
  v16 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v10) >> 5;
  if (v16 < a4)
  {
    v17 = &location[4 * v16];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<BusPropertyObserver *,BusPropertyObserver *,BusPropertyObserver *>(location, v17, (uint64_t)v10);
    v13 = *(id **)(a1 + 8);
    v14 = v9;
    v15 = v17;
LABEL_13:
    *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<BusPropertyObserver>,BusPropertyObserver*,BusPropertyObserver*,BusPropertyObserver*>(v14, v15, a3, v13);
    return;
  }
  v18 = (id *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<BusPropertyObserver *,BusPropertyObserver *,BusPropertyObserver *>(location, a3, (uint64_t)v10);
  std::vector<BusPropertyObserver>::__base_destruct_at_end[abi:ne180100](a1, v18);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<BusPropertyObserver *,BusPropertyObserver *,BusPropertyObserver *>(id *location, id *a2, uint64_t a3)
{
  id *v5;
  id WeakRetained;

  if (location != a2)
  {
    v5 = location;
    do
    {
      WeakRetained = objc_loadWeakRetained(v5);
      objc_storeWeak((id *)a3, WeakRetained);

      objc_storeStrong((id *)(a3 + 8), v5[1]);
      *(_OWORD *)(a3 + 16) = *((_OWORD *)v5 + 1);
      a3 += 32;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return a3;
}

id *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<BusPropertyObserver>,BusPropertyObserver*,BusPropertyObserver*,BusPropertyObserver*>(int a1, id *from, id *a3, id *to)
{
  id *v6;

  if (from != a3)
  {
    v6 = from;
    do
    {
      objc_copyWeak(to, v6);
      to[1] = v6[1];
      *((_OWORD *)to + 1) = *((_OWORD *)v6 + 1);
      to += 4;
      v6 += 4;
    }
    while (v6 != a3);
  }
  return to;
}

char *std::vector<BusPropertyObserver>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

id *std::vector<BusPropertyObserver>::__init_with_size[abi:ne180100]<BusPropertyObserver*,BusPropertyObserver*>(id *result, id *a2, id *a3, unint64_t a4)
{
  id *v6;

  if (a4)
  {
    v6 = result;
    std::vector<BusPropertyObserver>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<BusPropertyObserver>,BusPropertyObserver*,BusPropertyObserver*,BusPropertyObserver*>((int)v6 + 16, a2, a3, (id *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_18EFD3714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<BusPropertyObserver>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void BusPropertyObserver::remove(BusPropertyObserver *this, AUAudioUnitBus *a2)
{
  id WeakRetained;
  AUAudioUnitBus *v4;

  v4 = a2;
  WeakRetained = objc_loadWeakRetained((id *)this);
  if (WeakRetained)
    -[AUAudioUnitBus removeObserver:forKeyPath:context:](v4, "removeObserver:forKeyPath:context:", WeakRetained, *((_QWORD *)this + 1), *((_QWORD *)this + 3));

}

void sub_18EFD3780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void BusPropertyObserver::add(BusPropertyObserver *this, AUAudioUnitBus *a2)
{
  AUAudioUnitBus *v3;
  id WeakRetained;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)this);
  -[AUAudioUnitBus addObserver:forKeyPath:options:context:](v3, "addObserver:forKeyPath:options:context:");

}

void sub_18EFD37EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<BusPropertyObserver *,BusPropertyObserver *,BusPropertyObserver *>(id *location, id *a2, uint64_t a3)
{
  id *v5;
  id WeakRetained;
  id v7;
  void *v8;

  if (location != a2)
  {
    v5 = location;
    do
    {
      WeakRetained = objc_loadWeakRetained(v5);
      objc_storeWeak((id *)a3, WeakRetained);

      v7 = v5[1];
      v5[1] = 0;
      v8 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v7;

      *(_OWORD *)(a3 + 16) = *((_OWORD *)v5 + 1);
      a3 += 32;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return a3;
}

unint64_t std::vector<BusPropertyObserver>::__push_back_slow_path<BusPropertyObserver const&>(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id *v12;
  id *v13;
  id *v14;
  unint64_t v15;
  id v16;
  BOOL v17;
  id *v18;
  id *v19;

  v2 = (uint64_t)(a1[1] - *a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v3)
    v3 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v7);
  else
    v8 = 0;
  v9 = v7 + 32 * v2;
  v10 = v7 + 32 * v8;
  objc_copyWeak((id *)v9, (id *)a2);
  *(_QWORD *)(v9 + 8) = *(id *)(a2 + 8);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(a2 + 16);
  v11 = v9 + 32;
  v13 = (id *)*a1;
  v12 = (id *)a1[1];
  if (v12 == (id *)*a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v12)
      return v11;
    goto LABEL_19;
  }
  v14 = v12 - 4;
  do
  {
    v15 = v9;
    v9 -= 32;
    objc_moveWeak((id *)v9, v14);
    v16 = v14[1];
    v14[1] = 0;
    *(_QWORD *)(v15 - 24) = v16;
    *(_OWORD *)(v15 - 16) = *((_OWORD *)v14 + 1);
    v17 = v14 == v13;
    v14 -= 4;
  }
  while (!v17);
  v12 = (id *)*a1;
  v18 = (id *)a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v18 != v12)
  {
    v19 = v18 - 4;
    do
    {

      objc_destroyWeak(v19);
      v17 = v19 == v12;
      v19 -= 4;
    }
    while (!v17);
  }
  if (v12)
LABEL_19:
    operator delete(v12);
  return v11;
}

void sub_18EFD3A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD3B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AUAudioUnitBus;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18EFD3CF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD4018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFD41B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location, void *a12)
{
  void *v12;
  void *v13;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18EFD42E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD4414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD4580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EFD4658(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EFD4738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EFD4810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EFD4B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::recursive_mutex *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<APComponent_AUAudioUnitSubclass *,std::shared_ptr<APComponent_AUAudioUnitSubclass>::__shared_ptr_default_delete<APComponent_AUAudioUnitSubclass,APComponent_AUAudioUnitSubclass>,std::allocator<APComponent_AUAudioUnitSubclass>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<APComponent_AUAudioUnitSubclass *,std::shared_ptr<APComponent_AUAudioUnitSubclass>::__shared_ptr_default_delete<APComponent_AUAudioUnitSubclass,APComponent_AUAudioUnitSubclass>,std::allocator<APComponent_AUAudioUnitSubclass>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void std::__function::__func<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1},std::allocator<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1},std::allocator<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915E28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1},std::allocator<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915E28;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1},std::allocator<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::operator()(uint64_t a1, const AudioComponentDescription **a2)
{
  const AudioComponentDescription *v2;
  uint64_t v3;
  AUv3InstanceBase *v4;
  uint64_t v5;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (AUv3InstanceBase *)operator new();
  v5 = *(_QWORD *)(v3 + 160);
  AUv3InstanceBase::AUv3InstanceBase(v4, v2);
  *(_QWORD *)v4 = &off_1E29092F0;
  *((_QWORD *)v4 + 50) = v5;
  return (_QWORD *)((char *)v4 + 8);
}

void sub_18EFD4D74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10A1C406BDEE126);
  _Unwind_Resume(a1);
}

void APComponent_AUAudioUnitSubclass::~APComponent_AUAudioUnitSubclass(APComponent *this)
{
  APComponent::~APComponent(this);
  JUMPOUT(0x193FFE460);
}

id APComponent_AUAudioUnitSubclass::getV3Class(id *this)
{
  return this[20];
}

void sub_18EFD4F00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18EFD5148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD5240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18EFD5314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFD53C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD54D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18EFD5620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18EFD570C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_18EFD57C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD5C58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void RecordingObserver::~RecordingObserver(RecordingObserver *this)
{
  RecordingObserver::~RecordingObserver(this);
  JUMPOUT(0x193FFE460);
}

{
  const void *v2;
  const void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E2907240;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)

  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
  {

    v4 = (void *)*((_QWORD *)this + 3);
  }
  else
  {
    v4 = 0;
  }

}

void sub_18EFD5E74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void UIObserver::~UIObserver(id *this)
{

}

{

  JUMPOUT(0x193FFE460);
}

void sub_18EFD6060(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18EFD60FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD63EC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  AUObserverController::create(AUParameterTree *)::{lambda(AUObserverController*)#1}::operator()(v1);
  __cxa_rethrow();
}

void sub_18EFD6400(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_18EFD64E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFD658C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD6610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EFD66A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<AddressToParameter>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<AddressToParameter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;
        objc_destroyWeak(v4 - 1);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

id *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AddressToParameter *,AddressToParameter *,AddressToParameter *>(void **a1, void **a2, id *a3)
{
  id *v3;
  void **v5;
  id *v6;
  id *v7;
  void *v8;
  id WeakRetained;

  v3 = a3;
  if (a1 != a2)
  {
    v5 = a1;
    v6 = a3;
    do
    {
      v7 = v5 + 1;
      v8 = *v5;
      v5 += 2;
      *v6 = v8;
      v6 += 2;
      WeakRetained = objc_loadWeakRetained(v7);
      objc_storeWeak(v3 + 1, WeakRetained);

      v3 = v6;
    }
    while (v5 != a2);
    return v6;
  }
  return v3;
}

void AUObserverController::create(AUParameterTree *)::{lambda(AUObserverController*)#1}::operator()(uint64_t a1)
{
  _opaque_pthread_t *v2;
  NSObject *v3;
  _QWORD block[5];

  v2 = (_opaque_pthread_t *)atomic_load((unint64_t *)(*(_QWORD *)(a1 + 32) + 88));
  if (v2 != pthread_self())
  {
    AUObserverController::~AUObserverController((AUObserverController *)a1);
    JUMPOUT(0x193FFE460);
  }
  dispatch_get_global_queue(21, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZZN20AUObserverController6createEP15AUParameterTreeENKUlPS_E_clES2__block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(v3, block);

}

void AUObserverController::~AUObserverController(AUObserverController *this)
{
  CAEventReceiver *v2;
  void *v3;
  std::__shared_weak_count *v4;

  v2 = (CAEventReceiver *)((char *)this + 32);
  if ((CAEventReceiver::invalidate((CAEventReceiver *)((char *)this + 32)) & 1) == 0)
    std::terminate();
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  CAEventReceiver::~CAEventReceiver(v2);

  objc_destroyWeak((id *)this + 2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void std::__shared_ptr_pointer<AUObserverController *,AUObserverController::create(AUParameterTree *)::{lambda(AUObserverController *)#1},std::allocator<AUObserverController>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_pointer<AUObserverController *,AUObserverController::create(AUParameterTree *)::{lambda(AUObserverController *)#1},std::allocator<AUObserverController>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  _opaque_pthread_t *v2;
  NSObject *v3;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 24);
  v2 = (_opaque_pthread_t *)atomic_load((unint64_t *)(*(_QWORD *)(v1 + 32) + 88));
  if (v2 != pthread_self())
  {
    AUObserverController::~AUObserverController((AUObserverController *)v1);
    JUMPOUT(0x193FFE460);
  }
  dispatch_get_global_queue(21, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZZN20AUObserverController6createEP15AUParameterTreeENKUlPS_E_clES2__block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v1;
  dispatch_async(v3, block);

}

void sub_18EFD6F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  id *v3;

  objc_destroyWeak(v3);

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *,false>(id *a1, id *a2, uint64_t a3, char a4)
{
  id *v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id *v16;
  id *v17;
  unint64_t v18;
  id *v19;
  unint64_t v20;
  unint64_t v21;
  id *v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  id v26;
  char v27;
  id *v28;
  id v29;
  unint64_t v30;
  id *v31;
  id *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  id v37;
  id *v38;
  unint64_t v39;
  id *v40;
  id *v41;
  uint64_t v42;
  id *v43;
  id *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id *v48;
  id *v49;
  id v50;
  id *v51;
  id v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  id *v57;
  id v58;
  id v59;
  id *v60;
  unint64_t v61;
  id *v62;
  id *v63;
  id WeakRetained;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  id *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  unint64_t v74;
  id *v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  unint64_t v80;
  id *v81;
  id v82;
  id *v83;
  id *v84;
  id v85;
  id v86;
  id v87;
  id *v89;
  id *v90;
  id *v91;
  id v92;
  id *v93;
  id *v94;
  id v95;
  id v96;
  id *v97;
  id *v98;
  id *to;
  id v101;
  id v102;
  id v103;
  id v104;

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(id *a1, id *a2)
{
  id *v4;
  id *v5;
  id WeakRetained;
  id v7;
  id v8;
  id v9;

  v8 = *a1;
  v4 = a1 + 1;
  objc_moveWeak(&v9, a1 + 1);
  *a1 = *a2;
  v5 = a2 + 1;
  WeakRetained = objc_loadWeakRetained(a2 + 1);
  objc_storeWeak(v4, WeakRetained);

  *a2 = v8;
  v7 = objc_loadWeakRetained(&v9);
  objc_storeWeak(v5, v7);

  objc_destroyWeak(&v9);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(id *a1, id *a2, id *a3)
{
  id *v5;
  id v6;
  id v7;
  id *v8;

  v5 = a1;
  v6 = *a2;
  v7 = *a3;
  if (*a2 < *a1)
  {
    if (v7 >= v6)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, a2);
      if (*a3 >= *a2)
        return;
      a1 = a2;
    }
    v8 = a3;
    goto LABEL_9;
  }
  if (v7 < v6)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a2, a3);
    if (*a2 < *v5)
    {
      a1 = v5;
      v8 = a2;
LABEL_9:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, v8);
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(id *a1, id *a2, id *a3, id *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a2, a3);
  if (*a4 < *a3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a3, a4);
    if (*a3 < *a2)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a2, a3);
      if (*a2 < *a1)
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(id *a1, id *a2, id *a3, id *a4, id *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a2, a3, a4);
  if (*a5 < *a4)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a4, a5);
    if (*a4 < *a3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a3, a4);
      if (*a3 < *a2)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a2, a3);
        if (*a2 < *a1)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, a2);
      }
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(id *a1, id *a2)
{
  _BOOL8 v4;
  void **v5;
  id *v6;
  uint64_t v7;
  int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  id *v13;
  id WeakRetained;
  id *v15;
  id v16;
  id v18;
  id v19;

  v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (*(a2 - 2) < *a1)
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, a2 - 2);
      return v4;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a1 + 2, a2 - 2);
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return v4;
    default:
      v5 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a1 + 2, a1 + 4);
      v6 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v7 = 0;
      v8 = 0;
      break;
  }
  while (*v6 >= *v5)
  {
LABEL_14:
    v5 = v6;
    v7 += 16;
    v6 += 2;
    if (v6 == a2)
      return 1;
  }
  v18 = *v6;
  objc_moveWeak(&v19, v6 + 1);
  v9 = *v5;
  v10 = v7;
  while (1)
  {
    v11 = v10;
    v12 = (id *)((char *)a1 + v10);
    *(id *)((char *)a1 + v10 + 48) = v9;
    v13 = (id *)((char *)a1 + v10 + 40);
    WeakRetained = objc_loadWeakRetained(v13);
    objc_storeWeak(v12 + 7, WeakRetained);

    if (v11 == -32)
      break;
    v9 = v12[2];
    v10 = v11 - 16;
    if (v18 >= v9)
    {
      v15 = (id *)((char *)a1 + v10 + 48);
      v13 = (id *)((char *)a1 + v11 + 40);
      goto LABEL_12;
    }
  }
  v15 = a1;
LABEL_12:
  *v15 = v18;
  v16 = objc_loadWeakRetained(&v19);
  objc_storeWeak(v13, v16);

  if (++v8 != 8)
  {
    objc_destroyWeak(&v19);
    goto LABEL_14;
  }
  v4 = v6 + 2 == a2;
  objc_destroyWeak(&v19);
  return v4;
}

void sub_18EFD7FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18EFD80D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD81A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18EFD83AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18EFD8598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD86D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFD879C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD8880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EFD8B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_18EFD8DF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFD8FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD9130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EFD935C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18EFD961C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18EFD9730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFD9800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD9950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EFD9A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_18EFD9C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18EFD9DB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFD9EB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EFDA0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18EFDA278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EFDA4D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18EFDAB84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFDAFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<AUObserverController::AddressOriginator>::__emplace_unique_key_args<AUObserverController::AddressOriginator,AUObserverController::AddressOriginator>(uint64_t *result, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;

  v5 = (uint64_t **)result;
  v7 = (uint64_t **)(result + 1);
  v6 = (uint64_t *)result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v6;
        v8 = v6[4];
        if (v8 <= a2)
          break;
LABEL_5:
        v6 = *v7;
        v10 = v7;
        if (!*v7)
          goto LABEL_11;
      }
      if (v8 >= a2)
      {
        v9 = v7[5];
        if ((unint64_t)v9 > a3)
          goto LABEL_5;
        if ((unint64_t)v9 >= a3)
          return result;
      }
      v10 = v7 + 1;
      v6 = v7[1];
      if (!v6)
        goto LABEL_11;
    }
  }
  v10 = (uint64_t **)(result + 1);
LABEL_11:
  v11 = (uint64_t *)operator new(0x30uLL);
  *((_OWORD *)v11 + 2) = *a4;
}

_QWORD *std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E29159F0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E29159F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E29159F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E29159F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  _QWORD **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  id v17;
  uint64_t *v18;
  _QWORD **v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  _QWORD *v28;
  _QWORD *i;
  unint64_t v30;
  _QWORD *v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  int8x8_t prime;
  void *v37;
  void *v38;
  uint64_t v39;
  _QWORD **v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *j;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t k;
  unint64_t v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t **leaf_high;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t *m;
  void *v68;
  uint64_t **v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  unint64_t v78;
  uint64_t **v79;
  uint64_t *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  __int128 v94;
  _OWORD *v95;
  unint64_t v96;
  __int128 v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  __int128 v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  id v118;
  id *location;
  id *locationa;
  uint64_t **v121;
  void *v122;
  id v123;
  id v124;
  uint64_t *v125;
  uint64_t v126;
  id WeakRetained;
  uint64_t *v128;
  uint64_t v129;
  void *v130;
  uint64_t *v131;
  _QWORD *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  _QWORD **v138;
  _QWORD *v139;
  uint64_t v140;
  void *__p[2];
  __int128 v142;
  float v143;
  _BYTE v144[128];
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return;
  v4 = *(_QWORD **)(a1 + 8);
  if (!v4)
    goto LABEL_240;
  v117 = v3;
  *(_OWORD *)__p = 0u;
  v142 = 0u;
  v143 = 1.0;
  v5 = &v139;
  v139 = 0;
  v140 = 0;
  v138 = &v139;
  v132 = v4;
  if (v4[9])
  {
    v128 = v4 + 8;
    location = (id *)(v4 + 2);
    v121 = (uint64_t **)(v4 + 7);
    do
    {
      v6 = *v121;
      v7 = v128;
      while (v6 != v7)
      {
        v8 = (uint64_t *)v6[1];
        v9 = v6;
        if (v8)
        {
          do
          {
            v10 = v8;
            v8 = (uint64_t *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v10 = (uint64_t *)v6[2];
            v11 = *v10 == (_QWORD)v6;
            v6 = v10;
          }
          while (!v11);
        }
        v13 = v9[4];
        v12 = v9[5];
        if (v10 == v128)
        {
          v125 = v128;
        }
        else
        {
          while (v10[4] == v13)
          {
            v14 = (uint64_t *)v10[1];
            if (v14)
            {
              do
              {
                v15 = v14;
                v14 = (uint64_t *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                v15 = (uint64_t *)v10[2];
                v11 = *v15 == (_QWORD)v10;
                v10 = v15;
              }
              while (!v11);
            }
            v12 = 0;
            v10 = v15;
            if (v15 == v128)
            {
              v10 = v128;
              break;
            }
          }
          v125 = v10;
        }
        WeakRetained = objc_loadWeakRetained(location);
        objc_msgSend(WeakRetained, "parameterWithAddress:", v13);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        if (v16)
        {
          v123 = v16;
          v17 = v16;
          v130 = v17;
          do
          {
            v18 = (uint64_t *)objc_msgSend(v17, "observerList", v117);
            if (v18)
            {
              v19 = v5;
              v20 = v130;
              v22 = *v18;
              v21 = v18[1];
              while (v22 != v21)
              {
                if (!*(_BYTE *)(*(_QWORD *)v22 + 8)
                  && ((v12 & 1) != 0 || (*(_QWORD *)v22 & 0xFFFFFFFELL) != (v12 & 0xFFFFFFFE)))
                {
                  v23 = *(_QWORD *)(*(_QWORD *)v22 + 16);
                  v24 = objc_msgSend(v20, "address");
                  objc_msgSend(v20, "value");
                  (*(void (**)(uint64_t, uint64_t))(v23 + 16))(v23, v24);
                }
                v22 += 8;
              }

              v4 = v132;
              v5 = v19;
            }
            objc_msgSend(v17, "parentNode");
            v25 = objc_claimAutoreleasedReturnValue();

            v17 = (id)v25;
          }
          while (v25);
          v26 = (unint64_t)__p[1];
          if (__p[1])
          {
            v27 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              v12 = v13;
              if ((void *)v13 >= __p[1])
                v12 = v13 % (unint64_t)__p[1];
            }
            else
            {
              v12 = ((unint64_t)__p[1] - 1) & v13;
            }
            v28 = (_QWORD *)*((_QWORD *)__p[0] + v12);
            if (v28)
            {
              for (i = (_QWORD *)*v28; i; i = (_QWORD *)*i)
              {
                v30 = i[1];
                if (v30 == v13)
                {
                  if (i[2] == v13)
                    goto LABEL_108;
                }
                else
                {
                  if (v27.u32[0] > 1uLL)
                  {
                    if ((void *)v30 >= __p[1])
                      v30 %= (unint64_t)__p[1];
                  }
                  else
                  {
                    v30 &= (unint64_t)__p[1] - 1;
                  }
                  if (v30 != v12)
                    break;
                }
              }
            }
          }
          v31 = operator new(0x18uLL);
          *v31 = 0;
          v31[1] = v13;
          v31[2] = v13;
          v32 = (float)(unint64_t)(*((_QWORD *)&v142 + 1) + 1);
          if (!v26 || (float)(v143 * (float)v26) < v32)
          {
            v33 = (v26 & (v26 - 1)) != 0;
            if (v26 < 3)
              v33 = 1;
            v34 = v33 | (2 * v26);
            v35 = vcvtps_u32_f32(v32 / v143);
            if (v34 <= v35)
              prime = (int8x8_t)v35;
            else
              prime = (int8x8_t)v34;
            if (*(_QWORD *)&prime == 1)
            {
              prime = (int8x8_t)2;
            }
            else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
            {
              prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
              v26 = (unint64_t)__p[1];
            }
            if (*(_QWORD *)&prime <= v26)
            {
              if (*(_QWORD *)&prime < v26)
              {
                v43 = vcvtps_u32_f32((float)*((unint64_t *)&v142 + 1) / v143);
                if (v26 < 3
                  || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
                {
                  v43 = std::__next_prime(v43);
                }
                else
                {
                  v45 = 1 << -(char)__clz(v43 - 1);
                  if (v43 >= 2)
                    v43 = v45;
                }
                if (*(_QWORD *)&prime <= v43)
                  prime = (int8x8_t)v43;
                if (*(_QWORD *)&prime >= v26)
                {
                  v26 = (unint64_t)__p[1];
                }
                else
                {
                  if (prime)
                    goto LABEL_64;
                  v57 = __p[0];
                  __p[0] = 0;
                  if (v57)
                    operator delete(v57);
                  v26 = 0;
                  __p[1] = 0;
                }
              }
            }
            else
            {
LABEL_64:
              if (*(_QWORD *)&prime >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v37 = operator new(8 * *(_QWORD *)&prime);
              v38 = __p[0];
              __p[0] = v37;
              if (v38)
                operator delete(v38);
              v39 = 0;
              __p[1] = (void *)prime;
              do
                *((_QWORD *)__p[0] + v39++) = 0;
              while (*(_QWORD *)&prime != v39);
              v40 = (_QWORD **)v142;
              if ((_QWORD)v142)
              {
                v41 = *(_QWORD *)(v142 + 8);
                v42 = (uint8x8_t)vcnt_s8(prime);
                v42.i16[0] = vaddlv_u8(v42);
                if (v42.u32[0] > 1uLL)
                {
                  if (v41 >= *(_QWORD *)&prime)
                    v41 %= *(_QWORD *)&prime;
                }
                else
                {
                  v41 &= *(_QWORD *)&prime - 1;
                }
                *((_QWORD *)__p[0] + v41) = &v142;
                for (j = *v40; j; v41 = v47)
                {
                  v47 = j[1];
                  if (v42.u32[0] > 1uLL)
                  {
                    if (v47 >= *(_QWORD *)&prime)
                      v47 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v47 &= *(_QWORD *)&prime - 1;
                  }
                  if (v47 != v41)
                  {
                    if (!*((_QWORD *)__p[0] + v47))
                    {
                      *((_QWORD *)__p[0] + v47) = v40;
                      goto LABEL_89;
                    }
                    *v40 = (_QWORD *)*j;
                    *j = **((_QWORD **)__p[0] + v47);
                    **((_QWORD **)__p[0] + v47) = j;
                    j = v40;
                  }
                  v47 = v41;
LABEL_89:
                  v40 = (_QWORD **)j;
                  j = (_QWORD *)*j;
                }
              }
              v26 = (unint64_t)prime;
            }
            if ((v26 & (v26 - 1)) != 0)
            {
              if (v13 >= v26)
                v12 = v13 % v26;
              else
                v12 = v13;
            }
            else
            {
              v12 = (v26 - 1) & v13;
            }
          }
          v48 = __p[0];
          v49 = (_QWORD *)*((_QWORD *)__p[0] + v12);
          if (v49)
          {
            *v31 = *v49;
            goto LABEL_106;
          }
          *v31 = v142;
          *(_QWORD *)&v142 = v31;
          v48[v12] = &v142;
          if (*v31)
          {
            v50 = *(_QWORD *)(*v31 + 8);
            if ((v26 & (v26 - 1)) != 0)
            {
              if (v50 >= v26)
                v50 %= v26;
            }
            else
            {
              v50 &= v26 - 1;
            }
            v49 = (char *)__p[0] + 8 * v50;
LABEL_106:
            *v49 = v31;
          }
          ++*((_QWORD *)&v142 + 1);
LABEL_108:
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          objc_msgSend(v130, "dependentParameters");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v134, v144, 16);
          if (v52)
          {
            v53 = *(_QWORD *)v135;
            do
            {
              for (k = 0; k != v52; ++k)
              {
                if (*(_QWORD *)v135 != v53)
                  objc_enumerationMutation(v51);
                v55 = objc_msgSend(*(id *)(*((_QWORD *)&v134 + 1) + 8 * k), "longLongValue");
                v56 = (_QWORD *)v142;
                if ((_QWORD)v142)
                {
                  while (v56[2] != v55)
                  {
                    v56 = (_QWORD *)*v56;
                    if (!v56)
                      goto LABEL_116;
                  }
                }
                else
                {
LABEL_116:
                  v133 = v55;
                  std::__tree<AUObserverController::AddressOriginator>::__emplace_unique_key_args<AUObserverController::AddressOriginator,AUObserverController::AddressOriginator>((uint64_t *)&v138, v55, 0, &v133);
                }
              }
              v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v134, v144, 16);
            }
            while (v52);
          }

          v16 = v123;
        }

        v7 = v128;
        v6 = v125;
      }
      if (v121 != (uint64_t **)&v138)
      {
        v58 = (uint64_t)v138;
        if (v4[9])
        {
          v59 = *v121;
          *v121 = v128;
          *(_QWORD *)(*v128 + 16) = 0;
          *v128 = 0;
          v128[1] = 0;
          if (v59[1])
            v60 = (uint64_t *)v59[1];
          else
            v60 = v59;
          if (!v60)
          {
            v66 = 0;
            goto LABEL_155;
          }
          v61 = std::__tree<AUObserverController::AddressOriginator>::_DetachedTreeCache::__detach_next((uint64_t)v60);
          if ((_QWORD **)v58 == v5)
          {
            v58 = (uint64_t)v5;
          }
          else
          {
            v62 = v58;
            do
            {
              v63 = v60;
              v60 = v61;
              *((_OWORD *)v63 + 2) = *(_OWORD *)(v62 + 32);
              leaf_high = (uint64_t **)std::__tree<AUObserverController::AddressOriginator>::__find_leaf_high((uint64_t)v121, &v133, v63[4], v63[5]);
              if (v61)
                v61 = std::__tree<AUObserverController::AddressOriginator>::_DetachedTreeCache::__detach_next((uint64_t)v61);
              else
                v61 = 0;
              v65 = *(_QWORD **)(v62 + 8);
              if (v65)
              {
                do
                {
                  v58 = (uint64_t)v65;
                  v65 = (_QWORD *)*v65;
                }
                while (v65);
              }
              else
              {
                do
                {
                  v58 = *(_QWORD *)(v62 + 16);
                  v11 = *(_QWORD *)v58 == v62;
                  v62 = v58;
                }
                while (!v11);
              }
              if (!v60)
                break;
              v62 = v58;
            }
            while ((_QWORD **)v58 != v5);
          }
          if (v61)
          {
            for (m = (uint64_t *)v61[2]; m; m = (uint64_t *)m[2])
              v61 = m;
            v66 = v61;
LABEL_155:
          }
        }
        if ((_QWORD **)v58 != v5)
        {
          do
          {
            v68 = operator new(0x30uLL);
            *((_OWORD *)v68 + 2) = *(_OWORD *)(v58 + 32);
            v69 = (uint64_t **)std::__tree<AUObserverController::AddressOriginator>::__find_leaf_high((uint64_t)v121, &v133, *((_QWORD *)v68 + 4), *((_QWORD *)v68 + 5));
            v70 = *(_QWORD **)(v58 + 8);
            if (v70)
            {
              do
              {
                v71 = v70;
                v70 = (_QWORD *)*v70;
              }
              while (v70);
            }
            else
            {
              do
              {
                v71 = *(_QWORD **)(v58 + 16);
                v11 = *v71 == v58;
                v58 = (uint64_t)v71;
              }
              while (!v11);
            }
            v58 = (uint64_t)v71;
          }
          while (v71 != v5);
        }
      }
      v139 = 0;
      v140 = 0;
      v138 = v5;
    }
    while (v4[9]);
  }
  v72 = v4[10];
  v73 = v4[11];
  if (v72 == v73)
  {
    v113 = 0;
    goto LABEL_239;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *,false>(v72, v73, 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v73 - v72) >> 3)), 1);
  v74 = v4[10];
  v126 = v4[11];
  if (v74 == v126)
    goto LABEL_237;
  locationa = (id *)(v4 + 2);
  v75 = v4[10];
  do
  {
    v129 = v74;
    v76 = *(_QWORD *)(v74 + 8);
    while (*(_QWORD *)(v75 + 8) == v76)
    {
      v75 += 40;
      if (v75 == v126)
      {
        v75 = v126;
        break;
      }
    }
    v124 = objc_loadWeakRetained(locationa);
    objc_msgSend(v124, "parameterWithAddress:", v76);
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    if (v122)
    {
      v77 = v122;
      v78 = 0xCCCCCCCCCCCCCCCDLL * ((v75 - v129) >> 3);
      v118 = v77;
      while (1)
      {
        v79 = (uint64_t **)objc_msgSend(v77, "observerList", v117, v118);
        if (v79)
        {
          if (v75 != v129)
          {
            v80 = *v79;
            v131 = v79[1];
            if (*v79 != v131)
              break;
          }
        }
LABEL_234:
        objc_msgSend(v77, "parentNode");
        v112 = objc_claimAutoreleasedReturnValue();

        v77 = (id)v112;
        if (!v112)
          goto LABEL_235;
      }
      v81 = v77;
      while (1)
      {
        v82 = *v80;
        if (*(_BYTE *)(*v80 + 8))
          break;
LABEL_233:
        if (++v80 == v131)
          goto LABEL_234;
      }
      v83 = *v80 & 0xFFFFFFFELL;
      if (*(_QWORD *)(v82 + 24))
      {
        if (v78 >> 59)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v78);
        v86 = &v84[32 * v85];
        v87 = v84;
        v88 = v129;
        do
        {
          if (*(_QWORD *)(v88 + 32) != v83)
          {
            if (v84 >= v86)
            {
              v90 = (v84 - v87) >> 5;
              v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 59)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if ((v86 - v87) >> 4 > v91)
                v91 = (v86 - v87) >> 4;
              if ((unint64_t)(v86 - v87) >= 0x7FFFFFFFFFFFFFE0)
                v92 = 0x7FFFFFFFFFFFFFFLL;
              else
                v92 = v91;
              if (v92)
                v92 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v92);
              else
                v93 = 0;
              v94 = *(_OWORD *)(v88 + 16);
              v95 = (_OWORD *)(v92 + 32 * v90);
              *v95 = *(_OWORD *)v88;
              v95[1] = v94;
              if (v84 == v87)
              {
                v98 = (char *)(v92 + 32 * v90);
              }
              else
              {
                v96 = v92 + 32 * v90;
                do
                {
                  v97 = *((_OWORD *)v84 - 1);
                  v98 = (char *)(v96 - 32);
                  *(_OWORD *)(v96 - 32) = *((_OWORD *)v84 - 2);
                  *(_OWORD *)(v96 - 16) = v97;
                  v84 -= 32;
                  v96 -= 32;
                }
                while (v84 != v87);
              }
              v86 = (char *)(v92 + 32 * v93);
              v84 = (char *)(v95 + 2);
              if (v87)
                operator delete(v87);
              v87 = v98;
            }
            else
            {
              v89 = *(_OWORD *)(v88 + 16);
              *(_OWORD *)v84 = *(_OWORD *)v88;
              *((_OWORD *)v84 + 1) = v89;
              v84 += 32;
            }
          }
          v88 += 40;
        }
        while (v88 != v75);
        if (v87 != v84)
        {
          v77 = v81;
          (*(void (**)(void))(*(_QWORD *)(v82 + 24) + 16))();
          v4 = v132;
          goto LABEL_231;
        }
        v87 = v84;
      }
      else
      {
        if (v78 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v78);
        v101 = &v99[24 * v100];
        v87 = v99;
        v102 = v129;
        do
        {
          if (*(_QWORD *)(v102 + 32) != v83)
          {
            if (v99 >= v101)
            {
              v104 = 0xAAAAAAAAAAAAAAABLL * ((v99 - v87) >> 3) + 1;
              if (v104 > 0xAAAAAAAAAAAAAAALL)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v101 - v87) >> 3) > v104)
                v104 = 0x5555555555555556 * ((v101 - v87) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v101 - v87) >> 3) >= 0x555555555555555)
                v105 = 0xAAAAAAAAAAAAAAALL;
              else
                v105 = v104;
              if (v105)
                v105 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v105);
              else
                v106 = 0;
              v107 = *(_DWORD *)(v102 + 16);
              v108 = v105 + 8 * ((v99 - v87) >> 3);
              *(_OWORD *)v108 = *(_OWORD *)v102;
              *(_DWORD *)(v108 + 16) = v107;
              if (v99 == v87)
              {
                v111 = (char *)(v105 + 8 * ((v99 - v87) >> 3));
              }
              else
              {
                v109 = v105 + 8 * ((v99 - v87) >> 3);
                do
                {
                  v110 = *(_OWORD *)(v99 - 24);
                  v111 = (char *)(v109 - 24);
                  *(_QWORD *)(v109 - 8) = *((_QWORD *)v99 - 1);
                  *(_OWORD *)(v109 - 24) = v110;
                  v99 -= 24;
                  v109 -= 24;
                }
                while (v99 != v87);
              }
              v101 = (char *)(v105 + 24 * v106);
              v99 = (char *)(v108 + 24);
              if (v87)
                operator delete(v87);
              v87 = v111;
            }
            else
            {
              v103 = *(_DWORD *)(v102 + 16);
              *(_OWORD *)v99 = *(_OWORD *)v102;
              *((_DWORD *)v99 + 4) = v103;
              v99 += 24;
            }
          }
          v102 += 40;
        }
        while (v102 != v75);
        if (v87 != v99)
          (*(void (**)(void))(*(_QWORD *)(v82 + 16) + 16))();
      }
      v4 = v132;
      v77 = v81;
LABEL_231:
      v78 = 0xCCCCCCCCCCCCCCCDLL * ((v75 - v129) >> 3);
      if (v87)
        operator delete(v87);
      goto LABEL_233;
    }
LABEL_235:

    v74 = v75;
  }
  while (v75 != v126);
  v74 = v4[10];
LABEL_237:
  v4[11] = v74;
  v113 = v139;
LABEL_239:
  v3 = v117;
LABEL_240:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v115 = __ldaxr(p_shared_owners);
  while (__stlxr(v115 - 1, p_shared_owners));
  if (!v115)
  {
    v116 = v3;
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v116);
  }
}

void sub_18EFDBF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,_QWORD *a31,uint64_t a32,char a33)
{
  unint64_t *p_shared_owners;
  unint64_t v35;

  p_shared_owners = (unint64_t *)&a9->__shared_owners_;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
    std::__shared_weak_count::__release_weak(a9);
  }
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  char *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *k;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  BOOL v37;
  unint64_t *v38;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  unint64_t *j;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  BOOL v61;
  uint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  char *v69;
  uint64_t v70;
  char *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  int64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  unint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  __int128 v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  int64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  __int128 v117;
  __int128 v118;
  unint64_t *v119;
  unint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(__int128 *result, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;

  if (*a2 >= (unsigned __int128)*result)
  {
    if (*a3 < (unsigned __int128)*a2)
    {
      v8 = *a2;
      v9 = a2[1];
      v10 = *((_QWORD *)a2 + 4);
      v11 = *((_QWORD *)a3 + 4);
      v12 = a3[1];
      *a2 = *a3;
      a2[1] = v12;
      *((_QWORD *)a2 + 4) = v11;
      *((_QWORD *)a3 + 4) = v10;
      *a3 = v8;
      a3[1] = v9;
      if (*a2 < (unsigned __int128)*result)
      {
        v13 = *result;
        v14 = result[1];
        v15 = *((_QWORD *)result + 4);
        v16 = *((_QWORD *)a2 + 4);
        v17 = a2[1];
        *result = *a2;
        result[1] = v17;
        *((_QWORD *)result + 4) = v16;
        *((_QWORD *)a2 + 4) = v15;
        *a2 = v13;
        a2[1] = v14;
      }
    }
  }
  else
  {
    if (*a3 < (unsigned __int128)*a2)
    {
      v3 = *result;
      v4 = result[1];
      v5 = *((_QWORD *)result + 4);
      v6 = *((_QWORD *)a3 + 4);
      v7 = a3[1];
      *result = *a3;
      result[1] = v7;
      *((_QWORD *)result + 4) = v6;
    }
    else
    {
      v18 = *result;
      v19 = result[1];
      v20 = *((_QWORD *)result + 4);
      v21 = *((_QWORD *)a2 + 4);
      v22 = a2[1];
      *result = *a2;
      result[1] = v22;
      *((_QWORD *)result + 4) = v21;
      *((_QWORD *)a2 + 4) = v20;
      *a2 = v18;
      a2[1] = v19;
      if (*a3 >= (unsigned __int128)*a2)
        return result;
      v3 = *a2;
      v4 = a2[1];
      v5 = *((_QWORD *)a2 + 4);
      v23 = *((_QWORD *)a3 + 4);
      v24 = a3[1];
      *a2 = *a3;
      a2[1] = v24;
      *((_QWORD *)a2 + 4) = v23;
    }
    *((_QWORD *)a3 + 4) = v5;
    *a3 = v3;
    a3[1] = v4;
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_OWORD *)a4 < *(_OWORD *)a3)
  {
    result = *(__n128 *)a3;
    v9 = *(_OWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 32);
    v11 = *(_QWORD *)(a4 + 32);
    v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a4 + 32) = v10;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v9;
    if (*(_OWORD *)a3 < *(_OWORD *)a2)
    {
      result = *(__n128 *)a2;
      v13 = *(_OWORD *)(a2 + 16);
      v14 = *(_QWORD *)(a2 + 32);
      v15 = *(_QWORD *)(a3 + 32);
      v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 32) = v15;
      *(_QWORD *)(a3 + 32) = v14;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v13;
      if (*(_OWORD *)a2 < *(_OWORD *)a1)
      {
        result = *(__n128 *)a1;
        v17 = *(_OWORD *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 32);
        v19 = *(_QWORD *)(a2 + 32);
        v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_QWORD *)(a1 + 32) = v19;
        *(_QWORD *)(a2 + 32) = v18;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(a1, a2, a3, a4).n128_u64[0];
  if (*(_OWORD *)a5 < *(_OWORD *)a4)
  {
    result = *(__n128 *)a4;
    v11 = *(_OWORD *)(a4 + 16);
    v12 = *(_QWORD *)(a4 + 32);
    v13 = *(_QWORD *)(a5 + 32);
    v14 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v14;
    *(_QWORD *)(a4 + 32) = v13;
    *(_QWORD *)(a5 + 32) = v12;
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 16) = v11;
    if (*(_OWORD *)a4 < *(_OWORD *)a3)
    {
      result = *(__n128 *)a3;
      v15 = *(_OWORD *)(a3 + 16);
      v16 = *(_QWORD *)(a3 + 32);
      v17 = *(_QWORD *)(a4 + 32);
      v18 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v18;
      *(_QWORD *)(a3 + 32) = v17;
      *(_QWORD *)(a4 + 32) = v16;
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v15;
      if (*(_OWORD *)a3 < *(_OWORD *)a2)
      {
        result = *(__n128 *)a2;
        v19 = *(_OWORD *)(a2 + 16);
        v20 = *(_QWORD *)(a2 + 32);
        v21 = *(_QWORD *)(a3 + 32);
        v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v22;
        *(_QWORD *)(a2 + 32) = v21;
        *(_QWORD *)(a3 + 32) = v20;
        *(__n128 *)a3 = result;
        *(_OWORD *)(a3 + 16) = v19;
        if (*(_OWORD *)a2 < *(_OWORD *)a1)
        {
          result = *(__n128 *)a1;
          v23 = *(_OWORD *)(a1 + 16);
          v24 = *(_QWORD *)(a1 + 32);
          v25 = *(_QWORD *)(a2 + 32);
          v26 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v26;
          *(_QWORD *)(a1 + 32) = v25;
          *(_QWORD *)(a2 + 32) = v24;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 40);
      if (*(_OWORD *)(a2 - 40) < *(_OWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_QWORD *)(a1 + 32);
        v10 = *(_QWORD *)(a2 - 8);
        v11 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(_QWORD *)(a1 + 32) = v10;
        *(_QWORD *)(a2 - 8) = v9;
        *v6 = v7;
        *(_OWORD *)(a2 - 24) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v12 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80));
      v13 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(_QWORD *)(v13 + 8);
    v17 = *(_QWORD *)(v12 + 8);
    if (v16 < v17)
      break;
    if (v16 <= v17)
    {
      v18 = *(_QWORD *)v13;
      if (*(_QWORD *)v13 < *(_QWORD *)v12)
        goto LABEL_8;
    }
LABEL_21:
    v12 = v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2)
      return 1;
  }
  v18 = *(_QWORD *)v13;
LABEL_8:
  v27 = *(_QWORD *)(v13 + 32);
  v26 = *(_OWORD *)(v13 + 16);
  v19 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v19;
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v12 + 32);
  v20 = a1;
  if (v12 != a1)
  {
    v21 = v14;
    while (1)
    {
      v22 = a1 + v21;
      v23 = (unint64_t *)(a1 + v21 + 40);
      v24 = *(_QWORD *)(a1 + v21 + 48);
      if (v16 >= v24)
      {
        if (v16 > v24)
        {
          v20 = v12;
          goto LABEL_20;
        }
        if (v18 >= *v23)
          break;
      }
      v12 -= 40;
      v25 = *(_OWORD *)(a1 + v21 + 56);
      *(_OWORD *)(v22 + 80) = *(_OWORD *)v23;
      *(_OWORD *)(v22 + 96) = v25;
      *(_QWORD *)(v22 + 112) = *(_QWORD *)(a1 + v21 + 72);
      v21 -= 40;
      if (v21 == -80)
      {
        v20 = a1;
        goto LABEL_20;
      }
    }
    v20 = a1 + v21 + 80;
  }
LABEL_20:
  *(_QWORD *)v20 = v18;
  *(_QWORD *)(v20 + 8) = v16;
  *(_OWORD *)(v20 + 16) = v26;
  *(_QWORD *)(v20 + 32) = v27;
  if (++v15 != 8)
    goto LABEL_21;
  return v13 + 40 == a2;
}

_QWORD *std::__tree<AUObserverController::AddressOriginator>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

_QWORD *std::__tree<AUObserverController::AddressOriginator>::__find_leaf_high(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;

  v6 = *(_QWORD **)(a1 + 8);
  v4 = (_QWORD *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        v4 = v5;
        v7 = v5[4];
        if (v7 <= a3 && (v7 < a3 || v5[5] <= a4))
          break;
        v5 = (_QWORD *)*v5;
        v8 = v4;
        if (!*v4)
          goto LABEL_10;
      }
      v5 = (_QWORD *)v5[1];
    }
    while (v5);
    v8 = v4 + 1;
  }
  else
  {
    v8 = v4;
  }
LABEL_10:
  *a2 = v4;
  return v8;
}

void ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33_AURemoteParameterSynchronization11objc_objectJEE11async_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  char v2;

  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

void sub_18EFDD424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18EFDD4B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EFDD50C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFDD594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EFDD5EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ChunkyAudioFile::Optimize(ChunkyAudioFile *this)
{
  int *v2;
  int *v3;
  size_t v4;
  int v5;
  _BYTE *v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  int64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v31;
  int64_t v32;
  size_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  _DWORD *v56;
  _DWORD *exception;
  _DWORD *v58;
  uint64_t v59;
  void *v60;
  void *__p;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint8_t buf[4];
  const char *v68;
  __int16 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 136) && !(*(unsigned int (**)(ChunkyAudioFile *))(*(_QWORD *)this + 216))(this))
    *((_BYTE *)this + 136) = 0;
  v64 = 0;
  v3 = (int *)*((_QWORD *)this + 18);
  v2 = (int *)*((_QWORD *)this + 19);
  if (v3 == v2)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v3;
      if (*v3 == *((_DWORD *)this + 42))
      {
        v4 += *((unsigned int *)this + 44);
      }
      else if (v5 != 1179405394 && v5 != *((_DWORD *)this + 43))
      {
        v4 += (*(uint64_t (**)(ChunkyAudioFile *, _QWORD))(*(_QWORD *)this + 792))(this, *((_QWORD *)v3 + 1));
        v2 = (int *)*((_QWORD *)this + 19);
      }
      v3 += 6;
    }
    while (v3 != v2);
  }
  __p = 0;
  v62 = 0;
  v63 = 0;
  CADeprecated::CAAutoFree<char>::CAAutoFree(&v60, v4);
  v6 = v60;
  if (!v60)
    goto LABEL_41;
  v8 = (__int128 *)*((_QWORD *)this + 18);
  v7 = (__int128 *)*((_QWORD *)this + 19);
  if (v8 == v7)
  {
    v7 = (__int128 *)*((_QWORD *)this + 18);
  }
  else
  {
    do
    {
      if (*(_DWORD *)v8 != 1179405394 && *(_DWORD *)v8 != *((_DWORD *)this + 43))
      {
        v65 = 0;
        if (*(_DWORD *)v8 == *((_DWORD *)this + 42))
          v9 = *((unsigned int *)this + 44);
        else
          v9 = (*(uint64_t (**)(ChunkyAudioFile *, _QWORD))(*(_QWORD *)this + 792))(this, *((_QWORD *)v8 + 1));
        v65 = v9;
        v66 = *v8;
        v10 = v6 - (_BYTE *)v60;
        v11 = v62;
        if ((unint64_t)v62 >= v63)
        {
          v13 = (char *)__p;
          v14 = 0xAAAAAAAAAAAAAAABLL * ((v62 - (_BYTE *)__p) >> 3);
          v15 = v14 + 1;
          if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v63 - (_QWORD)__p) >> 3) > v15)
            v15 = 0x5555555555555556 * ((uint64_t)(v63 - (_QWORD)__p) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (_QWORD)__p) >> 3) >= 0x555555555555555)
            v16 = 0xAAAAAAAAAAAAAAALL;
          else
            v16 = v15;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v16);
          else
            v17 = 0;
          v18 = (char *)(v16 + 24 * v14);
          *(_OWORD *)v18 = v66;
          *((_QWORD *)v18 + 2) = v10;
          v19 = v18;
          if (v11 != v13)
          {
            do
            {
              v20 = *(_OWORD *)(v11 - 24);
              *((_QWORD *)v19 - 1) = *((_QWORD *)v11 - 1);
              *(_OWORD *)(v19 - 24) = v20;
              v19 -= 24;
              v11 -= 24;
            }
            while (v11 != v13);
            v11 = (char *)__p;
          }
          v12 = v18 + 24;
          __p = v19;
          v63 = v16 + 24 * v17;
          if (v11)
            operator delete(v11);
        }
        else
        {
          *(_OWORD *)v62 = *v8;
          *((_QWORD *)v11 + 2) = v10;
          v12 = v11 + 24;
        }
        v62 = v12;
        v21 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _BYTE *, uint64_t *))(**((_QWORD **)this + 13)
                                                                                             + 64))(*((_QWORD *)this + 13), 0, *((_QWORD *)v8 + 2), v65, v6, &v65);
        if (v21)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v68 = "ChunkyAudioFile.cpp";
            v69 = 1024;
            v70 = 99;
            _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  InfoChunksToMemory ReadBytes failed", buf, 0x12u);
          }
          exception = __cxa_allocate_exception(4uLL);
          *exception = v21;
          __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
        }
        v6 += v65;
        v7 = (__int128 *)*((_QWORD *)this + 19);
      }
      v8 = (__int128 *)((char *)v8 + 24);
    }
    while (v8 != v7);
    if (!v60)
    {
LABEL_41:
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v22 = 4294967188;
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136315394;
      v68 = "ChunkyAudioFile.cpp";
      v69 = 1024;
      v70 = 264;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Couldn't allocate memory for info chunks", buf, 0x12u);
      v22 = 4294967188;
      goto LABEL_50;
    }
  }
  v23 = (__int128 *)*((_QWORD *)this + 18);
  v24 = (char *)v7 - (char *)v23;
  if (v7 == v23)
  {
LABEL_49:
    v22 = 0;
    goto LABEL_50;
  }
  v25 = 0;
  v26 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 3);
  v27 = 1;
  while (1)
  {
    v28 = (uint64_t *)v23 + 3 * v25;
    if (*(_DWORD *)v28 == *((_DWORD *)this + 43))
      break;
    v25 = v27;
    v29 = v26 > v27++;
    if (!v29)
      goto LABEL_49;
  }
  v31 = v28[2];
  v32 = v4;
  if (*((_BYTE *)this + 138))
  {
    v33 = (4096 - *((_DWORD *)this + 46));
    v34 = v4 & 0xFFFFFFFFFFFFF000;
    if (v4 <= v33)
      v34 = 0;
    v35 = v34 + v33;
    if (v35 - (unint64_t)*((unsigned int *)this + 45) <= v4)
      v32 = v35 + 4096;
    else
      v32 = v35;
  }
  v37 = *v28;
  v36 = v28[1];
  if (v31 <= v32)
  {
    v22 = (*(uint64_t (**)(_QWORD, int64_t))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), v32 + v36);
    if ((_DWORD)v22)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_50;
      *(_DWORD *)buf = 136315394;
      v68 = "ChunkyAudioFile.cpp";
      v69 = 1024;
      v70 = 305;
      v38 = MEMORY[0x1E0C81028];
      v39 = "%25s:%-5d  SetSize Failed";
      goto LABEL_77;
    }
  }
  if (v31 != v32)
  {
    v22 = AudioFileObject::MoveData(this, v31, v32, v36);
    if ((_DWORD)v22)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_50;
      *(_DWORD *)buf = 136315394;
      v68 = "ChunkyAudioFile.cpp";
      v69 = 1024;
      v70 = 310;
      v38 = MEMORY[0x1E0C81028];
      v39 = "%25s:%-5d  MoveData Failed";
      goto LABEL_77;
    }
    *((_QWORD *)this + 9) = v32 + *((unsigned int *)this + 46);
  }
  if (v31 > v32)
  {
    v22 = (*(uint64_t (**)(_QWORD, int64_t))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), v32 + v36);
    if ((_DWORD)v22)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_50;
      *(_DWORD *)buf = 136315394;
      v68 = "ChunkyAudioFile.cpp";
      v69 = 1024;
      v70 = 316;
      v38 = MEMORY[0x1E0C81028];
      v39 = "%25s:%-5d  SetSize Failed";
      goto LABEL_77;
    }
  }
  v22 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, size_t, void *, uint64_t *))(**((_QWORD **)this + 13) + 72))(*((_QWORD *)this + 13), 0, 0, v4, v60, &v64);
  if (!(_DWORD)v22)
  {
    v59 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t))(*(_QWORD *)this + 792))(this, v64);
    if (*((_BYTE *)this + 138))
      ChunkyAudioFile::WriteFillerChunkIfNeeded((uint64_t)this, (unint64_t *)&v59, v32, &__p);
    v40 = v62;
    if ((unint64_t)v62 >= v63)
    {
      v43 = (char *)__p;
      v44 = 0xAAAAAAAAAAAAAAABLL * ((v62 - (_BYTE *)__p) >> 3);
      v45 = v44 + 1;
      if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v63 - (_QWORD)__p) >> 3) > v45)
        v45 = 0x5555555555555556 * ((uint64_t)(v63 - (_QWORD)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (_QWORD)__p) >> 3) >= 0x555555555555555)
        v46 = 0xAAAAAAAAAAAAAAALL;
      else
        v46 = v45;
      if (v46)
        v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v46);
      else
        v47 = 0;
      v42 = (char *)(v46 + 24 * v44);
      *(_QWORD *)v42 = v37;
      *((_QWORD *)v42 + 1) = v36;
      *((_QWORD *)v42 + 2) = v32;
      v41 = v42 + 24;
      if (v40 != v43)
      {
        do
        {
          v48 = *(_OWORD *)(v40 - 24);
          *((_QWORD *)v42 - 1) = *((_QWORD *)v40 - 1);
          *(_OWORD *)(v42 - 24) = v48;
          v42 -= 24;
          v40 -= 24;
        }
        while (v40 != v43);
        v40 = (char *)__p;
      }
      __p = v42;
      v63 = v46 + 24 * v47;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *(_QWORD *)v62 = v37;
      *((_QWORD *)v40 + 1) = v36;
      *((_QWORD *)v40 + 2) = v32;
      v41 = v40 + 24;
      v42 = (char *)__p;
    }
    v62 = v41;
    std::vector<ChunkInfo64>::__assign_with_size[abi:ne180100]<ChunkInfo64*,ChunkInfo64*>((_QWORD *)this + 18, v42, v41, 0xAAAAAAAAAAAAAAABLL * ((v41 - v42) >> 3));
    *(_QWORD *)&v66 = 0;
    v49 = (*(uint64_t (**)(_QWORD, __int128 *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v66);
    if (v49)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v68 = "ChunkyAudioFile.cpp";
        v69 = 1024;
        v70 = 336;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetSize failed", buf, 0x12u);
      }
      v58 = __cxa_allocate_exception(4uLL);
      *v58 = v49;
      __cxa_throw(v58, MEMORY[0x1E0DE4EF0], 0);
    }
    v50 = *((_QWORD *)this + 18);
    v51 = *((_QWORD *)this + 19);
    v52 = v51 - v50;
    if (v51 == v50)
    {
LABEL_101:
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v68 = "ChunkyAudioFile.cpp";
        v69 = 1024;
        v70 = 339;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Couldn't find container chunk", buf, 0x12u);
      }
      v56 = __cxa_allocate_exception(4uLL);
      *v56 = 1685348671;
    }
    v53 = 0;
    v54 = 0xAAAAAAAAAAAAAAABLL * (v52 >> 3);
    v55 = 1;
    while (*(_DWORD *)(v50 + 24 * v53) != *((_DWORD *)this + 42))
    {
      v53 = v55;
      v29 = v54 > v55++;
      if (!v29)
        goto LABEL_101;
    }
    if (*(_QWORD *)(v50 + 24 * v53 + 8) != (_QWORD)v66)
    {
      *((_BYTE *)this + 136) = 1;
      if (!(*(unsigned int (**)(ChunkyAudioFile *))(*(_QWORD *)this + 216))(this))
        *((_BYTE *)this + 136) = 0;
    }
    v22 = 0;
    *((_DWORD *)this + 20) = 1;
    goto LABEL_50;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v68 = "ChunkyAudioFile.cpp";
    v69 = 1024;
    v70 = 321;
    v38 = MEMORY[0x1E0C81028];
    v39 = "%25s:%-5d  FSWrite Failed";
LABEL_77:
    _os_log_impl(&dword_18EE07000, v38, OS_LOG_TYPE_ERROR, v39, buf, 0x12u);
  }
LABEL_50:
  if (v60)
    free(v60);
LABEL_52:
  if (__p)
    operator delete(__p);
  return v22;
}

void sub_18EFDDFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p)
{
  if (a11)
    free(a11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ChunkyAudioFile::SetProperty(ChunkyAudioFile *this, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;
  double v7;

  if (a2 != 1920168566)
  {
    if (a2 != 1751217000)
      return AudioFileObject::SetProperty(this, a2, a3, a4);
    if ((_DWORD)a3 == 20)
      return (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)this + 592))(this, 1751217000, 0, 20, a4);
    return 561211770;
  }
  result = 1869627199;
  if ((*((_BYTE *)this + 100) & 2) != 0)
  {
    v6 = *((_QWORD *)this + 15);
    if (!v6 || !*(_QWORD *)(v6 + 24))
    {
      if (a3 < 8)
        return 561211770;
      v7 = *(double *)a4;
      if (((*(uint64_t (**)(ChunkyAudioFile *))(*(_QWORD *)this + 808))(this) & 1) != 0
        || (uint64_t)(v7 * *((double *)this + 3)) * *((unsigned int *)this + 12) <= 0xFFFFFFFFLL)
      {
        return 0;
      }
      else
      {
        return 1868981823;
      }
    }
  }
  return result;
}

uint64_t AudioFileObject::UpdateSize(AudioFileObject *this)
{
  return 0;
}

uint64_t ChunkyAudioFile::SetLoudnessInfo(ChunkyAudioFile *this, CFPropertyListRef *a2)
{
  CFIndex Length;
  const UInt8 *BytePtr;
  uint64_t v5;
  CFDataRef theData;
  char v8;

  theData = CFPropertyListCreateXMLData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *a2);
  v8 = 1;
  Length = CFDataGetLength(theData);
  BytePtr = CFDataGetBytePtr(theData);
  v5 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, CFIndex, const UInt8 *))(*(_QWORD *)this + 768))(this, 1819243876, Length, BytePtr);
  CACFData::~CACFData((CACFData *)&theData);
  return v5;
}

void sub_18EFDE18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFData::~CACFData((CACFData *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ChunkyAudioFile::CountUserData(ChunkyAudioFile *this, int a2, unsigned int *a3)
{
  unsigned int v6;
  uint64_t result;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;

  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(_QWORD *)this + 728))(this) == a2)
  {
    v6 = 0;
    result = 1667787583;
  }
  else
  {
    v9 = (char *)*((_QWORD *)this + 18);
    v8 = (char *)*((_QWORD *)this + 19);
    v10 = v8 - v9;
    if (v8 == v9)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
      v12 = 1;
      do
      {
        v13 = *(_DWORD *)v9;
        v9 += 24;
        if (v13 == a2)
          ++v6;
      }
      while (v11 > v12++);
    }
    result = 0;
  }
  *a3 = v6;
  return result;
}

uint64_t ChunkyAudioFile::GetUserDataSize(ChunkyAudioFile *this, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(_QWORD *)this + 728))(this) != (_DWORD)a2)
    return (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)this + 736))(this, a2, a3, a4);
  if (a4)
    *a4 = 0;
  return 1667787583;
}

uint64_t ChunkyAudioFile::GetUserDataSize64(ChunkyAudioFile *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(_QWORD *)this + 728))(this) != (_DWORD)a2)
    return (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, uint64_t, unint64_t *))(*(_QWORD *)this + 744))(this, a2, a3, a4);
  if (a4)
    *a4 = 0;
  return 1667787583;
}

uint64_t ChunkyAudioFile::GetUserData(ChunkyAudioFile *this, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5)
{
  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(_QWORD *)this + 728))(this) != (_DWORD)a2)
    return (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, uint64_t, _QWORD, unsigned int *, void *))(*(_QWORD *)this + 752))(this, a2, a3, 0, a4, a5);
  if (a4)
    *a4 = 0;
  return 0;
}

uint64_t ChunkyAudioFile::GetUserDataAtOffset(ChunkyAudioFile *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void *a6)
{
  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(_QWORD *)this + 728))(this) != (_DWORD)a2)
    return (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, uint64_t, uint64_t, unsigned int *, void *))(*(_QWORD *)this + 752))(this, a2, a3, a4, a5, a6);
  if (a5)
    *a5 = 0;
  return 0;
}

uint64_t ChunkyAudioFile::SetUserData(ChunkyAudioFile *this, uint64_t a2, int a3, uint64_t a4, const void *a5)
{
  uint64_t result;

  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(_QWORD *)this + 728))(this) == (_DWORD)a2)
    return 1667787583;
  result = ChunkyAudioFile::ReplaceChunk(this, a2, a3, a4, a5);
  if ((_DWORD)result == -1)
    return (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, uint64_t, const void *))(*(_QWORD *)this + 760))(this, a2, a4, a5);
  return result;
}

uint64_t ChunkyAudioFile::RemoveUserData(ChunkyAudioFile *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  _DWORD *v14;

  v6 = 1667787583;
  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(_QWORD *)this + 728))(this) != a2)
  {
    v7 = *((_QWORD *)this + 18);
    v8 = *((_QWORD *)this + 19);
    v9 = v8 - v7;
    if (v8 != v7)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
      v13 = 1;
      do
      {
        v14 = (_DWORD *)(v7 + 24 * v10);
        if (*v14 == a2)
        {
          if (v11 == a3)
          {
            *v14 = 1179405394;
            ChunkyAudioFile::ConsolidateFillerChunks(this);
            return 0;
          }
          ++v11;
        }
        v10 = v13;
      }
      while (v12 > v13++);
    }
  }
  return v6;
}

uint64_t ChunkyAudioFile::GetUserChunkSize64(ChunkyAudioFile *this, int a2, int a3, unint64_t *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = 1667787583;
  v8 = (char *)this + 144;
  v6 = *((_QWORD *)this + 18);
  v7 = *((_QWORD *)v8 + 1);
  v9 = v7 - v6;
  if (v7 != v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    v13 = 1;
    do
    {
      if (*(_DWORD *)(v6 + 24 * v10) == a2)
      {
        if (v11 == a3)
        {
          v15 = v6 + 24 * v10;
          v16 = *(unsigned int *)(v15 + 4);
          v17 = *(_QWORD *)(v15 + 8);
          if (!__CFADD__(v16, v17))
          {
            result = 0;
            *a4 = v17 - v16;
          }
          return result;
        }
        ++v11;
      }
      v10 = v13;
    }
    while (v12 > v13++);
  }
  return result;
}

uint64_t ChunkyAudioFile::GetUserChunk(ChunkyAudioFile *this, int a2, int a3, unint64_t a4, unsigned int *a5, void *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;

  if ((a4 & 0x8000000000000000) != 0)
    return 4294967256;
  v6 = 1667787583;
  v7 = *((_QWORD *)this + 18);
  v8 = *((_QWORD *)this + 19);
  v9 = v8 - v7;
  if (v8 == v7)
    return v6;
  v11 = 0;
  v12 = 0;
  v13 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  v14 = 1;
  while (*(_DWORD *)(v7 + 24 * v11) != a2)
  {
LABEL_7:
    v11 = v14;
    v15 = v13 > v14++;
    if (!v15)
      return v6;
  }
  if (v12 != a3)
  {
    ++v12;
    goto LABEL_7;
  }
  v17 = *a5;
  if (!(_DWORD)v17)
    return 561211770;
  v18 = v7 + 24 * v11;
  v19 = *(unsigned int *)(v18 + 4);
  v20 = *(_QWORD *)(v18 + 8) - v19;
  v15 = v20 > a4;
  v21 = v20 - a4;
  if (!v15)
    return 4294967256;
  v22 = *(_QWORD *)(v18 + 16);
  if (v21 <= v17)
    v17 = v21;
  else
    v17 = v17;
  v23 = v17;
  (*(void (**)(_QWORD, _QWORD, unint64_t, unint64_t, void *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v19 + a4 + v22, v17, a6, &v23);
  v6 = 0;
  *a5 = v23;
  return v6;
}

uint64_t ChunkyAudioFile::AddUserChunk(ChunkyAudioFile *this, unsigned int a2, int a3, const void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  char *v36;
  char *v37;
  __int128 v38;
  unsigned int v39;
  char **v40;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v45 = 0;
  v44 = 0;
  v6 = (*((_DWORD *)this + 45) + a3);
  v42 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t))(*(_QWORD *)this + 792))(this, v6);
  v39 = a2;
  *(_QWORD *)&v46 = __PAIR64__(*((_DWORD *)this + 45), a2);
  *((_QWORD *)&v46 + 1) = v6;
  v7 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t))(*(_QWORD *)this + 792))(this, v6);
  v8 = *((_QWORD *)this + 18);
  v40 = (char **)((char *)this + 144);
  if (*((_QWORD *)this + 19) == v8)
    goto LABEL_19;
  v9 = v7;
  v10 = 0;
  v11 = 0;
  v12 = 0x7FFFFFFFFFFFFFFFLL;
  v13 = -1;
  do
  {
    if (*(_DWORD *)(v8 + 24 * v10) != 1179405394)
      goto LABEL_10;
    v14 = (*(uint64_t (**)(ChunkyAudioFile *, _QWORD))(*(_QWORD *)this + 792))(this, *(_QWORD *)(v8 + 24 * v10 + 8));
    v15 = v14 - v9;
    if (v14 == v9)
    {
      if (v12)
        goto LABEL_9;
    }
    else if (v15 > *((unsigned int *)this + 45) && v15 < v12)
    {
LABEL_9:
      v12 = v14 - v9;
      v13 = v11;
    }
LABEL_10:
    v8 = *((_QWORD *)this + 18);
    v10 = ++v11;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 19) - v8) >> 3) > v11);
  if (v13 != -1 && v8)
  {
    v17 = v8 + 24 * v13;
    v19 = *(_QWORD *)(v17 + 8);
    v18 = (_QWORD *)(v17 + 8);
    v20 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t))(*(_QWORD *)this + 792))(this, v19);
    if (v20 == v42)
    {
      *(_DWORD *)(v8 + 24 * v13) = v39;
      *v18 = v6;
      result = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, int *))(*(_QWORD *)this + 776))(this, v8 + 24 * v13, &v44);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, const void *, uint64_t *))(*(_QWORD *)this + 784))(this, v8 + 24 * v13, a4, &v45);
      return result;
    }
    v31 = v8 + 24 * v13;
    v47 = *(_QWORD *)(v31 + 16);
    v32 = v47;
    *v18 = v20 - v42;
    *(_QWORD *)(v31 + 16) = v32 + v42;
    result = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, int *))(*(_QWORD *)this + 776))(this, v31, &v44);
    if (!(_DWORD)result)
    {
      result = (*(uint64_t (**)(ChunkyAudioFile *, __int128 *, int *))(*(_QWORD *)this + 776))(this, &v46, &v44);
      if (!(_DWORD)result)
      {
        result = (*(uint64_t (**)(ChunkyAudioFile *, __int128 *, const void *, uint64_t *))(*(_QWORD *)this + 784))(this, &v46, a4, &v45);
        if (!(_DWORD)result)
        {
          std::vector<ChunkInfo64>::insert((uint64_t)v40, &(*v40)[24 * v13], (unint64_t)&v46);
          return 0;
        }
      }
    }
    return result;
  }
LABEL_19:
  v43 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v43);
  if (!(_DWORD)result)
  {
    v47 = v43;
    v23 = *((_QWORD *)this + 19);
    v22 = *((_QWORD *)this + 20);
    if (v23 >= v22)
    {
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)*v40) >> 3);
      v27 = v26 + 1;
      if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)*v40) >> 3);
      if (2 * v28 > v27)
        v27 = 2 * v28;
      if (v28 >= 0x555555555555555)
        v29 = 0xAAAAAAAAAAAAAAALL;
      else
        v29 = v27;
      if (v29)
        v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v29);
      else
        v30 = 0;
      v33 = v29 + 24 * v26;
      v34 = v29 + 24 * v30;
      v35 = v46;
      *(_QWORD *)(v33 + 16) = v47;
      *(_OWORD *)v33 = v35;
      v25 = v33 + 24;
      v37 = (char *)*((_QWORD *)this + 18);
      v36 = (char *)*((_QWORD *)this + 19);
      if (v36 != v37)
      {
        do
        {
          v38 = *(_OWORD *)(v36 - 24);
          *(_QWORD *)(v33 - 8) = *((_QWORD *)v36 - 1);
          *(_OWORD *)(v33 - 24) = v38;
          v33 -= 24;
          v36 -= 24;
        }
        while (v36 != v37);
        v36 = *v40;
      }
      *((_QWORD *)this + 18) = v33;
      *((_QWORD *)this + 19) = v25;
      *((_QWORD *)this + 20) = v34;
      if (v36)
        operator delete(v36);
    }
    else
    {
      v24 = v46;
      *(_QWORD *)(v23 + 16) = v47;
      *(_OWORD *)v23 = v24;
      v25 = v23 + 24;
    }
    *((_QWORD *)this + 19) = v25;
    result = (*(uint64_t (**)(ChunkyAudioFile *, __int128 *, int *))(*(_QWORD *)this + 776))(this, &v46, &v44);
    if (!(_DWORD)result)
    {
      result = (*(uint64_t (**)(ChunkyAudioFile *, __int128 *, const void *, uint64_t *))(*(_QWORD *)this
                                                                                                 + 784))(this, &v46, a4, &v45);
      if (!(_DWORD)result)
      {
        *((_DWORD *)this + 20) = 0;
        (*(void (**)(ChunkyAudioFile *))(*(_QWORD *)this + 64))(this);
        return 0;
      }
    }
  }
  return result;
}

uint64_t ChunkyAudioFile::AddUniqueChunk(ChunkyAudioFile *this, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result;

  result = ChunkyAudioFile::ReplaceChunk(this, a2, 0, a3, a4);
  if ((_DWORD)result == -1)
    return (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, uint64_t, const void *))(*(_QWORD *)this + 760))(this, a2, a3, a4);
  return result;
}

uint64_t ChunkyAudioFile::WriteChunkHeader(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  int v10;
  _DWORD v11[2];

  if (*(_DWORD *)(a2 + 4) != 8)
    return 1869627199;
  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if (v5 > 0xFFFFFFF7)
    v6 = -1;
  else
    v6 = v5 - 8;
  v7 = bswap32(*(_DWORD *)a2);
  v8 = bswap32(v6);
  if (*(_BYTE *)(a1 + 189))
    v6 = v8;
  v11[0] = v7;
  v11[1] = v6;
  v10 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _DWORD *, int *))(**(_QWORD **)(a1 + 104) + 56))(*(_QWORD *)(a1 + 104), 0, v4, 8, v11, &v10);
  *a3 = v10;
  return result;
}

uint64_t ChunkyAudioFile::WriteChunkData(_QWORD **a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v6 = *(unsigned int *)(a2 + 4);
  v7 = *(_QWORD *)(a2 + 16) + v6;
  v8 = *(_QWORD *)(a2 + 8) - v6;
  v14 = 0;
  result = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *))(*a1[13] + 72))(a1[13], 0, v7, v8, a3, &v14);
  *a4 = v14;
  if (!(_DWORD)result)
  {
    v10 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[99])(a1, v8) - v8;
    if (v10)
    {
      v13 = 0;
      v11 = *a4 + v7;
      while (1)
      {
        v12 = v10 >= 8 ? 8 : v10;
        result = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t, void *, unsigned int *))(*a1[13] + 56))(a1[13], 0, v11, v12, &ChunkyAudioFile::WriteChunkData(ChunkInfo64 *,void const*,unsigned long long *)::sZeros, &v13);
        if ((_DWORD)result)
          break;
        v11 += v13;
        v10 -= v13;
        if (!v10)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ChunkyAudioFile::ReplaceChunk(ChunkyAudioFile *this, uint64_t a2, int a3, unint64_t a4, const void *a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  int v20;
  uint64_t v21;

  if (a4 > 0xFFFFFFFE)
    return 1869627199;
  v7 = *((_QWORD *)this + 18);
  v8 = *((_QWORD *)this + 19);
  v9 = v8 - v7;
  if (v8 == v7)
    return 0xFFFFFFFFLL;
  v13 = 0;
  v14 = 0;
  v15 = *((unsigned int *)this + 45) + a4;
  v16 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  v21 = 0;
  v20 = 0;
  v17 = 1;
  while (1)
  {
    v18 = (_DWORD *)(v7 + 24 * v13);
    if (*v18 == (_DWORD)a2)
      break;
LABEL_8:
    v13 = v17;
    if (v16 <= v17++)
      return 0xFFFFFFFFLL;
  }
  if (v14 != a3)
  {
    ++v14;
    goto LABEL_8;
  }
  if (v15 == *(_QWORD *)(v7 + 24 * v13 + 8))
  {
    result = (*(uint64_t (**)(ChunkyAudioFile *, _DWORD *, int *))(*(_QWORD *)this + 776))(this, v18, &v20);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(ChunkyAudioFile *, _DWORD *, const void *, uint64_t *))(*(_QWORD *)this + 784))(this, v18, a5, &v21);
  }
  else
  {
    *v18 = 1179405394;
    ChunkyAudioFile::ConsolidateFillerChunks(this);
    return (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, unint64_t, const void *))(*(_QWORD *)this
                                                                                                 + 760))(this, a2, a4, a5);
  }
  return result;
}

void ChunkyAudioFile::ConsolidateFillerChunks(ChunkyAudioFile *this)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  _QWORD *v23;
  int v24;
  __int128 v25;
  uint64_t v26;

  v1 = *((_QWORD *)this + 18);
  v23 = (_QWORD *)((char *)this + 144);
  v2 = *((_QWORD *)this + 19) - v1;
  if (v2)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    LODWORD(v8) = 0;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
    do
    {
      v10 = (v8 + 1);
      v11 = (__int128 *)(v1 + 24 * v7);
      v12 = *((_QWORD *)v11 + 2);
      v25 = *v11;
      v26 = v12;
      if ((_DWORD)v25 == 1179405394)
      {
        if (v9 <= v10)
        {
          LODWORD(v8) = v8 + 1;
        }
        else
        {
          v13 = *((_QWORD *)&v25 + 1);
          LODWORD(v8) = v8 + 1;
          do
          {
            if (*(_DWORD *)(v1 + 24 * v10) != 1179405394)
              break;
            v8 = (v8 + 1);
            v13 += *(_QWORD *)(v1 + 24 * v10 + 8);
            *((_QWORD *)&v25 + 1) = v13;
            v10 = v8;
          }
          while (v9 > v8);
        }
        v24 = 0;
        (*(void (**)(ChunkyAudioFile *, __int128 *, int *))(*(_QWORD *)this + 776))(this, &v25, &v24);
      }
      else
      {
        LODWORD(v8) = v8 + 1;
      }
      if ((unint64_t)v5 >= v6)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) + 1;
        if (v15 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v4) >> 3) > v15)
          v15 = 0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v4) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v4) >> 3) >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v15;
        if (v16)
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v16);
        else
          v17 = 0;
        v18 = v25;
        v19 = v16 + 8 * ((v5 - v4) >> 3);
        *(_QWORD *)(v19 + 16) = v26;
        *(_OWORD *)v19 = v18;
        if (v5 == v4)
        {
          v22 = (char *)(v16 + 8 * ((v5 - v4) >> 3));
        }
        else
        {
          v20 = v16 + 8 * ((v5 - v4) >> 3);
          do
          {
            v21 = *(_OWORD *)(v5 - 24);
            v22 = (char *)(v20 - 24);
            *(_QWORD *)(v20 - 8) = *((_QWORD *)v5 - 1);
            *(_OWORD *)(v20 - 24) = v21;
            v5 -= 24;
            v20 -= 24;
          }
          while (v5 != v4);
        }
        v6 = v16 + 24 * v17;
        v5 = (char *)(v19 + 24);
        if (v4)
          operator delete(v4);
        v4 = v22;
      }
      else
      {
        v14 = v25;
        *((_QWORD *)v5 + 2) = v26;
        *(_OWORD *)v5 = v14;
        v5 += 24;
      }
      v7 = v8;
      v1 = *((_QWORD *)this + 18);
      v9 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 19) - v1) >> 3);
    }
    while (v9 > v8);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  std::vector<ChunkInfo64>::__assign_with_size[abi:ne180100]<ChunkInfo64*,ChunkInfo64*>(v23, v4, v5, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3));
  if (v4)
    operator delete(v4);
}

void sub_18EFDF0E4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<ChunkInfo64>::__assign_with_size[abi:ne180100]<ChunkInfo64*,ChunkInfo64*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_23:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[3 * v13];
    v14 = a3 - v6;
    if (v14)
      result = memmove(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= a4)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void std::vector<ChunkInfo64>::insert(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  _BYTE *v34;
  uint64_t v35;
  char *v36;

  v3 = a3;
  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v12 = *(char **)a1;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v14 = __src - v12;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((__src - v12) >> 3);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v12) >> 3);
    if (2 * v16 > v13)
      v13 = 2 * v16;
    if (v16 >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v13;
    if (v17)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v17);
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
    v22 = &v19[24 * v15];
    v23 = &v19[24 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src)
          v25 = 1;
        else
          v25 = 2 * v15;
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v25);
        v22 = &v26[24 * (v25 >> 2)];
        v23 = &v26[24 * v27];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v24 = v15 + 2;
        if (v15 >= -1)
          v24 = v15 + 1;
        v22 -= 24 * (v24 >> 1);
      }
    }
    v28 = *(_OWORD *)v3;
    *((_QWORD *)v22 + 2) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v22 = v28;
    v29 = *(char **)a1;
    v30 = v22;
    if (*(char **)a1 != __src)
    {
      v31 = __src;
      v32 = v22;
      do
      {
        v33 = *(_OWORD *)(v31 - 24);
        v30 = v32 - 24;
        *((_QWORD *)v32 - 1) = *((_QWORD *)v31 - 1);
        *(_OWORD *)(v32 - 24) = v33;
        v31 -= 24;
        v32 -= 24;
      }
      while (v31 != v29);
    }
    v34 = *(_BYTE **)(a1 + 8);
    v35 = v34 - __src;
    if (v34 != __src)
      memmove(v22 + 24, __src, v34 - __src);
    v36 = *(char **)a1;
    *(_QWORD *)a1 = v30;
    *(_QWORD *)(a1 + 8) = &v22[v35 + 24];
    *(_QWORD *)(a1 + 16) = v23;
    if (v36)
      operator delete(v36);
  }
  else if (__src == v6)
  {
    v21 = *(_OWORD *)a3;
    *((_QWORD *)__src + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__src = v21;
    *(_QWORD *)(a1 + 8) = __src + 24;
  }
  else
  {
    v8 = __src + 24;
    v9 = v6 - 24;
    v10 = *(_QWORD *)(a1 + 8);
    while (v9 < v6)
    {
      v11 = *(_OWORD *)v9;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v10 = v11;
      v10 += 24;
      v9 += 24;
    }
    *(_QWORD *)(a1 + 8) = v10;
    if (v6 != v8)
      memmove(__src + 24, __src, v6 - v8);
    if ((unint64_t)__src <= v3)
      v3 += 24 * (*(_QWORD *)(a1 + 8) > v3);
    v20 = *(_OWORD *)v3;
    *((_QWORD *)__src + 2) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)__src = v20;
  }
}

void sub_18EFDF4E8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CACFObject<void const*>::~CACFObject(uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
    {
      CFRelease(v2);
      *(_QWORD *)a1 = 0;
    }
  }
  return a1;
}

uint64_t ChunkyAudioFile::WriteFillerChunkIfNeeded(uint64_t result, unint64_t *a2, unint64_t a3, void **a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  int v25;
  _DWORD *exception;
  int v27;
  __int128 v28;
  unint64_t v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *(unsigned int *)(result + 180);
  if (*a2 + v5 < a3)
  {
    v9 = result;
    LODWORD(v28) = 1179405394;
    DWORD1(v28) = v5;
    *((_QWORD *)&v28 + 1) = a3 - v4;
    v29 = v4;
    v11 = (char *)a4[1];
    v10 = (char *)a4[2];
    if (v11 >= v10)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*a4) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)*a4) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      if (v17)
        v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v17);
      else
        v18 = 0;
      v19 = v17 + 24 * v14;
      v20 = v17 + 24 * v18;
      v21 = v28;
      *(_QWORD *)(v19 + 16) = v29;
      *(_OWORD *)v19 = v21;
      v13 = (void *)(v19 + 24);
      v23 = (char *)*a4;
      v22 = (char *)a4[1];
      if (v22 != *a4)
      {
        do
        {
          v24 = *(_OWORD *)(v22 - 24);
          *(_QWORD *)(v19 - 8) = *((_QWORD *)v22 - 1);
          *(_OWORD *)(v19 - 24) = v24;
          v19 -= 24;
          v22 -= 24;
        }
        while (v22 != v23);
        v22 = (char *)*a4;
      }
      *a4 = (void *)v19;
      a4[1] = v13;
      a4[2] = (void *)v20;
      if (v22)
        operator delete(v22);
    }
    else
    {
      v12 = v28;
      *((_QWORD *)v11 + 2) = v29;
      *(_OWORD *)v11 = v12;
      v13 = v11 + 24;
    }
    a4[1] = v13;
    v27 = 0;
    result = (*(uint64_t (**)(uint64_t, __int128 *, int *))(*(_QWORD *)v9 + 776))(v9, &v28, &v27);
    v25 = result;
    if ((_DWORD)result)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v31 = "ChunkyAudioFile.cpp";
        v32 = 1024;
        v33 = 183;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  WriteBytes failed", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(4uLL);
      *exception = v25;
      __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
    }
    *a2 = a3;
  }
  return result;
}

void ChunkyAudioFile::MoveUpTrailingChunks(ChunkyAudioFile *this, int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  _DWORD *v18;
  NSObject *v19;
  const char *v20;
  _DWORD *exception;
  int v23;
  void *v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = (a2 + 1);
  v4 = *((_QWORD *)this + 18);
  if (v4)
    v5 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 19) - v4) >> 3) > v3;
  else
    v5 = 0;
  if (v5)
  {
    do
    {
      v7 = v4 + 24 * v3;
      v10 = *(_QWORD *)(v7 + 16);
      v9 = (_QWORD *)(v7 + 16);
      v8 = v10;
      v11 = *(v9 - 1);
      if (v11 >= 0x1000000)
        v12 = 0x1000000;
      else
        v12 = *(v9 - 1);
      CADeprecated::CAAutoFree<char>::CAAutoFree(&v24, v12);
      v13 = v24;
      if (!v24)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v26 = "ChunkyAudioFile.cpp";
          v27 = 1024;
          v28 = 223;
          _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  can't allocate memory for chunk", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(4uLL);
        *exception = 2003334207;
        __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
      }
      v14 = v8 - a3;
      if (v11)
      {
        v15 = 0;
        while (1)
        {
          v16 = v12 >= v11 ? v11 : v12;
          v23 = 0;
          v17 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unint64_t, void *, int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, *v9 + v15, v16, v24, &v23);
          if (v17)
            break;
          if (v23 != (_DWORD)v16)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v26 = "ChunkyAudioFile.cpp";
              v27 = 1024;
              v28 = 233;
              _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  chunk size is wrong", buf, 0x12u);
            }
            v18 = __cxa_allocate_exception(4uLL);
            *v18 = 2003334207;
            goto LABEL_35;
          }
          v17 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unint64_t, void *, int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v15 + v14, v16, v24, &v23);
          if (v17)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v26 = "ChunkyAudioFile.cpp";
              v27 = 1024;
              v28 = 237;
              v19 = MEMORY[0x1E0C81028];
              v20 = "%25s:%-5d  MoveUpTrailingChunks write failed";
              goto LABEL_33;
            }
            goto LABEL_34;
          }
          v15 += v16;
          v11 -= v16;
          if (!v11)
          {
            v13 = v24;
            *v9 -= v14;
            if (!v13)
              goto LABEL_23;
            goto LABEL_22;
          }
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v26 = "ChunkyAudioFile.cpp";
          v27 = 1024;
          v28 = 232;
          v19 = MEMORY[0x1E0C81028];
          v20 = "%25s:%-5d  MoveUpTrailingChunks read failed";
LABEL_33:
          _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
        }
LABEL_34:
        v18 = __cxa_allocate_exception(4uLL);
        *v18 = v17;
LABEL_35:
        __cxa_throw(v18, MEMORY[0x1E0DE4EF0], 0);
      }
      *v9 -= v14;
LABEL_22:
      free(v13);
LABEL_23:
      v4 = *((_QWORD *)this + 18);
      if (!v4)
        break;
      v3 = (v3 + 1);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 19) - v4) >> 3) > v3);
  }
}

void sub_18EFDFB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12)
    free(a12);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_PanningMatrix(const AudioPanningInfo *a1, float *a2)
{
  const AudioChannelLayout *mOutputChannelMap;
  uint64_t result;
  int8x8_t v6;
  uint64_t v7;
  int mChannelLayoutTag;
  UInt32 mCoordinateFlags;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double sinval;
  double v18;
  __double2 v19;
  __double2 v20;
  double v21;
  double v22;
  double v23;
  float v24;
  float v25;
  float v26;
  uint64_t n;
  float v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  float v32;
  float v33;
  float v34;
  float i;
  BOOL v37;
  float j;
  AudioChannelDescription *v40;
  double v41;
  AudioChannelDescription *v42;
  double k;
  double m;
  uint64_t v45;
  double v46;
  double v47;
  float v48;
  double v49;
  double v50;
  float v51;
  float v52;
  float v53;
  uint64_t mNumberChannelDescriptions;
  int v55;
  float *v56;
  float *v57;
  double v58;
  double v59;
  __double2 v60;
  __double2 v61;
  float v62;
  __double2 v63;
  float v64;
  double v65;
  double v66;
  unsigned int v67;
  AudioChannelLayout __dst[40];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  mOutputChannelMap = a1->mOutputChannelMap;
  v67 = 0;
  result = AudioFormatProperty_NumberOfChannelsForLayout(mOutputChannelMap, &v67);
  if ((_DWORD)result)
    return result;
  v7 = v67;
  if (v67 > 0x40)
    return 1718449215;
  mChannelLayoutTag = mOutputChannelMap->mChannelLayoutTag;
  if (mOutputChannelMap->mChannelLayoutTag == 0x10000)
  {
    AudioFormatProperty_ChannelLayoutForBitmap(mOutputChannelMap->mChannelBitmap, __dst, v6);
    mChannelLayoutTag = __dst[0].mChannelLayoutTag;
  }
  else if (mChannelLayoutTag)
  {
    result = AudioFormatProperty_ChannelLayoutForTag(mOutputChannelMap->mChannelLayoutTag, __dst);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    memcpy(__dst, mOutputChannelMap, 20 * mOutputChannelMap->mNumberChannelDescriptions + 12);
    SanitizeAudioChannelLayout((uint64_t)__dst, 1);
  }
  if ((_DWORD)v7)
    bzero(a2, 4 * v7);
  if (a1->mPanningMode == kPanningMode_VectorBasedPanning)
  {
    if ((a1->mCoordinateFlags & 2) != 0)
    {
      v28 = a1->mCoordinates[0];
      if (v28 >= -360.0 && v28 <= 360.0 && __dst[0].mNumberChannelDescriptions)
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 360.0;
        v33 = 360.0;
        result = 1718449215;
        do
        {
          if ((__dst[0].mChannelDescriptions[v31].mChannelFlags & 2) != 0)
          {
            v34 = __dst[0].mChannelDescriptions[v31].mCoordinates[0];
            if (v34 < -360.0 || v34 > 360.0)
              return 1718449215;
            for (i = v28 - v34; i >= 360.0; i = i + -360.0)
              ;
            while (i < 0.0)
              i = i + 360.0;
            v37 = i < v33 || v31 == 0;
            if (v37)
            {
              v29 = v31;
              result = 0;
            }
            else
            {
              result = result;
            }
            if (v37)
              v33 = i;
            for (j = v34 - v28; j >= 360.0; j = j + -360.0)
              ;
            while (j < 0.0)
              j = j + 360.0;
            if (j < v32 || v31 == 0)
            {
              v30 = v31;
              v32 = j;
            }
          }
          ++v31;
        }
        while (v31 < __dst[0].mNumberChannelDescriptions);
        if ((_DWORD)result)
          return result;
        v40 = &__dst[0].mChannelDescriptions[v29];
        v41 = v40->mCoordinates[0];
        v42 = &__dst[0].mChannelDescriptions[v30];
        for (k = v42->mCoordinates[0] - v41; k > 360.0; k = k + -360.0)
          ;
        while (k < 0.0)
          k = k + 360.0;
        for (m = v28 - v41; m > 360.0; m = m + -360.0)
          ;
        v45 = v29;
        for (n = v30; m < 0.0; m = m + 360.0)
          ;
        v46 = (a1->mGainScale + a1->mGainScale) / ((float)(a1->mCoordinates[2] * a1->mCoordinates[2]) + 1.0);
        v47 = v40->mCoordinates[2] * v40->mCoordinates[2] * v46;
        v23 = v42->mCoordinates[2] * v42->mCoordinates[2] * v46;
        if (fabs(k) >= 0.00100000005)
        {
          v63 = __sincos_stret(m / k * 1.57079633);
          v64 = v63.__sinval * v23;
          a2[n] = v64;
          v23 = v63.__cosval * v47;
          n = v45;
        }
        else
        {
          v48 = v47;
          a2[v29] = v48;
        }
LABEL_76:
        v53 = v23;
        a2[n] = v53;
        if (!(_DWORD)v7)
          return 0;
        goto LABEL_77;
      }
    }
    return 1718449215;
  }
  if (a1->mPanningMode != kPanningMode_SoundField)
    return 1718449215;
  mCoordinateFlags = a1->mCoordinateFlags;
  if ((mCoordinateFlags & 2) == 0)
  {
    if ((mCoordinateFlags & 1) != 0)
    {
      v10 = a1->mCoordinates[1];
      v11 = a1->mCoordinates[0];
      v12 = a1->mCoordinates[2];
      v13 = v11 * v11 + v10 * v10 + v12 * v12;
      v14 = 1.0 / sqrt(v13);
      v15 = v14 * v10;
      v16 = v14 * v11;
      sinval = v14 * v12;
      goto LABEL_19;
    }
    return 1718449215;
  }
  v18 = a1->mCoordinates[1] * 0.0174532925;
  v13 = a1->mCoordinates[2] * a1->mCoordinates[2];
  v19 = __sincos_stret((float)-a1->mCoordinates[0] * 0.0174532925);
  v20 = __sincos_stret(v18);
  sinval = v20.__sinval;
  v15 = v19.__cosval * v20.__cosval;
  v16 = v19.__sinval * v20.__cosval;
LABEL_19:
  v21 = (a1->mGainScale + a1->mGainScale) / (v13 + 1.0);
  v65 = v15 * v21;
  v66 = v21 * 0.707106781;
  v22 = v16 * v21;
  v23 = sinval * v21;
  if (mChannelLayoutTag > 6815745)
  {
    if (mChannelLayoutTag == 6815746)
    {
      v51 = v66;
      *a2 = v51;
      n = 1;
      v23 = v16 * v21;
      goto LABEL_76;
    }
    if (mChannelLayoutTag != 6881282)
    {
      if (mChannelLayoutTag == 7012356)
      {
        v24 = v66;
        v25 = v65;
        *a2 = v24;
        a2[1] = v25;
        v26 = v22;
        a2[2] = v26;
        n = 3;
        goto LABEL_76;
      }
      goto LABEL_83;
    }
    v49 = v22 * 0.707106781;
    v50 = v15 * v21;
    goto LABEL_75;
  }
  if (mChannelLayoutTag == 6619138 || mChannelLayoutTag == 6684674)
  {
    v49 = v22 * 0.5;
    v50 = v21 * 0.707106781;
LABEL_75:
    v52 = v49 + v50 * 0.707106781;
    *a2 = v52;
    v23 = -(v49 - v50 * 0.707106781);
    n = 1;
    goto LABEL_76;
  }
LABEL_83:
  mNumberChannelDescriptions = __dst[0].mNumberChannelDescriptions;
  result = 1718449215;
  if (__dst[0].mNumberChannelDescriptions)
  {
    v55 = 0;
    v56 = &__dst[0].mChannelDescriptions[0].mCoordinates[2];
    v57 = a2;
    do
    {
      if ((*(_BYTE *)(v56 - 3) & 2) != 0)
      {
        v58 = *(v56 - 1) * 0.0174532925;
        v59 = *v56;
        v60 = __sincos_stret((float)-*(v56 - 2) * 0.0174532925);
        v61 = __sincos_stret(v58);
        v62 = ((v22 * v60.__sinval * v61.__cosval + v65 * v60.__cosval * v61.__cosval + v23 * v61.__sinval) * 0.5
             + v66 * 0.707106781)
            / (v59
             * v59);
        *v57 = v62;
        ++v55;
      }
      ++v57;
      v56 += 5;
      --mNumberChannelDescriptions;
    }
    while (mNumberChannelDescriptions);
    result = v55 >= 3 ? 0 : 1718449215;
    if (v55 >= 3 && (_DWORD)v7)
    {
LABEL_77:
      result = 0;
      do
      {
        if (*a2 < 0.0000001)
          *a2 = 0.0;
        ++a2;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t SanitizeAudioChannelLayout(uint64_t result, int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  float *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(result + 8);
  if (v2 >= 2)
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    v6 = (float *)(result + 28);
    while ((*(_BYTE *)(v6 - 3) & 1) != 0)
    {
      if (*(v6 - 2) != 0.0 || *(v6 - 1) != 0.0 || *v6 != 0.0)
      {
        if (!v5)
          break;
LABEL_10:
        v2 = v2;
        v7 = (_DWORD *)(result + 16);
        do
        {
          *v7 = 0;
          v7 += 5;
          --v2;
        }
        while (v2);
        break;
      }
      v5 = ++v4 >= v2;
      v6 += 5;
      if (v2 == v4)
        goto LABEL_10;
    }
    if (a2)
    {
      v8 = 0;
      v9 = result + 12;
      do
      {
        result = SetDefaultChannelPosition(v9);
        ++v8;
        v9 += 20;
      }
      while (v8 < *(unsigned int *)(v3 + 8));
    }
  }
  return result;
}

uint64_t SetMatrixCoefficient(uint64_t result, AudioChannelLayout *a2, int a3, int a4, float *a5, float a6)
{
  uint64_t v6;
  uint64_t i;
  uint64_t mNumberChannelDescriptions;
  int v9;
  AudioChannelDescription *mChannelDescriptions;
  AudioChannelLabel mChannelLabel;

  v6 = *(unsigned int *)(result + 8);
  if ((_DWORD)v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_DWORD *)(result + 20 * i + 12) == a3)
      {
        mNumberChannelDescriptions = a2->mNumberChannelDescriptions;
        if ((_DWORD)mNumberChannelDescriptions)
        {
          v9 = mNumberChannelDescriptions * i;
          mChannelDescriptions = a2->mChannelDescriptions;
          do
          {
            mChannelLabel = mChannelDescriptions->mChannelLabel;
            ++mChannelDescriptions;
            if (mChannelLabel == a4)
              a5[v9] = a6;
            ++v9;
            --mNumberChannelDescriptions;
          }
          while (mNumberChannelDescriptions);
        }
      }
    }
  }
  return result;
}

_QWORD *std::vector<int>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_18EFE02D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  int v16;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_DWORD **)a1;
    v8 = ((uint64_t)v5 - *(_QWORD *)a1) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v9;
    if (v12)
    {
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v12);
      v7 = *(_DWORD **)a1;
      v5 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = (_DWORD *)(v12 + 4 * v8);
    v15 = v12 + 4 * v13;
    *v14 = *a2;
    v6 = v14 + 1;
    while (v5 != v7)
    {
      v16 = *--v5;
      *--v14 = v16;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v15;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  *(_QWORD *)(a1 + 8) = v6;
}

void logSubsystem(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      logSubsystem(void)::category = (uint64_t)os_log_create("com.apple.coreaudio.utility", "AudioFormatPanningMixing");
    }
  }
}

uint64_t transformSurroundsToSideDirect(uint64_t result)
{
  uint64_t v1;
  float *v2;
  int v3;
  int v4;
  float v5;
  BOOL v6;

  v1 = *(unsigned int *)(result + 8);
  if ((_DWORD)v1)
  {
    v2 = (float *)(result + 20);
    do
    {
      v3 = *((_DWORD *)v2 - 2);
      v4 = 10;
      v5 = -110.0;
      if (v3 != 5 && v3 != 33)
      {
        v5 = *v2;
        v6 = v3 == 34 || v3 == 6;
        v4 = v6 ? 11 : *((_DWORD *)v2 - 2);
        if (v6)
          v5 = 110.0;
      }
      *((_DWORD *)v2 - 2) = v4;
      if ((*(_BYTE *)(v2 - 1) & 2) != 0)
        *v2 = v5;
      v2 += 5;
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t transformSurroundsToRear(uint64_t result)
{
  uint64_t v1;
  float *v2;
  int v3;
  float v5;
  BOOL v6;

  v1 = *(unsigned int *)(result + 8);
  if ((_DWORD)v1)
  {
    v2 = (float *)(result + 20);
    do
    {
      v3 = *((_DWORD *)v2 - 2);
      if (v3 == 5 || v3 == 10)
      {
        v3 = 33;
        v5 = -150.0;
      }
      else
      {
        v5 = *v2;
        v6 = v3 == 11 || v3 == 6;
        if (v6)
          v3 = 34;
        if (v6)
          v5 = 150.0;
      }
      *((_DWORD *)v2 - 2) = v3;
      if ((*(_BYTE *)(v2 - 1) & 2) != 0)
        *v2 = v5;
      v2 += 5;
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t transformSurroundsToSide(uint64_t result)
{
  uint64_t v1;
  float *v2;
  int v3;
  int v4;
  float v5;
  BOOL v6;

  v1 = *(unsigned int *)(result + 8);
  if ((_DWORD)v1)
  {
    v2 = (float *)(result + 20);
    do
    {
      v3 = *((_DWORD *)v2 - 2);
      v4 = 5;
      v5 = -110.0;
      if (v3 != 10 && v3 != 33)
      {
        v5 = *v2;
        v6 = v3 == 34 || v3 == 11;
        v4 = v6 ? 6 : *((_DWORD *)v2 - 2);
        if (v6)
          v5 = 110.0;
      }
      *((_DWORD *)v2 - 2) = v4;
      if ((*(_BYTE *)(v2 - 1) & 2) != 0)
        *v2 = v5;
      v2 += 5;
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t AudioFormatProperty_ChannelMap(const AudioChannelLayout *const *a1, const AudioChannelLayout *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  AudioChannelLayout *v11;
  AudioChannelLayoutTag mChannelLayoutTag;
  int v14;
  unsigned int v15;
  unsigned int v16;
  size_t v17;
  size_t v18;
  int8x8_t v19;
  int8x8_t v20;
  AudioChannelLayout *v21;
  uint64_t v22;
  uint64_t mNumberChannelDescriptions;
  AudioChannelDescription *mChannelDescriptions;
  int mChannelLabel;
  uint64_t v26;
  AudioChannelDescription *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  AudioChannelLabel v37;
  AudioChannelDescription *v38;
  AudioChannelLabel v39;
  AudioChannelLabel v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  void *__dst;
  AudioChannelLayout *v47;

  __dst = 0;
  v47 = 0;
  v45 = 0;
  v8 = AudioFormatProperty_NumberOfChannelsForLayout((const AudioChannelLayout *)a1, &v45);
  if ((_DWORD)v8)
  {
    v9 = v8;
    goto LABEL_7;
  }
  v44 = 0;
  v10 = AudioFormatProperty_NumberOfChannelsForLayout(a2, &v44);
  if ((_DWORD)v10)
  {
    v9 = v10;
    v11 = 0;
    goto LABEL_5;
  }
  mChannelLayoutTag = a2->mChannelLayoutTag;
  v14 = *(_DWORD *)a1;
  v15 = v44;
  v16 = *a3;
  if (v44 < *a3)
    v16 = v44;
  *a3 = v16;
  v43 = v45;
  v17 = 20 * v45 + 12;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v47, v17, 0);
  v18 = 20 * v15 + 12;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes(&__dst, v18, 0);
  if (mChannelLayoutTag == 0x10000)
  {
    v11 = (AudioChannelLayout *)__dst;
    AudioFormatProperty_ChannelLayoutForBitmap(a2->mChannelBitmap, (AudioChannelLayout *)__dst, v19);
  }
  else if (mChannelLayoutTag)
  {
    v11 = (AudioChannelLayout *)__dst;
    v9 = AudioFormatProperty_ChannelLayoutForTag(a2->mChannelLayoutTag, (AudioChannelLayout *)__dst);
    if ((_DWORD)v9)
      goto LABEL_5;
  }
  else
  {
    v11 = (AudioChannelLayout *)__dst;
    memcpy(__dst, a2, v18);
  }
  if (v14 == 0x10000)
  {
    v21 = v47;
    AudioFormatProperty_ChannelLayoutForBitmap(*((_DWORD *)a1 + 1), v47, v20);
  }
  else if (v14)
  {
    v21 = v47;
    v22 = AudioFormatProperty_ChannelLayoutForTag(*(_DWORD *)a1, v47);
    if ((_DWORD)v22)
    {
      v9 = v22;
      goto LABEL_5;
    }
  }
  else
  {
    v21 = v47;
    memcpy(v47, a1, v17);
  }
  mNumberChannelDescriptions = v21->mNumberChannelDescriptions;
  if ((_DWORD)mNumberChannelDescriptions)
  {
    mChannelDescriptions = v21->mChannelDescriptions;
    do
    {
      mChannelLabel = mChannelDescriptions->mChannelLabel;
      if ((int)mChannelDescriptions->mChannelLabel > 300)
      {
        if (mChannelLabel == 301)
        {
LABEL_30:
          mChannelLabel = 1;
        }
        else if (mChannelLabel == 302)
        {
LABEL_29:
          mChannelLabel = 2;
        }
      }
      else
      {
        switch(mChannelLabel)
        {
          case 206:
          case 208:
            goto LABEL_30;
          case 207:
          case 209:
            goto LABEL_29;
          default:
            if (mChannelLabel == 42)
              mChannelLabel = 3;
            break;
        }
      }
      mChannelDescriptions->mChannelLabel = mChannelLabel;
      ++mChannelDescriptions;
      --mNumberChannelDescriptions;
    }
    while (mNumberChannelDescriptions);
  }
  v26 = v11->mNumberChannelDescriptions;
  if ((_DWORD)v26)
  {
    v27 = v11->mChannelDescriptions;
    do
    {
      v28 = v27->mChannelLabel;
      if ((int)v27->mChannelLabel > 300)
      {
        if (v28 == 301)
        {
LABEL_41:
          v28 = 1;
        }
        else if (v28 == 302)
        {
LABEL_40:
          v28 = 2;
        }
      }
      else
      {
        switch(v28)
        {
          case 206:
          case 208:
            goto LABEL_41;
          case 207:
          case 209:
            goto LABEL_40;
          default:
            if (v28 == 42)
              v28 = 3;
            break;
        }
      }
      v27->mChannelLabel = v28;
      ++v27;
      --v26;
    }
    while (v26);
  }
  octagonalCompatibility(v21, v11);
  singleSurroundPairCompatibility(v21, v11);
  if (*a3)
  {
    v29 = 0;
    do
    {
      a4[v29++] = -1;
      v30 = *a3;
    }
    while (v29 < v30);
    if (v14 == 6553601)
    {
      if (*a3)
      {
        v31 = 0;
        v32 = 12;
        do
        {
          if (*(AudioChannelLayoutTag *)((char *)&v11->mChannelLayoutTag + v32) - 1 <= 0xFFFFFFFD)
          {
            a4[v31] = 0;
            v30 = *a3;
          }
          ++v31;
          v32 += 20;
        }
        while (v31 < v30);
      }
      goto LABEL_75;
    }
  }
  else
  {
    if (v14 == 6553601)
      goto LABEL_75;
    v30 = 0;
  }
  if (v14 == 6619138 && mChannelLayoutTag == 6553601)
  {
    v9 = 0;
    *a4 = 0;
    goto LABEL_5;
  }
  if (!(_DWORD)v43)
    goto LABEL_74;
  v33 = 0;
  v34 = 1;
  v35 = v30;
  do
  {
    if (v35)
    {
      v36 = 0;
      v37 = v21->mChannelDescriptions[v33].mChannelLabel;
      v38 = v11->mChannelDescriptions;
      do
      {
        v40 = v38->mChannelLabel;
        ++v38;
        v39 = v40;
        v41 = v40 + 1;
        v42 = v40 == v37 && v41 >= 2;
        if (v42 && v39 != 100)
        {
          v34 = 0;
          a4[v36] = v33;
          v30 = *a3;
        }
        ++v36;
        v35 = v30;
      }
      while (v36 < v30);
    }
    ++v33;
  }
  while (v33 != v43);
  if ((v34 & 1) != 0)
  {
LABEL_74:
    v9 = 1718449215;
    goto LABEL_5;
  }
LABEL_75:
  v9 = 0;
LABEL_5:
  if (v11)
    free(v11);
LABEL_7:
  if (v47)
    free(v47);
  return v9;
}

void sub_18EFE0934(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE05CCLL);
}

void sub_18EFE0948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  if (a11)
    free(a11);
  if (a12)
    free(a12);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_BalanceFade(const AudioBalanceFade *a1, unsigned int *a2, float *a3)
{
  const AudioChannelLayout *mChannelLayout;
  uint64_t result;
  int8x8_t v8;
  uint64_t v9;
  uint64_t v10;
  signed int mChannelLayoutTag;
  uint64_t mNumberChannelDescriptions;
  AudioChannelDescription *mChannelDescriptions;
  int mChannelLabel;
  AudioChannelDescription *v15;
  float v16;
  int v18;
  float mLeftRightBalance;
  float mBackFrontFade;
  AudioBalanceFadeType mType;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  __double2 v30;
  __double2 v31;
  AudioChannelDescription *v32;
  float v33;
  float v34;
  AudioChannelDescription v35;
  unsigned int v36;
  AudioChannelLayout __dst[40];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  mChannelLayout = a1->mChannelLayout;
  v36 = 0;
  result = AudioFormatProperty_NumberOfChannelsForLayout(mChannelLayout, &v36);
  if (!(_DWORD)result)
  {
    v9 = v36;
    if (v36 > 0x40)
      return 1718449215;
    if (v36 >= *a2)
      v10 = *a2;
    else
      v10 = v36;
    *a2 = v10;
    mChannelLayoutTag = mChannelLayout->mChannelLayoutTag;
    if (mChannelLayout->mChannelLayoutTag == 0x10000)
    {
      AudioFormatProperty_ChannelLayoutForBitmap(mChannelLayout->mChannelBitmap, __dst, v8);
    }
    else if (mChannelLayoutTag)
    {
      result = AudioFormatProperty_ChannelLayoutForTag(mChannelLayoutTag, __dst);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      memcpy(__dst, mChannelLayout, 20 * v9 + 12);
    }
    SanitizeAudioChannelLayout((uint64_t)__dst, 0);
    mNumberChannelDescriptions = __dst[0].mNumberChannelDescriptions;
    if (__dst[0].mNumberChannelDescriptions)
    {
      mChannelDescriptions = __dst[0].mChannelDescriptions;
      do
      {
        mChannelLabel = mChannelDescriptions->mChannelLabel;
        if ((int)mChannelDescriptions->mChannelLabel > 300)
        {
          if (mChannelLabel == 301)
          {
LABEL_19:
            mChannelLabel = 1;
          }
          else if (mChannelLabel == 302)
          {
LABEL_18:
            mChannelLabel = 2;
          }
        }
        else
        {
          switch(mChannelLabel)
          {
            case 206:
            case 208:
              goto LABEL_19;
            case 207:
            case 209:
              goto LABEL_18;
            default:
              if (mChannelLabel == 42)
                mChannelLabel = 3;
              break;
          }
        }
        mChannelDescriptions->mChannelLabel = mChannelLabel;
        ++mChannelDescriptions;
        --mNumberChannelDescriptions;
      }
      while (mNumberChannelDescriptions);
    }
    if ((_DWORD)v9)
    {
      v15 = __dst[0].mChannelDescriptions;
      while (1)
      {
        v35 = *v15;
        SetDefaultChannelPosition((uint64_t)&v35);
        if (v35.mChannelFlags)
        {
          v16 = fmodf(v35.mCoordinates[0], 360.0);
          if (v16 < 0.0)
            v16 = v16 + 360.0;
          if (v16 > 100.0 && v16 <= 260.0)
            break;
        }
        ++v15;
        if (!--v9)
          goto LABEL_34;
      }
      v18 = 1;
    }
    else
    {
LABEL_34:
      v18 = 0;
    }
    mLeftRightBalance = a1->mLeftRightBalance;
    mBackFrontFade = a1->mBackFrontFade;
    mType = a1->mType;
    if (mType == kAudioBalanceFadeType_EqualPower)
    {
      if (mLeftRightBalance <= -1.0)
      {
        v25 = 0.0;
        v24 = 1.4142;
      }
      else if (mLeftRightBalance >= 1.0)
      {
        v24 = 0.0;
        v25 = 1.4142;
      }
      else
      {
        v30 = __sincos_stret(mLeftRightBalance * 0.785398163 + 0.785398163);
        v25 = v30.__sinval * 1.41421356;
        v24 = v30.__cosval * 1.41421356;
      }
      v27 = 1.0;
      if (v18)
      {
        if (mBackFrontFade <= -1.0)
        {
          v27 = 0.0;
          v29 = 1.4142;
        }
        else if (mBackFrontFade >= 1.0)
        {
          v29 = 0.0;
          v27 = 1.4142;
        }
        else
        {
          v31 = __sincos_stret(mBackFrontFade * 0.785398163 + 0.785398163);
          v27 = v31.__sinval * 1.41421356;
          v29 = v31.__cosval * 1.41421356;
        }
      }
      else
      {
        v29 = 1.0;
      }
    }
    else
    {
      if (mType)
        return 4294967246;
      v22 = mLeftRightBalance + 1.0;
      v23 = 1.0 - mLeftRightBalance;
      if (mLeftRightBalance >= 1.0)
        v23 = 0.0;
      if (mLeftRightBalance >= 0.0)
        v22 = 1.0;
      if (mLeftRightBalance <= 0.0)
        v24 = 1.0;
      else
        v24 = v23;
      if (mLeftRightBalance <= -1.0)
        v25 = 0.0;
      else
        v25 = v22;
      v26 = mBackFrontFade + 1.0;
      if (mBackFrontFade >= 0.0)
        v26 = 1.0;
      if (mBackFrontFade <= -1.0)
        v26 = 0.0;
      if (v18)
        v27 = v26;
      else
        v27 = 1.0;
      v28 = 1.0 - mBackFrontFade;
      if (mBackFrontFade >= 1.0)
        v28 = 0.0;
      if ((v18 & (mBackFrontFade > 0.0)) != 0)
        v29 = v28;
      else
        v29 = 1.0;
    }
    if ((_DWORD)v10)
    {
      v32 = __dst[0].mChannelDescriptions;
      do
      {
        v35 = *v32;
        SetDefaultChannelPosition((uint64_t)&v35);
        if (v35.mChannelFlags)
        {
          v33 = fmodf(v35.mCoordinates[0], 360.0);
          if (v33 < 0.0)
            v33 = v33 + 360.0;
          if (v33 > 10.0)
          {
            if (v33 <= 80.0)
            {
              *a3 = v25 * v27;
              goto LABEL_95;
            }
            if (v33 <= 100.0)
            {
              *a3 = v25;
              goto LABEL_95;
            }
            if (v33 <= 170.0)
            {
              *a3 = v25 * v29;
              goto LABEL_95;
            }
            if (v33 <= 190.0)
            {
              *a3 = v29;
              goto LABEL_95;
            }
            if (v33 <= 260.0)
            {
              v34 = v24 * v29;
LABEL_94:
              *a3 = v34;
              goto LABEL_95;
            }
            if (v33 <= 280.0)
            {
              *a3 = v24;
              goto LABEL_95;
            }
            if (v33 <= 350.0)
            {
              v34 = v24 * v27;
              goto LABEL_94;
            }
          }
          *a3 = v27;
        }
        else
        {
          *a3 = 1.0;
        }
LABEL_95:
        ++a3;
        ++v32;
        --v10;
      }
      while (v10);
    }
    return 0;
  }
  return result;
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "inSecondsPerWindow is out of range (<= 0.0)");
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
  return result;
}

uint64_t DSPGraph::Metrics::Metrics(uint64_t this, double a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  std::runtime_error *exception;

  v2 = 0;
  v3 = (uint64_t)(a2 * 24000000.0);
  if (v3 < 0)
    v3 = -v3;
  *(_QWORD *)this = v3;
  *(_BYTE *)(this + 192) = 0;
  *(_DWORD *)(this + 196) = 0;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(_OWORD *)(this + 120) = 0u;
  *(_OWORD *)(this + 136) = 0u;
  do
  {
    *(_DWORD *)(this + v2 + 256) = 0;
    v4 = (_OWORD *)(this + v2 + 264);
    *v4 = 0uLL;
    v4[1] = 0uLL;
    v4[2] = 0uLL;
    v4[3] = 0uLL;
    v4[4] = 0uLL;
    v4[5] = 0uLL;
    v2 += 128;
    v4[6] = 0uLL;
  }
  while (v2 != 256);
  if (a2 <= 0.0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception);
  }
  return this;
}

void sub_18EFE0F0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int8x16_t DSPGraph::Metrics::start(DSPGraph::Metrics *this)
{
  int8x16_t result;

  if (!*((_QWORD *)this + 1))
    *((_QWORD *)this + 1) = mach_absolute_time();
  thread_selfcounts();
  *((_QWORD *)this + 2) = 0;
  result = vextq_s8((int8x16_t)0, (int8x16_t)0, 8uLL);
  *(int8x16_t *)((char *)this + 24) = result;
  return result;
}

uint64_t DSPGraph::Metrics::stop(DSPGraph::Metrics *this, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  char *v28;
  unsigned int v29;
  char *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;

  result = mach_absolute_time();
  v5 = result;
  if (*((_QWORD *)this + 3))
  {
    result = thread_selfcounts();
    v6 = v5 - *((_QWORD *)this + 1);
    v7 = -*((_QWORD *)this + 2);
    v8 = -*((_QWORD *)this + 3);
    v9 = -*((_QWORD *)this + 4);
    v10 = (double)v7 / (double)v6 * 100.0;
    v11 = *((_QWORD *)this + 6) - *((_QWORD *)this + 2);
    v12 = *((_QWORD *)this + 7) - *((_QWORD *)this + 3);
    *((_QWORD *)this + 6) = v11;
    *((_QWORD *)this + 7) = v12;
    v13 = *((_QWORD *)this + 8) + v9;
    v14 = *((_QWORD *)this + 9) + v6;
    *((_QWORD *)this + 8) = v13;
    *((_QWORD *)this + 9) = v14;
    v15 = *((double *)this + 10);
    if (v10 <= v15)
    {
      v16 = *((_QWORD *)this + 13);
    }
    else
    {
      *((double *)this + 10) = v10;
      v16 = *((_QWORD *)this + 13);
      *((_QWORD *)this + 11) = v16;
      v15 = (double)v7 / (double)v6 * 100.0;
    }
    v17 = *((_QWORD *)this + 12) + a2;
    v18 = *((_QWORD *)this + 14);
    v19 = *((_QWORD *)this + 15) + v7;
    v20 = *((_QWORD *)this + 16) + v8;
    v21 = *((_QWORD *)this + 17) + v9;
    v22 = *((_QWORD *)this + 18) + v6;
    v23 = *((_QWORD *)this + 5) + 1;
    *((_QWORD *)this + 5) = v23;
    *((_QWORD *)this + 16) = v20;
    *((_QWORD *)this + 17) = v21;
    *((_QWORD *)this + 18) = v22;
    v24 = v18 + a2;
    *((_QWORD *)this + 14) = v24;
    *((_QWORD *)this + 15) = v19;
    v25 = v16 + 1;
    *((_QWORD *)this + 12) = v17;
    *((_QWORD *)this + 13) = v25;
    if (v14 > *(_QWORD *)this || v22 < *(_QWORD *)this)
    {
      v46 = *(_QWORD *)this;
      v47 = v5;
      v26 = *((_QWORD *)this + 11);
      v48 = 0;
      v27 = (unsigned int *)((char *)this + 196);
      v28 = (char *)this + 256;
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 + 1, v27));
      v30 = &v28[128 * (unint64_t)(v29 & 1)];
      v31 = 2 * v29;
      atomic_store(2 * v29, (unsigned int *)v30);
      *((_QWORD *)v30 + 1) = v23;
      *((_QWORD *)v30 + 2) = v17;
      *((_QWORD *)v30 + 3) = v11;
      *((_QWORD *)v30 + 4) = v12;
      *((_QWORD *)v30 + 5) = v13;
      *((_QWORD *)v30 + 6) = v14;
      *((double *)v30 + 7) = v15;
      *((_QWORD *)v30 + 8) = v26;
      *((_QWORD *)v30 + 9) = v25;
      *((_QWORD *)v30 + 10) = v24;
      *((_QWORD *)v30 + 11) = v19;
      *((_QWORD *)v30 + 12) = v20;
      *((_QWORD *)v30 + 13) = v21;
      *((_QWORD *)v30 + 14) = v22;
      v32 = (2 * v29) | 1;
      __dmb(0xBu);
      do
      {
        v33 = __ldaxr((unsigned int *)v30);
        if (v33 != v31)
        {
          v44 = v20;
          v45 = v19;
          v42 = v13;
          v43 = v21;
          v40 = v25;
          v41 = v24;
          v39 = v26;
          while (1)
          {
            __clrex();
            result = caulk::concurrent::details::spinloop::spin((uint64_t)&v48);
            do
              v34 = __ldaxr(v27);
            while (__stlxr(v34 + 1, v27));
            v35 = &v28[128 * (unint64_t)(v34 & 1)];
            v36 = 2 * v34;
            atomic_store(2 * v34, (unsigned int *)v35);
            *((_QWORD *)v35 + 1) = v23;
            *((_QWORD *)v35 + 2) = v17;
            *((_QWORD *)v35 + 3) = v11;
            *((_QWORD *)v35 + 4) = v12;
            *((_QWORD *)v35 + 5) = v42;
            *((_QWORD *)v35 + 6) = v14;
            *((double *)v35 + 7) = v15;
            *((_QWORD *)v35 + 8) = v39;
            *((_QWORD *)v35 + 9) = v40;
            *((_QWORD *)v35 + 10) = v41;
            *((_QWORD *)v35 + 11) = v45;
            *((_QWORD *)v35 + 12) = v44;
            *((_QWORD *)v35 + 13) = v43;
            *((_QWORD *)v35 + 14) = v22;
            v37 = (2 * v34) | 1;
            __dmb(0xBu);
            while (1)
            {
              v38 = __ldaxr((unsigned int *)v35);
              if (v38 != v36)
                break;
              if (!__stlxr(v37, (unsigned int *)v35))
                goto LABEL_19;
            }
          }
        }
      }
      while (__stlxr(v32, (unsigned int *)v30));
LABEL_19:
      atomic_store(1u, (unsigned __int8 *)this + 192);
      v5 = v47;
      if (v14 > v46)
      {
        *(_OWORD *)((char *)this + 72) = 0u;
        *(_OWORD *)((char *)this + 88) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *(_OWORD *)((char *)this + 56) = 0u;
      }
    }
  }
  *((_QWORD *)this + 1) = v5;
  return result;
}

_OWORD *DSPGraph::Metrics::getStatistics(_OWORD *this, uint64_t a2)
{
  _OWORD *v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned __int8 v16;
  int v17;

  v2 = this;
  v3 = atomic_load((unsigned __int8 *)(a2 + 192));
  if ((v3 & 1) != 0)
  {
    v17 = 0;
    v4 = atomic_load((unsigned __int8 *)(a2 + 192));
    if ((v4 & 1) != 0)
    {
      v6 = a2 + 256;
      do
      {
        v7 = atomic_load((unsigned int *)(a2 + 196));
        v8 = v7 - 1;
        v9 = 1;
        while (1)
        {
          v10 = v9;
          v11 = v6 + ((unint64_t)(v8 & 1) << 7);
          v12 = atomic_load((unsigned int *)v11);
          if ((v12 & 1) != 0)
            break;
          v9 = 0;
          --v8;
          if ((v10 & 1) == 0)
            goto LABEL_12;
        }
        v13 = *(_OWORD *)(v11 + 56);
        v14 = *(_OWORD *)(v11 + 88);
        v2[4] = *(_OWORD *)(v11 + 72);
        v2[5] = v14;
        v2[6] = *(_OWORD *)(v11 + 104);
        v15 = *(_OWORD *)(v11 + 24);
        *v2 = *(_OWORD *)(v11 + 8);
        v2[1] = v15;
        v2[2] = *(_OWORD *)(v11 + 40);
        v2[3] = v13;
        __dmb(9u);
        if (v12 == *(_DWORD *)v11)
          return this;
        this = (_OWORD *)caulk::concurrent::details::spinloop::spin((uint64_t)&v17);
LABEL_12:
        v16 = atomic_load((unsigned __int8 *)(a2 + 192));
      }
      while ((v16 & 1) != 0);
    }
    _os_assert_log();
    this = (_OWORD *)_os_crash();
    __break(1u);
  }
  else
  {
    this[5] = 0u;
    this[6] = 0u;
    this[3] = 0u;
    this[4] = 0u;
    this[1] = 0u;
    this[2] = 0u;
    *this = 0u;
  }
  return this;
}

void sub_18EFE15B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,id location,char a27)
{
  void *v27;
  void *v28;
  id *v29;

  _Block_object_dispose(&a27, 8);

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_18EFE1798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18EFE18B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AUAudioUnit_XH;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18EFE1938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EFE19C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CADeprecated::TSingleton<AUExtensionInstanceMap>::instance()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&CADeprecated::TSingleton<AUExtensionInstanceMap>::sOnce);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&CADeprecated::TSingleton<AUExtensionInstanceMap>::sOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AUExtensionInstanceMap>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<AUExtensionInstanceMap>::sInstance;
}

uint64_t ___ZN22AUExtensionInstanceMap6removeEPU19objcproto9NSCopying11objc_object_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "removeObjectForKey:", *(_QWORD *)(a1 + 32));
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AUExtensionInstanceMap>::instance(void)::{lambda(void)#1} &&>>()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  *v0 = dispatch_queue_create("AUExtensionInstanceMap", 0);
  objc_msgSend(MEMORY[0x1E0CB3748], "strongToWeakObjectsMapTable");
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)v0[1];
  v0[1] = v1;

  __dmb(0xBu);
  CADeprecated::TSingleton<AUExtensionInstanceMap>::sInstance = (uint64_t)v0;
}

void sub_18EFE1B8C(_Unwind_Exception *a1)
{
  id *v1;

  MEMORY[0x193FFE460](v1, 0x80C40803F642BLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN22AUExtensionInstanceMap3addEPU19objcproto9NSCopying11objc_objectP14AUAudioUnit_XH_block_invoke(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[6] + 8), "setObject:forKey:", a1[4], a1[5]);
}

void sub_18EFE1C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

Class ___ZL39getAUAudioUnitRemoteViewControllerClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreAudioKitLibrary()");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AUAudioUnit_Internal.h"), 352, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("AUAudioUnitRemoteViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAUAudioUnitRemoteViewControllerClass()_block_invoke");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("AUAudioUnit_Internal.h"), 354, CFSTR("Unable to find class %s"), "AUAudioUnitRemoteViewController");

LABEL_8:
    __break(1u);
  }
  getAUAudioUnitRemoteViewControllerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18EFE1DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18EFE1F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_18EFE2004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void ___ZN22AUExtensionInstanceMap29setExtensionInterruptionBlockEP11NSExtension_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6[2];
  _QWORD v7[4];
  id v8[2];
  id location;

  v2 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "requestInterruptionBlock");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    v4 = MEMORY[0x1E0C809B0];
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___ZN22AUExtensionInstanceMap29setExtensionInterruptionBlockEP11NSExtension_block_invoke_2;
    v7[3] = &unk_1E2921200;
    v8[1] = v2;
    objc_copyWeak(v8, &location);
    objc_msgSend(*(id *)(a1 + 32), "setRequestInterruptionBlock:", v7);
    v5[0] = v4;
    v5[1] = 3221225472;
    v5[2] = ___ZN22AUExtensionInstanceMap29setExtensionInterruptionBlockEP11NSExtension_block_invoke_39;
    v5[3] = &unk_1E2921228;
    v6[1] = v2;
    objc_copyWeak(v6, &location);
    objc_msgSend(*(id *)(a1 + 32), "setRequestCancellationBlock:", v5);
    objc_destroyWeak(v6);
    objc_destroyWeak(v8);
    objc_destroyWeak(&location);
  }
}

void sub_18EFE2140(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void ___ZN22AUExtensionInstanceMap29setExtensionInterruptionBlockEP11NSExtension_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  id WeakRetained;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  id v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "objectForKey:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (kAUExtensionScope)
  {
    v5 = *(id *)kAUExtensionScope;
    if (!v5)
      goto LABEL_8;
  }
  else
  {
    v5 = (id)MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  v7 = v5;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v9 = 136315906;
    v10 = "AUAudioUnit_XH.mm";
    v11 = 1024;
    v12 = 69;
    v13 = 2048;
    v14 = WeakRetained;
    v15 = 2048;
    v16 = v4;
    _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Extension request interrupted! (AU likely crashed. %p %p)", (uint8_t *)&v9, 0x26u);

  }
LABEL_8:
  objc_msgSend(v4, "didInvalidate");

}

void sub_18EFE22AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN22AUExtensionInstanceMap29setExtensionInterruptionBlockEP11NSExtension_block_invoke_39(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  id WeakRetained;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  id v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = *(_QWORD *)(a1 + 40);
  if (objc_msgSend(a3, "code") == -66754)
  {
    objc_msgSend(*(id *)(v6 + 8), "objectForKey:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (kAUExtensionScope)
    {
      v8 = *(id *)kAUExtensionScope;
      if (!v8)
      {
LABEL_9:
        objc_msgSend(v7, "didInvalidate");

        goto LABEL_10;
      }
    }
    else
    {
      v8 = (id)MEMORY[0x1E0C81028];
      v9 = MEMORY[0x1E0C81028];
    }
    v10 = v8;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      v12 = 136315906;
      v13 = "AUAudioUnit_XH.mm";
      v14 = 1024;
      v15 = 81;
      v16 = 2048;
      v17 = WeakRetained;
      v18 = 2048;
      v19 = v7;
      _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Extension request cancelled! (AU timed out. %p %p)", (uint8_t *)&v12, 0x26u);

    }
    goto LABEL_9;
  }
LABEL_10:

}

void sub_18EFE242C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EFE25F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id *v23;

  objc_destroyWeak(v23);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18EFE26B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_DWORD *APAC::ImmersiveRendererData_V2_Manager::getACLPointer(_DWORD *a1)
{
  if (*a1 != 2)
    __assert_rtn("getACLPointer", "APACImmersiveRendererDataV2.cpp", 13, "inIRD.mVersion == kIRDVersion");
  if (a1[2] >= a1[3])
    return a1 + 6;
  else
    return 0;
}

uint64_t APAC::ImmersiveRendererData_V2_Manager::getNumRendererDescriptions(_DWORD *a1)
{
  if (*a1 != 2)
    __assert_rtn("getNumRendererDescriptions", "APACImmersiveRendererDataV2.cpp", 30, "inIRD.mVersion == kIRDVersion");
  return a1[4];
}

char *APAC::ImmersiveRendererData_V2_Manager::getImmersiveRendererDescriptionPointer(_DWORD *a1)
{
  _DWORD *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  if (*a1 != 2)
    __assert_rtn("getImmersiveRendererDescriptionPointer", "APACImmersiveRendererDataV2.cpp", 38, "inIRD.mVersion == kIRDVersion");
  v2 = a1[3];
  v1 = a1 + 3;
  v3 = v2 + 12;
  v4 = v3 + 20 * v1[1] + v1[2];
  v5 = (char *)v1 + v3;
  if (v4 == *(v1 - 1))
    return v5;
  else
    return 0;
}

uint64_t APAC::ImmersiveRendererData_V2_Manager::getACLByteSize(_DWORD *a1)
{
  if (*a1 != 2)
    __assert_rtn("getACLByteSize", "APACImmersiveRendererDataV2.cpp", 50, "inIRD.mVersion == kIRDVersion");
  return a1[3];
}

BOOL APAC::ImmersiveRendererData_V2_Manager::hasMetadataConfig(_DWORD *a1)
{
  if (*a1 != 2)
    __assert_rtn("hasMetadataConfig", "APACImmersiveRendererDataV2.cpp", 57, "inIRD.mVersion == kIRDVersion");
  return a1[5] != 0;
}

uint64_t APAC::ImmersiveRendererData_V2_Manager::getMetadataConfig(_DWORD *a1, uint64_t a2)
{
  char v3;

  if (*a1 != 2)
    __assert_rtn("getMetadataConfig", "APACImmersiveRendererDataV2.cpp", 65, "inIRD.mVersion == kIRDVersion");
  APAC::MetadataBitStreamParser::parseConfig((uint64_t)&v3, (unsigned __int8 *)&a1[5 * a1[4] + 6] + a1[3], a1[5], a2);
  return 0;
}

uint64_t APAC::ImmersiveRendererData_V2_Manager::pack(std::vector<char> *a1, int a2, _DWORD *a3, const void *a4, unsigned int a5, uint64_t a6)
{
  std::vector<char>::pointer begin;
  std::vector<char>::pointer v12;
  std::vector<char>::pointer end;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  std::vector<char>::pointer v22;
  std::vector<char>::pointer v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned __int16 *v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unsigned __int16 *v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  unsigned __int16 *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  unsigned __int16 *v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned __int16 *v92;
  uint64_t v93;
  int v94;
  std::vector<char>::pointer v95;
  std::vector<char>::pointer v96;
  unint64_t v97;
  std::vector<char>::size_type v98;
  unint64_t v99;
  unsigned int v100;
  int v101;
  int v102;
  _DWORD *v103;
  std::vector<char>::pointer v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  int v110;
  unsigned int v111;
  char v112;

  a1->__end_ = a1->__begin_;
  std::vector<unsigned char>::__append(a1, 0x1CuLL);
  begin = a1->__begin_;
  *(_DWORD *)begin = 2;
  *(_QWORD *)(begin + 12) = 0;
  *(_QWORD *)(begin + 4) = 0;
  *(_QWORD *)(begin + 17) = 0;
  v12 = a1->__begin_;
  end = a1->__end_;
  v14 = end - a1->__begin_;
  if (v14 > 0x17)
  {
    if (v14 != 24)
    {
      end = v12 + 24;
      a1->__end_ = v12 + 24;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a1, 24 - v14);
    v12 = a1->__begin_;
    end = a1->__end_;
  }
  v15 = a3[2];
  if (v15 >= 0x1000)
    v16 = 4096;
  else
    v16 = a3[2];
  v17 = 20 * v16;
  if (v15)
    v18 = v17;
  else
    v18 = 20;
  v19 = v18 + 12;
  v20 = v18 + 12 + end - v12;
  if (end - v12 >= v20)
  {
    if (end - v12 > v20)
    {
      end += v18 + 12;
      a1->__end_ = &v12[v20];
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a1, v18 + 12);
    end = a1->__end_;
  }
  memcpy(&end[-v18 - 12], a3, v18 + 12);
  v21 = 20 * a5;
  v22 = a1->__begin_;
  v23 = a1->__end_;
  v24 = v23 - a1->__begin_;
  v25 = v24 + v21;
  if (v24 >= v24 + v21)
  {
    if (v24 > v24 + v21)
    {
      v23 = &v22[v25];
      a1->__end_ = &v22[v25];
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a1, 20 * a5);
    v23 = a1->__end_;
  }
  memcpy(&v23[-v21], a4, 20 * a5);
  if (*(_BYTE *)(a6 + 16) && (v26 = *(unsigned __int16 *)(a6 + 18), *(_WORD *)(a6 + 18)))
  {
    v27 = 0;
    v28 = (unsigned __int16 *)(a6 + 20);
    do
    {
      v29 = *v28++;
      if (v29 == 9)
        v30 = 14 * *(unsigned __int8 *)(a6 + 4529);
      else
        v30 = 0;
      v27 += v30;
      --v26;
    }
    while (v26);
    v31 = v27 + 4832;
  }
  else
  {
    v31 = 4832;
  }
  v110 = v18;
  v111 = a5;
  v32 = *(unsigned __int16 *)(a6 + 8);
  if (*(_WORD *)(a6 + 8))
  {
    v33 = 0;
    v34 = *(_QWORD *)(a6 + 4808);
    do
    {
      v35 = *(_QWORD *)(a6 + 4784) + 48 * v33;
      v36 = *(unsigned __int8 *)(v35 + 2) | *(unsigned __int8 *)(v35 + 3) | *(unsigned __int8 *)(v35 + 20);
      v37 = 2 * *(unsigned __int16 *)(v35 + 18);
      if (v36)
        v37 = 0;
      v38 = v34 + 1248 * v33;
      v39 = *(unsigned __int16 *)(v38 + 2);
      if (*(_WORD *)(v38 + 2))
      {
        v40 = 0;
        v41 = 0;
        v42 = v34 + 1248 * v33;
        v43 = v42 + 4;
        v44 = *(unsigned __int8 *)(v42 + 1200);
        v45 = 4
            * (*(unsigned __int8 *)(v42 + 1206) + 1)
            * (*(unsigned __int8 *)(v42 + 1206) + 1)
            * *(unsigned __int16 *)(v42 + 1208);
        v46 = *(unsigned __int8 *)(v42 + 792);
        v47 = *(unsigned __int16 *)(v42 + 968);
        v48 = *(unsigned __int16 **)(v42 + 976);
        v49 = *(unsigned __int8 *)(v42 + 808);
        LODWORD(v42) = *(_DWORD *)(v42 + 812);
        v50 = v44 == 2;
        v51 = 16 * v42;
        v52 = 12 * v42;
        if (v50)
          v53 = v45;
        else
          v53 = 0;
        v54 = v51 + 16;
        do
        {
          v55 = *(unsigned __int16 *)(v43 + 2 * v40);
          if (v55 == 22)
          {
            v41 += v53;
          }
          else if (v55 == 11)
          {
            if (v46 == 4)
            {
              v58 = 0;
              if ((_DWORD)v47)
              {
                v59 = v48;
                v60 = v47;
                do
                {
                  v61 = *v59++;
                  v58 += v61;
                  --v60;
                }
                while (v60);
              }
              v41 += 2 * v47 + 4 * v58;
            }
            else
            {
              v56 = v54 + v41;
              v57 = v41 + v52;
              if (v49 != 1)
                v57 = v41;
              if (v49 != 2)
                v56 = v57;
              if (v46 == 3)
                v41 = v56;
            }
          }
          ++v40;
        }
        while (v40 != v39);
      }
      else
      {
        v41 = 0;
      }
      v31 += v37 + v41 + 1296;
      ++v33;
    }
    while (v33 != v32);
  }
  v62 = v31 + 4832;
  if (*(_BYTE *)(a6 + 1))
  {
    v63 = *(unsigned __int16 *)(a6 + 18);
    if (*(_WORD *)(a6 + 18))
    {
      v64 = 0;
      v65 = (unsigned __int16 *)(a6 + 20);
      do
      {
        v66 = *v65++;
        if (v66 == 9)
          v67 = 14 * *(unsigned __int8 *)(a6 + 4529);
        else
          v67 = 0;
        v64 += v67;
        --v63;
      }
      while (v63);
    }
    else
    {
      v64 = 0;
    }
    v62 += v64;
    if (*(_WORD *)(a6 + 8))
    {
      v68 = 0;
      v69 = *(_QWORD *)(a6 + 4808);
      do
      {
        v70 = *(_QWORD *)(a6 + 4784) + 48 * v68;
        v71 = *(unsigned __int8 *)(v70 + 2) | *(unsigned __int8 *)(v70 + 3) | *(unsigned __int8 *)(v70 + 20);
        v72 = 2 * *(unsigned __int16 *)(v70 + 18);
        if (v71)
          v72 = 0;
        v73 = v69 + 1248 * v68;
        v74 = *(unsigned __int16 *)(v73 + 2);
        if (*(_WORD *)(v73 + 2))
        {
          v75 = 0;
          v76 = 0;
          v77 = v69 + 1248 * v68;
          v78 = v77 + 4;
          v79 = *(unsigned __int8 *)(v77 + 1200);
          v80 = 4
              * (*(unsigned __int8 *)(v77 + 1206) + 1)
              * (*(unsigned __int8 *)(v77 + 1206) + 1)
              * *(unsigned __int16 *)(v77 + 1208);
          v81 = *(unsigned __int8 *)(v77 + 792);
          v82 = *(unsigned __int16 *)(v77 + 968);
          v83 = *(unsigned __int16 **)(v77 + 976);
          v84 = *(unsigned __int8 *)(v77 + 808);
          v85 = *(_DWORD *)(v77 + 812);
          v86 = 12 * v85;
          if (v79 != 2)
            v80 = 0;
          v87 = 16 * v85 + 16;
          do
          {
            v88 = *(unsigned __int16 *)(v78 + 2 * v75);
            if (v88 == 22)
            {
              v76 += v80;
            }
            else if (v88 == 11)
            {
              if (v81 == 4)
              {
                v91 = 0;
                if ((_DWORD)v82)
                {
                  v92 = v83;
                  v93 = v82;
                  do
                  {
                    v94 = *v92++;
                    v91 += v94;
                    --v93;
                  }
                  while (v93);
                }
                v76 += 2 * v82 + 4 * v91;
              }
              else
              {
                v89 = v87 + v76;
                v90 = v76 + v86;
                if (v84 != 1)
                  v90 = v76;
                if (v84 != 2)
                  v89 = v90;
                if (v81 == 3)
                  v76 = v89;
              }
            }
            ++v75;
          }
          while (v75 != v74);
        }
        else
        {
          v76 = 0;
        }
        v62 += v72 + v76 + 40248;
        ++v68;
      }
      while (v68 != v32);
    }
  }
  v95 = a1->__begin_;
  v96 = a1->__end_;
  v97 = v96 - a1->__begin_;
  v98 = v62;
  v99 = v97 + v62;
  if (v97 >= v99)
  {
    v100 = v111;
    v101 = v110;
    if (v97 > v99)
    {
      v96 = &v95[v99];
      a1->__end_ = &v95[v99];
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a1, v98);
    v96 = a1->__end_;
    v100 = v111;
    v101 = v110;
  }
  v102 = APAC::MetadataBitStreamPacker::packConfig((uint64_t)&v112, (uint64_t)&v96[-v98], v98, a6);
  v103 = a1->__begin_;
  v104 = a1->__end_;
  v103[4] = v100;
  v103[5] = v102;
  v105 = (v21 + v101 + v102 + 24);
  v103[1] = a2;
  v103[2] = v105;
  v103[3] = v19;
  v106 = v105 + 12;
  v107 = v104 - (std::vector<char>::pointer)v103;
  if (v106 <= v107)
  {
    if (v106 < v107)
      a1->__end_ = (char *)v103 + v106;
  }
  else
  {
    std::vector<unsigned char>::__append(a1, v106 - v107);
  }
  return 0;
}

void AudioFileFormatRegistry::~AudioFileFormatRegistry(AudioFileFormatRegistry *this)
{
  AudioFileFormatRegistry::~AudioFileFormatRegistry(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2908B20;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

BOOL AudioFileFormatRegistry::AddComponentFormats(AudioFileFormatRegistry *this)
{
  int v2;
  _BOOL8 v3;

  std::mutex::lock(&AudioFileMutex(void)::global);
  v2 = *((unsigned __int8 *)this + 56);
  if (!*((_BYTE *)this + 56))
    *((_BYTE *)this + 56) = 1;
  v3 = v2 == 0;
  std::mutex::unlock(&AudioFileMutex(void)::global);
  return v3;
}

uint64_t AudioFileFormatRegistry::GetFormatForData(AudioFileFormatRegistry *this, uint64_t a2, const void *a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t j;

  v3 = 0;
  if ((_DWORD)a2 && a3)
  {
    for (i = *((_QWORD *)this + 1); i != *((_QWORD *)this + 2); i += 16)
    {
      v3 = *(_QWORD *)(i + 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)v3 + 24))(v3, a2, a3) == 1)
        return v3;
    }
    AudioFileFormatRegistry::AddComponentFormats(this);
    for (j = *((_QWORD *)this + 1); j != *((_QWORD *)this + 2); j += 16)
    {
      v3 = *(_QWORD *)(j + 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)v3 + 24))(v3, a2, a3) == 1)
        return v3;
    }
    return 0;
  }
  return v3;
}

uint64_t AudioFileFormatRegistry::GetReadFormatsSize(AudioFileFormatRegistry *this)
{
  uint64_t v2;
  uint64_t v3;

  AudioFileFormatRegistry::AddComponentFormats(this);
  v2 = *((_QWORD *)this + 4);
  if (v2 == *((_QWORD *)this + 5))
    return 0;
  LODWORD(v3) = 0;
  do
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 40))(*(_QWORD *)(v2 + 8)))
      v3 = (v3 + 4);
    else
      v3 = v3;
    v2 += 16;
  }
  while (v2 != *((_QWORD *)this + 5));
  return v3;
}

uint64_t AudioFileFormatRegistry::GetWriteFormatsSize(AudioFileFormatRegistry *this)
{
  uint64_t v2;
  uint64_t v3;

  AudioFileFormatRegistry::AddComponentFormats(this);
  v2 = *((_QWORD *)this + 4);
  if (v2 == *((_QWORD *)this + 5))
    return 0;
  LODWORD(v3) = 0;
  do
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 48))(*(_QWORD *)(v2 + 8)))
      v3 = (v3 + 4);
    else
      v3 = v3;
    v2 += 16;
  }
  while (v2 != *((_QWORD *)this + 5));
  return v3;
}

uint64_t AudioFileFormatRegistry::GetExtensionsForType(AudioFileFormatRegistry *this, unsigned int a2, unsigned int *a3, _QWORD *a4)
{
  uint64_t v6;

  if (*a3 != 8)
    return 561211770;
  v6 = AudioFileFormatRegistry::Get(this, a2);
  if (v6)
  {
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 64))(v6, a4);
    if (*a4)
      return 0;
    else
      return 1886681407;
  }
  else
  {
    *a3 = 0;
    return 1954115647;
  }
}

uint64_t AudioFileFormatRegistry::GetUTIsForType(AudioFileFormatRegistry *this, unsigned int a2, unsigned int *a3, _QWORD *a4)
{
  uint64_t v6;

  if (*a3 != 8)
    return 561211770;
  v6 = AudioFileFormatRegistry::Get(this, a2);
  if (v6)
  {
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 72))(v6, a4);
    if (*a4)
      return 0;
    else
      return 1886681407;
  }
  else
  {
    *a3 = 0;
    return 1954115647;
  }
}

uint64_t AudioFileFormatRegistry::GetMIMETypesForType(AudioFileFormatRegistry *this, unsigned int a2, unsigned int *a3, _QWORD *a4)
{
  uint64_t v6;

  if (*a3 != 8)
    return 561211770;
  v6 = AudioFileFormatRegistry::Get(this, a2);
  if (v6)
  {
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 80))(v6, a4);
    if (*a4)
      return 0;
    else
      return 1886681407;
  }
  else
  {
    *a3 = 0;
    return 1954115647;
  }
}

void AudioFileFormatRegistry::GetTypesForExtension(AudioFileFormatRegistry *this, const __CFString *a2, unsigned int *a3, _DWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v12;
  CFArrayRef theArray;
  CFRange v14;

  if (a4)
    v8 = *a3 >> 2;
  else
    v8 = 0;
  AudioFileFormatRegistry::AddComponentFormats(this);
  v9 = *((_QWORD *)this + 4);
  if (v9 == *((_QWORD *)this + 5))
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      theArray = 0;
      (*(void (**)(_QWORD, CFArrayRef *))(**(_QWORD **)(v9 + 8) + 64))(*(_QWORD *)(v9 + 8), &theArray);
      if (theArray)
      {
        v14.length = CFArrayGetCount(theArray);
        v14.location = 0;
        if (CFArrayGetFirstIndexOfValue(theArray, v14, a2) != -1)
        {
          if (a4 && v10 < v8)
            a4[v10] = *(_DWORD *)v9;
          ++v10;
        }
        CFRelease(theArray);
      }
      v9 += 16;
    }
    while (v9 != *((_QWORD *)this + 5));
  }
  if (v8 >= v10 || a4 == 0)
    v12 = v10;
  else
    v12 = v8;
  *a3 = 4 * v12;
}

void AudioFileFormatRegistry::GetTypesForUTI(AudioFileFormatRegistry *this, const __CFString *a2, unsigned int *a3, _DWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v12;
  CFArrayRef theArray;
  CFRange v14;

  if (a4)
    v8 = *a3 >> 2;
  else
    v8 = 0;
  AudioFileFormatRegistry::AddComponentFormats(this);
  v9 = *((_QWORD *)this + 4);
  if (v9 == *((_QWORD *)this + 5))
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      theArray = 0;
      (*(void (**)(_QWORD, CFArrayRef *))(**(_QWORD **)(v9 + 8) + 72))(*(_QWORD *)(v9 + 8), &theArray);
      if (theArray)
      {
        v14.length = CFArrayGetCount(theArray);
        v14.location = 0;
        if (CFArrayGetFirstIndexOfValue(theArray, v14, a2) != -1)
        {
          if (a4 && v10 < v8)
            a4[v10] = *(_DWORD *)v9;
          ++v10;
        }
        CFRelease(theArray);
      }
      v9 += 16;
    }
    while (v9 != *((_QWORD *)this + 5));
  }
  if (v8 >= v10 || a4 == 0)
    v12 = v10;
  else
    v12 = v8;
  *a3 = 4 * v12;
}

void AudioFileFormatRegistry::GetTypesForMIMEType(AudioFileFormatRegistry *this, const __CFString *a2, unsigned int *a3, _DWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v12;
  CFArrayRef theArray;
  CFRange v14;

  if (a4)
    v8 = *a3 >> 2;
  else
    v8 = 0;
  AudioFileFormatRegistry::AddComponentFormats(this);
  v9 = *((_QWORD *)this + 4);
  if (v9 == *((_QWORD *)this + 5))
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      theArray = 0;
      (*(void (**)(_QWORD, CFArrayRef *))(**(_QWORD **)(v9 + 8) + 80))(*(_QWORD *)(v9 + 8), &theArray);
      if (theArray)
      {
        v14.length = CFArrayGetCount(theArray);
        v14.location = 0;
        if (CFArrayGetFirstIndexOfValue(theArray, v14, a2) != -1)
        {
          if (a4 && v10 < v8)
            a4[v10] = *(_DWORD *)v9;
          ++v10;
        }
        CFRelease(theArray);
      }
      v9 += 16;
    }
    while (v9 != *((_QWORD *)this + 5));
  }
  if (v8 >= v10 || a4 == 0)
    v12 = v10;
  else
    v12 = v8;
  *a3 = 4 * v12;
}

void AudioFileFormatRegistry::GetTypesForHFSCode(AudioFileFormatRegistry *this, int a2, unsigned int *a3, _DWORD *a4)
{
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int *v13;
  int *v15;
  unint64_t v16;
  int *v17;
  int v18;
  unsigned int v20;
  std::bad_alloc *exception;
  std::bad_alloc *v22;
  unsigned int v24;

  if (a4)
    v7 = *a3 >> 2;
  else
    v7 = 0;
  AudioFileFormatRegistry::AddComponentFormats(this);
  v8 = *((_QWORD *)this + 4);
  if (v8 != *((_QWORD *)this + 5))
  {
    v9 = 0;
    while (1)
    {
      v24 = 0x7FFFFFFF;
      v10 = (*(uint64_t (**)(_QWORD, unsigned int *, _QWORD))(**(_QWORD **)(v8 + 8) + 112))(*(_QWORD *)(v8 + 8), &v24, 0);
      v11 = v24;
      if (v10)
        v12 = 1;
      else
        v12 = v24 == 0;
      if (v12)
        goto LABEL_26;
      v13 = (int *)malloc_type_malloc(v24 & 0xFFFFFFFC, 0x2C8E6D5CuLL);
      if (v11 >= 4 && v13 == 0)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v22 = std::bad_alloc::bad_alloc(exception);
      }
      v15 = v13;
      bzero(v13, v11 & 0xFFFFFFFC);
      (*(void (**)(_QWORD, unsigned int *, int *))(**(_QWORD **)(v8 + 8) + 112))(*(_QWORD *)(v8 + 8), &v24, v15);
      if (v24 >= 4)
      {
        v16 = (unint64_t)v24 >> 2;
        v17 = v15;
        while (1)
        {
          v18 = *v17++;
          if (v18 == a2)
            break;
          if (!--v16)
            goto LABEL_25;
        }
        if (a4 && v9 < v7)
          a4[v9] = *(_DWORD *)v8;
        ++v9;
      }
      else if (!v15)
      {
        goto LABEL_26;
      }
LABEL_25:
      free(v15);
LABEL_26:
      v8 += 16;
      if (v8 == *((_QWORD *)this + 5))
        goto LABEL_29;
    }
  }
  v9 = 0;
LABEL_29:
  if (v7 >= v9 || a4 == 0)
    v20 = v9;
  else
    v20 = v7;
  *a3 = 4 * v20;
}

void sub_18EFE36FC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFileFormatRegistry::GetNameForType(AudioFileFormatRegistry *this, unsigned int a2, unsigned int *a3, void *a4)
{
  uint64_t v6;

  if (*a3 != 8)
    return 561211770;
  v6 = AudioFileFormatRegistry::Get(this, a2);
  if (v6)
  {
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v6 + 88))(v6, a4);
    return 0;
  }
  else
  {
    *a3 = 0;
    return 1954115647;
  }
}

uint64_t AudioFileFormatRegistry::GetAllUTIs(AudioFileFormatRegistry *this, unsigned int *a2, CFArrayRef *a3)
{
  const __CFAllocator *v5;
  __CFSet *Mutable;
  uint64_t i;
  int Count;
  CFIndex v9;
  uint64_t v10;
  const void *ValueAtIndex;
  uint64_t result;
  int v13;
  CFIndex v14;
  CFArrayRef v15;
  CFArrayRef theArray;
  void **values;

  if (*a2 != 8)
    return 561211770;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  AudioFileFormatRegistry::AddComponentFormats(this);
  for (i = *((_QWORD *)this + 4); i != *((_QWORD *)this + 5); i += 16)
  {
    theArray = 0;
    (*(void (**)(_QWORD, CFArrayRef *))(**(_QWORD **)(i + 8) + 72))(*(_QWORD *)(i + 8), &theArray);
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v9 = 0;
        v10 = Count;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9);
          CFSetAddValue(Mutable, ValueAtIndex);
          ++v9;
        }
        while (v10 != v9);
      }
      CFRelease(theArray);
    }
  }
  v13 = CFSetGetCount(Mutable);
  LODWORD(theArray) = 0;
  v14 = v13;
  values = (void **)operator new[]();
  CFSetApplyFunction(Mutable, (CFSetApplierFunction)addToArray, &theArray);
  CFRelease(Mutable);
  v15 = CFArrayCreate(v5, (const void **)values, v14, MEMORY[0x1E0C9B378]);
  if (values)
    MEMORY[0x193FFE43C](values, 0x60C8044C4A2DFLL);
  result = 0;
  *a3 = v15;
  return result;
}

uint64_t addToArray(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[1];
  v3 = *(unsigned int *)a2;
  *(_DWORD *)a2 = v3 + 1;
  *(_QWORD *)(v2 + 8 * v3) = result;
  return result;
}

uint64_t AudioFileFormatRegistry::GetAllMIMETypes(AudioFileFormatRegistry *this, unsigned int *a2, CFArrayRef *a3)
{
  const __CFAllocator *v5;
  __CFSet *Mutable;
  uint64_t i;
  int Count;
  CFIndex v9;
  uint64_t v10;
  const void *ValueAtIndex;
  uint64_t result;
  int v13;
  CFIndex v14;
  CFArrayRef v15;
  CFArrayRef theArray;
  void **values;

  if (*a2 != 8)
    return 561211770;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  AudioFileFormatRegistry::AddComponentFormats(this);
  for (i = *((_QWORD *)this + 4); i != *((_QWORD *)this + 5); i += 16)
  {
    theArray = 0;
    (*(void (**)(_QWORD, CFArrayRef *))(**(_QWORD **)(i + 8) + 80))(*(_QWORD *)(i + 8), &theArray);
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v9 = 0;
        v10 = Count;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9);
          CFSetAddValue(Mutable, ValueAtIndex);
          ++v9;
        }
        while (v10 != v9);
      }
      CFRelease(theArray);
    }
  }
  v13 = CFSetGetCount(Mutable);
  LODWORD(theArray) = 0;
  v14 = v13;
  values = (void **)operator new[]();
  CFSetApplyFunction(Mutable, (CFSetApplierFunction)addToArray, &theArray);
  CFRelease(Mutable);
  v15 = CFArrayCreate(v5, (const void **)values, v14, MEMORY[0x1E0C9B378]);
  if (values)
    MEMORY[0x193FFE43C](values, 0x60C8044C4A2DFLL);
  result = 0;
  *a3 = v15;
  return result;
}

uint64_t AudioFileFormatRegistry::GetAllExtensions(AudioFileFormatRegistry *this, unsigned int *a2, CFArrayRef *a3)
{
  const __CFAllocator *v5;
  __CFSet *Mutable;
  uint64_t i;
  int Count;
  CFIndex v9;
  uint64_t v10;
  const void *ValueAtIndex;
  uint64_t result;
  int v13;
  CFIndex v14;
  CFArrayRef v15;
  CFArrayRef theArray;
  void **values;

  if (*a2 != 8)
    return 561211770;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  AudioFileFormatRegistry::AddComponentFormats(this);
  for (i = *((_QWORD *)this + 4); i != *((_QWORD *)this + 5); i += 16)
  {
    theArray = 0;
    (*(void (**)(_QWORD, CFArrayRef *))(**(_QWORD **)(i + 8) + 64))(*(_QWORD *)(i + 8), &theArray);
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v9 = 0;
        v10 = Count;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9);
          CFSetAddValue(Mutable, ValueAtIndex);
          ++v9;
        }
        while (v10 != v9);
      }
      CFRelease(theArray);
    }
  }
  v13 = CFSetGetCount(Mutable);
  LODWORD(theArray) = 0;
  v14 = v13;
  values = (void **)operator new[]();
  CFSetApplyFunction(Mutable, (CFSetApplierFunction)addToArray, &theArray);
  CFRelease(Mutable);
  v15 = CFArrayCreate(v5, (const void **)values, v14, MEMORY[0x1E0C9B378]);
  if (values)
    MEMORY[0x193FFE43C](values, 0x60C8044C4A2DFLL);
  result = 0;
  *a3 = v15;
  return result;
}

uint64_t AudioFileFormatRegistry::GetAllHFSTypeCodes(AudioFileFormatRegistry *this, unsigned int *a2, void *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  size_t v21;
  void *v22;
  unsigned int v23;
  void *__src;

  if (!a2)
    return 561211770;
  AudioFileFormatRegistry::AddComponentFormats(this);
  v6 = *((_QWORD *)this + 4);
  if (v6 == *((_QWORD *)this + 5))
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      LODWORD(__src) = -1;
      v8 = (*(uint64_t (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(v6 + 8) + 112))(*(_QWORD *)(v6 + 8), &__src, 0);
      v9 = (int)__src;
      if (v8)
        v9 = 0;
      v7 += v9;
      v6 += 16;
    }
    while (v6 != *((_QWORD *)this + 5));
  }
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&__src, v7, 1);
  AudioFileFormatRegistry::AddComponentFormats(this);
  v11 = *((_QWORD *)this + 4);
  if (v11 != *((_QWORD *)this + 5))
  {
    v12 = v7;
    do
    {
      v23 = v12;
      v13 = (*(uint64_t (**)(_QWORD, unsigned int *, char *))(**(_QWORD **)(v11 + 8) + 112))(*(_QWORD *)(v11 + 8), &v23, (char *)__src + ((v7 - v12) & 0xFFFFFFFC));
      v14 = v23;
      if (v13)
        v14 = 0;
      v12 -= v14;
      v11 += 16;
    }
    while (v11 != *((_QWORD *)this + 5));
  }
  if (v7 >= 4)
  {
    v16 = 0;
    v15 = 0;
    v17 = (int *)__src;
    do
    {
      if (v16)
      {
        v18 = 0;
        v19 = v17[v16];
        while (v19 != v17[v18])
        {
          if (v16 == ++v18)
            goto LABEL_24;
        }
      }
      else
      {
        v19 = *v17;
LABEL_24:
        v17[v15++] = v19;
      }
      ++v16;
    }
    while (v16 != v7 >> 2);
  }
  else
  {
    v15 = 0;
  }
  v20 = 4 * v15;
  if (a3)
  {
    if (*a2 >= v20)
      v21 = v20;
    else
      v21 = *a2;
    v22 = __src;
    memcpy(a3, __src, v21);
  }
  else
  {
    v22 = __src;
  }
  *a2 = v20;
  if (v22)
    free(v22);
  return 0;
}

void sub_18EFE3DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(_QWORD *a1, uint64_t a2, int a3)
{
  size_t v5;
  void *v6;
  void *v7;
  void *v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;

  *a1 = 0;
  v5 = 4 * a2;
  if (a3)
  {
    v6 = malloc_type_malloc(4 * a2, 0x2C8E6D5CuLL);
    v7 = v6;
    if (!a2 || v6)
    {
      bzero(v6, v5);
      goto LABEL_7;
    }
LABEL_8:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
  }
  v8 = malloc_type_malloc(4 * a2, 0x7C51E058uLL);
  v7 = v8;
  if (a2 && !v8)
    goto LABEL_8;
LABEL_7:
  *a1 = v7;
  return a1;
}

OSStatus AudioFileCreateWithURL(CFURLRef inFileRef, AudioFileTypeID inFileType, const AudioStreamBasicDescription *inFormat, AudioFileFlags inFlags, AudioFileID *outAudioFile)
{
  OSStatus v5;
  uint64_t v8;
  AudioFileFormatRegistry *AudioFileFormatRegistry;
  uint64_t v12;
  AudioFileFormatBase *v13;
  unsigned int *v14;
  __int128 v15;
  OSStatus v16;
  __int128 v17;
  OpaqueAudioFileID *v18;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  stat v23;
  UInt8 buffer[1024];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = -50;
  if (inFileRef)
  {
    if (inFormat)
    {
      if (outAudioFile)
      {
        v8 = *(_QWORD *)&inFlags;
        AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
        v12 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, inFileType);
        v13 = (AudioFileFormatBase *)v12;
        v5 = 1954115647;
        if (v12)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12))
          {
            v14 = (unsigned int *)NewAudioFileHandle(v13);
            if (v14)
            {
              if (CFURLGetFileSystemRepresentation(inFileRef, 1u, buffer, 1024))
              {
                if (stat((const char *)buffer, &v23))
                {
                  v15 = *(_OWORD *)&inFormat->mBytesPerPacket;
                  v20 = *(_OWORD *)&inFormat->mSampleRate;
                  v21 = v15;
                  v22 = *(_QWORD *)&inFormat->mBitsPerChannel;
                  if (inFormat->mFormatID == 1819304813 && inFormat->mChannelsPerFrame == 1)
                    HIDWORD(v20) &= ~0x20u;
                  v16 = (*(uint64_t (**)(unsigned int *, CFURLRef, __int128 *, uint64_t))(*(_QWORD *)v14 + 32))(v14, inFileRef, &v20, v8);
                }
                else
                {
                  if ((v8 & 1) == 0)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
                    return -48;
                  }
                  v17 = *(_OWORD *)&inFormat->mBytesPerPacket;
                  v20 = *(_OWORD *)&inFormat->mSampleRate;
                  v21 = v17;
                  v22 = *(_QWORD *)&inFormat->mBitsPerChannel;
                  if (inFormat->mFormatID == 1819304813 && inFormat->mChannelsPerFrame == 1)
                    HIDWORD(v20) &= ~0x20u;
                  v16 = (*(uint64_t (**)(unsigned int *, CFURLRef, __int128 *, uint64_t))(*(_QWORD *)v14 + 40))(v14, inFileRef, &v20, v8);
                }
                v5 = v16;
                if (v16)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
                  v18 = 0;
                }
                else
                {
                  v18 = (OpaqueAudioFileID *)v14[2];
                }
                *outAudioFile = v18;
              }
              else
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
                *outAudioFile = 0;
                return -43;
              }
            }
          }
          else
          {
            return 1869627199;
          }
        }
      }
    }
  }
  return v5;
}

void sub_18EFE40CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18EFE4090);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioFileOpenWithCallbacks(void *inClientData, AudioFile_ReadProc inReadFunc, AudioFile_WriteProc inWriteFunc, AudioFile_GetSizeProc inGetSizeFunc, AudioFile_SetSizeProc inSetSizeFunc, AudioFileTypeID inFileTypeHint, AudioFileID *outAudioFile)
{
  uint64_t v14;
  AudioFileFormatBase *FormatForData;
  OSStatus v16;
  unsigned int v17;
  AudioFileFormatRegistry *AudioFileFormatRegistry;
  OSStatus v19;
  uint64_t v20;
  unsigned int *v21;
  OpaqueAudioFileID *v22;
  char v23;
  uint64_t v24;
  int v26;
  unsigned int v27;
  unsigned __int8 *v28;

  if (!outAudioFile)
    return -50;
  CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v28, 0x2000uLL, 1);
  v14 = 0;
  v27 = 0;
  FormatForData = (AudioFileFormatBase *)v28;
  do
  {
    v16 = ((uint64_t (*)(void *, uint64_t, uint64_t, AudioFileFormatBase *, unsigned int *))inReadFunc)(inClientData, v14, 0x2000, FormatForData, &v27);
    LODWORD(FormatForData) = v16;
    if (v16)
    {
      v23 = 0;
      v19 = v16;
      goto LABEL_18;
    }
    if (v27 < 0xA)
      break;
    FormatForData = (AudioFileFormatBase *)v28;
    v17 = ID3Size(v27, v28, &v26);
    v14 += v17;
  }
  while (v17);
  AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
  FormatForData = (AudioFileFormatBase *)AudioFileFormatRegistry::GetFormatForData(AudioFileFormatRegistry, v27, v28);
  v19 = 1954115647;
  if (FormatForData)
    goto LABEL_7;
  if (inFileTypeHint)
  {
    v24 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, inFileTypeHint);
    FormatForData = (AudioFileFormatBase *)v24;
    if (!v24)
    {
      v23 = 0;
      goto LABEL_18;
    }
    if ((*(unsigned int (**)(uint64_t, _QWORD, unsigned __int8 *))(*(_QWORD *)v24 + 24))(v24, v27, v28))
    {
LABEL_7:
      v20 = NewAudioFileHandle(FormatForData);
      v21 = (unsigned int *)v20;
      if (v20)
      {
        LODWORD(FormatForData) = (*(uint64_t (**)(uint64_t, void *, AudioFile_ReadProc, AudioFile_WriteProc, AudioFile_GetSizeProc, AudioFile_SetSizeProc))(*(_QWORD *)v20 + 56))(v20, inClientData, inReadFunc, inWriteFunc, inGetSizeFunc, inSetSizeFunc);
        if ((_DWORD)FormatForData)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
          v22 = 0;
        }
        else
        {
          v22 = (OpaqueAudioFileID *)v21[2];
        }
        *outAudioFile = v22;
        v23 = 1;
        goto LABEL_18;
      }
    }
  }
  v23 = 0;
  LODWORD(FormatForData) = 0;
LABEL_18:
  if (v28)
    free(v28);
  if ((v23 & 1) != 0)
    return (int)FormatForData;
  return v19;
}

void sub_18EFE42F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE42C4);
}

OSStatus AudioFileInitializeWithCallbacks(void *inClientData, AudioFile_ReadProc inReadFunc, AudioFile_WriteProc inWriteFunc, AudioFile_GetSizeProc inGetSizeFunc, AudioFile_SetSizeProc inSetSizeFunc, AudioFileTypeID inFileType, const AudioStreamBasicDescription *inFormat, AudioFileFlags inFlags, AudioFileID *outAudioFile)
{
  OSStatus v9;
  uint64_t v12;
  AudioFileFormatRegistry *AudioFileFormatRegistry;
  uint64_t v18;
  AudioFileFormatBase *v19;
  uint64_t v20;
  unsigned int *v21;
  __int128 v22;
  _OWORD v25[2];
  uint64_t v26;

  v9 = -50;
  if (inFormat)
  {
    if (outAudioFile)
    {
      v12 = *(_QWORD *)&inFileType;
      AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
      v18 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, v12);
      v19 = (AudioFileFormatBase *)v18;
      v9 = 1954115647;
      if (v18)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18))
        {
          v20 = NewAudioFileHandle(v19);
          v21 = (unsigned int *)v20;
          if (v20)
          {
            v22 = *(_OWORD *)&inFormat->mBytesPerPacket;
            v25[0] = *(_OWORD *)&inFormat->mSampleRate;
            v25[1] = v22;
            v26 = *(_QWORD *)&inFormat->mBitsPerChannel;
            if (inFormat->mFormatID == 1819304813 && inFormat->mChannelsPerFrame == 1)
              HIDWORD(v25[0]) &= ~0x20u;
            v9 = (*(uint64_t (**)(uint64_t, void *, AudioFile_ReadProc, AudioFile_WriteProc, AudioFile_GetSizeProc, AudioFile_SetSizeProc, uint64_t, _OWORD *, AudioFileFlags))(*(_QWORD *)v20 + 64))(v20, inClientData, inReadFunc, inWriteFunc, inGetSizeFunc, inSetSizeFunc, v12, v25, inFlags);
            if (v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
              *outAudioFile = 0;
            }
            else
            {
              *outAudioFile = (AudioFileID)v21[2];
            }
          }
        }
        else
        {
          return 1869627199;
        }
      }
    }
  }
  return v9;
}

void sub_18EFE4518(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE44F4);
}

uint64_t AudioFilePrepareToOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, const void *a7, _QWORD *a8)
{
  uint64_t v16;

  v16 = operator new();
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)v16);
  *(_BYTE *)(v16 + 20) = 0;
  *(_QWORD *)(v16 + 12) = 0;
  *(_QWORD *)v16 = &off_1E2908E40;
  *(_QWORD *)(v16 + 24) = a1;
  *(_QWORD *)(v16 + 32) = a2;
  *(_QWORD *)(v16 + 40) = a3;
  *(_QWORD *)(v16 + 48) = a4;
  *(_QWORD *)(v16 + 56) = a5;
  std::vector<AudioFileInfo>::vector((_QWORD *)(v16 + 64), a6);
  *(_BYTE *)(v16 + 88) = 0;
  *(_BYTE *)(v16 + 96) = 0;
  memcpy(*(void **)(v16 + 64), a7, 16 * a6);
  *a8 = *(unsigned int *)(v16 + 8);
  return 0;
}

void sub_18EFE462C(_Unwind_Exception *a1)
{
  BaseOpaqueObject *v1;

  BaseOpaqueObject::~BaseOpaqueObject(v1);
  MEMORY[0x193FFE460](v1, 0x10A3C40753F2C21);
  _Unwind_Resume(a1);
}

OSStatus AudioFileOptimize(AudioFileID inAudioFile)
{
  OSStatus v1;
  AudioFileID v3;
  uint64_t v4;

  v3 = inAudioFile;
  v4 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v3))
  {
    if (v4)
      v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
    else
      v1 = -50;
  }
  else
  {
    v1 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v3);
  return v1;
}

void sub_18EFE46C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE46B0);
}

OSStatus AudioFileReadBytes(AudioFileID inAudioFile, Boolean inUseCache, SInt64 inStartingByte, UInt32 *ioNumBytes, void *outBuffer)
{
  uint64_t v8;
  OSStatus v9;
  AudioFileID v11;
  uint64_t v12;

  v8 = inUseCache;
  v11 = inAudioFile;
  v12 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v11))
  {
    if (v12)
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, SInt64, UInt32 *, void *))(*(_QWORD *)v12 + 88))(v12, v8, inStartingByte, ioNumBytes, outBuffer);
    else
      v9 = -50;
  }
  else
  {
    v9 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v11);
  return v9;
}

void sub_18EFE4790(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE4778);
}

OSStatus AudioFileWriteBytes(AudioFileID inAudioFile, Boolean inUseCache, SInt64 inStartingByte, UInt32 *ioNumBytes, const void *inBuffer)
{
  OSStatus v6;
  uint64_t v9;
  AudioFileID v11;
  uint64_t v12;

  if (inStartingByte < 0)
    return -50;
  v6 = -50;
  if (ioNumBytes && inBuffer && *ioNumBytes)
  {
    v9 = inUseCache;
    v11 = inAudioFile;
    v12 = 0;
    if (AudioFileLocker::Lock((AudioFileLocker *)&v11))
    {
      if (v12)
        v6 = (*(uint64_t (**)(uint64_t, uint64_t, SInt64, UInt32 *, const void *))(*(_QWORD *)v12 + 96))(v12, v9, inStartingByte, ioNumBytes, inBuffer);
    }
    else
    {
      v6 = -38;
    }
    AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v11);
  }
  return v6;
}

void sub_18EFE487C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE4860);
}

OSStatus AudioFileReadPacketData(AudioFileID inAudioFile, Boolean inUseCache, UInt32 *ioNumBytes, AudioStreamPacketDescription *outPacketDescriptions, SInt64 inStartingPacket, UInt32 *ioNumPackets, void *outBuffer)
{
  OSStatus v7;
  OSStatus v11;
  OSStatus v12;
  AudioFileID v14;
  uint64_t v15;

  if (!ioNumPackets)
    return -50;
  v7 = -50;
  if ((inStartingPacket & 0x8000000000000000) == 0 && *ioNumPackets)
  {
    v14 = inAudioFile;
    v15 = 0;
    if (AudioFileLocker::Lock((AudioFileLocker *)&v14))
    {
      if (v15)
      {
        if (!ioNumBytes && outPacketDescriptions && !outBuffer)
        {
          v11 = (*(uint64_t (**)(void))(*(_QWORD *)v15 + 104))();
          goto LABEL_16;
        }
        if (ioNumBytes && *ioNumBytes)
        {
          v11 = (*(uint64_t (**)(void))(*(_QWORD *)v15 + 112))();
LABEL_16:
          v12 = v11;
          AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v14);
          if (v12 == -39)
            return 0;
          else
            return v12;
        }
      }
    }
    else
    {
      v7 = -38;
    }
    AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v14);
  }
  return v7;
}

void sub_18EFE49CC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x18EFE49A4);
  }
  __cxa_end_catch();
  JUMPOUT(0x18EFE49ACLL);
}

OSStatus AudioFileWritePackets(AudioFileID inAudioFile, Boolean inUseCache, UInt32 inNumBytes, const AudioStreamPacketDescription *inPacketDescriptions, SInt64 inStartingPacket, UInt32 *ioNumPackets, const void *inBuffer)
{
  uint64_t v11;
  uint64_t v12;
  OSStatus v13;
  AudioFileID v15;
  uint64_t v16;

  v11 = *(_QWORD *)&inNumBytes;
  v12 = inUseCache;
  v15 = inAudioFile;
  v16 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v15))
  {
    if (v16)
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioStreamPacketDescription *, SInt64, UInt32 *, const void *))(*(_QWORD *)v16 + 120))(v16, v12, v11, inPacketDescriptions, inStartingPacket, ioNumPackets, inBuffer);
    else
      v13 = -50;
  }
  else
  {
    v13 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v15);
  return v13;
}

void sub_18EFE4AB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE4A94);
}

uint64_t AudioFileWritePacketsWithDependencyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v17 = a1;
  v18 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v17))
  {
    if (v18)
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 128))(v18, a2, a3, a4, a5, a6, a7, a8);
    else
      v15 = 4294967246;
  }
  else
  {
    v15 = 4294967258;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v17);
  return v15;
}

void sub_18EFE4BA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE4B84);
}

OSStatus AudioFileSetProperty(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 inDataSize, const void *inPropertyData)
{
  uint64_t v5;
  uint64_t v6;
  OSStatus v7;
  AudioFileID v9;
  uint64_t v10;

  if (!inAudioFile)
    return -50;
  v5 = *(_QWORD *)&inDataSize;
  v6 = *(_QWORD *)&inPropertyID;
  v9 = inAudioFile;
  v10 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v9))
  {
    if (v10)
      v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(_QWORD *)v10 + 152))(v10, v6, v5, inPropertyData);
    else
      v7 = -50;
  }
  else
  {
    v7 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v9);
  return v7;
}

void sub_18EFE4C74(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE4C5CLL);
}

OSStatus AudioFileCountUserData(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 *outNumberItems)
{
  uint64_t v4;
  OSStatus v5;
  AudioFileID v7;
  uint64_t v8;

  v4 = *(_QWORD *)&inUserDataID;
  v7 = inAudioFile;
  v8 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v7))
  {
    if (v8)
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *))(*(_QWORD *)v8 + 160))(v8, v4, outNumberItems);
    else
      v5 = -50;
  }
  else
  {
    v5 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v7);
  return v5;
}

void sub_18EFE4D28(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE4D14);
}

OSStatus AudioFileGetUserDataSize(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex, UInt32 *outUserDataSize)
{
  uint64_t v5;
  uint64_t v6;
  OSStatus v7;
  AudioFileID v9;
  uint64_t v10;

  v5 = *(_QWORD *)&inIndex;
  v6 = *(_QWORD *)&inUserDataID;
  v9 = inAudioFile;
  v10 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v9))
  {
    if (v10)
      v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, UInt32 *))(*(_QWORD *)v10 + 168))(v10, v6, v5, outUserDataSize);
    else
      v7 = -50;
  }
  else
  {
    v7 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v9);
  return v7;
}

void sub_18EFE4DEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE4DD4);
}

OSStatus AudioFileGetUserDataSize64(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex, UInt64 *outUserDataSize)
{
  uint64_t v5;
  uint64_t v6;
  OSStatus v7;
  AudioFileID v9;
  uint64_t v10;

  v5 = *(_QWORD *)&inIndex;
  v6 = *(_QWORD *)&inUserDataID;
  v9 = inAudioFile;
  v10 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v9))
  {
    if (v10)
      v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, UInt64 *))(*(_QWORD *)v10 + 176))(v10, v6, v5, outUserDataSize);
    else
      v7 = -50;
  }
  else
  {
    v7 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v9);
  return v7;
}

void sub_18EFE4EB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE4E98);
}

OSStatus AudioFileGetUserData(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex, UInt32 *ioUserDataSize, void *outUserData)
{
  uint64_t v7;
  uint64_t v8;
  OSStatus v9;
  AudioFileID v11;
  uint64_t v12;

  if (!ioUserDataSize)
    return 561211770;
  v7 = *(_QWORD *)&inIndex;
  v8 = *(_QWORD *)&inUserDataID;
  v11 = inAudioFile;
  v12 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v11))
  {
    if (v12)
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, UInt32 *, void *))(*(_QWORD *)v12 + 184))(v12, v8, v7, ioUserDataSize, outUserData);
    else
      v9 = -50;
  }
  else
  {
    v9 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v11);
  return v9;
}

void sub_18EFE4F8C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE4F74);
}

OSStatus AudioFileGetUserDataAtOffset(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex, SInt64 inOffset, UInt32 *ioUserDataSize, void *outUserData)
{
  uint64_t v9;
  uint64_t v10;
  OSStatus v11;
  AudioFileID v13;
  uint64_t v14;

  if (!ioUserDataSize)
    return 561211770;
  v9 = *(_QWORD *)&inIndex;
  v10 = *(_QWORD *)&inUserDataID;
  v13 = inAudioFile;
  v14 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v13))
  {
    if (v14)
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, SInt64, UInt32 *, void *))(*(_QWORD *)v14 + 192))(v14, v10, v9, inOffset, ioUserDataSize, outUserData);
    else
      v11 = -50;
  }
  else
  {
    v11 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v13);
  return v11;
}

void sub_18EFE5078(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE505CLL);
}

OSStatus AudioFileSetUserData(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex, UInt32 inUserDataSize, const void *inUserData)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OSStatus v9;
  AudioFileID v11;
  uint64_t v12;

  v6 = *(_QWORD *)&inUserDataSize;
  v7 = *(_QWORD *)&inIndex;
  v8 = *(_QWORD *)&inUserDataID;
  v11 = inAudioFile;
  v12 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v11))
  {
    if (v12)
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const void *))(*(_QWORD *)v12 + 200))(v12, v8, v7, v6, inUserData);
    else
      v9 = -50;
  }
  else
  {
    v9 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v11);
  return v9;
}

void sub_18EFE5144(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE512CLL);
}

OSStatus AudioFileRemoveUserData(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex)
{
  uint64_t v3;
  uint64_t v4;
  OSStatus v5;
  AudioFileID v7;
  uint64_t v8;

  v3 = *(_QWORD *)&inIndex;
  v4 = *(_QWORD *)&inUserDataID;
  v7 = inAudioFile;
  v8 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v7))
  {
    if (v8)
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 208))(v8, v4, v3);
    else
      v5 = -50;
  }
  else
  {
    v5 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v7);
  return v5;
}

void sub_18EFE51F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE51E4);
}

OSStatus AudioFileGetGlobalInfoSize(AudioFilePropertyID inPropertyID, UInt32 inSpecifierSize, void *inSpecifier, UInt32 *outDataSize)
{
  OSStatus v8;
  AudioFileFormatRegistry *AudioFileFormatRegistry;
  UInt32 FormatsSize;
  int v11;
  UInt32 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  OSStatus AllHFSTypeCodes;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;

  if (!outDataSize)
    return -50;
  v8 = 2003334207;
  AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
  if ((int)inPropertyID <= 1718446435)
  {
    if ((int)inPropertyID <= 1634560364)
    {
      if ((int)inPropertyID <= 1634231922)
      {
        if (inPropertyID == 1634103910)
        {
          FormatsSize = AudioFileFormatRegistry::GetReadFormatsSize(AudioFileFormatRegistry);
        }
        else
        {
          if (inPropertyID != 1634105190)
            return v8;
          FormatsSize = AudioFileFormatRegistry::GetWriteFormatsSize(AudioFileFormatRegistry);
        }
        v8 = 0;
        *outDataSize = FormatsSize;
        return v8;
      }
      if (inPropertyID == 1634231923)
      {
        v20 = -1;
        AllHFSTypeCodes = AudioFileFormatRegistry::GetAllHFSTypeCodes(AudioFileFormatRegistry, &v20, 0);
        goto LABEL_50;
      }
      v11 = 1634498676;
LABEL_28:
      if (inPropertyID != v11)
        return v8;
      goto LABEL_29;
    }
    if ((int)inPropertyID > 1717926003)
    {
      if (inPropertyID != 1717926004)
      {
        if (inPropertyID != 1718118003)
          return v8;
        if (inSpecifierSize == 4)
        {
          v13 = *(_DWORD *)inSpecifier;
          v20 = -1;
          v14 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, v13);
          if (!v14)
            return 1954115647;
          v8 = (*(uint64_t (**)(uint64_t, unsigned int *, _QWORD))(*(_QWORD *)v14 + 112))(v14, &v20, 0);
          if (v8)
            return v8;
          v12 = v20;
LABEL_30:
          *outDataSize = v12;
          return v8;
        }
        return 561211770;
      }
    }
    else if (inPropertyID != 1634560365)
    {
      v11 = 1635087465;
      goto LABEL_28;
    }
LABEL_29:
    v8 = 0;
    v12 = 8;
    goto LABEL_30;
  }
  if ((int)inPropertyID <= 1935960419)
  {
    if ((int)inPropertyID <= 1718906476)
    {
      if (inPropertyID != 1718446436)
      {
        v11 = 1718446445;
        goto LABEL_28;
      }
      if (inSpecifierSize == 4)
      {
        v15 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *(_DWORD *)inSpecifier);
        if (!v15)
          goto LABEL_54;
        v20 = -1;
        AllHFSTypeCodes = (*(uint64_t (**)(uint64_t, unsigned int *, _QWORD))(*(_QWORD *)v15 + 96))(v15, &v20, 0);
LABEL_50:
        if (!AllHFSTypeCodes)
          *outDataSize = v20;
        return AllHFSTypeCodes;
      }
      return 561211770;
    }
    if (inPropertyID != 1718906477)
    {
      v11 = 1718973545;
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  if ((int)inPropertyID > 1952999026)
  {
    switch(inPropertyID)
    {
      case 0x74686673u:
        AudioFileFormatRegistry::GetTypesForHFSCode(AudioFileFormatRegistry, *(_DWORD *)inSpecifier, outDataSize, 0);
        return 0;
      case 0x746D696Du:
        AudioFileFormatRegistry::GetTypesForMIMEType(AudioFileFormatRegistry, *(const __CFString **)inSpecifier, outDataSize, 0);
        return 0;
      case 0x74757469u:
        AudioFileFormatRegistry::GetTypesForUTI(AudioFileFormatRegistry, *(const __CFString **)inSpecifier, outDataSize, 0);
        return 0;
    }
    return v8;
  }
  if (inPropertyID == 1935960420)
  {
    if (inSpecifierSize < 8)
      return 561211770;
    v17 = *((unsigned int *)inSpecifier + 1);
    v18 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *(_DWORD *)inSpecifier);
    if (v18)
    {
      v20 = -1;
      AllHFSTypeCodes = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, _QWORD))(*(_QWORD *)v18 + 104))(v18, v17, &v20, 0);
      goto LABEL_50;
    }
LABEL_54:
    v8 = 1954115647;
    *outDataSize = 0;
    return v8;
  }
  if (inPropertyID == 1952807028)
  {
    AudioFileFormatRegistry::GetTypesForExtension(AudioFileFormatRegistry, *(const __CFString **)inSpecifier, outDataSize, 0);
    return 0;
  }
  return v8;
}

void sub_18EFE557C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE5544);
}

OSStatus AudioFileGetGlobalInfo(AudioFilePropertyID inPropertyID, UInt32 inSpecifierSize, void *inSpecifier, UInt32 *ioDataSize, void *outPropertyData)
{
  OSStatus v5;
  AudioFileFormatRegistry *AudioFileFormatRegistry;
  AudioFileFormatRegistry *v12;
  UInt32 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  _QWORD *v22;
  uint64_t v23;
  UInt32 FormatsSize;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v5 = -50;
  if (!ioDataSize || !outPropertyData)
    return v5;
  v5 = 0;
  AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
  v12 = AudioFileFormatRegistry;
  if ((int)inPropertyID <= 1718446435)
  {
    if ((int)inPropertyID <= 1634560364)
    {
      if ((int)inPropertyID <= 1634231922)
      {
        if (inPropertyID == 1634103910)
        {
          FormatsSize = AudioFileFormatRegistry::GetReadFormatsSize(AudioFileFormatRegistry);
          v25 = *ioDataSize;
          AudioFileFormatRegistry::AddComponentFormats(v12);
          v5 = 0;
          *ioDataSize = FormatsSize;
          v26 = *((_QWORD *)v12 + 4);
          if (v26 != *((_QWORD *)v12 + 5) && v25 >= 4)
          {
            v27 = 0;
            v28 = v25 >> 2;
            v29 = v26 + 16;
            do
            {
              if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v29 - 8) + 40))(*(_QWORD *)(v29 - 8)))
                *((_DWORD *)outPropertyData + v27++) = *(_DWORD *)(v29 - 16);
              v5 = 0;
              v19 = v29 == *((_QWORD *)v12 + 5);
              v29 += 16;
            }
            while (!v19 && v27 < v28);
          }
        }
        else if (inPropertyID == 1634105190)
        {
          v13 = AudioFileFormatRegistry::GetWriteFormatsSize(AudioFileFormatRegistry);
          v14 = *ioDataSize;
          AudioFileFormatRegistry::AddComponentFormats(v12);
          v5 = 0;
          *ioDataSize = v13;
          v15 = *((_QWORD *)v12 + 4);
          if (v15 != *((_QWORD *)v12 + 5) && v14 >= 4)
          {
            v16 = 0;
            v17 = v14 >> 2;
            v18 = v15 + 16;
            do
            {
              if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v18 - 8) + 48))(*(_QWORD *)(v18 - 8)))
                *((_DWORD *)outPropertyData + v16++) = *(_DWORD *)(v18 - 16);
              v5 = 0;
              v19 = v18 == *((_QWORD *)v12 + 5);
              v18 += 16;
            }
            while (!v19 && v16 < v17);
          }
        }
        return v5;
      }
      if (inPropertyID == 1634231923)
        return AudioFileFormatRegistry::GetAllHFSTypeCodes(AudioFileFormatRegistry, ioDataSize, outPropertyData);
      if (inPropertyID != 1634498676)
        return v5;
      if (*ioDataSize != 8)
        return 561211770;
      return AudioFileFormatRegistry::GetAllExtensions(AudioFileFormatRegistry, ioDataSize, (CFArrayRef *)outPropertyData);
    }
    if ((int)inPropertyID <= 1717926003)
    {
      if (inPropertyID == 1634560365)
      {
        if (*ioDataSize != 8)
          return 561211770;
        return AudioFileFormatRegistry::GetAllMIMETypes(AudioFileFormatRegistry, ioDataSize, (CFArrayRef *)outPropertyData);
      }
      else
      {
        if (inPropertyID != 1635087465)
          return v5;
        if (*ioDataSize != 8)
          return 561211770;
        return AudioFileFormatRegistry::GetAllUTIs(AudioFileFormatRegistry, ioDataSize, (CFArrayRef *)outPropertyData);
      }
    }
    if (inPropertyID == 1717926004)
    {
      if (inSpecifierSize == 4)
        return AudioFileFormatRegistry::GetExtensionsForType(AudioFileFormatRegistry, *(_DWORD *)inSpecifier, ioDataSize, outPropertyData);
      return 561211770;
    }
    if (inPropertyID != 1718118003)
      return v5;
    if (inSpecifierSize != 4)
      return 561211770;
    v22 = (_QWORD *)AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *(_DWORD *)inSpecifier);
    if (!v22)
      goto LABEL_83;
    v23 = 14;
    return (*(uint64_t (**)(void))(*v22 + 8 * v23))();
  }
  if ((int)inPropertyID <= 1935960419)
  {
    if ((int)inPropertyID > 1718906476)
    {
      if (inPropertyID == 1718906477)
      {
        v5 = 561211770;
        if (inSpecifierSize != 4 || *ioDataSize != 8)
          return v5;
        return AudioFileFormatRegistry::GetNameForType(AudioFileFormatRegistry, *(_DWORD *)inSpecifier, ioDataSize, outPropertyData);
      }
      else
      {
        if (inPropertyID != 1718973545)
          return v5;
        if (inSpecifierSize != 4)
          return 561211770;
        return AudioFileFormatRegistry::GetUTIsForType(AudioFileFormatRegistry, *(_DWORD *)inSpecifier, ioDataSize, outPropertyData);
      }
    }
    if (inPropertyID != 1718446436)
    {
      if (inPropertyID != 1718446445)
        return v5;
      if (inSpecifierSize != 4)
        return 561211770;
      return AudioFileFormatRegistry::GetMIMETypesForType(AudioFileFormatRegistry, *(_DWORD *)inSpecifier, ioDataSize, outPropertyData);
    }
    if (inSpecifierSize != 4)
      return 561211770;
    v22 = (_QWORD *)AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *(_DWORD *)inSpecifier);
    if (!v22)
      goto LABEL_83;
    v23 = 12;
    return (*(uint64_t (**)(void))(*v22 + 8 * v23))();
  }
  if ((int)inPropertyID > 1952999026)
  {
    switch(inPropertyID)
    {
      case 0x74686673u:
        AudioFileFormatRegistry::GetTypesForHFSCode(AudioFileFormatRegistry, *(_DWORD *)inSpecifier, ioDataSize, outPropertyData);
        return 0;
      case 0x746D696Du:
        AudioFileFormatRegistry::GetTypesForMIMEType(AudioFileFormatRegistry, *(const __CFString **)inSpecifier, ioDataSize, outPropertyData);
        return 0;
      case 0x74757469u:
        AudioFileFormatRegistry::GetTypesForUTI(AudioFileFormatRegistry, *(const __CFString **)inSpecifier, ioDataSize, outPropertyData);
        return 0;
    }
    return v5;
  }
  if (inPropertyID == 1935960420)
  {
    if (inSpecifierSize >= 8)
    {
      v31 = *((unsigned int *)inSpecifier + 1);
      v32 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *(_DWORD *)inSpecifier);
      if (v32)
        return (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, void *))(*(_QWORD *)v32 + 104))(v32, v31, ioDataSize, outPropertyData);
LABEL_83:
      v5 = 1954115647;
      *ioDataSize = 0;
      return v5;
    }
    return 561211770;
  }
  if (inPropertyID == 1952807028)
  {
    AudioFileFormatRegistry::GetTypesForExtension(AudioFileFormatRegistry, *(const __CFString **)inSpecifier, ioDataSize, outPropertyData);
    return 0;
  }
  return v5;
}

void sub_18EFE5AA4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EFE5A78);
}

float64_t Float32ToNativeFloat64(_QWORD *a1, float64x2_t *a2, unsigned int a3)
{
  unsigned int v3;
  float32x2_t v4;
  float32x2_t v5;
  float64x2_t v6;
  int v7;
  float v8;

  if (a3 >= 4)
  {
    v3 = a3 >> 2;
    do
    {
      v4 = *(float32x2_t *)a1;
      v5 = (float32x2_t)a1[1];
      a1 += 2;
      v6 = vcvtq_f64_f32(v4);
      *a2 = v6;
      a2[1] = vcvtq_f64_f32(v5);
      a2 += 2;
      --v3;
    }
    while (v3);
  }
  v7 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      v8 = *(float *)a1;
      a1 = (_QWORD *)((char *)a1 + 4);
      v6.f64[0] = v8;
      a2->f64[0] = v8;
      a2 = (float64x2_t *)((char *)a2 + 8);
      --v7;
    }
    while (v7);
  }
  return v6.f64[0];
}

double Float32ToSwapFloat64(float *a1, _DWORD *a2, unsigned int a3)
{
  unsigned int v3;
  float v4;
  float v5;
  float v6;
  double v7;
  double result;
  int v9;
  _DWORD *v10;
  float v11;

  if (a3 >= 4)
  {
    v3 = a3 >> 2;
    do
    {
      v4 = a1[1];
      v5 = a1[2];
      v6 = a1[3];
      v7 = *a1;
      a2[1] = bswap32(LODWORD(v7));
      *a2 = bswap32(HIDWORD(v7));
      a2[3] = bswap32(COERCE_UNSIGNED_INT64(v4));
      a2[2] = bswap32(HIDWORD(COERCE_UNSIGNED_INT64(v4)));
      a2[5] = bswap32(COERCE_UNSIGNED_INT64(v5));
      a2[4] = bswap32(HIDWORD(COERCE_UNSIGNED_INT64(v5)));
      result = v6;
      a2[7] = bswap32(COERCE_UNSIGNED_INT64(v6));
      a2[6] = bswap32(HIDWORD(COERCE_UNSIGNED_INT64(v6)));
      a1 += 4;
      a2 += 8;
      --v3;
    }
    while (v3);
  }
  v9 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    v10 = a2 + 1;
    do
    {
      v11 = *a1++;
      result = v11;
      *v10 = bswap32(COERCE_UNSIGNED_INT64(v11));
      *(v10 - 1) = bswap32(HIDWORD(COERCE_UNSIGNED_INT64(v11)));
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  return result;
}

float NativeFloat64ToFloat32(_OWORD *a1, float32x4_t *a2, unsigned int a3)
{
  unsigned int v3;
  float64x2_t v4;
  float64x2_t v5;
  int v6;
  double v7;

  if (a3 >= 4)
  {
    v3 = a3 >> 2;
    do
    {
      v5 = *(float64x2_t *)a1;
      v4 = *((float64x2_t *)a1 + 1);
      a1 += 2;
      *a2++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v5), v4);
      --v3;
    }
    while (v3);
  }
  v6 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      v7 = *(double *)a1;
      a1 = (_OWORD *)((char *)a1 + 8);
      *(float *)v4.f64 = v7;
      a2->i32[0] = LODWORD(v4.f64[0]);
      a2 = (float32x4_t *)((char *)a2 + 4);
      --v6;
    }
    while (v6);
  }
  return *(float *)v4.f64;
}

float32_t SwapFloat64ToFloat32(unsigned int *a1, float32x2_t *a2, unsigned int a3)
{
  unsigned int v3;
  int32x2_t v4;
  int8x16_t v5;
  float32x2_t v6;
  int v7;
  unsigned int *v8;

  if (a3 >= 4)
  {
    v3 = a3 >> 2;
    do
    {
      v4.i32[0] = a1[1];
      v4.i32[1] = a1[3];
      v5.i64[0] = *a1;
      v5.i64[1] = a1[2];
      *a2 = vcvt_f32_f64((float64x2_t)vrev64q_s8(vorrq_s8((int8x16_t)vshll_n_s32(v4, 0x20uLL), v5)));
      v4.i32[0] = a1[5];
      v4.i32[1] = a1[7];
      v5.i64[0] = a1[4];
      v5.i64[1] = a1[6];
      v6 = vcvt_f32_f64((float64x2_t)vrev64q_s8(vorrq_s8((int8x16_t)vshll_n_s32(v4, 0x20uLL), v5)));
      a2[1] = v6;
      a1 += 8;
      a2 += 2;
      --v3;
    }
    while (v3);
  }
  v7 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    v8 = a1 + 1;
    do
    {
      v6.f32[0] = COERCE_DOUBLE(bswap64(*(v8 - 1) | ((unint64_t)*v8 << 32)));
      a2->i32[0] = v6.i32[0];
      a2 = (float32x2_t *)((char *)a2 + 4);
      v8 += 2;
      --v7;
    }
    while (v7);
  }
  return v6.f32[0];
}

void NativeInt16ToFloat32_Portable(__int16 *a1, float *a2, int a3)
{
  ConvertIntToFloat<PCMSInt16Native,PCMFloat32>(a1, a2, a3, 0.0);
}

void ConvertIntToFloat<PCMSInt16Native,PCMFloat32>(__int16 *a1, float *a2, int a3, float a4)
{
  unsigned int v7;
  int v8;
  int v9;
  __int16 v10;
  float *v11;
  float v12;
  float v13;
  unsigned int v14;
  int v15;
  float v16;
  float v17;
  int v18;
  int v19;

  if (a4 == 0.0)
    a4 = scalbnf(1.0, -15);
  v7 = a3 - 4;
  if (a3 >= 4)
  {
    v8 = a1[1];
    v9 = a1[2];
    v10 = a1[3];
    *a2 = a4 * (float)*a1;
    v11 = a2 + 1;
    a3 &= 3u;
    v12 = a4 * (float)v8;
    a1 += 4;
    v13 = (float)v9;
    if (v7 >= 4)
    {
      v14 = v7 >> 2;
      do
      {
        v15 = a1[1];
        v16 = (float)*a1;
        v17 = a4 * (float)v10;
        *v11 = v12;
        v11[1] = a4 * v13;
        v18 = a1[2];
        v10 = a1[3];
        v11[2] = v17;
        v11[3] = a4 * v16;
        v11 += 4;
        v12 = a4 * (float)v15;
        a1 += 4;
        v13 = (float)v18;
        --v14;
      }
      while (v14);
    }
    *v11 = v12;
    v11[1] = a4 * v13;
    v11[2] = a4 * (float)v10;
    a2 = v11 + 3;
  }
  for (; a3; --a3)
  {
    v19 = *a1++;
    *a2++ = a4 * (float)v19;
  }
}

void SwapInt16ToFloat32_Portable(unsigned __int16 *a1, float *a2, int a3)
{
  ConvertIntToFloat<PCMSInt16Swap,PCMFloat32>(a1, a2, a3, 0.0);
}

void ConvertIntToFloat<PCMSInt16Swap,PCMFloat32>(unsigned __int16 *a1, float *a2, int a3, float a4)
{
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  float *v11;
  float v12;
  float v13;
  unsigned int v14;
  int v15;
  int v16;
  float v17;
  int v18;
  unsigned int v19;

  if (a4 == 0.0)
    a4 = scalbnf(1.0, -15);
  v7 = a3 - 4;
  if (a3 >= 4)
  {
    v8 = bswap32(a1[1]);
    v9 = (int)bswap32(a1[2]) >> 16;
    v10 = bswap32(a1[3]) >> 16;
    *a2 = a4 * (float)((int)bswap32(*a1) >> 16);
    v11 = a2 + 1;
    a3 &= 3u;
    v12 = a4 * (float)(v8 >> 16);
    a1 += 4;
    v13 = (float)v9;
    if (v7 >= 4)
    {
      v14 = v7 >> 2;
      do
      {
        v15 = bswap32(*a1);
        *v11 = v12;
        v16 = (int)bswap32(a1[1]) >> 16;
        v17 = (float)(v15 >> 16);
        v11[1] = a4 * v13;
        v18 = (int)bswap32(a1[2]) >> 16;
        v11[2] = a4 * (float)(__int16)v10;
        v10 = bswap32(a1[3]) >> 16;
        v11[3] = a4 * v17;
        v11 += 4;
        v12 = a4 * (float)v16;
        a1 += 4;
        v13 = (float)v18;
        --v14;
      }
      while (v14);
    }
    *v11 = v12;
    v11[1] = a4 * v13;
    v11[2] = a4 * (float)(__int16)v10;
    a2 = v11 + 3;
  }
  for (; a3; --a3)
  {
    v19 = *a1++;
    *a2++ = a4 * (float)((int)bswap32(v19) >> 16);
  }
}

float *Float32ToNativeInt16_Portable(float *a1, _WORD *a2, unsigned int a3)
{
  return ConvertFloatToInt<PCMFloat32,PCMSInt16Native>(a1, a2, a3, 0.0);
}

float *ConvertFloatToInt<PCMFloat32,PCMSInt16Native>(float *result, _WORD *a2, unsigned int a3, float a4)
{
  double v4;
  double v5;
  double v6;
  int v7;
  int v8;
  float *v9;
  double v10;
  unsigned int v11;
  float *v12;
  _WORD *v13;
  float v14;
  double v15;
  int v16;
  BOOL v17;
  double v18;
  double v19;
  int v20;
  float v21;
  double v22;
  int v23;
  float v24;
  double v25;
  double v26;
  unsigned int v27;
  double v28;
  unsigned int v29;
  __int16 v30;
  unsigned int v31;
  double v32;
  int v33;

  if (a4 == 0.0)
    v4 = 2147483650.0;
  else
    v4 = a4 * 0.0000305175781 * 2147483650.0;
  if (a3 >= 8)
  {
    v5 = *result * v4 + 32768.0;
    v6 = result[1] * v4 + 32768.0;
    v7 = (int)v5 - (v5 < 0.0);
    if (v5 <= -2147483650.0)
      HIWORD(v7) = 0x8000;
    if (v5 < 2147450880.0)
      HIWORD(v8) = HIWORD(v7);
    else
      HIWORD(v8) = 0x7FFF;
    v9 = result + 3;
    v10 = result[2];
    v11 = (a3 - 4) >> 2;
    do
    {
      v12 = v9;
      v13 = a2;
      v14 = v9[1];
      v15 = *v9;
      v16 = (int)v6 - (v6 < 0.0);
      if (v6 <= -2147483650.0)
        HIWORD(v16) = 0x8000;
      v17 = v6 < 2147450880.0;
      v18 = v10 * v4 + 32768.0;
      if (!v17)
        HIWORD(v16) = 0x7FFF;
      *a2 = HIWORD(v8);
      v19 = v15 * v4 + 32768.0;
      v20 = (int)v18 - (v18 < 0.0);
      if (v18 <= -2147483650.0)
        HIWORD(v20) = 0x8000;
      if (v18 >= 2147450880.0)
        HIWORD(v20) = 0x7FFF;
      a2[1] = HIWORD(v16);
      v21 = v12[2];
      v22 = v14 * v4 + 32768.0;
      v23 = (int)v19 - (v19 < 0.0);
      if (v19 <= -2147483650.0)
        HIWORD(v23) = 0x8000;
      if (v19 >= 2147450880.0)
        HIWORD(v23) = 0x7FFF;
      a2[2] = HIWORD(v20);
      if (v22 >= 2147450880.0)
      {
        HIWORD(v8) = 0x7FFF;
      }
      else if (v22 <= -2147483650.0)
      {
        HIWORD(v8) = 0x8000;
      }
      else
      {
        v8 = (int)v22 - (v22 < 0.0);
      }
      v24 = v12[3];
      v6 = v21 * v4 + 32768.0;
      a2[3] = HIWORD(v23);
      v9 = v12 + 4;
      a2 += 4;
      v10 = v24;
      --v11;
    }
    while (v11);
    a3 &= 3u;
    v25 = *v9;
    v26 = v10 * v4 + 32768.0;
    if (v6 > -2147483650.0)
      v27 = ((int)v6 - (v6 < 0.0)) >> 16;
    else
      LOWORD(v27) = 0x8000;
    if (v6 >= 2147450880.0)
      LOWORD(v27) = 0x7FFF;
    *a2 = HIWORD(v8);
    v28 = v25 * v4 + 32768.0;
    if (v26 > -2147483650.0)
      v29 = ((int)v26 - (v26 < 0.0)) >> 16;
    else
      LOWORD(v29) = 0x8000;
    if (v26 < 2147450880.0)
      v30 = v29;
    else
      v30 = 0x7FFF;
    v13[5] = v27;
    if (v28 >= 2147450880.0)
    {
      LOWORD(v31) = 0x7FFF;
    }
    else if (v28 <= -2147483650.0)
    {
      LOWORD(v31) = 0x8000;
    }
    else
    {
      v31 = ((int)v28 - (v28 < 0.0)) >> 16;
    }
    v13[6] = v30;
    v13[7] = v31;
    result = v12 + 5;
    a2 = v13 + 8;
  }
  for (; a3; --a3)
  {
    v32 = *result * v4 + 32768.0;
    if (v32 >= 2147450880.0)
    {
      HIWORD(v33) = 0x7FFF;
    }
    else if (v32 <= -2147483650.0)
    {
      HIWORD(v33) = 0x8000;
    }
    else
    {
      v33 = (int)v32 - (v32 < 0.0);
    }
    *a2++ = HIWORD(v33);
    ++result;
  }
  return result;
}

float *Float32ToSwapInt16_Portable(float *a1, _WORD *a2, unsigned int a3)
{
  return ConvertFloatToInt<PCMFloat32,PCMSInt16Swap>(a1, a2, a3, 0.0);
}

float *ConvertFloatToInt<PCMFloat32,PCMSInt16Swap>(float *result, _WORD *a2, unsigned int a3, float a4)
{
  double v4;
  double v5;
  double v6;
  int v7;
  unsigned int v8;
  float *v9;
  double v10;
  unsigned int v11;
  float *v12;
  _WORD *v13;
  double v14;
  double v15;
  unsigned int v16;
  double v17;
  double v18;
  unsigned int v19;
  float v20;
  double v21;
  unsigned int v22;
  float v23;
  double v24;
  double v25;
  unsigned int v26;
  double v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  double v31;
  unsigned int v32;

  if (a4 == 0.0)
    v4 = 2147483650.0;
  else
    v4 = a4 * 0.0000305175781 * 2147483650.0;
  if (a3 >= 8)
  {
    v5 = *result * v4 + 32768.0;
    v6 = result[1] * v4 + 32768.0;
    v7 = (int)v5 - (v5 < 0.0);
    if (v5 <= -2147483650.0)
      v7 = 0x80000000;
    if (v5 < 2147450880.0)
      v8 = v7;
    else
      v8 = 0x7FFFFFFF;
    v9 = result + 3;
    v10 = result[2];
    v11 = (a3 - 4) >> 2;
    do
    {
      v12 = v9;
      v13 = a2;
      v14 = *v9;
      v15 = v10 * v4 + 32768.0;
      v16 = (int)v6 - (v6 < 0.0);
      if (v6 <= -2147483650.0)
        v16 = 0x80000000;
      if (v6 >= 2147450880.0)
        v16 = 0x7FFFFFFF;
      *a2 = bswap32(v8);
      v17 = v12[1];
      v18 = v14 * v4 + 32768.0;
      v19 = (int)v15 - (v15 < 0.0);
      if (v15 <= -2147483650.0)
        v19 = 0x80000000;
      if (v15 >= 2147450880.0)
        v19 = 0x7FFFFFFF;
      a2[1] = bswap32(v16);
      v20 = v12[2];
      v21 = v17 * v4 + 32768.0;
      v22 = (int)v18 - (v18 < 0.0);
      if (v18 <= -2147483650.0)
        v22 = 0x80000000;
      if (v18 >= 2147450880.0)
        v22 = 0x7FFFFFFF;
      a2[2] = bswap32(v19);
      if (v21 >= 2147450880.0)
      {
        v8 = 0x7FFFFFFF;
      }
      else if (v21 <= -2147483650.0)
      {
        v8 = 0x80000000;
      }
      else
      {
        v8 = (int)v21 - (v21 < 0.0);
      }
      v23 = v12[3];
      v6 = v20 * v4 + 32768.0;
      a2[3] = bswap32(v22);
      v9 = v12 + 4;
      a2 += 4;
      v10 = v23;
      --v11;
    }
    while (v11);
    a3 &= 3u;
    v24 = *v9;
    v25 = v10 * v4 + 32768.0;
    if (v6 > -2147483650.0)
      v26 = ((int)v6 - (v6 < 0.0)) >> 16;
    else
      v26 = 0x8000;
    if (v6 >= 2147450880.0)
      v26 = 0x7FFF;
    *a2 = bswap32(v8);
    v27 = v24 * v4 + 32768.0;
    if (v25 > -2147483650.0)
      v28 = ((int)v25 - (v25 < 0.0)) >> 16;
    else
      v28 = 0x8000;
    if (v25 < 2147450880.0)
      v29 = v28;
    else
      v29 = 0x7FFF;
    v13[5] = __rev16(v26);
    if (v27 >= 2147450880.0)
    {
      v30 = 0x7FFF;
    }
    else if (v27 <= -2147483650.0)
    {
      v30 = 0x8000;
    }
    else
    {
      v30 = ((int)v27 - (v27 < 0.0)) >> 16;
    }
    v13[6] = __rev16(v29);
    v13[7] = __rev16(v30);
    result = v12 + 5;
    a2 = v13 + 8;
  }
  for (; a3; --a3)
  {
    v31 = *result * v4 + 32768.0;
    if (v31 >= 2147450880.0)
    {
      v32 = 0x7FFFFFFF;
    }
    else if (v31 <= -2147483650.0)
    {
      v32 = 0x80000000;
    }
    else
    {
      v32 = (int)v31 - (v31 < 0.0);
    }
    *a2++ = bswap32(v32);
    ++result;
  }
  return result;
}

__int16 *StereoDeinterleaveInt16ToFloat32Scaled_Portable(__int16 *result, float *a2, float *a3, int a4, float a5)
{
  int v5;

  for (; a4; --a4)
  {
    v5 = result[1];
    *a2++ = (float)*result * a5;
    *a3++ = (float)v5 * a5;
    result += 2;
  }
  return result;
}

float *StereoInterleaveFloat32ToInt16Scaled_Portable(float *result, float *a2, _WORD *a3, int a4, float a5)
{
  float v5;
  float v6;
  int v7;
  float v8;
  float v9;
  int v10;

  for (; a4; --a4)
  {
    v5 = *result++;
    v6 = v5 * a5;
    if ((float)(v5 * a5) <= 0.0)
    {
      v7 = (int)(float)(v6 + -0.5);
      if (v6 <= -32768.0)
        LOWORD(v7) = 0x8000;
    }
    else
    {
      v7 = (int)(float)(v6 + 0.5);
      if (v6 >= 32766.0)
        LOWORD(v7) = 0x7FFF;
    }
    v8 = *a2++;
    v9 = v8 * a5;
    *a3 = v7;
    if ((float)(v8 * a5) <= 0.0)
    {
      v10 = (int)(float)(v9 + -0.5);
      if (v9 <= -32768.0)
        LOWORD(v10) = 0x8000;
    }
    else
    {
      v10 = (int)(float)(v9 + 0.5);
      if (v9 >= 32766.0)
        LOWORD(v10) = 0x7FFF;
    }
    a3[1] = v10;
    a3 += 2;
  }
  return result;
}

void NativeInt32ToFloat32_Portable(int *a1, float *a2, int a3)
{
  ConvertIntToFloat<PCMSInt32Native,PCMFloat32>(a1, a2, a3, 32, 0.0);
}

void ConvertIntToFloat<PCMSInt32Native,PCMFloat32>(int *a1, float *a2, int a3, int a4, float a5)
{
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  float *v12;
  float v13;
  float v14;
  unsigned int v15;
  int v16;
  float v17;
  float v18;
  int v19;
  int v20;
  int v21;

  if (a5 == 0.0)
    a5 = scalbnf(1.0, 1 - a4);
  v8 = a3 - 4;
  if (a3 >= 4)
  {
    v9 = a1[1];
    v10 = a1[3];
    v11 = a1[2];
    *a2 = a5 * (float)*a1;
    v12 = a2 + 1;
    a3 &= 3u;
    v13 = a5 * (float)v9;
    a1 += 4;
    v14 = (float)v11;
    if (v8 >= 4)
    {
      v15 = v8 >> 2;
      do
      {
        v16 = *a1;
        *v12 = v13;
        v17 = (float)v16;
        v18 = a5 * (float)v10;
        v19 = a1[1];
        v12[1] = a5 * v14;
        v20 = a1[2];
        v10 = a1[3];
        v12[2] = v18;
        v12[3] = a5 * v17;
        v12 += 4;
        v13 = a5 * (float)v19;
        a1 += 4;
        v14 = (float)v20;
        --v15;
      }
      while (v15);
    }
    *v12 = v13;
    v12[1] = a5 * v14;
    v12[2] = a5 * (float)v10;
    a2 = v12 + 3;
  }
  for (; a3; --a3)
  {
    v21 = *a1++;
    *a2++ = a5 * (float)v21;
  }
}

void SwapInt32ToFloat32_Portable(unsigned int *a1, float *a2, int a3)
{
  ConvertIntToFloat<PCMSInt32Swap,PCMFloat32>(a1, a2, a3, 0.0);
}

void ConvertIntToFloat<PCMSInt32Swap,PCMFloat32>(unsigned int *a1, float *a2, int a3, float a4)
{
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  float *v11;
  float v12;
  float v13;
  unsigned int v14;
  float v15;
  int v16;
  int v17;
  int v18;
  float v19;
  unsigned int v20;

  if (a4 == 0.0)
    a4 = scalbnf(1.0, -31);
  v7 = a3 - 4;
  if (a3 >= 4)
  {
    v8 = bswap32(a1[1]);
    v9 = bswap32(a1[2]);
    v10 = bswap32(a1[3]);
    *a2 = a4 * (float)(int)bswap32(*a1);
    v11 = a2 + 1;
    a3 &= 3u;
    v12 = a4 * (float)v8;
    a1 += 4;
    v13 = (float)v9;
    if (v7 >= 4)
    {
      v14 = v7 >> 2;
      do
      {
        v15 = (float)v10;
        v16 = bswap32(*a1);
        *v11 = v12;
        v17 = bswap32(a1[1]);
        v11[1] = a4 * v13;
        v18 = bswap32(a1[2]);
        v19 = a4 * (float)v16;
        v11[2] = a4 * v15;
        v10 = bswap32(a1[3]);
        v11[3] = v19;
        v11 += 4;
        v12 = a4 * (float)v17;
        a1 += 4;
        v13 = (float)v18;
        --v14;
      }
      while (v14);
    }
    *v11 = v12;
    v11[1] = a4 * v13;
    v11[2] = a4 * (float)v10;
    a2 = v11 + 3;
  }
  for (; a3; --a3)
  {
    v20 = *a1++;
    *a2++ = a4 * (float)(int)bswap32(v20);
  }
}

float *Float32ToNativeInt32_Portable(float *a1, int *a2, unsigned int a3)
{
  return ConvertFloatToInt<PCMFloat32,PCMSInt32Native>(a1, a2, a3, 32, 0.0);
}

float *ConvertFloatToInt<PCMFloat32,PCMSInt32Native>(float *result, int *a2, unsigned int a3, int a4, float a5)
{
  double v5;
  double v6;
  char v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  int v12;
  int v13;
  double v14;
  unsigned int v15;
  float *v16;
  int v17;
  BOOL v18;
  float v19;
  double v20;
  double v21;
  int v22;
  double v23;
  double v24;
  int v25;
  int *v26;
  int v27;
  float v28;
  double v29;
  int v30;
  float v31;
  uint64_t v32;
  int *v33;
  double v34;
  double v35;
  int v36;
  int v37;
  double v38;
  int v39;
  int v40;
  int v41;
  double v42;
  int v43;

  v5 = (double)(1 << (31 - a4));
  if (a4 >= 32)
    v5 = 0.0;
  if (a5 == 0.0)
  {
    v6 = 2147483650.0;
  }
  else
  {
    v6 = a5;
    if (v5 != 0.0)
      v6 = v6 / v5 * 2147483650.0;
  }
  v7 = 32 - a4;
  v8 = 2147483650.0 - v5;
  if (a3 >= 8)
  {
    v9 = 0;
    v10 = v5 + *result * v6;
    v11 = v5 + result[1] * v6;
    v12 = (int)v10 - (v10 < 0.0);
    if (v10 <= -2147483650.0)
      v12 = 0x80000000;
    if (v10 < v8)
      v13 = v12;
    else
      v13 = 0x7FFFFFFF;
    v14 = result[2];
    v15 = (a3 - 4) >> 2;
    do
    {
      v16 = &result[v9];
      v17 = (int)v11 - (v11 < 0.0);
      if (v11 <= -2147483650.0)
        v17 = 0x80000000;
      v18 = v11 < v8;
      v19 = v16[4];
      v20 = v16[3];
      v21 = v5 + v14 * v6;
      if (v18)
        v22 = v17;
      else
        v22 = 0x7FFFFFFF;
      a2[v9] = v13 >> v7;
      v23 = v19;
      v24 = v5 + v20 * v6;
      v25 = (int)v21 - (v21 < 0.0);
      if (v21 <= -2147483650.0)
        v25 = 0x80000000;
      if (v21 >= v8)
        v25 = 0x7FFFFFFF;
      v26 = &a2[v9];
      v27 = v22 >> v7;
      v28 = v16[5];
      v29 = v5 + v23 * v6;
      if (v24 > -2147483650.0)
        v30 = (int)v24 - (v24 < 0.0);
      else
        v30 = 0x80000000;
      if (v24 >= v8)
        v30 = 0x7FFFFFFF;
      v26[1] = v27;
      v26[2] = v25 >> v7;
      if (v29 >= v8)
      {
        v13 = 0x7FFFFFFF;
      }
      else if (v29 <= -2147483650.0)
      {
        v13 = 0x80000000;
      }
      else
      {
        v13 = (int)v29 - (v29 < 0.0);
      }
      v31 = v16[6];
      v11 = v5 + v28 * v6;
      v26[3] = v30 >> v7;
      v14 = v31;
      v9 += 4;
      --v15;
    }
    while (v15);
    v32 = (uint64_t)&result[v9 - 1];
    v33 = &a2[v9 - 4];
    a3 &= 3u;
    v34 = result[v9 + 3];
    v35 = v5 + v14 * v6;
    if (v11 > -2147483650.0)
      v36 = (int)v11 - (v11 < 0.0);
    else
      v36 = 0x80000000;
    a2[v9] = v13 >> v7;
    if (v11 < v8)
      v37 = v36;
    else
      v37 = 0x7FFFFFFF;
    v38 = v5 + v34 * v6;
    if (v35 > -2147483650.0)
      v39 = (int)v35 - (v35 < 0.0);
    else
      v39 = 0x80000000;
    if (v35 < v8)
      v40 = v39;
    else
      v40 = 0x7FFFFFFF;
    v33[5] = v37 >> v7;
    if (v38 >= v8)
    {
      v41 = 0x7FFFFFFF;
    }
    else if (v38 <= -2147483650.0)
    {
      v41 = 0x80000000;
    }
    else
    {
      v41 = (int)v38 - (v38 < 0.0);
    }
    v33[6] = v40 >> v7;
    v33[7] = v41 >> v7;
    result = (float *)(v32 + 20);
    a2 = v33 + 8;
  }
  for (; a3; --a3)
  {
    v42 = v5 + *result * v6;
    if (v42 >= v8)
    {
      v43 = 0x7FFFFFFF;
    }
    else if (v42 <= -2147483650.0)
    {
      v43 = 0x80000000;
    }
    else
    {
      v43 = (int)v42 - (v42 < 0.0);
    }
    *a2++ = v43 >> v7;
    ++result;
  }
  return result;
}

float *Float32ToSwapInt32_Portable(float *a1, _DWORD *a2, unsigned int a3)
{
  return ConvertFloatToInt<PCMFloat32,PCMSInt32Swap>(a1, a2, a3, 0.0);
}

float *ConvertFloatToInt<PCMFloat32,PCMSInt32Swap>(float *result, _DWORD *a2, unsigned int a3, float a4)
{
  double v4;
  BOOL v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  int v10;
  unsigned int v11;
  double v12;
  unsigned int v13;
  float *v14;
  double v15;
  double v16;
  int v17;
  unsigned int v18;
  double v19;
  double v20;
  int v21;
  unsigned int v22;
  _DWORD *v23;
  float v24;
  double v25;
  int v26;
  unsigned int v27;
  float v28;
  uint64_t v29;
  _DWORD *v30;
  double v31;
  double v32;
  int v33;
  unsigned int v34;
  double v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  double v39;
  unsigned int v40;

  v4 = a4;
  v5 = a4 == 0.0;
  v6 = 2147483650.0;
  if (!v5)
    v6 = v4;
  if (a3 >= 8)
  {
    v7 = 0;
    v8 = *result * v6 + 0.0;
    v9 = result[1] * v6 + 0.0;
    v10 = (int)v8 - (v8 < 0.0);
    if (v8 <= -2147483650.0)
      v10 = 0x80000000;
    if (v8 < 2147483650.0)
      v11 = v10;
    else
      v11 = 0x7FFFFFFF;
    v12 = result[2];
    v13 = (a3 - 4) >> 2;
    do
    {
      v14 = &result[v7];
      v15 = result[v7 + 3];
      v16 = v12 * v6 + 0.0;
      v17 = (int)v9 - (v9 < 0.0);
      if (v9 <= -2147483650.0)
        v17 = 0x80000000;
      a2[v7] = bswap32(v11);
      if (v9 < 2147483650.0)
        v18 = v17;
      else
        v18 = 0x7FFFFFFF;
      v19 = v14[4];
      v20 = v15 * v6 + 0.0;
      v21 = (int)v16 - (v16 < 0.0);
      if (v16 <= -2147483650.0)
        v21 = 0x80000000;
      if (v16 < 2147483650.0)
        v22 = v21;
      else
        v22 = 0x7FFFFFFF;
      v23 = &a2[v7];
      a2[v7 + 1] = bswap32(v18);
      v24 = v14[5];
      v25 = v19 * v6 + 0.0;
      v26 = (int)v20 - (v20 < 0.0);
      if (v20 <= -2147483650.0)
        v26 = 0x80000000;
      if (v20 < 2147483650.0)
        v27 = v26;
      else
        v27 = 0x7FFFFFFF;
      v23[2] = bswap32(v22);
      if (v25 >= 2147483650.0)
      {
        v11 = 0x7FFFFFFF;
      }
      else if (v25 <= -2147483650.0)
      {
        v11 = 0x80000000;
      }
      else
      {
        v11 = (int)v25 - (v25 < 0.0);
      }
      v28 = v14[6];
      v9 = v24 * v6 + 0.0;
      v23[3] = bswap32(v27);
      v12 = v28;
      v7 += 4;
      --v13;
    }
    while (v13);
    v29 = (uint64_t)&result[v7 - 1];
    v30 = &a2[v7 - 4];
    a3 &= 3u;
    v31 = result[v7 + 3];
    v32 = v12 * v6 + 0.0;
    if (v9 > -2147483650.0)
      v33 = (int)v9 - (v9 < 0.0);
    else
      v33 = 0x80000000;
    a2[v7] = bswap32(v11);
    if (v9 < 2147483650.0)
      v34 = v33;
    else
      v34 = 0x7FFFFFFF;
    v35 = v31 * v6 + 0.0;
    if (v32 > -2147483650.0)
      v36 = (int)v32 - (v32 < 0.0);
    else
      v36 = 0x80000000;
    if (v32 < 2147483650.0)
      v37 = v36;
    else
      v37 = 0x7FFFFFFF;
    v30[5] = bswap32(v34);
    if (v35 >= 2147483650.0)
    {
      v38 = 0x7FFFFFFF;
    }
    else if (v35 <= -2147483650.0)
    {
      v38 = 0x80000000;
    }
    else
    {
      v38 = (int)v35 - (v35 < 0.0);
    }
    v30[6] = bswap32(v37);
    v30[7] = bswap32(v38);
    result = (float *)(v29 + 20);
    a2 = v30 + 8;
  }
  for (; a3; --a3)
  {
    v39 = *result * v6 + 0.0;
    if (v39 >= 2147483650.0)
    {
      v40 = 0x7FFFFFFF;
    }
    else if (v39 <= -2147483650.0)
    {
      v40 = 0x80000000;
    }
    else
    {
      v40 = (int)v39 - (v39 < 0.0);
    }
    *a2++ = bswap32(v40);
    ++result;
  }
  return result;
}

void NativeInt32ToFloat32Scaled_Portable(int *a1, float *a2, int a3, float a4)
{
  ConvertIntToFloat<PCMSInt32Native,PCMFloat32>(a1, a2, a3, 32, a4);
}

float *Float32ToNativeInt32Scaled_Portable(float *a1, int *a2, unsigned int a3, float a4)
{
  return ConvertFloatToInt<PCMFloat32,PCMSInt32Native>(a1, a2, a3, 32, a4);
}

void StereoDeinterleaveInt824ToFloat32_Portable(const DSPComplex *a1, float *a2, float *a3, vDSP_Length __N)
{
  int v4;
  DSPSplitComplex v7;

  v4 = __N;
  v7.realp = a2;
  v7.imagp = a3;
  vDSP_ctoz(a1, 2, &v7, 1, __N);
  ConvertIntToFloat<PCMSInt32Native,PCMFloat32>((int *)a2, a2, v4, 25, 0.0);
  ConvertIntToFloat<PCMSInt32Native,PCMFloat32>((int *)a3, a3, v4, 25, 0.0);
}

float *StereoInterleaveFloat32ToInt824_Portable(float *a1, float *a2, DSPComplex *a3, vDSP_Length __N)
{
  int v4;
  DSPSplitComplex v7;

  v4 = __N;
  v7.realp = a1;
  v7.imagp = a2;
  vDSP_ztoc(&v7, 1, a3, 2, __N);
  return ConvertFloatToInt<PCMFloat32,PCMSInt32Native>((float *)a3, (int *)a3, 2 * v4, 25, 0.0);
}

float *Float32ToNativeInt24_Portable(float *result, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  double v4;
  double v5;
  double v6;
  double v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  float v14;
  double v15;
  int v16;
  int v17;

  if ((a2 & 3) != 0)
  {
    if (!a3)
      return result;
    goto LABEL_25;
  }
  if (a3 >= 4)
  {
    v3 = a3 >> 2;
    do
    {
      v4 = *result * 2147483650.0 + 128.0;
      v5 = result[1] * 2147483650.0 + 128.0;
      v6 = result[2] * 2147483650.0 + 128.0;
      v7 = result[3] * 2147483650.0 + 128.0;
      v8 = (int)v4 - (v4 < 0.0);
      if (v4 <= -2147483650.0)
        v8 = 0x80000000;
      if (v4 >= 2147483520.0)
        v8 = 0x7FFFFFFF;
      v9 = (int)v5 - (v5 < 0.0);
      if (v5 <= -2147483650.0)
        v9 = 0x80000000;
      if (v5 >= 2147483520.0)
        v9 = 0x7FFFFFFF;
      v10 = (int)v6 - (v6 < 0.0);
      if (v6 <= -2147483650.0)
        v10 = 0x80000000;
      if (v6 >= 2147483520.0)
        v10 = 0x7FFFFFFF;
      if (v7 >= 2147483520.0)
      {
        v11 = 0x7FFFFFFF;
      }
      else if (v7 <= -2147483650.0)
      {
        v11 = 0x80000000;
      }
      else
      {
        v11 = (int)v7 - (v7 < 0.0);
      }
      v12 = v9 >> 8;
      v13 = v10 >> 8;
      *(_DWORD *)a2 = __PAIR64__(v12, v8) >> 8;
      *(_DWORD *)(a2 + 4) = (unsigned __int16)(v12 >> 8) | ((unsigned __int16)v13 << 16);
      *(_DWORD *)(a2 + 8) = v11 & 0xFFFFFF00 | BYTE2(v13);
      result += 4;
      a2 += 12;
      --v3;
    }
    while (v3);
  }
  for (a3 &= 3u; a3; --a3)
  {
LABEL_25:
    v14 = *result++;
    v15 = v14 * 2147483650.0 + 128.0;
    if (v15 >= 2147483520.0)
    {
      v16 = 0x7FFFFFFF;
    }
    else if (v15 <= -2147483650.0)
    {
      v16 = 0x80000000;
    }
    else
    {
      v16 = (int)v15 - (v15 < 0.0);
    }
    v17 = v16 >> 8;
    *(_WORD *)a2 = v17;
    *(_BYTE *)(a2 + 2) = BYTE2(v17);
    a2 += 3;
  }
  return result;
}

int *Float32ToSwapInt24_Portable(int *result, PCMSInt24Swap *this, unsigned int a3)
{
  unsigned int v3;
  PCMSInt24Swap *v4;
  float *v5;
  unsigned int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v12;
  int v13;
  int v14;
  float v15;
  double v16;
  int v17;
  int v18;

  v3 = a3;
  v4 = this;
  v5 = (float *)result;
  if ((this & 3) != 0)
  {
    if (!a3)
      return result;
    goto LABEL_25;
  }
  if (a3 >= 4)
  {
    v6 = a3 >> 2;
    do
    {
      v7 = *v5 * 2147483650.0 + 128.0;
      v8 = v5[1] * 2147483650.0 + 128.0;
      v9 = v5[2] * 2147483650.0 + 128.0;
      v10 = v5[3] * 2147483650.0 + 128.0;
      v11 = (int)v7 - (v7 < 0.0);
      if (v7 <= -2147483650.0)
        v11 = 0x80000000;
      if (v7 >= 2147483520.0)
        v11 = 0x7FFFFFFF;
      v12 = (int)v8 - (v8 < 0.0);
      if (v8 <= -2147483650.0)
        v12 = 0x80000000;
      if (v8 >= 2147483520.0)
        v12 = 0x7FFFFFFF;
      v13 = (int)v9 - (v9 < 0.0);
      if (v9 <= -2147483650.0)
        v13 = 0x80000000;
      if (v9 >= 2147483520.0)
        v13 = 0x7FFFFFFF;
      if (v10 >= 2147483520.0)
      {
        v14 = 0x7FFFFFFF;
      }
      else if (v10 <= -2147483650.0)
      {
        v14 = 0x80000000;
      }
      else
      {
        v14 = (int)v10 - (v10 < 0.0);
      }
      --v6;
      result = PCMSInt24Swap::store4((int *)v4, (unsigned __int8 *)(v11 >> 8), v12 >> 8, v13 >> 8, v14 >> 8);
      v5 += 4;
      v4 = (PCMSInt24Swap *)((char *)v4 + 12);
    }
    while (v6);
  }
  for (v3 &= 3u; v3; --v3)
  {
LABEL_25:
    v15 = *v5++;
    v16 = v15 * 2147483650.0 + 128.0;
    if (v16 >= 2147483520.0)
    {
      v17 = 0x7FFFFFFF;
    }
    else if (v16 <= -2147483650.0)
    {
      v17 = 0x80000000;
    }
    else
    {
      v17 = (int)v16 - (v16 < 0.0);
    }
    v18 = v17 >> 8;
    *(_BYTE *)v4 = BYTE2(v18);
    *((_BYTE *)v4 + 1) = BYTE1(v18);
    *((_BYTE *)v4 + 2) = v18;
    v4 = (PCMSInt24Swap *)((char *)v4 + 3);
  }
  return result;
}

int *PCMSInt24Swap::store4(int *this, unsigned __int8 *a2, int a3, int a4, int a5)
{
  *this = (unsigned __int16)a2 & 0xFF00 | (a2 << 16) & 0xFFFFFF | BYTE2(a2) | (BYTE2(a3) << 24);
  this[1] = a4 & 0xFF0000 | (unsigned __int16)(a3 << 8) | BYTE1(a3) | (BYTE1(a4) << 24);
  this[2] = bswap32(a5 & 0xFFFFFF) & 0xFFFFFF00 | a4;
  return this;
}

_DWORD *NativeInt24ToFloat32_Portable(_DWORD *result, __n128 *a2, unsigned int a3, double a4, __n128 a5, int8x8_t a6)
{
  unsigned int v6;
  float32x4_t v7;
  unsigned int v8;
  int32x4_t v9;
  unsigned __int8 *v10;

  if ((result & 3) != 0)
  {
    if (!a3)
      return result;
    goto LABEL_8;
  }
  if (a3 >= 4)
  {
    v6 = a3 >> 2;
    v7.i64[0] = 0x3000000030000000;
    v7.i64[1] = 0x3000000030000000;
    do
    {
      v8 = result[1];
      a5.n128_u32[0] = (v8 >> 8) & 0xFFFF00;
      a6.i32[0] = result[2] << 24;
      a6.i32[0] = vorr_s8((int8x8_t)a5.n128_u64[0], a6).u32[0];
      a6.i32[1] = result[2] & 0xFFFFFF00;
      v9.i32[0] = *result << 8;
      v9.i32[1] = HIWORD(*result) & 0xFF00 | (v8 << 16);
      v9.u64[1] = (unint64_t)a6;
      a5 = (__n128)vmulq_f32(vcvtq_f32_s32(v9), v7);
      *a2++ = a5;
      result += 3;
      --v6;
    }
    while (v6);
  }
  a3 &= 3u;
  if (a3)
  {
LABEL_8:
    v10 = (unsigned __int8 *)result + 2;
    do
    {
      a2->n128_f32[0] = (float)((*v10 << 24) | (*(v10 - 1) << 16) | (*(v10 - 2) << 8)) * 4.6566e-10;
      a2 = (__n128 *)((char *)a2 + 4);
      v10 += 3;
      --a3;
    }
    while (a3);
  }
  return result;
}

unsigned __int8 *SwapInt24ToFloat32_Portable(unsigned __int8 *this, float32x4_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, int *a6)
{
  unsigned int v6;
  unsigned __int8 *v8;
  unsigned int v9;
  int32x4_t v10;
  float32x4_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14[8];

  v6 = a3;
  v8 = this;
  if ((this & 3) != 0)
  {
    if (!a3)
      return this;
    goto LABEL_8;
  }
  if (a3 >= 4)
  {
    v9 = a3 >> 2;
    do
    {
      --v9;
      v13 = 0;
      *(_QWORD *)v14 = 0;
      this = (unsigned __int8 *)PCMSInt24Swap::load4(v8, &v14[4], (int *)v14, (unsigned int *)&v13 + 1, (unsigned int *)&v13, a6);
      v10.i64[0] = __PAIR64__(*(unsigned int *)v14, *(unsigned int *)&v14[4]);
      v10.i64[1] = __PAIR64__(v13, HIDWORD(v13));
      v11.i64[0] = 0x3000000030000000;
      v11.i64[1] = 0x3000000030000000;
      *a2++ = vmulq_f32(vcvtq_f32_s32(v10), v11);
      v8 += 12;
    }
    while (v9);
  }
  for (v6 &= 3u; v6; --v6)
  {
LABEL_8:
    v12 = (*v8 << 24) | (v8[1] << 16) | (v8[2] << 8);
    v8 += 3;
    a2->f32[0] = (float)v12 * 4.6566e-10;
    a2 = (float32x4_t *)((char *)a2 + 4);
  }
  return this;
}

_DWORD *PCMSInt24Swap::load4(_DWORD *this, unsigned __int8 *a2, int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  unsigned int v6;

  *(_DWORD *)a2 = *this;
  *a3 = this[1];
  v6 = this[2];
  *a4 = v6;
  *a5 = v6 & 0xFF0000 | (BYTE1(v6) << 24) | (HIBYTE(v6) << 8);
  *a4 = (*a3 >> 8) & 0xFF0000 | (BYTE2(*a3) << 24) | (*a4 << 8);
  *a3 = *a3 & 0xFF00 | (a2[3] << 24) | (*a3 << 16);
  *(_DWORD *)a2 = bswap32(*(_DWORD *)a2 & 0xFFFFFF);
  return this;
}

uint64_t NativeInt24ToNativeInt16_Portable(uint64_t result, int *a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;

  if (((a2 | result) & 3) == 0)
  {
    if (a3 < 4)
    {
LABEL_31:
      a3 &= 3u;
      if (!a3)
        return result;
      goto LABEL_32;
    }
    v3 = a3 >> 2;
    while (1)
    {
      v4 = ((int)(*(_DWORD *)result << 8) >> 15) + 1;
      if ((int)(*(_DWORD *)result << 8) < -32768)
      {
        if (v4 < 0xFFFF0000)
        {
          LOWORD(v5) = 0x8000;
          goto LABEL_12;
        }
      }
      else if (HIWORD(v4))
      {
        LOWORD(v5) = 0x7FFF;
        goto LABEL_12;
      }
      v5 = v4 >> 1;
LABEL_12:
      v6 = *(_QWORD *)result >> 16;
      v7 = (v6 >> 15) + 1;
      if (v6 < -32768)
      {
        if (v7 < 0xFFFF0000)
        {
          LOWORD(v8) = 0x8000;
          goto LABEL_18;
        }
      }
      else if (HIWORD(v7))
      {
        LOWORD(v8) = 0x7FFF;
        goto LABEL_18;
      }
      v8 = v7 >> 1;
LABEL_18:
      v9 = *(_DWORD *)(result + 8);
      v10 = *(_QWORD *)(result + 4) >> 8;
      v11 = (v10 >> 15) + 1;
      if (v10 < -32768)
      {
        if (v11 < 0xFFFF0000)
        {
          LOWORD(v12) = 0x8000;
          goto LABEL_24;
        }
      }
      else if (HIWORD(v11))
      {
        LOWORD(v12) = 0x7FFF;
        goto LABEL_24;
      }
      v12 = v11 >> 1;
LABEL_24:
      v13 = (v9 >> 15) + 1;
      if (v9 < -32768)
      {
        if (v13 >= 0xFFFF0000)
        {
LABEL_29:
          v14 = v13 >> 1;
          goto LABEL_30;
        }
        LOWORD(v14) = 0x8000;
      }
      else
      {
        if (!HIWORD(v13))
          goto LABEL_29;
        LOWORD(v14) = 0x7FFF;
      }
LABEL_30:
      *a2 = (unsigned __int16)v5 | ((unsigned __int16)v8 << 16);
      a2[1] = (unsigned __int16)v12 | ((unsigned __int16)v14 << 16);
      a2 += 2;
      result += 12;
      if (!--v3)
        goto LABEL_31;
    }
  }
  if (a3)
  {
LABEL_32:
    v15 = (unsigned __int8 *)(result + 2);
    do
    {
      v16 = (*v15 << 24) | (*(v15 - 1) << 16) | (*(v15 - 2) << 8);
      v17 = (v16 >> 15) + 1;
      if (v16 < -32768)
      {
        if (v17 >= 0xFFFF0000)
        {
LABEL_38:
          v18 = v17 >> 1;
          goto LABEL_39;
        }
        LOWORD(v18) = 0x8000;
      }
      else
      {
        if (!HIWORD(v17))
          goto LABEL_38;
        LOWORD(v18) = 0x7FFF;
      }
LABEL_39:
      *(_WORD *)a2 = v18;
      a2 = (int *)((char *)a2 + 2);
      v15 += 3;
      --a3;
    }
    while (a3);
  }
  return result;
}

unsigned __int8 *SwapInt24ToNativeInt16_Portable(unsigned __int8 *this, int *a2, unsigned int a3, uint64_t a4, uint64_t a5, int *a6)
{
  unsigned int v6;
  int *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  unsigned int i;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21[2];
  unsigned __int8 v22[8];

  v6 = a3;
  v7 = a2;
  v8 = this;
  if (((a2 | this) & 3) == 0)
  {
    if (a3 >= 4)
    {
      for (i = a3 >> 2; i; --i)
      {
        *(_QWORD *)v21 = 0;
        *(_QWORD *)v22 = 0;
        this = (unsigned __int8 *)PCMSInt24Swap::load4(v8, &v22[4], (int *)v22, (unsigned int *)&v21[1], (unsigned int *)v21, a6);
        v13 = (*(int *)&v22[4] >> 15) + 1;
        if (*(int *)&v22[4] < -32768)
        {
          if (v13 < 0xFFFF0000)
          {
            LOWORD(v14) = 0x8000;
            goto LABEL_19;
          }
        }
        else if (HIWORD(v13))
        {
          LOWORD(v14) = 0x7FFF;
          goto LABEL_19;
        }
        v14 = v13 >> 1;
LABEL_19:
        v15 = (*(int *)v22 >> 15) + 1;
        if (*(int *)v22 < -32768)
        {
          if (v15 < 0xFFFF0000)
          {
            LOWORD(v16) = 0x8000;
            goto LABEL_25;
          }
        }
        else if (HIWORD(v15))
        {
          LOWORD(v16) = 0x7FFF;
          goto LABEL_25;
        }
        v16 = v15 >> 1;
LABEL_25:
        v17 = (v21[1] >> 15) + 1;
        if (v21[1] < -32768)
        {
          if (v17 < 0xFFFF0000)
          {
            LOWORD(v18) = 0x8000;
            goto LABEL_31;
          }
        }
        else if (HIWORD(v17))
        {
          LOWORD(v18) = 0x7FFF;
          goto LABEL_31;
        }
        v18 = v17 >> 1;
LABEL_31:
        v19 = (v21[0] >> 15) + 1;
        if (v21[0] < -32768)
        {
          if (v19 >= 0xFFFF0000)
          {
LABEL_36:
            v20 = v19 >> 1;
            goto LABEL_37;
          }
          LOWORD(v20) = 0x8000;
        }
        else
        {
          if (!HIWORD(v19))
            goto LABEL_36;
          LOWORD(v20) = 0x7FFF;
        }
LABEL_37:
        *v7 = (unsigned __int16)v14 | ((unsigned __int16)v16 << 16);
        v7[1] = (unsigned __int16)v18 | ((unsigned __int16)v20 << 16);
        v7 += 2;
        v8 += 12;
      }
    }
    v6 &= 3u;
    if (!v6)
      return this;
    while (1)
    {
LABEL_3:
      v9 = (*v8 << 24) | (v8[1] << 16) | (v8[2] << 8);
      v10 = (v9 >> 15) + 1;
      if (v9 < -32768)
      {
        if (v10 >= 0xFFFF0000)
        {
LABEL_8:
          v11 = v10 >> 1;
          goto LABEL_9;
        }
        LOWORD(v11) = 0x8000;
      }
      else
      {
        if (!HIWORD(v10))
          goto LABEL_8;
        LOWORD(v11) = 0x7FFF;
      }
LABEL_9:
      *(_WORD *)v7 = v11;
      v7 = (int *)((char *)v7 + 2);
      v8 += 3;
      if (!--v6)
        return this;
    }
  }
  if (a3)
    goto LABEL_3;
  return this;
}

unsigned int *NativeInt16ToNativeInt24_Portable(unsigned int *result, uint64_t a2, unsigned int a3)
{
  __int16 v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  if (((a2 | result) & 3) != 0)
  {
    if (!a3)
      return result;
    goto LABEL_3;
  }
  if (a3 >= 4)
  {
    v4 = a3 >> 2;
    do
    {
      v5 = *result;
      v6 = result[1];
      result += 2;
      *(_DWORD *)a2 = (unsigned __int16)v5 << 8;
      *(_DWORD *)(a2 + 4) = HIWORD(v5) | (v6 << 24);
      *(_DWORD *)(a2 + 8) = v6 & 0xFFFF0000 | BYTE1(v6);
      a2 += 12;
      --v4;
    }
    while (v4);
  }
  for (a3 &= 3u; a3; --a3)
  {
LABEL_3:
    v3 = *(_WORD *)result;
    result = (unsigned int *)((char *)result + 2);
    *(_BYTE *)a2 = 0;
    *(_WORD *)(a2 + 1) = v3;
    a2 += 3;
  }
  return result;
}

int *NativeInt16ToSwapInt24_Portable(int *result, PCMSInt24Swap *this, unsigned int a3)
{
  unsigned int v3;
  PCMSInt24Swap *v4;
  int *v5;
  __int16 v6;
  unsigned int v7;
  int v8;
  int v9;

  v3 = a3;
  v4 = this;
  v5 = result;
  if (((this | result) & 3) != 0)
  {
    if (!a3)
      return result;
    goto LABEL_3;
  }
  if (a3 >= 4)
  {
    v7 = a3 >> 2;
    do
    {
      --v7;
      v8 = *v5;
      v9 = v5[1];
      v5 += 2;
      result = PCMSInt24Swap::store4((int *)v4, (unsigned __int8 *)((__int16)v8 << 8), (v8 >> 8) & 0xFFFFFF00, (__int16)v9 << 8, (v9 >> 8) & 0xFFFFFF00);
      v4 = (PCMSInt24Swap *)((char *)v4 + 12);
    }
    while (v7);
  }
  for (v3 &= 3u; v3; --v3)
  {
LABEL_3:
    v6 = *(_WORD *)v5;
    v5 = (int *)((char *)v5 + 2);
    *(_BYTE *)v4 = HIBYTE(v6);
    *((_BYTE *)v4 + 1) = v6;
    *((_BYTE *)v4 + 2) = 0;
    v4 = (PCMSInt24Swap *)((char *)v4 + 3);
  }
  return result;
}

uint64_t NativeInt16ToUInt8_Portable(uint64_t result, _BYTE *a2, int a3)
{
  char v3;

  for (; a3; --a3)
  {
    v3 = *(_BYTE *)(result + 1);
    result += 2;
    *a2++ = v3 ^ 0x80;
  }
  return result;
}

uint64_t NativeInt16ToSInt8_Portable(uint64_t result, _BYTE *a2, int a3)
{
  char v3;

  for (; a3; --a3)
  {
    v3 = *(_BYTE *)(result + 1);
    result += 2;
    *a2++ = v3;
  }
  return result;
}

float *Float32ToUInt8(float *result, _BYTE *a2, unsigned int a3)
{
  double v3;
  float v4;
  double v5;
  int v6;
  int v7;
  float *v8;
  double v9;
  unsigned int v10;
  float *v11;
  _BYTE *v12;
  double v13;
  double v14;
  int v15;
  double v16;
  double v17;
  int v18;
  float v19;
  double v20;
  int v21;
  float v22;
  double v23;
  double v24;
  unsigned int v25;
  double v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  double v30;
  int v31;

  if (a3 >= 8)
  {
    v3 = *result * 2147483650.0 + 8388608.0;
    v4 = result[2];
    v5 = result[1] * 2147483650.0 + 8388608.0;
    v6 = (int)v3 - (v3 < 0.0);
    if (v3 <= -2147483650.0)
      HIBYTE(v6) = 0x80;
    if (v3 < 2139095040.0)
      HIBYTE(v7) = HIBYTE(v6);
    else
      HIBYTE(v7) = 127;
    v8 = result + 3;
    v9 = v4;
    v10 = (a3 - 4) >> 2;
    do
    {
      v11 = v8;
      v12 = a2;
      v13 = *v8;
      v14 = v9 * 2147483650.0 + 8388608.0;
      v15 = (int)v5 - (v5 < 0.0);
      if (v5 <= -2147483650.0)
        HIBYTE(v15) = 0x80;
      if (v5 >= 2139095040.0)
        HIBYTE(v15) = 127;
      *a2 = HIBYTE(v7) ^ 0x80;
      v16 = v11[1];
      v17 = v13 * 2147483650.0 + 8388608.0;
      v18 = (int)v14 - (v14 < 0.0);
      if (v14 <= -2147483650.0)
        HIBYTE(v18) = 0x80;
      if (v14 >= 2139095040.0)
        HIBYTE(v18) = 127;
      a2[1] = HIBYTE(v15) ^ 0x80;
      v19 = v11[2];
      v20 = v16 * 2147483650.0 + 8388608.0;
      v21 = (int)v17 - (v17 < 0.0);
      if (v17 <= -2147483650.0)
        HIBYTE(v21) = 0x80;
      if (v17 >= 2139095040.0)
        HIBYTE(v21) = 127;
      a2[2] = HIBYTE(v18) ^ 0x80;
      if (v20 >= 2139095040.0)
      {
        HIBYTE(v7) = 127;
      }
      else if (v20 <= -2147483650.0)
      {
        HIBYTE(v7) = 0x80;
      }
      else
      {
        v7 = (int)v20 - (v20 < 0.0);
      }
      v22 = v11[3];
      v5 = v19 * 2147483650.0 + 8388608.0;
      a2[3] = HIBYTE(v21) ^ 0x80;
      v8 = v11 + 4;
      a2 += 4;
      v9 = v22;
      --v10;
    }
    while (v10);
    a3 &= 3u;
    v23 = *v8;
    v24 = v9 * 2147483650.0 + 8388608.0;
    v25 = (((int)v5 - (v5 < 0.0)) >> 24) ^ 0xFFFFFF80;
    if (v5 <= -2147483650.0)
      LOBYTE(v25) = 0;
    if (v5 >= 2139095040.0)
      LOBYTE(v25) = -1;
    *a2 = HIBYTE(v7) ^ 0x80;
    v26 = v23 * 2147483650.0 + 8388608.0;
    v27 = (((int)v24 - (v24 < 0.0)) >> 24) ^ 0xFFFFFF80;
    if (v24 <= -2147483650.0)
      LOBYTE(v27) = 0;
    if (v24 < 2139095040.0)
      v28 = v27;
    else
      v28 = -1;
    v12[5] = v25;
    if (v26 >= 2139095040.0)
    {
      LOBYTE(v29) = -1;
    }
    else if (v26 <= -2147483650.0)
    {
      LOBYTE(v29) = 0;
    }
    else
    {
      v29 = (((int)v26 - (v26 < 0.0)) >> 24) ^ 0xFFFFFF80;
    }
    v12[6] = v28;
    v12[7] = v29;
    result = v11 + 5;
    a2 = v12 + 8;
  }
  for (; a3; --a3)
  {
    v30 = *result * 2147483650.0 + 8388608.0;
    if (v30 >= 2139095040.0)
    {
      HIBYTE(v31) = 127;
    }
    else if (v30 <= -2147483650.0)
    {
      HIBYTE(v31) = 0x80;
    }
    else
    {
      v31 = (int)v30 - (v30 < 0.0);
    }
    *a2++ = HIBYTE(v31) ^ 0x80;
    ++result;
  }
  return result;
}

float *Float32ToSInt8(float *result, _BYTE *a2, unsigned int a3)
{
  double v3;
  float v4;
  double v5;
  int v6;
  int v7;
  float *v8;
  double v9;
  unsigned int v10;
  float *v11;
  _BYTE *v12;
  double v13;
  double v14;
  int v15;
  double v16;
  double v17;
  int v18;
  float v19;
  double v20;
  int v21;
  float v22;
  double v23;
  double v24;
  char v25;
  double v26;
  char v27;
  char v28;
  unsigned int v29;
  double v30;
  int v31;

  if (a3 >= 8)
  {
    v3 = *result * 2147483650.0 + 8388608.0;
    v4 = result[2];
    v5 = result[1] * 2147483650.0 + 8388608.0;
    v6 = (int)v3 - (v3 < 0.0);
    if (v3 <= -2147483650.0)
      HIBYTE(v6) = 0x80;
    if (v3 < 2139095040.0)
      HIBYTE(v7) = HIBYTE(v6);
    else
      HIBYTE(v7) = 127;
    v8 = result + 3;
    v9 = v4;
    v10 = (a3 - 4) >> 2;
    do
    {
      v11 = v8;
      v12 = a2;
      v13 = *v8;
      v14 = v9 * 2147483650.0 + 8388608.0;
      v15 = (int)v5 - (v5 < 0.0);
      if (v5 <= -2147483650.0)
        HIBYTE(v15) = 0x80;
      if (v5 >= 2139095040.0)
        HIBYTE(v15) = 127;
      *a2 = HIBYTE(v7);
      v16 = v11[1];
      v17 = v13 * 2147483650.0 + 8388608.0;
      v18 = (int)v14 - (v14 < 0.0);
      if (v14 <= -2147483650.0)
        HIBYTE(v18) = 0x80;
      if (v14 >= 2139095040.0)
        HIBYTE(v18) = 127;
      a2[1] = HIBYTE(v15);
      v19 = v11[2];
      v20 = v16 * 2147483650.0 + 8388608.0;
      v21 = (int)v17 - (v17 < 0.0);
      if (v17 <= -2147483650.0)
        HIBYTE(v21) = 0x80;
      if (v17 >= 2139095040.0)
        HIBYTE(v21) = 127;
      a2[2] = HIBYTE(v18);
      if (v20 >= 2139095040.0)
      {
        HIBYTE(v7) = 127;
      }
      else if (v20 <= -2147483650.0)
      {
        HIBYTE(v7) = 0x80;
      }
      else
      {
        v7 = (int)v20 - (v20 < 0.0);
      }
      v22 = v11[3];
      v5 = v19 * 2147483650.0 + 8388608.0;
      a2[3] = HIBYTE(v21);
      v8 = v11 + 4;
      a2 += 4;
      v9 = v22;
      --v10;
    }
    while (v10);
    a3 &= 3u;
    v23 = *v8;
    v24 = v9 * 2147483650.0 + 8388608.0;
    if (v5 > -2147483650.0)
      v25 = ((int)v5 - (v5 < 0.0)) >> 24;
    else
      v25 = 0x80;
    if (v5 >= 2139095040.0)
      v25 = 127;
    *a2 = HIBYTE(v7);
    v26 = v23 * 2147483650.0 + 8388608.0;
    if (v24 > -2147483650.0)
      v27 = ((int)v24 - (v24 < 0.0)) >> 24;
    else
      v27 = 0x80;
    if (v24 < 2139095040.0)
      v28 = v27;
    else
      v28 = 127;
    v12[5] = v25;
    if (v26 >= 2139095040.0)
    {
      LOBYTE(v29) = 127;
    }
    else if (v26 <= -2147483650.0)
    {
      LOBYTE(v29) = 0x80;
    }
    else
    {
      v29 = ((int)v26 - (v26 < 0.0)) >> 24;
    }
    v12[6] = v28;
    v12[7] = v29;
    result = v11 + 5;
    a2 = v12 + 8;
  }
  for (; a3; --a3)
  {
    v30 = *result * 2147483650.0 + 8388608.0;
    if (v30 >= 2139095040.0)
    {
      HIBYTE(v31) = 127;
    }
    else if (v30 <= -2147483650.0)
    {
      HIBYTE(v31) = 0x80;
    }
    else
    {
      v31 = (int)v30 - (v30 < 0.0);
    }
    *a2++ = HIBYTE(v31);
    ++result;
  }
  return result;
}

void UInt8ToFloat32(char *a1, float *a2, int a3)
{
  float v6;
  unsigned int v7;
  char v8;
  char v9;
  char v10;
  float *v11;
  int v12;
  char v13;
  float v14;
  float v15;
  unsigned int v16;
  int v17;
  float v18;
  char v19;
  float v20;
  char v21;
  float v22;
  char v23;

  v6 = scalbnf(1.0, -7);
  v7 = a3 - 4;
  if (a3 >= 4)
  {
    v8 = a1[1];
    v9 = a1[2];
    v10 = a1[3];
    *a2 = v6 * (float)(char)(*a1 ^ 0x80);
    v11 = a2 + 1;
    a3 &= 3u;
    v12 = (char)(v9 ^ 0x80);
    v13 = v10 ^ 0x80;
    v14 = v6 * (float)(char)(v8 ^ 0x80);
    a1 += 4;
    v15 = (float)v12;
    if (v7 >= 4)
    {
      v16 = v7 >> 2;
      do
      {
        v17 = (char)(*a1 ^ 0x80);
        v18 = (float)v13;
        *v11 = v14;
        v19 = a1[1];
        v20 = (float)v17;
        v11[1] = v6 * v15;
        LOBYTE(v17) = a1[2];
        v11[2] = v6 * v18;
        v21 = a1[3];
        v11[3] = v6 * v20;
        v11 += 4;
        v22 = (float)(char)(v19 ^ 0x80);
        v13 = v21 ^ 0x80;
        v14 = v6 * v22;
        a1 += 4;
        v15 = (float)(char)(v17 ^ 0x80);
        --v16;
      }
      while (v16);
    }
    *v11 = v14;
    v11[1] = v6 * v15;
    v11[2] = v6 * (float)v13;
    a2 = v11 + 3;
  }
  for (; a3; --a3)
  {
    v23 = *a1++;
    *a2++ = v6 * (float)(char)(v23 ^ 0x80);
  }
}

void SInt8ToFloat32(char *a1, float *a2, int a3)
{
  float v6;
  unsigned int v7;
  int v8;
  int v9;
  char v10;
  float *v11;
  float v12;
  float v13;
  unsigned int v14;
  int v15;
  int v16;
  float v17;
  int v18;
  int v19;

  v6 = scalbnf(1.0, -7);
  v7 = a3 - 4;
  if (a3 >= 4)
  {
    v8 = a1[1];
    v9 = a1[2];
    v10 = a1[3];
    *a2 = v6 * (float)*a1;
    v11 = a2 + 1;
    a3 &= 3u;
    v12 = v6 * (float)v8;
    a1 += 4;
    v13 = (float)v9;
    if (v7 >= 4)
    {
      v14 = v7 >> 2;
      do
      {
        v15 = *a1;
        *v11 = v12;
        v16 = a1[1];
        v17 = (float)v15;
        v11[1] = v6 * v13;
        v18 = a1[2];
        v11[2] = v6 * (float)v10;
        v10 = a1[3];
        v11[3] = v6 * v17;
        v11 += 4;
        v12 = v6 * (float)v16;
        a1 += 4;
        v13 = (float)v18;
        --v14;
      }
      while (v14);
    }
    *v11 = v12;
    v11[1] = v6 * v13;
    v11[2] = v6 * (float)v10;
    a2 = v11 + 3;
  }
  for (; a3; --a3)
  {
    v19 = *a1++;
    *a2++ = v6 * (float)v19;
  }
}

unsigned __int8 *UInt8ToNativeInt16_Portable(unsigned __int8 *result, uint64_t a2, unsigned int a3)
{
  unsigned __int16 v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned __int16 v7;

  if (((a2 | result) & 3) != 0)
  {
    for (; a3; --a3)
    {
      v3 = *result++;
      *(_WORD *)a2 = (v3 ^ 0x80) << 8;
      a2 += 2;
    }
  }
  else
  {
    if (a3 >= 4)
    {
      v4 = a3 >> 2;
      do
      {
        v5 = *(_DWORD *)result;
        result += 4;
        *(_DWORD *)a2 = ((v5 ^ 0x80808080) << 16) & 0xFF000000 | ((v5 ^ 0x80) << 8);
        *(_DWORD *)(a2 + 4) = ((v5 ^ 0x80808080) >> 8) & 0xFF00 | (v5 ^ 0x80808080) & 0xFF000000;
        a2 += 8;
        --v4;
      }
      while (v4);
    }
    v6 = a3 & 3;
    if ((a3 & 3) != 0)
    {
      do
      {
        v7 = *result++;
        *(_WORD *)a2 = (v7 ^ 0x80) << 8;
        a2 += 2;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

unsigned __int8 *SInt8ToNativeInt16_Portable(unsigned __int8 *result, uint64_t a2, unsigned int a3)
{
  __int16 v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  __int16 v7;

  if (((a2 | result) & 3) != 0)
  {
    for (; a3; --a3)
    {
      v3 = *result++;
      *(_WORD *)a2 = v3 << 8;
      a2 += 2;
    }
  }
  else
  {
    if (a3 >= 4)
    {
      v4 = a3 >> 2;
      do
      {
        v5 = *(_DWORD *)result;
        result += 4;
        *(_DWORD *)a2 = (v5 << 16) & 0xFF000000 | (v5 << 8);
        *(_DWORD *)(a2 + 4) = (v5 >> 8) & 0xFF00 | v5 & 0xFF000000;
        a2 += 8;
        --v4;
      }
      while (v4);
    }
    v6 = a3 & 3;
    if ((a3 & 3) != 0)
    {
      do
      {
        v7 = *result++;
        *(_WORD *)a2 = v7 << 8;
        a2 += 2;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

unsigned int *SwapPCM64_Portable(unsigned int *result, _DWORD *a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  if (a3 >= 2)
  {
    v3 = a3 >> 1;
    do
    {
      v4 = *result;
      v5 = result[2];
      v6 = result[3];
      *a2 = bswap32(result[1]);
      a2[1] = bswap32(v4);
      a2[2] = bswap32(v6);
      a2[3] = bswap32(v5);
      result += 4;
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  if ((a3 & 1) != 0)
  {
    v7 = *result;
    *a2 = bswap32(result[1]);
    a2[1] = bswap32(v7);
  }
  return result;
}

unsigned int *SwapPCM32_Portable(unsigned int *result, _DWORD *a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;

  if (a3 >= 4)
  {
    v3 = a3 >> 2;
    do
    {
      v4 = result[1];
      v5 = result[2];
      v6 = result[3];
      *a2 = bswap32(*result);
      a2[1] = bswap32(v4);
      a2[2] = bswap32(v5);
      a2[3] = bswap32(v6);
      result += 4;
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  v7 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      v8 = *result++;
      *a2++ = bswap32(v8);
      --v7;
    }
    while (v7);
  }
  return result;
}

int *SwapPCM24_Portable(int *result, PCMSInt24Swap *this, unsigned int a3)
{
  unsigned int v3;
  PCMSInt24Swap *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v8;

  v3 = a3;
  v4 = this;
  v5 = (uint64_t)result;
  if (((this | result) & 3) != 0)
  {
    if (!a3)
      return result;
    goto LABEL_8;
  }
  if (a3 >= 4)
  {
    v6 = a3 >> 2;
    do
    {
      --v6;
      result = PCMSInt24Swap::store4((int *)v4, (unsigned __int8 *)((int)(*(_DWORD *)v5 << 8) >> 8), (int)(*(_QWORD *)v5 >> 16) >> 8, (int)(*(_QWORD *)(v5 + 4) >> 8) >> 8, *(int *)(v5 + 8) >> 8);
      v5 += 12;
      v4 = (PCMSInt24Swap *)((char *)v4 + 12);
    }
    while (v6);
  }
  v3 &= 3u;
  if (v3)
  {
LABEL_8:
    v7 = (unsigned __int8 *)(v5 + 2);
    do
    {
      v8 = ((*v7 << 24) | (*(v7 - 1) << 16) | (*(v7 - 2) << 8)) >> 8;
      *(_BYTE *)v4 = BYTE2(v8);
      *((_BYTE *)v4 + 1) = BYTE1(v8);
      *((_BYTE *)v4 + 2) = v8;
      v4 = (PCMSInt24Swap *)((char *)v4 + 3);
      v7 += 3;
      --v3;
    }
    while (v3);
  }
  return result;
}

unsigned __int16 *SwapPCM16_Portable(unsigned __int16 *result, _WORD *a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;

  if (a3 >= 4)
  {
    v3 = a3 >> 2;
    do
    {
      v4 = result[1];
      v5 = result[2];
      v6 = result[3];
      *a2 = bswap32(*result) >> 16;
      a2[1] = bswap32(v4) >> 16;
      a2[2] = bswap32(v5) >> 16;
      a2[3] = bswap32(v6) >> 16;
      result += 4;
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  v7 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      v8 = *result++;
      *a2++ = bswap32(v8) >> 16;
      --v7;
    }
    while (v7);
  }
  return result;
}

float32x2_t *StereoInterleave32_Portable(float32x2_t *result, float32x2_t *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2x2_t v7;

  if (a4 >= 2)
  {
    v4 = a4 >> 1;
    do
    {
      v5 = *result++;
      v7.val[0] = v5;
      v6 = *a2++;
      v7.val[1] = v6;
      vst2_f32((float *)a3, v7);
      a3 += 16;
      --v4;
    }
    while (v4);
  }
  if ((a4 & 1) != 0)
  {
    *(_DWORD *)a3 = result->i32[0];
    *(_DWORD *)(a3 + 4) = a2->i32[0];
  }
  return result;
}

__int16 *UpmixMonoToStereoInterleaved16_Portable(__int16 *result, _WORD *a2, unsigned int a3)
{
  unsigned int v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;

  if (a3 >= 2)
  {
    v3 = a3 >> 1;
    do
    {
      v4 = *result;
      v5 = result[1];
      result += 2;
      *a2 = v4;
      a2[1] = v4;
      a2[2] = v5;
      a2[3] = v5;
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  if ((a3 & 1) != 0)
  {
    v6 = *result;
    a2[1] = *result;
    *a2 = v6;
  }
  return result;
}

float32x2_t *UpmixMonoToStereoInterleaved32_Portable(float32x2_t *result, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  float32x2_t v4;
  __int32 v5;
  float32x2x2_t v6;

  if (a3 >= 2)
  {
    v3 = a3 >> 1;
    do
    {
      v4 = *result++;
      v6.val[0] = v4;
      v6.val[1] = v4;
      vst2_f32((float *)a2, v6);
      a2 += 16;
      --v3;
    }
    while (v3);
  }
  if ((a3 & 1) != 0)
  {
    v5 = result->i32[0];
    *(_DWORD *)a2 = result->i32[0];
    *(_DWORD *)(a2 + 4) = v5;
  }
  return result;
}

__int16 *DownmixStereoInterleavedInt16ToMono_Portable(__int16 *result, _WORD *a2, unsigned int a3)
{
  unsigned int v3;
  __int16 *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  if (a3 < 2)
  {
    if ((a3 & 1) != 0)
      goto LABEL_19;
    return result;
  }
  v3 = a3 >> 1;
  do
  {
    v4 = result;
    v5 = 23170 * (result[1] + *result);
    if (result[1] + *result < 0)
    {
      if (v5 >> 30 != 3)
      {
        LOWORD(v6) = 0x8000;
        goto LABEL_11;
      }
    }
    else if (v5 >> 30)
    {
      LOWORD(v6) = 0x7FFF;
      goto LABEL_11;
    }
    v6 = v5 >> 15;
LABEL_11:
    v7 = result[2];
    v8 = result[3];
    *a2 = v6;
    v9 = 23170 * (v8 + v7);
    if (v8 + v7 < 0)
    {
      if (v9 >> 30 != 3)
      {
        LOWORD(v10) = 0x8000;
        goto LABEL_17;
      }
    }
    else if (v9 >> 30)
    {
      LOWORD(v10) = 0x7FFF;
      goto LABEL_17;
    }
    v10 = v9 >> 15;
LABEL_17:
    a2[1] = v10;
    a2 += 2;
    result += 4;
    --v3;
  }
  while (v3);
  result = v4 + 4;
  if ((a3 & 1) != 0)
  {
LABEL_19:
    v11 = 23170 * (result[1] + *result);
    if (result[1] + *result < 0)
    {
      if (v11 >> 30 == 3)
        goto LABEL_24;
      LOWORD(v12) = 0x8000;
    }
    else
    {
      if (v11 >> 30)
      {
        LOWORD(v12) = 0x7FFF;
        goto LABEL_25;
      }
LABEL_24:
      v12 = v11 >> 15;
    }
LABEL_25:
    *a2 = v12;
  }
  return result;
}

int *DownmixStereoInterleavedInt32ToMono_Portable(int *result, _DWORD *a2, unsigned int a3)
{
  unsigned int v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (a3 < 2)
  {
    if ((a3 & 1) != 0)
      goto LABEL_19;
    return result;
  }
  v3 = a3 >> 1;
  do
  {
    v4 = result;
    v5 = 1518500250 * (result[1] + (uint64_t)*result);
    if (result[1] + (uint64_t)*result < 0)
    {
      if (v5 >> 62 != 3)
      {
        LODWORD(v6) = 0x80000000;
        goto LABEL_11;
      }
    }
    else if (v5 >> 62)
    {
      LODWORD(v6) = 0x7FFFFFFF;
      goto LABEL_11;
    }
    v6 = v5 >> 31;
LABEL_11:
    v7 = result[2];
    v8 = result[3];
    *a2 = v6;
    v9 = 1518500250 * (v8 + v7);
    if (v8 + v7 < 0)
    {
      if (v9 >> 62 != 3)
      {
        LODWORD(v10) = 0x80000000;
        goto LABEL_17;
      }
    }
    else if (v9 >> 62)
    {
      LODWORD(v10) = 0x7FFFFFFF;
      goto LABEL_17;
    }
    v10 = v9 >> 31;
LABEL_17:
    a2[1] = v10;
    a2 += 2;
    result += 4;
    --v3;
  }
  while (v3);
  result = v4 + 4;
  if ((a3 & 1) != 0)
  {
LABEL_19:
    v11 = 1518500250 * (result[1] + (uint64_t)*result);
    if (result[1] + (uint64_t)*result < 0)
    {
      if (v11 >> 62 == 3)
        goto LABEL_24;
      LODWORD(v12) = 0x80000000;
    }
    else
    {
      if (v11 >> 62)
      {
        LODWORD(v12) = 0x7FFFFFFF;
        goto LABEL_25;
      }
LABEL_24:
      v12 = v11 >> 31;
    }
LABEL_25:
    *a2 = v12;
  }
  return result;
}

float DownmixStereoInterleavedFloat32ToMono_Portable(uint64_t a1, float32x2_t *a2, unsigned int a3, double a4)
{
  unsigned int v4;
  float32x2_t v5;
  uint64_t v6;

  if (a3 < 2)
  {
    if ((a3 & 1) == 0)
      return *(float *)&a4;
    goto LABEL_7;
  }
  v4 = a3 >> 1;
  a4 = COERCE_DOUBLE(vdup_n_s32(0x3F3504F3u));
  do
  {
    v5.i32[0] = *(_DWORD *)a1;
    v6 = a1 + 16;
    v5.i32[1] = *(_DWORD *)(a1 + 12);
    *a2++ = vmul_f32(vadd_f32(*(float32x2_t *)(a1 + 4), v5), *(float32x2_t *)&a4);
    a1 += 16;
    --v4;
  }
  while (v4);
  a1 = v6;
  if ((a3 & 1) != 0)
  {
LABEL_7:
    *(float *)&a4 = (float)(*(float *)a1 + *(float *)(a1 + 4)) * 0.70711;
    a2->i32[0] = LODWORD(a4);
  }
  return *(float *)&a4;
}

unsigned __int16 *NativeInt16ToNativeInt32_Portable(unsigned __int16 *result, __n128 *a2, unsigned int a3, int a4, double a5, double a6, int32x4_t a7)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  int8x16_t v10;
  int32x4_t v11;
  unint64_t v12;
  int32x4_t v13;

  v7 = 16 - a4;
  if (((a2 | result) & 3) != 0)
  {
    if (!a3)
      return result;
    goto LABEL_3;
  }
  if (a3 >= 4)
  {
    v9 = a3 >> 2;
    v10.i64[0] = 0xFFFF0000FFFF0000;
    v10.i64[1] = 0xFFFF0000FFFF0000;
    v11 = vnegq_s32(vdupq_n_s32(v7));
    do
    {
      v12 = *(_QWORD *)result;
      result += 4;
      a7.i64[0] = v12;
      v13 = vzip1q_s32(a7, a7);
      a7 = vshlq_s32(vtrn2q_s32(vrev64q_s32(vshlq_n_s32(v13, 0x10uLL)), (int32x4_t)vandq_s8((int8x16_t)v13, v10)), v11);
      *a2++ = (__n128)a7;
      --v9;
    }
    while (v9);
  }
  for (a3 &= 3u; a3; --a3)
  {
LABEL_3:
    v8 = *result++;
    a2->n128_u32[0] = v8 << 16 >> v7;
    a2 = (__n128 *)((char *)a2 + 4);
  }
  return result;
}

int8x8_t *SwapInt16ToNativeInt32_Portable(int8x8_t *result, int32x4_t *a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int32x4_t v7;

  v4 = 16 - a4;
  if (((a2 | result) & 3) != 0)
  {
    if (!a3)
      return result;
    goto LABEL_3;
  }
  if (a3 >= 4)
  {
    v6 = a3 >> 2;
    v7 = vnegq_s32(vdupq_n_s32(v4));
    do
    {
      *a2++ = vshlq_s32(vshll_n_s16((int16x4_t)vrev16_s8(*result++), 0x10uLL), v7);
      --v6;
    }
    while (v6);
  }
  for (a3 &= 3u; a3; --a3)
  {
LABEL_3:
    v5 = result->u16[0];
    result = (int8x8_t *)((char *)result + 2);
    a2->i32[0] = (int)(bswap32(v5) & 0xFFFF0000) >> v4;
    a2 = (int32x4_t *)((char *)a2 + 4);
  }
  return result;
}

uint32x2_t *NativeInt24ToNativeInt32_Portable(uint32x2_t *result, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  int32x2_t v6;
  __int32 v7;
  uint32x2_t v8;
  uint32x2_t *v9;

  v4 = 8 - a4;
  if (((a2 | result) & 3) != 0)
  {
    if (!a3)
      return result;
    goto LABEL_8;
  }
  if (a3 >= 4)
  {
    v5 = a3 >> 2;
    v6 = vneg_s32(vdup_n_s32(v4));
    do
    {
      v7 = result[1].i32[0];
      v8 = *result;
      result = (uint32x2_t *)((char *)result + 12);
      *(_DWORD *)a2 = v8.i32[0] << 8 >> v4;
      *(int32x2_t *)(a2 + 4) = vshl_s32((int32x2_t)vorr_s8(vand_s8((int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFFFF000000FF00), (int8x8_t)vrev64_s32((int32x2_t)vshl_u32((uint32x2_t)__PAIR64__(v8.u32[1], v7), (uint32x2_t)0x1000000018))), v6);
      *(_DWORD *)(a2 + 12) = (int)(v7 & 0xFFFFFF00) >> v4;
      a2 += 16;
      --v5;
    }
    while (v5);
  }
  a3 &= 3u;
  if (a3)
  {
LABEL_8:
    v9 = (uint32x2_t *)((char *)result + 2);
    do
    {
      *(_DWORD *)a2 = ((v9->u8[0] << 24) | (v9[-1].u8[7] << 16) | (v9[-1].u8[6] << 8)) >> v4;
      a2 += 4;
      v9 = (uint32x2_t *)((char *)v9 + 3);
      --a3;
    }
    while (a3);
  }
  return result;
}

unsigned __int8 *SwapInt24ToNativeInt32_Portable(unsigned __int8 *this, int *a2, unsigned int a3, char a4, uint64_t a5, int *a6)
{
  unsigned int v6;
  int *v7;
  unsigned __int8 *v8;
  char v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14[2];
  unsigned __int8 v15[8];

  v6 = a3;
  v7 = a2;
  v8 = this;
  v9 = 8 - a4;
  if (((a2 | this) & 3) != 0)
  {
    if (!a3)
      return this;
    goto LABEL_3;
  }
  if (a3 >= 4)
  {
    v10 = a3 >> 2;
    do
    {
      --v10;
      *(_QWORD *)v14 = 0;
      *(_QWORD *)v15 = 0;
      this = (unsigned __int8 *)PCMSInt24Swap::load4(v8, &v15[4], (int *)v15, (unsigned int *)&v14[1], (unsigned int *)v14, a6);
      v11 = *(int *)v15 >> v9;
      v12 = v14[1] >> v9;
      v13 = v14[0] >> v9;
      *v7 = *(int *)&v15[4] >> v9;
      v7[1] = v11;
      v7[2] = v12;
      v7[3] = v13;
      v8 += 12;
      v7 += 4;
    }
    while (v10);
  }
  for (v6 &= 3u; v6; --v6)
  {
LABEL_3:
    *v7++ = ((*v8 << 24) | (v8[1] << 16) | (v8[2] << 8)) >> v9;
    v8 += 3;
  }
  return this;
}

int *NativeInt32ToNativeInt16_Portable(int *result, int *a2, unsigned int a3, char a4)
{
  char v4;
  int v5;
  int v6;
  int v7;
  unsigned int i;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v4 = a4 - 1;
  if (((a2 | result) & 3) == 0)
  {
    if (a3 >= 4)
    {
      for (i = a3 >> 2; i; --i)
      {
        v9 = *result >> v4;
        v10 = v9 + 1;
        if (v9 < -1)
        {
          if (v10 < 0xFFFF0000)
          {
            LOWORD(v11) = 0x8000;
            goto LABEL_19;
          }
        }
        else if (HIWORD(v10))
        {
          LOWORD(v11) = 0x7FFF;
          goto LABEL_19;
        }
        v11 = v10 >> 1;
LABEL_19:
        v12 = result[1] >> v4;
        v13 = v12 + 1;
        if (v12 < -1)
        {
          if (v13 < 0xFFFF0000)
          {
            LOWORD(v14) = 0x8000;
            goto LABEL_25;
          }
        }
        else if (HIWORD(v13))
        {
          LOWORD(v14) = 0x7FFF;
          goto LABEL_25;
        }
        v14 = v13 >> 1;
LABEL_25:
        v15 = result[2] >> v4;
        v16 = v15 + 1;
        if (v15 < -1)
        {
          if (v16 < 0xFFFF0000)
          {
            LOWORD(v17) = 0x8000;
            goto LABEL_31;
          }
        }
        else if (HIWORD(v16))
        {
          LOWORD(v17) = 0x7FFF;
          goto LABEL_31;
        }
        v17 = v16 >> 1;
LABEL_31:
        v18 = result[3] >> v4;
        v19 = v18 + 1;
        if (v18 < -1)
        {
          if (v19 >= 0xFFFF0000)
          {
LABEL_36:
            v20 = v19 >> 1;
            goto LABEL_37;
          }
          LOWORD(v20) = 0x8000;
        }
        else
        {
          if (!HIWORD(v19))
            goto LABEL_36;
          LOWORD(v20) = 0x7FFF;
        }
LABEL_37:
        *a2 = (unsigned __int16)v11 | ((unsigned __int16)v14 << 16);
        a2[1] = (unsigned __int16)v17 | ((unsigned __int16)v20 << 16);
        a2 += 2;
        result += 4;
      }
    }
    a3 &= 3u;
    if (!a3)
      return result;
    while (1)
    {
LABEL_3:
      v5 = *result >> v4;
      v6 = v5 + 1;
      if (v5 < -1)
      {
        if (v6 >= 0xFFFF0000)
        {
LABEL_8:
          v7 = v6 >> 1;
          goto LABEL_9;
        }
        LOWORD(v7) = 0x8000;
      }
      else
      {
        if (!HIWORD(v6))
          goto LABEL_8;
        LOWORD(v7) = 0x7FFF;
      }
LABEL_9:
      *(_WORD *)a2 = v7;
      a2 = (int *)((char *)a2 + 2);
      ++result;
      if (!--a3)
        return result;
    }
  }
  if (a3)
    goto LABEL_3;
  return result;
}

int *NativeInt32ToSwapInt16_Portable(int *result, _WORD *a2, unsigned int a3, char a4)
{
  char v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int i;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  v4 = a4 - 1;
  if (((a2 | result) & 3) == 0)
  {
    if (a3 >= 4)
    {
      for (i = a3 >> 2; i; --i)
      {
        v9 = *result >> v4;
        v10 = v9 + 1;
        if (v9 < -1)
        {
          if (v10 < 0xFFFF0000)
          {
            v11 = -32768;
            goto LABEL_19;
          }
        }
        else if (HIWORD(v10))
        {
          v11 = 0x7FFF;
          goto LABEL_19;
        }
        v11 = v10 >> 1;
LABEL_19:
        v12 = result[1] >> v4;
        v13 = v12 + 1;
        if (v12 < -1)
        {
          if (v13 < 0xFFFF0000)
          {
            v14 = -32768;
            goto LABEL_25;
          }
        }
        else if (HIWORD(v13))
        {
          v14 = 0x7FFF;
          goto LABEL_25;
        }
        v14 = v13 >> 1;
LABEL_25:
        v15 = result[2] >> v4;
        v16 = v15 + 1;
        if (v15 < -1)
        {
          if (v16 < 0xFFFF0000)
          {
            v17 = -32768;
            goto LABEL_31;
          }
        }
        else if (HIWORD(v16))
        {
          v17 = 0x7FFF;
          goto LABEL_31;
        }
        v17 = v16 >> 1;
LABEL_31:
        v18 = result[3] >> v4;
        v19 = v18 + 1;
        if (v18 < -1)
        {
          if (v19 >= 0xFFFF0000)
          {
LABEL_36:
            v20 = v19 >> 1;
            goto LABEL_37;
          }
          v20 = -32768;
        }
        else
        {
          if (!HIWORD(v19))
            goto LABEL_36;
          v20 = 0x7FFF;
        }
LABEL_37:
        *a2 = bswap32(v11) >> 16;
        a2[1] = bswap32(v14) >> 16;
        a2[2] = bswap32(v17) >> 16;
        a2[3] = bswap32(v20) >> 16;
        result += 4;
        a2 += 4;
      }
    }
    a3 &= 3u;
    if (!a3)
      return result;
    while (1)
    {
LABEL_3:
      v5 = *result >> v4;
      v6 = v5 + 1;
      if (v5 < -1)
      {
        if (v6 >= 0xFFFF0000)
        {
LABEL_8:
          v7 = v6 >> 1;
          goto LABEL_9;
        }
        v7 = -32768;
      }
      else
      {
        if (!HIWORD(v6))
          goto LABEL_8;
        v7 = 0x7FFF;
      }
LABEL_9:
      *a2++ = bswap32(v7) >> 16;
      ++result;
      if (!--a3)
        return result;
    }
  }
  if (a3)
    goto LABEL_3;
  return result;
}

int *NativeInt32ToNativeInt24_Portable(int *result, uint64_t a2, unsigned int a3, char a4)
{
  char v4;
  int v5;
  int v6;
  int v7;
  unsigned int i;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v4 = a4 - 1;
  if (((a2 | result) & 3) == 0)
  {
    if (a3 >= 4)
    {
      for (i = a3 >> 2; i; --i)
      {
        v9 = *result >> v4;
        v10 = v9 + 1;
        if (v9 < -1)
        {
          if (HIBYTE(v10) != 255)
          {
            v11 = -8388608;
            goto LABEL_19;
          }
        }
        else if (HIBYTE(v10))
        {
          v11 = 0x7FFFFF;
          goto LABEL_19;
        }
        v11 = v10 >> 1;
LABEL_19:
        v12 = result[1] >> v4;
        v13 = v12 + 1;
        if (v12 < -1)
        {
          if (HIBYTE(v13) != 255)
          {
            v14 = -8388608;
            goto LABEL_25;
          }
        }
        else if (HIBYTE(v13))
        {
          v14 = 0x7FFFFF;
          goto LABEL_25;
        }
        v14 = v13 >> 1;
LABEL_25:
        v15 = result[2] >> v4;
        v16 = v15 + 1;
        if (v15 < -1)
        {
          if (HIBYTE(v16) != 255)
          {
            v17 = -8388608;
            goto LABEL_31;
          }
        }
        else if (HIBYTE(v16))
        {
          v17 = 0x7FFFFF;
          goto LABEL_31;
        }
        v17 = v16 >> 1;
LABEL_31:
        v18 = result[3] >> v4;
        v19 = v18 + 1;
        if (v18 < -1)
        {
          if (HIBYTE(v19) == 255)
          {
LABEL_36:
            v20 = v19 >> 1;
            goto LABEL_37;
          }
          v20 = -8388608;
        }
        else
        {
          if (!HIBYTE(v19))
            goto LABEL_36;
          v20 = 0x7FFFFF;
        }
LABEL_37:
        *(_DWORD *)a2 = v11 & 0xFFFFFF | (v14 << 24);
        *(_DWORD *)(a2 + 4) = (unsigned __int16)(v14 >> 8) | ((unsigned __int16)v17 << 16);
        *(_DWORD *)(a2 + 8) = BYTE2(v17) | (v20 << 8);
        result += 4;
        a2 += 12;
      }
    }
    a3 &= 3u;
    if (!a3)
      return result;
    while (1)
    {
LABEL_3:
      v5 = *result >> v4;
      v6 = v5 + 1;
      if (v5 < -1)
      {
        if (HIBYTE(v6) == 255)
        {
LABEL_8:
          v7 = v6 >> 1;
          goto LABEL_9;
        }
        v7 = -8388608;
      }
      else
      {
        if (!HIBYTE(v6))
          goto LABEL_8;
        v7 = 0x7FFFFF;
      }
LABEL_9:
      *(_WORD *)a2 = v7;
      *(_BYTE *)(a2 + 2) = BYTE2(v7);
      ++result;
      a2 += 3;
      if (!--a3)
        return result;
    }
  }
  if (a3)
    goto LABEL_3;
  return result;
}

int *NativeInt32ToSwapInt24_Portable(int *result, PCMSInt24Swap *this, unsigned int a3, char a4)
{
  unsigned int v4;
  PCMSInt24Swap *v5;
  int *v6;
  char v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v4 = a3;
  v5 = this;
  v6 = result;
  v7 = a4 - 1;
  if (((this | result) & 3) == 0)
  {
    if (a3 >= 4)
    {
      v11 = a3 >> 2;
      do
      {
        v12 = *v6 >> v7;
        v13 = v12 + 1;
        if (v12 < -1)
        {
          if (HIBYTE(v13) != 255)
          {
            v14 = 4286578688;
            goto LABEL_19;
          }
        }
        else if (HIBYTE(v13))
        {
          v14 = 0x7FFFFFLL;
          goto LABEL_19;
        }
        v14 = (v13 >> 1);
LABEL_19:
        v15 = v6[1] >> v7;
        v16 = v15 + 1;
        if (v15 < -1)
        {
          if (HIBYTE(v16) != 255)
          {
            v17 = -8388608;
            goto LABEL_25;
          }
        }
        else if (HIBYTE(v16))
        {
          v17 = 0x7FFFFF;
          goto LABEL_25;
        }
        v17 = v16 >> 1;
LABEL_25:
        v18 = v6[2] >> v7;
        v19 = v18 + 1;
        if (v18 < -1)
        {
          if (HIBYTE(v19) != 255)
          {
            v20 = -8388608;
            goto LABEL_31;
          }
        }
        else if (HIBYTE(v19))
        {
          v20 = 0x7FFFFF;
          goto LABEL_31;
        }
        v20 = v19 >> 1;
LABEL_31:
        v21 = v6[3] >> v7;
        v22 = v21 + 1;
        if (v21 < -1)
        {
          if (HIBYTE(v22) == 255)
          {
LABEL_36:
            v23 = v22 >> 1;
            goto LABEL_37;
          }
          v23 = -8388608;
        }
        else
        {
          if (!HIBYTE(v22))
            goto LABEL_36;
          v23 = 0x7FFFFF;
        }
LABEL_37:
        --v11;
        result = PCMSInt24Swap::store4((int *)v5, (unsigned __int8 *)v14, v17, v20, v23);
        v6 += 4;
        v5 = (PCMSInt24Swap *)((char *)v5 + 12);
      }
      while (v11);
    }
    v4 &= 3u;
    if (!v4)
      return result;
    while (1)
    {
LABEL_3:
      v8 = *v6 >> v7;
      v9 = v8 + 1;
      if (v8 < -1)
      {
        if (HIBYTE(v9) == 255)
        {
LABEL_8:
          v10 = v9 >> 1;
          goto LABEL_9;
        }
        v10 = -8388608;
      }
      else
      {
        if (!HIBYTE(v9))
          goto LABEL_8;
        v10 = 0x7FFFFF;
      }
LABEL_9:
      *(_BYTE *)v5 = BYTE2(v10);
      *((_BYTE *)v5 + 1) = BYTE1(v10);
      *((_BYTE *)v5 + 2) = v10;
      ++v6;
      v5 = (PCMSInt24Swap *)((char *)v5 + 3);
      if (!--v4)
        return result;
    }
  }
  if (a3)
    goto LABEL_3;
  return result;
}

unsigned int *SwapInt32ToNativeInt16_Portable(unsigned int *result, int *a2, unsigned int a3, char a4)
{
  char v4;
  int v5;
  int v6;
  int v7;
  unsigned int i;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v4 = a4 - 1;
  if (((a2 | result) & 3) == 0)
  {
    if (a3 >= 4)
    {
      for (i = a3 >> 2; i; --i)
      {
        v9 = (int)bswap32(*result) >> v4;
        v10 = v9 + 1;
        if (v9 < -1)
        {
          if (v10 < 0xFFFF0000)
          {
            LOWORD(v11) = 0x8000;
            goto LABEL_19;
          }
        }
        else if (HIWORD(v10))
        {
          LOWORD(v11) = 0x7FFF;
          goto LABEL_19;
        }
        v11 = v10 >> 1;
LABEL_19:
        v12 = (int)bswap32(result[1]) >> v4;
        v13 = v12 + 1;
        if (v12 < -1)
        {
          if (v13 < 0xFFFF0000)
          {
            LOWORD(v14) = 0x8000;
            goto LABEL_25;
          }
        }
        else if (HIWORD(v13))
        {
          LOWORD(v14) = 0x7FFF;
          goto LABEL_25;
        }
        v14 = v13 >> 1;
LABEL_25:
        v15 = (int)bswap32(result[2]) >> v4;
        v16 = v15 + 1;
        if (v15 < -1)
        {
          if (v16 < 0xFFFF0000)
          {
            LOWORD(v17) = 0x8000;
            goto LABEL_31;
          }
        }
        else if (HIWORD(v16))
        {
          LOWORD(v17) = 0x7FFF;
          goto LABEL_31;
        }
        v17 = v16 >> 1;
LABEL_31:
        v18 = (int)bswap32(result[3]) >> v4;
        v19 = v18 + 1;
        if (v18 < -1)
        {
          if (v19 >= 0xFFFF0000)
          {
LABEL_36:
            v20 = v19 >> 1;
            goto LABEL_37;
          }
          LOWORD(v20) = 0x8000;
        }
        else
        {
          if (!HIWORD(v19))
            goto LABEL_36;
          LOWORD(v20) = 0x7FFF;
        }
LABEL_37:
        *a2 = (unsigned __int16)v11 | ((unsigned __int16)v14 << 16);
        a2[1] = (unsigned __int16)v17 | ((unsigned __int16)v20 << 16);
        a2 += 2;
        result += 4;
      }
    }
    a3 &= 3u;
    if (!a3)
      return result;
    while (1)
    {
LABEL_3:
      v5 = (int)bswap32(*result) >> v4;
      v6 = v5 + 1;
      if (v5 < -1)
      {
        if (v6 >= 0xFFFF0000)
        {
LABEL_8:
          v7 = v6 >> 1;
          goto LABEL_9;
        }
        LOWORD(v7) = 0x8000;
      }
      else
      {
        if (!HIWORD(v6))
          goto LABEL_8;
        LOWORD(v7) = 0x7FFF;
      }
LABEL_9:
      *(_WORD *)a2 = v7;
      a2 = (int *)((char *)a2 + 2);
      ++result;
      if (!--a3)
        return result;
    }
  }
  if (a3)
    goto LABEL_3;
  return result;
}

unsigned int *SwapInt32ToNativeInt24_Portable(unsigned int *result, uint64_t a2, unsigned int a3, char a4)
{
  char v4;
  int v5;
  int v6;
  int v7;
  unsigned int i;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v4 = a4 - 1;
  if (((a2 | result) & 3) == 0)
  {
    if (a3 >= 4)
    {
      for (i = a3 >> 2; i; --i)
      {
        v9 = (int)bswap32(*result) >> v4;
        v10 = v9 + 1;
        if (v9 < -1)
        {
          if (HIBYTE(v10) != 255)
          {
            v11 = -8388608;
            goto LABEL_19;
          }
        }
        else if (HIBYTE(v10))
        {
          v11 = 0x7FFFFF;
          goto LABEL_19;
        }
        v11 = v10 >> 1;
LABEL_19:
        v12 = (int)bswap32(result[1]) >> v4;
        v13 = v12 + 1;
        if (v12 < -1)
        {
          if (HIBYTE(v13) != 255)
          {
            v14 = -8388608;
            goto LABEL_25;
          }
        }
        else if (HIBYTE(v13))
        {
          v14 = 0x7FFFFF;
          goto LABEL_25;
        }
        v14 = v13 >> 1;
LABEL_25:
        v15 = (int)bswap32(result[2]) >> v4;
        v16 = v15 + 1;
        if (v15 < -1)
        {
          if (HIBYTE(v16) != 255)
          {
            v17 = -8388608;
            goto LABEL_31;
          }
        }
        else if (HIBYTE(v16))
        {
          v17 = 0x7FFFFF;
          goto LABEL_31;
        }
        v17 = v16 >> 1;
LABEL_31:
        v18 = (int)bswap32(result[3]) >> v4;
        v19 = v18 + 1;
        if (v18 < -1)
        {
          if (HIBYTE(v19) == 255)
          {
LABEL_36:
            v20 = v19 >> 1;
            goto LABEL_37;
          }
          v20 = -8388608;
        }
        else
        {
          if (!HIBYTE(v19))
            goto LABEL_36;
          v20 = 0x7FFFFF;
        }
LABEL_37:
        *(_DWORD *)a2 = v11 & 0xFFFFFF | (v14 << 24);
        *(_DWORD *)(a2 + 4) = (unsigned __int16)(v14 >> 8) | ((unsigned __int16)v17 << 16);
        *(_DWORD *)(a2 + 8) = BYTE2(v17) | (v20 << 8);
        result += 4;
        a2 += 12;
      }
    }
    a3 &= 3u;
    if (!a3)
      return result;
    while (1)
    {
LABEL_3:
      v5 = (int)bswap32(*result) >> v4;
      v6 = v5 + 1;
      if (v5 < -1)
      {
        if (HIBYTE(v6) == 255)
        {
LABEL_8:
          v7 = v6 >> 1;
          goto LABEL_9;
        }
        v7 = -8388608;
      }
      else
      {
        if (!HIBYTE(v6))
          goto LABEL_8;
        v7 = 0x7FFFFF;
      }
LABEL_9:
      *(_WORD *)a2 = v7;
      *(_BYTE *)(a2 + 2) = BYTE2(v7);
      ++result;
      a2 += 3;
      if (!--a3)
        return result;
    }
  }
  if (a3)
    goto LABEL_3;
  return result;
}

int32x4_t *NativeInt32ToNativeInt32_Portable(int32x4_t *result, int32x4_t *a2, unsigned int a3, signed int a4)
{
  signed int v4;
  signed int v5;
  unsigned int v6;
  int32x4_t v7;
  int32x4_t v8;
  uint32x4_t v9;
  int32x4_t v10;
  signed int v11;
  signed int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int32x4_t v17;
  int32x4_t v18;
  int v19;

  if (a4 < 1)
  {
    v15 = -a4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        v16 = a3 >> 2;
        v17 = vnegq_s32(vdupq_n_s32(v15));
        do
        {
          v18 = *result++;
          *a2++ = vshlq_s32(v18, v17);
          --v16;
        }
        while (v16);
      }
      a3 &= 3u;
    }
    for (; a3; --a3)
    {
      v19 = result->i32[0];
      result = (int32x4_t *)((char *)result + 4);
      a2->i32[0] = v19 >> v15;
      a2 = (int32x4_t *)((char *)a2 + 4);
    }
  }
  else
  {
    v4 = -1 << ~(_BYTE)a4;
    v5 = ~v4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        v6 = a3 >> 2;
        v7 = vdupq_n_s32(v4);
        v8 = vdupq_n_s32(v5);
        v9 = (uint32x4_t)vdupq_n_s32(a4);
        do
        {
          v10 = *result++;
          *(uint32x4_t *)a2++ = vshlq_u32((uint32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v7, v10), (int8x16_t)v7, (int8x16_t)vminq_s32(v10, v8)), v9);
          --v6;
        }
        while (v6);
      }
      a3 &= 3u;
    }
    while (a3)
    {
      v12 = result->i32[0];
      result = (int32x4_t *)((char *)result + 4);
      v11 = v12;
      if (v12 >= v5)
        v13 = ~v4;
      else
        v13 = v11;
      if (v11 >= v4)
        v14 = v13;
      else
        v14 = -1 << ~(_BYTE)a4;
      a2->i32[0] = v14 << a4;
      a2 = (int32x4_t *)((char *)a2 + 4);
      --a3;
    }
  }
  return result;
}

int *NativeInt32ToSwapInt32_Portable(int *result, _DWORD *a2, unsigned int a3, int a4)
{
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;

  if (a4 < 1)
  {
    v22 = -a4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        v23 = a3 >> 2;
        do
        {
          v24 = result[1] >> v22;
          v25 = result[2] >> v22;
          v26 = result[3] >> v22;
          *a2 = bswap32(*result >> v22);
          a2[1] = bswap32(v24);
          a2[2] = bswap32(v25);
          a2[3] = bswap32(v26);
          result += 4;
          a2 += 4;
          --v23;
        }
        while (v23);
      }
      a3 &= 3u;
    }
    for (; a3; --a3)
    {
      v27 = *result++;
      *a2++ = bswap32(v27 >> v22);
    }
  }
  else
  {
    v4 = -1 << ~(_BYTE)a4;
    v5 = ~v4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        v6 = a3 >> 2;
        do
        {
          v7 = result[1];
          v8 = result[2];
          v9 = result[3];
          if (*result >= v5)
            v10 = ~v4;
          else
            v10 = *result;
          if (*result >= v4)
            v11 = v10;
          else
            v11 = -1 << ~(_BYTE)a4;
          if (v7 >= v5)
            v12 = ~v4;
          else
            v12 = result[1];
          if (v7 >= v4)
            v13 = v12;
          else
            v13 = -1 << ~(_BYTE)a4;
          if (v8 >= v5)
            v14 = ~v4;
          else
            v14 = result[2];
          if (v8 >= v4)
            v15 = v14;
          else
            v15 = -1 << ~(_BYTE)a4;
          if (v9 >= v5)
            v16 = ~v4;
          else
            v16 = result[3];
          if (v9 >= v4)
            v17 = v16;
          else
            v17 = -1 << ~(_BYTE)a4;
          *a2 = bswap32(v11 << a4);
          a2[1] = bswap32(v13 << a4);
          a2[2] = bswap32(v15 << a4);
          a2[3] = bswap32(v17 << a4);
          result += 4;
          a2 += 4;
          --v6;
        }
        while (v6);
      }
      a3 &= 3u;
    }
    while (a3)
    {
      v19 = *result++;
      v18 = v19;
      if (v19 >= v5)
        v20 = ~v4;
      else
        v20 = v18;
      if (v18 >= v4)
        v21 = v20;
      else
        v21 = -1 << ~(_BYTE)a4;
      *a2++ = bswap32(v21 << a4);
      --a3;
    }
  }
  return result;
}

int8x16_t *SwapInt32ToNativeInt32_Portable(int8x16_t *result, uint32x4_t *a2, unsigned int a3, signed int a4)
{
  signed int v4;
  signed int v5;
  unsigned int v6;
  int32x4_t v7;
  int32x4_t v8;
  uint32x4_t v9;
  int32x4_t v10;
  unsigned int v11;
  signed int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;

  if (a4 < 1)
  {
    v15 = -a4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        v16 = a3 >> 2;
        do
        {
          v17 = bswap32(result->u32[1]);
          v18 = bswap32(result->u32[2]);
          v19 = bswap32(result->u32[3]);
          a2->i32[0] = (int)bswap32(result->i32[0]) >> v15;
          a2->i32[1] = v17 >> v15;
          a2->i32[2] = v18 >> v15;
          a2->i32[3] = v19 >> v15;
          ++result;
          ++a2;
          --v16;
        }
        while (v16);
      }
      a3 &= 3u;
    }
    for (; a3; --a3)
    {
      v20 = result->i32[0];
      result = (int8x16_t *)((char *)result + 4);
      a2->i32[0] = (int)bswap32(v20) >> v15;
      a2 = (uint32x4_t *)((char *)a2 + 4);
    }
  }
  else
  {
    v4 = -1 << ~(_BYTE)a4;
    v5 = ~v4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        v6 = a3 >> 2;
        v7 = vdupq_n_s32(v4);
        v8 = vdupq_n_s32(v5);
        v9 = (uint32x4_t)vdupq_n_s32(a4);
        do
        {
          v10 = (int32x4_t)vrev32q_s8(*result);
          *a2++ = vshlq_u32((uint32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v7, v10), (int8x16_t)v7, (int8x16_t)vminq_s32(v10, v8)), v9);
          ++result;
          --v6;
        }
        while (v6);
      }
      a3 &= 3u;
    }
    while (a3)
    {
      v11 = result->i32[0];
      result = (int8x16_t *)((char *)result + 4);
      v12 = bswap32(v11);
      if (v12 >= v5)
        v13 = ~v4;
      else
        v13 = v12;
      if (v12 >= v4)
        v14 = v13;
      else
        v14 = -1 << ~(_BYTE)a4;
      a2->i32[0] = v14 << a4;
      a2 = (uint32x4_t *)((char *)a2 + 4);
      --a3;
    }
  }
  return result;
}

unsigned int *SwapInt32ToSwapInt32_Portable(unsigned int *result, _DWORD *a2, unsigned int a3, int a4)
{
  int v4;
  int v5;
  unsigned int v6;
  signed int v7;
  signed int v8;
  signed int v9;
  signed int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  signed int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;

  if (a4 < 1)
  {
    v23 = -a4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        v24 = a3 >> 2;
        do
        {
          v25 = bswap32(result[1]);
          v26 = bswap32(result[2]);
          v27 = bswap32(result[3]);
          *a2 = bswap32((int)bswap32(*result) >> v23);
          a2[1] = bswap32(v25 >> v23);
          a2[2] = bswap32(v26 >> v23);
          a2[3] = bswap32(v27 >> v23);
          result += 4;
          a2 += 4;
          --v24;
        }
        while (v24);
      }
      a3 &= 3u;
    }
    for (; a3; --a3)
    {
      v28 = *result++;
      *a2++ = bswap32((int)bswap32(v28) >> v23);
    }
  }
  else
  {
    v4 = -1 << ~(_BYTE)a4;
    v5 = ~v4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        v6 = a3 >> 2;
        do
        {
          v7 = bswap32(*result);
          v8 = bswap32(result[1]);
          v9 = bswap32(result[2]);
          v10 = bswap32(result[3]);
          if (v7 >= v5)
            v11 = ~v4;
          else
            v11 = v7;
          if (v7 >= v4)
            v12 = v11;
          else
            v12 = -1 << ~(_BYTE)a4;
          if (v8 >= v5)
            v13 = ~v4;
          else
            v13 = v8;
          if (v8 >= v4)
            v14 = v13;
          else
            v14 = -1 << ~(_BYTE)a4;
          if (v9 >= v5)
            v15 = ~v4;
          else
            v15 = v9;
          if (v9 >= v4)
            v16 = v15;
          else
            v16 = -1 << ~(_BYTE)a4;
          if (v10 >= v5)
            v17 = ~v4;
          else
            v17 = v10;
          if (v10 >= v4)
            v18 = v17;
          else
            v18 = -1 << ~(_BYTE)a4;
          *a2 = bswap32(v12 << a4);
          a2[1] = bswap32(v14 << a4);
          a2[2] = bswap32(v16 << a4);
          a2[3] = bswap32(v18 << a4);
          result += 4;
          a2 += 4;
          --v6;
        }
        while (v6);
      }
      a3 &= 3u;
    }
    while (a3)
    {
      v19 = *result++;
      v20 = bswap32(v19);
      if (v20 >= v5)
        v21 = ~v4;
      else
        v21 = v20;
      if (v20 >= v4)
        v22 = v21;
      else
        v22 = -1 << ~(_BYTE)a4;
      *a2++ = bswap32(v22 << a4);
      --a3;
    }
  }
  return result;
}

int *StereoInterleaveInt824ToInt16_Portable(int *result, int *a2, _WORD *a3, int a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  for (; a4; --a4)
  {
    v5 = *result++;
    v4 = v5;
    if (v5 < 0)
    {
      if (HIBYTE(v4) != 255)
      {
        LOWORD(v6) = 0x8000;
        goto LABEL_8;
      }
    }
    else if (HIBYTE(v4))
    {
      LOWORD(v6) = 0x7FFF;
      goto LABEL_8;
    }
    v6 = v4 >> 9;
LABEL_8:
    *a3 = v6;
    v8 = *a2++;
    v7 = v8;
    if (v8 < 0)
    {
      if (HIBYTE(v7) == 255)
      {
LABEL_13:
        v9 = v7 >> 9;
        goto LABEL_14;
      }
      LOWORD(v9) = 0x8000;
    }
    else
    {
      if (!HIBYTE(v7))
        goto LABEL_13;
      LOWORD(v9) = 0x7FFF;
    }
LABEL_14:
    a3[1] = v9;
    a3 += 2;
  }
  return result;
}

__int16 *StereoDeinterleaveInt16ToInt824_Portable(__int16 *result, _DWORD *a2, _DWORD *a3, int a4)
{
  for (; a4; --a4)
  {
    *a2++ = *result << 9;
    *a3++ = result[1] << 9;
    result += 2;
  }
  return result;
}

int32x4_t *NativeLowAlignedInt32ToInt16_Portable(int32x4_t *result, int16x4_t *a2, unsigned int a3)
{
  unsigned int v3;
  int32x4_t v4;
  int v5;
  __int32 v6;

  if (a3 >= 4)
  {
    v3 = a3 >> 2;
    do
    {
      v4 = *result++;
      *a2++ = vmovn_s32(v4);
      --v3;
    }
    while (v3);
  }
  v5 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      v6 = result->i32[0];
      result = (int32x4_t *)((char *)result + 4);
      a2->i16[0] = v6;
      a2 = (int16x4_t *)((char *)a2 + 2);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint16x4_t *NativeInt16ToLowAlignedInt32_Portable(uint16x4_t *result, uint32x4_t *a2, unsigned int a3)
{
  unsigned int v3;
  uint16x4_t v4;
  int v5;
  __int32 v6;

  if (a3 >= 4)
  {
    v3 = a3 >> 2;
    do
    {
      v4 = *result++;
      *a2++ = vmovl_u16(v4);
      --v3;
    }
    while (v3);
  }
  v5 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      v6 = result->u16[0];
      result = (uint16x4_t *)((char *)result + 2);
      a2->i32[0] = v6;
      a2 = (uint32x4_t *)((char *)a2 + 4);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint32x4_t *NativeLowAlignedInt32To824Fixed_Portable(uint32x4_t *result, int32x4_t *a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  uint32x4_t v6;
  uint32x4_t v7;
  int v8;
  __int32 v9;

  v4 = 32 - a4;
  if (a3 >= 4)
  {
    v5 = a3 >> 2;
    v6 = (uint32x4_t)vdupq_n_s32(v4);
    do
    {
      v7 = *result++;
      *a2++ = vshrq_n_s32((int32x4_t)vshlq_u32(v7, v6), 7uLL);
      --v5;
    }
    while (v5);
  }
  v8 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      v9 = result->i32[0];
      result = (uint32x4_t *)((char *)result + 4);
      a2->i32[0] = v9 << v4 >> 7;
      a2 = (int32x4_t *)((char *)a2 + 4);
      --v8;
    }
    while (v8);
  }
  return result;
}

int32x4_t *Native824FixedToLowAlignedInt32_Portable(int32x4_t *result, int8x16_t *a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  signed int v6;
  signed int v7;
  unsigned int v8;
  int32x4_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v4 = 24 - a4;
  v5 = ~(-1 << a4);
  v6 = -1 << (a4 - 1);
  v7 = ~v6;
  if (a3 >= 4)
  {
    v8 = a3 >> 2;
    v9 = vdupq_n_s32(v6);
    v10 = vdupq_n_s32(v7);
    v11 = (int8x16_t)vdupq_n_s32(v5);
    v12 = vnegq_s32(vdupq_n_s32(v4));
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    do
    {
      v14 = *result++;
      v15 = vshrq_n_s32(vaddq_s32(vshlq_s32(v14, v12), v13), 1uLL);
      *a2++ = vandq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v9, v15), (int8x16_t)v9, (int8x16_t)vminq_s32(v15, v10)), v11);
      --v8;
    }
    while (v8);
  }
  v16 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      v17 = result->i32[0];
      result = (int32x4_t *)((char *)result + 4);
      v18 = ((v17 >> v4) + 1) >> 1;
      if (v18 >= v7)
        v19 = ~v6;
      else
        v19 = v18;
      if (v18 >= v6)
        v20 = v19;
      else
        v20 = -1 << (a4 - 1);
      a2->i32[0] = v20 & v5;
      a2 = (int8x16_t *)((char *)a2 + 4);
      --v16;
    }
    while (v16);
  }
  return result;
}

void Float32ToNativeLowAlignedInt32_Portable(float *a1, unsigned int *a2, int a3, int a4)
{
  char v4;
  float v8;
  float i;
  float v10;
  float v11;
  float v12;

  v4 = a4;
  v8 = scalbnf(1.0, -a4);
  for (i = nextafterf(2147500000.0, 0.0); a3; --a3)
  {
    v10 = *a1++;
    v11 = v10;
    if (v10 < -1.0)
      v11 = -1.0;
    v12 = (float)(v8 + v11) * 2147500000.0;
    if (i < v12)
      v12 = i;
    *a2++ = (int)v12 >> (32 - v4);
  }
}

int *NativeLowAlignedInt32ToFloat32_Portable(int *result, float *a2, int a3, char a4)
{
  int v4;

  for (; a3; --a3)
  {
    v4 = *result++;
    *a2++ = (float)(v4 << (32 - a4)) * 4.6566e-10;
  }
  return result;
}

float *Float32ToNativeLowAlignedInt64_Portable(float *result, _QWORD *a2, int a3, int a4)
{
  float v4;
  unsigned int v5;

  for (; a3; --a3)
  {
    v4 = *result++;
    v5 = vcvts_n_s32_f32(v4 + COERCE_FLOAT(1065353216 - (a4 << 23)), 0x1FuLL);
    *a2++ = (v5 - (v5 > 0x80000000)) >> (32 - a4);
  }
  return result;
}

int *NativeLowAlignedInt64ToFloat32_Portable(int *result, float *a2, int a3, char a4)
{
  int v4;

  for (; a3; --a3)
  {
    v4 = *result;
    result += 2;
    *a2++ = (float)(v4 << (32 - a4)) * 4.6566e-10;
  }
  return result;
}

std::string *swix::connection_config::connection_config(std::string *this, const swix::connection_config *a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  NSObject *v7;
  std::string::size_type v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = (void *)*((_QWORD *)a2 + 6);
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (v6)
    xpc_retain(v6);
  else
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v7 = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__l.__size_ = (std::string::size_type)v7;
  if (v7)
    dispatch_retain(v7);
  v8 = *((_QWORD *)a2 + 8);
  LOWORD(this[3].__r_.__value_.__l.__data_) = *((_WORD *)a2 + 36);
  this[2].__r_.__value_.__r.__words[2] = v8;
  std::__optional_copy_base<swix::timeout_config,false>::__optional_copy_base[abi:ne180100](&this[3].__r_.__value_.__s.__data_[8], (uint64_t)a2 + 80);
  return this;
}

void sub_18EFE9E74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<swix::connection_config,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;

  if (!*(_BYTE *)(a1 + 128))
    return a1;
  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(_QWORD **)(a1 + 112);
    if (v2 == (_QWORD *)(a1 + 88))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 88);
      goto LABEL_7;
    }
    if (v2)
    {
      v3 = 5;
LABEL_7:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  v4 = *(NSObject **)(a1 + 56);
  if (v4)
    dispatch_release(v4);
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void RemoteAudioConverter::~RemoteAudioConverter(RemoteAudioConverter *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD **)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    v2 = v1[6];
    v1[6] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[5];
    v1[5] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    swix::ipc_interface::~ipc_interface((swix::ipc_interface *)(v1 + 2));
    MEMORY[0x193FFE460](v1, 0xA0C4062EF92D7);
  }
}

_QWORD *std::function<void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::operator=(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v9 != a1)
  {
    v4 = v10;
    v5 = (_QWORD *)a1[3];
    if (v10 == v9)
    {
      if (v5 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v9);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, a1);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, a1);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v9);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v10;
      v10 = v9;
    }
    else
    {
      v10 = (_QWORD *)a1[3];
      a1[3] = v4;
    }
  }
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_19;
  }
  if (v10)
  {
    v7 = 5;
LABEL_19:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_18EFEA1D0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2915AC8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E2915AC8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_1E2915AC8;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v3 + 1), v2);
  v3[5] = *(_QWORD *)(a1 + 40);
  return v3;
}

void sub_18EFEA2F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_1E2915AC8;
  result = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
  a2[5] = *(_QWORD *)(a1 + 40);
  return result;
}

_QWORD *std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  v1 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 24);
  if (!v1)
    std::terminate();
  v3 = *(_QWORD *)(v1 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  v7[0] = MEMORY[0x1E0DDF0B0] + 16;
  v7[1] = v3;
  v7[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  swix::connection::state::cancel_connection();
  swix::connection::~connection((swix::connection *)v7);
}

void sub_18EFEA464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  swix::connection::~connection((swix::connection *)va);
  _Unwind_Resume(a1);
}

unint64_t AudioConverterXPC_Server::instantiateSpecific(uint64_t a1, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, const AudioClassDescription *a4, uint64_t a5)
{
  _BYTE *v6;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  char v16;
  _BYTE buf[32];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE **)(a1 + 16);
  if (v6[8])
  {
    if (a2->mFormatID == 1735091043)
    {
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZL23registerPrivateDecodersj_block_invoke;
      *(_QWORD *)&buf[24] = &__block_descriptor_tmp_6468;
      v18 = 1735091043;
      if (registerPrivateDecoders::gkRegistrationOnceToken != -1)
        dispatch_once(&registerPrivateDecoders::gkRegistrationOnceToken, buf);
      v6 = *(_BYTE **)(a1 + 16);
    }
    v11 = AudioConverterNewInternal(a2, a3, a5, a4, (_QWORD *)(*(_QWORD *)v6 + 8), newAudioConverter, 0, 0);
    v12 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8);
    *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<SetConverterAsAuxiliary(OpaqueAudioConverter *)::$_0>;
    *(_QWORD *)&buf[8] = &v16;
    with_resolved(v12, (uint64_t (**)(uint64_t, uint64_t))buf);
    return v11 | ((unint64_t)(v11 == 0) << 32);
  }
  else
  {
    v13 = 4294967188;
    AudioConverterLog();
    v14 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "RemoteAudioConverter.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 99;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a1;
      _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterService -> %p: The service is close to its memory limit and will fail to construct new converters with kAudio_MemFullError. Try disposing of some out-of-process converters.", buf, 0x1Cu);
    }
  }
  return v13;
}

void sub_18EFEA644(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void ___ZL23registerPrivateDecodersj_block_invoke(uint64_t a1)
{
  OSType v1;
  void (*v2)(AudioComponentFactoryFunction *);
  NSObject *v3;
  char *v4;
  NSObject *v5;
  AudioComponentFactoryFunction inFactory;
  AudioComponentDescription inDesc;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 32);
  inDesc.componentType = 1633969507;
  inDesc.componentSubType = v1;
  *(_QWORD *)&inDesc.componentManufacturer = 1634758764;
  inDesc.componentFlagsMask = 0;
  inFactory = (AudioComponentFactoryFunction)&inDesc;
  if (!AudioComponentFindNext(0, &inDesc))
  {
    _ZZZL23registerPrivateDecodersjEUb_E6handle = (uint64_t)dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioCodecs", 5);
    v2 = (void (*)(AudioComponentFactoryFunction *))dlsym((void *)_ZZZL23registerPrivateDecodersjEUb_E6handle, "RegisterExternalAudioCodecs");
    if (v2)
    {
      v2(&inFactory);
      if (AudioComponentRegister(&inDesc, &stru_1E2923288, 0, inFactory))
        return;
    }
    else
    {
      AudioConverterLog();
      v3 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v4 = dlerror();
        *(_DWORD *)buf = 136315650;
        v9 = "RegisterPrivateDecoders.h";
        v10 = 1024;
        v11 = 111;
        v12 = 2080;
        v13 = v4;
        _os_log_impl(&dword_18EE07000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d couldn't lookup symbol RegisterExternalAudioCodecs:\n%s", buf, 0x1Cu);
      }
    }
    AudioConverterLog();
    v5 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v9 = "RegisterPrivateDecoders.h";
      v10 = 1024;
      v11 = 118;
      _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to register component for GKDecoder", buf, 0x12u);
    }
  }
}

uint64_t AudioConverterXPC_Server::setUpRenderer(uint64_t a1, xpc_object_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  size_t AllocSize;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  NSObject *v17;
  _DWORD *exception;
  xpc_object_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 16);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 56);
  v7 = operator new();
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *a2;
  v19 = v9;
  if (v9 && object_getClass(v9) == (Class)MEMORY[0x1E0C812F8])
  {
    xpc_retain(v9);
  }
  else
  {
    v9 = xpc_null_create();
    v19 = v9;
  }
  *(_QWORD *)v7 = off_1E28FFC78;
  *(_QWORD *)(v7 + 8) = v8;
  audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::ipc_node_base(v7 + 16, &v19);
  *(_BYTE *)(v7 + 80) = 0;
  *(_BYTE *)(v7 + 96) = 0;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 112) = 0;
  *(_DWORD *)(v7 + 120) = 0;
  *(_BYTE *)(v7 + 128) = 0;
  *(_BYTE *)(v7 + 200) = 0;
  *(_QWORD *)(v7 + 208) = MEMORY[0x1E0DDB760] + 16;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_OWORD *)(v7 + 232) = 0u;
  *(_OWORD *)(v7 + 248) = 0u;
  *(_BYTE *)(v7 + 264) = 0;
  *(_QWORD *)(v7 + 272) = v6;
  *(_QWORD *)v7 = &off_1E28FFCA8;
  v10 = *(_QWORD *)(v7 + 40);
  AllocSize = IOSurfaceGetAllocSize(*(IOSurfaceRef *)(v7 + 16));
  *(_QWORD *)(v7 + 280) = v10;
  *(_QWORD *)(v7 + 288) = AllocSize - 16;
  *(_OWORD *)(v7 + 304) = 0u;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  *(_OWORD *)(v7 + 352) = 0u;
  *(_OWORD *)(v7 + 368) = 0u;
  *(_OWORD *)(v7 + 384) = 0u;
  *(_OWORD *)(v7 + 400) = 0u;
  *(_OWORD *)(v7 + 416) = 0u;
  *(_OWORD *)(v7 + 432) = 0u;
  *(_OWORD *)(v7 + 448) = 0u;
  *(_OWORD *)(v7 + 464) = 0u;
  *(_OWORD *)(v7 + 480) = 0u;
  *(_OWORD *)(v7 + 496) = 0u;
  *(_QWORD *)(v7 + 512) = 0;
  *(_BYTE *)(v7 + 536) = 0;
  *(_QWORD *)(v7 + 464) = v10;
  *(_QWORD *)(v7 + 296) = v10 + 48;
  *(_QWORD *)(v10 + 160) = 208;
  *(_QWORD *)(v10 + 32) = v8;
  v12 = ACOOPSharedMemory::partitionBuffers((ACOOPSharedMemory *)(v7 + 280));
  if (v12)
  {
    v16 = v12;
    AudioConverterLog();
    v17 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v21 = "AudioConverterRenderServer.h";
      v22 = 1024;
      v23 = 31;
      _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterService: Constructing the shared memory failed.", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(4uLL);
    *exception = v16;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  AudioConverterServer::setup((AudioConverterServer *)v7, "AudioConverterRenderingServer");
  xpc_release(v9);
  v13 = **(_QWORD **)(a1 + 16);
  v14 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v7;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return 0x100000000;
}

void sub_18EFEAA6C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::ipc_node_base(uint64_t a1, xpc_object_t *a2)
{
  caulk::mach::details *value;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  caulk::mach::details *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  IOSurfaceRef v14;
  const void *v15;
  id v16;
  void *v17;
  void *v18;
  int v19;
  NSObject *v20;
  void *v21;
  std::runtime_error *exception;
  NSObject *v24;
  std::runtime_error *v25;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  value = (caulk::mach::details *)xpc_dictionary_get_value(*a2, "sharedMemory");
  v6 = (void *)caulk::mach::details::retain_os_object(value, v5);
  caulk::mach::details::release_os_object(0, v7);
  *(_QWORD *)a1 = 0;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "no object");
  }
  v8 = v6;
  xpc_dictionary_get_value(v8, "surface");
  v9 = (caulk::mach::details *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)caulk::mach::details::retain_os_object(v9, v10);
  caulk::mach::details::release_os_object(0, v12);

  v13 = v11;
  v14 = IOSurfaceLookupFromXPCObject(v13);
  v15 = *(const void **)a1;
  *(_QWORD *)a1 = v14;
  if (v15)
    CFRelease(v15);

  if (!*(_QWORD *)a1)
  {
    AudioConverterLog();
    v24 = objc_retainAutorelease((id)AudioConverterLog(void)::gLog);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v26 = 136315394;
      v27 = "ACOOPSharedMemory.mm";
      v28 = 1024;
      v29 = 48;
      _os_log_impl(&dword_18EE07000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d unilaterally_billed_shared_memory - error on IOSurfaceLookupFromXPCObject", (uint8_t *)&v26, 0x12u);
    }
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "bad IOSurface");
  }
  v16 = v8;
  xpc_dictionary_get_value(v16, "token");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_mach_send_copy_right();

  v19 = IOSurfaceSetOwnershipIdentity();
  if (v19)
  {
    AudioConverterLog();
    v20 = objc_retainAutorelease((id)AudioConverterLog(void)::gLog);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v26 = 136315650;
      v27 = "ACOOPSharedMemory.mm";
      v28 = 1024;
      v29 = 65;
      v30 = 1024;
      v31 = v19;
      _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d unilaterally_billed_shared_memory - error on IOSurfaceSetOwnershipIdentity, memory will most likely be billed to both processes: %u", (uint8_t *)&v26, 0x18u);
    }
  }
  caulk::mach::details::release_os_object((caulk::mach::details *)v13, v18);
  caulk::mach::details::release_os_object((caulk::mach::details *)v16, v21);
  *(_QWORD *)(a1 + 8) = unilaterally_billed_shared_memory::get_raw_ptr((IOSurfaceRef *)a1, 0) + 8;
  *(_QWORD *)(a1 + 16) = unilaterally_billed_shared_memory::get_raw_ptr((IOSurfaceRef *)a1, 0);
  *(_QWORD *)(a1 + 24) = unilaterally_billed_shared_memory::get_raw_ptr((IOSurfaceRef *)a1, 0x10uLL);
  *(_WORD *)(a1 + 32) = 1;
  audioipc::eventlink_primitive::eventlink_primitive((audioipc::eventlink_primitive *)(a1 + 40), *a2);
  return a1;
}

void sub_18EFEAF24(_Unwind_Exception *a1, void *a2)
{
  CFTypeRef *v2;
  caulk::mach::details *v3;
  caulk::mach::details *v4;
  void *v6;

  caulk::mach::details::release_os_object(v4, a2);
  if (*v2)
    CFRelease(*v2);
  caulk::mach::details::release_os_object(v3, v6);
  _Unwind_Resume(a1);
}

void sub_18EFEAFB0()
{
  void *v0;

  JUMPOUT(0x18EFEAF94);
}

uint64_t ACOOPSharedMemory::partitionBuffers(ACOOPSharedMemory *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  v5 = (__int128 **)((char *)this + 16);
  v4 = *((_QWORD *)this + 2);
  v6 = *(_QWORD *)(v4 + 112);
  v7 = *(unsigned int *)(v4 + 104) * (unint64_t)(16 * *(_DWORD *)(v4 + 80));
  v29 = (v7 & 0xFFFFFFFF00000000) == 0;
  v8 = v7 & 0xFFFFFFF0;
  if (v29)
    v9 = v8;
  else
    v9 = 0xFFFFFFFFLL;
  v10 = v2 + v6;
  if ((unint64_t)caulk::numeric::exceptional_add<unsigned long>(v9, 15) >= 0x10)
  {
    v11 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 25) = *(_QWORD *)this + *(_QWORD *)(v11 + 112);
    v12 = *(unsigned int *)(v11 + 104) * (unint64_t)(16 * *(_DWORD *)(v11 + 80));
    v29 = (v12 & 0xFFFFFFFF00000000) == 0;
    v13 = v12 & 0xFFFFFFF0;
    if (v29)
      v14 = v13;
    else
      v14 = 0xFFFFFFFFLL;
    v10 += caulk::numeric::exceptional_add<unsigned long>(v14, 15) & 0xFFFFFFFFFFFFFFF0;
  }
  v15 = *((unsigned int *)*v5 + 27) * (unint64_t)(16 * *((_DWORD *)*v5 + 21));
  v29 = (v15 & 0xFFFFFFFF00000000) == 0;
  v16 = v15 & 0xFFFFFFF0;
  if (v29)
    v17 = v16;
  else
    v17 = 0xFFFFFFFFLL;
  if ((unint64_t)caulk::numeric::exceptional_add<unsigned long>(v17, 15) >= 0x10)
  {
    v19 = *((_QWORD *)this + 2);
    v20 = *(_QWORD *)(v19 + 112);
    v21 = *(unsigned int *)(v19 + 104) * (unint64_t)(16 * *(_DWORD *)(v19 + 80));
    v29 = (v21 & 0xFFFFFFFF00000000) == 0;
    v22 = v21 & 0xFFFFFFF0;
    if (v29)
      v23 = v22;
    else
      v23 = 0xFFFFFFFFLL;
    v18 = *(_QWORD *)this;
    *((_QWORD *)this + 26) = v18
                           + v20
                           + (caulk::numeric::exceptional_add<unsigned long>(v23, 15) & 0xFFFFFFFFFFFFFFF0);
    v24 = *(unsigned int *)(*((_QWORD *)this + 2) + 108)
        * (unint64_t)(16 * *(_DWORD *)(*((_QWORD *)this + 2) + 84));
    v29 = (v24 & 0xFFFFFFFF00000000) == 0;
    v25 = v24 & 0xFFFFFFF0;
    if (v29)
      v26 = v25;
    else
      v26 = 0xFFFFFFFFLL;
    v10 += caulk::numeric::exceptional_add<unsigned long>(v26, 15) & 0xFFFFFFFFFFFFFFF0;
  }
  v27 = v2 + v3;
  v28 = 2003329396;
  v29 = v10 <= v27 && (v10 & 0xF) == 0;
  if (v29)
  {
    v30 = *((_QWORD *)this + 2);
    if (v10 == *(_QWORD *)this + *(_QWORD *)(v30 + 120))
    {
      v32 = *(_DWORD *)(v30 + 88) ? v10 : 0;
      *((_QWORD *)this + 28) = v32;
      v33 = *(_DWORD *)(v30 + 92);
      v34 = v33 ? v10 : 0;
      *((_QWORD *)this + 29) = v34;
      v35 = v33
          ? caulk::numeric::exceptional_add<unsigned long>(40 * (*(_DWORD *)(v30 + 104) + 1) + 44, 15) & 0xFFFFFFFFFFFFFFF0
          : 0;
      v36 = v10 + v35;
      if (v36 <= v27 && (v36 & 0xF) == 0)
      {
        v37 = *((_QWORD *)this + 2);
        if (v36 == *(_QWORD *)this + *(_QWORD *)(v37 + 128))
        {
          *((int8x16_t *)this + 15) = vbicq_s8((int8x16_t)vdupq_n_s64(v36), (int8x16_t)vceqzq_s64(*((int64x2_t *)this + 14)));
          v38 = *(unsigned int *)(v37 + 92) * (unint64_t)(*(_DWORD *)(v37 + 104) + 1);
          v39 = (v38 & 0xFFFFFFFF00000000) != 0 ? 0xFFFFFFFFLL : v38;
          v40 = v36 + (caulk::numeric::exceptional_add<unsigned long>(v39, 15) & 0xFFFFFFFFFFFFFFF0);
          v41 = v40 <= v27 && (v40 & 0xF) == 0;
          if (v41 && v40 == *(_QWORD *)this + *(_QWORD *)(*((_QWORD *)this + 2) + 136))
          {
            v45 = v40;
            v44 = *((_OWORD *)this + 15);
            std::make_unique[abi:ne180100]<AudioConverterSharedAudioBuffers,RenderConfiguration *&,unsigned char *,std::array<unsigned char *,2ul> &,std::array<unsigned char *,2ul>>(&v46, v5, (uint64_t *)&v45, (uint64_t *)this + 28, (uint64_t *)&v44);
            v42 = *((_QWORD *)this + 24);
            *((_QWORD *)this + 24) = v46;
            if (v42)
              std::default_delete<AudioConverterSharedAudioBuffers>::operator()[abi:ne180100](v42);
            v43 = v40 + *((_QWORD *)*v5 + 19) + *((_QWORD *)*v5 + 18);
            if (v43 <= v27)
            {
              if ((v43 & 0xF) != 0)
                return 2003329396;
              else
                return 0;
            }
          }
        }
      }
    }
  }
  return v28;
}

uint64_t AudioConverterServer::setup(AudioConverterServer *this, const char *a2)
{
  size_t v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::value_type *v12;
  std::string::size_type size;
  int v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  std::string __p;
  char v21;
  _BYTE v22[29];
  void *__dst[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;
  _DWORD v27[2];
  _QWORD v28[3];
  _QWORD v29[10];
  char v30;
  uint64_t v31;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
  std::ostream::operator<<();
  std::string::basic_string[abi:ne180100]<0>(&v25, " (");
  v4 = strlen(a2);
  v5 = std::string::insert(&v25, 0, a2, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)v29);
  if ((v24 & 0x80u) == 0)
    v7 = __dst;
  else
    v7 = (void **)__dst[0];
  if ((v24 & 0x80u) == 0)
    v8 = v24;
  else
    v8 = (std::string::size_type)__dst[1];
  v9 = std::string::append(&v26, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&__p, ")", 1uLL);
  v12 = (std::string::value_type *)v11->__r_.__value_.__r.__words[0];
  size = v11->__r_.__value_.__l.__size_;
  v27[0] = v11->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v27 + 3) = *(_DWORD *)((char *)&v11->__r_.__value_.__r.__words[2] + 3);
  v14 = SHIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v24 < 0)
    operator delete(__dst[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((v14 & 0x80000000) == 0)
  {
LABEL_15:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    __p.__r_.__value_.__l.__size_ = size;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v27[0];
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v27 + 3);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v14;
    goto LABEL_18;
  }
  std::string::__init_copy_ctor_external(&__p, v12, size);
LABEL_18:
  v21 = 1;
  *(_OWORD *)v22 = xmmword_18F117160;
  *(_DWORD *)&v22[16] = 1;
  v22[20] = 1;
  v22[24] = 0;
  v22[28] = 0;
  *(_OWORD *)((char *)this + 104) = xmmword_18F117160;
  v15 = (const void *)voucher_copy();
  v16 = v15;
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  if (v15)
    CFRetain(v15);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  v26.__r_.__value_.__l.__size_ = (std::string::size_type)this;
  if (*((_BYTE *)this + 96))
  {
    caulk::thread::~thread((AudioConverterServer *)((char *)this + 80));
    *((_BYTE *)this + 96) = 0;
  }
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 0;
  v17 = operator new();
  v26.__r_.__value_.__r.__words[0] = 0;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)v17, (__int128 *)&__p);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)v22;
  *(_OWORD *)(v17 + 45) = *(_OWORD *)&v22[13];
  *(_QWORD *)(v17 + 64) = v16;
  *(_QWORD *)(v17 + 72) = this;
  caulk::thread::start((AudioConverterServer *)((char *)this + 80), (caulk::thread::attributes *)v17, (void *(*)(void *))caulk::thread_proxy<std::tuple<caulk::thread::attributes,AudioConverterServer::setup(char const*)::{lambda(void)#1},std::tuple<>>>, (void *)v17);
  *((_BYTE *)this + 96) = 1;
  if (v16)
    CFRelease(v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_26;
  }
  else if ((v14 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v12);
LABEL_26:
  v28[0] = *MEMORY[0x1E0DE4F50];
  v18 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v28[2] = v18;
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v30 < 0)
    operator delete((void *)v29[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x193FFE3A0](&v31);
}

void sub_18EFEB5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40)
{
  void *v40;

  operator delete(v40);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void std::default_delete<AudioConverterSharedAudioBuffers>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t i;

  for (i = 144; i != -32; i -= 88)
    ExtendedAudioBufferList_Destroy(*(std::pmr **)(a1 + i));
  JUMPOUT(0x193FFE460);
}

void AudioConverterServer::~AudioConverterServer(const void **this)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *this = off_1E28FFC78;
  if (*((_BYTE *)this + 96))
  {
    AudioConverterLog();
    v2 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_FAULT))
    {
      v3 = 136315394;
      v4 = "AudioConverterServer.h";
      v5 = 1024;
      v6 = 61;
      _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_FAULT, "%25s:%-5d Server destroyed before proper shutdown", (uint8_t *)&v3, 0x12u);
    }
    AudioConverterServer::shutdown((AudioConverterServer *)this);
  }
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)(this + 26));
  if (*((_BYTE *)this + 200))
    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)(this + 16));
  if (*((_BYTE *)this + 96))
    caulk::thread::~thread((caulk::thread *)(this + 10));
  audioipc::eventlink_primitive::~eventlink_primitive((audioipc::eventlink_primitive *)(this + 7));
  unilaterally_billed_shared_memory::~unilaterally_billed_shared_memory(this + 2);
}

void sub_18EFEB7FC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AudioConverterServer::shutdown(AudioConverterServer *this)
{
  unsigned int v2;

  v2 = atomic_load(*((unsigned int **)this + 3));
  if (v2 != 2)
  {
    atomic_store(1u, (unsigned __int8 *)this + 49);
    os_eventlink_cancel();
  }
  if (*((_BYTE *)this + 96))
  {
    caulk::thread::join((AudioConverterServer *)((char *)this + 80));
    if (*((_BYTE *)this + 96))
    {
      caulk::thread::~thread((AudioConverterServer *)((char *)this + 80));
      *((_BYTE *)this + 96) = 0;
    }
  }
}

void audioipc::os_workgroup_joiner::~os_workgroup_joiner(audioipc::os_workgroup_joiner *this)
{
  if (!*((_DWORD *)this + 16))
    caulk::mach::os_workgroup_managed::leave(this);
  caulk::mach::os_workgroup_managed::~os_workgroup_managed(this);
}

const void **AudioConverterServer::setup(char const*)::{lambda(void)#1}::~setup(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **applesauce::CF::ObjectRef<voucher_s *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t caulk::thread_proxy<std::tuple<caulk::thread::attributes,AudioConverterServer::setup(char const*)::{lambda(void)#1},std::tuple<>>>(caulk::thread::attributes *a1)
{
  uint64_t v2;

  caulk::thread::attributes::apply_to_this_thread(a1);
  v2 = *((_QWORD *)a1 + 9);
  voucher_adopt();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  voucher_adopt();
  std::default_delete<std::tuple<caulk::thread::attributes,AudioConverterServer::setup(char const*)::{lambda(void)#1},std::tuple<>>>::operator()[abi:ne180100]((uint64_t)a1);
  return 0;
}

void sub_18EFEB98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  NSObject *v10;

  if (a2)
  {
    voucher_adopt();
    __cxa_begin_catch(exception_object);
    AudioConverterLog();
    v10 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "AudioConverterServer.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 101;
      _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Server thread exiting with uncaught exception", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x18EFEB950);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<std::tuple<caulk::thread::attributes,AudioConverterServer::setup(char const*)::{lambda(void)#1},std::tuple<>>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  const void *v2;

  if (result)
  {
    v1 = result;
    v2 = *(const void **)(result + 64);
    if (v2)
      CFRelease(v2);
    if (*(_BYTE *)(v1 + 24))
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
    }
    JUMPOUT(0x193FFE460);
  }
  return result;
}

uint64_t std::make_unique[abi:ne180100]<AudioConverterSharedAudioBuffers,RenderConfiguration *&,unsigned char *,std::array<unsigned char *,2ul> &,std::array<unsigned char *,2ul>>(uint64_t *a1, __int128 **a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  AudioStreamBasicDescription *v21;
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  unsigned int *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x1E0C80C00];
  v9 = operator new();
  v10 = v9;
  v11 = *a2;
  v12 = *((_DWORD *)v11 + 23);
  if (v12)
    v12 = *((_DWORD *)v11 + 26) + 1;
  v13 = *a3;
  v14 = *a4;
  v15 = a4[1];
  v17 = *a5;
  v16 = a5[1];
  v18 = *((_DWORD *)v11 + 22);
  v19 = *v11;
  v20 = v11[1];
  *(_QWORD *)(v9 + 32) = *((_QWORD *)v11 + 4);
  *(_OWORD *)v9 = v19;
  *(_OWORD *)(v9 + 16) = v20;
  *(_DWORD *)(v9 + 40) = 0;
  *(_DWORD *)(v9 + 44) = v12;
  *(_DWORD *)(v9 + 48) = v18;
  CA::AudioBuffers::AudioBuffers((CA::AudioBuffers *)(v9 + 56), (const AudioStreamBasicDescription *)v9, 0);
  *(_QWORD *)(v10 + 64) = v17;
  *(_QWORD *)(v10 + 72) = v14;
  *(_DWORD *)(v10 + 80) = -1;
  v21 = (AudioStreamBasicDescription *)(v10 + 88);
  v22 = *((_DWORD *)v11 + 23);
  if (v22)
    v23 = *((_DWORD *)v11 + 26) + 1;
  else
    v23 = 0;
  v24 = *(__int128 *)((char *)v11 + 40);
  v25 = *(__int128 *)((char *)v11 + 56);
  *(_QWORD *)(v10 + 120) = *((_QWORD *)v11 + 9);
  *(_OWORD *)&v21->mSampleRate = v24;
  *(_OWORD *)(v10 + 104) = v25;
  *(_DWORD *)(v10 + 128) = 0;
  *(_DWORD *)(v10 + 132) = v23;
  *(_DWORD *)(v10 + 136) = v22;
  CA::AudioBuffers::AudioBuffers((CA::AudioBuffers *)(v10 + 144), v21, 0);
  v26 = 0;
  *(_QWORD *)(v10 + 152) = v16;
  *(_QWORD *)(v10 + 160) = v15;
  *(_DWORD *)(v10 + 168) = -1;
  v44[0] = 0x100000000;
  v27 = 1;
  v28 = (unsigned int *)v44;
  do
  {
    v29 = v26;
    v30 = *v28;
    v31 = v10 + 88 * v30;
    if ((*(_BYTE *)(v31 + 12) & 0x20) != 0)
      v32 = *(unsigned int *)(v31 + 28);
    else
      v32 = 1;
    result = caulk::numeric::exceptional_add<unsigned long>(*((_QWORD *)v11 + v30 + 18) / v32 - 15, 15);
    v34 = result & 0xFFFFFFFFFFFFFFF0;
    v35 = v10 + 88 * v30;
    *(_DWORD *)(v35 + 40) = result & 0xFFFFFFF0;
    v36 = *(_QWORD *)(v35 + 56);
    v37 = *(unsigned int *)(v36 + 48);
    if (16 * v37)
    {
      v38 = v36 + 56;
      v39 = v38 + 16 * v37;
      v40 = (uint64_t)v11 + 40 * *v28;
      v41 = *(_DWORD *)(v40 + 12);
      do
      {
        v42 = *(_DWORD *)(v40 + 28);
        if ((v41 & 0x20) != 0)
          v42 = 1;
        *(_QWORD *)(v38 + 8) = v13;
        *(_DWORD *)v38 = v42;
        *(_DWORD *)(v38 + 4) = v34;
        v38 += 16;
        v13 += v34;
      }
      while (v38 != v39);
    }
    v28 = (unsigned int *)v44 + v27;
    v26 = 1;
    v27 = 2;
  }
  while ((v29 & 1) == 0);
  *a1 = v10;
  return result;
}

void sub_18EFEBCA4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AudioConverterRenderServer::~AudioConverterRenderServer(AudioConverterRenderServer *this)
{
  AudioConverterRenderServer::~AudioConverterRenderServer(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E28FFCA8;
  AudioConverterServer::shutdown(this);
  v2 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v2)
    std::default_delete<AudioConverterSharedAudioBuffers>::operator()[abi:ne180100](v2);
  AudioConverterServer::~AudioConverterServer((const void **)this);
}

uint64_t AudioConverterRenderServer::getRenderContext(AudioConverterRenderServer *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 58) + 24);
}

void AudioConverterRenderServer::serverThread(AudioConverterRenderServer *this)
{
  void *v2;
  unsigned __int8 v3;
  unsigned int *v4;
  unint64_t v5;
  unsigned __int8 v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  int v13;
  UInt32 v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  AudioBufferList *v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  AudioStreamPacketDescription *v25;
  uint64_t v26;
  uint64_t *v27;
  NSObject *v28;
  int v29;
  void *v30;
  int64_t v31;
  int i;
  uint64_t v33;
  size_t v34;
  void *v35;
  int v36;
  OSStatus v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned __int8 v49;
  unsigned int v50;
  unint64_t v51;
  unsigned __int8 v52;
  NSObject *v53;
  unsigned int *v54;
  UInt32 ioOutputDataPacketSize;
  AudioConverterRenderServer *inInputDataProcUserData;
  uint64_t __src;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  uint8_t buf[48];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  audioipc::eventlink_primitive::activate();
  v3 = atomic_load((unsigned __int8 *)this + 49);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  if ((v3 & 1) == 0)
  {
    atomic_store(0, v4);
    v5 = audioipc::eventlink_primitive::wait_or_error(*((audioipc::eventlink_primitive **)this + 7));
    v6 = atomic_load((unsigned __int8 *)this + 49);
    if ((v6 & 1) == 0)
    {
      v7 = v5;
      v8 = HIDWORD(v5);
      while (1)
      {
        v9 = atomic_load(*((unsigned int **)this + 4));
        if (v9 == 2)
          break;
        if (!(_BYTE)v8)
        {
          v53 = CADefaultLog();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "rt_receiver::receive_loop";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v7;
            _os_log_error_impl(&dword_18EE07000, v53, OS_LOG_TYPE_ERROR, "%s failed: %d", buf, 0x12u);
          }
          break;
        }
        atomic_store(1u, *((unsigned int **)this + 3));
        v10 = (unsigned __int8 *)*((_QWORD *)this + 5);
        v11 = *v10;
        switch(v11)
        {
          case 1:
            AudioConverterServer::syncThreadPriorityAndWorkgroup(this);
            v14 = *((_DWORD *)v10 + 2);
            v15 = *((_DWORD *)v10 + 4);
            v16 = *((unsigned __int16 *)v10 + 10);
            inInputDataProcUserData = this;
            v17 = *((_QWORD *)this + 59);
            v54 = *(unsigned int **)(v17 + 144);
            v19 = (AudioBufferList *)(v54 + 12);
            v18 = v54[12];
            v20 = 16 * v18;
            if (16 * v18)
            {
              v21 = *(_DWORD *)(v17 + 128);
              v22 = v54 + 15;
              v23 = v54 + 15;
              v24 = 16 * v18;
              do
              {
                *v23 = v21;
                v23 += 4;
                v24 -= 16;
              }
              while (v24);
              do
              {
                *v22 = v15;
                v22 += 4;
                v20 -= 16;
              }
              while (v20);
            }
            v25 = (AudioStreamPacketDescription *)*((_QWORD *)this + 61);
            if (v25 && *(_DWORD *)(*((_QWORD *)this + 37) + 108) < v14)
              v14 = *(_DWORD *)(*((_QWORD *)this + 37) + 108);
            ioOutputDataPacketSize = v14;
            if (*(_DWORD *)(v17 + 96) == 1885564203 && *(_DWORD *)(v17 + 136))
            {
              if (v19->mBuffers[v18].mNumberChannels == 1094863915)
              {
                v26 = v54[3];
                if ((_DWORD)v26)
                  v27 = (uint64_t *)((char *)v54 + v26);
                else
                  v27 = 0;
              }
              else
              {
                v27 = 0;
              }
              v30 = (void *)*v27;
              v31 = v27[1] - *v27;
              if (v31 >= 1)
              {
                bzero(v30, v31);
                v30 = (void *)*v27;
              }
              v27[1] = (uint64_t)v30;
              memset(buf, 0, 44);
              buf[24] = 1;
              *(_QWORD *)&buf[32] = 0x10000002CLL;
              AudioMetadataFrame::begin_new(v27, (unsigned int *)buf);
              if (v16)
              {
                for (i = 0; i != v16; ++i)
                {
                  v33 = *(_QWORD *)(v17 + 152);
                  v34 = *(unsigned int *)(v17 + 136);
                  v35 = (void *)(v33 + (v34 * i));
                  __src = 1;
                  v58 = 40;
                  v59 = 0;
                  v60 = 0x100000000;
                  v61 = v34;
                  v62 = v35;
                  if (i || (v36 = *(_DWORD *)(v17 + 168), v36 == -1))
                    bzero(v35, v34);
                  else
                    memcpy(v35, (const void *)(v33 + (v36 * v34)), v34);
                  AudioMetadataFrame_AppendEvent(v27, (char *)&__src);
                }
              }
              memcpy(*(void **)(v17 + 160), (const void *)*v27, v27[1] - *v27);
              *(_DWORD *)(v17 + 168) = -1;
            }
            v37 = AudioConverterFillComplexBuffer(*((AudioConverterRef *)this + 1), (AudioConverterComplexInputDataProc)AudioConverterRenderServer::render(unsigned int,unsigned int,unsigned int,unsigned short)::{lambda(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *)#1}::__invoke, &inInputDataProcUserData, &ioOutputDataPacketSize, v19, v25);
            v38 = *((_QWORD *)this + 59);
            if (*(_DWORD *)(v38 + 136))
            {
              v39 = *(void **)(v38 + 160);
              if (v39)
              {
                v40 = *(_QWORD *)(v38 + 144);
                v41 = *(unsigned int *)(v40 + 12);
                v42 = v40 + v41;
                v43 = (_DWORD)v41 ? v42 : 0;
                memcpy(v39, *(const void **)v43, *(_QWORD *)(v43 + 8) - *(_QWORD *)v43);
                v44 = *(_QWORD *)(v43 + 8) - *(_QWORD *)v43 <= 0x2BuLL ? 0 : *(_QWORD *)v43;
                if (*(_DWORD *)(v44 + 64))
                {
                  v45 = 0;
                  v46 = v44 + 44;
                  v47 = *(_DWORD *)(v44 + 40);
                  do
                  {
                    if (v47 == v45)
                      break;
                    *(_DWORD *)(v38 + 168) = v45;
                    v46 += *(unsigned int *)(v46 + 8);
                    ++v45;
                  }
                  while (*(_DWORD *)(v46 + 20));
                }
              }
            }
            v48 = *((_QWORD *)this + 58);
            *(_DWORD *)(v48 + 16) = v54[15];
            *(_DWORD *)(v48 + 8) = ioOutputDataPacketSize;
            *((_DWORD *)v10 + 1) = v37;
            goto LABEL_51;
          case 4:
            v13 = ACOOPSharedMemory::partitionBuffers((AudioConverterRenderServer *)((char *)this + 280));
            break;
          case 3:
            v12 = *((_QWORD *)this + 1);
            *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterReset::$_0>;
            *(_QWORD *)&buf[8] = &__src;
            v13 = with_resolved(v12, (uint64_t (**)(uint64_t, uint64_t))buf);
            break;
          default:
            AudioConverterLog();
            v28 = AudioConverterLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              v29 = *v10;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AudioConverterRenderServer.h";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 72;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v29;
              _os_log_impl(&dword_18EE07000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown or unexpected message: %d", buf, 0x18u);
            }
            goto LABEL_51;
        }
        *((_DWORD *)v10 + 1) = v13;
LABEL_51:
        *(_WORD *)v10 = 25856;
        v49 = atomic_load((unsigned __int8 *)this + 49);
        if ((v49 & 1) == 0)
        {
          v50 = atomic_load(*((unsigned int **)this + 4));
          if (v50 != 2)
          {
            atomic_store(0, *((unsigned int **)this + 3));
            v51 = audioipc::eventlink_primitive::wait_signal_or_error(*((audioipc::eventlink_primitive **)this + 7));
            if (!HIDWORD(v51))
            {
              v7 = v51;
              LOBYTE(v8) = 0;
            }
            v52 = atomic_load((unsigned __int8 *)this + 49);
            if ((v52 & 1) == 0)
              continue;
          }
        }
        break;
      }
    }
    v4 = (unsigned int *)*((_QWORD *)this + 3);
  }
  atomic_store(2u, v4);
  AudioConverterServer::WorkgroupJoiner::leave((AudioConverterRenderServer *)((char *)this + 128), v2);
}

void AudioConverterServer::WorkgroupJoiner::leave(AudioConverterServer::WorkgroupJoiner *this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  char v6;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_BYTE *)this + 72))
    {
      audioipc::os_workgroup_joiner::~os_workgroup_joiner(this);
      *((_BYTE *)this + 72) = 0;
      v2 = *((_QWORD *)this + 11);
    }
    v11 = 0;
    v4 = MEMORY[0x1E0DDB760] + 16;
    *((_QWORD *)this + 11) = 0;
    v7[0] = v4;
    v7[1] = v2;
    caulk::mach::details::release_os_object(0, a2);
    v5 = *((_OWORD *)this + 7);
    v8 = *((_OWORD *)this + 6);
    v9 = v5;
    v10 = *((_QWORD *)this + 16);
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_QWORD *)this + 16) = 0;
    v6 = *((_BYTE *)this + 136);
    *((_BYTE *)this + 136) = 0;
    LOBYTE(v11) = v6;
    caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)v7);
  }
}

void AudioConverterServer::syncThreadPriorityAndWorkgroup(AudioConverterServer *this)
{
  void *v2;
  unint64_t v3;
  audioipc::os_workgroup_joiner *v4;
  __int128 v5;
  _BYTE v6[8];
  caulk::mach::details *v7;
  __int128 v8;
  _BYTE v9[25];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (*(uint64_t (**)(AudioConverterServer *))(*(_QWORD *)this + 16))(this);
  if (v3 > 0x5F)
  {
    if (*((_DWORD *)this + 30) != 97)
    {
      caulk::mach::this_thread::set_priority();
      *((_DWORD *)this + 30) = 97;
    }
    auoop::WorkgroupMirror::lookup((auoop::WorkgroupMirror *)v6, *((_QWORD *)this + 34), v3);
    if (v7 != *((caulk::mach::details **)this + 27) || v9[24] != *((unsigned __int8 *)this + 264))
    {
      v4 = (AudioConverterServer *)((char *)this + 128);
      if (v7)
      {
        std::optional<audioipc::os_workgroup_joiner>::emplace[abi:ne180100]<caulk::mach::os_workgroup_managed &,void>(v4, (uint64_t)v6);
      }
      else if (*((_BYTE *)this + 200))
      {
        audioipc::os_workgroup_joiner::~os_workgroup_joiner(v4);
        *((_BYTE *)this + 200) = 0;
      }
      caulk::mach::details::holder::operator=((caulk::mach::details **)this + 27, &v7);
      v5 = *(_OWORD *)v9;
      *((_OWORD *)this + 14) = v8;
      *((_OWORD *)this + 15) = v5;
      *(_OWORD *)((char *)this + 249) = *(_OWORD *)&v9[9];
    }
    caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)v6);
  }
  else
  {
    AudioConverterServer::WorkgroupJoiner::leave((AudioConverterServer *)((char *)this + 128), v2);
    if (v3)
      audioipc::priority_propagator_impl::apply_priority((uint64_t)this + 104, v3);
  }
}

uint64_t AudioConverterRenderServer::render(unsigned int,unsigned int,unsigned int,unsigned short)::{lambda(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *)#1}::__invoke(double a1, uint64_t a2, int *a3, unsigned int *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  const void *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  v9 = 561145203;
  v10 = *(_QWORD **)a6;
  v11 = a4[3];
  v12 = *a3;
  v13 = *(unsigned __int8 **)(*(_QWORD *)a6 + 464);
  v14 = *(_QWORD *)a6 + 16;
  if (audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::can_send(v14, a1))
  {
    *(_WORD *)v13 = 26112;
    *((_DWORD *)v13 + 2) = v12;
    *((_DWORD *)v13 + 3) = v11;
    if (audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::signal_wait_with_timeout(v14, 100.0))
    {
      v15 = *v13;
      v9 = v15 == 2 ? 0 : 4294956420;
      if (v15 == 2)
      {
        v17 = (unsigned int *)v10[58];
        v16 = v10[59];
        v18 = *(unsigned int **)(v16 + 56);
        v19 = v18 + 14;
        v20 = v18[12];
        if (16 * v20)
        {
          v21 = v17[3];
          v22 = *(_DWORD *)(v16 + 40);
          v23 = 16 * v20;
          v24 = v18 + 15;
          v25 = v23;
          do
          {
            *v24 = v22;
            v24 += 4;
            v25 -= 16;
          }
          while (v25);
          v26 = v18 + 15;
          do
          {
            *v26 = v21;
            v26 += 4;
            v23 -= 16;
          }
          while (v23);
          LODWORD(v20) = v18[12];
        }
        v27 = *a4;
        if (v20 < *a4)
          v27 = v20;
        memcpy(a4 + 2, v19, 16 * v27);
        *a3 = v17[2];
        if (a5)
          *a5 = v10[60];
        return v17[1];
      }
    }
  }
  return v9;
}

BOOL audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::can_send(uint64_t a1, double a2)
{
  unsigned __int8 v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL8 result;
  unint64_t v8;

  v2 = atomic_load((unsigned __int8 *)(a1 + 33));
  v3 = *(unsigned int **)(a1 + 8);
  if ((v2 & 1) != 0)
  {
    result = 0;
    atomic_store(2u, v3);
    return result;
  }
  v4 = atomic_load(v3);
  if (v4 == 2)
    return 0;
  v5 = atomic_load(*(unsigned int **)(a1 + 16));
  if (v5 == 2)
    return 0;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (!atomic_load(*(unsigned int **)(a1 + 16)))
    {
      v8 = audioipc::eventlink_primitive::timed_wait_or_error(*(audioipc::eventlink_primitive **)(a1 + 40), a2);
      if ((v8 & 0xFF00000000) != 0)
        return v8 != 0;
      audioipc::log_error((audioipc *)"can_send draining", (const char *)v8);
    }
    return 0;
  }
  return 1;
}

BOOL audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::signal_wait_with_timeout(uint64_t a1, double a2)
{
  unint64_t v3;
  unsigned __int8 v4;
  char v5;
  unsigned int *v6;
  _BOOL8 result;

  atomic_store(0, *(unsigned int **)(a1 + 8));
  v3 = audioipc::eventlink_primitive::timed_wait_signal_or_error(*(audioipc::eventlink_primitive **)(a1 + 40), a2);
  v4 = atomic_load((unsigned __int8 *)(a1 + 33));
  if ((v4 & 1) != 0)
  {
    result = 0;
    atomic_store(2u, *(unsigned int **)(a1 + 8));
  }
  else
  {
    v5 = v3;
    v6 = *(unsigned int **)(a1 + 8);
    if (HIDWORD(v3))
    {
      atomic_store(1u, v6);
      result = v3 != 0;
      *(_BYTE *)(a1 + 32) = v5;
    }
    else
    {
      atomic_store(2u, v6);
      audioipc::log_error((audioipc *)"rt_sender::signal_wait_with_timeout", (const char *)v3);
      return 0;
    }
  }
  return result;
}

double auoop::WorkgroupMirror::lookup(auoop::WorkgroupMirror *this, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  __int128 v11;
  double result;
  uint64_t v13;
  caulk::mach::details *v14;
  __int128 v15;
  _OWORD v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  LOBYTE(v13) = 0;
  v17 = 0;
  v4 = (unsigned int *)(a2 + 56);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = (uint64_t *)atomic_load((unint64_t *)(a2 + 48));
  if (v6)
  {
    caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey(v6, a3);
    v7 = (_OWORD *)a2;
    if (a2)
    {
      v13 = MEMORY[0x1E0DDB760] + 16;
      v14 = (caulk::mach::details *)caulk::mach::details::retain_os_object(*(caulk::mach::details **)(a2 + 24), (void *)a2);
      v8 = v7[3];
      v9 = *(_OWORD *)((char *)v7 + 57);
      v15 = v7[2];
      v16[0] = v8;
      *(_OWORD *)((char *)v16 + 9) = v9;
      v17 = 1;
    }
  }
  do
    v10 = __ldaxr(v4);
  while (__stlxr(v10 - 1, v4));
  if (v17)
  {
    *(_QWORD *)this = MEMORY[0x1E0DDB760] + 16;
    *((_QWORD *)this + 1) = caulk::mach::details::retain_os_object(v14, (void *)a2);
    v11 = v16[0];
    *((_OWORD *)this + 1) = v15;
    *((_OWORD *)this + 2) = v11;
    result = *(double *)((char *)v16 + 9);
    *(_OWORD *)((char *)this + 41) = *(_OWORD *)((char *)v16 + 9);
    if (v17)
      caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v13);
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
    *(_QWORD *)this = MEMORY[0x1E0DDB760] + 16;
    result = 0.0;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *((_BYTE *)this + 56) = 0;
  }
  return result;
}

void sub_18EFEC7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17)
    caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&a9);
  _Unwind_Resume(exception_object);
}

audioipc::os_workgroup_joiner *std::optional<audioipc::os_workgroup_joiner>::emplace[abi:ne180100]<caulk::mach::os_workgroup_managed &,void>(audioipc::os_workgroup_joiner *this, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*((_BYTE *)this + 72))
  {
    audioipc::os_workgroup_joiner::~os_workgroup_joiner(this);
    *((_BYTE *)this + 72) = 0;
  }
  *(_QWORD *)this = MEMORY[0x1E0DDB760] + 16;
  *((_QWORD *)this + 1) = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(a2 + 8), (void *)a2);
  v4 = *(_OWORD *)(a2 + 41);
  v5 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)this + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)this + 2) = v5;
  *(_OWORD *)((char *)this + 41) = v4;
  *((_DWORD *)this + 16) = caulk::mach::os_workgroup_managed::join(this);
  *((_BYTE *)this + 72) = 1;
  return this;
}

caulk::mach::details **caulk::mach::details::holder::operator=(caulk::mach::details **a1, caulk::mach::details **a2)
{
  void *v4;

  if (a1 != a2)
  {
    caulk::mach::details::release_os_object(*a1, a2);
    *a1 = (caulk::mach::details *)caulk::mach::details::retain_os_object(*a2, v4);
  }
  return a1;
}

void AudioConverterPropertyServer::~AudioConverterPropertyServer(AudioConverterPropertyServer *this)
{
  AudioConverterPropertyServer::~AudioConverterPropertyServer(this);
  JUMPOUT(0x193FFE460);
}

{
  *(_QWORD *)this = &off_1E28FFCD8;
  AudioConverterServer::shutdown(this);
  AudioConverterServer::~AudioConverterServer((const void **)this);
}

uint64_t AudioConverterPropertyServer::getRenderContext(AudioConverterPropertyServer *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 40) + 8);
}

void AudioConverterPropertyServer::serverThread(AudioConverterPropertyServer *this)
{
  void *v2;
  unsigned __int8 v3;
  unsigned int *v4;
  unint64_t v5;
  unsigned __int8 v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  int v15;
  unsigned __int8 v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int8 v19;
  NSObject *v20;
  int v21;
  _QWORD v22[3];
  _QWORD *v23;
  int *v24;
  int v25;
  _BYTE buf[18];
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  audioipc::eventlink_primitive::activate();
  v3 = atomic_load((unsigned __int8 *)this + 49);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  if ((v3 & 1) == 0)
  {
    atomic_store(0, v4);
    v5 = audioipc::eventlink_primitive::wait_or_error(*((audioipc::eventlink_primitive **)this + 7));
    v6 = atomic_load((unsigned __int8 *)this + 49);
    if ((v6 & 1) == 0)
    {
      v7 = v5;
      v8 = HIDWORD(v5);
      while (1)
      {
        v9 = atomic_load(*((unsigned int **)this + 4));
        if (v9 == 2)
          break;
        if (!(_BYTE)v8)
        {
          v20 = CADefaultLog();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "rt_receiver::receive_loop";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v7;
            _os_log_error_impl(&dword_18EE07000, v20, OS_LOG_TYPE_ERROR, "%s failed: %d", buf, 0x12u);
          }
          break;
        }
        atomic_store(1u, *((unsigned int **)this + 3));
        v10 = (unsigned __int8 *)*((_QWORD *)this + 5);
        if (*v10 == 1)
        {
          AudioConverterServer::syncThreadPriorityAndWorkgroup(this);
          v21 = 336;
          v11 = (_QWORD *)*((_QWORD *)this + 41);
          *v11 = *((_QWORD *)this + 42);
          v12 = *((_QWORD *)this + 1);
          v25 = 1651401828;
          v23 = v11;
          v24 = &v21;
          v22[0] = &v25;
          v22[1] = &v24;
          v22[2] = &v23;
          *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
          *(_QWORD *)&buf[8] = v22;
          v13 = with_resolved(v12, (uint64_t (**)(uint64_t, uint64_t))buf);
          *v11 = 0;
          *((_DWORD *)v10 + 1) = v13;
        }
        else
        {
          AudioConverterLog();
          v14 = AudioConverterLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            v15 = *v10;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AudioConverterPropertyServer.h";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 60;
            v27 = 1024;
            v28 = v15;
            _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown or unexpected message: %d", buf, 0x18u);
          }
        }
        *(_WORD *)v10 = 25856;
        v16 = atomic_load((unsigned __int8 *)this + 49);
        if ((v16 & 1) == 0)
        {
          v17 = atomic_load(*((unsigned int **)this + 4));
          if (v17 != 2)
          {
            atomic_store(0, *((unsigned int **)this + 3));
            v18 = audioipc::eventlink_primitive::wait_signal_or_error(*((audioipc::eventlink_primitive **)this + 7));
            LOBYTE(v8) = HIDWORD(v18) != 0;
            if (!HIDWORD(v18))
              v7 = v18;
            v19 = atomic_load((unsigned __int8 *)this + 49);
            if ((v19 & 1) == 0)
              continue;
          }
        }
        break;
      }
    }
    v4 = (unsigned int *)*((_QWORD *)this + 3);
  }
  atomic_store(2u, v4);
  AudioConverterServer::WorkgroupJoiner::leave((AudioConverterPropertyServer *)((char *)this + 128), v2);
}

swix::data *swix::data::data(swix::data *this, const void *bytes, size_t length)
{
  xpc_object_t v4;

  v4 = xpc_data_create(bytes, length);
  *(_QWORD *)this = v4;
  if (!v4)
    *(_QWORD *)this = xpc_null_create();
  return this;
}

void AudioConverterPropertyMarshaller::~AudioConverterPropertyMarshaller(AudioConverterPropertyMarshaller *this)
{
  PropertyMarshaller::~PropertyMarshaller(this);
  JUMPOUT(0x193FFE460);
}

uint64_t AudioConverterPropertyMarshaller::GetMarshaller(AudioConverterPropertyMarshaller *this, int a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t result;
  uint64_t (**v6)();
  int v7;
  int v8;
  int v9;
  unsigned __int16 v10;
  int v11;

  if (a2 <= 1685218161)
  {
    if (a2 <= 1634493036)
    {
      if (a2 > 1584688226)
      {
        if (a2 > 1633904995)
        {
          if (a2 <= 1634038641)
          {
            if (a2 <= 1633907487)
            {
              if (a2 != 1633904996 && a2 != 1633906532)
              {
                v2 = 1633906803;
LABEL_213:
                if (a2 == v2)
                  goto LABEL_214;
                goto LABEL_284;
              }
              goto LABEL_166;
            }
            if (a2 != 1633907488)
            {
              if (a2 != 1634034290)
              {
                if (a2 != 1634034540)
                  goto LABEL_284;
                goto LABEL_288;
              }
LABEL_221:
              result = operator new();
              *(_QWORD *)(result + 48) = 0;
              *(_QWORD *)(result + 56) = 0;
              *(_QWORD *)(result + 40) = 0;
              *(_QWORD *)(result + 16) = 0;
              *(_QWORD *)(result + 24) = 0;
              *(_BYTE *)(result + 32) = 0;
              v6 = &off_1E2906CE0;
              goto LABEL_264;
            }
LABEL_214:
            result = operator new();
            *(_QWORD *)(result + 48) = 0;
            *(_QWORD *)(result + 56) = 0;
            *(_QWORD *)(result + 40) = 0;
            *(_QWORD *)(result + 16) = 0;
            *(_QWORD *)(result + 24) = 0;
            *(_BYTE *)(result + 32) = 0;
            v6 = (uint64_t (**)())&off_1E29086D0;
            goto LABEL_264;
          }
          if (a2 <= 1634296683)
          {
            if (a2 == 1634038642)
              goto LABEL_221;
            if (a2 == 1634103408)
              goto LABEL_263;
            v3 = 1634167140;
            goto LABEL_262;
          }
          if (a2 == 1634296684)
            goto LABEL_288;
          if (a2 == 1634300786)
            goto LABEL_221;
          v11 = 1634366322;
          goto LABEL_229;
        }
        if (a2 > 1633842275)
        {
          if (a2 <= 1633903973)
          {
            if (a2 == 1633842276 || a2 == 1633903204)
              goto LABEL_263;
            v3 = 1633903206;
LABEL_262:
            if (a2 == v3)
              goto LABEL_263;
            goto LABEL_284;
          }
          switch(a2)
          {
            case 1633903974:
              goto LABEL_263;
            case 1633904233:
              result = operator new();
              *(_QWORD *)(result + 48) = 0;
              *(_QWORD *)(result + 56) = 0;
              *(_QWORD *)(result + 40) = 0;
              *(_QWORD *)(result + 16) = 0;
              *(_QWORD *)(result + 24) = 0;
              *(_BYTE *)(result + 32) = 0;
              v6 = &off_1E2907360;
              goto LABEL_264;
            case 1633904236:
LABEL_192:
              result = operator new();
              *(_QWORD *)(result + 48) = 0;
              *(_QWORD *)(result + 56) = 0;
              *(_QWORD *)(result + 40) = 0;
              *(_QWORD *)(result + 16) = 0;
              *(_QWORD *)(result + 24) = 0;
              *(_BYTE *)(result + 32) = 0;
              v6 = &off_1E2906D40;
              goto LABEL_264;
          }
          goto LABEL_284;
        }
        if (a2 <= 1584952427)
        {
          if (a2 == 1584688227)
            goto LABEL_263;
          v3 = 1584948336;
          goto LABEL_262;
        }
        if (a2 != 1584952428)
        {
          if (a2 == 1633776744)
          {
            result = operator new();
            *(_QWORD *)(result + 48) = 0;
            *(_QWORD *)(result + 56) = 0;
            *(_QWORD *)(result + 40) = 0;
            *(_QWORD *)(result + 16) = 0;
            *(_QWORD *)(result + 24) = 0;
            *(_BYTE *)(result + 32) = 0;
            v6 = &off_1E29075E0;
            goto LABEL_264;
          }
          v3 = 1633842022;
          goto LABEL_262;
        }
LABEL_268:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v6 = &off_1E29076E0;
        goto LABEL_264;
      }
      if (a2 <= 1584165743)
      {
        if (a2 > 1583572072)
        {
          if (a2 <= 1583576435)
          {
            if (a2 == 1583572073)
              goto LABEL_214;
            if (a2 == 1583574386)
            {
              result = operator new();
              *(_QWORD *)(result + 48) = 0;
              *(_QWORD *)(result + 56) = 0;
              *(_QWORD *)(result + 40) = 0;
              *(_QWORD *)(result + 16) = 0;
              *(_QWORD *)(result + 24) = 0;
              *(_BYTE *)(result + 32) = 0;
              v6 = &off_1E2907620;
              goto LABEL_264;
            }
            v4 = 1583574640;
LABEL_45:
            if (a2 != v4)
              goto LABEL_284;
LABEL_46:
            result = operator new();
            *(_QWORD *)(result + 48) = 0;
            *(_QWORD *)(result + 56) = 0;
            *(_QWORD *)(result + 40) = 0;
            *(_QWORD *)(result + 16) = 0;
            *(_QWORD *)(result + 24) = 0;
            *(_BYTE *)(result + 32) = 0;
            v6 = &off_1E2906E60;
            goto LABEL_264;
          }
          if (a2 == 1583576436)
            goto LABEL_268;
          if (a2 == 1583640678)
          {
            result = operator new();
            *(_QWORD *)(result + 48) = 0;
            *(_QWORD *)(result + 56) = 0;
            *(_QWORD *)(result + 40) = 0;
            *(_QWORD *)(result + 16) = 0;
            *(_QWORD *)(result + 24) = 0;
            *(_BYTE *)(result + 32) = 0;
            v6 = &off_1E29073A0;
            goto LABEL_264;
          }
          v8 = 1584164460;
LABEL_267:
          if (a2 != v8)
            goto LABEL_284;
          goto LABEL_268;
        }
        if (a2 <= 1583440992)
        {
          if (a2 == 560227360)
            goto LABEL_263;
          v3 = 610889331;
          goto LABEL_262;
        }
        if (a2 != 1583440993)
        {
          if (a2 == 1583506551)
            goto LABEL_263;
          v8 = 1583510388;
          goto LABEL_267;
        }
LABEL_291:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v6 = (uint64_t (**)())&off_1E2907210;
        goto LABEL_264;
      }
      if (a2 <= 1584428139)
      {
        if (a2 > 1584426092)
        {
          if (a2 != 1584426093)
          {
            if (a2 == 1584427631)
              goto LABEL_263;
            v3 = 1584427884;
            goto LABEL_262;
          }
          goto LABEL_268;
        }
        if (a2 == 1584165744)
          goto LABEL_263;
        v8 = 1584229484;
        goto LABEL_267;
      }
      if (a2 > 1584620387)
      {
        if (a2 != 1584620388)
        {
          if (a2 == 1584620400)
            goto LABEL_263;
          v2 = 1584620643;
          goto LABEL_213;
        }
        goto LABEL_291;
      }
      if (a2 == 1584428140)
        goto LABEL_268;
      if (a2 == 1584488812)
        goto LABEL_263;
      if (a2 != 1584555632)
        goto LABEL_284;
      result = operator new();
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_BYTE *)(result + 32) = 0;
      v6 = &off_1E2907320;
LABEL_264:
      *(_QWORD *)result = v6;
      *(_QWORD *)(result + 8) = 0;
      return result;
    }
    if (a2 <= 1668309873)
    {
      if (a2 > 1651668081)
      {
        if (a2 > 1668114274)
        {
          if (a2 <= 1668247148)
          {
            if (a2 != 1668114275)
            {
              if (a2 == 1668116067)
                goto LABEL_288;
              v3 = 1668244083;
              goto LABEL_262;
            }
            goto LABEL_291;
          }
          if (a2 == 1668247149)
            goto LABEL_263;
          if (a2 == 1668248169)
          {
            result = operator new();
            *(_QWORD *)(result + 48) = 0;
            *(_QWORD *)(result + 56) = 0;
            *(_QWORD *)(result + 40) = 0;
            *(_QWORD *)(result + 16) = 0;
            *(_QWORD *)(result + 24) = 0;
            *(_BYTE *)(result + 32) = 0;
            v6 = &off_1E2906C80;
            goto LABEL_264;
          }
          v11 = 1668248434;
LABEL_229:
          if (a2 != v11)
            goto LABEL_284;
LABEL_230:
          result = operator new();
          *(_QWORD *)(result + 48) = 0;
          *(_QWORD *)(result + 56) = 0;
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = 0;
          *(_BYTE *)(result + 32) = 0;
          v6 = &off_1E29076A0;
          goto LABEL_264;
        }
        if (a2 <= 1667788143)
        {
          if (a2 == 1651668082)
            goto LABEL_221;
          if (a2 == 1667527029)
            goto LABEL_263;
          v3 = 1667527267;
          goto LABEL_262;
        }
        if (a2 != 1667788144)
        {
          if (a2 == 1667850867)
            goto LABEL_263;
          v11 = 1667855218;
          goto LABEL_229;
        }
LABEL_269:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v6 = &off_1E2906E90;
        goto LABEL_264;
      }
      if (a2 <= 1634955365)
      {
        if (a2 <= 1634689899)
        {
          if (a2 == 1634493037)
            goto LABEL_263;
          v3 = 1634562669;
        }
        else
        {
          if (a2 == 1634689900)
            goto LABEL_288;
          if (a2 == 1634694002)
            goto LABEL_221;
          v3 = 1634757731;
        }
        goto LABEL_262;
      }
      if (a2 <= 1651663219)
      {
        if (a2 == 1634955366)
          goto LABEL_263;
        if (a2 == 1651401828)
        {
          result = operator new();
          *(_QWORD *)(result + 48) = 0;
          *(_QWORD *)(result + 56) = 0;
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = 0;
          *(_BYTE *)(result + 32) = 0;
          v6 = &off_1E2907520;
          goto LABEL_264;
        }
        v3 = 1651401847;
        goto LABEL_262;
      }
      if (a2 == 1651663220)
        goto LABEL_263;
      if (a2 == 1651668003)
        goto LABEL_288;
      v9 = 1651668065;
LABEL_200:
      if (a2 != v9)
        goto LABEL_284;
      goto LABEL_221;
    }
    if (a2 > 1684369509)
    {
      if (a2 > 1684893539)
      {
        if (a2 <= 1685218145)
        {
          if (a2 == 1684893540)
            goto LABEL_263;
          v3 = 1685089087;
          goto LABEL_262;
        }
        if ((a2 - 1685218146) >= 2)
        {
          v3 = 1685218160;
          goto LABEL_262;
        }
        goto LABEL_268;
      }
      if (a2 <= 1684826476)
      {
        if (a2 == 1684369510)
          goto LABEL_263;
        if (a2 == 1684496752)
        {
          result = operator new();
          *(_QWORD *)(result + 48) = 0;
          *(_QWORD *)(result + 56) = 0;
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = 0;
          *(_BYTE *)(result + 32) = 0;
          v6 = &off_1E29074E0;
          goto LABEL_264;
        }
        v3 = 1684632680;
        goto LABEL_262;
      }
      if (a2 == 1684826477)
        goto LABEL_263;
      if (a2 != 1684891491)
      {
        v3 = 1684892024;
        goto LABEL_262;
      }
      goto LABEL_291;
    }
    if (a2 <= 1668510306)
    {
      if (a2 <= 1668312418)
      {
        if (a2 == 1668309874)
        {
          result = operator new();
          *(_QWORD *)(result + 48) = 0;
          *(_QWORD *)(result + 56) = 0;
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = 0;
          *(_BYTE *)(result + 32) = 0;
          v6 = &off_1E28FFAC8;
          goto LABEL_264;
        }
        if (a2 == 1668310371)
        {
          result = operator new();
          *(_QWORD *)(result + 48) = 0;
          *(_QWORD *)(result + 56) = 0;
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = 0;
          *(_BYTE *)(result + 32) = 0;
          v6 = (uint64_t (**)())&off_1E2908B40;
          goto LABEL_264;
        }
        goto LABEL_284;
      }
      if (a2 == 1668312419)
      {
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v6 = &off_1E2907560;
        goto LABEL_264;
      }
      if (a2 == 1668312939)
      {
LABEL_288:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v6 = &off_1E2906EC0;
        goto LABEL_264;
      }
      v3 = 1668441705;
      goto LABEL_262;
    }
    if (a2 <= 1684238188)
    {
      if (a2 != 1668510307)
      {
        if (a2 == 1684171124)
          goto LABEL_263;
        v3 = 1684234608;
        goto LABEL_262;
      }
      goto LABEL_269;
    }
    if (a2 == 1684238189)
      goto LABEL_263;
    if (a2 == 1684238952)
      goto LABEL_291;
    v7 = 1684238960;
LABEL_208:
    if (a2 != v7)
      goto LABEL_284;
    goto LABEL_291;
  }
  if (a2 > 1885627759)
  {
    if (a2 > 1936286831)
    {
      if (a2 <= 1970434929)
      {
        if (a2 <= 1936876399)
        {
          if (a2 <= 1936748399)
          {
            if (a2 == 1936286832)
              goto LABEL_263;
            v3 = 1936551780;
          }
          else
          {
            if (a2 == 1936748400 || a2 == 1936876385)
              goto LABEL_263;
            v3 = 1936876393;
          }
          goto LABEL_262;
        }
        if (a2 > 1952539490)
        {
          if (a2 == 1952539491 || a2 == 1952609638)
            goto LABEL_263;
          v3 = 1969386854;
          goto LABEL_262;
        }
        if (a2 == 1936876400)
          goto LABEL_230;
        if (a2 == 1936876401)
          goto LABEL_263;
        v4 = 1936945516;
        goto LABEL_45;
      }
      if (a2 > 1986946670)
      {
        if (a2 > 2020172402)
        {
          if (a2 == 2020172403 || a2 == 2020175987)
            goto LABEL_263;
          v3 = 2020569203;
        }
        else
        {
          if (a2 == 1986946671)
          {
            result = operator new();
            *(_QWORD *)(result + 48) = 0;
            *(_QWORD *)(result + 56) = 0;
            *(_QWORD *)(result + 40) = 0;
            *(_QWORD *)(result + 16) = 0;
            *(_QWORD *)(result + 24) = 0;
            *(_BYTE *)(result + 32) = 0;
            v6 = &off_1E29074A0;
            goto LABEL_264;
          }
          if (a2 == 1987076466)
            goto LABEL_263;
          v3 = 1987078975;
        }
        goto LABEL_262;
      }
      if (a2 <= 1986163312)
      {
        if (a2 == 1970434930)
          goto LABEL_263;
        v3 = 1986163298;
        goto LABEL_262;
      }
      if (a2 == 1986163313)
        goto LABEL_263;
      if (a2 == 1986355826)
        goto LABEL_221;
      v9 = 1986360178;
      goto LABEL_200;
    }
    if (a2 <= 1886678114)
    {
      if (a2 > 1886353265)
      {
        if (a2 > 1886545515)
        {
          if (a2 != 1886545516)
          {
            if (a2 == 1886546285)
            {
              result = operator new();
              *(_QWORD *)(result + 48) = 0;
              *(_QWORD *)(result + 56) = 0;
              *(_QWORD *)(result + 40) = 0;
              *(_QWORD *)(result + 16) = 0;
              *(_QWORD *)(result + 24) = 0;
              *(_BYTE *)(result + 32) = 0;
              v6 = &off_1E29049F0;
              goto LABEL_264;
            }
            v3 = 1886547309;
            goto LABEL_262;
          }
          goto LABEL_268;
        }
        if (a2 == 1886353266)
          goto LABEL_263;
        v8 = 1886418028;
        goto LABEL_267;
      }
      if (a2 <= 1885759083)
      {
        if (a2 == 1885627760)
          goto LABEL_263;
        v3 = 1885758819;
        goto LABEL_262;
      }
      if (a2 == 1885759084 || a2 == 1885823853)
        goto LABEL_263;
      if (a2 != 1886090345)
        goto LABEL_284;
      result = operator new();
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_BYTE *)(result + 32) = 0;
      v6 = &off_1E2906E00;
      goto LABEL_264;
    }
    if (a2 > 1935893602)
    {
      if (a2 > 1936024439)
      {
        if (a2 == 1936024440 || a2 == 1936028012)
          goto LABEL_263;
        v2 = 1936286825;
        goto LABEL_213;
      }
      if (a2 == 1935893603)
        goto LABEL_214;
      if (a2 == 1935896165)
      {
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v6 = &off_1E2907760;
        goto LABEL_264;
      }
      if (a2 != 1935896684)
        goto LABEL_284;
      result = operator new();
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_BYTE *)(result + 32) = 0;
      v6 = &off_1E2906D10;
      goto LABEL_264;
    }
    if (a2 <= 1919185762)
    {
      if (a2 == 1886678115)
        goto LABEL_263;
      v3 = 1919116144;
      goto LABEL_262;
    }
    if (a2 != 1919185763)
    {
      if (a2 == 1919837298)
        goto LABEL_263;
      v3 = 1935765606;
      goto LABEL_262;
    }
    goto LABEL_270;
  }
  if (a2 > 1832150385)
  {
    if (a2 <= 1868786719)
    {
      if (a2 <= 1835623026)
      {
        if (a2 <= 1835296370)
        {
          if (a2 == 1832150386)
            goto LABEL_263;
          v10 = 25446;
        }
        else
        {
          if (a2 == 1835296371 || a2 == 1835298918)
            goto LABEL_263;
          v10 = 29283;
        }
        v3 = v10 | 0x6D640000;
        goto LABEL_262;
      }
      if (a2 <= 1835954031)
      {
        if (a2 == 1835623027 || a2 == 1835626096)
          goto LABEL_263;
        v3 = 1835952496;
        goto LABEL_262;
      }
      if (a2 == 1835954032 || a2 == 1836016243)
        goto LABEL_263;
      v7 = 1868784752;
      goto LABEL_208;
    }
    if (a2 > 1869836896)
    {
      if ((a2 - 1885432674) <= 0xB && ((1 << (a2 - 98)) & 0xC15) != 0)
        goto LABEL_263;
      if (a2 == 1869836897)
        goto LABEL_221;
      v3 = 1885430832;
      goto LABEL_262;
    }
    if (a2 > 1868983586)
    {
      if (a2 != 1868983587)
      {
        if (a2 != 1868983668)
        {
          v3 = 1869639794;
          goto LABEL_262;
        }
LABEL_166:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v6 = &off_1E29075A0;
        goto LABEL_264;
      }
LABEL_233:
      result = operator new();
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_BYTE *)(result + 32) = 0;
      v6 = &off_1E2906DA0;
      goto LABEL_264;
    }
    if (a2 != 1868786720)
    {
      if (a2 != 1868969065)
        goto LABEL_284;
      goto LABEL_233;
    }
LABEL_234:
    result = operator new();
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    v6 = (uint64_t (**)())&off_1E29090D0;
    goto LABEL_264;
  }
  if (a2 > 1768305774)
  {
    if (a2 > 1769172836)
    {
      if (a2 > 1818518130)
      {
        if (a2 == 1818518131 || a2 == 1819112035)
          goto LABEL_263;
        if (a2 == 1832022884)
        {
          result = operator new();
          *(_QWORD *)(result + 48) = 0;
          *(_QWORD *)(result + 56) = 0;
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = 0;
          *(_BYTE *)(result + 32) = 0;
          v6 = &off_1E2907420;
          goto LABEL_264;
        }
        goto LABEL_284;
      }
      if (a2 == 1769172837)
        goto LABEL_214;
      if (a2 == 1769173601)
        goto LABEL_221;
      v7 = 1802857321;
      goto LABEL_208;
    }
    if (a2 > 1768711272)
    {
      if (a2 == 1768711273)
        goto LABEL_214;
      if (a2 == 1768780388)
      {
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v6 = (uint64_t (**)())&off_1E2909900;
        goto LABEL_264;
      }
      v3 = 1768843636;
      goto LABEL_262;
    }
    if (a2 != 1768305775 && a2 != 1768320291)
    {
      if (a2 != 1768320372)
        goto LABEL_284;
      goto LABEL_166;
    }
    goto LABEL_233;
  }
  if (a2 <= 1718383475)
  {
    if (a2 > 1702060387)
    {
      if (a2 == 1702060388 || a2 == 1717925491)
        goto LABEL_263;
      v3 = 1718383464;
      goto LABEL_262;
    }
    if (a2 != 1685218162)
    {
      if (a2 == 1685218164)
      {
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v6 = &off_1E29073E0;
        goto LABEL_264;
      }
      goto LABEL_284;
    }
    goto LABEL_268;
  }
  if (a2 > 1752658553)
  {
    if (a2 != 1752658554)
    {
      if (a2 == 1768121456)
        goto LABEL_291;
      if (a2 != 1768123424)
        goto LABEL_284;
      goto LABEL_234;
    }
LABEL_270:
    result = operator new();
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    v6 = &off_1E2903B00;
    goto LABEL_264;
  }
  switch(a2)
  {
    case 1718383476:
      goto LABEL_192;
    case 1718842483:
      goto LABEL_263;
    case 1735422066:
      result = operator new();
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_BYTE *)(result + 32) = 0;
      v6 = &off_1E2907720;
      goto LABEL_264;
  }
LABEL_284:
  result = 0;
  if (a2 <= 3199)
  {
    if (a2 > 3099)
    {
      switch(a2)
      {
        case 3100:
        case 3101:
        case 3103:
        case 3106:
        case 3110:
        case 3111:
        case 3113:
        case 3114:
        case 3116:
          goto LABEL_263;
        case 3102:
        case 3115:
          goto LABEL_46;
        case 3104:
        case 3105:
          result = operator new();
          *(_QWORD *)(result + 48) = 0;
          *(_QWORD *)(result + 56) = 0;
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = 0;
          *(_BYTE *)(result + 32) = 0;
          v6 = (uint64_t (**)())&off_1E2909D00;
          goto LABEL_264;
        case 3107:
          goto LABEL_214;
        case 3108:
          goto LABEL_268;
        case 3109:
        case 3112:
          goto LABEL_288;
        default:
          return result;
      }
      return result;
    }
    if ((a2 - 3000) <= 0xD)
    {
      if (((1 << (a2 + 72)) & 0x2029) != 0)
        goto LABEL_263;
      if (a2 == 3010)
      {
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v6 = &off_1E2907460;
        goto LABEL_264;
      }
    }
    if ((a2 > 0x25 || ((1 << a2) & 0x2004000400) == 0) && a2 != 1005)
      return result;
LABEL_263:
    result = operator new();
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    v6 = &off_1E29077A0;
    goto LABEL_264;
  }
  switch(a2)
  {
    case 3200:
    case 3202:
    case 3204:
    case 3206:
    case 3208:
      result = operator new();
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_BYTE *)(result + 32) = 0;
      v6 = &off_1E2907660;
      goto LABEL_264;
    case 3201:
    case 3203:
    case 3205:
    case 3207:
    case 3209:
      result = operator new();
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_BYTE *)(result + 32) = 0;
      v6 = &off_1E2906E30;
      goto LABEL_264;
    case 3210:
    case 3211:
    case 3212:
    case 3213:
    case 3215:
    case 3216:
    case 3217:
    case 3218:
    case 3219:
    case 3220:
    case 3221:
    case 3222:
    case 3224:
    case 3225:
    case 3226:
    case 3227:
    case 3228:
    case 3229:
    case 3232:
    case 3234:
    case 3235:
    case 3239:
    case 3242:
      return result;
    case 3214:
    case 3230:
    case 3233:
    case 3236:
    case 3240:
    case 3243:
    case 3244:
      goto LABEL_263;
    case 3223:
    case 3238:
    case 3241:
      goto LABEL_268;
    case 3231:
      goto LABEL_291;
    case 3237:
      goto LABEL_46;
    default:
      if (a2 == 4600)
        goto LABEL_263;
      break;
  }
  return result;
}

uint64_t AudioConverterPropertyMarshaller::UnknownPropertyError(AudioConverterPropertyMarshaller *this)
{
  return 1886547824;
}

uint64_t AudioConverterPropertyMarshaller::InvalidPropertySizeError(AudioConverterPropertyMarshaller *this)
{
  return 561211770;
}

void sub_18EFEE378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFEE410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  void *v15;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18EFEE4F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EFEE624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id *v18;
  id *v19;

  v19 = v18;
  objc_destroyWeak(v19);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18EFEE6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)AUCrashHandler;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18EFEE7FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFEE854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EFEE8A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CrashHandlerLogCategory(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      caulk::log_category::log_category((caulk::log_category *)&CrashHandlerLogCategory(void)::category, "com.apple.coreaudio", "crashhandler");
    }
  }
}

void sub_18EFEECC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<AUExtensionScanner::ExtensionComponents,0>(id *a1)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));

}

void std::__shared_ptr_pointer<AUExtensionScanner::NSExtensionImpl  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<AUExtensionScanner::NSExtensionImpl  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

id AUExtensionScanner::NSExtensionImpl::beginMatchingExtensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_msgSend(MEMORY[0x1E0CB35D8], "beginMatchingExtensionsWithAttributes:completion:", a2, a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

void AUExtensionScanner::NSExtensionImpl::~NSExtensionImpl(AUExtensionScanner::NSExtensionImpl *this)
{
  JUMPOUT(0x193FFE460);
}

void AUExtensionScanner::componentsForExtension(AUExtensionScanner *this, NSExtension *a2, void *a3)
{
  id v5;
  char *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  char isKindOfClass;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  id v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  id *v29;
  unint64_t v30;
  void *v31;
  unint64_t v32;
  id *v33;
  int v34;
  void *v35;
  void *v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  id *p_obj;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  __int128 *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  __int128 *v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  int64x2_t v73;
  char *v74;
  uint64_t v75;
  _OWORD *v76;
  _OWORD *v77;
  _OWORD *v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  const void *v82;
  char *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  id v87;
  void *v88;
  id obj;
  id v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  id v93;
  const void *v94;
  __int128 v95;
  char *v96;
  char *v97;
  CFTypeRef cf;
  int64x2_t v99;
  char *v100;
  char *v101;
  _QWORD v102[3];
  _QWORD *v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v93 = v5;
  v6 = (char *)operator new(0x38uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E29172F0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  v6[48] = 1;
  *(_QWORD *)this = v6 + 24;
  *((_QWORD *)this + 1) = v6;
  objc_msgSend(v5, "attributes");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("AudioComponentBundle"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
    v9 = 28;
  else
    v9 = 12;
  objc_msgSend(v93, "attributes");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("AudioComponents"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
    goto LABEL_87;
  objc_opt_self();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0)
    goto LABEL_87;
  objc_msgSend(v93, "identifier");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.audio.ComponentRegistrationOverrides"));
  objc_msgSend(v15, "synchronize");
  objc_msgSend(v15, "objectForKey:", v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v17 = v16;
    else
      v17 = 0;
  }
  else
  {
    v17 = 0;
  }
  v18 = v17;

  if (v18)
  {
    v19 = v18;

    v11 = v19;
  }
  v20 = v11;
  CFRetain(v20);
  v87 = v18;
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&cf, v20);

  v102[0] = &off_1E2915888;
  v102[1] = &v93;
  v102[2] = this;
  v103 = v102;
  AudioComponentRegistrationInfo::parseInfoPlistArray(v9, 0, (CFArrayRef *)&cf, (uint64_t)v102);
  v21 = v103;
  if (v103 == v102)
  {
    v22 = 4;
    v21 = v102;
  }
  else
  {
    if (!v103)
      goto LABEL_18;
    v22 = 5;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v22))(v21);
LABEL_18:
  if (cf)
    CFRelease(cf);
  v23 = v93;
  obj = v23;
  v24 = v20;
  v26 = *(_QWORD *)this;
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v90 = v24;
  v91 = v26;
  v92 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  v29 = (id *)*((_QWORD *)a2 + 16);
  v30 = *((_QWORD *)a2 + 17);
  objc_msgSend(v23, "identifier", v87);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  if ((id *)v30 != v29)
  {
    v32 = (uint64_t)(v30 - (_QWORD)v29) >> 5;
    do
    {
      v33 = &v29[4 * (v32 >> 1)];
      v34 = AUExtensionScanner::ExtensionComponents::operator<(v33, v31);
      if (v34)
        v32 += ~(v32 >> 1);
      else
        v32 >>= 1;
      if (v34)
        v29 = v33 + 4;
    }
    while (v32);
    v30 = (unint64_t)v29;
  }

  if (*((_QWORD *)a2 + 17) == v30)
  {
    v41 = (char *)v30;
  }
  else
  {
    objc_msgSend(*(id *)v30, "identifier");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v93, "identifier");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend(v35, "isEqualToString:", v36);

    if ((v37 & 1) != 0)
    {
      objc_storeStrong((id *)v30, obj);
      objc_storeStrong((id *)(v30 + 8), v90);
      v38 = (_QWORD *)(v30 + 16);
      v39 = v91;
      v40 = (uint64_t)v92;
LABEL_48:
      std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v38, v39, v40);
      goto LABEL_81;
    }
    v41 = (char *)*((_QWORD *)a2 + 17);
  }
  v42 = *((_QWORD *)a2 + 18);
  v43 = *((_QWORD *)a2 + 16);
  v44 = v30 - v43;
  v45 = (uint64_t)(v30 - v43) >> 5;
  if ((unint64_t)v41 >= v42)
  {
    v58 = ((uint64_t)&v41[-v43] >> 5) + 1;
    if (v58 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v59 = v42 - v43;
    if (v59 >> 4 > v58)
      v58 = v59 >> 4;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFE0)
      v60 = 0x7FFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    v97 = (char *)a2 + 144;
    if (v60)
    {
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v60);
    }
    else
    {
      v62 = 0;
      v61 = 0;
    }
    v63 = (__int128 *)&v62[32 * v45];
    v94 = v62;
    *(_QWORD *)&v95 = v63;
    *((_QWORD *)&v95 + 1) = v63;
    v96 = &v62[32 * v61];
    if (v45 == v61)
    {
      if (v44 < 1)
      {
        if (v30 == v43)
          v66 = 1;
        else
          v66 = v44 >> 4;
        v101 = (char *)a2 + 144;
        v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v66);
        v69 = (__int128 *)v95;
        if (*((_QWORD *)&v95 + 1) == (_QWORD)v95)
        {
          v73 = vdupq_n_s64(v95);
          v70 = (uint64_t)&v67[32 * (v66 >> 2)];
        }
        else
        {
          v70 = (uint64_t)&v67[32 * (v66 >> 2) + *((_QWORD *)&v95 + 1) - v95];
          v71 = &v67[32 * (v66 >> 2)];
          do
          {
            v72 = *v69;
            *v69 = 0uLL;
            *(_OWORD *)v71 = v72;
            *((_OWORD *)v71 + 1) = v69[1];
            v69[1] = 0uLL;
            v71 += 32;
            v69 += 2;
          }
          while (v71 != (char *)v70);
          v73 = (int64x2_t)v95;
        }
        v74 = v96;
        cf = v94;
        v94 = v67;
        *(_QWORD *)&v95 = &v67[32 * (v66 >> 2)];
        v99 = v73;
        *((_QWORD *)&v95 + 1) = v70;
        v96 = &v67[32 * v68];
        v100 = v74;
        std::__split_buffer<AUExtensionScanner::ExtensionComponents>::~__split_buffer((uint64_t)&cf);
        v63 = (__int128 *)*((_QWORD *)&v95 + 1);
      }
      else
      {
        v64 = v45 + 2;
        if (v45 >= -1)
          v64 = v45 + 1;
        v65 = v64 >> 1;
        v63 = (__int128 *)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUExtensionScanner::ExtensionComponents *,AUExtensionScanner::ExtensionComponents *,AUExtensionScanner::ExtensionComponents *>(v63, v63, (uint64_t)&v63[-2 * (v64 >> 1)]);
        *(_QWORD *)&v95 = v95 - 32 * v65;
        *((_QWORD *)&v95 + 1) = v63;
      }
    }
    std::construct_at[abi:ne180100]<AUExtensionScanner::ExtensionComponents,AUExtensionScanner::ExtensionComponents const&,AUExtensionScanner::ExtensionComponents*>(v63, (uint64_t)&obj);
    v75 = v95;
    v76 = (_OWORD *)(*((_QWORD *)&v95 + 1) + 32);
    *((_QWORD *)&v95 + 1) += 32;
    v77 = (_OWORD *)*((_QWORD *)a2 + 16);
    if (v77 != (_OWORD *)v30)
    {
      v78 = (_OWORD *)v30;
      do
      {
        v79 = *(v78 - 2);
        v78 -= 2;
        *v78 = 0uLL;
        *(_OWORD *)(v75 - 32) = v79;
        v75 -= 32;
        *(_OWORD *)(v75 + 16) = v78[1];
        v78[1] = 0uLL;
      }
      while (v78 != v77);
      v76 = (_OWORD *)*((_QWORD *)&v95 + 1);
    }
    *(_QWORD *)&v95 = v75;
    v80 = *((_QWORD *)a2 + 17);
    if (v80 != v30)
    {
      do
      {
        v81 = *(_OWORD *)v30;
        *(_OWORD *)v30 = 0uLL;
        *v76 = v81;
        v76[1] = *(_OWORD *)(v30 + 16);
        *(_OWORD *)(v30 + 16) = 0uLL;
        v76 += 2;
        v30 += 32;
      }
      while (v30 != v80);
      v75 = v95;
      v30 = *((_QWORD *)a2 + 17);
    }
    v82 = (const void *)*((_QWORD *)a2 + 16);
    *((_QWORD *)a2 + 16) = v75;
    *((_QWORD *)a2 + 17) = v76;
    v83 = (char *)*((_QWORD *)a2 + 18);
    *((_QWORD *)a2 + 18) = v96;
    *((_QWORD *)&v95 + 1) = v30;
    v96 = v83;
    v94 = v82;
    *(_QWORD *)&v95 = v82;
    std::__split_buffer<AUExtensionScanner::ExtensionComponents>::~__split_buffer((uint64_t)&v94);
    goto LABEL_81;
  }
  if ((char *)v30 != v41)
  {
    v46 = (char *)(v30 + 32);
    v47 = v41 - 32;
    v48 = v41;
    if ((unint64_t)v41 >= 0x20)
    {
      v48 = v41;
      do
      {
        v49 = *(_OWORD *)v47;
        *(_OWORD *)v47 = 0uLL;
        *(_OWORD *)v48 = v49;
        *((_OWORD *)v48 + 1) = *((_OWORD *)v47 + 1);
        *((_OWORD *)v47 + 1) = 0uLL;
        v48 += 32;
        v47 += 32;
      }
      while (v47 < v41);
    }
    *((_QWORD *)a2 + 17) = v48;
    if (v41 != v46)
    {
      v50 = (uint64_t)(v41 - 16);
      v51 = 32 * ((v41 - v46) >> 5);
      do
      {
        v52 = *(_QWORD *)(v30 + v51 - 32);
        *(_QWORD *)(v30 + v51 - 32) = 0;
        v53 = *(void **)(v50 - 16);
        *(_QWORD *)(v50 - 16) = v52;

        v54 = *(_QWORD *)(v30 + v51 - 24);
        *(_QWORD *)(v30 + v51 - 24) = 0;
        v55 = *(void **)(v50 - 8);
        *(_QWORD *)(v50 - 8) = v54;

        std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v50, (__int128 *)(v30 + v51 - 16));
        v50 -= 32;
        v51 -= 32;
      }
      while (v51);
    }
    p_obj = &obj;
    if (v30 <= (unint64_t)&obj)
      p_obj = &obj + 4 * (*((_QWORD *)a2 + 17) > (unint64_t)&obj);
    objc_storeStrong((id *)v30, *p_obj);
    v57 = v43 + 32 * v45;
    objc_storeStrong((id *)(v57 + 8), p_obj[1]);
    v38 = (_QWORD *)(v57 + 16);
    v39 = (uint64_t)p_obj[2];
    v40 = (uint64_t)p_obj[3];
    goto LABEL_48;
  }
  *((_QWORD *)a2 + 17) = std::construct_at[abi:ne180100]<AUExtensionScanner::ExtensionComponents,AUExtensionScanner::ExtensionComponents const&,AUExtensionScanner::ExtensionComponents*>(v41, (uint64_t)&obj)+ 4;
LABEL_81:
  v84 = v92;
  if (v92)
  {
    v85 = (unint64_t *)&v92->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }

  v11 = v24;
LABEL_87:

}

void sub_18EFEF47C(_Unwind_Exception *a1, void *a2, ...)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, id);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, id);
  std::__split_buffer<AUExtensionScanner::ExtensionComponents>::~__split_buffer((uint64_t)va1);
  AUExtensionScanner::ExtensionComponents::~ExtensionComponents((id *)va);

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

unint64_t AUExtensionScanner::ExtensionComponents::operator<(id *a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;

  v3 = a2;
  objc_msgSend(*a1, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "compare:", v3);

  return v5 >> 63;
}

void sub_18EFEF614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void AUExtensionScanner::ExtensionComponents::~ExtensionComponents(id *this)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));

}

_QWORD *std::construct_at[abi:ne180100]<AUExtensionScanner::ExtensionComponents,AUExtensionScanner::ExtensionComponents const&,AUExtensionScanner::ExtensionComponents*>(_QWORD *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = *(id *)a2;
  v4 = *(id *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  a1[1] = v4;
  a1[2] = v6;
  a1[3] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return a1;
}

uint64_t std::__split_buffer<AUExtensionScanner::ExtensionComponents>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::__destroy_at[abi:ne180100]<AUExtensionScanner::ExtensionComponents,0>((id *)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUExtensionScanner::ExtensionComponents *,AUExtensionScanner::ExtensionComponents *,AUExtensionScanner::ExtensionComponents *>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  __int128 *v10;

  if (a1 != a2)
  {
    v5 = a1 + 1;
    do
    {
      v6 = *((_QWORD *)v5 - 2);
      *((_QWORD *)v5 - 2) = 0;
      v7 = *(void **)a3;
      *(_QWORD *)a3 = v6;

      v8 = *((_QWORD *)v5 - 1);
      *((_QWORD *)v5 - 1) = 0;
      v9 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v8;

      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](a3 + 16, v5);
      a3 += 32;
      v10 = v5 + 1;
      v5 += 2;
    }
    while (v10 != a2);
  }
  return a3;
}

void std::__function::__func<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0,std::allocator<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

__n128 std::__function::__func<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0,std::allocator<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2915888;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0,std::allocator<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2915888;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0,std::allocator<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::operator()(uint64_t a1, const AudioComponentRegistrationInfo *a2)
{
  NSString *v4;
  int64x2_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;

  objc_msgSend(**(id **)(a1 + 8), "identifier");
  v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  APComponent_NSExtension::create_shared((APComponent_NSExtension *)&v15, a2, v4, **(NSExtension ***)(a1 + 8));

  v5 = **(int64x2_t ***)(a1 + 16);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  v14 = v15;
  if (*((_QWORD *)&v15 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  AudioComponentVector::add(v5, &v14);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_18EFEF8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (a12)
  {
    v16 = (unint64_t *)&a12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AudioComponentVector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29172F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioComponentVector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29172F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<AudioComponentVector>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void AUExtensionScanner::addExtensions(AudioComponentVector *this, NSArray *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  os_log_t v10;
  _QWORD *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  id obj;
  AudioComponentVector *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE buf[18];
  __int16 v25;
  id v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  this->__begin_ = 0;
  v19 = this;
  this->mSorted = 1;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  obj = v5;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v31, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v21 != v7)
          objc_enumerationMutation(obj);
        v9 = *(id *)(*((_QWORD *)&v20 + 1) + 8 * i);
        if (gAudioComponentLogCategory)
        {
          v10 = *(os_log_t *)gAudioComponentLogCategory;
        }
        else
        {
          v11 = (_QWORD *)operator new();
          v11[1] = 0;
          v10 = os_log_create("com.apple.coreaudio", "audiocomp");
          *v11 = v10;
          gAudioComponentLogCategory = (uint64_t)v11;
        }
        v12 = objc_retainAutorelease(v10);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v9, "extensionPointIdentifier");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "attributes");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AUExtensionScanner.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 109;
          v25 = 2112;
          v26 = v9;
          v27 = 2112;
          v28 = v13;
          v29 = 2112;
          v30 = v14;
          _os_log_impl(&dword_18EE07000, v12, OS_LOG_TYPE_INFO, "%25s:%-5d %@ %@ %@", buf, 0x30u);

        }
        AUExtensionScanner::componentsForExtension((AUExtensionScanner *)buf, (NSExtension *)a2, v9);
        AudioComponentVector::append(v19, **(AudioComponentVector ***)buf, *(const AudioComponentVector **)(*(_QWORD *)buf + 8));
        v15 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }

      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v31, 16);
    }
    while (v6);
  }

}

void sub_18EFEFC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{

  a21 = a12;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a21);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6585(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6586(uint64_t a1)
{

}

void ___ZN18AUExtensionScanner11initialScanEv_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  __int128 v4;
  void (***v5)(_QWORD, uint64_t, _QWORD *);
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void (*v10)(_QWORD, uint64_t, _QWORD *);
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v3 = a2;
  v15[0] = MEMORY[0x1E0C809B0];
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(void (****)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)(a1 + 56) + 8);
  v15[1] = 3221225472;
  v15[2] = ___ZN18AUExtensionScanner11initialScanEv_block_invoke_2;
  v15[3] = &unk_1E2921310;
  v19 = v4;
  v6 = *(_QWORD *)(a1 + 48);
  v17 = v3;
  v18 = v6;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 72);
  v16 = v8;
  v20 = v9;
  v10 = **v5;
  v11 = v3;
  v10(v5, v7, v15);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(void **)(v13 + 8);
  *(_QWORD *)(v13 + 8) = v12;

}

void sub_18EFEFDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void ___ZN18AUExtensionScanner11initialScanEv_block_invoke_2(_QWORD *a1, void *a2, void *a3)
{
  id v6;
  os_log_t v7;
  _QWORD *v8;
  NSObject *v9;
  void *v10;
  os_log_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSSet *v20;
  NSSet *v21;
  NSSet **v22;
  NSSet *v23;
  void *v24;
  NSSet *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  NSString *v30;
  id *Extension;
  uint64_t v32;
  id *j;
  void *v34;
  NSObject *v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  _QWORD v42[3];
  BOOL mSorted;
  _QWORD v44[3];
  BOOL v45;
  AudioComponentVector v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  AudioComponentVector v51;
  AudioComponentVector *v52;
  _BYTE buf[12];
  __int16 v54;
  int v55;
  __int16 v56;
  void *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v41 = a2;
  v6 = a3;
  v39 = a1[7];
  v40 = v6;
  if (v6)
  {
    if (gAudioComponentLogCategory)
    {
      v7 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v8 = (_QWORD *)operator new();
      v8[1] = 0;
      v7 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v8 = v7;
      gAudioComponentLogCategory = (uint64_t)v8;
    }
    v9 = objc_retainAutorelease(v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v40, "localizedDescription");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUExtensionScanner.mm";
      v54 = 1024;
      v55 = 146;
      v56 = 2112;
      v57 = v10;
      _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Error from NSExtension: %@", buf, 0x1Cu);

    }
  }
  if (*(_BYTE *)a1[8])
  {
    if (gAudioComponentLogCategory)
    {
      v11 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v15 = (_QWORD *)operator new();
      v15[1] = 0;
      v11 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v15 = v11;
      gAudioComponentLogCategory = (uint64_t)v15;
    }
    v16 = objc_retainAutorelease(v11);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      v17 = (void *)a1[4];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUExtensionScanner.mm";
      v54 = 1024;
      v55 = 154;
      v56 = 2112;
      v57 = v17;
      _os_log_impl(&dword_18EE07000, v16, OS_LOG_TYPE_INFO, "%25s:%-5d NSExtensions changed for %@", buf, 0x1Cu);
    }
    v18 = a1[9];
    os_unfair_lock_lock((os_unfair_lock_t)v18);
    v19 = a1[8];
    v38 = v41;
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:");
    v20 = (NSSet *)objc_claimAutoreleasedReturnValue();
    v23 = *(NSSet **)(v19 + 16);
    v22 = (NSSet **)(v19 + 16);
    v21 = v23;
    if (v23)
    {
      setDifference(v21, v20);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      setDifference(v20, *v22);
      v25 = (NSSet *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v25 = v20;
      v24 = 0;
    }
    objc_storeStrong((id *)v22, v20);
    memset(&v51, 0, 24);
    v51.mSorted = 1;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v26 = v24;
    v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v47, buf, 16);
    if (v27)
    {
      v28 = *(_QWORD *)v48;
      do
      {
        for (i = 0; i != v27; ++i)
        {
          if (*(_QWORD *)v48 != v28)
            objc_enumerationMutation(v26);
          objc_msgSend(*(id *)(*((_QWORD *)&v47 + 1) + 8 * i), "identifier");
          v30 = (NSString *)objc_claimAutoreleasedReturnValue();
          Extension = AUExtensionScanner::findExtension((AUExtensionScanner *)(v18 + 8), v30);

          if (*(id **)(v18 + 144) != Extension)
          {
            AudioComponentVector::append(&v51, *(AudioComponentVector **)Extension[2], *((const AudioComponentVector **)Extension[2] + 1));
            v32 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUExtensionScanner::ExtensionComponents *,AUExtensionScanner::ExtensionComponents *,AUExtensionScanner::ExtensionComponents *>((__int128 *)Extension + 2, *(__int128 **)(v18 + 144), (uint64_t)Extension);
            for (j = *(id **)(v18 + 144);
                  j != (id *)v32;
                  std::__destroy_at[abi:ne180100]<AUExtensionScanner::ExtensionComponents,0>(j))
            {
              j -= 4;
            }
            *(_QWORD *)(v18 + 144) = v32;
          }
        }
        v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v47, buf, 16);
      }
      while (v27);
    }

    -[NSSet allObjects](v25, "allObjects");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    AUExtensionScanner::addExtensions(&v46, (NSArray *)(v18 + 8), v34);

    if (gAudioComponentLogCategory)
    {
      v35 = *(NSObject **)gAudioComponentLogCategory;
    }
    else
    {
      v36 = (_QWORD *)operator new();
      v36[1] = 0;
      v35 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v36 = v35;
      gAudioComponentLogCategory = (uint64_t)v36;
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      AudioComponentVector::showAll(&v46, "added from extensions");
      AudioComponentVector::showAll(&v51, "removed from extensions");
    }
    memset(v42, 0, sizeof(v42));
    std::vector<std::shared_ptr<APComponent>>::__init_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>((char *)v42, v46.__begin_, (_QWORD *)v46.__end_, ((char *)v46.__end_ - (char *)v46.__begin_) >> 4);
    mSorted = v46.mSorted;
    memset(v44, 0, sizeof(v44));
    std::vector<std::shared_ptr<APComponent>>::__init_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>((char *)v44, v51.__begin_, (_QWORD *)v51.__end_, ((char *)v51.__end_ - (char *)v51.__begin_) >> 4);
    v45 = v51.mSorted;
    v52 = &v46;
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
    v46.__begin_ = &v51;
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);

    if (v18)
      os_unfair_lock_unlock((os_unfair_lock_t)v18);
    v37 = *(_QWORD *)(v39 + 48);
    if (!v37)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v37 + 48))(v37, v42, v44);
    *(_QWORD *)buf = v44;
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v42;
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a2);
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v41);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = a1[8];
    v14 = *(void **)(v13 + 16);
    *(_QWORD *)(v13 + 16) = v12;

    *(_BYTE *)a1[8] = 1;
    (*(void (**)(void))(a1[5] + 16))();
  }

}

void sub_18EFF03A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void **std::pair<AudioComponentVector,AudioComponentVector>::~pair(void **a1)
{
  void **v3;

  v3 = a1 + 4;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

id setDifference(NSSet *a1, NSSet *a2)
{
  NSSet *v3;
  void *v4;

  v3 = a2;
  v4 = (void *)-[NSSet mutableCopy](a1, "mutableCopy");
  objc_msgSend(v4, "minusSet:", v3);

  return v4;
}

void sub_18EFF0524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id *AUExtensionScanner::findExtension(AUExtensionScanner *this, NSString *a2)
{
  NSString *v3;
  id *v4;
  uint64_t v5;
  unint64_t v6;
  id *v7;
  int v8;
  void *v9;
  char v10;

  v3 = a2;
  v4 = (id *)*((_QWORD *)this + 16);
  v5 = *((_QWORD *)this + 17) - (_QWORD)v4;
  if (v5)
  {
    v6 = v5 >> 5;
    do
    {
      v7 = &v4[4 * (v6 >> 1)];
      v8 = AUExtensionScanner::ExtensionComponents::operator<(v7, v3);
      if (v8)
        v6 += ~(v6 >> 1);
      else
        v6 >>= 1;
      if (v8)
        v4 = v7 + 4;
    }
    while (v6);
    if (v4 != *((id **)this + 17))
    {
      objc_msgSend(*v4, "identifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "isEqualToString:", v3);

      if ((v10 & 1) == 0)
        v4 = (id *)*((_QWORD *)this + 17);
    }
  }

  return v4;
}

void sub_18EFF05F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id AUExtensionScanner::getExtensionComponentList(AUExtensionScanner *this, NSString *a2)
{
  NSString *v3;
  id *Extension;
  id v5;

  v3 = a2;
  Extension = AUExtensionScanner::findExtension(this, v3);
  if (*((id **)this + 17) == Extension)
    v5 = 0;
  else
    v5 = Extension[1];

  return v5;
}

void sub_18EFF0668(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MP4BoxParser_MovieFragmentHeader::~MP4BoxParser_MovieFragmentHeader(MP4BoxParser_MovieFragmentHeader *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_MovieFragmentHeader::Init(MP4BoxParser **this)
{
  uint64_t result;
  unsigned int v3;

  result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) == 1835427940)
    {
      v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      result = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, (char *)this + 60);
      if (!(_DWORD)result)
        *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

void DSPGraph::AverageBox::~AverageBox(DSPGraph::AverageBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::AverageBox::ClassName(DSPGraph::AverageBox *this)
{
  return "average";
}

uint64_t DSPGraph::Box::canProcessInPlace(DSPGraph::Box *this)
{
  return 0;
}

double DSPGraph::AverageBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 3.15583197e161;
  *(_OWORD *)a1 = xmmword_18F117170;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::SumBox::hasPresetData(DSPGraph::SumBox *this)
{
  return 0;
}

float DSPGraph::AverageBox::process(DSPGraph::AverageBox *this, unsigned int a2)
{
  uint64_t v4;
  float result;
  uint64_t v6;
  const float **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  vDSP_Length v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 __B;

  DSPGraph::SumBox::process(this, a2);
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__B, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v18, "out");
    v14 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v14 = (_QWORD *)*v14;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v17, v14, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &__B, 1418, &v18, &v17);
  }
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) + 56) + 72) & 0x10) == 0)
  {
    v6 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v6)
    {
      std::string::basic_string[abi:ne180100]<0>(&__B, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v18, "out");
      v15 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v15 = (_QWORD *)*v15;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v17, v15, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &__B, 1418, &v18, &v17);
    }
    v7 = *(const float ***)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) + 56) + 80);
    v8 = *((_QWORD *)this + 8);
    v9 = *((_QWORD *)this + 9);
    v10 = (unint64_t)(v9 - v8) >> 5;
    if (v10 < 2)
    {
      if (v9 == v8)
      {
        std::string::basic_string[abi:ne180100]<0>(&__B, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v18, "in");
        v16 = (_QWORD *)((char *)this + 32);
        if (*((char *)this + 55) < 0)
          v16 = (_QWORD *)*v16;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v17, v16, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
        DSPGraph::ThrowException(1919837985, &__B, 1410, &v18, &v17);
      }
      *(float *)&__B = 1.0
                     / (float)**(unsigned int **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8)
                                                            + 56)
                                                + 80);
      vDSP_vsmul(v7[2], 1, (const float *)&__B, (float *)v7[2], 1, a2);
    }
    else
    {
      result = 1.0 / (float)v10;
      *(float *)&__B = result;
      if (*(_DWORD *)v7)
      {
        v11 = 0;
        v12 = a2;
        v13 = 2;
        do
        {
          vDSP_vsmul(v7[v13], 1, (const float *)&__B, (float *)v7[v13], 1, v12);
          ++v11;
          v13 += 2;
        }
        while (v11 < *(unsigned int *)v7);
      }
    }
  }
  return result;
}

void sub_18EFF0A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t CAAudioChannelLayout::ToTag(AudioChannelLayout *this, const AudioChannelLayout *a2)
{
  unsigned int v2;
  const AudioChannelLayout *v3;
  const AudioChannelLayout *v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v9;
  UInt32 ioPropertyDataSize;
  unsigned int outPropertyData;

  CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)&v9, this);
  v2 = *(_DWORD *)(v9 + 16);
  outPropertyData = v2;
  if (CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v9 + 16), v3))
  {
    v2 = *(_DWORD *)(v9 + 16);
    if ((v2 | 0x10000) == 0x10000)
    {
      ioPropertyDataSize = 4;
      if (AudioFormatGetProperty(0x636D7074u, *(_DWORD *)(v9 + 12), (const void *)(v9 + 16), &ioPropertyDataSize, &outPropertyData))
      {
        goto LABEL_11;
      }
      v2 = outPropertyData;
    }
    else
    {
      outPropertyData = *(_DWORD *)(v9 + 16);
    }
  }
  if ((v2 & 0xFFFEFFFF) != 0)
  {
    v5 = v9 ? CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v9 + 16), v4) | 0x930000 : 9633792;
    if (v2 != v5)
    {
      v7 = outPropertyData;
      goto LABEL_16;
    }
  }
LABEL_11:
  if (v9)
    v6 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v9 + 16), v4);
  else
    v6 = 0;
  v7 = *(_DWORD *)&v6 | 0xFFFF0000;
LABEL_16:
  MEMORY[0x193FFDAD0](&v9);
  return v7;
}

uint64_t acv2::CodecConverterFactory::GetName(acv2::CodecConverterFactory *this)
{
  uint64_t v2;
  const void *v4;
  const void *v5;
  CFTypeRef outPropertyData;
  UInt32 ioPropertyDataSize;
  AudioComponentInstance outInstance;

  pthread_mutex_lock(&acv2::sCodecConverterFactoryLocker);
  if (!*((_BYTE *)this + 72))
  {
    *((_BYTE *)this + 72) = 1;
    outInstance = 0;
    if (AudioComponentInstanceNew(*((AudioComponent *)this + 4), &outInstance))
    {
      v2 = 0;
      goto LABEL_5;
    }
    ioPropertyDataSize = 8;
    outPropertyData = 0;
    if (!AudioCodecGetProperty(outInstance, 0x6C666F72u, &ioPropertyDataSize, &outPropertyData))
    {
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v5, outPropertyData);
      v4 = (const void *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v5;
      v5 = v4;
      if (v4)
        CFRelease(v4);
    }
    AudioComponentInstanceDispose(outInstance);
  }
  v2 = *((_QWORD *)this + 5);
LABEL_5:
  pthread_mutex_unlock(&acv2::sCodecConverterFactoryLocker);
  return v2;
}

void sub_18EFF0C98(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&acv2::sCodecConverterFactoryLocker);
  _Unwind_Resume(a1);
}

uint64_t acv2::CodecConverterFactory::IsVBR(acv2::CodecConverterFactory *this, unsigned int *a2)
{
  uint64_t Property;
  unsigned int v5;
  unsigned int v7;
  UInt32 ioPropertyDataSize;
  AudioComponentInstance outInstance;

  pthread_mutex_lock(&acv2::sCodecConverterFactoryLocker);
  if (*((_BYTE *)this + 52))
  {
    Property = 0;
    *a2 = *((_DWORD *)this + 12);
  }
  else
  {
    outInstance = 0;
    Property = AudioComponentInstanceNew(*((AudioComponent *)this + 4), &outInstance);
    if (!(_DWORD)Property)
    {
      v7 = 0;
      ioPropertyDataSize = 4;
      Property = AudioCodecGetProperty(outInstance, 0x76706B3Fu, &ioPropertyDataSize, &v7);
      if (!(_DWORD)Property)
      {
        v5 = v7;
        *a2 = v7;
        *((_DWORD *)this + 12) = v5;
        *((_BYTE *)this + 52) = 1;
      }
      AudioComponentInstanceDispose(outInstance);
    }
  }
  pthread_mutex_unlock(&acv2::sCodecConverterFactoryLocker);
  return Property;
}

void sub_18EFF0D80(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&acv2::sCodecConverterFactoryLocker);
  _Unwind_Resume(a1);
}

uint64_t acv2::CodecConverterFactory::GetAvailableEncodeBitRatesInfo(AudioComponent *this, unsigned int *a2)
{
  uint64_t PropertyInfo;
  Boolean outWritable;
  AudioComponentInstance outInstance;

  outInstance = 0;
  PropertyInfo = AudioComponentInstanceNew(this[4], &outInstance);
  if (!(_DWORD)PropertyInfo)
  {
    outWritable = 0;
    PropertyInfo = AudioCodecGetPropertyInfo(outInstance, 0x61627274u, a2, &outWritable);
    AudioComponentInstanceDispose(outInstance);
  }
  return PropertyInfo;
}

uint64_t acv2::CodecConverterFactory::GetAvailableChannelLayoutsInfo(AudioComponent *this, const AudioStreamBasicDescription *a2, unsigned int *a3)
{
  uint64_t PropertyInfo;
  Boolean outWritable;
  AudioComponentInstance outInstance;

  outInstance = 0;
  PropertyInfo = AudioComponentInstanceNew(this[4], &outInstance);
  if (!(_DWORD)PropertyInfo)
  {
    outWritable = 0;
    PropertyInfo = AudioCodecGetPropertyInfo(outInstance, 0x616F636Cu, a3, &outWritable);
    AudioComponentInstanceDispose(outInstance);
  }
  return PropertyInfo;
}

uint64_t acv2::CodecConverterFactory::GetAvailableNumberChannelsInfo(AudioComponent *this, const AudioStreamBasicDescription *a2, unsigned int *a3)
{
  uint64_t PropertyInfo;
  Boolean outWritable;
  AudioComponentInstance outInstance;

  outInstance = 0;
  PropertyInfo = AudioComponentInstanceNew(this[4], &outInstance);
  if (!(_DWORD)PropertyInfo)
  {
    outWritable = 0;
    PropertyInfo = AudioCodecGetPropertyInfo(outInstance, 0x636D6E63u, a3, &outWritable);
    AudioComponentInstanceDispose(outInstance);
  }
  return PropertyInfo;
}

uint64_t acv2::CodecConverterFactory::GetAvailableEncodeBitRates(AudioComponent *this, unsigned int *a2, void *a3)
{
  uint64_t Property;
  AudioComponentInstance outInstance;

  outInstance = 0;
  Property = AudioComponentInstanceNew(this[4], &outInstance);
  if (!(_DWORD)Property)
  {
    Property = AudioCodecGetProperty(outInstance, 0x61627274u, a2, a3);
    AudioComponentInstanceDispose(outInstance);
  }
  return Property;
}

uint64_t acv2::CodecConverterFactory::GetAvailableChannelLayouts(AudioComponent *this, const AudioStreamBasicDescription *a2, unsigned int *a3, void *a4)
{
  uint64_t Property;
  UInt32 mChannelsPerFrame;
  unint64_t v9;
  unsigned int v10;
  unint64_t v12;
  float v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  AudioComponentInstance outInstance;

  outInstance = 0;
  Property = AudioComponentInstanceNew(this[4], &outInstance);
  if ((_DWORD)Property)
    return Property;
  Property = AudioCodecGetProperty(outInstance, 0x616F636Cu, a3, a4);
  AudioComponentInstanceDispose(outInstance);
  mChannelsPerFrame = a2->mChannelsPerFrame;
  if (!mChannelsPerFrame)
    return Property;
  v9 = *a3;
  if (v9 >= 4)
  {
    v10 = 0;
    v12 = v9 >> 2;
    v13 = sqrtf((float)mChannelsPerFrame) + 0.5;
    v14 = (int *)a4;
    while (1)
    {
      v16 = *v14++;
      v15 = v16;
      v17 = (unsigned __int16)v16;
      if ((unsigned __int16)v16 != mChannelsPerFrame)
      {
        if (v17)
          goto LABEL_11;
        if ((v15 | 0x10000) == 0xBF0000 && v13 * v13 != mChannelsPerFrame)
          goto LABEL_11;
        v15 |= mChannelsPerFrame;
      }
      *((_DWORD *)a4 + v10++) = v15;
LABEL_11:
      if (!--v12)
        goto LABEL_5;
    }
  }
  v10 = 0;
LABEL_5:
  *a3 = 4 * v10;
  return Property;
}

uint64_t acv2::CodecConverterFactory::GetAvailableNumberChannels(AudioComponent *this, const AudioStreamBasicDescription *a2, unsigned int *a3, void *a4)
{
  uint64_t Property;
  AudioComponentInstance outInstance;

  outInstance = 0;
  Property = AudioComponentInstanceNew(this[4], &outInstance);
  if (!(_DWORD)Property)
  {
    Property = AudioCodecGetProperty(outInstance, 0x636D6E63u, a3, a4);
    AudioComponentInstanceDispose(outInstance);
  }
  return Property;
}

void acv2::CodecDecoderFactory::~CodecDecoderFactory(acv2::CodecDecoderFactory *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E290B0B0;
  v1 = (const void *)*((_QWORD *)this + 5);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = off_1E290B0B0;
  v1 = (const void *)*((_QWORD *)this + 5);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x193FFE460);
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t *std::unique_ptr<__sFILE,std::function<int ()(__sFILE*)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v7 = v2;
    v3 = a1[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
  }
  v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E28FFD08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E28FFD08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

void acv2::CodecEncoderFactory::~CodecEncoderFactory(acv2::CodecEncoderFactory *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E290B0B0;
  v1 = (const void *)*((_QWORD *)this + 5);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = off_1E290B0B0;
  v1 = (const void *)*((_QWORD *)this + 5);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x193FFE460);
}

uint64_t acv2::CodecEncoderFactory::BuildCodecConverterChain(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  OpaqueAudioComponentInstance *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  acv2 *v32;
  double v33;
  double v34;
  NSObject *v35;
  const char *v36;
  double v37;
  int v38;
  OpaqueAudioComponent *v39;
  UInt32 v40;
  acv2::CodecConverter *v41;
  __int128 v42;
  __int128 v43;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  _OWORD v51[5];
  _QWORD v52[2];
  char v53;
  AudioComponentInstance outInstance;
  Boolean outWritable[8];
  int outPropertyData;
  UInt32 ioPropertyDataSize;
  _BYTE outSize[32];
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _BYTE buf[32];
  _BYTE v64[48];
  _OWORD v65[2];
  uint64_t v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)a2 + 3);
  if (v5)
  {
    v8 = *(OpaqueAudioComponentInstance **)(a3 + 80);
    outInstance = v8;
    v66 = *a2;
    v67 = *((_DWORD *)a2 + 2);
    v9 = *((_DWORD *)a2 + 4);
    v10 = *((_DWORD *)a2 + 5);
    v11 = *((_DWORD *)a2 + 6);
    v12 = *((_DWORD *)a2 + 7);
    v14 = *((_DWORD *)a2 + 8);
    v13 = *((_DWORD *)a2 + 9);
    v65[0] = *(_OWORD *)(a2 + 5);
    *(_OWORD *)((char *)v65 + 12) = *(_OWORD *)((char *)a2 + 52);
    v15 = *((_DWORD *)a2 + 17);
    if (!(v12 | v15))
      return 4294967246;
    v19 = a2[9];
    v20 = ((v14 + 7) >> 3) * v15;
    if ((v5 & 0x20) != 0)
      v20 = v11;
    if (!v12)
      v9 = v20;
    v49 = v9;
    if (v12)
      v21 = v10;
    else
      v21 = 1;
    v47 = v13;
    v48 = v21;
    if (v12)
      v22 = v11;
    else
      v22 = v20;
    v50 = v22;
    if (v12)
      v23 = v12;
    else
      v23 = *((_DWORD *)a2 + 17);
    v53 = 0;
    v52[0] = &v53;
    v52[1] = &outInstance;
    if (v8)
    {
      if (!v15)
        goto LABEL_21;
      goto LABEL_40;
    }
    v16 = AudioComponentInstanceNew(*(AudioComponent *)(a1 + 32), &outInstance);
    if (!(_DWORD)v16)
    {
      v8 = outInstance;
      if (outInstance)
      {
        v53 = 1;
        v13 = v47;
        if (!v15)
        {
LABEL_21:
          outWritable[0] = 0;
          *(_DWORD *)outSize = 0;
          v15 = v23;
          if (AudioCodecGetPropertyInfo(v8, 0x636D6E63u, (UInt32 *)outSize, outWritable))
          {
LABEL_39:
            v13 = v47;
            goto LABEL_40;
          }
          CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(buf, (unint64_t)*(unsigned int *)outSize >> 2, 0);
          if (AudioCodecGetProperty(v8, 0x636D6E63u, (UInt32 *)outSize, *(void **)buf))
          {
            v24 = *(void **)buf;
          }
          else
          {
            v24 = *(void **)buf;
            if (*(_DWORD *)outSize >= 4u)
            {
              v25 = 0;
              v15 = 0;
              v26 = 0x7FFFFFFF;
              do
              {
                v27 = *(_DWORD *)(*(_QWORD *)buf + v25);
                v28 = v27 - v23;
                if ((int)(v27 - v23) < 0)
                  v28 = v23 - v27;
                if (v28 < v26)
                {
                  v26 = v28;
                  v15 = *(_DWORD *)(*(_QWORD *)buf + v25);
                }
                v25 += 4;
              }
              while ((*(_DWORD *)outSize & 0xFFFFFFFC) != v25);
LABEL_38:
              free(v24);
              goto LABEL_39;
            }
          }
          v15 = v23;
          if (!v24)
            goto LABEL_39;
          goto LABEL_38;
        }
LABEL_40:
        *(_QWORD *)buf = v66;
        *(_DWORD *)&buf[8] = v67;
        *(_DWORD *)&buf[12] = v5;
        *(_DWORD *)&buf[16] = v49;
        *(_DWORD *)&buf[20] = v48;
        *(_DWORD *)&buf[24] = v50;
        *(_DWORD *)&buf[28] = v23;
        *(_DWORD *)v64 = v14;
        *(_DWORD *)&v64[4] = v13;
        *(_OWORD *)&v64[8] = v65[0];
        *(_OWORD *)&v64[20] = *(_OWORD *)((char *)v65 + 12);
        *(_DWORD *)&v64[36] = v15;
        *(_QWORD *)&v64[40] = v19;
        if (v23 == v15 || (*(_DWORD *)&v64[16] & 0xFFFFFEFF) == 0x6D74622B)
        {
LABEL_51:
          v32 = outInstance;
          v33 = *(double *)buf;
          v34 = *(double *)&v64[8];
          if (*(double *)buf < *(double *)&v64[8])
          {
            *(_QWORD *)buf = *(_QWORD *)&v64[8];
            v33 = *(double *)&v64[8];
          }
          outPropertyData = 0;
          ioPropertyDataSize = 4;
          if (AudioCodecGetProperty(outInstance, 0x6C6D7263u, &ioPropertyDataSize, &outPropertyData)
            || !outPropertyData)
          {
            goto LABEL_60;
          }
          if (v34 == 0.0 && v33 == 0.0)
          {
            AudioConverterLog();
            v35 = AudioConverterLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)outSize = 136315394;
              *(_QWORD *)&outSize[4] = "CodecConverterFactory.cpp";
              *(_WORD *)&outSize[12] = 1024;
              *(_DWORD *)&outSize[14] = 943;
              v36 = "%25s:%-5d neither input nor output sampling rate specified";
LABEL_67:
              _os_log_impl(&dword_18EE07000, v35, OS_LOG_TYPE_ERROR, v36, outSize, 0x12u);
              goto LABEL_68;
            }
            goto LABEL_68;
          }
          *(double *)outSize = v33;
          acv2::ChooseNearestSampleRate(v32, (OpaqueAudioComponentInstance *)outSize, (double *)1);
          if (*(double *)outSize != v33)
          {
LABEL_60:
            if (v34 == 0.0)
            {
              if (v33 == 0.0)
              {
                AudioConverterLog();
                v35 = AudioConverterLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)outSize = 136315394;
                  *(_QWORD *)&outSize[4] = "CodecConverterFactory.cpp";
                  *(_WORD *)&outSize[12] = 1024;
                  *(_DWORD *)&outSize[14] = 964;
                  v36 = "%25s:%-5d neither input nor output sampling rate specified";
                  goto LABEL_67;
                }
                goto LABEL_68;
              }
              *(double *)outWritable = v33;
              acv2::ChooseNearestSampleRate(v32, (OpaqueAudioComponentInstance *)outWritable, 0);
              v37 = *(double *)outWritable;
            }
            else
            {
              *(double *)outWritable = v34;
              acv2::ChooseNearestSampleRate(v32, (OpaqueAudioComponentInstance *)outWritable, 0);
              v37 = *(double *)outWritable;
              if (vabdd_f64(*(double *)outWritable, v34) > 10.0)
              {
                AudioConverterLog();
                v35 = AudioConverterLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)outSize = 136315394;
                  *(_QWORD *)&outSize[4] = "CodecConverterFactory.cpp";
                  *(_WORD *)&outSize[12] = 1024;
                  *(_DWORD *)&outSize[14] = 976;
                  v36 = "%25s:%-5d unable to select compatible encoder sample rate";
                  goto LABEL_67;
                }
LABEL_68:
                v16 = 1718449215;
                goto LABEL_79;
              }
            }
            *(double *)buf = v37;
            *(double *)&v64[8] = v37;
          }
          v51[2] = *(_OWORD *)v64;
          v51[3] = *(_OWORD *)&v64[16];
          v51[4] = *(_OWORD *)&v64[32];
          v51[0] = *(_OWORD *)buf;
          v51[1] = *(_OWORD *)&buf[16];
          v16 = acv2::CodecConverterFactory::ChooseIntermediateFormat(a1, outInstance, v51, (uint64_t)&v64[8], (AudioStreamBasicDescription *)buf, 1, *(_DWORD *)(a3 + 60));
          if (!(_DWORD)v16)
          {
            v60 = *(_OWORD *)buf;
            *(_QWORD *)outSize = v66;
            *(_DWORD *)&outSize[8] = v67;
            *(_DWORD *)&outSize[12] = v5;
            *(_DWORD *)&outSize[16] = v49;
            *(_DWORD *)&outSize[20] = v48;
            *(_DWORD *)&outSize[24] = v50;
            *(_DWORD *)&outSize[28] = v23;
            v59 = __PAIR64__(v47, v14);
            v38 = *(_DWORD *)v64;
            v62 = *(_QWORD *)v64;
            v61 = *(_OWORD *)&buf[16];
            if (*(int *)v64 < 0)
              v38 = -*(_DWORD *)v64;
            LODWORD(v62) = (v38 + 7) & 0xFFFFFFF8;
            ioPropertyDataSize = 0;
            AudioFormatProperty_FormatEmploysDependentPackets((RegistryAccess *)*(unsigned int *)&v64[16], &ioPropertyDataSize);
            v39 = *(OpaqueAudioComponent **)(a1 + 32);
            v40 = ioPropertyDataSize;
            v41 = (acv2::CodecConverter *)operator new();
            acv2::CodecConverter::CodecConverter((uint64_t)v41, a4, v39, (uint64_t)outInstance, 0, (__int128 *)buf, a2, (char **)(a3 + 128), (uint64_t *)(a3 + 64), v40 != 0);
            *(_QWORD *)outWritable = v41;
            v53 = 0;
            *(_QWORD *)(a4 + 344) = v41;
            v16 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 40))(a5, outSize, a3, a4, a5);
            if ((_DWORD)v16)
              goto LABEL_78;
            if (*(double *)outSize != *(double *)&v60)
            {
              outPropertyData = 96;
              acv2::AudioConverterChain::SetProperty((acv2::AudioConverterChain *)a4, 1936876401, 4, (AudioChannelLayout *)&outPropertyData);
            }
            v42 = *(_OWORD *)&outSize[16];
            *(_OWORD *)a4 = *(_OWORD *)outSize;
            *(_OWORD *)(a4 + 16) = v42;
            *(_QWORD *)(a4 + 32) = v59;
            v43 = *(_OWORD *)&v64[24];
            *(_OWORD *)(a4 + 40) = *(_OWORD *)&v64[8];
            *(_OWORD *)(a4 + 56) = v43;
            *(_QWORD *)(a4 + 72) = *(_QWORD *)&v64[40];
            acv2::AudioConverterChain::AddCodec((_QWORD *)a4, (uint64_t *)outWritable);
            acv2::CodecConverter::CheckInitialize(v41, 0, 0);
            v41 = *(acv2::CodecConverter **)outWritable;
            if (*(_QWORD *)outWritable)
LABEL_78:
              (*(void (**)(acv2::CodecConverter *))(*(_QWORD *)v41 + 8))(v41);
          }
          goto LABEL_79;
        }
        if ((v5 & 0x20) != 0)
        {
          v29 = 1;
        }
        else
        {
          v29 = v23;
          if (!v23)
          {
            v30 = (v14 + 7) >> 3;
LABEL_47:
            if ((v5 & 0x20) != 0)
              v31 = 1;
            else
              v31 = v15;
            *(_DWORD *)&buf[28] = v15;
            *(_DWORD *)&buf[24] = v30 * v31;
            *(_DWORD *)&buf[20] = 1;
            *(_DWORD *)&buf[16] = v30 * v31;
            goto LABEL_51;
          }
        }
        v30 = v50 / v29;
        goto LABEL_47;
      }
      v16 = 2003329396;
    }
LABEL_79:
    applesauce::raii::v1::detail::ScopeGuard<acv2::CodecEncoderFactory::BuildCodecConverterChain(acv2::StreamDescPair const&,acv2::ChainBuildSettings const&,acv2::AudioConverterChain &,acv2::PCMConverterFactory &)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)v52);
    return v16;
  }
  v16 = 1718449215;
  AudioConverterLog();
  v17 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CodecConverterFactory.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 391;
    _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d wildcard for input LPCM format flags is not allowed", buf, 0x12u);
  }
  return v16;
}

void sub_18EFF1A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  uint64_t v41;

  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  applesauce::raii::v1::detail::ScopeGuard<acv2::CodecEncoderFactory::BuildCodecConverterChain(acv2::StreamDescPair const&,acv2::ChainBuildSettings const&,acv2::AudioConverterChain &,acv2::PCMConverterFactory &)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)&a25);
  _Unwind_Resume(a1);
}

BOOL acv2::CodecEncoderFactory::CodecCanInitialize(int a1, acv2::CodecConverterFactory *this, const AudioStreamBasicDescription *a3, AudioStreamBasicDescription *a4)
{
  return acv2::CodecConverterFactory::CodecCanInitializeWith(this, a3, a4 + 1, (CA::StreamDescription *)a4);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<acv2::CodecEncoderFactory::BuildCodecConverterChain(acv2::StreamDescPair const&,acv2::ChainBuildSettings const&,acv2::AudioConverterChain &,acv2::PCMConverterFactory &)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t a1)
{
  if (**(_BYTE **)a1)
    AudioComponentInstanceDispose(**(AudioComponentInstance **)(a1 + 8));
  return a1;
}

void acv2::ChooseNearestSampleRate(acv2 *this, OpaqueAudioComponentInstance *a2, double *a3)
{
  AudioCodecPropertyID v5;
  double v6;
  double *v7;
  double *v8;
  size_t v9;
  double v10;
  double v11;
  double *v12;
  double v13;
  double v15;
  double v16;
  Boolean outWritable;
  UInt32 outSize;

  outSize = 0;
  outWritable = 0;
  if ((_DWORD)a3)
    v5 = 1634300786;
  else
    v5 = 1634694002;
  v6 = *(double *)a2;
  if (!AudioCodecGetPropertyInfo(this, v5, &outSize, &outWritable))
  {
    if (outSize >= 0x10)
    {
      v9 = outSize & 0xFFFFFFF0;
      v7 = (double *)operator new(v9);
      bzero(v7, v9);
      v8 = (double *)((char *)v7 + v9);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (AudioCodecGetProperty(this, v5, &outSize, v7))
      goto LABEL_26;
    v10 = *v7;
    if ((char *)v8 - (char *)v7 != 16 || v10 != 0.0 || v7[1] != 0.0)
    {
      if (v7 == v8)
        goto LABEL_25;
      v11 = vabdd_f64(v10, v6);
      v12 = v7;
      while (1)
      {
        v13 = v12[1];
        if (*v12 <= v6 && v13 >= v6)
          break;
        v15 = vabdd_f64(*v12, v6);
        if (v15 < v11)
        {
          v10 = *v12;
          v11 = v15;
        }
        v16 = vabdd_f64(v13, v6);
        if (v16 < v11)
        {
          v10 = v12[1];
          v11 = v16;
        }
        v12 += 2;
        if (v12 == v8)
          goto LABEL_25;
      }
    }
    v10 = v6;
LABEL_25:
    *(double *)a2 = v10;
LABEL_26:
    if (v7)
      operator delete(v7);
  }
}

void sub_18EFF1C34(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void FLACAudioFile::~FLACAudioFile(FLACAudioFile *this)
{
  FLACAudioFile::~FLACAudioFile(this);
  JUMPOUT(0x193FFE460);
}

{
  const void *v2;
  const void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_1E2902D98;
  v2 = (const void *)*((_QWORD *)this + 30);
  if (v2)
    CFRelease(v2);
  v5 = (void **)((char *)this + 216);
  std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = (const void *)*((_QWORD *)this + 26);
  if (v3)
    CFRelease(v3);
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  AudioFileObject::~AudioFileObject(this);
}

uint64_t FLACAudioFile::Create(FLACAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  if (a3->mFormatID == 1718378851)
    return AudioFileObject::Create(this, a2, a3);
  else
    return 1718449215;
}

uint64_t FLACAudioFile::OpenFromDataSource(FLACAudioFile *this)
{
  uint64_t v1;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = (*(uint64_t (**)(FLACAudioFile *))(*(_QWORD *)this + 728))(this);
  if ((_DWORD)v1 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "FLACAudioFile.cpp";
    v5 = 1024;
    v6 = 331;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ParseAudioFile failed", (uint8_t *)&v3, 0x12u);
  }
  return v1;
}

uint64_t FLACAudioFile::InitializeDataSource(FLACAudioFile *this, const AudioStreamBasicDescription *a2)
{
  if (a2->mFormatID == 1718378851)
    return 0;
  else
    return 1718449215;
}

uint64_t FLACAudioFile::Close(FLACAudioFile *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int16 *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  int v14;
  unsigned int *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  char v49;
  __int16 v50;
  char v51;
  _BYTE v52[34];
  __int16 v53;
  unsigned int *v54;
  _BYTE *v55;
  __int16 *v56;
  unint64_t v57;
  unsigned int v58;
  int v59;
  uint8_t buf[4];
  const char *v61;
  __int16 v62;
  int v63;
  _BYTE v64[32];
  unint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 100) & 2) == 0 || *((_QWORD *)this + 19) == *((_QWORD *)this + 20))
    goto LABEL_84;
  v59 = 38;
  v2 = *((_QWORD *)this + 15);
  if (v2)
    v2 = *(_QWORD *)(v2 + 24);
  v3 = v2 * *((unsigned int *)this + 11);
  MEMORY[0x1E0C80A78](this);
  v4 = *((_QWORD *)this + 19);
  v5 = *((_QWORD *)this + 20) - v4;
  if (v5 <= 0x31)
    goto LABEL_6;
  v6 = (__int16 *)(v4 + v5);
  v55 = (_BYTE *)*((_QWORD *)this + 19);
  v56 = v6;
  if ((v4 & 3) != 0)
  {
    v7 = 0;
    v8 = v4 & 3 ^ 3;
    v9 = v8 + 1;
    v10 = v4 + 1;
    v11 = 8 * v8;
    v12 = 8 * v8 + 8;
    v13 = (unsigned __int8 *)v4;
    do
    {
      if (v13 >= (unsigned __int8 *)v6)
        v14 = 255;
      else
        v14 = *v13;
      v7 = v14 | (v7 << 8);
      ++v13;
    }
    while ((v10++ & 3) != 0);
    v16 = (unsigned int *)(v4 + v9);
    v54 = v16;
    v17 = v7 << (v11 ^ 0x18);
    LODWORD(v57) = v17;
    v18 = v11 - 24;
    if ((v4 & 3) == 0)
    {
      v12 = v18;
      v19 = v17;
      goto LABEL_28;
    }
  }
  else
  {
    v17 = 0;
    v12 = 0;
    LOBYTE(v18) = -32;
    HIDWORD(v57) = -32;
    v16 = (unsigned int *)v4;
  }
  if ((((_DWORD)v6 - (_DWORD)v16) & ~(((char *)v6 - (char *)v16) >> 63) & 0xFFFFFFFC) != 0
    && (unint64_t)v16 >= v4)
  {
    v20 = bswap32(*v16);
  }
  else
  {
    v21 = 0;
    v20 = v17;
    do
    {
      v22 = (unsigned __int8 *)v16 + v21;
      v23 = 255;
      if ((char *)v16 + v21 < (char *)v6 && (unint64_t)v22 >= v4)
        v23 = *v22;
      v20 = v23 | (v20 << 8);
      ++v21;
    }
    while ((_DWORD)v21 != 4);
  }
  v54 = ++v16;
  v19 = (v20 >> v12) | v17;
  v17 = v20 << -(char)v18;
  if (!v12)
    v17 = 0;
  LODWORD(v57) = v17;
LABEL_28:
  if ((int)(v12 - 32) < 0)
  {
    if ((((_DWORD)v6 - (_DWORD)v16) & ~(((char *)v6 - (char *)v16) >> 63) & 0xFFFFFFFC) != 0
      && (unint64_t)v16 >= v4)
    {
      v26 = bswap32(*v16);
    }
    else
    {
      v27 = 0;
      v26 = v17;
      do
      {
        v28 = (unsigned __int8 *)v16 + v27;
        v29 = 255;
        if ((char *)v16 + v27 < (char *)v6 && (unint64_t)v28 >= v4)
          v29 = *v28;
        v26 = v29 | (v26 << 8);
        ++v27;
      }
      while ((_DWORD)v27 != 4);
    }
    v54 = ++v16;
    v25 = (v26 >> v12) | v17;
    v17 = v26 << -(char)v12;
    if (!v12)
      v17 = 0;
    LODWORD(v57) = v17;
    v24 = v12 - 32;
  }
  else
  {
    v24 = v12 - 64;
    v12 -= 32;
    v25 = v17;
  }
  HIDWORD(v57) = v24;
  if ((v24 & 0x80000000) != 0)
  {
    if ((((_DWORD)v6 - (_DWORD)v16) & ~(((char *)v6 - (char *)v16) >> 63) & 0xFFFFFFFC) != 0
      && (unint64_t)v16 >= v4)
    {
      v32 = bswap32(*v16);
    }
    else
    {
      v33 = 0;
      v32 = v17;
      do
      {
        v34 = (unsigned __int8 *)v16 + v33;
        v35 = v32 << 8;
        LODWORD(v57) = v35;
        v36 = 255;
        if ((char *)v16 + v33 < (char *)v6 && (unint64_t)v34 >= v4)
          v36 = *v34;
        v32 = v36 | v35;
        LODWORD(v57) = v32;
        ++v33;
      }
      while ((_DWORD)v33 != 4);
    }
    v54 = ++v16;
    v31 = (v32 >> v12) | v17;
    v17 = v32 << -(char)v12;
    if (!v12)
      v17 = 0;
    LODWORD(v57) = v17;
    v30 = v24;
  }
  else
  {
    v30 = v24 - 32;
    v12 = v24;
    v31 = v17;
  }
  HIDWORD(v57) = v30;
  if ((v30 & 0x80000000) != 0)
  {
    if ((((_DWORD)v6 - (_DWORD)v16) & ~(((char *)v6 - (char *)v16) >> 63) & 0xFFFFFFFC) != 0
      && (unint64_t)v16 >= v4)
    {
      v37 = bswap32(*v16);
    }
    else
    {
      v38 = 0;
      v37 = v17;
      do
      {
        v39 = (unsigned __int8 *)v16 + v38;
        v40 = v37 << 8;
        LODWORD(v57) = v40;
        v41 = 255;
        if ((char *)v16 + v38 < (char *)v6 && (unint64_t)v39 >= v4)
          v41 = *v39;
        v37 = v41 | v40;
        LODWORD(v57) = v37;
        ++v38;
      }
      while ((_DWORD)v38 != 4);
    }
    v54 = v16 + 1;
    v17 |= v37 >> v12;
    v42 = v37 << -(char)v12;
    if (!v12)
      v42 = 0;
    v57 = __PAIR64__(v12, v42);
  }
  if (v19 >= 0x32 && v25 == 1684425825 && !v31 && (v17 & 0x7F000000) == 0 && (v17 & 0xFFFFFEu) > 0x21)
  {
    FLACUnpackStreamInfo((uint64_t)&v54, (uint64_t)v64);
    goto LABEL_72;
  }
LABEL_6:
  bzero(v64, 0x38uLL);
LABEL_72:
  v43 = *((int *)this + 49);
  if (v65 > v3 - v43)
  {
    v44 = v3 >= v43;
    v45 = v3 - v43;
    if (!v44)
      v45 = 0;
    v65 = v45;
  }
  if (*((_BYTE *)this + 181))
  {
    v46 = 0;
  }
  else if (*((_BYTE *)this + 182))
  {
    v46 = 0;
  }
  else
  {
    v46 = 0x80;
  }
  v49 = v46;
  v50 = 0;
  v51 = 34;
  v54 = (unsigned int *)v52;
  v55 = v52;
  v56 = &v53;
  v57 = 0x2000000000;
  v58 = (&v49 + 4) & 3;
  FLACPackStreamInfo((uint64_t)&v54, (uint64_t)v64);
  if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *, int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, 4, 38, &v49, &v59)&& os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v61 = "FLACAudioFile.cpp";
    v62 = 1024;
    v63 = 132;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Write stream info failed", buf, 0x12u);
  }
LABEL_84:
  v47 = *((_QWORD *)this + 13);
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  *((_QWORD *)this + 13) = 0;
  return 0;
}

uint64_t FLACAudioFile::ReadPackets(FLACAudioFile *this, unsigned int a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  BOOL v7;
  int v8;
  uint64_t v10;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  UInt32 *p_mVariableFramesInPacket;
  UInt32 v30;
  uint64_t v31;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  _BYTE buf[12];
  _DWORD v39[3];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a4)
    v7 = a7 == 0;
  else
    v7 = 0;
  v8 = v7;
  if (a6 && (v10 = *a6, (_DWORD)v10))
  {
    v17 = (*(uint64_t (**)(FLACAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, v10 + a5, 0, 1);
    if ((_DWORD)v17)
    {
      v18 = v17;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
        LOWORD(v39[0]) = 1024;
        *(_DWORD *)((char *)v39 + 2) = 154;
        v19 = MEMORY[0x1E0C81028];
        v20 = "%25s:%-5d  ScanForPackets (FLAC) failed";
LABEL_14:
        _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
      }
    }
    else
    {
      v22 = (uint64_t *)*((_QWORD *)this + 15);
      if (v22)
      {
        v23 = v22[3];
        if (v23 >= a5)
          v18 = 1685348671;
        else
          v18 = 1885563711;
        if (v23 >= a5 && v22 != 0)
        {
          v37 = 0;
          v25 = v22[3];
          if (a3)
            *a3 = 0;
          v35 = a2;
          v26 = *a6;
          if (v26 + a5 > v25)
          {
            LODWORD(v26) = v25 - a5;
            *a6 = v25 - a5;
          }
          if ((_DWORD)v26)
          {
            v34 = a3;
            CompressedPacketTable::operator[]((uint64_t)buf, v22, a5);
            if (*a6)
            {
              v27 = 0;
              v28 = 0;
              v36 = *(_QWORD *)buf;
              p_mVariableFramesInPacket = &a4->mVariableFramesInPacket;
              do
              {
                CompressedPacketTable::operator[]((uint64_t)buf, v22, a5 + v28);
                v30 = v39[0];
                v27 += v39[0];
                v37 = v27;
                if (a4)
                {
                  *((_QWORD *)p_mVariableFramesInPacket - 1) = *(_QWORD *)buf - v36;
                  *p_mVariableFramesInPacket = 0;
                  p_mVariableFramesInPacket[1] = v30;
                }
                ++v28;
                p_mVariableFramesInPacket += 4;
              }
              while (v28 < *a6);
            }
            if (v8)
            {
              v18 = 0;
              if (v34)
                *v34 = 0;
            }
            else
            {
              CompressedPacketTable::operator[]((uint64_t)buf, v22, a5);
              v31 = (*(uint64_t (**)(FLACAudioFile *, _QWORD, _QWORD, unsigned int *, void *))(*(_QWORD *)this + 72))(this, v35, *(_QWORD *)buf, &v37, a7);
              v18 = v31;
              if ((_DWORD)v31 == -39 || (_DWORD)v31 == 0)
              {
                if (v34)
                  *v34 = v37;
              }
              else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
                LOWORD(v39[0]) = 1024;
                *(_DWORD *)((char *)v39 + 2) = 209;
                v19 = MEMORY[0x1E0C81028];
                v20 = "%25s:%-5d  ReadBytes failed";
                goto LABEL_14;
              }
            }
          }
          else
          {
            if (a3)
              *a3 = 0;
            return 4294967257;
          }
        }
      }
      else if (a5 <= 0)
      {
        return 1685348671;
      }
      else
      {
        return 1885563711;
      }
    }
  }
  else
  {
    v18 = 2003334207;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
      LOWORD(v39[0]) = 1024;
      *(_DWORD *)((char *)v39 + 2) = 150;
      v19 = MEMORY[0x1E0C81028];
      v20 = "%25s:%-5d  invalid num packets parameter";
      goto LABEL_14;
    }
  }
  return v18;
}

uint64_t FLACAudioFile::WritePackets(FLACAudioFile *this, unsigned __int8 a2, unsigned int a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  unsigned int *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  SInt64 v20;
  unsigned int mDataByteSize;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  __CFString *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  const __CFString **v33;
  const __CFString **v34;
  int v35;
  unsigned int v36;
  NSObject *v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  _BYTE *v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t v44;
  void *p_p;
  NSObject *v46;
  char v47;
  uint64_t v48;
  NSObject *v49;
  const __CFData *v50;
  CFIndex Length;
  uint64_t v52;
  uint64_t v53;
  const void *v54;
  const void *Type;
  const void *v56;
  const __CFString *v57;
  const __CFString *v58;
  NSObject *v59;
  NSObject *v60;
  const char *v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  NSObject *v65;
  NSObject *v66;
  NSObject *v67;
  const char *v68;
  const __CFDictionary *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t v74;
  NSObject *v75;
  NSObject *v76;
  const char *v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  unsigned int v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  NSObject *v86;
  NSObject *v87;
  const __CFDictionary *v88;
  const __CFNumber *Value;
  uint64_t v90;
  NSObject *v91;
  NSObject *v92;
  uint64_t v93;
  NSObject *v94;
  const __CFNumber *v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const UInt8 *BytePtr;
  uint64_t v104;
  const AudioStreamPacketDescription *v105;
  UInt32 *p_mDataByteSize;
  NSObject *v107;
  const char *v108;
  uint64_t *v110;
  uint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  char *v114;
  int v116;
  int v117;
  AudioStreamPacketDescription v118;
  void *__p;
  unsigned int v120;
  unsigned __int8 v121;
  char v122;
  uint64_t v123;
  _BYTE v124[12];
  __int16 v125;
  int v126;
  _BYTE v127[24];
  uint8_t buf[24];
  uint64_t v129;

  v8 = a6;
  v129 = *MEMORY[0x1E0C80C00];
  v118.mStartOffset = 0;
  *(_QWORD *)&v118.mVariableFramesInPacket = 0;
  v10 = *((unsigned int *)this + 11);
  v11 = *((_DWORD *)this + 13);
  if (!a5 && *((_DWORD *)this + 8) != 1718378851 && *((_QWORD *)this + 19) == *((_QWORD *)this + 20))
    return 2003334207;
  v117 = 0;
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 256;
      v13 = MEMORY[0x1E0C81028];
LABEL_13:
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d  WritePackets Failed", buf, 0x12u);
    }
    return 0;
  }
  if (!*a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 257;
      v13 = MEMORY[0x1E0C81028];
      goto LABEL_13;
    }
    return 0;
  }
  v12 = *((_QWORD *)this + 15);
  if (!v12)
  {
    if (a5)
      goto LABEL_219;
    v12 = operator new();
    v15 = *((_DWORD *)this + 11);
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_DWORD *)(v12 + 32) = v15;
    *((_QWORD *)this + 15) = v12;
    goto LABEL_18;
  }
  if (*(_QWORD *)(v12 + 24) == a5)
  {
LABEL_18:
    if (!a4)
    {
      v14 = 1885563711;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 264;
        v107 = MEMORY[0x1E0C81028];
        v108 = "%25s:%-5d  Packet Descriptions were not provided";
        goto LABEL_229;
      }
      return v14;
    }
    if (!*v8)
    {
      LODWORD(v16) = 0;
      v14 = 0;
      goto LABEL_224;
    }
    v110 = (uint64_t *)v12;
    v113 = v10;
    v114 = a7;
    v16 = 0;
    v111 = (v11 - 1);
    v17 = MEMORY[0x1E0C81028];
    v112 = v8;
LABEL_21:
    v116 = 1130450022;
    v18 = *((_QWORD *)this + 15);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
      {
        CompressedPacketTable::operator[]((uint64_t)buf, v110, v19 - 1);
        v20 = *(_QWORD *)buf + *(unsigned int *)&buf[12];
        v118.mStartOffset = v20;
        mDataByteSize = a4[v16].mDataByteSize;
        v118.mDataByteSize = mDataByteSize;
        goto LABEL_215;
      }
    }
    *((_DWORD *)this + 35) = kFLACChannelConfigToLayoutTag[v111];
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, int *, int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, 0, 4, &v116, &v117);
    v22 = *((_QWORD *)this + 30);
    v123 = 0;
    memset(buf, 0, sizeof(buf));
    if (!*((_QWORD *)this + 26) && *((_QWORD *)this + 28) == *((_QWORD *)this + 27))
    {
      v28 = 0;
      v14 = 0;
      goto LABEL_98;
    }
    LODWORD(v123) = 0;
    v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *, char *))(**((_QWORD **)this + 13)
                                                                                         + 56))(*((_QWORD *)this + 13), 0, 42, 4, &v123, (char *)&v123 + 4);
    if ((_DWORD)v14)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v127 = 136315394;
        *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
        *(_WORD *)&v127[12] = 1024;
        *(_DWORD *)&v127[14] = 628;
        v23 = v17;
        v24 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing METADATA_BLOCK_HEADER failed";
        goto LABEL_96;
      }
      goto LABEL_97;
    }
    v25 = HIDWORD(v123);
    v26 = (__CFString *)*((_QWORD *)this + 26);
    if (v26)
      CFRetain(*((CFTypeRef *)this + 26));
    __p = v26;
    applesauce::CF::convert_to<std::string,0>((uint64_t)v127, v26);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    *(_OWORD *)buf = *(_OWORD *)v127;
    *(_QWORD *)&buf[16] = *(_QWORD *)&v127[16];
    v127[23] = 0;
    v127[0] = 0;
    if (v26)
      CFRelease(v26);
    v27 = buf[23];
    if ((buf[23] & 0x80u) != 0)
      v27 = *(_DWORD *)&buf[8];
    LODWORD(v123) = v27;
    v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *, char *))(**((_QWORD **)this + 13)
                                                                                         + 56))(*((_QWORD *)this + 13), 0, v25 + 42, 4, &v123, (char *)&v123 + 4);
    if ((_DWORD)v14)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v127 = 136315394;
        *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
        *(_WORD *)&v127[12] = 1024;
        *(_DWORD *)&v127[14] = 635;
        v23 = v17;
        v24 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing length of vendor string failed";
        goto LABEL_96;
      }
      goto LABEL_97;
    }
    v29 = HIDWORD(v123) + v25;
    if ((buf[23] & 0x80u) == 0)
      v30 = buf[23];
    else
      v30 = *(unsigned int *)&buf[8];
    if ((buf[23] & 0x80u) == 0)
      v31 = buf;
    else
      v31 = *(uint8_t **)buf;
    v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint8_t *, char *))(**((_QWORD **)this + 13)
                                                                                         + 56))(*((_QWORD *)this + 13), 0, v29 + 42, v30, v31, (char *)&v123 + 4);
    if ((_DWORD)v14)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v127 = 136315394;
        *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
        *(_WORD *)&v127[12] = 1024;
        *(_DWORD *)&v127[14] = 640;
        v23 = v17;
        v24 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing vendor string failed";
        goto LABEL_96;
      }
      goto LABEL_97;
    }
    v32 = v29 + HIDWORD(v123);
    LODWORD(v123) = (*((_QWORD *)this + 28) - *((_QWORD *)this + 27)) >> 4;
    v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *, char *))(**((_QWORD **)this + 13)
                                                                                         + 56))(*((_QWORD *)this + 13), 0, v32 + 42, 4, &v123, (char *)&v123 + 4);
    if ((_DWORD)v14)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v127 = 136315394;
        *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
        *(_WORD *)&v127[12] = 1024;
        *(_DWORD *)&v127[14] = 646;
        v23 = v17;
        v24 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing count of comment fields failed";
        goto LABEL_96;
      }
      goto LABEL_97;
    }
    v28 = v32 + HIDWORD(v123);
    v33 = (const __CFString **)*((_QWORD *)this + 27);
    v34 = (const __CFString **)*((_QWORD *)this + 28);
    while (1)
    {
      if (v33 == v34)
      {
        LODWORD(v123) = bswap32((v28 + 16777212) & 0xFFFFFF | ((v22 == 0) << 31) | 0x4000000);
        v48 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *, char *))(**((_QWORD **)this + 13)
                                                                                             + 56))(*((_QWORD *)this + 13), 0, 42, 4, &v123, (char *)&v123 + 4);
        v49 = MEMORY[0x1E0C81028];
        v14 = v48;
        if ((_DWORD)v48)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v127 = 136315394;
            *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v127[12] = 1024;
            *(_DWORD *)&v127[14] = 682;
            v23 = v49;
            v24 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Patching block header failed";
LABEL_96:
            _os_log_impl(&dword_18EE07000, v23, OS_LOG_TYPE_ERROR, v24, v127, 0x12u);
          }
LABEL_97:
          v28 = 0;
        }
LABEL_98:
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        if ((_DWORD)v14)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return v14;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 282;
          v107 = MEMORY[0x1E0C81028];
          v108 = "%25s:%-5d  WriteVorbisComment failed";
LABEL_229:
          _os_log_impl(&dword_18EE07000, v107, OS_LOG_TYPE_ERROR, v108, buf, 0x12u);
          return v14;
        }
        *((_BYTE *)this + 181) = v28 != 0;
        v50 = (const __CFData *)*((_QWORD *)this + 30);
        if (!v50)
        {
          Length = 0;
          v58 = 0;
          v62 = 0;
          v63 = 0;
          HIDWORD(v123) = 0;
          *(_QWORD *)v124 = 0;
          memset(buf, 0, sizeof(buf));
          v64 = 1;
          goto LABEL_141;
        }
        Length = CFDataGetLength(v50);
        v52 = *((_QWORD *)this + 30);
        HIDWORD(v123) = 0;
        *(_QWORD *)v124 = 0;
        memset(buf, 0, sizeof(buf));
        if (!v52)
          goto LABEL_139;
        if (sLoadCoreMediaOnce != -1)
          dispatch_once(&sLoadCoreMediaOnce, &__block_literal_global_6689);
        v53 = sCGImageSourceCreateWithData(*((_QWORD *)this + 30), 0);
        v54 = (const void *)v53;
        if (!v53)
        {
          v65 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v127 = 136315394;
            *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v127[12] = 1024;
            *(_DWORD *)&v127[14] = 816;
            _os_log_impl(&dword_18EE07000, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d  CGImageSourceCreateWithData failed", v127, 0x12u);
          }
          goto LABEL_139;
        }
        if (sCGImageSourceGetCount(v53) != 1)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v127 = 136315394;
            *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v127[12] = 1024;
            *(_DWORD *)&v127[14] = 818;
            _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Can store only a single image", v127, 0x12u);
          }
LABEL_138:
          CFRelease(v54);
LABEL_139:
          v58 = 0;
          v62 = 0;
          v63 = 0;
LABEL_140:
          v64 = 1;
          goto LABEL_141;
        }
        Type = (const void *)sCGImageSourceGetType(v54);
        v56 = Type;
        if (!Type)
        {
          __p = 0;
LABEL_125:
          v66 = MEMORY[0x1E0C81028];
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_138;
          *(_DWORD *)v127 = 136315394;
          *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
          *(_WORD *)&v127[12] = 1024;
          *(_DWORD *)&v127[14] = 821;
          v67 = v66;
          v68 = "%25s:%-5d  CGImageSourceGetType failed to return a UTI";
LABEL_127:
          _os_log_impl(&dword_18EE07000, v67, OS_LOG_TYPE_ERROR, v68, v127, 0x12u);
LABEL_128:
          v58 = 0;
          goto LABEL_129;
        }
        CFRetain(Type);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&__p, v56);
        if (!__p)
          goto LABEL_125;
        v57 = CFSTR("image/jpeg");
        if (!CFEqual(__p, CFSTR("public.jpeg")))
        {
          v57 = CFSTR("image/jp2");
          if (!CFEqual(__p, CFSTR("public.jpeg-2000")))
          {
            v57 = CFSTR("image/png");
            if (!CFEqual(__p, CFSTR("public.png")))
            {
              v57 = CFSTR("image/tiff");
              if (!CFEqual(__p, CFSTR("public.tiff")))
              {
                v57 = CFSTR("image/heif");
                if (!CFEqual(__p, CFSTR("public.heif")))
                {
                  v57 = CFSTR("image/bmp");
                  if (!CFEqual(__p, CFSTR("com.microsoft.bmp")))
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v127 = 136315394;
                      *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
                      *(_WORD *)&v127[12] = 1024;
                      *(_DWORD *)&v127[14] = 844;
                      v67 = MEMORY[0x1E0C81028];
                      v68 = "%25s:%-5d  Couldn't infer MIME type from UTI";
                      goto LABEL_127;
                    }
                    goto LABEL_128;
                  }
                }
              }
            }
          }
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v127, v57);
        v58 = *(const __CFString **)v127;
        *(_QWORD *)v124 = *(_QWORD *)v127;
        if (!*(_QWORD *)v127)
        {
          v87 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v127 = 136315394;
            *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v127[12] = 1024;
            *(_DWORD *)&v127[14] = 846;
            v67 = v87;
            v68 = "%25s:%-5d  couldn't get a MIME type for the image";
            goto LABEL_127;
          }
          goto LABEL_128;
        }
        if (CFStringGetLength(v57) >= 256)
        {
          v59 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v127 = 136315394;
            *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v127[12] = 1024;
            *(_DWORD *)&v127[14] = 847;
            v60 = v59;
            v61 = "%25s:%-5d  MIME type length exceeds limit";
            goto LABEL_176;
          }
          goto LABEL_129;
        }
        v88 = (const __CFDictionary *)sCGImageSourceCopyPropertiesAtIndex(v54, 0, 0);
        v69 = v88;
        if (v88)
        {
          Value = (const __CFNumber *)CFDictionaryGetValue(v88, CFSTR("PixelWidth"));
          if (Value)
            v62 = applesauce::CF::convert_to<int,0>(Value);
          else
            v62 = 0;
          v95 = (const __CFNumber *)CFDictionaryGetValue(v69, CFSTR("PixelHeight"));
          if (v95)
            v63 = applesauce::CF::convert_to<int,0>(v95);
          else
            v63 = 0;
          v70 = 1;
        }
        else
        {
          v92 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v127 = 136315394;
            *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v127[12] = 1024;
            *(_DWORD *)&v127[14] = 850;
            v60 = v92;
            v61 = "%25s:%-5d  CGImageSourceCopyPropertiesAtIndex failed";
LABEL_176:
            _os_log_impl(&dword_18EE07000, v60, OS_LOG_TYPE_ERROR, v61, v127, 0x12u);
          }
LABEL_129:
          v62 = 0;
          v63 = 0;
          v69 = 0;
          v70 = 0;
        }
        if (__p)
          CFRelease(__p);
        CFRelease(v54);
        if (v69)
          CFRelease(v69);
        if (!v70)
          goto LABEL_140;
        applesauce::CF::convert_to<std::string,0>((uint64_t)v127, v58);
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        v64 = 0;
        *(_OWORD *)buf = *(_OWORD *)v127;
        *(_QWORD *)&buf[16] = *(_QWORD *)&v127[16];
LABEL_141:
        v14 = 0;
        v71 = 0;
        v72 = v28 + 42;
        v73 = buf[23];
        v74 = buf[23];
        if ((buf[23] & 0x80u) != 0)
          v73 = *(_QWORD *)&buf[8];
        if ((v64 & 1) == 0 && Length >= 1 && Length <= 16777179 - v73)
        {
          LODWORD(__p) = 0;
          v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void **, char *))(**((_QWORD **)this + 13)
                                                                                             + 56))(*((_QWORD *)this + 13), 0, v28 + 42, 4, &__p, (char *)&v123 + 4);
          if (!(_DWORD)v14)
          {
            v78 = HIDWORD(v123);
            LODWORD(__p) = 50331648;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void **, char *))(**((_QWORD **)this + 13)
                                                                                               + 56))(*((_QWORD *)this + 13), 0, v72 + HIDWORD(v123), 4, &__p, (char *)&v123 + 4);
            if ((_DWORD)v14)
            {
              v79 = MEMORY[0x1E0C81028];
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_206;
              *(_DWORD *)v127 = 136315394;
              *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
              *(_WORD *)&v127[12] = 1024;
              *(_DWORD *)&v127[14] = 950;
              v76 = v79;
              v77 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing picture type failed";
            }
            else
            {
              v80 = HIDWORD(v123) + v78;
              v81 = buf[23];
              if ((buf[23] & 0x80u) != 0)
                v81 = *(_DWORD *)&buf[8];
              LODWORD(__p) = bswap32(v81);
              v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void **, char *))(**((_QWORD **)this + 13)
                                                                                                 + 56))(*((_QWORD *)this + 13), 0, v80 + v72, 4, &__p, (char *)&v123 + 4);
              if ((_DWORD)v14)
              {
                v82 = MEMORY[0x1E0C81028];
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  goto LABEL_206;
                *(_DWORD *)v127 = 136315394;
                *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
                *(_WORD *)&v127[12] = 1024;
                *(_DWORD *)&v127[14] = 956;
                v76 = v82;
                v77 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing length of MIME type failed";
              }
              else
              {
                v83 = v80 + HIDWORD(v123);
                if ((buf[23] & 0x80u) == 0)
                  v84 = buf[23];
                else
                  v84 = *(unsigned int *)&buf[8];
                if ((buf[23] & 0x80u) == 0)
                  v85 = buf;
                else
                  v85 = *(uint8_t **)buf;
                v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint8_t *, char *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v83 + v72, v84, v85, (char *)&v123 + 4);
                if ((_DWORD)v14)
                {
                  v86 = MEMORY[0x1E0C81028];
                  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    goto LABEL_206;
                  *(_DWORD *)v127 = 136315394;
                  *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
                  *(_WORD *)&v127[12] = 1024;
                  *(_DWORD *)&v127[14] = 961;
                  v76 = v86;
                  v77 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing MIME type failed";
                }
                else
                {
                  v90 = v83 + HIDWORD(v123);
                  LODWORD(__p) = 0;
                  v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void **, char *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v90 + v72, 4, &__p, (char *)&v123 + 4);
                  if ((_DWORD)v14)
                  {
                    v91 = MEMORY[0x1E0C81028];
                    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                      goto LABEL_206;
                    *(_DWORD *)v127 = 136315394;
                    *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
                    *(_WORD *)&v127[12] = 1024;
                    *(_DWORD *)&v127[14] = 967;
                    v76 = v91;
                    v77 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing length of description string failed";
                  }
                  else
                  {
                    v93 = v90 + HIDWORD(v123);
                    LODWORD(__p) = bswap32(v62);
                    v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void **, char *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v93 + v72, 4, &__p, (char *)&v123 + 4);
                    if ((_DWORD)v14)
                    {
                      v94 = MEMORY[0x1E0C81028];
                      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                        goto LABEL_206;
                      *(_DWORD *)v127 = 136315394;
                      *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
                      *(_WORD *)&v127[12] = 1024;
                      *(_DWORD *)&v127[14] = 973;
                      v76 = v94;
                      v77 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing picture width failed";
                    }
                    else
                    {
                      v96 = v93 + HIDWORD(v123);
                      LODWORD(__p) = bswap32(v63);
                      v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void **, char *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v96 + v72, 4, &__p, (char *)&v123 + 4);
                      if ((_DWORD)v14)
                      {
                        v97 = MEMORY[0x1E0C81028];
                        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                          goto LABEL_206;
                        *(_DWORD *)v127 = 136315394;
                        *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
                        *(_WORD *)&v127[12] = 1024;
                        *(_DWORD *)&v127[14] = 979;
                        v76 = v97;
                        v77 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing picture height failed";
                      }
                      else
                      {
                        v98 = v96 + HIDWORD(v123);
                        LODWORD(__p) = 0;
                        v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void **, char *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v98 + v72, 4, &__p, (char *)&v123 + 4);
                        if ((_DWORD)v14)
                        {
                          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                            goto LABEL_206;
                          *(_DWORD *)v127 = 136315394;
                          *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
                          *(_WORD *)&v127[12] = 1024;
                          *(_DWORD *)&v127[14] = 985;
                          v76 = MEMORY[0x1E0C81028];
                          v77 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing picture depth failed";
                        }
                        else
                        {
                          v99 = v98 + HIDWORD(v123);
                          LODWORD(__p) = 0;
                          v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void **, char *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v99 + v72, 4, &__p, (char *)&v123 + 4);
                          if ((_DWORD)v14)
                          {
                            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                              goto LABEL_206;
                            *(_DWORD *)v127 = 136315394;
                            *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
                            *(_WORD *)&v127[12] = 1024;
                            *(_DWORD *)&v127[14] = 991;
                            v76 = MEMORY[0x1E0C81028];
                            v77 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing number of colors failed";
                          }
                          else
                          {
                            v100 = v99 + HIDWORD(v123);
                            LODWORD(__p) = bswap32(Length);
                            v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void **, char *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v100 + v72, 4, &__p, (char *)&v123 + 4);
                            if ((_DWORD)v14)
                            {
                              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                                goto LABEL_206;
                              *(_DWORD *)v127 = 136315394;
                              *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
                              *(_WORD *)&v127[12] = 1024;
                              *(_DWORD *)&v127[14] = 997;
                              v76 = MEMORY[0x1E0C81028];
                              v77 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing length of picture data failed";
                            }
                            else
                            {
                              v101 = HIDWORD(v123);
                              v102 = *((_QWORD *)this + 13);
                              BytePtr = CFDataGetBytePtr(*((CFDataRef *)this + 30));
                              v104 = v100 + v101;
                              v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFIndex, const UInt8 *, char *))(*(_QWORD *)v102 + 56))(v102, 0, v104 + v72, Length, BytePtr, (char *)&v123 + 4);
                              if ((_DWORD)v14)
                              {
                                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                                  goto LABEL_206;
                                *(_DWORD *)v127 = 136315394;
                                *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
                                *(_WORD *)&v127[12] = 1024;
                                *(_DWORD *)&v127[14] = 1002;
                                v76 = MEMORY[0x1E0C81028];
                                v77 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing picture data failed";
                              }
                              else
                              {
                                v71 = v104 + HIDWORD(v123);
                                LODWORD(__p) = bswap32((v71 + 16777212) & 0xFFFFFF | 0x86000000);
                                v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void **, char *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v72, 4, &__p, (char *)&v123 + 4);
                                if (!(_DWORD)v14)
                                  goto LABEL_207;
                                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                                  goto LABEL_206;
                                *(_DWORD *)v127 = 136315394;
                                *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
                                *(_WORD *)&v127[12] = 1024;
                                *(_DWORD *)&v127[14] = 1009;
                                v76 = MEMORY[0x1E0C81028];
                                v77 = "%25s:%-5d  FLACAudioFile::WritePicture: Patching block header failed";
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_205:
            _os_log_impl(&dword_18EE07000, v76, OS_LOG_TYPE_ERROR, v77, v127, 0x12u);
            goto LABEL_206;
          }
          v75 = MEMORY[0x1E0C81028];
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v127 = 136315394;
            *(_QWORD *)&v127[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v127[12] = 1024;
            *(_DWORD *)&v127[14] = 944;
            v76 = v75;
            v77 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing METADATA_BLOCK_HEADER failed";
            goto LABEL_205;
          }
LABEL_206:
          v71 = 0;
LABEL_207:
          v74 = buf[23];
        }
        if ((v74 & 0x80) != 0)
        {
          operator delete(*(void **)buf);
          if (!v58)
            goto LABEL_213;
LABEL_212:
          CFRelease(v58);
          goto LABEL_213;
        }
        if (v58)
          goto LABEL_212;
LABEL_213:
        if ((_DWORD)v14)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return v14;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 287;
          v107 = MEMORY[0x1E0C81028];
          v108 = "%25s:%-5d  WritePicture failed";
          goto LABEL_229;
        }
        *((_BYTE *)this + 182) = v71 != 0;
        v20 = v71 + v72;
        v118.mStartOffset = v71 + v72;
        mDataByteSize = a4[v16].mDataByteSize;
        v118.mDataByteSize = mDataByteSize;
        *((_QWORD *)this + 23) = 0;
        v17 = MEMORY[0x1E0C81028];
LABEL_215:
        v105 = &a4[v16];
        p_mDataByteSize = &v105->mDataByteSize;
        if (mDataByteSize > (*(unsigned int (**)(FLACAudioFile *))(*(_QWORD *)this + 632))(this))
          (*(void (**)(FLACAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, *p_mDataByteSize);
        v14 = (*(uint64_t (**)(_QWORD, _QWORD, SInt64, _QWORD, char *, int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v20, *p_mDataByteSize, &v114[v105->mStartOffset], &v117);
        *((_QWORD *)this + 23) += v113;
        AudioFileObject::AppendPacket(this, &v118);
        ++v16;
        v8 = v112;
        if (v16 >= *v112)
        {
LABEL_224:
          *v8 = v16;
          return v14;
        }
        goto LABEL_21;
      }
      v122 = 61;
      applesauce::CF::convert_to<std::string,0>((uint64_t)v127, *v33);
      applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, v33[1]);
      v35 = v127[23];
      if (v127[23] < 0)
        v35 = *(_DWORD *)&v127[8];
      if ((v121 & 0x80u) == 0)
        v36 = v121;
      else
        v36 = v120;
      LODWORD(v123) = v36 + v35 + 1;
      v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *, char *))(**((_QWORD **)this + 13)
                                                                                           + 56))(*((_QWORD *)this + 13), 0, v28 + 42, 4, &v123, (char *)&v123 + 4);
      if ((_DWORD)v14)
      {
        v37 = MEMORY[0x1E0C81028];
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v124 = 136315394;
          *(_QWORD *)&v124[4] = "FLACAudioFile.cpp";
          v125 = 1024;
          v126 = 659;
          v38 = v37;
          v39 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing length of comment field failed";
          goto LABEL_84;
        }
        goto LABEL_85;
      }
      v28 += HIDWORD(v123);
      if (v127[23] >= 0)
        v40 = v127[23];
      else
        v40 = *(unsigned int *)&v127[8];
      if (v127[23] >= 0)
        v41 = v127;
      else
        v41 = *(_BYTE **)v127;
      v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _BYTE *, char *))(**((_QWORD **)this + 13)
                                                                                         + 56))(*((_QWORD *)this + 13), 0, v28 + 42, v40, v41, (char *)&v123 + 4);
      if ((_DWORD)v14)
      {
        v42 = MEMORY[0x1E0C81028];
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v124 = 136315394;
          *(_QWORD *)&v124[4] = "FLACAudioFile.cpp";
          v125 = 1024;
          v126 = 664;
          v38 = v42;
          v39 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing comment field name failed";
          goto LABEL_84;
        }
LABEL_85:
        v47 = 0;
        goto LABEL_86;
      }
      v28 += HIDWORD(v123);
      v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *, char *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v28 + 42, 1, &v122, (char *)&v123 + 4);
      if ((_DWORD)v14)
        break;
      v28 += HIDWORD(v123);
      if ((v121 & 0x80u) == 0)
        v44 = v121;
      else
        v44 = v120;
      if ((v121 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void *, char *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v28 + 42, v44, p_p, (char *)&v123 + 4);
      if ((_DWORD)v14)
      {
        v46 = MEMORY[0x1E0C81028];
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_85;
        *(_DWORD *)v124 = 136315394;
        *(_QWORD *)&v124[4] = "FLACAudioFile.cpp";
        v125 = 1024;
        v126 = 674;
        v38 = v46;
        v39 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing comment failed";
        goto LABEL_84;
      }
      v28 += HIDWORD(v123);
      v47 = 1;
LABEL_86:
      if ((char)v121 < 0)
        operator delete(__p);
      if ((v127[23] & 0x80000000) != 0)
        operator delete(*(void **)v127);
      if ((v47 & 1) == 0)
        goto LABEL_97;
      v33 += 2;
    }
    v43 = MEMORY[0x1E0C81028];
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_85;
    *(_DWORD *)v124 = 136315394;
    *(_QWORD *)&v124[4] = "FLACAudioFile.cpp";
    v125 = 1024;
    v126 = 669;
    v38 = v43;
    v39 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing '=' failed";
LABEL_84:
    _os_log_impl(&dword_18EE07000, v38, OS_LOG_TYPE_ERROR, v39, v124, 0x12u);
    goto LABEL_85;
  }
LABEL_219:
  v14 = 1885563711;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 259;
    v107 = MEMORY[0x1E0C81028];
    v108 = "%25s:%-5d  ";
    goto LABEL_229;
  }
  return v14;
}

void sub_18EFF3EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,const void *a30)
{
  uint64_t v30;

  applesauce::CF::StringRef::~StringRef((const void **)&__p);
  if (*(char *)(v30 - 105) < 0)
    operator delete(*(void **)(v30 - 128));
  applesauce::CF::StringRef::~StringRef(&a30);
  _Unwind_Resume(a1);
}

uint64_t FLACAudioFile::GetPropertyInfo(FLACAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 > 1886283374)
  {
    if (a2 != 1986225779)
    {
      if (a2 == 1935832164)
      {
        if (!a3)
          goto LABEL_24;
        v4 = 4;
LABEL_23:
        *a3 = v4;
LABEL_24:
        if (a4)
          *a4 = 0;
        return 0;
      }
      if (a2 != 1886283375)
        return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
      if (a3)
        *a3 = 16;
      if (!a4)
        return 0;
      v5 = 1;
      goto LABEL_32;
    }
    if (a3)
    {
      if (*((_QWORD *)this + 26))
      {
        v8 = *((_QWORD *)this + 27);
        v7 = *((_QWORD *)this + 28);
      }
      else
      {
        v8 = *((_QWORD *)this + 27);
        v7 = *((_QWORD *)this + 28);
        if (v7 == v8)
        {
          v6 = 0;
          goto LABEL_29;
        }
      }
      v6 = 24 * ((unint64_t)(v7 - v8) >> 4) + 16;
LABEL_29:
      *a3 = v6;
    }
  }
  else
  {
    if (a2 != 1633776244)
    {
      if (a2 == 1751217000)
      {
        if (!a3)
          goto LABEL_24;
        v4 = 16;
        goto LABEL_23;
      }
      if (a2 == 1768174447)
      {
        if (!a3)
          goto LABEL_24;
        v4 = 8;
        goto LABEL_23;
      }
      return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
    }
    if (a3)
    {
      v6 = 8;
      goto LABEL_29;
    }
  }
  if (a4)
  {
    v5 = *((_BYTE *)this + 100) & 2;
LABEL_32:
    *a4 = v5;
  }
  return 0;
}

uint64_t FLACAudioFile::GetProperty(FLACAudioFile *this, int a2, unsigned int *a3, char *a4)
{
  FLACAudioFile *v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;

  v6 = this;
  if (a2 > 1886283374)
  {
    if (a2 > 1935832163)
    {
      if (a2 != 1935832164)
      {
        if (a2 == 1986225779)
          return (*(uint64_t (**)(FLACAudioFile *, unsigned int *, char *))(*(_QWORD *)this + 744))(this, a3, a4);
        return AudioFileObject::GetProperty(this, a2, a3, a4);
      }
      if (*a3 != 4)
        return 561211770;
      v18 = 0;
      result = (*(uint64_t (**)(FLACAudioFile *, unsigned int *))(*(_QWORD *)this + 696))(this, &v18);
      if ((_DWORD)result)
        return result;
      v12 = v18;
LABEL_55:
      *(_DWORD *)a4 = v12;
      return result;
    }
    if (a2 == 1886283375)
    {
      if (*a3 >= 0x10)
      {
        result = 0;
        *(_QWORD *)a4 = *((_QWORD *)v6 + 23);
        v10 = *((_DWORD *)v6 + 49);
        *((_DWORD *)a4 + 2) = 0;
        *((_DWORD *)a4 + 3) = v10;
LABEL_40:
        v9 = 16;
        goto LABEL_41;
      }
      return 561211770;
    }
    if (a2 != 1886616165)
      return AudioFileObject::GetProperty(this, a2, a3, a4);
    if (*a3 != 4)
      return 561211770;
    if (*((_BYTE *)this + 180)
      || (result = (*(uint64_t (**)(FLACAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1), !(_DWORD)result))
    {
      this = v6;
      a2 = 1886616165;
      return AudioFileObject::GetProperty(this, a2, a3, a4);
    }
  }
  else
  {
    if (a2 <= 1768174446)
    {
      if (a2 != 1633776244)
      {
        if (a2 == 1751217000)
        {
          if (*a3 >= 0x10)
          {
            v7 = *((_QWORD *)this + 19);
          }
          else
          {
            v7 = *((_QWORD *)this + 19);
            if ((unint64_t)(*((_QWORD *)this + 20) - v7) < 0x32)
              return 561211770;
          }
          result = 0;
          *(_OWORD *)a4 = *(_OWORD *)(v7 + 34);
          goto LABEL_40;
        }
        return AudioFileObject::GetProperty(this, a2, a3, a4);
      }
      if (*a3 >= 8)
      {
        result = (*(uint64_t (**)(FLACAudioFile *, char *))(*(_QWORD *)this + 712))(this, a4);
        if ((_DWORD)result)
          return result;
        goto LABEL_24;
      }
      return 561211770;
    }
    if (a2 != 1768174447)
    {
      if (a2 != 1886090594)
        return AudioFileObject::GetProperty(this, a2, a3, a4);
      if (*a3 != 4)
        return 561211770;
      if (*((_BYTE *)this + 180))
      {
        a2 = 1886090594;
        return AudioFileObject::GetProperty(this, a2, a3, a4);
      }
      result = 0;
      v13 = *((_DWORD *)v6 + 13);
      v14 = *((_DWORD *)v6 + 36);
      v15 = v13 * *((_DWORD *)v6 + 11) * (v14 >> 3);
      if (v14 == 20)
        v15 = ((double)v15 * 1.5);
      if (!v15)
        v15 = 0x100000;
      if (v13)
        v16 = 8 * v13 + 18;
      else
        v16 = 82;
      v12 = v15 + v16;
      v17 = *((_DWORD *)v6 + 50);
      if (v17 >= 0x100000)
        v17 = 0x100000;
      if (v12 <= v17)
        v12 = v17;
      goto LABEL_55;
    }
    result = 1886681407;
    v11 = *((_QWORD *)v6 + 31);
    if (v11 != -1
      && !*((_QWORD *)v6 + 26)
      && *((_QWORD *)v6 + 28) == *((_QWORD *)v6 + 27)
      && (*((_BYTE *)v6 + 100) & 2) == 0)
    {
      if (*a3 >= 8)
      {
        result = 0;
        *(_QWORD *)a4 = v11;
LABEL_24:
        v9 = 8;
LABEL_41:
        *a3 = v9;
        return result;
      }
      return 561211770;
    }
  }
  return result;
}

uint64_t FLACAudioFile::SetProperty(FLACAudioFile *this, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  switch(a2)
  {
    case 1633776244:
      if (a3 >= 8)
        return (*(uint64_t (**)(FLACAudioFile *, uint64_t))(*(_QWORD *)this + 720))(this, *a4);
      return 561211770;
    case 1986225779:
      if (a3 < 0x10)
        return 561211770;
      return (*(uint64_t (**)(FLACAudioFile *, uint64_t, uint64_t *))(*(_QWORD *)this + 752))(this, a3, a4);
    case 1886283375:
      if (a3 >= 8)
      {
        v4 = 0;
        *((_DWORD *)this + 49) = *((_DWORD *)a4 + 3);
        return v4;
      }
      return 561211770;
    default:
      return AudioFileObject::SetProperty(this, a2, a3, a4);
  }
}

uint64_t FLACAudioFile::GetFormatListInfo(FLACAudioFile *this, UInt32 *outPropertyDataSize, unsigned int *a3)
{
  int v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  int v11;

  v5 = *((_DWORD *)this + 8);
  memset(v8, 0, sizeof(v8));
  DWORD2(v8[0]) = v5;
  v6 = *((_QWORD *)this + 19);
  v9 = 0;
  v10 = v6;
  v11 = *((_DWORD *)this + 40) - v6;
  if (AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, v8, outPropertyDataSize))
  {
    *outPropertyDataSize = 48;
    *a3 = 0;
  }
  return 0;
}

uint64_t FLACAudioFile::GetFormatList(FLACAudioFile *this, unsigned int *a2, AudioFormatListItem *a3)
{
  Float64 v6;
  AudioFormatID v7;
  AudioChannelLayoutTag v8;
  int WAVEChannelMask;
  uint64_t v10;
  unsigned int v12;
  _OWORD v13[2];
  _OWORD inSpecifier[2];
  uint64_t v15;
  uint64_t v16;
  int v17;

  v6 = *((double *)this + 3);
  v7 = *((_DWORD *)this + 8);
  v13[0] = *(_OWORD *)((char *)this + 36);
  *(_OWORD *)((char *)v13 + 12) = *((_OWORD *)this + 3);
  v8 = *((_DWORD *)this + 35);
  v12 = 0;
  WAVEChannelMask = VorbisComment::GetWAVEChannelMask(*((VorbisComment **)this + 27), *((VorbisComment **)this + 28), &v12);
  if (!WAVEChannelMask)
    v8 = AudioFormatProperty_LayoutTagForWAVEChannelMask(v12, (unsigned int *)inSpecifier);
  memset(inSpecifier, 0, sizeof(inSpecifier));
  DWORD2(inSpecifier[0]) = v7;
  v10 = *((_QWORD *)this + 19);
  v15 = 0;
  v16 = v10;
  v17 = *((_DWORD *)this + 40) - v10;
  if (AudioFormatGetProperty(0x666C7374u, 0x38u, inSpecifier, a2, a3))
  {
    a3->mASBD.mSampleRate = v6;
    a3->mASBD.mFormatID = v7;
    *(_OWORD *)&a3->mASBD.mFormatFlags = v13[0];
    *(_OWORD *)&a3->mASBD.mBytesPerFrame = *(_OWORD *)((char *)v13 + 12);
    a3->mChannelLayoutTag = v8;
    *a2 = 48;
  }
  else if (!WAVEChannelMask)
  {
    a3->mChannelLayoutTag = v8;
  }
  return 0;
}

uint64_t FLACAudioFile::UpdateSize(FLACAudioFile *this)
{
  return 0;
}

uint64_t FLACAudioFile::GetNumBytes(FLACAudioFile *this)
{
  int v2;
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  v2 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v4);
  result = v4;
  if (!v2)
    return v4 - *((_QWORD *)this + 9);
  return result;
}

uint64_t FLACAudioFile::GetNumPackets(FLACAudioFile *this)
{
  uint64_t v2;
  uint64_t result;
  int v4;

  if (*((_BYTE *)this + 180)
    || (v4 = (*(uint64_t (**)(FLACAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1), result = 0, !v4))
  {
    v2 = *((_QWORD *)this + 15);
    if (v2)
      return *(_QWORD *)(v2 + 24);
    else
      return 0;
  }
  return result;
}

uint64_t FLACAudioFile::GetBitRate(FLACAudioFile *this, unsigned int *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  int v7;
  uint64_t result;
  uint64_t v10;

  v4 = *((_QWORD *)this + 23) + *((int *)this + 49);
  if (v4 < 1)
    return AudioFileObject::GetBitRate(this, a2);
  v5 = *((double *)this + 3);
  if (v5 <= 0.0)
    return AudioFileObject::GetBitRate(this, a2);
  v6 = (double)v4 / v5;
  v10 = 0;
  v7 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v10);
  if (v6 <= 0.0 || v7 != 0)
    return AudioFileObject::GetBitRate(this, a2);
  result = 0;
  *a2 = ((double)(v10 - *((_QWORD *)this + 9)) * 8.0 / v6);
  return result;
}

uint64_t FLACAudioFile::GetMagicCookieDataSize(FLACAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;

  if (a3)
    *a3 = *((_BYTE *)this + 100) & 2;
  if (!a2)
    return 0;
  v3 = *((_QWORD *)this + 19);
  v4 = *((_QWORD *)this + 20);
  if (v3 == v4)
  {
    if ((*((_BYTE *)this + 100) & 2) == 0)
      return 2003334207;
    v5 = 0;
  }
  else
  {
    v5 = v4 - v3;
  }
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t FLACAudioFile::GetMagicCookieData(FLACAudioFile *this, unsigned int *a2, void *__dst)
{
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;

  result = 2003334207;
  if (__dst)
  {
    if (a2)
    {
      v6 = (_BYTE *)*((_QWORD *)this + 19);
      v7 = (_BYTE *)*((_QWORD *)this + 20);
      if (v6 != v7)
      {
        v8 = v7 - v6;
        result = 561211770;
        if (v8 <= *a2)
        {
          memcpy(__dst, v6, v8);
          result = 0;
          *a2 = *((_DWORD *)this + 40) - *((_DWORD *)this + 38);
        }
      }
    }
    else
    {
      return 561211770;
    }
  }
  return result;
}

uint64_t FLACAudioFile::SetMagicCookieData(FLACAudioFile *this, size_t __len, char *__src)
{
  UInt32 v4;
  char *v6;
  _QWORD *v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  uint64_t result;
  char *v14;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  UInt32 outPropertyDataSize;

  v4 = __len;
  if (__len < 0x32 || *((_DWORD *)__src + 1) == 1632396900)
  {
    v7 = (_QWORD *)((char *)this + 152);
    v6 = (char *)*((_QWORD *)this + 19);
    v8 = __len;
    v9 = *((_QWORD *)this + 21);
    if (v9 - (unint64_t)v6 >= __len)
    {
      v15 = (_BYTE *)*((_QWORD *)this + 20);
      v16 = v15 - v6;
      if (v15 - v6 >= (unint64_t)__len)
      {
        if ((_DWORD)__len)
          memmove(*((void **)this + 19), __src, __len);
        result = 0;
        v14 = &v6[v4];
      }
      else
      {
        v17 = &__src[__len];
        v18 = &__src[v16];
        if (v15 != v6)
        {
          memmove(*((void **)this + 19), __src, v15 - v6);
          v6 = (char *)*((_QWORD *)this + 20);
        }
        if (v16 != v8)
          memmove(v6, v18, v17 - v18);
        result = 0;
        v14 = &v6[v17 - v18];
      }
    }
    else
    {
      if (v6)
      {
        *((_QWORD *)this + 20) = v6;
        operator delete(v6);
        v9 = 0;
        *v7 = 0;
        *((_QWORD *)this + 20) = 0;
        *((_QWORD *)this + 21) = 0;
      }
      v10 = 2 * v9;
      if (2 * v9 <= v4)
        v10 = v4;
      if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      std::vector<unsigned char>::__vallocate[abi:ne180100]((_QWORD *)this + 19, v11);
      v12 = (char *)*((_QWORD *)this + 20);
      memmove(v12, __src, v8);
      result = 0;
      v14 = &v12[v8];
    }
    goto LABEL_28;
  }
  outPropertyDataSize = 50;
  result = AudioFormatGetPropertyInfo(0x6D636466u, __len, __src, &outPropertyDataSize);
  if ((_DWORD)result)
    goto LABEL_27;
  v19 = (char *)*((_QWORD *)this + 19);
  v20 = *((_QWORD *)this + 20) - (_QWORD)v19;
  if (outPropertyDataSize <= v20)
  {
    if (outPropertyDataSize < v20)
      *((_QWORD *)this + 20) = &v19[outPropertyDataSize];
  }
  else
  {
    std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 152), outPropertyDataSize - v20);
    v19 = (char *)*((_QWORD *)this + 19);
  }
  result = AudioFormatGetProperty(0x6D636466u, v4, __src, &outPropertyDataSize, v19);
  if ((_DWORD)result)
  {
LABEL_27:
    v14 = (char *)*((_QWORD *)this + 19);
LABEL_28:
    *((_QWORD *)this + 20) = v14;
  }
  return result;
}

uint64_t FLACAudioFile::GetChannelLayoutSize(FLACAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t inSpecifier;

  inSpecifier = 0;
  if (a3)
    *a3 = *((_BYTE *)this + 100) & 2;
  if (!a2)
    return 0;
  if (VorbisComment::GetWAVEChannelMask(*((VorbisComment **)this + 27), *((VorbisComment **)this + 28), &inSpecifier))
  {
    result = 0;
    *a2 = 32;
  }
  else
  {
    HIDWORD(inSpecifier) = *((_DWORD *)this + 13);
    return AudioFormatGetPropertyInfo(0x636C636Du, 8u, &inSpecifier, a2);
  }
  return result;
}

uint64_t FLACAudioFile::GetChannelLayout(FLACAudioFile *this, unsigned int *a2, AudioChannelLayout *a3)
{
  uint64_t v3;
  UInt32 v7;
  BOOL v8;
  UInt32 *p_ioPropertyDataSize;
  size_t v10;
  uint64_t PropertyInfo;
  uint64_t v12;
  uint64_t v14;
  UInt32 ioPropertyDataSize;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = 561211770;
  ioPropertyDataSize = 12;
  v14 = 0;
  if (!a2)
    return v3;
  if (VorbisComment::GetWAVEChannelMask(*((VorbisComment **)this + 27), *((VorbisComment **)this + 28), &v14))
  {
    v7 = 12;
    goto LABEL_4;
  }
  HIDWORD(v14) = *((_DWORD *)this + 13);
  PropertyInfo = AudioFormatGetPropertyInfo(0x636C636Du, 8u, &v14, &ioPropertyDataSize);
  if (!(_DWORD)PropertyInfo)
  {
    v7 = ioPropertyDataSize;
LABEL_4:
    if (*a2 >= v7)
    {
      v8 = v7 >= *a2;
      p_ioPropertyDataSize = &ioPropertyDataSize;
      if (v8)
        p_ioPropertyDataSize = a2;
      v10 = *p_ioPropertyDataSize;
      *a2 = v10;
      if (a3)
      {
        if ((_DWORD)v14)
        {
          return AudioFormatGetProperty(0x636C636Du, 8u, &v14, &ioPropertyDataSize, a3);
        }
        else
        {
          bzero(a3, v10);
          v3 = 0;
          a3->mChannelLayoutTag = *((_DWORD *)this + 35);
        }
      }
      else
      {
        return 0;
      }
    }
    return v3;
  }
  v12 = PropertyInfo;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "FLACAudioFile.cpp";
    v18 = 1024;
    v19 = 1245;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  FLACAudioFile::GetChannelLayout: can't get AudioChannelLayout size for channel mask", buf, 0x12u);
  }
  return v12;
}

uint64_t FLACAudioFile::SetChannelLayout(FLACAudioFile *this, UInt32 a2, const AudioChannelLayout *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint8x8_t v9;
  VorbisComment *v10;
  int v11;
  unsigned int v12;
  UInt32 ioPropertyDataSize;
  int outPropertyData;
  uint64_t v15;
  uint64_t v16;

  if (a2 < 0xC)
    return 561211770;
  v15 = v3;
  v16 = v4;
  ioPropertyDataSize = 4;
  outPropertyData = 0;
  result = AudioFormatGetProperty(0x6E63686Du, a2, a3, &ioPropertyDataSize, &outPropertyData);
  if (!(_DWORD)result)
  {
    if (outPropertyData != *((_DWORD *)this + 13))
      return 4294967246;
    v12 = 0;
    ioPropertyDataSize = 4;
    result = AudioFormatGetProperty(0x636D636Cu, a2, a3, &ioPropertyDataSize, &v12);
    if ((_DWORD)result)
      return result;
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.i32[0] == *((_DWORD *)this + 13))
    {
      v11 = 0;
      VorbisComment::GetWAVEChannelMask(*((VorbisComment **)this + 27), *((VorbisComment **)this + 28), &v11);
      if (v11 != v12)
      {
        v10 = (FLACAudioFile *)((char *)this + 208);
        if (a3->mChannelLayoutTag == *((_DWORD *)this + 35))
          VorbisComment::RemoveUserCommentsWithFieldName(v10, CFSTR("WAVEFORMATEXTENSIBLE_CHANNEL_MASK"));
        else
          VorbisComment::SetWAVEChannelMask((const void **)v10);
      }
      return 0;
    }
    else
    {
      return 4294967246;
    }
  }
  return result;
}

uint64_t FLACAudioFile::GetInfoDictionary(const __CFString **this, CACFDictionary *a2)
{
  AudioFileObject *v4;
  double v6;

  VorbisComment::FillInfoDictionary(this + 26, a2);
  v6 = 0.0;
  v4 = (AudioFileObject *)((uint64_t (*)(const __CFString **, double *))(*this)[17].isa)(this, &v6);
  if (!(_DWORD)v4)
    AudioFileObject::AddDurationToInfoDictionary(v4, a2, &v6);
  return 0;
}

uint64_t FLACAudioFile::GetLoudnessInfo(FLACAudioFile *this, CACFDictionary *a2)
{
  return VorbisComment::FillLoudnessInfoDictionary((FLACAudioFile *)((char *)this + 208), a2);
}

uint64_t FLACAudioFile::SetLoudnessInfo(const void **this, CFTypeRef *a2)
{
  CFTypeRef v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  CFIndex v7;
  CFStringRef v8;
  uint64_t *v9;
  std::runtime_error *exception;
  CFStringRef v12;
  CFTypeRef cf;
  void *__p[2];
  unsigned __int8 v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  cf = v3;
  v16[0] = &off_1E28FFDE0;
  v17 = v16;
  applesauce::CF::details::to_description_json_style_helper((uint64_t)__p, &cf, 0, (uint64_t)v16);
  v4 = v17;
  if (v17 == v16)
  {
    v5 = 4;
    v4 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  if (v3)
    CFRelease(v3);
  if (!this[26] && this[28] == this[27])
    VorbisComment::SetVendorString(this + 26, CFSTR("Apple"));
  VorbisComment::RemoveUserCommentsWithFieldName((VorbisComment *)(this + 26), CFSTR("LOUDNESS"));
  CFRetain(CFSTR("LOUDNESS"));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, CFSTR("LOUDNESS"));
  if ((v15 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v7 = v15;
  else
    v7 = (CFIndex)__p[1];
  v8 = CFStringCreateWithBytes(0, (const UInt8 *)v6, v7, 0x8000100u, 0);
  v12 = v8;
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  VorbisComment::AddUserComment(this + 26, cf, (const void **)&v12);
  CFRelease(v8);
  if (cf)
    CFRelease(cf);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  v9 = (uint64_t *)this[15];
  if (v9 && v9[3] > 0)
    return 1869640813;
  if ((*((_BYTE *)this + 100) & 2) != 0)
    return 0;
  return 1886547263;
}

void sub_18EFF4F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (cf)
    CFRelease(cf);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t FLACAudioFile::GetEstimatedDuration(FLACAudioFile *this, double *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;

  v3 = *((_QWORD *)this + 23);
  if (v3 < 1)
  {
    v5 = *((unsigned int *)this + 11);
    if ((_DWORD)v5)
    {
      v6 = *((double *)this + 3);
      v4 = (double)((*(uint64_t (**)(FLACAudioFile *))(*(_QWORD *)this + 240))(this) * v5) / v6;
    }
    else
    {
      v4 = 0.0;
    }
  }
  else
  {
    v4 = (double)v3 / *((double *)this + 3);
  }
  *a2 = v4;
  return 0;
}

BOOL FLACAudioFile::IsDataFormatSupported(FLACAudioFile *this, const AudioStreamBasicDescription *a2)
{
  return a2->mFormatID == 1718378851;
}

void FLACAudioFile::ScanForPackets(FLACAudioFile *this, uint64_t a2, DataSource *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  SInt64 v14;
  size_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  size_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *__p;
  void *v36;
  unsigned int v37;
  int64_t v38;
  unsigned int v39;
  AudioStreamPacketDescription v40;
  int v41;
  unsigned int v42;
  _BYTE buf[18];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40.mStartOffset = 0;
  *(_QWORD *)&v40.mVariableFramesInPacket = 0;
  v38 = 0;
  v37 = 0;
  v5 = *((_QWORD *)this + 15);
  if (!v5)
  {
    v5 = operator new();
    v6 = *((_DWORD *)this + 11);
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_DWORD *)(v5 + 32) = v6;
    *((_QWORD *)this + 15) = v5;
  }
  v7 = *(_QWORD *)(v5 + 24);
  if (a2 == -1 || v7 < a2)
  {
    v39 = 0;
    if ((*(unsigned int (**)(_QWORD, int64_t *, DataSource *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v38, a3))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1878;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetSize failed", buf, 0x12u);
      }
    }
    else
    {
      if (v7)
      {
        v8 = *((_QWORD *)this + 9);
        v9 = v7 - 1;
        CompressedPacketTable::operator[]((uint64_t)buf, (uint64_t *)v5, v7 - 1);
        v10 = *(_QWORD *)buf;
        CompressedPacketTable::operator[]((uint64_t)&__p, (uint64_t *)v5, v9);
        v11 = v10 + v8 + HIDWORD(v36);
      }
      else
      {
        (*(void (**)(FLACAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, 0);
        v11 = *((_QWORD *)this + 9);
      }
      if (a2 == -1)
      {
        v13 = -1;
      }
      else
      {
        v12 = *((_QWORD *)this + 15);
        if (v12)
          v12 = *(_QWORD *)(v12 + 24);
        v13 = a2 - v12;
      }
      std::vector<unsigned char>::vector(&__p, 0x10uLL);
      while (1)
      {
        v14 = v11 - *((_QWORD *)this + 9);
        v40.mStartOffset = v14;
        if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, void *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v11, 16, __p, &v39)|| v39 < 7)
        {
          break;
        }
        if ((*((_BYTE *)__p + 1) & 0xFC | (*(unsigned __int8 *)__p << 8)) != 0xFFF8)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1919;
            _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  FLAC - Syncword not found", buf, 0x12u);
          }
          break;
        }
        FLACAudioFile::GetHeaderSize(this, v11, &v37, 0);
        LODWORD(v16) = 0;
        v17 = v37;
        v18 = v11 + v37;
        v41 = 0;
        v19 = v38 - v18;
        if (v38 >= v18)
        {
          if (v19 > 5)
          {
            v20 = *((_DWORD *)this + 13);
            v21 = *((_DWORD *)this + 36);
            v22 = v20 * *((_DWORD *)this + 11) * (v21 >> 3);
            if (v21 == 20)
              v22 = ((double)v22 * 1.5);
            if (!v22)
              v22 = 0x100000;
            if (v20)
              v23 = 8 * v20 + 18;
            else
              v23 = 82;
            LODWORD(v24) = v22 + v23;
            v25 = *((_DWORD *)this + 50);
            if (v24 <= v25)
              v24 = v25;
            else
              v24 = v24;
            if (v19 >= v24)
              v16 = v24;
            else
              v16 = v19;
            std::vector<unsigned char>::vector(buf, v16);
            if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t, size_t, _QWORD, int *))(**((_QWORD **)this + 13)
                                                                                                + 48))(*((_QWORD *)this + 13), 0, v18, v16, *(_QWORD *)buf, &v41))
            {
              v26 = 0;
            }
            else
            {
              v26 = v41 == (_DWORD)v16;
            }
            if (v26)
            {
              if (v16 >= 2)
              {
                v27 = 0;
                v28 = **(_BYTE **)buf;
                while (1)
                {
                  v29 = *(unsigned __int8 *)(*(_QWORD *)buf + v27 + 1);
                  if (v28 == 255 && (v29 & 0xFE) == 0xF8)
                  {
                    v42 = 0;
                    FLACAudioFile::GetHeaderSize(this, v18 + v27, &v42, 1);
                    if (v42)
                      break;
                  }
                  if ((int)v27 + 1 < v16)
                  {
                    v30 = v27 + 2;
                    ++v27;
                    v28 = v29;
                    if (v30 < v16)
                      continue;
                  }
                  goto LABEL_53;
                }
                LODWORD(v16) = v27;
              }
            }
            else
            {
              LODWORD(v16) = 0;
            }
LABEL_53:
            if (*(_QWORD *)buf)
            {
              *(_QWORD *)&buf[8] = *(_QWORD *)buf;
              operator delete(*(void **)buf);
            }
          }
          else
          {
            LODWORD(v16) = v38 - v18;
          }
        }
        v31 = v16 + v17;
        v40.mDataByteSize = v16 + v17;
        if (v31 > (*(unsigned int (**)(FLACAudioFile *))(*(_QWORD *)this + 632))(this))
          (*(void (**)(FLACAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, v16 + v17);
        v32 = v38;
        if (v11 + v31 > v38)
        {
          *((_BYTE *)this + 180) = 1;
          break;
        }
        v33 = v14 + *((_QWORD *)this + 9);
        v34 = v33 + v31;
        if (v33 + v31 >= v38)
        {
          *((_BYTE *)this + 180) = 1;
        }
        else if (v33 > v11)
        {
          v40.mDataByteSize = v34 - v11;
        }
        AudioFileObject::AppendPacket(this, &v40);
        if (v13 == -1)
          v13 = -1;
        else
          --v13;
        if (v13)
        {
          v11 = v34;
          if (v34 < v32)
            continue;
        }
        break;
      }
      if (__p)
      {
        v36 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_18EFF55F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t FLACAudioFile::GetSourceBitDepth(FLACAudioFile *this, int *a2)
{
  *a2 = *((_DWORD *)this + 36);
  return 0;
}

uint64_t FLACAudioFile::GetAlbumArtwork(FLACAudioFile *this, const __CFData **a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 30);
  if (v3)
  {
    CFRetain(v3);
    *a2 = (const __CFData *)*((_QWORD *)this + 30);
  }
  return 0;
}

uint64_t FLACAudioFile::SetAlbumArtwork(FLACAudioFile *this, CFTypeRef cf)
{
  uint64_t v4;
  uint64_t result;
  const void *v6;

  v4 = *((_QWORD *)this + 15);
  if (v4 && *(uint64_t *)(v4 + 24) > 0)
    return 1869640813;
  if ((*((_BYTE *)this + 100) & 2) == 0)
    return 1886547263;
  if (cf)
    CFRetain(cf);
  v6 = (const void *)*((_QWORD *)this + 30);
  if (v6)
    CFRelease(v6);
  result = 0;
  *((_QWORD *)this + 30) = cf;
  return result;
}

uint64_t FLACAudioFile::ParseAudioFile(FLACAudioFile *this)
{
  uint64_t PacketHeader;
  NSObject *v3;
  const char *v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int i;
  BOOL v30;
  unsigned int v31;
  AudioStreamBasicDescription *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unsigned int v39;
  void **v40[3];
  uint64_t v41;
  unsigned int v42;
  unsigned __int8 v43[10];
  _BYTE buf[24];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  v35 = 0;
  v33 = 0;
  PacketHeader = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, unsigned __int8 *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, 0, 10, v43, &v39);
  if (!(_DWORD)PacketHeader)
  {
    v6 = 0;
    while (v39 >= 0xA)
    {
      v7 = ID3Size(v39, v43, &v33);
      if (!v7)
        break;
      if (*((_QWORD *)this + 31) == -1)
        *((_QWORD *)this + 31) = 0;
      v6 += v7;
      PacketHeader = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned __int8 *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v6, 10, v43, &v39);
      if ((_DWORD)PacketHeader)
        goto LABEL_2;
    }
    v38 = 0;
    v36 = 0u;
    v37 = 0u;
    PacketHeader = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v6, 4, &v35, &v39);
    if ((_DWORD)PacketHeader)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return PacketHeader;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 409;
      v3 = MEMORY[0x1E0C81028];
      v4 = "%25s:%-5d  FLAC FSRead Failed 1";
      goto LABEL_4;
    }
    PacketHeader = 1685348671;
    if (v39 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return PacketHeader;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 410;
      v3 = MEMORY[0x1E0C81028];
      v4 = "%25s:%-5d  Unexpected eof while reading FLAC stream marker";
      goto LABEL_4;
    }
    v8 = v35;
    v35 = bswap32(v35);
    if (v8 != 1130450022)
      return PacketHeader;
    v9 = v6 + 4;
    v10 = (char *)this + 152;
    while (1)
    {
      PacketHeader = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v9, 4, &v35, &v39);
      if ((_DWORD)PacketHeader)
        return PacketHeader;
      if (v39 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 427;
          _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Unexpected eof while reading FLAC metadata block header", buf, 0x12u);
        }
        return 1685348671;
      }
      v11 = bswap32(v35);
      v12 = HIBYTE(v11) & 0x7F;
      v13 = v11 & 0xFFFFFF;
      v34 = v11 & 0xFFFFFF;
      v35 = v11;
      if (v12 > 5)
      {
        if (v12 != 6)
        {
          if (v12 == 127)
            return 1685348671;
          goto LABEL_62;
        }
        if (!*((_QWORD *)this + 30))
        {
          PacketHeader = FLACAudioFile::ParsePicture(this, v9, &v34);
LABEL_60:
          if ((_DWORD)PacketHeader)
            return PacketHeader;
          v13 = v34;
        }
      }
      else
      {
        if (!v12)
        {
          if (v13 < 0x22)
            return 1718449215;
          v15 = *((_QWORD *)this + 19);
          v16 = *((_QWORD *)this + 20) - v15;
          if (v16 > 0x31)
          {
            if (v16 != 50)
              *((_QWORD *)this + 20) = v15 + 50;
          }
          else
          {
            std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 152), 50 - v16);
            v15 = *(_QWORD *)v10;
          }
          v42 = 0;
          *(_OWORD *)v15 = xmmword_18F117070;
          v17 = v15 + 16;
          PacketHeader = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v9 + 4, 34, v15 + 16, &v42);
          if (!(_DWORD)PacketHeader)
          {
            if (v42 >= 0x22)
            {
              *(_BYTE *)(*(_QWORD *)v10 + 12) = 0x80;
              v40[0] = (void **)(v15 + 16);
              v40[1] = (void **)(v15 + 16);
              v40[2] = (void **)(v15 + 50);
              v41 = 0;
              if ((v17 & 3) != 0)
              {
                v18 = 0;
                v19 = v15 + 17;
                v20 = -8;
                do
                {
                  HIDWORD(v41) = v20 + 16;
                  if (v17 >= v15 + 50)
                    v21 = 255;
                  else
                    v21 = *(unsigned __int8 *)v17;
                  v18 = v21 | (v18 << 8);
                  LODWORD(v41) = v18;
                  v40[0] = (void **)++v17;
                  v20 += 8;
                  v30 = (v19++ & 3) == 0;
                }
                while (!v30);
                LODWORD(v41) = v18 << (24 - v20);
              }
              FLACUnpackStreamInfo((uint64_t)v40, (uint64_t)buf);
              if (*(_DWORD *)buf == *(_DWORD *)&buf[4])
                v23 = *(unsigned int *)buf;
              else
                v23 = 0;
              *((_DWORD *)this + 50) = *(_DWORD *)&buf[12];
              DWORD2(v36) = 1718378851;
              LODWORD(v37) = 0;
              DWORD1(v37) = v23;
              LODWORD(v22) = *(_DWORD *)&buf[16];
              *(double *)&v36 = (double)v22;
              v24 = v45;
              HIDWORD(v37) = *(_DWORD *)&buf[20];
              *((_DWORD *)this + 35) = kFLACChannelConfigToLayoutTag[*(_DWORD *)&buf[20] - 1];
              *((_DWORD *)this + 36) = v24;
              HIDWORD(v26) = v24;
              LODWORD(v26) = v24 - 16;
              v25 = v26 >> 2;
              if (v25 <= 4 && ((0x17u >> v25) & 1) != 0)
                HIDWORD(v36) = dword_18F10DC00[v25];
              v38 = 0;
              DWORD2(v37) = 0;
              v27 = v46;
              *((_QWORD *)this + 23) = v46;
              if ((_DWORD)v23)
              {
                v28 = v27 / v23;
                if (v27 > v23 * (v27 / v23))
                  LODWORD(v28) = v28 + 1;
                *((_DWORD *)this + 49) = v28 * v23 - v27;
              }
              (*(void (**)(FLACAudioFile *, __int128 *))(*(_QWORD *)this + 176))(this, &v36);
              PacketHeader = 0;
            }
            else
            {
              PacketHeader = 4294967257;
            }
          }
          goto LABEL_60;
        }
        if (v12 == 4)
        {
          VorbisComment::VorbisComment((VorbisComment *)buf, *((DataSource **)this + 13), v9 + 4, v11 & 0xFFFFFF);
          v14 = *((_QWORD *)this + 26);
          *((_QWORD *)this + 26) = *(_QWORD *)buf;
          *(_QWORD *)buf = v14;
          std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__vdeallocate((void **)this + 27);
          *(_OWORD *)((char *)this + 216) = *(_OWORD *)&buf[8];
          *((_QWORD *)this + 29) = v45;
          *(_QWORD *)&buf[16] = 0;
          v45 = 0;
          *(_QWORD *)&buf[8] = 0;
          v40[0] = (void **)&buf[8];
          std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](v40);
          if (*(_QWORD *)buf)
            CFRelease(*(CFTypeRef *)buf);
        }
      }
LABEL_62:
      v9 += v13 + 4;
      if ((v11 & 0x80000000) != 0)
      {
        v35 = 0;
        for (i = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v9, 4, &v35, &v39);
              ;
              i = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v9, 4, &v35, &v39))
        {
          v30 = i || v39 == 0;
          if (v30)
            break;
          v31 = bswap32(v35);
          v35 = HIWORD(v31);
          if ((v31 & 0xFFFC0000) == 0xFFF80000)
            break;
          ++v9;
          v35 = 0;
        }
        PacketHeader = 1685348671;
        if ((v35 & 0xFFFC) != 0xFFF8)
          return PacketHeader;
        *((_QWORD *)this + 9) = v9;
        PacketHeader = (*(uint64_t (**)(FLACAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, 1, 0, 1);
        if ((_DWORD)PacketHeader)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return PacketHeader;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 487;
          v3 = MEMORY[0x1E0C81028];
          v4 = "%25s:%-5d  FLACAudioFile::ParseAudioFile : ScanForPackets failed";
          goto LABEL_4;
        }
        PacketHeader = FLACAudioFile::ParseFirstPacketHeader(this, (uint64_t)&v36, v32);
        if ((_DWORD)PacketHeader && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 492;
          v3 = MEMORY[0x1E0C81028];
          v4 = "%25s:%-5d  FLAC FSRead Failed 2";
          goto LABEL_4;
        }
        return PacketHeader;
      }
    }
  }
LABEL_2:
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "FLACAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 385;
    v3 = MEMORY[0x1E0C81028];
    v4 = "%25s:%-5d  FLAC FSRead Failed (ID3)";
LABEL_4:
    _os_log_impl(&dword_18EE07000, v3, OS_LOG_TYPE_ERROR, v4, buf, 0x12u);
  }
  return PacketHeader;
}

void sub_18EFF5E88(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t FLACAudioFile::CreatePacketTable(FLACAudioFile *this)
{
  return (*(uint64_t (**)(FLACAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1);
}

uint64_t FLACAudioFile::GetVorbisCommentFieldList(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  return VorbisComment::GetVorbisCommentFieldList((const void **)(a1 + 208), a2, a3);
}

uint64_t FLACAudioFile::SetVorbisCommentFieldList(uint64_t a1, unsigned int a2, CFDictionaryRef *a3)
{
  uint64_t v5;
  _QWORD *v7;
  unint64_t v8;
  const __CFString *Value;
  const __CFAllocator *v10;
  const __CFString **v11;
  const __CFString *v12;
  const __CFString *v13;
  CFStringRef Copy;
  CFStringRef v15;
  CFTypeRef cf;
  CFTypeRef v17;

  v5 = *(_QWORD *)(a1 + 120);
  if (v5 && *(uint64_t *)(v5 + 24) > 0)
    return 1869640813;
  if ((*(_BYTE *)(a1 + 100) & 2) == 0)
    return 1886547263;
  v7 = (_QWORD *)(a1 + 208);
  if (a2 >= 0x10)
    v8 = (a2 - 16) / 0x18uLL;
  else
    v8 = 0;
  VorbisComment::Clear((VorbisComment *)(a1 + 208));
  if (*a3)
  {
    Value = (const __CFString *)CFDictionaryGetValue(*a3, CFSTR("VENDOR"));
    VorbisComment::SetVendorString((const void **)(a1 + 208), Value);
  }
  std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::reserve((_QWORD *)(a1 + 216), v8);
  if (v8)
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = (const __CFString **)(a3 + 3);
    do
    {
      v12 = *(v11 - 1);
      if (v12)
      {
        v13 = *v11;
        if (*v11)
        {
          Copy = CFStringCreateCopy(v10, v12);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v17, Copy);
          v15 = CFStringCreateCopy(v10, v13);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v15);
          VorbisComment::AddUserComment(v7, v17, &cf);
          if (cf)
            CFRelease(cf);
          if (v17)
            CFRelease(v17);
        }
      }
      v11 += 3;
      --v8;
    }
    while (v8);
  }
  return 0;
}

void sub_18EFF6000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10)
{
  if (cf)
    CFRelease(cf);
  if (a10)
    CFRelease(a10);
  _Unwind_Resume(exception_object);
}

uint64_t FLACAudioFile::ParsePicture(FLACAudioFile *this, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  std::vector<char>::size_type v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  UInt8 *begin;
  NSObject *v21;
  const char *v22;
  unsigned int v23;
  const void *v24;
  std::vector<char> v26;
  unsigned int length[3];
  uint64_t v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  memset(length, 0, sizeof(length));
  memset(&v26, 0, sizeof(v26));
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *, char *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, a2 + 4, 4, &v28, (char *)&v28 + 4);
  if (!(_DWORD)v6)
  {
    if (*a3 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294967246;
      *(_DWORD *)buf = 136315394;
      v30 = "FLACAudioFile.cpp";
      v31 = 1024;
      v32 = 706;
      v9 = MEMORY[0x1E0C81028];
LABEL_8:
      _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d  FLACAudioFile::ParsePicture: exceed total metadata block size", buf, 0x12u);
      return 4294967246;
    }
    LODWORD(v28) = bswap32(v28);
    v6 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, char *))(**((_QWORD **)this + 13)
                                                                                             + 48))(*((_QWORD *)this + 13), 0, a2 + 8, 4, &length[2], (char *)&v28 + 4);
    if ((_DWORD)v6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v6;
      *(_DWORD *)buf = 136315394;
      v30 = "FLACAudioFile.cpp";
      v31 = 1024;
      v32 = 710;
      v7 = MEMORY[0x1E0C81028];
      v8 = "%25s:%-5d  FLACAudioFile::ParsePicture: Read MIME type string length failed";
      goto LABEL_4;
    }
    v10 = bswap32(length[2]);
    length[2] = v10;
    if (v10 + 8 > (unint64_t)*a3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294967246;
      *(_DWORD *)buf = 136315394;
      v30 = "FLACAudioFile.cpp";
      v31 = 1024;
      v32 = 724;
      v9 = MEMORY[0x1E0C81028];
      goto LABEL_8;
    }
    v11 = a2 + v10 + 12;
    v6 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, char *))(**((_QWORD **)this + 13)
                                                                                             + 48))(*((_QWORD *)this + 13), 0, v11, 4, &length[1], (char *)&v28 + 4);
    if ((_DWORD)v6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v6;
      *(_DWORD *)buf = 136315394;
      v30 = "FLACAudioFile.cpp";
      v31 = 1024;
      v32 = 726;
      v7 = MEMORY[0x1E0C81028];
      v8 = "%25s:%-5d  FLACAudioFile::ParsePicture: Read description string length failed";
      goto LABEL_4;
    }
    v12 = bswap32(length[1]);
    length[1] = v12;
    v13 = v10 + v12 + 12;
    if (v13 > *a3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294967246;
      *(_DWORD *)buf = 136315394;
      v30 = "FLACAudioFile.cpp";
      v31 = 1024;
      v32 = 740;
      v9 = MEMORY[0x1E0C81028];
      goto LABEL_8;
    }
    v14 = v11 + v12;
    v6 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, char *))(**((_QWORD **)this + 13)
                                                                                             + 48))(*((_QWORD *)this + 13), 0, v14 + 20, 4, length, (char *)&v28 + 4);
    if ((_DWORD)v6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v6;
      *(_DWORD *)buf = 136315394;
      v30 = "FLACAudioFile.cpp";
      v31 = 1024;
      v32 = 743;
      v7 = MEMORY[0x1E0C81028];
      v8 = "%25s:%-5d  FLACAudioFile::ParsePicture: Read picture data length failed";
      goto LABEL_4;
    }
    v15 = length[0];
    v16 = bswap32(length[0]);
    length[0] = v16;
    v17 = v13 + 20;
    v18 = *a3;
    v19 = v13 + 20 + v16;
    if (4294967275u - v13 >= v16 && v19 > v18 && (v19 & 0xFFFFFF) == v18)
    {
      LODWORD(v18) = v16 + v17;
      *a3 = v16 + v17;
    }
    if (v19 > v18)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294967246;
      *(_DWORD *)buf = 136315394;
      v30 = "FLACAudioFile.cpp";
      v31 = 1024;
      v32 = 758;
      v9 = MEMORY[0x1E0C81028];
      goto LABEL_8;
    }
    v6 = 0;
    if (!v15 || (_DWORD)v28 != 3)
      return v6;
    std::vector<unsigned char>::resize(&v26, v16);
    begin = (UInt8 *)v26.__begin_;
    v6 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, std::vector<char>::pointer, char *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v14 + 24, length[0], v26.__begin_, (char *)&v28 + 4);
    if ((_DWORD)v6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_44;
      *(_DWORD *)buf = 136315394;
      v30 = "FLACAudioFile.cpp";
      v31 = 1024;
      v32 = 762;
      v21 = MEMORY[0x1E0C81028];
      v22 = "%25s:%-5d  FLACAudioFile::ParsePicture: Read picture data failed";
    }
    else
    {
      v23 = length[0];
      if (HIDWORD(v28) >= length[0])
      {
        v24 = (const void *)*((_QWORD *)this + 30);
        if (v24)
        {
          CFRelease(v24);
          v23 = length[0];
        }
        v6 = 0;
        *((_QWORD *)this + 30) = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], begin, v23);
        goto LABEL_44;
      }
      v6 = 1685348671;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_44:
        if (begin)
        {
          v26.__end_ = (std::vector<char>::pointer)begin;
          operator delete(begin);
        }
        return v6;
      }
      *(_DWORD *)buf = 136315394;
      v30 = "FLACAudioFile.cpp";
      v31 = 1024;
      v32 = 763;
      v21 = MEMORY[0x1E0C81028];
      v22 = "%25s:%-5d  Unexpected eof while reading FLAC picture block";
    }
    _os_log_impl(&dword_18EE07000, v21, OS_LOG_TYPE_ERROR, v22, buf, 0x12u);
    goto LABEL_44;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v30 = "FLACAudioFile.cpp";
    v31 = 1024;
    v32 = 703;
    v7 = MEMORY[0x1E0C81028];
    v8 = "%25s:%-5d  FLACAudioFile::ParsePicture: Read picture type failed";
LABEL_4:
    _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_ERROR, v8, buf, 0x12u);
  }
  return v6;
}

void sub_18EFF6658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t FLACAudioFile::ParseFirstPacketHeader(FLACAudioFile *this, uint64_t a2, AudioStreamBasicDescription *a3)
{
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  BOOL v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  double v23;
  unsigned int v24;
  void *__p[3];
  int v27;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v5 = *((_QWORD *)this + 15);
  if (!v5)
  {
    v5 = operator new();
    v6 = *((_DWORD *)this + 11);
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_DWORD *)(v5 + 32) = v6;
    *((_QWORD *)this + 15) = v5;
  }
  v27 = 0;
  CompressedPacketTable::operator[]((uint64_t)__p, (uint64_t *)v5, 0);
  v7 = (char *)__p[0];
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 1718378851;
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  std::vector<unsigned char>::vector(__p, 0x10uLL);
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, void *, int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, &v7[*((_QWORD *)this + 9)], 16, __p[0], &v27);
  v9 = (unsigned __int8 *)__p[0];
  if ((_DWORD)v8)
    v10 = 0;
  else
    v10 = v27 == 16;
  if (!v10)
  {
    if (!__p[0])
      return v8;
    goto LABEL_47;
  }
  v11 = *((_BYTE *)__p[0] + 1);
  if ((v11 & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    v8 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, char *, int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, &v7[*((_QWORD *)this + 9)], 4, (char *)this + 176, &v27);
    v9 = (unsigned __int8 *)__p[0];
  }
  v12 = v9[2];
  v13 = v12 >> 4;
  *(_DWORD *)(a2 + 20) = kFLACBlockSizes[v12 >> 4];
  v14 = v9[2];
  v15 = v14 & 0xF;
  *(double *)a2 = kFLACSampleRates[v14 & 0xF];
  v16 = *(_DWORD *)((char *)kFLACChannelConfigToLayoutTag + (((unint64_t)v9[3] >> 2) & 0x3C));
  *((_DWORD *)this + 35) = v16;
  *(_DWORD *)(a2 + 28) = (unsigned __int16)v16;
  HIDWORD(v18) = kFLACBitDepths[((unint64_t)v9[3] >> 1) & 7];
  LODWORD(v18) = HIDWORD(v18) - 16;
  v17 = v18 >> 2;
  if (v17 <= 4 && ((0x17u >> v17) & 1) != 0)
    *(_DWORD *)(a2 + 12) = dword_18F10DC00[v17];
  if (v15 == 14 || (v12 & 0xE0) == 0x60 || (v14 & 0xE) == 0xC)
  {
    if ((char)v9[4] < 0)
    {
      v20 = v9[4];
      if ((v20 & 0xE0) == 0xC0)
      {
        v19 = 6;
      }
      else if ((v20 & 0xF0) == 0xE0)
      {
        v19 = 7;
      }
      else if ((v20 & 0xF8) == 0xF0)
      {
        v19 = 8;
      }
      else if ((v20 & 0xFC) == 0xF8)
      {
        v19 = 9;
      }
      else if ((v20 & 0xFE) == 0xFC)
      {
        v19 = 10;
      }
      else if ((v11 & (v20 == 254)) != 0)
      {
        v19 = 11;
      }
      else
      {
        v19 = 4;
      }
    }
    else
    {
      v19 = 5;
    }
  }
  else
  {
    v19 = 4;
  }
  if ((_DWORD)v13 == 7)
  {
    v21 = __rev16(*(unsigned __int16 *)&v9[v19]);
    v22 = 2;
  }
  else
  {
    if ((_DWORD)v13 != 6)
      goto LABEL_39;
    v21 = v9[v19];
    v22 = 1;
  }
  *(_DWORD *)(a2 + 20) = v21 + 1;
  v19 += v22;
LABEL_39:
  switch(v15)
  {
    case 13:
      v24 = __rev16(*(unsigned __int16 *)&v9[v19]);
LABEL_45:
      v23 = (double)v24;
      goto LABEL_46;
    case 12:
      v23 = (double)(1000 * v9[v19]);
LABEL_46:
      *(double *)a2 = v23;
      break;
    case 14:
      v24 = 2 * (4 * __rev16(*(unsigned __int16 *)&v9[v19]) + (bswap32(*(unsigned __int16 *)&v9[v19]) >> 16));
      goto LABEL_45;
  }
LABEL_47:
  __p[1] = v9;
  operator delete(v9);
  return v8;
}

void sub_18EFF69A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 16;
        std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void FLACAudioFile::GetHeaderSize(FLACAudioFile *this, uint64_t a2, unsigned int *a3, int a4)
{
  unsigned __int8 *v8;
  int v9;
  void *v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  void *__p[3];
  unsigned int v30;

  v30 = 0;
  *a3 = 0;
  std::vector<unsigned char>::vector(__p, 0x10uLL);
  v8 = (unsigned __int8 *)__p[0];
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                           + 48))(*((_QWORD *)this + 13), 0, a2, 16, __p[0], &v30);
  v10 = __p[0];
  if (v9)
    v11 = 0;
  else
    v11 = v30 >= 7;
  if (v11)
  {
    if ((*((_BYTE *)__p[0] + 1) & 2) != 0)
      goto LABEL_54;
    v12 = *((unsigned __int8 *)__p[0] + 2);
    if (v12 < 0x10)
      goto LABEL_54;
    v13 = v12 & 0xF;
    if ((v12 & 0xF) == 0xF)
      goto LABEL_54;
    v14 = *((unsigned __int8 *)__p[0] + 3);
    if (v14 > 0xAF)
      goto LABEL_54;
    if ((~(_DWORD)v14 & 6) == 0 || (v14 & 1) != 0)
      goto LABEL_54;
    v16 = *((char *)__p[0] + 4);
    if (v16 < 0)
    {
      if ((v16 & 0xE0) == 0xC0)
      {
        v17 = 6;
      }
      else if ((v16 & 0xF0) == 0xE0)
      {
        v17 = 7;
      }
      else if ((v16 & 0xF8) == 0xF0)
      {
        v17 = 8;
      }
      else if ((v16 & 0xFC) == 0xF8)
      {
        v17 = 9;
      }
      else if ((v16 & 0xFE) == 0xFC)
      {
        v17 = 10;
      }
      else
      {
        v18 = 0;
        if ((*((_BYTE *)__p[0] + 1) & 1) == 0 || *((unsigned __int8 *)__p[0] + 4) != 254)
          goto LABEL_55;
        v17 = 11;
      }
    }
    else
    {
      v17 = 5;
    }
    v19 = v12 >> 4;
    if (v19 == 7)
    {
      v17 += 2;
    }
    else if (v19 == 6)
    {
      ++v17;
    }
    if ((_DWORD)v13 == 14)
    {
      v21 = 2
          * (4 * __rev16(*(unsigned __int16 *)((char *)__p[0] + v17))
           + (bswap32(*(unsigned __int16 *)((char *)__p[0] + v17)) >> 16));
    }
    else
    {
      if ((_DWORD)v13 != 13)
      {
        v20 = 0.0;
        if ((_DWORD)v13 == 12)
          v20 = (double)(1000 * *((unsigned __int8 *)__p[0] + v17++));
        goto LABEL_42;
      }
      v21 = __rev16(*(unsigned __int16 *)((char *)__p[0] + v17));
    }
    v20 = (double)v21;
    v17 += 2;
LABEL_42:
    v22 = 0;
    v23 = 0;
    v24 = v14 >> 4;
    v25 = (v14 >> 1) & 7;
    v26 = v17;
    do
      LODWORD(v23) = FLAC_crc8[v23 ^ v8[v22++]];
    while (v17 != (_DWORD)v22);
    if ((_DWORD)v23 == *((unsigned __int8 *)__p[0] + v17))
    {
      if (!a4)
        goto LABEL_57;
      v18 = 0;
      v27 = kFLACBitDepths[v25];
      if (v13 <= 0xB)
        v20 = kFLACSampleRates[v13];
      if (*((_DWORD *)this + 36) != v27
        || *((_DWORD *)this + 13) != LOWORD(kFLACChannelConfigToLayoutTag[v24])
        || *((double *)this + 3) != v20)
      {
        goto LABEL_55;
      }
      v28 = *((_DWORD *)this + 11);
      if ((*((_BYTE *)__p[0] + 1) & 1) == 0 || !v28)
      {
        if (*((_BYTE *)__p[0] + 1) & 1 | v28)
        {
LABEL_57:
          if (v26 >= v30)
            v18 = 0;
          else
            v18 = v26 + 1;
          goto LABEL_55;
        }
      }
    }
LABEL_54:
    v18 = 0;
LABEL_55:
    *a3 = v18;
    goto LABEL_56;
  }
  if (__p[0])
  {
LABEL_56:
    __p[1] = v10;
    operator delete(v10);
  }
}

void sub_18EFF6CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t applesauce::CF::convert_to<int,0>(const __CFNumber *a1)
{
  unint64_t result;
  std::runtime_error *exception;

  result = applesauce::CF::convert_as<int,0>(a1);
  if (!HIDWORD(result))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  return result;
}

void sub_18EFF6D4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_as<int,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  double valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_14;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_21;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberSInt64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_28;
      case kCFNumberFloat64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_34;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_14:
        v11 = Value != 0;
        if (Value)
          v12 = LOBYTE(valuePtr);
        else
          v12 = 0;
        v13 = -256;
        if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0)
          v13 = 0;
        v8 = v11 << 32;
        LODWORD(v5) = v13 & 0xFFFFFF00 | v12;
        v7 = v5 & 0xFFFFFF00;
        break;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_21:
        if (v9)
          v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
        else
          v5 = 0;
        goto LABEL_37;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongLongType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_28:
        v14 = (int)*(float *)&valuePtr;
        goto LABEL_35;
      case kCFNumberDoubleType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_34;
      case kCFNumberCFIndexType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_32;
      case kCFNumberNSIntegerType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_32:
        v14 = LODWORD(valuePtr);
        goto LABEL_35;
      case kCFNumberCGFloatType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_34:
        v14 = (int)valuePtr;
LABEL_35:
        v5 = v14 | 0x100000000;
        if (!v10)
          v5 = 0;
LABEL_37:
        v7 = v5 & 0xFFFFFF00;
        v8 = v5 & 0x100000000;
        break;
      default:
        v7 = 0;
        v8 = 0;
        LOBYTE(v5) = 0;
        break;
    }
    v6 = v8 | v7 & 0xFFFFFF00;
    v5 = v5;
  }
  else
  {
    v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      v5 = CFBooleanGetValue(a1);
      v6 = 0x100000000;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
  }
  return v6 | v5;
}

void FLACAudioFormat::~FLACAudioFormat(FLACAudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL FLACAudioFormat::ExtensionIsThisFormat(FLACAudioFormat *this, CFStringRef theString1)
{
  return CFStringCompare(theString1, CFSTR("flac"), 1uLL) == kCFCompareEqualTo;
}

BOOL FLACAudioFormat::FileDataIsThisFormat(FLACAudioFormat *this, unsigned int a2, _DWORD *a3)
{
  return *a3 == 1130450022;
}

const __CFArray *FLACAudioFormat::GetExtensions(FLACAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("flac");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *FLACAudioFormat::GetUTIs(FLACAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("org.xiph.flac");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *FLACAudioFormat::GetMIMETypes(FLACAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("audio/flac");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void FLACAudioFormat::GetFileTypeName(FLACAudioFormat *this, const __CFString **a2)
{
  char v3;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v3);
  *a2 = CFSTR("FLAC");
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v3);
}

uint64_t FLACAudioFormat::GetAvailableFormatIDs(FLACAudioFormat *this, unsigned int *a2, void *a3)
{
  uint64_t PropertyInfo;
  UInt32 v6;
  std::vector<unsigned int>::size_type v7;
  int v8;
  std::vector<unsigned int>::pointer begin;
  uint64_t v10;
  int v11;
  size_t v12;
  std::vector<unsigned int> v14;
  UInt32 outPropertyDataSize;
  _DWORD __src[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  outPropertyDataSize = 0;
  PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if (!(_DWORD)PropertyInfo)
  {
    v6 = outPropertyDataSize;
    v7 = (unint64_t)outPropertyDataSize >> 2;
    std::vector<unsigned int>::vector(&v14, v7);
    PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, v14.__begin_);
    if (!(_DWORD)PropertyInfo)
    {
      if (v6 >= 4)
      {
        v8 = 0;
        begin = v14.__begin_;
        if (v7 <= 1)
          v10 = 1;
        else
          v10 = v7;
        do
        {
          v11 = *begin++;
          if (v11 == 1718378851)
            __src[v8++] = 1718378851;
          --v10;
        }
        while (v10);
      }
      else
      {
        v8 = 0;
      }
      v12 = (4 * v8);
      *a2 = v12;
      if (a3)
        memcpy(a3, __src, v12);
      PropertyInfo = 0;
    }
    if (v14.__begin_)
    {
      v14.__end_ = v14.__begin_;
      operator delete(v14.__begin_);
    }
  }
  return PropertyInfo;
}

void sub_18EFF766C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t FLACAudioFormat::GetAvailableStreamDescriptions(FLACAudioFormat *this, int a2, unsigned int *a3, void *a4)
{
  uint64_t PropertyInfo;
  UInt32 v8;
  std::vector<unsigned int>::size_type v9;
  std::vector<unsigned int>::pointer begin;
  uint64_t v11;
  int v12;
  int v13;
  size_t v14;
  UInt32 ioPropertyDataSize;
  std::vector<unsigned int> v17;
  UInt32 outPropertyDataSize;
  _OWORD outPropertyData[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  outPropertyDataSize = 0;
  PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if (!(_DWORD)PropertyInfo)
  {
    v8 = outPropertyDataSize;
    v9 = (unint64_t)outPropertyDataSize >> 2;
    std::vector<unsigned int>::vector(&v17, v9);
    PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, v17.__begin_);
    if (!(_DWORD)PropertyInfo)
    {
      if (v8 < 4)
      {
LABEL_10:
        *a3 = 0;
        PropertyInfo = 1718449215;
      }
      else
      {
        begin = v17.__begin_;
        if (v9 <= 1)
          v11 = 1;
        else
          v11 = v9;
        while (1)
        {
          v13 = *begin++;
          v12 = v13;
          if (a2 == 1718378851 && v12 == 1718378851)
            break;
          if (!--v11)
            goto LABEL_10;
        }
        v20 = 0;
        memset(outPropertyData, 0, sizeof(outPropertyData));
        DWORD2(outPropertyData[0]) = 1718378851;
        ioPropertyDataSize = 40;
        AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, outPropertyData);
        if (*a3 >= 0x28)
          v14 = 40;
        else
          v14 = 0;
        *a3 = v14;
        if (a4)
          memcpy(a4, outPropertyData, v14);
        PropertyInfo = 0;
      }
    }
    if (v17.__begin_)
    {
      v17.__end_ = v17.__begin_;
      operator delete(v17.__begin_);
    }
  }
  return PropertyInfo;
}

void sub_18EFF77F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t FLACAudioFormat::GetHFSCodes(FLACAudioFormat *this, unsigned int *a2, void *__dst)
{
  size_t v3;
  int __src;

  __src = 1718378851;
  if (*a2 >= 4)
    v3 = 4;
  else
    v3 = *a2 & 0xFFFFFFFC;
  *a2 = v3;
  if (__dst)
    memcpy(__dst, &__src, v3);
  return 0;
}

double FLACAudioFormat::New(FLACAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 80) = 0x666C616300000001;
  *(_QWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 96) = -1;
  *(_WORD *)(v1 + 100) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0x100000000;
  *(_DWORD *)(v1 + 136) = 65792;
  result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)v1 = &off_1E2902D98;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 140) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 168) = 0;
  *(_WORD *)(v1 + 180) = 0;
  *(_BYTE *)(v1 + 182) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_QWORD *)(v1 + 240) = 0;
  *(_QWORD *)(v1 + 248) = -1;
  *(_DWORD *)(v1 + 176) = 0;
  *(_QWORD *)(v1 + 184) = -1;
  *(_QWORD *)(v1 + 192) = 0;
  return result;
}

uint64_t FLACAudioFormat::NewStream(FLACAudioFormat *this)
{
  uint64_t v1;

  v1 = operator new();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = -1;
  *(_QWORD *)(v1 + 96) = -1;
  *(_QWORD *)(v1 + 104) = -1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_OWORD *)(v1 + 240) = xmmword_18F116F80;
  *(_DWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 300) = 0;
  *(_QWORD *)(v1 + 284) = 0;
  *(_QWORD *)(v1 + 292) = 0;
  *(_DWORD *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)v1 = &off_1E2905720;
  *(_QWORD *)(v1 + 332) = 0;
  *(_DWORD *)(v1 + 384) = 0;
  *(_QWORD *)(v1 + 493) = 0;
  *(_QWORD *)(v1 + 488) = 0;
  *(_DWORD *)(v1 + 552) = 0;
  *(_OWORD *)(v1 + 520) = 0u;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_QWORD *)(v1 + 592) = 0;
  *(_OWORD *)(v1 + 560) = 0u;
  *(_OWORD *)(v1 + 576) = 0u;
  bzero((void *)(v1 + 344), 0x28uLL);
  bzero((void *)(v1 + 388), 8uLL);
  bzero((void *)(v1 + 396), 0x22uLL);
  bzero((void *)(v1 + 432), 0x38uLL);
  return v1;
}

void AudibleAudioFile::~AudibleAudioFile(AudibleAudioFile *this)
{
  AudioFileObject::~AudioFileObject(this);
  JUMPOUT(0x193FFE460);
}

uint64_t AudibleAudioFile::OpenFromDataSource(int64x2_t *this)
{
  int64x2_t *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  void *v30;
  void **v31;
  void *v32;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned __int16 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  size_t v51;
  char *v52;
  uint64_t v53;
  char **v54;
  __int16 *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  BOOL v64;
  unsigned int v65;
  __int16 *v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  BOOL v80;
  __int16 *v81;
  _QWORD *v82;
  int v83;
  __int16 v84;
  __int16 v85;
  __int16 v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  char *v99;
  uint64_t v100;
  int v101;
  char *v102;
  uint64_t v103;
  int v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int16 v119;
  __int16 v120;
  unsigned __int8 *v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned __int8 *v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  unsigned __int8 *v129;
  unsigned int v130;
  unsigned __int8 *v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  unsigned __int8 *v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  __int16 v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int *v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int *v155;
  uint64_t v156;
  unsigned int v157;
  int v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unsigned int j;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  __int16 *v179;
  uint64_t v180;
  int v181;
  char *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t i;
  uint64_t *v189;
  double v190;
  int v191;
  int v192;
  int32x2_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  unint64_t v198;
  unsigned __int8 v199[64];
  unsigned __int8 v200;
  _BYTE v201[7];
  unsigned __int8 v202;
  _BYTE v203[7];
  _BYTE v204[14];
  _BYTE v205[2];
  _BYTE buf[18];
  char v207;
  char v208;
  _BYTE v209[108];
  _QWORD v210[4];

  v210[1] = *MEMORY[0x1E0C80C00];
  this[9].i64[0] = 0;
  v2 = this + 9;
  this[9].i64[1] = this[6].i64[1];
  if (AAValidateFile((uint64_t)this[9].i64))
  {
    v3 = 1685348671;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v3;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudibleAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 164;
    v4 = MEMORY[0x1E0C81028];
    v5 = "%25s:%-5d  ReadHeader";
LABEL_68:
    _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_ERROR, v5, buf, 0x12u);
    return v3;
  }
  AAGetMetaCodec((uint64_t)v2, (int64x2_t *)this[10].i64);
  v195 = 0;
  v190 = (double)this[12].i64[0];
  v6 = this[10].i64[0];
  if (v6 == 49164 || v6 == 49168)
  {
    v8 = 1096107074;
  }
  else
  {
    if (v6 != 49165)
    {
      v3 = 1718449215;
      goto LABEL_66;
    }
    v8 = 778924083;
  }
  v191 = v8;
  v192 = 0;
  v193 = vmovn_s64(this[11]);
  v194 = 0x100000000;
  (*(void (**)(int64x2_t *, double *))(this->i64[0] + 176))(this, &v190);
  AAGetMetaCodec((uint64_t)v2, buf);
  if (IAAFindSection((uint64_t)v2, 3, v199))
    goto LABEL_32;
  OAAFileRead((uint64_t)v2, (uint64_t)v210, 2, 0);
  *(_QWORD *)v199 = 56;
  LODWORD(v210[0]) = 0;
  v9 = this[9].i64[0];
  v10 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)this[9].i64[1] + 16))(this[9].i64[1], v210);
  v11 = v9 + 56;
  if (v10)
    v12 = 0;
  else
    v12 = LODWORD(v210[0]) > v11;
  if (v12)
    v2->i64[0] = v11;
  IAAReadULong((uint64_t)v2, (int64x2_t *)this[13].i64);
  this[13].i64[1] = 1000 * ((unint64_t)(8 * this[13].i64[0]) % *(_QWORD *)&buf[8]) / *(_QWORD *)&buf[8]
                  + 1000 * ((unint64_t)(8 * this[13].i64[0]) / *(_QWORD *)&buf[8]);
  IAAFindSection((uint64_t)v2, 6, v199);
  IAAReadULong((uint64_t)v2, (int64x2_t *)this[16].i64);
  if (this[16].i64[0] >= 0x80uLL)
    v13 = 128;
  else
    v13 = this[16].i64[0];
  if (v13)
  {
    v14 = 0;
    v15 = &this[16].i64[1];
    do
    {
      *v15 = v14;
      IAAReadULong((uint64_t)v2, v199);
      IAAReadULong((uint64_t)v2, v199);
      IAAReadULong((uint64_t)v2, v199);
      IAAReadULong((uint64_t)v2, v199);
      v16 = *(_QWORD *)v199;
      IAAReadULong((uint64_t)v2, v199);
      OAAFileRead((uint64_t)v2, (uint64_t)v210, 2, 0);
      IAAReadULong((uint64_t)v2, v199);
      v17 = *(_QWORD *)v199;
      LODWORD(v210[0]) = 0;
      v18 = this[9].i64[0];
      v19 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)this[9].i64[1] + 16))(this[9].i64[1], v210);
      v20 = v18 + 8 * v17;
      if (v19)
        v21 = 0;
      else
        v21 = LODWORD(v210[0]) > v20;
      if (v21)
        v2->i64[0] = v20;
      v14 += v16;
      ++v15;
      --v13;
    }
    while (v13);
  }
  if (IAAFindSection((uint64_t)v2, 1, v199))
  {
LABEL_32:
    v3 = 1685348671;
LABEL_66:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v3;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudibleAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 166;
    v4 = MEMORY[0x1E0C81028];
    v5 = "%25s:%-5d  ParseHeader";
    goto LABEL_68;
  }
  OAAFileRead((uint64_t)v2, (uint64_t)v210, 2, 0);
  OAAFileRead((uint64_t)v2, (uint64_t)v210, 2, 0);
  IAAReadULong((uint64_t)v2, v199);
  IAAReadULong((uint64_t)v2, v199);
  if (*(_QWORD *)v199 == 1)
  {
    this[14].i64[0] = 1;
    IAAReadULong((uint64_t)v2, &this[14].i64[1]);
    IAAReadULong((uint64_t)v2, (int64x2_t *)this[15].i64);
    IAAReadULong((uint64_t)v2, &this[15].i64[1]);
  }
  else
  {
    v22 = this[13].i64[0];
    this[14].i64[0] = 0;
    this[14].i64[1] = v22;
    this[15].i64[0] = 0;
    this[15].i64[1] = v22;
  }
  v23 = IAAMalloc(0x2C8uLL);
  v3 = 1685348671;
  if (!v23)
    goto LABEL_66;
  *(_DWORD *)buf = 0;
  if (!(*(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)this[9].i64[1] + 16))(this[9].i64[1], buf)
    && *(_DWORD *)buf)
  {
    v2->i64[0] = 0;
  }
  if (AAValidateFile((uint64_t)v2)
    || (*(_QWORD *)buf = 0, *(_QWORD *)v199 = 0, IAAFindSection((uint64_t)v2, 5, v199))
    || (IAAReadULong((uint64_t)v2, buf),
        v24 = *(_QWORD *)buf,
        *((_WORD *)v23 + 228) = *(_WORD *)buf,
        *(_QWORD *)v199 != 4 * (__int16)v24 + 4))
  {
LABEL_57:
    *((_QWORD *)v23 + 82) = 0;
    v30 = (void *)*((_QWORD *)v23 + 44);
    if (v30)
      free(v30);
    v31 = (void **)*((_QWORD *)v23 + 67);
    if (v31)
    {
      if (!v31[2] || (free(v31[2]), (v31 = (void **)*((_QWORD *)v23 + 67)) != 0))
        free(v31);
    }
    v32 = (void *)*((_QWORD *)v23 + 81);
    if (v32)
      free(v32);
    free(v23);
    goto LABEL_66;
  }
  if ((unint64_t)(v24 << 48) < 0x8000000000001)
  {
    if ((__int16)v24 < 1)
      goto LABEL_49;
  }
  else
  {
    *((_WORD *)v23 + 228) = 8;
  }
  v25 = 0;
  do
  {
    IAAReadULong((uint64_t)v2, buf);
    *(_QWORD *)&v23[8 * v25++ + 464] = *(_QWORD *)buf;
  }
  while (v25 < *((__int16 *)v23 + 228));
LABEL_49:
  *(_QWORD *)v199 = 0;
  v210[0] = 0;
  if (IAAFindSection((uint64_t)v2, 1, v199) || *(_QWORD *)v199 != 24)
    goto LABEL_57;
  v26 = OAAFileRead((uint64_t)v2, (uint64_t)buf, 2, 0);
  v27 = bswap32(*(unsigned __int16 *)buf) >> 16;
  if (v26)
    LOWORD(v27) = 0;
  *((_WORD *)v23 + 144) = v27;
  if (v26)
    goto LABEL_57;
  v28 = OAAFileRead((uint64_t)v2, (uint64_t)buf, 2, 0);
  v29 = bswap32(*(unsigned __int16 *)buf) >> 16;
  if (v28)
    LOWORD(v29) = 0;
  *((_WORD *)v23 + 145) = v29;
  if (v28)
    goto LABEL_57;
  *(_QWORD *)buf = 0;
  v34 = IAAReadULong((uint64_t)v2, buf);
  *((_QWORD *)v23 + 37) = *(_QWORD *)buf;
  if (!v34)
    goto LABEL_57;
  if (!IAAReadULong((uint64_t)v2, v210))
    goto LABEL_57;
  *(_QWORD *)buf = 0;
  v35 = IAAReadULong((uint64_t)v2, buf);
  *((_QWORD *)v23 + 39) = *(_QWORD *)buf;
  if (!v35)
    goto LABEL_57;
  *(_QWORD *)buf = 0;
  v36 = IAAReadULong((uint64_t)v2, buf);
  *((_QWORD *)v23 + 40) = *(_QWORD *)buf;
  if (!v36)
    goto LABEL_57;
  *(_QWORD *)buf = 0;
  v37 = IAAReadULong((uint64_t)v2, buf);
  *((_QWORD *)v23 + 41) = *(_QWORD *)buf;
  if (!v37)
    goto LABEL_57;
  *((_WORD *)v23 + 152) = v210[0];
  if (*((_QWORD *)v23 + 37) != 1469084982
    || *((_WORD *)v23 + 145)
    || *((unsigned __int16 *)v23 + 144) >= 2u
    || IAAFindSection((uint64_t)v2, 3, v199))
  {
    goto LABEL_57;
  }
  IAAReadUShort((uint64_t)v2, (_WORD *)v23 + 180);
  LODWORD(v210[0]) = 0;
  v38 = this[9].i64[0];
  if (!(*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)this[9].i64[1] + 16))(this[9].i64[1], v210)
    && LODWORD(v210[0]) > (v38 + 56))
  {
    v2->i64[0] = v38 + 56;
  }
  IAAReadULong((uint64_t)v2, (_QWORD *)v23 + 46);
  IAAReadULong((uint64_t)v2, (_QWORD *)v23 + 47);
  IAAReadULong((uint64_t)v2, buf);
  IAAReadULong((uint64_t)v2, buf);
  v210[0] = 0;
  if (IAAFindSection((uint64_t)v2, 6, v199))
    goto LABEL_57;
  IAAReadULong((uint64_t)v2, v210);
  v39 = v210[0];
  *((_WORD *)v23 + 264) = v210[0];
  if (v39 - 1001 < 0xFFFFFC18)
    goto LABEL_57;
  v40 = IAAMalloc(24 * v39);
  *((_QWORD *)v23 + 67) = v40;
  if (!v40)
    goto LABEL_57;
  if (*((_WORD *)v23 + 264))
  {
    v41 = 0;
    v42 = 0;
    v43 = 0;
    do
    {
      *(_QWORD *)buf = 0;
      IAAReadULong((uint64_t)v2, buf);
      *(_WORD *)(*((_QWORD *)v23 + 67) + v41) = *(_WORD *)buf;
      IAAReadULong((uint64_t)v2, buf);
      IAAReadULong((uint64_t)v2, buf);
      IAAReadULong((uint64_t)v2, (_QWORD *)(*((_QWORD *)v23 + 67) + v41 + 8));
      IAAReadULong((uint64_t)v2, buf);
      IAAReadUShort((uint64_t)v2, (_WORD *)v23 + 272);
      *(_QWORD *)buf = 0;
      IAAReadULong((uint64_t)v2, buf);
      if (*(__int16 *)(*((_QWORD *)v23 + 67) + v41) < 0)
        goto LABEL_57;
      v44 = *(unsigned __int16 *)(*((_QWORD *)v23 + 67) + v41);
      v45 = __CFADD__(v42, v44);
      v42 += v44;
      if (v45)
        goto LABEL_57;
      v46 = *(_QWORD *)buf;
      *(_DWORD *)buf = 0;
      v47 = this[9].i64[0];
      v48 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)this[9].i64[1] + 16))(this[9].i64[1], buf);
      v49 = v47 + 8 * v46;
      if (v48 || *(_DWORD *)buf <= v49)
        goto LABEL_57;
      v2->i64[0] = v49;
      ++v43;
      v41 += 24;
    }
    while (v43 < *((unsigned __int16 *)v23 + 264));
    v51 = 16 * v42;
  }
  else
  {
    v51 = 0;
  }
  v52 = IAAMalloc(v51);
  if (!v52)
    goto LABEL_57;
  v53 = *((unsigned __int16 *)v23 + 264);
  if (*((_WORD *)v23 + 264))
  {
    v54 = (char **)(*((_QWORD *)v23 + 67) + 16);
    do
    {
      *v54 = v52;
      v52 += 16 * *((__int16 *)v54 - 8);
      v54 += 3;
      --v53;
    }
    while (v53);
  }
  *(_QWORD *)buf = 0;
  if (IAAFindSection((uint64_t)v2, 10, buf))
    goto LABEL_57;
  v55 = (__int16 *)*((_QWORD *)v23 + 67);
  v56 = *v55;
  if (v56 >= 1)
  {
    v57 = 0;
    v58 = 0;
    do
    {
      IAAReadULong((uint64_t)v2, (_QWORD *)(*((_QWORD *)v55 + 2) + v57 + 8));
      IAAReadULong((uint64_t)v2, (_QWORD *)(*(_QWORD *)(*((_QWORD *)v23 + 67) + 16) + v57));
      v59 = v2->i64[0];
      v60 = *(_QWORD *)(*((_QWORD *)v23 + 67) + 16);
      if (v2->i64[0] != *(_QWORD *)(v60 + v57))
        goto LABEL_57;
      v61 = *(_QWORD *)(v60 + v57 + 8);
      *(_DWORD *)v199 = 0;
      v62 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)this[9].i64[1] + 16))(this[9].i64[1], v199);
      v63 = v61 + v59;
      if (v62)
        v64 = 0;
      else
        v64 = *(_DWORD *)v199 > v63;
      if (v64)
        v2->i64[0] = v63;
      ++v58;
      v55 = (__int16 *)*((_QWORD *)v23 + 67);
      v57 += 16;
    }
    while (v58 < *v55);
    LOWORD(v56) = *v55;
  }
  v65 = *((unsigned __int16 *)v23 + 264);
  if (v65 >= 2)
  {
    v186 = *((_QWORD *)v55 + 1) + **((_QWORD **)v55 + 2) + 8 * (__int16)v56;
    for (i = 1; i < v65; ++i)
    {
      v66 = &v55[12 * i];
      v67 = (_QWORD *)*((_QWORD *)v66 + 2);
      *v67 = v186;
      if (*v66 == 1)
      {
        v68 = *(_QWORD *)&v55[12 * i + 4];
        v67[1] = v68;
        LOWORD(v67) = 1;
      }
      else
      {
        *(_DWORD *)v199 = 0;
        v69 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)this[9].i64[1] + 16))(this[9].i64[1], v199);
        v70 = v186 - 8;
        if (v69)
          v71 = 0;
        else
          v71 = *(_DWORD *)v199 > v70;
        if (v71)
          v2->i64[0] = v70;
        v55 = (__int16 *)*((_QWORD *)v23 + 67);
        LODWORD(v67) = v55[12 * i];
        if ((int)v67 < 2)
        {
          v74 = 0;
          v73 = 0;
        }
        else
        {
          v72 = 0;
          v73 = 0;
          v74 = 0;
          do
          {
            IAAReadULong((uint64_t)v2, (_QWORD *)(*(_QWORD *)&v55[12 * i + 8] + v72 + 8));
            IAAReadULong((uint64_t)v2, (_QWORD *)(*(_QWORD *)(*((_QWORD *)v23 + 67) + 24 * i + 16) + v72));
            v75 = v2->i64[0];
            v76 = *(_QWORD *)(*((_QWORD *)v23 + 67) + 24 * i + 16);
            if (v2->i64[0] != *(_QWORD *)(v76 + v72))
              goto LABEL_57;
            v77 = *(_QWORD *)(v76 + v72 + 8);
            *(_DWORD *)v199 = 0;
            v78 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)this[9].i64[1] + 16))(this[9].i64[1], v199);
            v79 = v77 + v75;
            if (v78)
              v80 = 0;
            else
              v80 = *(_DWORD *)v199 > v79;
            if (v80)
              v2->i64[0] = v79;
            v73 += v77;
            ++v74;
            v55 = (__int16 *)*((_QWORD *)v23 + 67);
            v72 += 16;
          }
          while (v74 < v55[12 * i] - 1);
          LOWORD(v67) = v55[12 * i];
        }
        v81 = &v55[12 * i];
        v82 = (_QWORD *)(*((_QWORD *)v81 + 2) + 16 * v74);
        *v82 = *(v82 - 2) + *(v82 - 1) + 8;
        v68 = *((_QWORD *)v81 + 1);
        v82[1] = v68 - v73;
        v65 = *((unsigned __int16 *)v23 + 264);
      }
      v186 += v68 + 8 * (__int16)v67;
    }
  }
  *((_QWORD *)v23 + 80) = v2;
  v83 = *((unsigned __int16 *)v23 + 272);
  *((_WORD *)v23 + 340) = v83;
  switch(v83)
  {
    case 49164:
      v84 = 20;
      goto LABEL_146;
    case 49165:
      v85 = 31850;
      v84 = 104;
      v86 = 22050;
      goto LABEL_147;
    case 49166:
    case 49167:
    case 49169:
    case 49170:
      goto LABEL_141;
    case 49168:
      v85 = 8444;
      v84 = 19;
      goto LABEL_144;
    case 49171:
      v84 = -1;
LABEL_146:
      v86 = 16000;
      v85 = 16000;
      goto LABEL_147;
    default:
      if (v83 == 1)
      {
        v85 = 0;
        v84 = -1;
LABEL_144:
        v86 = 8000;
      }
      else
      {
LABEL_141:
        v85 = 0;
        v86 = -1;
        v84 = -1;
      }
LABEL_147:
      *((_WORD *)v23 + 342) = v85;
      *((_WORD *)v23 + 341) = v84;
      *((_WORD *)v23 + 343) = v86;
      if (!*((_WORD *)v23 + 144))
        goto LABEL_272;
      v87 = (unint64_t)v205;
      if (v205 >= (_BYTE *)&v198 + 7)
        v87 = (unint64_t)&v198 + 7;
      bzero((void *)(v87 + 1), (size_t)&buf[~v87]);
      v197 = 0;
      v198 = 0;
      v196 = 0;
      v189 = (uint64_t *)*((_QWORD *)v23 + 80);
      if (IAAFindSection((uint64_t)v189, 2, &v198))
        goto LABEL_271;
      v210[0] = 0;
      IAAReadULong((uint64_t)v189, v210);
      v185 = v210[0];
      if (v210[0] <= 0)
        goto LABEL_215;
      v88 = 0;
      v187 = 0;
      break;
  }
  do
  {
    OAAFileRead((uint64_t)v189, (uint64_t)&v196, 1, &v197);
    if (v196)
      break;
    v89 = v197;
    v210[0] = 0;
    v90 = IAAReadULong((uint64_t)v189, v210);
    v91 = v210[0];
    v210[0] = 0;
    v92 = IAAReadULong((uint64_t)v189, v210);
    v93 = v210[0];
    v210[0] = 0;
    if (v91 >= 0x13)
      v94 = 19;
    else
      v94 = v91;
    OAAFileRead((uint64_t)v189, (uint64_t)buf, v94, v210);
    v95 = v210[0];
    buf[v210[0]] = 0;
    v197 = v95;
    v187 += v89 + v90 + v92 + v95;
    v96 = buf[0];
    if (buf[0])
    {
      v97 = 0;
      v98 = buf[0];
      while (v97 != 9 && v98 == aHeaderkey[v97])
      {
        v98 = buf[++v97];
        if (!v98)
        {
          v99 = &aHeaderkey[v97];
          goto LABEL_164;
        }
      }
    }
    else
    {
      v99 = "HeaderKey";
LABEL_164:
      if (!*v99)
      {
        v210[0] = 0;
        if (v93 >= 0x3F)
          v108 = 63;
        else
          v108 = v93;
        OAAFileRead((uint64_t)v189, (uint64_t)v199, v108, v210);
        v109 = v210[0];
        v110 = v199;
        goto LABEL_213;
      }
    }
    if (buf[0])
    {
      v100 = 0;
      v101 = buf[0];
      while (v100 != 10 && v101 == aHeaderseed[v100])
      {
        v101 = buf[++v100];
        if (!v101)
        {
          v102 = &aHeaderseed[v100];
          goto LABEL_172;
        }
      }
    }
    else
    {
      v102 = "HeaderSeed";
LABEL_172:
      if (!*v102)
      {
        v210[0] = 0;
        if (v93 >= 0xF)
          v116 = 15;
        else
          v116 = v93;
        OAAFileRead((uint64_t)v189, (uint64_t)&v200, v116, v210);
        v109 = v210[0];
        v110 = &v200;
        goto LABEL_213;
      }
    }
    if (buf[0])
    {
      v103 = 0;
      v104 = buf[0];
      while (v103 != 15 && v104 == aEncryptedblock[v103])
      {
        v104 = buf[++v103];
        if (!v104)
        {
          v105 = &aEncryptedblock[v103];
          goto LABEL_180;
        }
      }
    }
    else
    {
      v105 = "EncryptedBlocks";
LABEL_180:
      if (!*v105)
      {
        v210[0] = 0;
        if (v93 >= 0xF)
          v117 = 15;
        else
          v117 = v93;
        OAAFileRead((uint64_t)v189, (uint64_t)&v202, v117, v210);
        v109 = v210[0];
        v110 = &v202;
        goto LABEL_213;
      }
    }
    if (buf[0])
    {
      v106 = 0;
      while (v106 != 7 && v96 == aCputype[v106])
      {
        v96 = buf[++v106];
        if (!v96)
        {
          v107 = &aCputype[v106];
          goto LABEL_192;
        }
      }
LABEL_193:
      if (v187 >= v198)
        break;
      if (v189)
      {
        v112 = *v189;
        v111 = v189[1];
        LODWORD(v210[0]) = 0;
        v113 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v111 + 16))(v111, v210);
        v114 = v112 + v93;
        if (!v113 && LODWORD(v210[0]) > v114)
          *v189 = v114;
      }
      goto LABEL_214;
    }
    v107 = "CPUType";
LABEL_192:
    if (*v107)
      goto LABEL_193;
    v210[0] = 0;
    if (v93 >= 0xF)
      v118 = 15;
    else
      v118 = v93;
    OAAFileRead((uint64_t)v189, (uint64_t)v204, v118, v210);
    v109 = v210[0];
    v110 = v204;
LABEL_213:
    v110[v109] = 0;
LABEL_214:
    ++v88;
  }
  while (v88 != v185);
LABEL_215:
  v119 = v202;
  if (v202 - 58 >= 0xFFFFFFF6)
  {
    v120 = 0;
    v121 = v203;
    do
    {
      v120 = 10 * v120 + v119 - 48;
      v122 = *v121++;
      v119 = v122;
    }
    while ((v122 - 58) > 0xFFFFFFF5);
  }
  else
  {
    v120 = 0;
  }
  v123 = v200;
  if (v200 - 58 >= 0xFFFFFFF6)
  {
    v124 = 0;
    v125 = v201;
    do
    {
      v124 = 10 * v124 + v123 - 48;
      v126 = *v125++;
      v123 = v126;
    }
    while ((v126 - 58) > 0xFFFFFFF5);
  }
  else
  {
    v124 = 0;
  }
  v127 = v199[0];
  if (v199[0] - 58 >= 0xFFFFFFF6)
  {
    v128 = 0;
    v129 = &v199[1];
    do
    {
      v128 = 10 * v128 + v127 - 48;
      v130 = *v129++;
      v127 = v130;
    }
    while (v130 - 58 > 0xFFFFFFF5);
  }
  else
  {
    v128 = 0;
  }
  *((_QWORD *)v23 + 71) = v128;
  v131 = v199;
  do
    v132 = *v131++;
  while (v132 != 32);
  v133 = *v131;
  if (v133 - 58 >= 0xFFFFFFF6)
  {
    v134 = 0;
    v135 = 1;
    do
    {
      v134 = 10 * v134 + v133 - 48;
      v133 = v131[v135++];
    }
    while (v133 - 58 > 0xFFFFFFF5);
  }
  else
  {
    v134 = 0;
  }
  *((_QWORD *)v23 + 72) = v134;
  do
    v136 = *v131++;
  while (v136 != 32);
  v137 = *v131;
  if (v137 - 58 >= 0xFFFFFFF6)
  {
    v139 = 0;
    v138 = 0;
    do
    {
      v138 = 10 * v138 + v137 - 48;
      v137 = v131[++v139];
    }
    while (v137 - 58 > 0xFFFFFFF5);
  }
  else
  {
    v138 = 0;
  }
  *((_QWORD *)v23 + 73) = v138;
  do
    v140 = *v131++;
  while (v140 != 32);
  v143 = *v131;
  v141 = v131 + 1;
  v142 = v143;
  if (v143 - 58 >= 0xFFFFFFF6)
  {
    v144 = 0;
    do
    {
      v144 = 10 * v144 + v142 - 48;
      v145 = *v141++;
      v142 = v145;
    }
    while (v145 - 58 > 0xFFFFFFF5);
  }
  else
  {
    v144 = 0;
  }
  *((_QWORD *)v23 + 74) = v144;
  v146 = *((_WORD *)v23 + 180);
  buf[0] = HIBYTE(v146);
  buf[1] = v146;
  buf[2] = BYTE3(v128);
  buf[3] = BYTE2(v128);
  buf[4] = BYTE1(v128);
  buf[5] = v128;
  buf[6] = BYTE3(v134);
  buf[7] = BYTE2(v134);
  buf[8] = BYTE1(v134);
  buf[9] = v134;
  buf[10] = BYTE3(v138);
  buf[11] = BYTE2(v138);
  buf[12] = BYTE1(v138);
  buf[13] = v138;
  buf[14] = BYTE3(v144);
  buf[15] = BYTE2(v144);
  buf[16] = BYTE1(v144);
  buf[17] = v144;
  v207 = HIBYTE(v120);
  v147 = *((__int16 *)v23 + 192);
  v148 = *((unsigned __int16 *)v23 + 192);
  v208 = v120;
  if (v147 < 1)
  {
    LODWORD(v153) = 20;
  }
  else
  {
    v149 = 0;
    v150 = (unsigned int *)(v23 + 392);
    do
    {
      v151 = v149;
      v152 = *v150;
      v150 += 2;
      *(_DWORD *)&v209[v149] = bswap32(v152);
      v149 += 4;
    }
    while (4 * v148 != v149);
    LODWORD(v153) = v151 + 24;
  }
  v154 = *((unsigned __int16 *)v23 + 228);
  if (*((__int16 *)v23 + 228) >= 1)
  {
    v155 = (unsigned int *)(v23 + 464);
    v156 = *((unsigned __int16 *)v23 + 228);
    v153 = v153;
    do
    {
      v157 = *v155;
      v155 += 2;
      *(_DWORD *)&buf[v153] = bswap32(v157);
      v153 += 4;
      --v156;
    }
    while (v156);
  }
  if ((int)v153 >= 1)
  {
    v158 = (v153 & 0xFFFFFFF8) + 8;
    if (v158 >= 1)
    {
      v159 = 0;
      LODWORD(v160) = 0;
      do
      {
        v161 = 0;
        LODWORD(v162) = v124 + 1;
        v163 = v124;
        for (j = 10; j > 2; --j)
        {
          v165 = v161 + 2654435769;
          v161 = (v161 - 1640531527);
          v166 = ((16 * v162 + 1998671179) ^ (((unint64_t)v162 >> 5) + 426411981) ^ (v165 + v162))
               + v163;
          v163 = ((16 * (_DWORD)v162 + 1998671179) ^ ((v162 >> 5) + 426411981) ^ ((_DWORD)v165
                                                                                              + (_DWORD)v162))
               + v163;
          v162 = ((16 * v166 + 1375749629) ^ (v166 + v165) ^ ((v163 >> 5) + 710006387))
               + v162;
        }
        LOBYTE(v210[0]) = BYTE3(v166);
        BYTE1(v210[0]) = BYTE2(v166);
        BYTE2(v210[0]) = BYTE1(v166);
        BYTE3(v210[0]) = v166;
        BYTE4(v210[0]) = BYTE3(v162);
        BYTE5(v210[0]) = BYTE2(v162);
        BYTE6(v210[0]) = BYTE1(v162);
        HIBYTE(v210[0]) = v162;
        if ((int)v160 < (int)v153)
        {
          v167 = 0;
          v168 = (int)v160;
          v169 = &buf[(int)v160];
          do
          {
            v169[v167] ^= *((_BYTE *)v210 + v167);
            v160 = v168 + v167 + 1;
            if (v167 > 6)
              break;
            ++v167;
          }
          while (v160 < v153);
        }
        v124 += 2;
        v159 += 8;
      }
      while (v159 < v158);
    }
  }
  *((_WORD *)v23 + 180) = bswap32(*(unsigned __int16 *)buf) >> 16;
  *((_QWORD *)v23 + 71) = bswap32(*(unsigned int *)&buf[2]);
  *((_QWORD *)v23 + 72) = bswap32(*(unsigned int *)&buf[6]);
  *((_QWORD *)v23 + 73) = bswap32(*(unsigned int *)&buf[10]);
  *((_QWORD *)v23 + 74) = bswap32(*(unsigned int *)&buf[14]);
  if ((__int16)v148 < 1)
  {
    v174 = 20;
  }
  else
  {
    v170 = 0;
    v171 = 4 * v148;
    v172 = v23 + 392;
    do
    {
      v173 = v170;
      *v172++ = bswap32(*(_DWORD *)&v209[v170]);
      v170 += 4;
    }
    while (v171 != v170);
    v174 = (v173 + 24) & 0xFFFFFFFCLL;
  }
  if ((__int16)v154 >= 1)
  {
    v175 = v23 + 464;
    v176 = &buf[v174 + 3];
    do
    {
      *v175++ = bswap32(*(_DWORD *)(v176 - 3));
      v176 += 4;
      --v154;
    }
    while (v154);
  }
LABEL_271:
  v55 = (__int16 *)*((_QWORD *)v23 + 67);
LABEL_272:
  v177 = *((unsigned __int16 *)v23 + 264);
  if (*((_WORD *)v23 + 264))
  {
    v178 = *((_QWORD *)v23 + 77);
    v179 = v55;
    do
    {
      v180 = *v179;
      v179 += 12;
      v178 += v180;
      --v177;
    }
    while (v177);
    *((_QWORD *)v23 + 77) = v178;
  }
  *((_QWORD *)v23 + 76) = *((_QWORD *)v55 + 2);
  v181 = *((unsigned __int16 *)v23 + 272);
  if ((v181 - 49164) > 4 || ((1 << (v181 - 12)) & 0x13) == 0)
  {
    v183 = 0;
  }
  else
  {
    v183 = IAAMalloc(0xE14uLL);
    if (v183)
    {
      if (v181 == 49168)
      {
        v184 = 3;
LABEL_287:
        *(_DWORD *)v183 = v184;
      }
      else
      {
        v184 = 49165;
        if (v181 == 49165)
          goto LABEL_287;
        if (v181 == 49164)
        {
          v184 = 4;
          goto LABEL_287;
        }
      }
    }
  }
  v3 = 0;
  *((_QWORD *)v23 + 81) = v183;
  *((_QWORD *)v23 + 75) = -1;
  this[80].i64[1] = (uint64_t)v23;
  return v3;
}

uint64_t AudibleAudioFile::ReadPackets(AudibleAudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  if (a6 && *a6)
  {
    if (a7)
      v11 = *((_DWORD *)this + 10) * *a6;
    v8 = (*(uint64_t (**)(AudibleAudioFile *, uint64_t, unsigned int *, AudioStreamPacketDescription *))(*(_QWORD *)this + 96))(this, a2, &v11, a4);
    v9 = v8;
    if (a3 && !(_DWORD)v8)
      *a3 = v11;
  }
  else
  {
    v9 = 2003334207;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v13 = "AudibleAudioFile.cpp";
      v14 = 1024;
      v15 = 312;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid ioNumPackets parameter", buf, 0x12u);
    }
  }
  return v9;
}

uint64_t AudibleAudioFile::ReadPacketData(AudibleAudioFile *this, unsigned __int8 a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, _BYTE *a7)
{
  BOOL v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  UInt32 *p_mVariableFramesInPacket;
  unsigned int v32;
  unint64_t v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a4)
    v9 = a7 == 0;
  else
    v9 = 0;
  v10 = v9;
  if (!a3 || !*a3)
  {
    v11 = 2003334207;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v35 = "AudibleAudioFile.cpp";
      v36 = 1024;
      v37 = 346;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid ioNumBytes parameter", buf, 0x12u);
    }
    v14 = 0;
    LODWORD(v15) = 0;
    if (!a3)
      goto LABEL_17;
    goto LABEL_24;
  }
  if (!a6 || !*a6)
  {
    v11 = 2003334207;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v35 = "AudibleAudioFile.cpp";
      v36 = 1024;
      v37 = 347;
      v12 = MEMORY[0x1E0C81028];
      v13 = "%25s:%-5d  invalid ioNumPackets parameter";
      goto LABEL_22;
    }
LABEL_23:
    LODWORD(v15) = 0;
    v14 = 0;
    goto LABEL_24;
  }
  if (v10)
  {
    v11 = 1869627199;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v35 = "AudibleAudioFile.cpp";
      v36 = 1024;
      v37 = 348;
      v12 = MEMORY[0x1E0C81028];
      v13 = "%25s:%-5d  can't provide packet descriptions for an encrypted Audible file";
LABEL_22:
      _os_log_impl(&dword_18EE07000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  if ((*(uint64_t (**)(AudibleAudioFile *))(*(_QWORD *)this + 240))(this) <= a5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v35 = "AudibleAudioFile.cpp";
      v36 = 1024;
      v37 = 354;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  starting packet out of range", buf, 0x12u);
    }
    LODWORD(v15) = 0;
    v14 = 0;
    v11 = 4294967257;
    goto LABEL_24;
  }
  v21 = *a6 + a5;
  if (v21 <= (*(uint64_t (**)(AudibleAudioFile *))(*(_QWORD *)this + 240))(this))
  {
    v22 = *a6;
  }
  else
  {
    v22 = (*(uint64_t (**)(AudibleAudioFile *))(*(_QWORD *)this + 240))(this) - a5;
    *a6 = v22;
  }
  v23 = v22;
  v24 = *((_QWORD *)this + 22);
  v25 = v24 * v23;
  v33 = v25;
  v26 = *a3;
  if (v25 > v26)
  {
    v25 = (uint64_t)v26 / v24 * v24;
    v33 = v25;
  }
  if (!v25)
  {
    v11 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    *(_DWORD *)buf = 136315394;
    v35 = "AudibleAudioFile.cpp";
    v36 = 1024;
    v37 = 366;
    v12 = MEMORY[0x1E0C81028];
    v13 = "%25s:%-5d  buffer too small to accommodate even one packet";
    goto LABEL_22;
  }
  if (AASetAudioBytePos(*((_QWORD *)this + 161), v24 * a5))
  {
    v11 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    *(_DWORD *)buf = 136315394;
    v35 = "AudibleAudioFile.cpp";
    v36 = 1024;
    v37 = 373;
    v12 = MEMORY[0x1E0C81028];
    v13 = "%25s:%-5d  AASetAudioBytePos failed";
    goto LABEL_22;
  }
  v27 = AAReadEncodedAudio(*((_QWORD *)this + 161), a7, &v33);
  v14 = v33;
  v28 = *((_QWORD *)this + 22);
  v15 = v33 / v28;
  if (a4 && *a6)
  {
    v29 = 0;
    v30 = 0;
    p_mVariableFramesInPacket = &a4->mVariableFramesInPacket;
    do
    {
      *((_QWORD *)p_mVariableFramesInPacket - 1) = v29;
      *p_mVariableFramesInPacket = 0;
      p_mVariableFramesInPacket[1] = v28;
      p_mVariableFramesInPacket += 4;
      ++v30;
      v29 += v28;
    }
    while (v30 < *a6);
  }
  if (v27)
    v32 = 2003334207;
  else
    v32 = 0;
  if (v27 == -24)
    v11 = 4294967257;
  else
    v11 = v32;
  if (a3)
  {
LABEL_24:
    *a3 = v14;
    if (!a6)
      return v11;
    goto LABEL_18;
  }
LABEL_17:
  if (a6)
LABEL_18:
    *a6 = v15;
  return v11;
}

uint64_t AudibleAudioFile::GetPropertyInfo(AudibleAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  int v4;

  if (a2 <= 1635083361)
  {
    if (a2 == 1633773424)
    {
      if (a3)
        *a3 = 4;
      if (a4)
        *a4 = 1;
      return 0;
    }
    if (a2 == 1633776244)
    {
      if (!a3)
        goto LABEL_14;
      v4 = 8;
      goto LABEL_13;
    }
  }
  else
  {
    switch(a2)
    {
      case 1635083362:
        goto LABEL_5;
      case 1667788915:
        if (!a3)
          goto LABEL_14;
        v4 = 8 * *(unsigned __int16 *)(*((_QWORD *)this + 161) + 528) + 8;
LABEL_13:
        *a3 = v4;
LABEL_14:
        if (a4)
          *a4 = 0;
        return 0;
      case 1668444276:
LABEL_5:
        if (!a3)
          goto LABEL_14;
        v4 = 4;
        goto LABEL_13;
    }
  }
  return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
}

uint64_t AudibleAudioFile::GetProperty(AudibleAudioFile *this, int a2, unsigned int *a3, char *a4)
{
  int v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  if (a2 <= 1667788914)
  {
    if (a2 != 1633776244)
    {
      v7 = 1635083362;
LABEL_6:
      if (a2 != v7)
        return AudioFileObject::GetProperty(this, a2, a3, a4);
      if (*a3 >= 4)
      {
        result = 0;
        *a3 = 4;
        *(_DWORD *)a4 = 1;
        return result;
      }
      return 561211770;
    }
    if (*a3 >= 8)
    {
      result = (*(uint64_t (**)(AudibleAudioFile *, char *))(*(_QWORD *)this + 712))(this, a4);
      if (!(_DWORD)result)
        *a3 = 8;
      return result;
    }
    return 561211770;
  }
  if (a2 != 1667788915)
  {
    v7 = 1668444276;
    goto LABEL_6;
  }
  v9 = *(unsigned __int16 *)(*((_QWORD *)this + 161) + 528);
  v10 = 8 * v9 + 8;
  if (*a3 < v10)
    return 561211770;
  if (!*(_WORD *)(*((_QWORD *)this + 161) + 528))
  {
    result = 0;
    *(_DWORD *)a4 = 0;
    *a3 = v10;
    return result;
  }
  v11 = *((unsigned int *)this + 10);
  v12 = *((unsigned int *)this + 11);
  v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(*(unsigned __int16 *)(*((_QWORD *)this + 161) + 528));
  bzero(v13, 8 * v9);
  v14 = *((_QWORD *)this + 161);
  v15 = *(unsigned __int16 *)(v14 + 528);
  if (v13)
  {
    v16 = *(_QWORD *)(v14 + 536);
    if (v16)
    {
      if ((_DWORD)v15)
      {
        v17 = (uint64_t *)(v16 + 8);
        v18 = v13;
        v19 = v15;
        do
        {
          v20 = *v17;
          v17 += 3;
          *v18++ = v20;
          --v19;
        }
        while (v19);
        goto LABEL_22;
      }
      v25 = 0;
      *(_DWORD *)a4 = 0;
      *a3 = v10;
    }
    else
    {
      v25 = 4294967276;
    }
LABEL_30:
    operator delete(v13);
    return v25;
  }
LABEL_22:
  *(_DWORD *)a4 = v15;
  if ((_DWORD)v15)
  {
    v21 = 0;
    v22 = a4 + 8;
    v23 = (unint64_t *)v13;
    do
    {
      *v22++ = v21;
      v24 = *v23++;
      v21 += v24 / v11 * v12;
      --v15;
    }
    while (v15);
  }
  v25 = 0;
  result = 0;
  *a3 = v10;
  if (v13)
    goto LABEL_30;
  return result;
}

uint64_t AudibleAudioFile::GetNumBytes(AudibleAudioFile *this)
{
  return *((_QWORD *)this + 26);
}

uint64_t AudibleAudioFile::GetNumPackets(AudibleAudioFile *this)
{
  return *((_QWORD *)this + 26) / *((_QWORD *)this + 22);
}

uint64_t AudibleAudioFile::GetEstimatedDuration(AudibleAudioFile *this, double *a2)
{
  *a2 = (double)*((unint64_t *)this + 26) / ((double)*((uint64_t *)this + 21) * 0.125);
  return 0;
}

BOOL AudibleAudioFile::IsDataFormatSupported(AudibleAudioFile *this, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID;

  if (a2->mChannelsPerFrame != 1)
    return 0;
  mFormatID = a2->mFormatID;
  return mFormatID == 778924083 || mFormatID == 1096107074;
}

void AudibleAudioFormat::~AudibleAudioFormat(AudibleAudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL AudibleAudioFormat::ExtensionIsThisFormat(AudibleAudioFormat *this, CFStringRef theString1)
{
  return CFStringCompare(theString1, CFSTR("aa"), 1uLL) == kCFCompareEqualTo;
}

BOOL AudibleAudioFormat::FileDataIsThisFormat(AudibleAudioFormat *this, unsigned int a2, _DWORD *a3)
{
  return a2 >= 8 && a3[1] == 913674327;
}

uint64_t AudibleAudioFormat::CanWrite(AudibleAudioFormat *this)
{
  return 0;
}

const __CFArray *AudibleAudioFormat::GetExtensions(AudibleAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("aa");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *AudibleAudioFormat::GetUTIs(AudibleAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("com.audible.aa-audiobook");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void AudibleAudioFormat::GetFileTypeName(AudibleAudioFormat *this, const __CFString **a2)
{
  __CFBundle *v3;
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_5:
    v4 = CFSTR("AUDB");
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_5;
LABEL_3:
  v4 = CFBundleCopyLocalizedString(v3, CFSTR("AUDB"), CFSTR("AUDB"), CFSTR("FileTypeNames"));
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_18EFF99F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t AudibleAudioFormat::GetAvailableFormatIDs(AudibleAudioFormat *this, unsigned int *a2, void *__dst)
{
  unsigned int v3;
  size_t v4;
  uint64_t __src;

  __src = 0x415544422E6D7033;
  v3 = *a2 >> 2;
  if (v3 >= 2)
    v3 = 2;
  v4 = 4 * v3;
  *a2 = v4;
  if (__dst)
    memcpy(__dst, &__src, v4);
  return 0;
}

uint64_t AudibleAudioFormat::GetAvailableStreamDescriptions(AudibleAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  size_t v5;
  _OWORD v7[2];
  uint64_t v8;

  if (a2 == 778924083 || a2 == 1096107074)
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    DWORD2(v7[0]) = a2;
    if (*a3 >= 0x28)
      v5 = 40;
    else
      v5 = 0;
    *a3 = v5;
    if (__dst)
      memcpy(__dst, v7, v5);
    return 0;
  }
  else
  {
    *a3 = 0;
    return 1718449215;
  }
}

double AudibleAudioFormat::New(AudibleAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 80) = 0x6175646200000001;
  *(_QWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 96) = -1;
  *(_WORD *)(v1 + 100) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0x100000000;
  *(_DWORD *)(v1 + 136) = 65792;
  result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)v1 = &off_1E2906800;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 1288) = 0;
  return result;
}

uint64_t AT::TBitstreamWriter<unsigned short>::PutBits(uint64_t result, int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  char v7;
  _BYTE *v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _WORD *v13;
  int v14;

  v3 = a2 & ~(-1 << a3);
  v4 = *(_DWORD *)(result + 28);
  if (*(_DWORD *)(result + 32))
  {
    v5 = v4 - 8;
    if (v4 - 8 <= a3)
    {
      v6 = *(unsigned __int16 *)(result + 24);
      do
      {
        a3 -= v5;
        v7 = (v6 << v5) | ((unsigned __int16)v3 >> a3);
        v8 = *(_BYTE **)(result + 8);
        *(_QWORD *)(result + 8) = v8 + 1;
        *v8 = v7;
        v9 = *(_DWORD *)(result + 32) - 1;
        *(_WORD *)(result + 24) = 0;
        v4 = 16;
        *(_DWORD *)(result + 28) = 16;
        *(_DWORD *)(result + 32) = v9;
        v3 &= ~(-1 << a3);
        if (a3 < 8)
          break;
        v6 = 0;
        v5 = 8;
      }
      while (v9);
    }
    if (a3)
    {
      *(_WORD *)(result + 24) = v3 | (*(unsigned __int16 *)(result + 24) << a3);
      *(_DWORD *)(result + 28) = v4 - a3;
    }
  }
  else
  {
    *(_DWORD *)(result + 28) = v4 - a3;
    if ((int)(v4 - a3) < 1)
    {
      v10 = *(unsigned __int16 *)(result + 24);
      v11 = (v10 << v4) | (v3 >> (a3 - v4));
      v12 = v3 | (v10 << a3);
      if (v4 == a3)
        v11 = v12;
      *(_WORD *)(result + 24) = v11;
      v13 = *(_WORD **)(result + 8);
      if ((uint64_t)(*(_QWORD *)(result + 16) - (_QWORD)v13) >= 2)
      {
        *v13 = bswap32(v11) >> 16;
        v14 = *(_DWORD *)(result + 28);
        *(_WORD *)(result + 24) = v3 & ~(unsigned __int16)(-1 << -(char)v14);
        *(_DWORD *)(result + 28) = v14 + 16;
        v13 = *(_WORD **)(result + 8);
      }
      *(_QWORD *)(result + 8) = v13 + 1;
    }
    else
    {
      *(_WORD *)(result + 24) = v3 | (*(_WORD *)(result + 24) << a3);
    }
  }
  return result;
}

uint64_t SerializeTrackLoudnessData(const __CFDictionary *a1, unsigned __int8 *a2, unsigned __int16 a3, int a4, int a5)
{
  char v5;
  const __CFString *v7;
  int UInt32;
  unsigned __int16 v9;
  int v10;
  unsigned __int16 v11;
  int v12;
  unsigned __int16 v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  unsigned __int16 v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  __CFString **v26;
  int v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  const __CFString *v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unint64_t i;
  int v35;
  unsigned __int16 v36;
  float v37;
  unsigned __int16 v38;
  int v39;
  int v40;
  int v41;
  int v42;
  _BYTE *v43;
  unsigned int v44;
  int v45;
  _OWORD v47[2];
  uint64_t v48;
  unsigned int v49;
  CFMutableDictionaryRef Mutable;
  __int16 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unsigned int v55[2];
  const __CFDictionary *v56;
  __int16 v57;
  unsigned int v58;
  CFMutableDictionaryRef v59;
  __int16 v60;
  unsigned int v61[4];

  v5 = a5;
  *(_QWORD *)v55 = 0;
  v56 = a1;
  v57 = 0;
  *(_QWORD *)a2 = 0;
  a2[8] = 0;
  *(_QWORD *)&v52 = a2;
  *((_QWORD *)&v52 + 1) = a2;
  *(_QWORD *)&v53 = &a2[a4];
  WORD4(v53) = 0;
  if (a5)
    v7 = CFSTR("album loudness parameters");
  else
    v7 = CFSTR("main loudness parameters");
  HIDWORD(v53) = 16;
  LODWORD(v54) = a2 & 1;
  if (!CACFDictionary::HasKey((CACFDictionary *)&v56, v7))
  {
    v19 = 0;
    goto LABEL_104;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v51 = 257;
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v52, 0, 2u);
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v52, 1, 6u);
  CACFDictionary::GetCACFDictionary((CACFDictionary *)&v56, v7, (CACFDictionary *)&Mutable);
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v52, 0, 2u);
  UInt32 = CACFDictionary::GetUInt32((CACFDictionary *)&Mutable, CFSTR("aa EQ Set ID"), v55);
  v9 = v55[0];
  if (!UInt32)
    v9 = 0;
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v52, v9, 6u);
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v52, 0, 3u);
  v10 = CACFDictionary::GetUInt32((CACFDictionary *)&Mutable, CFSTR("aa downmix ID"), v55);
  v11 = v55[0];
  if (!v10)
    v11 = 0;
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v52, v11, 7u);
  v12 = CACFDictionary::GetUInt32((CACFDictionary *)&Mutable, CFSTR("aa DRC Set"), v55);
  v13 = v55[0];
  if (!v12)
    v13 = 0;
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v52, v13, 6u);
  if (CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, CFSTR("aa itu sample peak"), (float *)&v55[1]))
  {
    v14 = *(float *)&v55[1];
    if (*(float *)&v55[1] < -107.97)
      v14 = -107.97;
    v15 = (float)(20.0 - v14) * 32.0;
    v16 = v14 <= 19.969;
    v17 = 1.0;
    if (v16)
      v17 = v15;
    v18 = llroundf(v17);
  }
  else
  {
    v18 = 0;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v52, v18, 0xCu);
  if ((CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, CFSTR("aa itu true peak"), (float *)&v55[1]) & 1) != 0)
  {
    v20 = *(float *)&v55[1];
    if (*(float *)&v55[1] < -107.97)
      v20 = -107.97;
    v21 = (float)(20.0 - v20) * 32.0;
    v16 = v20 <= 19.969;
    v22 = 1.0;
    if (v16)
      v22 = v21;
    v23 = llroundf(v22);
  }
  else
  {
    v23 = 0;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v52, v23, 0xCu);
  if (CACFDictionary::GetUInt32((CACFDictionary *)&Mutable, CFSTR("aa true peak measurement system"), v55))
  {
    v24 = v55[0];
    if (v55[0] >= 0xC)
      goto LABEL_34;
  }
  else
  {
    v24 = 2;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v52, v24, 4u);
  v49 = 0;
  if (CACFDictionary::GetUInt32((CACFDictionary *)&Mutable, CFSTR("aa true peak reliability"), &v49))
  {
    v25 = v49;
    if (v49 > 3)
    {
LABEL_34:
      CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
      v19 = 1;
      goto LABEL_104;
    }
  }
  else
  {
    v25 = 3;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v52, v25, 4u);
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v52, a3, 8u);
  v47[0] = v52;
  v47[1] = v53;
  v48 = v54;
  *(_QWORD *)v61 = 0;
  if ((v5 & 1) != 0)
  {
    v26 = &kLoudnessInfoDictionary_AlbumLoudnessParametersKey;
LABEL_54:
    v30 = *v26;
    if (CACFDictionary::HasKey((CACFDictionary *)&v56, *v26))
    {
      v59 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v60 = 257;
      CACFDictionary::GetCACFDictionary((CACFDictionary *)&v56, v30, (CACFDictionary *)&v59);
      if ((v31 & 1) == 0
      {
        FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[0] = (uint64_t)CFSTR("aa itu loudness");
        unk_1EE1688F0 = CFSTR("aa ebu top of loudness range");
        qword_1EE1688F8 = (uint64_t)CFSTR("aa ebu max momentary loudness");
        unk_1EE168900 = CFSTR("aa ebu max short-term loudness");
        qword_1EE168908 = (uint64_t)CFSTR("aa ebu loudness range");
        unk_1EE168910 = CFSTR("aa production mixing level");
        qword_1EE168918 = (uint64_t)CFSTR("aa production room type");
        unk_1EE168920 = CFSTR("aa short term loudness");
      }
      if ((v32 & 1) == 0
      {
        FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodMeasurementSystemArray[0] = (uint64_t)CFSTR("aa itu measurement system");
        *(_QWORD *)algn_1EE168938 = CFSTR("aa ebu top measurement system");
        qword_1EE168940 = (uint64_t)CFSTR("aa ebu max measurement system");
        unk_1EE168948 = CFSTR("aa ebu short measurement system");
        qword_1EE168950 = (uint64_t)CFSTR("aa ebu measurement system");
        unk_1EE168958 = CFSTR("aa production mixing level measurement system");
        qword_1EE168960 = (uint64_t)CFSTR("aa production room type measurement system");
        unk_1EE168968 = CFSTR("aa short term loudness measurement system");
      }
      if ((v33 & 1) == 0
      {
        FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodReliabilityArray[0] = (uint64_t)CFSTR("aa itu reliability");
        unk_1EE168980 = CFSTR("aa ebu top reliability");
        qword_1EE168988 = (uint64_t)CFSTR("aa ebu max reliability");
        unk_1EE168990 = CFSTR("aa ebu short reliability");
        qword_1EE168998 = (uint64_t)CFSTR("aa ebu reliability");
        unk_1EE1689A0 = CFSTR("aa production mixing level reliability");
        qword_1EE1689A8 = (uint64_t)CFSTR("aa production room type reliability");
        unk_1EE1689B0 = CFSTR("aa short term loudness reliability");
      }
      for (i = 0; i != 8; ++i)
      {
        if (CACFDictionary::HasKey((CACFDictionary *)&v59, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[i]))
        {
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v47, FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodDefinitionArray[i], 8u);
          if (i <= 3)
          {
            CACFDictionary::GetFloat32((CACFDictionary *)&v59, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[i], (float *)&v61[1]);
            if (*(float *)&v61[1] >= -57.75)
            {
              if (*(float *)&v61[1] <= 6.0)
                v35 = llroundf((float)(*(float *)&v61[1] + 57.75) * 4.0);
              else
                v35 = 255;
            }
            else
            {
              v35 = 0;
            }
            AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v47, v35, 8u);
          }
          switch((int)i)
          {
            case 4:
              CACFDictionary::GetFloat32((CACFDictionary *)&v59, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[i], (float *)&v61[1]);
              v36 = CompressLoudnessRange(*(float *)&v61[1]);
              goto LABEL_80;
            case 5:
              CACFDictionary::GetFloat32((CACFDictionary *)&v59, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[i], (float *)&v61[1]);
              if (*(float *)&v61[1] < 80.0)
                goto LABEL_74;
              if (*(float *)&v61[1] > 111.0)
              {
                v36 = 31;
                goto LABEL_80;
              }
              v37 = *(float *)&v61[1] + -80.0;
              goto LABEL_79;
            case 6:
              CACFDictionary::GetUInt32((CACFDictionary *)&v59, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[i], v61);
              v36 = v61[0];
              goto LABEL_80;
            case 7:
              CACFDictionary::GetFloat32((CACFDictionary *)&v59, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[i], (float *)&v61[1]);
              if (*(float *)&v61[1] >= -116.0)
              {
                if (*(float *)&v61[1] <= 11.5)
                {
                  v37 = (float)(*(float *)&v61[1] + 116.0) + (float)(*(float *)&v61[1] + 116.0);
LABEL_79:
                  v36 = llroundf(v37);
                }
                else
                {
                  v36 = 255;
                }
              }
              else
              {
LABEL_74:
                v36 = 0;
              }
LABEL_80:
              AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v47, v36, 8u);
LABEL_81:
              if (CACFDictionary::GetUInt32((CACFDictionary *)&v59, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodMeasurementSystemArray[i], v61))
              {
                if (v61[0] > 0xB)
                  goto LABEL_50;
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v47, LOWORD(v61[0]), 4u);
                v58 = 0;
                if (CACFDictionary::GetUInt32((CACFDictionary *)&v59, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodReliabilityArray[i], &v58))
                {
                  v38 = v58;
                  if (v58 > 3)
                    goto LABEL_50;
                }
                else if (v61[0] - 1 > 5)
                {
                  v38 = 0;
                }
                else
                {
                  v38 = word_18F10C6DC[v61[0] - 1];
                }
                v41 = v38;
              }
              else
              {
                if (i <= 7 && ((0x9Fu >> i) & 1) != 0)
                {
                  v39 = word_18F117690[i];
                  v40 = 3;
                }
                else
                {
                  v39 = 0;
                  v40 = 0;
                }
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v47, v39, 4u);
                v41 = v40;
              }
              AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v47, v41, 4u);
              break;
            default:
              goto LABEL_81;
          }
        }
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v59);
    }
    v19 = 0;
    goto LABEL_99;
  }
  if (!CACFDictionary::HasKey((CACFDictionary *)&v56, CFSTR("dialogue anchor parameters")))
  {
LABEL_53:
    v26 = kLoudnessInfoDictionary_MainLoudnessParametersKey;
    goto LABEL_54;
  }
  v59 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v60 = 257;
  CACFDictionary::GetCACFDictionary((CACFDictionary *)&v56, CFSTR("dialogue anchor parameters"), (CACFDictionary *)&v59);
  CACFDictionary::GetFloat32((CACFDictionary *)&v59, CFSTR("aa itu loudness"), (float *)&v61[1]);
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v47, 2, 8u);
  if (*(float *)&v61[1] >= -57.75)
  {
    if (*(float *)&v61[1] <= 6.0)
      v27 = llroundf((float)(*(float *)&v61[1] + 57.75) * 4.0);
    else
      v27 = 255;
  }
  else
  {
    v27 = 0;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v47, v27, 8u);
  if (CACFDictionary::GetUInt32((CACFDictionary *)&v56, CFSTR("aa anchor measurement system"), v61))
  {
    v28 = v61[0];
    if (v61[0] >= 0xC)
      goto LABEL_50;
  }
  else
  {
    v28 = 0;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v47, v28, 4u);
  v58 = 0;
  if (!CACFDictionary::GetUInt32((CACFDictionary *)&v56, CFSTR("aa anchor reliability"), &v58))
  {
    v29 = 3;
    goto LABEL_52;
  }
  v29 = v58;
  if (v58 <= 3)
  {
LABEL_52:
    AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v47, v29, 4u);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v59);
    goto LABEL_53;
  }
LABEL_50:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v59);
  v19 = 1;
LABEL_99:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  v42 = HIDWORD(v53);
  if ((BYTE12(v53) & 7) != 0)
  {
    AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v52, 0, BYTE12(v53) & 7);
    v42 = HIDWORD(v53);
  }
  if (v42 != 16)
  {
    v43 = (_BYTE *)*((_QWORD *)&v52 + 1);
    v44 = WORD4(v53);
    v45 = 8 - v42;
    do
    {
      *v43++ = v44 >> v45;
      v45 -= 8;
    }
    while (v45 != -8);
  }
LABEL_104:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v56);
  return v19;
}

void sub_18EFFA62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a27);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a16);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a24);
  _Unwind_Resume(a1);
}

uint64_t ExpandLegacyLoudnessBox(CACFDictionary *a1, uint64_t a2, float *a3, _BYTE *a4)
{
  unsigned int v4;
  int v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  float v16;
  CACFDictionary *v17;
  const __CFString *v18;

  v4 = *(unsigned __int16 *)(a2 + 6);
  if (v4 == 0xFFFF)
    return 0xFFFFFFFFLL;
  v9 = bswap32(v4);
  v10 = -(float)((float)(HIWORD(v9) & 0x7FFF) * 0.0039062);
  if (v9 >> 16 >= 0)
    v10 = (float)(HIWORD(v9) & 0x7FFF) * 0.0039062;
  CACFDictionary::AddFloat32(a1, CFSTR("aa itu true peak"), v10);
  if (*(_BYTE *)(a2 + 10))
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned __int8 *)(*(_QWORD *)(a2 + 16) + v11);
      v14 = v13[1];
      v15 = *v13;
      if (v15 == 6)
      {
        if (v14 > 0x80)
        {
          v16 = (float)(int)(v14 - 204) + 70.0;
          if (v14 <= 0xCC)
            v16 = (float)((float)(int)(v14 - 128) * 0.5) + 32.0;
        }
        else
        {
          v16 = (float)v14 * 0.25;
        }
        v17 = a1;
        v18 = CFSTR("aa ebu loudness range");
LABEL_14:
        CACFDictionary::AddFloat32(v17, v18, v16);
      }
      else
      {
        v16 = (float)((float)v14 * -0.25) + 6.0;
        switch(v15)
        {
          case 1:
            v17 = a1;
            v18 = CFSTR("aa ebu top of loudness range");
            goto LABEL_14;
          case 2:
            v17 = a1;
            v18 = CFSTR("aa ebu max momentary loudness");
            goto LABEL_14;
          case 3:
            v17 = a1;
            v18 = CFSTR("aa ebu max short-term loudness");
            goto LABEL_14;
          case 4:
            v17 = a1;
            v18 = CFSTR("aa itu loudness");
            goto LABEL_14;
          case 5:
            *a3 = v16;
            *a4 = 1;
            break;
          default:
            break;
        }
      }
      ++v12;
      v11 += 4;
    }
    while (v12 < *(unsigned __int8 *)(a2 + 10));
  }
  return 0;
}

CACFDictionary *ExpandLoudnessBox(CACFDictionary *this, uint64_t a2, float *a3, _BYTE *a4)
{
  CACFDictionary *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  float v12;
  CACFDictionary *v13;
  const __CFString *v14;
  float v15;
  int v16;

  v7 = this;
  if (*(_WORD *)(a2 + 4))
    this = (CACFDictionary *)CACFDictionary::AddFloat32(this, CFSTR("aa itu sample peak"), (float)((float)*(unsigned __int16 *)(a2 + 4) * -0.03125) + 20.0);
  if (*(_WORD *)(a2 + 6))
    this = (CACFDictionary *)CACFDictionary::AddFloat32(v7, CFSTR("aa itu true peak"), (float)((float)*(unsigned __int16 *)(a2 + 6) * -0.03125) + 20.0);
  if (*(_BYTE *)(a2 + 10))
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (_BYTE *)(*(_QWORD *)(a2 + 16) + v8);
      v11 = v10[1];
      switch(*v10)
      {
        case 1:
          v12 = (double)v11 * 0.25 + -57.75;
          v13 = v7;
          v14 = CFSTR("aa itu loudness");
          goto LABEL_24;
        case 2:
          v15 = (double)v11 * 0.25 + -57.75;
          *a3 = v15;
          *a4 = 1;
          break;
        case 3:
          v12 = (double)v11 * 0.25 + -57.75;
          v13 = v7;
          v14 = CFSTR("aa ebu top of loudness range");
          goto LABEL_24;
        case 4:
          v12 = (double)v11 * 0.25 + -57.75;
          v13 = v7;
          v14 = CFSTR("aa ebu max momentary loudness");
          goto LABEL_24;
        case 5:
          v12 = (double)v11 * 0.25 + -57.75;
          v13 = v7;
          v14 = CFSTR("aa ebu max short-term loudness");
          goto LABEL_24;
        case 6:
          if (v11 > 0x80)
          {
            v12 = (float)(int)(v11 - 204) + 70.0;
            if (v11 <= 0xCC)
              v12 = (float)((float)(int)(v11 - 128) * 0.5) + 32.0;
          }
          else
          {
            v12 = (float)v11 * 0.25;
          }
          v13 = v7;
          v14 = CFSTR("aa ebu loudness range");
          goto LABEL_24;
        case 7:
          if (v11 >= 0x1F)
            v16 = 31;
          else
            v16 = v10[1];
          v12 = (float)(v16 + 80);
          v13 = v7;
          v14 = CFSTR("aa production mixing level");
          goto LABEL_24;
        case 8:
          this = (CACFDictionary *)CACFDictionary::AddUInt32(v7, CFSTR("aa production room type"));
          break;
        case 9:
          v12 = (float)((float)v11 * 0.5) + -116.0;
          v13 = v7;
          v14 = CFSTR("aa short term loudness");
LABEL_24:
          this = (CACFDictionary *)CACFDictionary::AddFloat32(v13, v14, v12);
          break;
        default:
          break;
      }
      ++v9;
      v8 += 4;
    }
    while (v9 < *(unsigned __int8 *)(a2 + 10));
  }
  return this;
}

BOOL FindCanonicalLoudness(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _BYTE *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void **v28;
  char *v29;
  _BYTE *v30;
  unint64_t v31;
  char *v32;
  void *v33;
  char *v34;

  v3 = -1431655765 * ((unint64_t)(a2 - a1) >> 3);
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = 1;
    while (1)
    {
      v7 = *(_QWORD *)(a1 + 24 * v5);
      v8 = -858993459 * ((unint64_t)(*(_QWORD *)(a1 + 24 * v5 + 8) - v7) >> 3);
      if ((_DWORD)v8)
        break;
LABEL_20:
      v6 = ++v5 < v3;
      if (v5 == v3)
        return 0;
    }
    v9 = 0;
    v10 = *(unsigned __int8 **)(a1 + 24 * v5);
    while (1)
    {
      v11 = *v10;
      if (v11 == 63 || v11 == 0)
      {
        v13 = v10[1];
        if (v13 == 127 || v13 == 0)
        {
          v15 = v10[2];
          if (v15 == 63 || v15 == 0)
            break;
        }
      }
      ++v9;
      v10 += 40;
      if (v8 == v9)
        goto LABEL_20;
    }
    v17 = *(_QWORD *)v10;
    *(_DWORD *)(a3 + 7) = *(_DWORD *)(v10 + 7);
    *(_QWORD *)a3 = v17;
    if (v10 != (unsigned __int8 *)a3)
    {
      v18 = v7 + 40 * v9;
      v20 = (_QWORD *)(a3 + 16);
      v19 = *(char **)(a3 + 16);
      v21 = *(char **)(v18 + 16);
      v22 = *(_BYTE **)(v18 + 24);
      v23 = v22 - v21;
      v24 = (v22 - v21) >> 2;
      v25 = *(_QWORD *)(a3 + 32);
      if (v24 <= (v25 - (uint64_t)v19) >> 2)
      {
        v28 = (void **)(a3 + 24);
        v30 = *(_BYTE **)(a3 + 24);
        v31 = (v30 - v19) >> 2;
        if (v31 < v24)
        {
          v32 = &v21[4 * v31];
          if (v30 != v19)
          {
            memmove(v19, v21, v30 - v19);
            v19 = (char *)*v28;
          }
          v23 = v22 - v32;
          if (v22 == v32)
            goto LABEL_41;
          v33 = v19;
          v34 = v32;
          goto LABEL_40;
        }
      }
      else
      {
        if (v19)
        {
          *(_QWORD *)(a3 + 24) = v19;
          operator delete(v19);
          v25 = 0;
          *v20 = 0;
          *(_QWORD *)(a3 + 24) = 0;
          *(_QWORD *)(a3 + 32) = 0;
        }
        if ((v23 & 0x8000000000000000) != 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v26 = v25 >> 1;
        if (v25 >> 1 <= v24)
          v26 = (v22 - v21) >> 2;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        std::vector<float>::__vallocate[abi:ne180100]((_QWORD *)(a3 + 16), v27);
        v29 = *(char **)(a3 + 24);
        v28 = (void **)(a3 + 24);
        v19 = v29;
      }
      if (v22 == v21)
      {
LABEL_41:
        *v28 = &v19[v23];
        return v6;
      }
      v33 = v19;
      v34 = v21;
LABEL_40:
      memmove(v33, v34, v23);
      goto LABEL_41;
    }
  }
  else
  {
    return 0;
  }
  return v6;
}

void MP4BoxParser_TrackHeader::~MP4BoxParser_TrackHeader(MP4BoxParser_TrackHeader *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_TrackHeader::Init(MP4BoxParser **this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) != 1953196132)
      return 4294967294;
    if (*((_BYTE *)this + 56))
    {
      if (*((_BYTE *)this + 56) != 1)
        return 0xFFFFFFFFLL;
      v3 = 16;
    }
    else
    {
      v3 = 8;
    }
    v4 = v3 + (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this);
    result = MP4BoxParser::ReadDataSourceBytes(this[1], v4, 4uLL, (char *)this + 60);
    if (!(_DWORD)result)
      *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
  }
  return result;
}

void MP4BoxParser_Movie::~MP4BoxParser_Movie(MP4BoxParser_Movie *this)
{
  MP4BoxParser_Movie::~MP4BoxParser_Movie(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E29078B8;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((_QWORD *)this + 8);
    if (v2)
    {
      std::__list_imp<MP4BoxInfo>::clear(*((uint64_t **)this + 8));
      MEMORY[0x193FFE460](v2, 0x1020C4062D53EE8);
    }
  }
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t MP4BoxParser_Movie::Init(__n128 ***this)
{
  uint64_t result;
  __n128 **v3;
  uint64_t v4;
  int64_t v5;
  __n128 **v6;
  int64_t v7;

  result = MP4BoxParser::Initialize((MP4BoxParser *)this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) == 1836019574)
    {
      if (*((_BYTE *)this + 56))
      {
        v3 = (__n128 **)operator new();
        *v3 = (__n128 *)v3;
        v3[1] = (__n128 *)v3;
        v3[2] = 0;
        this[8] = v3;
        v4 = (uint64_t)this[1];
        v5 = ((unsigned int (*)(__n128 ***))(*this)[3])(this);
        v6 = this[3];
        v7 = (int64_t)v6 - ((unsigned int (*)(__n128 ***))(*this)[3])(this);
        return FillMP4BoxTable(v4, v5, v7, this[8], 1, 0);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

void *MP4BoxParser_Movie::GetAudioTrackData(MP4BoxParser_Movie *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  unsigned int v18;
  size_t v19;
  void *v20;
  std::bad_alloc *exception;
  std::bad_alloc *v22;
  __n128 **v23[3];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 8);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 == v4)
    return 0;
  v10 = 0;
  do
  {
    if (*(_DWORD *)(v5 + 16) == 1953653099)
      ++v10;
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5 != v4);
  if (v10 <= a2)
    return 0;
  v11 = 0;
  v12 = 0;
  while (1)
  {
    v13 = *((_QWORD *)this + 8);
    v14 = *(_QWORD *)(v13 + 8);
    if (v14 != v13)
      break;
LABEL_21:
    if (++v11 == v10)
      return 0;
  }
  v15 = 0;
  while (*(_DWORD *)(v14 + 16) != 1953653099)
  {
LABEL_14:
    v14 = *(_QWORD *)(v14 + 8);
    if (v14 == v13)
      goto LABEL_21;
  }
  if (v15 != v11)
  {
    ++v15;
    goto LABEL_14;
  }
  MP4BoxParser_Track::MP4BoxParser_Track((uint64_t)v23, *((_QWORD *)this + 1), *(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), v11);
  if (MP4BoxParser_Track::Init(v23)
    || MP4BoxParser_Track::GetTrackType((MP4BoxParser_Track *)v23) != 1936684398)
  {
LABEL_20:
    MP4BoxParser_Track::~MP4BoxParser_Track((MP4BoxParser_Track *)v23);
    goto LABEL_21;
  }
  if (v12 != a2)
  {
    ++v12;
    goto LABEL_20;
  }
  v18 = v24;
  v19 = v24;
  v20 = malloc_type_malloc(v24, 0x2C8E6D5CuLL);
  v16 = v20;
  if (v19 && !v20)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v22 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v20, v19);
  if (MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), *(_QWORD *)(v14 + 32), v19, v16))
  {
    free(v16);
    v16 = 0;
  }
  else
  {
    *a3 = v18;
    *a4 = v11;
  }
  MP4BoxParser_Track::~MP4BoxParser_Track((MP4BoxParser_Track *)v23);
  return v16;
}

void sub_18EFFB104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MP4BoxParser_Track::~MP4BoxParser_Track((MP4BoxParser_Track *)&a9);
  _Unwind_Resume(a1);
}

void MP4BoxParser::~MP4BoxParser(MP4BoxParser *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser::Initialize(MP4BoxParser *this)
{
  uint64_t result;
  MP4BoxParser *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8[2];
  uint64_t v9;

  if (*((_BYTE *)this + 16))
    return 0;
  v3 = (MP4BoxParser *)*((_QWORD *)this + 1);
  if (!v3)
    return 0xFFFFFFFFLL;
  *((_DWORD *)this + 9) = 8;
  result = MP4BoxParser::ReadDataSourceBytes(v3, 0, 8uLL, v8);
  if ((_DWORD)result)
    return result;
  v4 = v8[0];
  v5 = bswap32(v8[1]);
  *((_QWORD *)this + 3) = bswap32(v8[0]);
  *((_DWORD *)this + 5) = v5;
  if (v4 == 0x1000000)
  {
    result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), 8, 8uLL, (char *)this + 24);
    if ((_DWORD)result)
      return result;
    *((_BYTE *)this + 32) = 1;
    *((_DWORD *)this + 9) = 16;
    *((_QWORD *)this + 3) = bswap64(*((_QWORD *)this + 3));
  }
  v9 = 0;
  if (MP4BoxParser::GetDataSourceSize(*((MP4BoxParser **)this + 1), &v9))
    return 0xFFFFFFFFLL;
  v6 = *((_QWORD *)this + 3);
  v7 = *((unsigned int *)this + 9);
  if (v6 < (unint64_t)v7 || v9 < v7)
    return 0xFFFFFFFFLL;
  if (v6 <= v9)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  else
    *((_QWORD *)this + 3) = v9;
  if (*((_DWORD *)this + 5) != 1970628964)
  {
LABEL_19:
    result = 0;
    *((_BYTE *)this + 16) = 1;
    return result;
  }
  result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), *((unsigned int *)this + 9), 0x10uLL, (char *)this + 40);
  if (!(_DWORD)result)
  {
    *((_DWORD *)this + 9) += 16;
    goto LABEL_19;
  }
  return result;
}

uint64_t MP4BoxParser::ReadDataSourceBytes(MP4BoxParser *this, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v10 = "MP4_BoxParser.cpp";
      v11 = 1024;
      v12 = 1086;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  no DataSource", buf, 0x12u);
    }
    __break(1u);
  }
  v8 = 0;
  v5 = (*(uint64_t (**)(MP4BoxParser *, _QWORD, uint64_t, unint64_t, void *, unsigned int *))(*(_QWORD *)this + 48))(this, 0, a2, a3, a4, &v8);
  if ((_DWORD)v5)
  {
    v6 = v5;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v10 = "MP4_BoxParser.cpp";
      v11 = 1024;
      v12 = 1089;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource read failed", buf, 0x12u);
    }
  }
  else if (v8 >= a3)
  {
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v10 = "MP4_BoxParser.cpp";
      v11 = 1024;
      v12 = 1090;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource read insufficient amount", buf, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t MP4BoxParser::GetDataSourceSize(MP4BoxParser *this, uint64_t *a2)
{
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v3 = 136315394;
      v4 = "MP4_BoxParser.cpp";
      v5 = 1024;
      v6 = 1098;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  no DataSource", (uint8_t *)&v3, 0x12u);
    }
    __break(1u);
  }
  return (*(uint64_t (**)(MP4BoxParser *, uint64_t *))(*(_QWORD *)this + 24))(this, a2);
}

uint64_t MP4BoxParser_Full::Initialize(MP4BoxParser_Full *this)
{
  uint64_t result;
  char v3;
  __int16 v4;
  char v5;

  result = MP4BoxParser::Initialize(this);
  if (!(_DWORD)result)
  {
    result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), *((unsigned int *)this + 9), 4uLL, &v3);
    if (!(_DWORD)result)
    {
      *((_BYTE *)this + 56) = v3;
      *(_WORD *)((char *)this + 57) = v4;
      *((_BYTE *)this + 59) = v5;
    }
  }
  return result;
}

uint64_t NUMovieBox::SerializeToDataSource(unsigned int *a1, uint64_t a2, uint64_t a3, int a4, const void *a5, unsigned int a6, const void *a7, unsigned int a8, uint64_t a9, unsigned int *a10, unsigned int *a11, unsigned int *a12, void *a13, unsigned int a14, char a15)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int8x8_t v27;
  int8x8_t v28;
  int8x8_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int8x8_t v39;
  int8x8_t v40;
  char *v41;
  char *v42;
  int8x8_t v43;
  int8x8_t v44;
  char *v45;
  int v46;
  __int128 v47;
  char *v48;
  int8x8_t *v49;
  size_t v50;
  size_t v51;
  int8x8_t v52;
  unsigned int v53;
  size_t v54;
  int8x8_t v55;
  unsigned int v56;
  int8x8_t *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  uint64_t v64;
  unint64_t v65;
  int8x8_t *v66;
  int8x8_t *v67;
  unsigned int v68;
  unsigned int *v69;
  unint64_t v70;
  size_t v71;
  unint64_t v72;
  size_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  BOOL v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  const void *v84;
  unsigned int v85;
  uint64_t v86;
  std::bad_alloc *exception;
  std::bad_alloc *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  unsigned int v115;
  int8x16_t v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  int8x16_t v121;
  unsigned int v122;
  int8x16_t v123;
  unsigned int v124;
  int8x16_t v125;
  unsigned int v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  unsigned int v130;
  int8x16_t v131;
  unsigned int v132;
  unsigned int v133;
  int8x16_t v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  __int16 v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int8x8_t v145;
  int8x8_t v146;
  unsigned int v147;
  unsigned int v148;
  __int32 v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  __int32 v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v158;
  __int16 __src;
  unsigned int v160[3];

  v16 = a1 + 67;
  *(unsigned int *)((char *)a1 + 358) += a6;
  v17 = *(unsigned int *)((char *)a1 + 350) + a6;
  *(unsigned int *)((char *)a1 + 350) = v17;
  v18 = *(unsigned int *)((char *)a1 + 290) + a6;
  *(unsigned int *)((char *)a1 + 290) = v18;
  v19 = a1[54] + a6;
  a1[54] = v19;
  v20 = a14 + a6 + a1[29];
  a1[29] = v20;
  v21 = a14 + a6 + a8 + *a1;
  *a1 = v21;
  if (a4)
    *((_BYTE *)a1 + 366) = 1;
  v22 = a11;
  if (a9)
  {
    v20 += 36;
    a1[29] = v20;
    v21 += 36;
    *a1 = v21;
  }
  if (a10 || a11 || a12)
  {
    if (a10)
    {
      v23 = 4 * bswap32(a10[3]) + 16;
      if (!a11)
      {
LABEL_11:
        v24 = v22 + v23;
        if (a12)
          v25 = 8 * bswap32(a12[4]) + 20;
        else
          v25 = 0;
        v26 = v24 + v25;
        *(unsigned int *)((char *)a1 + 350) = v26 + v17;
        *(unsigned int *)((char *)a1 + 290) = v26 + v18;
        a1[54] = v26 + v19;
        v20 += v26;
        a1[29] = v20;
        v21 += v26;
        *a1 = v21;
        goto LABEL_17;
      }
    }
    else
    {
      v23 = 0;
      if (!a11)
        goto LABEL_11;
    }
    v22 = 2 * bswap32(a11[5]) + 24;
    goto LABEL_11;
  }
LABEL_17:
  v27 = *(int8x8_t *)(a1 + 1);
  v135 = a1[3];
  v136 = a1[4];
  v134 = *(int8x16_t *)(a1 + 5);
  v133 = a1[9];
  v132 = *((unsigned __int16 *)a1 + 20);
  v130 = *((unsigned __int16 *)a1 + 21);
  v131 = *(int8x16_t *)(a1 + 11);
  v128 = *(int8x16_t *)(a1 + 19);
  v129 = *(int8x16_t *)(a1 + 15);
  v127 = *(int8x16_t *)(a1 + 23);
  v28 = *(int8x8_t *)(a1 + 27);
  v29 = *(int8x8_t *)(a1 + 30);
  v126 = a1[32];
  v137 = a1[33];
  v125 = *(int8x16_t *)(a1 + 34);
  v30 = *(int8x8_t *)(a1 + 38);
  v124 = a1[40];
  v31 = *(int8x8_t *)(a1 + 41);
  v121 = *(int8x16_t *)(a1 + 47);
  v123 = *(int8x16_t *)(a1 + 43);
  v32 = *(int8x8_t *)(a1 + 51);
  v138 = a1[58];
  v33 = *((unsigned __int16 *)a1 + 126);
  v34 = *((unsigned __int16 *)a1 + 127);
  v139 = a1[66];
  v35 = a1[71];
  v140 = *((_WORD *)a1 + 144);
  v141 = *(unsigned int *)((char *)a1 + 306);
  v36 = *((unsigned __int16 *)a1 + 155);
  v115 = *((unsigned __int16 *)a1 + 156);
  v142 = *(unsigned int *)((char *)a1 + 330);
  v118 = *(unsigned int *)((char *)a1 + 342);
  v120 = a1[53];
  v143 = *(unsigned int *)((char *)a1 + 346);
  v144 = *(unsigned int *)((char *)a1 + 366);
  v117 = *(unsigned int *)((char *)a1 + 370);
  v147 = *(unsigned int *)((char *)a1 + 386);
  v148 = *(unsigned int *)((char *)a1 + 410);
  v149 = *(unsigned int *)((char *)a1 + 382);
  v152 = *(unsigned int *)((char *)a1 + 422);
  v37 = *(unsigned int *)((char *)a1 + 434);
  v151 = *(unsigned int *)((char *)a1 + 426);
  v38 = bswap32(v37);
  if (v151 != 1937013298)
    v37 = v38;
  v155 = v37;
  v153 = *(unsigned int *)((char *)a1 + 406);
  v154 = *(unsigned int *)((char *)a1 + 430);
  v103 = *(int8x16_t *)(a1 + 54);
  v105 = *(int8x16_t *)(a1 + 59);
  v39 = *(int8x8_t *)(a1 + 64);
  v107 = *(int8x16_t *)v16;
  v109 = *(int8x16_t *)((char *)a1 + 290);
  v40 = *(int8x8_t *)((char *)a1 + 334);
  v111 = *(int8x16_t *)((char *)a1 + 314);
  v113 = *(int8x16_t *)((char *)a1 + 350);
  v145 = *(int8x8_t *)((char *)a1 + 374);
  v146 = *(int8x8_t *)((char *)a1 + 398);
  v150 = *(unsigned int *)((char *)a1 + 438);
  v92 = *(unsigned int *)((char *)a1 + 450);
  v93 = *(unsigned int *)((char *)a1 + 458);
  v90 = *(unsigned int *)((char *)a1 + 454);
  v91 = *(unsigned int *)((char *)a1 + 462);
  v41 = (char *)malloc_type_malloc(v21, 0x2C8E6D5CuLL);
  v42 = v41;
  if (v21 && !v41)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v89 = std::bad_alloc::bad_alloc(exception);
  }
  v104 = vrev32q_s8(v103);
  v106 = vrev32q_s8(v105);
  v43 = vrev32_s8(v39);
  v101 = bswap32(v35);
  v102 = bswap32(v33) >> 16;
  v108 = vrev32q_s8(v107);
  v110 = vrev32q_s8(v109);
  v44 = vrev32_s8(v40);
  v99 = bswap32(v36) >> 16;
  v100 = bswap32(v34) >> 16;
  v98 = bswap32(v115) >> 16;
  v116 = vrev32q_s8(v113);
  v112 = vrev32q_s8(v111);
  v114 = vrev32q_s8(v121);
  v122 = bswap32(v117);
  v119 = bswap32(v118);
  bzero(v41, v21);
  v160[0] = 216;
  *(_DWORD *)v42 = bswap32(v21);
  *(int8x8_t *)(v42 + 4) = vrev32_s8(v27);
  *((_DWORD *)v42 + 3) = bswap32(v135);
  *((_DWORD *)v42 + 4) = v136;
  *(int8x16_t *)(v42 + 20) = vrev32q_s8(v134);
  *((_DWORD *)v42 + 9) = bswap32(v133);
  *((_WORD *)v42 + 20) = __rev16(v132);
  *((_WORD *)v42 + 21) = __rev16(v130);
  *(int8x16_t *)(v42 + 44) = vrev32q_s8(v131);
  *(int8x16_t *)(v42 + 60) = vrev32q_s8(v129);
  *(int8x16_t *)(v42 + 76) = vrev32q_s8(v128);
  *(int8x16_t *)(v42 + 92) = vrev32q_s8(v127);
  *(int8x8_t *)(v42 + 108) = vrev32_s8(v28);
  *((_DWORD *)v42 + 29) = bswap32(v20);
  *((int8x8_t *)v42 + 15) = vrev32_s8(v29);
  *((_DWORD *)v42 + 32) = bswap32(v126);
  *((_DWORD *)v42 + 33) = v137;
  *(int8x16_t *)(v42 + 136) = vrev32q_s8(v125);
  *((int8x8_t *)v42 + 19) = vrev32_s8(v30);
  *((_DWORD *)v42 + 40) = bswap32(v124);
  *(int8x8_t *)(v42 + 164) = vrev16_s8(v31);
  *(int8x16_t *)(v42 + 172) = vrev32q_s8(v123);
  *(int8x16_t *)(v42 + 188) = v114;
  *(int8x8_t *)(v42 + 204) = vrev32_s8(v32);
  v45 = v42 + 216;
  *((_DWORD *)v42 + 53) = bswap32(v120);
  if (a9)
  {
    v160[0] = 36;
    v46 = *(_DWORD *)(a9 + 32);
    v47 = *(_OWORD *)(a9 + 16);
    *(_OWORD *)v45 = *(_OWORD *)a9;
    *(_OWORD *)(v42 + 232) = v47;
    *((_DWORD *)v42 + 62) = v46;
    v45 = v42 + 252;
  }
  v160[0] = 158;
  *(int8x16_t *)v45 = v104;
  *((_DWORD *)v45 + 4) = v138;
  *(int8x16_t *)(v45 + 20) = v106;
  *((_WORD *)v45 + 18) = v102;
  *((_WORD *)v45 + 19) = v100;
  *((int8x8_t *)v45 + 5) = v43;
  *((_DWORD *)v45 + 12) = v139;
  *(int8x16_t *)(v45 + 52) = v108;
  *((_DWORD *)v45 + 17) = v101;
  *((_WORD *)v45 + 36) = v140;
  *(int8x16_t *)(v45 + 74) = v110;
  *(_DWORD *)(v45 + 90) = v141;
  *((_WORD *)v45 + 47) = v99;
  *((_WORD *)v45 + 48) = v98;
  *(int8x16_t *)(v45 + 98) = v112;
  *(_DWORD *)(v45 + 114) = v142;
  *(int8x8_t *)(v45 + 118) = v44;
  *(_DWORD *)(v45 + 126) = v119;
  *(_DWORD *)(v45 + 130) = v143;
  v48 = v45 + 158;
  *(int8x16_t *)(v45 + 134) = v116;
  *(_DWORD *)(v45 + 150) = v144;
  *(_DWORD *)(v45 + 154) = v122;
  memcpy(v45 + 158, a5, a6);
  v49 = (int8x8_t *)&v48[a6];
  if (a10)
  {
    v50 = 4 * bswap32(a10[3]) + 16;
    v160[0] = v50;
    memcpy(v49, a10, v50);
    v49 = (int8x8_t *)((char *)v49 + v50);
  }
  if (a11)
  {
    v51 = 2 * bswap32(a11[5]) + 24;
    memcpy(v49, a11, v51);
    v49 = (int8x8_t *)((char *)v49 + v51);
  }
  v52 = vrev32_s8(v145);
  v53 = bswap32(v147);
  if (a12 && *(unsigned int *)((char *)v16 + 118))
  {
    v54 = 8 * bswap32(a12[4]) + 20;
    memcpy(v49, a12, v54);
    v49 = (int8x8_t *)((char *)v49 + v54);
  }
  v55 = vrev32_s8(v146);
  v56 = bswap32(v148);
  *v49 = v52;
  v49[1].i32[0] = v149;
  v49[1].i32[1] = v53;
  v57 = v49 + 2;
  if (*(unsigned int *)((char *)v16 + 118))
  {
    v58 = 0;
    v59 = 0;
    do
    {
      v160[0] = 8;
      v57[v58 / 8] = (int8x8_t)bswap64(*(unsigned int *)(**(_QWORD **)((char *)v16 + 122) + v58 + 4) | ((unint64_t)*(unsigned int *)(**(_QWORD **)((char *)v16 + 122) + v58) << 32));
      ++v59;
      v58 += 8;
    }
    while (v59 < *(unsigned int *)((char *)v16 + 118));
    v57 = (int8x8_t *)((char *)v57 + v58);
  }
  v60 = bswap32(v152);
  v61 = bswap32(v151);
  v62 = bswap32(v150);
  *v57 = v55;
  v57[1].i32[0] = v153;
  v57[1].i32[1] = v56;
  v63 = (unsigned int *)&v57[2];
  if (*(unsigned int *)((char *)v16 + 142))
  {
    v64 = 0;
    v65 = 0;
    do
    {
      v66 = (int8x8_t *)&v63[v64];
      v67 = (int8x8_t *)(**(_QWORD **)((char *)v16 + 146) + v64 * 4);
      v68 = bswap32(v67[1].u32[0]);
      *v66 = vrev32_s8(*v67);
      v66[1].i32[0] = v68;
      ++v65;
      v64 += 3;
    }
    while (v65 < *(unsigned int *)((char *)v16 + 142));
    v63 = (unsigned int *)((char *)v63 + v64 * 4);
  }
  *v63 = v60;
  v63[1] = v61;
  v63[2] = v154;
  v63[3] = v155;
  v63[4] = v62;
  v69 = v63 + 5;
  if ((a15 & 1) != 0)
  {
    if (*(unsigned int *)((char *)v16 + 170))
    {
      if (*((_BYTE *)a1 + 437) != 16)
      {
        free(v42);
        return 4294967294;
      }
      v70 = 0;
      v71 = 2;
      v160[0] = 2;
      do
      {
        __src = bswap32(*(_DWORD *)(**(_QWORD **)((char *)v16 + 174) + 4 * v70)) >> 16;
        memcpy(v69, &__src, v71);
        v71 = v160[0];
        v69 = (unsigned int *)((char *)v69 + v160[0]);
        ++v70;
      }
      while (v70 < *(unsigned int *)((char *)v16 + 170));
    }
  }
  else if (!*(unsigned int *)((char *)v16 + 166))
  {
    v160[0] = 4;
    if (*(unsigned int *)((char *)v16 + 170))
    {
      v72 = 0;
      v73 = 4;
      do
      {
        v158 = bswap32(*(_DWORD *)(**(_QWORD **)((char *)v16 + 174) + 4 * v72));
        memcpy(v69, &v158, v73);
        v73 = v160[0];
        v69 = (unsigned int *)((char *)v69 + v160[0]);
        ++v72;
      }
      while (v72 < *(unsigned int *)((char *)v16 + 170));
    }
  }
  v74 = bswap32(v90);
  v75 = bswap32(v92);
  v76 = bswap32(v91);
  v77 = *(unsigned int *)((char *)v16 + 194);
  if (v77)
  {
    v78 = *(_QWORD *)(**(_QWORD **)((char *)v16 + 198) + 8 * (v77 - 1));
    v79 = v78 <= 0xFFFFFFFFLL;
    v77 = v78 > 0xFFFFFFFFLL;
    if (!v79)
      v74 = 875982691;
  }
  v160[0] = 16;
  *v69 = v75;
  v69[1] = v74;
  v69[2] = v93;
  v69[3] = v76;
  v80 = v69 + 4;
  if (*(unsigned int *)((char *)v16 + 194))
  {
    v81 = 0;
    do
    {
      v82 = *(_QWORD *)(**(_QWORD **)((char *)v16 + 198) + 8 * v81);
      if (v77)
      {
        v160[0] = 8;
        *v80 = bswap64(v82);
        v83 = 8;
      }
      else
      {
        v160[0] = 4;
        *(_DWORD *)v80 = bswap32(v82);
        v83 = v160[0];
      }
      v80 = (_QWORD *)((char *)v80 + v83);
      ++v81;
    }
    while (v81 < *(unsigned int *)((char *)v16 + 194));
  }
  if (a13)
  {
    v84 = a7;
    v85 = a8;
    if (a14)
    {
      memcpy(v80, a13, a14);
      v80 = (_QWORD *)((char *)v80 + a14);
    }
    if (!a7)
      goto LABEL_63;
    goto LABEL_61;
  }
  v84 = a7;
  v85 = a8;
  if (a7)
  {
LABEL_61:
    if (v85)
      memcpy(v80, v84, v85);
  }
LABEL_63:
  v86 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, char *, unsigned int *))(*(_QWORD *)a2 + 56))(a2, 0, a3, *a1, v42, v160);
  free(v42);
  return v86;
}

void NUMovieBox::AppendTimeToSample(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  void **v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v3 = (_DWORD *)a1;
  v4 = (_DWORD *)(a1 + 290);
  v5 = *(_DWORD *)(a1 + 386);
  if (!v5)
  {
    *(_DWORD *)(a1 + 374) += 8;
    *(_DWORD *)(a1 + 386) = 1;
    v6 = *(void ***)(a1 + 390);
    v11 = (uint64_t *)v6[1];
    v10 = (unint64_t)v6[2];
    if ((unint64_t)v11 < v10)
    {
LABEL_14:
      *v11 = (a2 << 32) | 1;
      v18 = v11 + 1;
LABEL_33:
      v6[1] = v18;
      v4[15] += 8;
      *v4 += 8;
      v3[54] += 8;
      v3[29] += 8;
      v9 = 8;
      goto LABEL_34;
    }
    v12 = ((char *)v11 - (_BYTE *)*v6) >> 3;
    if (!((unint64_t)(v12 + 1) >> 61))
    {
      v13 = v10 - (_QWORD)*v6;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v15);
      else
        v16 = 0;
      v24 = (uint64_t *)(v15 + 8 * v12);
      v25 = v15 + 8 * v16;
      *v24 = (a2 << 32) | 1;
      v18 = v24 + 1;
      v27 = (char *)*v6;
      v26 = (char *)v6[1];
      if (v26 == *v6)
        goto LABEL_31;
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v24 = v28;
      }
      while (v26 != v27);
      goto LABEL_30;
    }
LABEL_35:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  v6 = *(void ***)(a1 + 390);
  v7 = (v5 - 1);
  v8 = *v6;
  if (*((_DWORD *)*v6 + 2 * v7 + 1) != (_DWORD)a2)
  {
    *(_DWORD *)(a1 + 374) += 8;
    *(_DWORD *)(a1 + 386) = v5 + 1;
    v11 = (uint64_t *)v6[1];
    v17 = (unint64_t)v6[2];
    if ((unint64_t)v11 < v17)
      goto LABEL_14;
    v19 = ((char *)v11 - v8) >> 3;
    if (!((unint64_t)(v19 + 1) >> 61))
    {
      v20 = v17 - (_QWORD)v8;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1))
        v21 = v19 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v22);
      else
        v23 = 0;
      v24 = (uint64_t *)(v22 + 8 * v19);
      v25 = v22 + 8 * v23;
      *v24 = (a2 << 32) | 1;
      v18 = v24 + 1;
      v29 = (char *)*v6;
      v26 = (char *)v6[1];
      if (v26 == *v6)
        goto LABEL_31;
      do
      {
        v30 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v24 = v30;
      }
      while (v26 != v29);
LABEL_30:
      v26 = (char *)*v6;
LABEL_31:
      *v6 = v24;
      v6[1] = v18;
      v6[2] = (void *)v25;
      if (v26)
        operator delete(v26);
      goto LABEL_33;
    }
    goto LABEL_35;
  }
  v3 = &v8[8 * v7];
  v9 = 1;
LABEL_34:
  *v3 += v9;
}

void NUMovieBox::AppendPacketSize(uint64_t a1, int a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  int v30;
  _DWORD *v31;
  unint64_t v32;
  int v33;

  v3 = (_DWORD *)a1;
  v4 = (_DWORD *)(a1 + 290);
  if (*(_DWORD *)(a1 + 426) == 1937011578)
  {
    if (!*(_DWORD *)(a1 + 434))
    {
      v5 = *(_QWORD *)(a1 + 442);
      v7 = *(_DWORD **)(v5 + 8);
      v6 = *(_QWORD *)(v5 + 16);
      if ((unint64_t)v7 < v6)
      {
        *v7 = a2;
        v8 = v7 + 1;
LABEL_36:
        *(_QWORD *)(v5 + 8) = v8;
        v14 = 4;
        goto LABEL_37;
      }
      v22 = *(_DWORD **)v5;
      v23 = ((uint64_t)v7 - *(_QWORD *)v5) >> 2;
      v24 = v23 + 1;
      if (!((unint64_t)(v23 + 1) >> 62))
      {
        v25 = v6 - (_QWORD)v22;
        if (v25 >> 1 > v24)
          v24 = v25 >> 1;
        v19 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL;
        v26 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v19)
          v26 = v24;
        if (v26)
        {
          v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v26);
          v22 = *(_DWORD **)v5;
          v7 = *(_DWORD **)(v5 + 8);
        }
        else
        {
          v27 = 0;
        }
        v31 = (_DWORD *)(v26 + 4 * v23);
        v32 = v26 + 4 * v27;
        *v31 = a2;
        v8 = v31 + 1;
        while (v7 != v22)
        {
          v33 = *--v7;
          *--v31 = v33;
        }
        *(_QWORD *)v5 = v31;
        *(_QWORD *)(v5 + 8) = v8;
        *(_QWORD *)(v5 + 16) = v32;
        if (v22)
          operator delete(v22);
        goto LABEL_36;
      }
LABEL_39:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
  }
  else if (*(_BYTE *)(a1 + 437) == 16)
  {
    v9 = *(_QWORD *)(a1 + 442);
    v10 = (unsigned __int16)a2;
    v12 = *(_DWORD **)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
    if ((unint64_t)v12 >= v11)
    {
      v15 = *(_DWORD **)v9;
      v16 = ((uint64_t)v12 - *(_QWORD *)v9) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_39;
      v18 = v11 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL;
      v20 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v19)
        v20 = v17;
      if (v20)
      {
        v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v20);
        v15 = *(_DWORD **)v9;
        v12 = *(_DWORD **)(v9 + 8);
      }
      else
      {
        v21 = 0;
      }
      v28 = (_DWORD *)(v20 + 4 * v16);
      v29 = v20 + 4 * v21;
      *v28 = v10;
      v13 = v28 + 1;
      while (v12 != v15)
      {
        v30 = *--v12;
        *--v28 = v30;
      }
      *(_QWORD *)v9 = v28;
      *(_QWORD *)(v9 + 8) = v13;
      *(_QWORD *)(v9 + 16) = v29;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v12 = (unsigned __int16)a2;
      v13 = v12 + 1;
    }
    *(_QWORD *)(v9 + 8) = v13;
    v14 = 2;
LABEL_37:
    ++v4[37];
    v4[33] += v14;
    v4[15] += v14;
    *v4 += v14;
    v3[54] += v14;
    v3[29] += v14;
    goto LABEL_38;
  }
  v3 = (_DWORD *)(a1 + 438);
  v14 = 1;
LABEL_38:
  *v3 += v14;
}

uint64_t NUMovieBox::GetByteCountForPackets(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (!a2)
    return 0;
  v2 = result;
  v3 = 0;
  LODWORD(result) = 0;
  v4 = v2 + 426;
  do
  {
    if (*(_DWORD *)v4 != 1937011578 || (v5 = *(_DWORD *)(v4 + 8)) == 0)
    {
      v5 = *(_DWORD *)(v4 + 12);
      if (v5)
        v5 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + v3);
    }
    result = (v5 + result);
    v3 += 4;
  }
  while (4 * a2 != v3);
  return result;
}

uint64_t FillMP4BoxTable(uint64_t a1, int64_t a2, int64_t a3, __n128 **a4, int a5, int a6)
{
  unsigned int v6;
  int64_t v9;
  int64_t v10;
  _BOOL4 v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int v34;
  __n128 v38;
  int64_t v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  __n128 v43;
  int64_t v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  void (**v47)(MP4BoxParser *__hidden);
  uint64_t v48;
  char v49;
  unsigned __int32 v50;
  unint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v45 = 0;
  v46 = 0;
  v9 = a3 - 8;
  v34 = a6 + 1;
  v10 = a2;
  do
  {
    if (v10 >= v9)
    {
      v29 = 0;
      goto LABEL_67;
    }
    v47 = &off_1E2902718;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, int64_t))(*(_QWORD *)a1 + 88))(&v48, a1, v10);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 8;
    if (MP4BoxParser::Initialize((MP4BoxParser *)&v47))
    {
      v11 = 0;
      if (v10 == a2)
        v6 = -1;
      else
        v6 = -2;
      v12 = 1;
      goto LABEL_60;
    }
    if ((v51 & 0x8000000000000000) != 0)
    {
      v11 = 0;
      v12 = 1;
      v6 = -1;
      goto LABEL_60;
    }
    v43.n128_u32[0] = v50;
    v43.n128_u64[1] = v51;
    v44 = v10;
    v13 = v46;
    v45 = 0;
    v46 = 0;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (!a5)
      goto LABEL_49;
    v11 = 0;
    if (v43.n128_i32[0] <= 1835626085)
    {
      if (v43.n128_i32[0] > 1819632755)
      {
        if (v43.n128_i32[0] > 1835365472)
        {
          if (v43.n128_u32[0] == 1835365473)
            goto LABEL_41;
          v16 = 1835430497;
        }
        else
        {
          if (v43.n128_u32[0] == 1819632756)
            goto LABEL_41;
          v16 = 1835297121;
        }
      }
      else if (v43.n128_i32[0] > 1768715123)
      {
        if (v43.n128_u32[0] == 1768715124)
          goto LABEL_41;
        v16 = 1768977007;
      }
      else
      {
        if (v43.n128_u32[0] == 1684631142)
          goto LABEL_41;
        v16 = 1701082227;
      }
    }
    else if (v43.n128_i32[0] <= 1936289381)
    {
      if (v43.n128_i32[0] > 1836019573)
      {
        if (v43.n128_u32[0] == 1836019574)
          goto LABEL_41;
        v16 = 1836475768;
      }
      else
      {
        if (v43.n128_u32[0] == 1835626086)
          goto LABEL_41;
        v16 = 1836019558;
      }
    }
    else if (v43.n128_i32[0] <= 1953653093)
    {
      if (v43.n128_u32[0] == 1936289382)
        goto LABEL_41;
      v16 = 1937007212;
    }
    else
    {
      if (v43.n128_u32[0] == 1953653094 || v43.n128_u32[0] == 1969517665)
      {
LABEL_41:
        if (v44 + v53 < a3)
        {
          v17 = (std::__shared_weak_count *)operator new(0x30uLL);
          v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917248;
          v17->__shared_owners_ = 0;
          v17->__shared_weak_owners_ = 0;
          v17[1].__vftable = (std::__shared_weak_count_vtbl *)&v17[1];
          v17[1].__shared_owners_ = (uint64_t)&v17[1];
          v17[1].__shared_weak_owners_ = 0;
          v18 = v46;
          v45 = &v17[1].__vftable;
          v46 = v17;
          if (v18)
          {
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          (*(void (**)(uint64_t *__return_ptr, uint64_t, int64_t))(*(_QWORD *)a1 + 88))(&v42, a1, v44);
          v11 = FillMP4BoxTable(v42, v53, v43.n128_u64[1], v45, 1, v34) != 0;
          v21 = v42;
          v42 = 0;
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          goto LABEL_50;
        }
LABEL_49:
        v11 = 0;
        goto LABEL_50;
      }
      v16 = 1953653099;
    }
    if (v43.n128_u32[0] == v16)
      goto LABEL_41;
LABEL_50:
    v38 = v43;
    v39 = v44;
    v40 = v45;
    v22 = v46;
    v41 = v46;
    if (v46)
    {
      v23 = (unint64_t *)&v46->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = MP4BoxInfoTable::Add(a4, &v38);
    if (v22)
    {
      v26 = (unint64_t *)&v22->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v25);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v12 = 0;
    v10 += v43.n128_i64[1];
    if (v10 >= a3)
      v11 = 1;
LABEL_60:
    v28 = v48;
    v47 = &off_1E2902718;
    v48 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  while (((v12 | v11) & 1) == 0);
  if (v12)
    v29 = v6;
  else
    v29 = 0;
LABEL_67:
  v30 = v46;
  if (v46)
  {
    v31 = (unint64_t *)&v46->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v29;
}

void sub_18EFFC910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 8))(a27);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MP4BoxInfoTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MP4BoxInfoTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917248;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<MP4BoxInfoTable>::__on_zero_shared(uint64_t a1)
{
  std::__list_imp<MP4BoxInfo>::clear((uint64_t *)(a1 + 24));
}

__n128 *FindBoxInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, __n128 **a6)
{
  __n128 **v12;
  int v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  __n128 *v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 v25;
  unint64_t *v26;
  unint64_t v27;
  __n128 *v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void (**v43)(MP4BoxParser *__hidden);
  uint64_t v44;
  char v45;
  unsigned __int32 v46;
  unint64_t v47;
  char v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v41 = 0;
  v42 = 0;
  v12 = (__n128 **)a6[1];
  if (v12 != a6)
  {
    v13 = 0;
    v14 = a6[1];
    do
    {
      if (v14[1].n128_u32[0] == a4)
      {
        if (v13 == a5)
        {
          v18 = v14 + 1;
          goto LABEL_52;
        }
        ++v13;
      }
      v14 = (__n128 *)v14->n128_u64[1];
    }
    while (v14 != (__n128 *)a6);
  }
  v15 = (unint64_t)a6[2];
  if (v15)
  {
    v16 = v15 - 1;
    if ((uint64_t)(v15 - 1) < 0)
    {
      do
        v12 = (__n128 **)*v12;
      while (!__CFADD__(v16++, 1));
    }
    else if (v15 != 1)
    {
      do
      {
        v12 = (__n128 **)v12[1];
        --v15;
      }
      while (v15 > 1);
    }
    if (v12 != a6)
      a2 = (uint64_t)v12[4] + (_QWORD)v12[3];
  }
  v18 = 0;
  while (a2 < a3)
  {
    v43 = &off_1E2902718;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(&v44, a1, a2);
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 8;
    if (MP4BoxParser::Initialize((MP4BoxParser *)&v43))
    {
      v19 = 1;
    }
    else
    {
      v39.n128_u32[0] = v46;
      v39.n128_u64[1] = v47;
      v40 = a2;
      v20 = v42;
      v41 = 0;
      v42 = 0;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        v20 = v42;
        v35 = v39;
        v36 = v40;
        v37 = v41;
        v38 = v42;
        if (v42)
        {
          v23 = (unint64_t *)&v42->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
      }
      else
      {
        v35 = v39;
        v36 = v40;
        v37 = 0;
        v38 = 0;
      }
      v25 = MP4BoxInfoTable::Add(a6, &v35);
      if (v20)
      {
        v26 = (unint64_t *)&v20->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v25);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v28 = a6[1];
      if (v28 != (__n128 *)a6)
      {
        v29 = 0;
        do
        {
          if (v28[1].n128_u32[0] == a4)
          {
            if (v29 == a5)
            {
              v18 = v28 + 1;
              goto LABEL_43;
            }
            ++v29;
          }
          v28 = (__n128 *)v28->n128_u64[1];
        }
        while (v28 != (__n128 *)a6);
      }
      v18 = 0;
LABEL_43:
      a2 += v39.n128_i64[1];
      if (v18)
        v19 = 3;
      else
        v19 = 0;
    }
    v30 = v44;
    v43 = &off_1E2902718;
    v44 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    if (v19)
    {
      if (v19 != 3)
        v18 = 0;
      break;
    }
  }
LABEL_52:
  v31 = v42;
  if (v42)
  {
    v32 = (unint64_t *)&v42->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return v18;
}

void sub_18EFFCCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a10);
  if (a23)
    (*(void (**)(uint64_t))(*(_QWORD *)a23 + 8))(a23);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

void MP4BoxParser_TrackFragmentRun::~MP4BoxParser_TrackFragmentRun(MP4BoxParser_TrackFragmentRun *this)
{
  MP4BoxParser_TrackFragmentRun::~MP4BoxParser_TrackFragmentRun(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2909630;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t MP4BoxParser_TrackFragmentRun::Init(MP4BoxParser **this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v8;
  uint64_t DataSourceBytes;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  MP4BoxParser *v20;
  MP4BoxParser *v21;
  unint64_t v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if ((_DWORD)v2)
    return v2;
  if (*((_DWORD *)this + 5) != 1953658222)
    return 4294967294;
  v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
  v4 = (unint64_t)this[3];
  if (v4 <= (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this) || (unint64_t)this[3] <= 3)
  {
    v2 = 1685348671;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v23 = 136315394;
      v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
      v25 = 1024;
      v26 = 116;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  'trun' box is too small for its sample count";
LABEL_7:
      _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v23, 0x12u);
      return v2;
    }
    return v2;
  }
  v8 = v3;
  DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, (char *)this + 92);
  if ((_DWORD)DataSourceBytes)
  {
    v2 = DataSourceBytes;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v2;
    v23 = 136315394;
    v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
    v25 = 1024;
    v26 = 118;
    v5 = MEMORY[0x1E0C81028];
    v6 = "%25s:%-5d  Couldn't read sample count";
    goto LABEL_7;
  }
  *((_DWORD *)this + 23) = bswap32(*((_DWORD *)this + 23));
  v10 = v3 + 4;
  if ((*((_BYTE *)this + 59) & 1) != 0)
  {
    v13 = (unint64_t)this[3];
    if (v13 <= (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this) || (unint64_t)this[3] <= 7)
    {
      v2 = 1685348671;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v2;
      v23 = 136315394;
      v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
      v25 = 1024;
      v26 = 128;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  'trun' box is too small for its data offset";
      goto LABEL_7;
    }
    v17 = MP4BoxParser::ReadDataSourceBytes(this[1], v8 + 4, 4uLL, this + 12);
    if ((_DWORD)v17)
    {
      v2 = v17;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v2;
      v23 = 136315394;
      v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
      v25 = 1024;
      v26 = 131;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  Couldn't read data offset";
      goto LABEL_7;
    }
    *((_DWORD *)this + 24) = bswap32(*((_DWORD *)this + 24));
    v10 = v8 + 8;
    v11 = 8;
    if ((*((_BYTE *)this + 59) & 4) == 0)
      goto LABEL_15;
  }
  else
  {
    v11 = 4;
    if ((*((_BYTE *)this + 59) & 4) == 0)
      goto LABEL_15;
  }
  v18 = (unint64_t)this[3];
  if (v18 <= (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this)
    || (v11 += 4, (unint64_t)this[3] < v11))
  {
    v2 = 1685348671;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v2;
    v23 = 136315394;
    v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
    v25 = 1024;
    v26 = 140;
    v5 = MEMORY[0x1E0C81028];
    v6 = "%25s:%-5d  'trun' box is too small for its first sample flags";
    goto LABEL_7;
  }
  v19 = MP4BoxParser::ReadDataSourceBytes(this[1], v10, 4uLL, (char *)this + 100);
  if ((_DWORD)v19)
  {
    v2 = v19;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v2;
    v23 = 136315394;
    v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
    v25 = 1024;
    v26 = 143;
    v5 = MEMORY[0x1E0C81028];
    v6 = "%25s:%-5d  Couldn't read first sample flags";
    goto LABEL_7;
  }
  *((_DWORD *)this + 25) = bswap32(*((_DWORD *)this + 25));
  v10 += 4;
LABEL_15:
  v12 = *((_BYTE *)this + 58);
  if ((v12 & 1) != 0)
  {
    *((_BYTE *)this + 104) = 1;
    *((_DWORD *)this + 22) += 4;
    if ((v12 & 2) == 0)
    {
LABEL_17:
      if ((v12 & 4) == 0)
        goto LABEL_18;
LABEL_26:
      *((_BYTE *)this + 106) = 1;
      *((_DWORD *)this + 22) += 4;
      if ((v12 & 8) == 0)
        goto LABEL_19;
      goto LABEL_27;
    }
  }
  else if ((*((_BYTE *)this + 58) & 2) == 0)
  {
    goto LABEL_17;
  }
  *((_BYTE *)this + 105) = 1;
  *((_DWORD *)this + 22) += 4;
  if ((v12 & 4) != 0)
    goto LABEL_26;
LABEL_18:
  if ((v12 & 8) == 0)
  {
LABEL_19:
    v2 = *((unsigned int *)this + 22);
    goto LABEL_28;
  }
LABEL_27:
  *((_BYTE *)this + 107) = 1;
  v2 = (*((_DWORD *)this + 22) + 4);
  *((_DWORD *)this + 22) = v2;
LABEL_28:
  if (!(_DWORD)v2)
    return v2;
  v14 = *((_DWORD *)this + 23);
  v15 = (unint64_t)this[3];
  if (v15 <= (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this)
    || (v16 = (v14 * v2), (unint64_t)this[3] < v11 + v16))
  {
    v2 = 1685348671;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v2;
    v23 = 136315394;
    v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
    v25 = 1024;
    v26 = 179;
    v5 = MEMORY[0x1E0C81028];
    v6 = "%25s:%-5d  'trun' box is too small for its per packet info";
    goto LABEL_7;
  }
  v20 = this[8];
  v21 = this[9];
  LOBYTE(v23) = 0;
  v22 = v21 - v20;
  if (v16 <= v22)
  {
    if (v16 < v22)
      this[9] = (MP4BoxParser *)((char *)v20 + v16);
  }
  else
  {
    std::vector<unsigned char>::__append(this + 8, v16 - v22, &v23);
    v20 = this[8];
  }
  v2 = MP4BoxParser::ReadDataSourceBytes(this[1], v10, v16, v20);
  if ((_DWORD)v2 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v23 = 136315394;
    v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
    v25 = 1024;
    v26 = 183;
    v5 = MEMORY[0x1E0C81028];
    v6 = "%25s:%-5d  Couldn't read per packet info";
    goto LABEL_7;
  }
  return v2;
}

void MP4BoxParser_ChunkOffset::~MP4BoxParser_ChunkOffset(MP4BoxParser_ChunkOffset *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_ChunkOffset::Init(MP4BoxParser **this)
{
  uint64_t result;
  int v3;
  unsigned int v5;

  result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!(_DWORD)result)
  {
    v3 = *((_DWORD *)this + 5);
    if (v3 == 1937007471 || v3 == 1668232756)
    {
      v5 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      result = MP4BoxParser::ReadDataSourceBytes(this[1], v5, 4uLL, (char *)this + 60);
      if (!(_DWORD)result)
        *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

uint64_t MP4BoxParser_ChunkOffset::GetChunkOffset(MP4BoxParser_ChunkOffset *this, int a2, uint64_t *a3)
{
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;

  result = (*(uint64_t (**)(MP4BoxParser_ChunkOffset *))(*(_QWORD *)this + 24))(this);
  v7 = result + 4;
  v8 = *((_DWORD *)this + 5);
  if (v8 == 1668232756)
  {
    v10 = 0;
    result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), (v7 + 8 * a2), 8uLL, &v10);
    v9 = bswap64(v10);
    if ((_DWORD)result)
      return result;
  }
  else if (v8 == 1937007471)
  {
    v11 = 0;
    result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), (v7 + 4 * a2), 4uLL, &v11);
    v9 = bswap32(v11);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    v9 = 0;
  }
  *a3 = v9;
  return result;
}

void DSPGraph::TimeFreqBox::~TimeFreqBox(DSPGraph::TimeFreqBox *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E290C3E0;
  v2 = (void **)((char *)this + 776);
  std::vector<std::unique_ptr<void,int (*)(void *)>>::__destroy_vector::operator()[abi:ne180100](&v2);
  DSPGraph::Box::~Box(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E290C3E0;
  v2 = (void **)((char *)this + 776);
  std::vector<std::unique_ptr<void,int (*)(void *)>>::__destroy_vector::operator()[abi:ne180100](&v2);
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E290C3E0;
  v2 = (void **)((char *)this + 776);
  std::vector<std::unique_ptr<void,int (*)(void *)>>::__destroy_vector::operator()[abi:ne180100](&v2);
  DSPGraph::Box::~Box(this);
}

const char *DSPGraph::TimeFreqBox::ClassName(DSPGraph::TimeFreqBox *this)
{
  return "fft";
}

uint64_t DSPGraph::TimeFreqBox::selfLatencyInTicks(DSPGraph::TimeFreqBox *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (!*(_BYTE *)(*((_QWORD *)this + 1) + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "selfLatencyInTicks");
    std::string::basic_string[abi:ne180100]<0>(&v12, "not configured");
    DSPGraph::ThrowException(1667655457, &v14, 70, &v13, &v12);
  }
  v3 = (char *)this + 64;
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v13, "in");
    v8 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v8 = (_QWORD *)*v8;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v12, v8, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v14, 1410, &v13, &v12);
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 8) == 1819304813)
  {
    v4 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v13, "out");
      v11 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v11 = (_QWORD *)*v11;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v12, v11, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v14, 1418, &v13, &v12);
    }
    if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) + 120) + 8) == 1718773105)
      return 0;
  }
  v6 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v13, "in");
    v9 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v9 = (_QWORD *)*v9;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v12, v9, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v14, 1410, &v13, &v12);
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) + 120) + 8) != 1718773105)
    goto LABEL_13;
  v7 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v13, "out");
    v10 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v10 = (_QWORD *)*v10;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v12, v10, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v14, 1418, &v13, &v12);
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) + 120) + 8) != 1819304813)
  {
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "selfLatencyInTicks");
    std::string::basic_string[abi:ne180100]<0>(&v12, "formats are not between freq and time domains.");
    DSPGraph::ThrowException(1718444833, &v14, 78, &v13, &v12);
  }
  return *(_QWORD *)(*((_QWORD *)this + 2) + 296);
}

void sub_18EFFD944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

double DSPGraph::TimeFreqBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 6.73591209e252;
  *(_OWORD *)a1 = xmmword_18F117180;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::TimeFreqBox::hasPresetData(DSPGraph::TimeFreqBox *this)
{
  return 0;
}

_QWORD *DSPGraph::TimeFreqBox::process(DSPGraph::TimeFreqBox *this, int a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *result;
  _QWORD *v26;
  _OWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  int v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  DSPSplitComplex v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  if (*(_DWORD *)(*((_QWORD *)this + 2) + 268) != a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v44, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v43, "process");
    std::string::basic_string[abi:ne180100]<0>(&v42, "inNumFrames != blockSize.");
    DSPGraph::ThrowException(1718188065, &v44, 93, &v43, &v42);
  }
  v4 = (char *)this + 64;
  v3 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v44, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v43, "in");
    v36 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v36 = (_QWORD *)*v36;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v42, v36, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v44, 1410, &v43, &v42);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v44, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v43, "out");
    v37 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v37 = (_QWORD *)*v37;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v42, v37, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v44, 1418, &v43, &v42);
  }
  v8 = *(_DWORD **)(*(_QWORD *)(v6 + 56) + 80);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if (*v8 != (uint64_t)(*((_QWORD *)this + 98) - *((_QWORD *)this + 97)) >> 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v44, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v43, "process");
    std::string::basic_string[abi:ne180100]<0>(&v42, "buffer list number of buffers doesn't match format channel count.");
    DSPGraph::ThrowException(1667788321, &v44, 100, &v43, &v42);
  }
  v10 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v44, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v43, "out");
    v38 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v38 = (_QWORD *)*v38;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v42, v38, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v44, 1418, &v43, &v42);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 80);
  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 40))(*((_QWORD *)this + 11));
  if (*v8)
  {
    v13 = 0;
    v14 = 0;
    v15 = *(_DWORD *)(*(_QWORD *)(v12 + 120) + 24) * a2;
    do
    {
      *(_DWORD *)(v11 + v13 + 12) = v15;
      v16 = *(char **)&v8[v13 / 4 + 4];
      v17 = *(char **)(v11 + v13 + 16);
      if (*((_DWORD *)this + 200))
      {
        v41.realp = *(float **)&v8[v13 / 4 + 4];
        v41.imagp = (float *)&v16[4 * a2];
        v18 = VPTimeFreqConverter_Synthesize(*(_QWORD *)(*((_QWORD *)this + 97) + v13), &v41, v17);
        if (v18)
        {
          v34 = v18;
          std::string::basic_string[abi:ne180100]<0>(&v44, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v43, "process");
          std::string::basic_string[abi:ne180100]<0>(&v42, "VPTimeFreqConverter_Synthesize");
          DSPGraph::ThrowException(v34, &v44, 120, &v43, &v42);
        }
      }
      else
      {
        v41.realp = *(float **)(v11 + v13 + 16);
        v41.imagp = (float *)&v17[4 * a2];
        v19 = VPTimeFreqConverter_Analyze(*(_QWORD *)(*((_QWORD *)this + 97) + v13), v16, &v41);
        if (v19)
        {
          v35 = v19;
          std::string::basic_string[abi:ne180100]<0>(&v44, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v43, "process");
          std::string::basic_string[abi:ne180100]<0>(&v42, "VPTimeFreqConverter_Analyze");
          DSPGraph::ThrowException(v35, &v44, 114, &v43, &v42);
        }
      }
      ++v14;
      v13 += 16;
    }
    while (v14 < *v8);
  }
  v20 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v44, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v43, "in");
    v39 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v39 = (_QWORD *)*v39;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v42, v39, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v44, 1410, &v43, &v42);
  }
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
  v22 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v22)
  {
    std::string::basic_string[abi:ne180100]<0>(&v44, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v43, "in");
    v40 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v40 = (_QWORD *)*v40;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v42, v40, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v44, 1410, &v43, &v42);
  }
  v23 = *(_DWORD *)(*(_QWORD *)(v21 + 56) + 72);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
  result = (_QWORD *)*((_QWORD *)this + 11);
  v26 = (_QWORD *)*((_QWORD *)this + 12);
  if (result != v26)
  {
    v27 = (_OWORD *)(*(_QWORD *)(v24 + 56) + 8);
    v28 = result;
    do
    {
      v29 = *v28;
      v28 += 4;
      v30 = *(_QWORD *)((*(uint64_t (**)(void))(v29 + 40))() + 56);
      v32 = v27[2];
      v31 = v27[3];
      v33 = v27[1];
      *(_OWORD *)(v30 + 8) = *v27;
      *(_OWORD *)(v30 + 24) = v33;
      *(_OWORD *)(v30 + 40) = v32;
      *(_OWORD *)(v30 + 56) = v31;
      *(_DWORD *)(v30 + 72) = v23;
      result = v28;
    }
    while (v28 != v26);
  }
  return result;
}

void sub_18EFFDF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void DSPGraph::TimeFreqBox::initialize(DSPGraph::TimeFreqBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;

  DSPGraph::Box::initialize(this);
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v34, "in");
    v27 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v27 = (_QWORD *)*v27;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v33, v27, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v35, 1410, &v34, &v33);
  }
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v34, "out");
    v28 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v28 = (_QWORD *)*v28;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v33, v28, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v35, 1418, &v34, &v33);
  }
  v5 = *(_QWORD *)(v3 + 120);
  if (*(_DWORD *)(v5 + 28) != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4)
                                                     + 120)
                                         + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v34, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v33, "channel mismatch.");
    DSPGraph::ThrowException(1718444833, &v35, 44, &v34, &v33);
  }
  v6 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v34, "in");
    v29 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v29 = (_QWORD *)*v29;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v33, v29, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v35, 1410, &v34, &v33);
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) + 120) + 8) != 1819304813)
    goto LABEL_9;
  v7 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v34, "out");
    v32 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v32 = (_QWORD *)*v32;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v33, v32, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v35, 1418, &v34, &v33);
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) + 120) + 8) == 1718773105)
  {
    v8 = 0;
  }
  else
  {
LABEL_9:
    v9 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v9)
    {
      std::string::basic_string[abi:ne180100]<0>(&v35, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v34, "in");
      v30 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v30 = (_QWORD *)*v30;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v33, v30, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v35, 1410, &v34, &v33);
    }
    if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120) + 8) != 1718773105)
      goto LABEL_34;
    v10 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&v35, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v34, "out");
      v31 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v31 = (_QWORD *)*v31;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v33, v31, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v35, 1418, &v34, &v33);
    }
    if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) + 120) + 8) != 1819304813)
    {
LABEL_34:
      std::string::basic_string[abi:ne180100]<0>(&v35, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v34, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v33, "formats are not between freq and time domains.");
      DSPGraph::ThrowException(1718444833, &v35, 52, &v34, &v33);
    }
    v8 = 1;
  }
  *((_DWORD *)this + 200) = v8;
  v11 = *(unsigned int *)(v5 + 28);
  v12 = (_QWORD *)((char *)this + 776);
  v13 = *((_QWORD *)this + 97);
  if (v11 > (*((_QWORD *)this + 99) - v13) >> 4)
  {
    v14 = *((_QWORD *)this + 98) - v13;
    v38 = (char *)this + 792;
    *(_QWORD *)&v35 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v11);
    *((_QWORD *)&v35 + 1) = v35 + v14;
    v36 = (_QWORD *)(v35 + v14);
    v37 = v35 + 16 * v15;
    std::vector<std::unique_ptr<void,int (*)(void *)>>::__swap_out_circular_buffer((_QWORD *)this + 97, &v35);
    std::__split_buffer<std::unique_ptr<void,int (*)(void *)>>::~__split_buffer((uint64_t)&v35);
  }
  if ((_DWORD)v11)
  {
    do
    {
      *(_QWORD *)&v34 = 0;
      v16 = *((_QWORD *)this + 2);
      v17 = *(_DWORD *)(v16 + 268);
      if (v17 == 1)
        v17 = *(_DWORD *)(v16 + 272);
      VPTimeFreqConverter_Create(*((_DWORD *)this + 200), v17, (uint64_t *)&v34);
      v18 = (_QWORD *)*((_QWORD *)this + 98);
      v19 = *((_QWORD *)this + 99);
      if ((unint64_t)v18 >= v19)
      {
        v21 = ((uint64_t)v18 - *v12) >> 4;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v23 = v19 - *v12;
        if (v23 >> 3 > v22)
          v22 = v23 >> 3;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
          v24 = 0xFFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        v38 = (char *)this + 792;
        if (v24)
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v24);
        else
          v25 = 0;
        v26 = (_QWORD *)(v24 + 16 * v21);
        *(_QWORD *)&v35 = v24;
        *((_QWORD *)&v35 + 1) = v26;
        v37 = v24 + 16 * v25;
        *v26 = v34;
        v26[1] = VPTimeFreqConverter_Dispose;
        v36 = v26 + 2;
        std::vector<std::unique_ptr<void,int (*)(void *)>>::__swap_out_circular_buffer((_QWORD *)this + 97, &v35);
        v20 = (_QWORD *)*((_QWORD *)this + 98);
        std::__split_buffer<std::unique_ptr<void,int (*)(void *)>>::~__split_buffer((uint64_t)&v35);
      }
      else
      {
        *v18 = v34;
        v18[1] = VPTimeFreqConverter_Dispose;
        v20 = v18 + 2;
        *((_QWORD *)this + 98) = v18 + 2;
      }
      *((_QWORD *)this + 98) = v20;
      --v11;
    }
    while (v11);
  }
}

void sub_18EFFE5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::TimeFreqBox::uninitialize(DSPGraph::TimeFreqBox *this)
{
  DSPGraph::Box::uninitialize(this);
  return std::vector<std::unique_ptr<void,int (*)(void *)>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 776, *((_QWORD **)this + 97));
}

uint64_t std::vector<std::unique_ptr<void,int (*)(void *)>>::__base_destruct_at_end[abi:ne180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  if (v4 != a2)
  {
    v5 = *(_QWORD **)(result + 8);
    do
    {
      v6 = *(v5 - 2);
      v5 -= 2;
      result = v6;
      *v5 = 0;
      if (v6)
        result = ((uint64_t (*)(void))*(v4 - 1))();
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

_QWORD *std::vector<std::unique_ptr<void,int (*)(void *)>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(v2 - 2);
    v2 -= 2;
    *v2 = 0;
    *(_QWORD *)(v4 - 16) = v5;
    v4 -= 16;
    *(_QWORD *)(v4 + 8) = v2[1];
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<void,int (*)(void *)>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    v4 = *(_QWORD *)(i - 16);
    *(_QWORD *)(i - 16) = 0;
    if (v4)
      (*(void (**)(void))(i - 8))();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::unique_ptr<void,int (*)(void *)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<void,int (*)(void *)>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    operator delete(**a1);
  }
}

DSPGraph::Box *DSPGraph::TimeFreqBox::TimeFreqBox(DSPGraph::TimeFreqBox *this)
{
  DSPGraph::Box *result;

  result = DSPGraph::Box::Box(this, 1u, 1u);
  *(_QWORD *)result = &off_1E290C3E0;
  *((_QWORD *)result + 97) = 0;
  *((_QWORD *)result + 99) = 0;
  *((_QWORD *)result + 98) = 0;
  *((_DWORD *)result + 200) = 0;
  return result;
}

{
  DSPGraph::Box *result;

  result = DSPGraph::Box::Box(this, 1u, 1u);
  *(_QWORD *)result = &off_1E290C3E0;
  *((_QWORD *)result + 97) = 0;
  *((_QWORD *)result + 99) = 0;
  *((_QWORD *)result + 98) = 0;
  *((_DWORD *)result + 200) = 0;
  return result;
}

OSStatus AUListenerCreate(AUParameterListenerProc inProc, void *inUserData, CFRunLoopRef inRunLoop, CFStringRef inRunLoopMode, Float32 inNotificationInterval, AUParameterListenerRef *outListener)
{
  OSStatus result;
  double v11;
  CFStringRef v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  result = -50;
  if (inProc && outListener)
  {
    v23 = 0uLL;
    v11 = 0.0;
    if (inNotificationInterval > 0.0)
    {
      if (!inRunLoop)
        inRunLoop = CFRunLoopGetCurrent();
      v13 = (CFStringRef)*MEMORY[0x1E0C9B280];
      if (inRunLoopMode)
        v13 = inRunLoopMode;
      std::allocate_shared[abi:ne180100]<CAEventReceiver::Impl,std::allocator<CAEventReceiver::Impl>,__CFRunLoop *&,__CFString const*&,void>(&v22, inRunLoop, v13);
      v14 = v22;
      v22 = 0uLL;
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      v23 = v14;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      CAEventReceiver::~CAEventReceiver((CAEventReceiver *)&v22);
      v11 = inNotificationInterval;
    }
    v18 = operator new();
    v24[0] = &off_1E2913680;
    v24[1] = inProc;
    v24[2] = inUserData;
    v25 = v24;
    v21 = v23;
    v23 = 0uLL;
    AUParameterListener::AUParameterListener(v18, (uint64_t)v24, &v21, v11);
    CAEventReceiver::~CAEventReceiver((CAEventReceiver *)&v21);
    v19 = v25;
    if (v25 == v24)
    {
      v20 = 4;
      v19 = v24;
    }
    else
    {
      if (!v25)
      {
LABEL_19:
        *outListener = (AUParameterListenerRef)*(unsigned int *)(v18 + 8);
        CAEventReceiver::~CAEventReceiver((CAEventReceiver *)&v23);
        return 0;
      }
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
    goto LABEL_19;
  }
  return result;
}

void sub_18EFFEA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  CAEventReceiver::~CAEventReceiver((CAEventReceiver *)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<CAEventReceiver::Impl,std::allocator<CAEventReceiver::Impl>,__CFRunLoop *&,__CFString const*&,void>(_QWORD *a1, const void *a2, const void *a3)
{
  char *v6;

  v6 = (char *)operator new(0x90uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_1E29175C8;
  *(_OWORD *)(v6 + 24) = 0u;
  if (a2)
    CFRetain(a2);
  *((_QWORD *)v6 + 5) = a2;
  if (a3)
    CFRetain(a3);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)(v6 + 48), a3);
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 8) = 0;
  *((_QWORD *)v6 + 12) = 0;
  *((_QWORD *)v6 + 13) = -1;
  *((_QWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 15) = 0;
  *((_QWORD *)v6 + 16) = dispatch_semaphore_create(0);
  *((_DWORD *)v6 + 34) = 0;
  *a1 = v6 + 24;
  a1[1] = v6;
  std::shared_ptr<CAEventReceiver::Impl>::__enable_weak_this[abi:ne180100]<CAEventReceiver::Impl,CAEventReceiver::Impl,void>((uint64_t)a1, (_QWORD *)v6 + 3, (uint64_t)(v6 + 24));
}

void sub_18EFFEB8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  const void **v2;
  std::__shared_weak_count *shared_owners;
  void *v5;

  applesauce::CF::ObjectRef<__CFRunLoop *>::~ObjectRef(v2);
  shared_owners = (std::__shared_weak_count *)v1[1].__shared_owners_;
  if (shared_owners)
    std::__shared_weak_count::__release_weak(shared_owners);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__function::__func<AUListenerCreate::$_0,std::allocator<AUListenerCreate::$_0>,void ()(void *,AudioUnitParameter const*,float)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

__n128 std::__function::__func<AUListenerCreate::$_0,std::allocator<AUListenerCreate::$_0>,void ()(void *,AudioUnitParameter const*,float)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2913680;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUListenerCreate::$_0,std::allocator<AUListenerCreate::$_0>,void ()(void *,AudioUnitParameter const*,float)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2913680;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUListenerCreate::$_0,std::allocator<AUListenerCreate::$_0>,void ()(void *,AudioUnitParameter const*,float)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, float *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, float))(a1 + 8))(*(_QWORD *)(a1 + 16), *a2, *a3, *a4);
}

const void **applesauce::CF::ObjectRef<__CFRunLoop *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

OSStatus AUListenerCreateWithDispatchQueue(AUParameterListenerRef *outListener, Float32 inNotificationInterval, dispatch_queue_t inDispatchQueue, AUParameterListenerBlock inBlock)
{
  OSStatus result;
  void *v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = -50;
  if (!outListener || !inBlock)
    return result;
  std::allocate_shared[abi:ne180100]<CAEventReceiver::Impl,std::allocator<CAEventReceiver::Impl>,dispatch_queue_s *&,void>(&v14, inDispatchQueue);
  v8 = _Block_copy(inBlock);
  v9 = operator new();
  if (v8)
    v10 = _Block_copy(v8);
  else
    v10 = 0;
  v15[0] = &off_1E2913440;
  v15[1] = v10;
  v16 = v15;
  v13 = v14;
  v14 = 0uLL;
  AUParameterListener::AUParameterListener(v9, (uint64_t)v15, &v13, inNotificationInterval);
  CAEventReceiver::~CAEventReceiver((CAEventReceiver *)&v13);
  v11 = v16;
  if (v16 == v15)
  {
    v12 = 4;
    v11 = v15;
    goto LABEL_10;
  }
  if (v16)
  {
    v12 = 5;
LABEL_10:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  *outListener = (AUParameterListenerRef)*(unsigned int *)(v9 + 8);
  if (v8)
    _Block_release(v8);
  CAEventReceiver::~CAEventReceiver((CAEventReceiver *)&v14);
  return 0;
}

void sub_18EFFEDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<CAEventReceiver::Impl,std::allocator<CAEventReceiver::Impl>,dispatch_queue_s *&,void>(_QWORD *a1, NSObject *a2)
{
  char *v4;

  v4 = (char *)operator new(0x90uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E29175C8;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  if (a2)
    dispatch_retain(a2);
  *((_QWORD *)v4 + 7) = a2;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 12) = 0;
  *((_QWORD *)v4 + 13) = -1;
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 15) = 0;
  *((_QWORD *)v4 + 16) = dispatch_semaphore_create(0);
  *((_DWORD *)v4 + 34) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  std::shared_ptr<CAEventReceiver::Impl>::__enable_weak_this[abi:ne180100]<CAEventReceiver::Impl,CAEventReceiver::Impl,void>((uint64_t)a1, (_QWORD *)v4 + 3, (uint64_t)(v4 + 24));
}

_QWORD *std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::~__func(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E2913440;
  v2 = (const void *)a1[1];
  if (v2)
    _Block_release(v2);
  return a1;
}

void std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::~__func(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E2913440;
  v1 = (const void *)a1[1];
  if (v1)
    _Block_release(v1);
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::__clone(uint64_t a1)
{
  void **v1;
  _QWORD *v2;

  v1 = (void **)(a1 + 8);
  v2 = operator new(0x10uLL);
  *v2 = &off_1E2913440;
  std::__compressed_pair_elem<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,0,false>::__compressed_pair_elem[abi:ne180100]<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)> const&,0ul>(v2 + 1, v1);
  return v2;
}

_QWORD *std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913440;
  return std::__compressed_pair_elem<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,0,false>::__compressed_pair_elem[abi:ne180100]<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)> const&,0ul>(a2 + 1, (void **)(a1 + 8));
}

void std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::destroy[abi:ne180100](*(const void **)(a1 + 8));
}

void std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::destroy[abi:ne180100](a1[1]);
  operator delete(a1);
}

uint64_t std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  return (*(uint64_t (**)(float))(*(_QWORD *)(a1 + 8) + 16))(*a4);
}

void std::__function::__alloc_func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::destroy[abi:ne180100](const void *a1)
{
  if (a1)
    _Block_release(a1);
}

_QWORD *std::__compressed_pair_elem<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,0,false>::__compressed_pair_elem[abi:ne180100]<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)> const&,0ul>(_QWORD *a1, void **a2)
{
  void *v3;

  v3 = *a2;
  if (*a2)
    v3 = _Block_copy(v3);
  *a1 = v3;
  return a1;
}

OSStatus AUListenerDispose(AUParameterListenerRef inListener)
{
  ListenerMap *v1;
  ListenerMap *v2;
  unint64_t v3;
  _QWORD v5[2];
  uint64_t (*v6[3])(_QWORD, unint64_t, _QWORD);
  __int128 *v7;
  unsigned __int128 *v8;
  ListenerMap *v9;

  v1 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!v1)
    return -50;
  v2 = v1;
  ListenerMap::instance(v1);
  v9 = v2;
  v7 = ListenerMap::instance(void)::global;
  v8 = (unsigned __int128 *)&xmmword_1EE165A70;
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal((unsigned __int128 *)&xmmword_1EE165A70);
  v3 = atomic_load((unint64_t *)&qword_1EE165980);
  v5[0] = &v9;
  v5[1] = ListenerMap::instance(void)::global;
  v6[0] = (uint64_t (*)(_QWORD, unint64_t, _QWORD))caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::RemoveListener(AUListener *)::$_0>;
  v6[1] = (uint64_t (*)(_QWORD, unint64_t, _QWORD))v5;
  ListenerMap::forEachBinding((uint64_t)&v7, v3 & 0xFFFFFFFFFFFFFFFCLL, v6);
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v8);
  CAEventReceiver::invalidate((ListenerMap *)((char *)v2 + 16));
  (*(void (**)(ListenerMap *))(*(_QWORD *)v2 + 8))(v2);
  return 0;
}

void sub_18EFFF104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int128 *a15)
{
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(a15);
  _Unwind_Resume(a1);
}

void ListenerMap::instance(ListenerMap *this)
{
  unsigned __int8 v1;
  __int128 v2;
  _OWORD v3[2];
  uint64_t v4;
  _OWORD v5[2];
  uint64_t v6;

  if ((v1 & 1) == 0)
  {
    {
      memset(v5, 0, sizeof(v5));
      v6 = 0;
      *(_QWORD *)&v2 = -1;
      *((_QWORD *)&v2 + 1) = -1;
      v3[0] = v2;
      v3[1] = v2;
      v4 = -1;
      caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::skiplist((uint64_t)v5, (uint64_t)v3);
      dword_1EE165AC0 = 0;
    }
  }
}

void caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::skiplist(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  xmmword_1EE165A70 = 0u;
  *(_OWORD *)&qword_1EE165A80 = 0u;
  xmmword_1EE165A50 = 0u;
  *(_OWORD *)&qword_1EE165A60 = 0u;
  xmmword_1EE165A30 = 0u;
  *(_OWORD *)&qword_1EE165A40 = 0u;
  xmmword_1EE165A10 = 0u;
  xmmword_1EE165A20 = 0u;
  xmmword_1EE1659F0 = 0u;
  unk_1EE165A00 = 0u;
  xmmword_1EE1659D0 = 0u;
  unk_1EE1659E0 = 0u;
  xmmword_1EE1659B0 = 0u;
  unk_1EE1659C0 = 0u;
  xmmword_1EE165990 = 0u;
  unk_1EE1659A0 = 0u;
  xmmword_1EE165970 = 0u;
  *(_OWORD *)&qword_1EE165980 = 0u;
  xmmword_1EE165950 = 0u;
  *(_OWORD *)&qword_1EE165960 = 0u;
  ListenerMap::instance(void)::global[0] = 0u;
  os_unfair_lock_lock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  if (qword_1EE145A78)
  {
    v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1EE145A78);
    if (v4)
    {
      v5 = v4;
      v6 = qword_1EE145A70;
      if (qword_1EE145A70)
        goto LABEL_14;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v5 = (std::__shared_weak_count *)operator new(0x1A0uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917BB0;
  v5->__shared_owners_ = 0;
  *(_OWORD *)&v5[1].__shared_owners_ = 0u;
  v6 = (uint64_t)&v5[1].__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5[2].std::__shared_count = 0u;
  *(_OWORD *)&v5[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[3].__shared_owners_ = 0u;
  v5[4].std::__shared_count = 0u;
  *(_OWORD *)&v5[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[5].__shared_owners_ = 0u;
  v5[6].std::__shared_count = 0u;
  *(_OWORD *)&v5[6].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[7].__shared_owners_ = 0u;
  v5[8].std::__shared_count = 0u;
  *(_OWORD *)&v5[8].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[9].__shared_owners_ = 0u;
  v5[10].std::__shared_count = 0u;
  *(_OWORD *)&v5[10].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[11].__shared_owners_ = 0u;
  v5[12].std::__shared_count = 0u;
  *(_OWORD *)&v5[12].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[13].__shared_owners_ = 0u;
  v5[14].std::__shared_count = 0u;
  *(_OWORD *)&v5[14].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[15].__shared_owners_ = 0u;
  v5[16].std::__shared_count = 0u;
  *(_OWORD *)&v5[16].__shared_weak_owners_ = 0u;
  v9 = caulk::alloc::global_page_cache::instance((caulk::alloc::global_page_cache *)v5);
  v5[3].__shared_owners_ = 0;
  v5[1].__shared_weak_owners_ = v9 + 16;
  v5[2].__vftable = 0;
  v5[2].__shared_owners_ = 0;
  v5[2].__shared_weak_owners_ = 0;
  v10 = 96;
  LODWORD(v5[3].__vftable) = 0;
  do
  {
    v11 = (std::__shared_weak_count_vtbl **)((char *)&v5->__vftable + v10);
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    v10 += 32;
  }
  while (v10 != 416);
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = (std::__shared_weak_count *)qword_1EE145A78;
  qword_1EE145A70 = (uint64_t)&v5[1].__shared_owners_;
  qword_1EE145A78 = (uint64_t)v5;
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
LABEL_14:
  os_unfair_lock_unlock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  v15 = (unint64_t *)&v5->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v17 = (std::__shared_weak_count *)qword_1EE165A88;
  qword_1EE165A80 = v6;
  qword_1EE165A88 = (uint64_t)v5;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  do
    v20 = __ldaxr(v15);
  while (__stlxr(v20 - 1, v15));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  qword_1EE165A90 = (uint64_t)&caulk::inplace_function_detail::vtable<void,caulk::concurrent::details::skiplist_node<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>>::layout_kv const&>::empty;
  caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::random_engine();
  v21 = 0;
  v22 = *(_OWORD *)a1;
  v26 = *(_OWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 32);
  LODWORD(xmmword_1EE165970) = 167837706;
  ListenerMap::instance(void)::global[0] = v22;
  xmmword_1EE165950 = v26;
  qword_1EE165960 = v23;
  unk_1EE165968 = 0;
  qword_1EE165980 = 0;
  unk_1EE165988 = 0;
  *((_QWORD *)&xmmword_1EE165970 + 1) = 0;
  do
  {
    atomic_store(0, (unint64_t *)&ListenerMap::instance(void)::global[v21 + 4]);
    atomic_store(0, (unint64_t *)&ListenerMap::instance(void)::global[v21 + 4] + 1);
    ++v21;
  }
  while (v21 != 10);
  v24 = *(_OWORD *)a2;
  v27 = *(_OWORD *)(a2 + 16);
  v28 = *(_QWORD *)(a2 + 32);
  LODWORD(xmmword_1EE165A50) = 16908289;
  xmmword_1EE165A20 = v24;
  xmmword_1EE165A30 = v27;
  qword_1EE165A40 = v28;
  unk_1EE165A48 = 0;
  qword_1EE165A68 = 0;
  *((_QWORD *)&xmmword_1EE165A50 + 1) = 0;
  qword_1EE165A60 = 0;
  atomic_store(0, (unint64_t *)&qword_1EE165A60);
  v25 = 4u;
  atomic_store(0, (unint64_t *)&qword_1EE165A68);
  do
    atomic_store((unint64_t)&xmmword_1EE165A20, (unint64_t *)&ListenerMap::instance(void)::global[v25++]);
  while (v25 != 14);
  __dmb(0xBu);
}

void sub_18EFFF480(void *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  os_unfair_lock_unlock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&qword_1EE165A80);
  __clang_call_terminate(a1);
}

void caulk::inplace_function_detail::vtable<void,caulk::concurrent::details::skiplist_node<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>>::layout_kv const&>::vtable(void)::{lambda(void *,caulk::concurrent::details::skiplist_node<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>>::layout_kv const&)#1}::__invoke()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;

  v1 = 0;
  v2 = (_QWORD *)(a1 + 32);
  v3 = a1 + 96;
  do
  {
    v4 = *(_QWORD *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * v1];
    v5 = (unint64_t *)(v3 + 32 * v1 + 16);
    while (1)
    {
      v6 = caulk::concurrent::stack<caulk::alloc::free_block,caulk::concurrent::intrusive_single_link_node<caulk::alloc::free_block>>::pop((unsigned __int128 *)(v3 + 32 * v1));
      if (!v6)
        break;
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
      caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::deallocate(v2, (unint64_t)v6, v4);
    }
    ++v1;
  }
  while (v1 != 10);
  return caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::self_deallocate_all((uint64_t)v2);
}

uint64_t caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::self_deallocate_all(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = *(unint64_t **)(result + 16);
  if (v1)
  {
    do
    {
      v2 = atomic_load(v1);
      result = caulk::alloc::details::caching_page_allocator_base::deallocate();
      v1 = (unint64_t *)v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::deallocate(_QWORD *result, unint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int v4;
  unint64_t *v5;
  BOOL v7;
  unsigned int v9;

  v3 = (unsigned int *)(result + 5);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 2049, v3));
  v5 = (unint64_t *)result[2];
  if (v5)
  {
    while ((unint64_t)(v5 + 4) > a2 || a2 + a3 > (unint64_t)(v5 + 2048))
    {
      v5 = (unint64_t *)atomic_load(v5);
      if (!v5)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    v5 = (unint64_t *)atomic_load(result + 6);
    if (v5)
      v7 = (unint64_t)(v5 + 4) > a2;
    else
      v7 = 1;
    if (v7 || a2 + a3 > (unint64_t)(v5 + 2048))
LABEL_22:
      caulk::alloc::base_allocator::bad_dealloc((caulk::alloc::base_allocator *)result);
  }
  if (!v5)
    goto LABEL_22;
  if ((unint64_t)(v5 + 4) > a2 || a2 + a3 > (unint64_t)(v5 + 2048))
    caulk::alloc::base_allocator::bad_dealloc((caulk::alloc::base_allocator *)result);
  do
    v9 = __ldaxr(v3);
  while (__stlxr(v9 - 1, v3));
  return result;
}

void sub_18EFFF6D4(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

OSStatus AUListenerAddParameter(AUParameterListenerRef inListener, void *inObject, const AudioUnitParameter *inParameter)
{
  ListenerMap *v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  if (!inParameter)
    return -50;
  v5 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!v5)
    return -50;
  v6 = (uint64_t)v5;
  v8 = 0;
  v9 = *(_OWORD *)&inParameter->mAudioUnit;
  v10 = *(_QWORD *)&inParameter->mElement;
  ListenerMap::instance(v5);
  return ListenerMap::AddParameter(v6, (uint64_t)inObject, (uint64_t)&v8);
}

OSStatus AUListenerRemoveParameter(AUParameterListenerRef inListener, void *inObject, const AudioUnitParameter *inParameter)
{
  uint64_t v5;
  OSStatus result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD v11[3];
  void *v12;
  uint64_t v13;

  v5 = BaseOpaqueObject::ResolveOpaqueRef();
  result = -50;
  if (inParameter && v5)
  {
    v7 = 0;
    v8 = *(_OWORD *)&inParameter->mAudioUnit;
    v9 = *(_QWORD *)&inParameter->mElement;
    ListenerMap::instance((ListenerMap *)0xFFFFFFCELL);
    v12 = inObject;
    v13 = v5;
    v10[0] = &v13;
    v10[1] = &v12;
    v10[2] = ListenerMap::instance(void)::global;
    v11[0] = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::RemoveEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
    v11[1] = v10;
    if (ListenerMap::forEachBindingForEvent(&v7, (uint64_t)v11))
      return 0;
    else
      return -50;
  }
  return result;
}

OSStatus AUParameterSet(AUParameterListenerRef inSendingListener, void *inSendingObject, const AudioUnitParameter *inParameter, AudioUnitParameterValue inValue, UInt32 inBufferOffsetInFrames)
{
  ListenerMap *v9;
  ListenerMap *v10;
  float *v11;
  AudioUnitParameterValue v13;

  v13 = inValue;
  if (inParameter)
  {
    v9 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
    v10 = (ListenerMap *)AudioUnitSetParameter(inParameter->mAudioUnit, inParameter->mParameterID, inParameter->mScope, inParameter->mElement, inValue, inBufferOffsetInFrames);
    if (!(_DWORD)v10)
    {
      ListenerMap::instance(v10);
      LODWORD(v10) = ListenerMap::NotifyParameterChange(v9, (AUListener *)inSendingObject, (char *)inParameter, (const XAUParameter *)&v13, v11);
    }
  }
  else
  {
    LODWORD(v10) = -50;
  }
  return (int)v10;
}

OSStatus AUParameterListenerNotify(AUParameterListenerRef inSendingListener, void *inSendingObject, const AudioUnitParameter *inParameter)
{
  ListenerMap *v5;
  float *v6;

  if (!inParameter)
    return -50;
  v5 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
  ListenerMap::instance(v5);
  return ListenerMap::NotifyParameterChange(v5, (AUListener *)inSendingObject, (char *)inParameter, 0, v6);
}

OSStatus AUEventListenerCreate(AUEventListenerProc inProc, void *inUserData, CFRunLoopRef inRunLoop, CFStringRef inRunLoopMode, Float32 inNotificationInterval, Float32 inValueChangeGranularity, AUEventListenerRef *outListener)
{
  OSStatus result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  result = -50;
  if (inRunLoopMode && inRunLoop && inProc && outListener)
  {
    std::allocate_shared[abi:ne180100]<CAEventReceiver::Impl,std::allocator<CAEventReceiver::Impl>,__CFRunLoop *&,__CFString const*&,void>(&v17, inRunLoop, inRunLoopMode);
    v13 = operator new();
    v18[0] = &off_1E29136C8;
    v18[1] = inProc;
    v18[2] = inUserData;
    v19 = v18;
    v16 = v17;
    v17 = 0uLL;
    AUEventListener::AUEventListener(v13, (uint64_t)v18, &v16, inNotificationInterval, inValueChangeGranularity);
    CAEventReceiver::~CAEventReceiver((CAEventReceiver *)&v16);
    v14 = v19;
    if (v19 == v18)
    {
      v15 = 4;
      v14 = v18;
    }
    else
    {
      if (!v19)
      {
LABEL_10:
        *outListener = (AUEventListenerRef)*(unsigned int *)(v13 + 8);
        CAEventReceiver::~CAEventReceiver((CAEventReceiver *)&v17);
        return 0;
      }
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
    goto LABEL_10;
  }
  return result;
}

void sub_18EFFFA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;

  CAEventReceiver::~CAEventReceiver((CAEventReceiver *)&a9);
  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  MEMORY[0x193FFE460](v17, 0x10A1C403884EDB4);
  CAEventReceiver::~CAEventReceiver((CAEventReceiver *)&a11);
  _Unwind_Resume(a1);
}

uint64_t AUEventListener::AUEventListener(uint64_t a1, uint64_t a2, __int128 *a3, double a4, double a5)
{
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v16[2];
  __int128 v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v9 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v17 = v9;
  v16[0] = 0;
  v16[1] = 0;
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)a1);
  *(_QWORD *)a1 = off_1E2900E78;
  *(_OWORD *)(a1 + 16) = v17;
  v17 = 0uLL;
  *(double *)(a1 + 32) = a4;
  *(double *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  CAEventReceiver::~CAEventReceiver((CAEventReceiver *)&v17);
  *(_QWORD *)a1 = off_1E29079E0;
  *(_QWORD *)(a1 + 64) = (unint64_t)(a5 * 24000000.0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v18[0] = &off_1E2915960;
  v18[1] = a1;
  v19 = v18;
  CAEventReceiver::createTimer(*(_QWORD *)(a1 + 16), (uint64_t)v18);
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v11 + 8 * v12))(v11, v10);
LABEL_6:
  CAEventReceiver::~CAEventReceiver((CAEventReceiver *)v16);
  *(_QWORD *)a1 = &off_1E2904E18;
  v13 = (_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 24);
  if (v14)
  {
    if (v14 == a2)
    {
      *(_QWORD *)(a1 + 160) = a1 + 136;
      (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 24))(*v13);
      return a1;
    }
    *(_QWORD *)(a1 + 160) = v14;
  }
  else
  {
    v13 = (_QWORD *)(a1 + 160);
  }
  *v13 = 0;
  return a1;
}

void sub_18EFFFC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AUEventListenerCreate::$_0,std::allocator<AUEventListenerCreate::$_0>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

__n128 std::__function::__func<AUEventListenerCreate::$_0,std::allocator<AUEventListenerCreate::$_0>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E29136C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUEventListenerCreate::$_0,std::allocator<AUEventListenerCreate::$_0>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E29136C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AUEventListenerCreate::$_0,std::allocator<AUEventListenerCreate::$_0>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, float *a5)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, float))(a1 + 8))(*(_QWORD *)(a1 + 16), *a2, *a3, *a4, *a5);
}

OSStatus AUEventListenerCreateWithDispatchQueue(AUEventListenerRef *outListener, Float32 inNotificationInterval, Float32 inValueChangeGranularity, dispatch_queue_t inDispatchQueue, AUEventListenerBlock inBlock)
{
  OSStatus result;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  result = -50;
  if (!inDispatchQueue || !outListener || !inBlock)
    return result;
  v10 = _Block_copy(inBlock);
  std::allocate_shared[abi:ne180100]<CAEventReceiver::Impl,std::allocator<CAEventReceiver::Impl>,dispatch_queue_s *&,void>(&v16, inDispatchQueue);
  v11 = operator new();
  if (v10)
    v12 = _Block_copy(v10);
  else
    v12 = 0;
  v17[0] = &off_1E29133F8;
  v17[1] = v12;
  v18 = v17;
  v15 = v16;
  v16 = 0uLL;
  AUEventListener::AUEventListener(v11, (uint64_t)v17, &v15, inNotificationInterval, inValueChangeGranularity);
  CAEventReceiver::~CAEventReceiver((CAEventReceiver *)&v15);
  v13 = v18;
  if (v18 == v17)
  {
    v14 = 4;
    v13 = v17;
    goto LABEL_11;
  }
  if (v18)
  {
    v14 = 5;
LABEL_11:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  *outListener = (AUEventListenerRef)*(unsigned int *)(v11 + 8);
  CAEventReceiver::~CAEventReceiver((CAEventReceiver *)&v16);
  if (v10)
    _Block_release(v10);
  return 0;
}

void sub_18EFFFE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::~__func(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E29133F8;
  v2 = (const void *)a1[1];
  if (v2)
    _Block_release(v2);
  return a1;
}

void std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::~__func(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E29133F8;
  v1 = (const void *)a1[1];
  if (v1)
    _Block_release(v1);
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::__clone(uint64_t a1)
{
  void **v1;
  _QWORD *v2;

  v1 = (void **)(a1 + 8);
  v2 = operator new(0x10uLL);
  *v2 = &off_1E29133F8;
  std::__compressed_pair_elem<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,0,false>::__compressed_pair_elem[abi:ne180100]<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)> const&,0ul>(v2 + 1, v1);
  return v2;
}

_QWORD *std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29133F8;
  return std::__compressed_pair_elem<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,0,false>::__compressed_pair_elem[abi:ne180100]<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)> const&,0ul>(a2 + 1, (void **)(a1 + 8));
}

void std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::destroy[abi:ne180100](*(const void **)(a1 + 8));
}

void std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::destroy[abi:ne180100](a1[1]);
  operator delete(a1);
}

uint64_t std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5)
{
  return (*(uint64_t (**)(float))(*(_QWORD *)(a1 + 8) + 16))(*a5);
}

void std::__function::__alloc_func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::destroy[abi:ne180100](const void *a1)
{
  if (a1)
    _Block_release(a1);
}

_QWORD *std::__compressed_pair_elem<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,0,false>::__compressed_pair_elem[abi:ne180100]<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)> const&,0ul>(_QWORD *a1, void **a2)
{
  void *v3;

  v3 = *a2;
  if (*a2)
    v3 = _Block_copy(v3);
  *a1 = v3;
  return a1;
}

OSStatus AUEventListenerAddEventType(AUEventListenerRef inListener, void *inObject, const AudioUnitEvent *inEvent)
{
  ListenerMap *v5;
  uint64_t v6;
  AudioUnitEventType mEventType;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  void **v17;
  void *v18;
  uint64_t v19;

  v5 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
  if (v5)
  {
    v6 = (uint64_t)v5;
    ListenerMap::instance(v5);
    mEventType = inEvent->mEventType;
    if (inEvent->mEventType - 1 < 2)
    {
      v19 = v6;
      v16 = &v19;
      v17 = &v18;
      v18 = inObject;
      *(_QWORD *)&v14 = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::CanInsertEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
      *((_QWORD *)&v14 + 1) = &v16;
      if (!ListenerMap::forEachBindingForEvent(inEvent, (uint64_t)&v14))
      {
        v9 = (*(uint64_t (**)(uint64_t, void *, const AudioUnitEvent *))(*(_QWORD *)v6 + 40))(v6, inObject, inEvent);
        if (v9)
        {
          v10 = v9;
          v11 = (__int128 *)inEvent;
LABEL_12:
          ListenerMap::InsertEvent(v11, v10);
          return 0;
        }
      }
    }
    else
    {
      if (mEventType != kAudioUnitEvent_PropertyChange)
      {
        if (mEventType == kAudioUnitEvent_ParameterValueChange)
          return ListenerMap::AddParameter(v6, (uint64_t)inObject, (uint64_t)inEvent);
        return -50;
      }
      v19 = v6;
      v16 = &v19;
      v17 = &v18;
      v18 = inObject;
      *(_QWORD *)&v14 = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::CanInsertEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
      *((_QWORD *)&v14 + 1) = &v16;
      if (!ListenerMap::forEachBindingForEvent(inEvent, (uint64_t)&v14))
      {
        v12 = *(_OWORD *)&inEvent->mArgument.mProperty.mPropertyID;
        v14 = *(_OWORD *)&inEvent->mEventType;
        v15 = v12;
        *(_QWORD *)((char *)&v15 + 4) = 0;
        v13 = (*(uint64_t (**)(uint64_t, void *, const AudioUnitEvent *))(*(_QWORD *)v6 + 48))(v6, inObject, inEvent);
        if (v13)
        {
          v10 = v13;
          v11 = &v14;
          goto LABEL_12;
        }
      }
    }
  }
  return -50;
}

OSStatus AUEventListenerRemoveEventType(AUEventListenerRef inListener, void *inObject, const AudioUnitEvent *inEvent)
{
  ListenerMap *v5;
  ListenerMap *v6;
  OSStatus v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  _QWORD v12[3];
  uint64_t (*v13)(uint64_t, uint64_t, caulk::pooled_semaphore_mutex *);
  void **v14;
  __int128 *v15;
  void *v16;
  void *v17;

  v5 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!v5)
    return -50;
  v6 = v5;
  ListenerMap::instance(v5);
  v7 = -50;
  if (inEvent->mEventType >= kAudioUnitEvent_PropertyChange)
  {
    if (inEvent->mEventType == kAudioUnitEvent_PropertyChange)
    {
      v8 = *(_OWORD *)&inEvent->mArgument.mProperty.mPropertyID;
      v10 = *(_OWORD *)&inEvent->mEventType;
      v11 = v8;
      *(_QWORD *)((char *)&v11 + 4) = 0;
      v16 = inObject;
      v17 = v6;
      v12[0] = &v17;
      v12[1] = &v16;
      v12[2] = ListenerMap::instance(void)::global;
      v13 = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::RemoveEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
      v14 = (void **)v12;
      if (ListenerMap::forEachBindingForEvent(&v10, (uint64_t)&v13))
        return 0;
      else
        return -50;
    }
  }
  else
  {
    v12[0] = v6;
    v17 = inObject;
    v13 = (uint64_t (*)(uint64_t, uint64_t, caulk::pooled_semaphore_mutex *))v12;
    v14 = &v17;
    v15 = ListenerMap::instance(void)::global;
    *(_QWORD *)&v10 = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::RemoveEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
    *((_QWORD *)&v10 + 1) = &v13;
    if (ListenerMap::forEachBindingForEvent(inEvent, (uint64_t)&v10))
      return 0;
    else
      return -50;
  }
  return v7;
}

OSStatus AUEventListenerNotify(AUEventListenerRef inSendingListener, void *inSendingObject, const AudioUnitEvent *inEvent)
{
  ListenerMap *v5;
  ListenerMap *v7;
  float *v8;
  _QWORD v9[2];
  _QWORD v10[3];
  void *v11;
  ListenerMap *v12;

  v5 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!inEvent || inEvent->mEventType == kAudioUnitEvent_PropertyChange)
    return -50;
  v7 = v5;
  ListenerMap::instance(v5);
  if (inEvent->mEventType == kAudioUnitEvent_ParameterValueChange)
    return ListenerMap::NotifyParameterChange(v7, (AUListener *)inSendingObject, (char *)&inEvent->mArgument, 0, v8);
  v12 = v7;
  v11 = inSendingObject;
  v9[0] = &v12;
  v9[1] = &v11;
  v10[0] = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::NotifyEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
  v10[1] = v9;
  ListenerMap::forEachBindingForEvent(inEvent, (uint64_t)v10);
  return 0;
}

intptr_t AUEventListenerFlush(AUListenerBase *a1)
{
  intptr_t result;
  dispatch_semaphore_t *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = BaseOpaqueObject::ResolveOpaqueRef();
  if (result)
  {
    v2 = *(dispatch_semaphore_t **)(result + 16);
    v3 = (unsigned int *)(v2 + 14);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    result = CAEventReceiver::Impl::timerShouldFireWithin((CAEventReceiver::Impl *)v2, 0.0);
    if ((result & 1) != 0)
    {
      return dispatch_semaphore_wait(v2[13], 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  return result;
}

AudioUnitParameterValue AUParameterValueFromLinear(Float32 inLinearValue, const AudioUnitParameter *inParameter)
{
  uint64_t v3;
  uint64_t Transformer;
  float v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BYTE v10[8];
  uint64_t v11;
  std::__shared_weak_count *v12;
  char v13;

  if (!inParameter)
    return -50.0;
  XAUParameter::GetParamProxy((XAUParameter *)v10, inParameter);
  if (!v13)
    return 0.0;
  v3 = v11;
  Transformer = GetTransformer(*(_DWORD *)(v11 + 40));
  v5 = (*(double (**)(uint64_t, double, double, double))(*(_QWORD *)Transformer + 8))(Transformer, inLinearValue, *(float *)(v3 + 28), *(float *)(v3 + 32));
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_18F0004E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t GetTransformer(int a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = gTransformers;
  if (!gTransformers)
  {
    pthread_once(&sOnce, (void (*)(void))InitAllTransformers);
    v2 = gTransformers;
  }
  v3 = a1 & 0x470000;
  v4 = v2 + 48;
  v5 = v2 + 16;
  v6 = v2 + 8;
  if ((a1 & 0x470000) != 0x400000)
    v6 = v2;
  if (v3 != 327680)
    v5 = v6;
  if (v3 != 0x40000)
    v4 = v5;
  v7 = v2 + 24;
  v8 = v2 + 32;
  if (v3 == 196608)
    v2 += 40;
  if (v3 == 0x20000)
    v2 = v8;
  if (v3 == 0x10000)
    v2 = v7;
  if ((a1 & 0x470000u) < 0x40000)
    return v2;
  else
    return v4;
}

_QWORD *InitAllTransformers(void)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = off_1E29071B0;
  result[1] = off_1E2904608;
  result[2] = off_1E2904560;
  result[3] = off_1E2905D68;
  result[4] = off_1E2907260;
  result[5] = off_1E2905648;
  result[6] = off_1E2907150;
  gTransformers = (uint64_t)result;
  return result;
}

long double CubeRtTransformer::tolinear(CubeRtTransformer *this, double a2, double a3, double a4)
{
  return pow((a2 - a3) / (a4 - a3), 0.333333333);
}

double CubeRtTransformer::fromlinear(CubeRtTransformer *this, double a2, double a3, double a4)
{
  return a3 + (a4 - a3) * (a2 * a2 * a2);
}

void CubeRtTransformer::~CubeRtTransformer(CubeRtTransformer *this)
{
  JUMPOUT(0x193FFE460);
}

double CubeTransformer::tolinear(CubeTransformer *this, double a2, double a3, double a4)
{
  return (a2 - a3) / (a4 - a3) * ((a2 - a3) / (a4 - a3) * ((a2 - a3) / (a4 - a3)));
}

long double CubeTransformer::fromlinear(CubeTransformer *this, long double a2, double a3, double a4)
{
  return a3 + (a4 - a3) * pow(a2, 0.333333333);
}

void CubeTransformer::~CubeTransformer(CubeTransformer *this)
{
  JUMPOUT(0x193FFE460);
}

double SquareTransformer::tolinear(SquareTransformer *this, double a2, double a3, double a4)
{
  return (a2 - a3) / (a4 - a3) * ((a2 - a3) / (a4 - a3));
}

double SquareTransformer::fromlinear(SquareTransformer *this, double a2, double a3, double a4)
{
  return a3 + (a4 - a3) * sqrt(a2);
}

void SquareTransformer::~SquareTransformer(SquareTransformer *this)
{
  JUMPOUT(0x193FFE460);
}

double SqrtTransformer::tolinear(SqrtTransformer *this, double a2, double a3, double a4)
{
  return sqrt((a2 - a3) / (a4 - a3));
}

double SqrtTransformer::fromlinear(SqrtTransformer *this, double a2, double a3, double a4)
{
  return a3 + (a4 - a3) * (a2 * a2);
}

void SqrtTransformer::~SqrtTransformer(SqrtTransformer *this)
{
  JUMPOUT(0x193FFE460);
}

long double ExpTransformer::tolinear(ExpTransformer *this, long double a2, long double a3, long double a4)
{
  double v6;
  double v7;

  v6 = exp(a2);
  v7 = exp(a3);
  return (v6 - v7) / (exp(a4) - v7);
}

long double ExpTransformer::fromlinear(ExpTransformer *this, double a2, long double a3, long double a4)
{
  double v6;
  long double v7;

  v6 = exp(a3);
  v7 = v6 + (exp(a4) - v6) * a2;
  return log(v7);
}

void ExpTransformer::~ExpTransformer(ExpTransformer *this)
{
  JUMPOUT(0x193FFE460);
}

long double LogTransformer::tolinear(LogTransformer *this, long double a2, long double a3, long double a4)
{
  double v6;
  double v7;

  v6 = log(a2);
  v7 = log(a3);
  return (v6 - v7) / (log(a4) - v7);
}

long double LogTransformer::fromlinear(LogTransformer *this, long double a2, double a3, double a4)
{
  return pow(a4 / a3, a2) * a3;
}

void LogTransformer::~LogTransformer(LogTransformer *this)
{
  JUMPOUT(0x193FFE460);
}

double LinearTransformer::tolinear(LinearTransformer *this, double a2, double a3, double a4)
{
  return (a2 - a3) / (a4 - a3);
}

double LinearTransformer::fromlinear(LinearTransformer *this, double a2, double a3, double a4)
{
  return a3 + (a4 - a3) * a2;
}

void LinearTransformer::~LinearTransformer(LinearTransformer *this)
{
  JUMPOUT(0x193FFE460);
}

Float32 AUParameterValueToLinear(AudioUnitParameterValue inParameterValue, const AudioUnitParameter *inParameter)
{
  uint64_t v3;
  double (***Transformer)(_QWORD, double, double, double);
  float v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BYTE v10[8];
  uint64_t v11;
  std::__shared_weak_count *v12;
  char v13;

  if (!inParameter)
    return -50.0;
  XAUParameter::GetParamProxy((XAUParameter *)v10, inParameter);
  if (!v13)
    return 0.0;
  v3 = v11;
  Transformer = (double (***)(_QWORD, double, double, double))GetTransformer(*(_DWORD *)(v11 + 40));
  v5 = (**Transformer)(Transformer, inParameterValue, *(float *)(v3 + 28), *(float *)(v3 + 32));
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_18F000964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

char *__cdecl AUParameterFormatValue(Float64 inParameterValue, const AudioUnitParameter *inParameter, char *inTextBuffer, UInt32 inDigits)
{
  Float64 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _BYTE v12[8];
  uint64_t v13;
  std::__shared_weak_count *v14;
  char v15;

  *inTextBuffer = 0;
  if (inParameter)
  {
    XAUParameter::GetParamProxy((XAUParameter *)v12, inParameter);
    if (v15)
    {
      v7 = inParameterValue;
      if (*(_DWORD *)(v13 + 24) != 8)
        v7 = (float)(*(float *)(v13 + 32) - *(float *)(v13 + 28));
      if (v7 < 0.000001)
        v7 = 0.000001;
      if ((int)(~(int)log10(v7) + inDigits) < 1)
        snprintf(inTextBuffer, 0x20uLL, "%.0f");
      else
        snprintf(inTextBuffer, 0x20uLL, "%.*f");
      v8 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  return inTextBuffer;
}

void sub_18F000AE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F000BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

void sub_18F000C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_18F000D30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

uint64_t CA::ADMBuilder::Impl::parse_model(int64_t this, char *__s1, const char **a3)
{
  char *v6;
  const char *v7;
  const unsigned __int8 **v8;
  std::string::value_type *v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  std::string::size_type v13;
  const unsigned __int8 *v14;
  uint64_t v15;
  const char *v16;
  const unsigned __int8 **v17;
  CA::ADMTime *v18;
  int v19;
  std::string *v20;
  int v21;
  uint64_t v22;
  const unsigned __int8 *v23;
  char *v24;
  unsigned __int8 *v25;
  const char *v26;
  const unsigned __int8 **v27;
  std::string::value_type *v28;
  int v29;
  std::string *v30;
  int v31;
  int v32;
  const unsigned __int8 *v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned __int8 *v36;
  const char *v37;
  const unsigned __int8 **v38;
  CA::ADMTime *v39;
  int v40;
  std::string *v41;
  int v42;
  const unsigned __int8 *v43;
  CA::ADMBuilder::Impl *v44;
  CA::ADMBuilder::Impl *v45;
  __int16 v46;
  uint64_t v47;
  NSObject *v48;
  _BYTE *v49;
  unint64_t *v50;
  uint64_t v52;
  NSObject *v53;
  std::string *v54;
  char *v55;
  char *v56;
  std::string *v57;
  const char *v58;
  const unsigned __int8 **v59;
  char *v60;
  int v61;
  std::string *v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  const unsigned __int8 *v67;
  CA::ADMBuilder::Impl *v68;
  std::__shared_weak_count *size;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  NSObject *v73;
  _BYTE *v74;
  char *v75;
  unsigned __int8 *v76;
  const char *v77;
  char *v78;
  std::string *v79;
  std::string *v80;
  std::string *v81;
  const unsigned __int8 **v82;
  std::string::value_type *v83;
  int v84;
  std::string *v85;
  int v86;
  int v87;
  int v88;
  const unsigned __int8 *v89;
  unsigned __int8 *v90;
  int64x2_t *v91;
  _OWORD *v92;
  unint64_t v93;
  _OWORD *v94;
  uint64_t v95;
  NSObject *v96;
  _BYTE *v97;
  uint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  __int128 *v103;
  const char *v104;
  const unsigned __int8 **v105;
  std::string::value_type *v106;
  int v107;
  std::string *v108;
  int v109;
  int v110;
  int v111;
  const unsigned __int8 *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  _QWORD *v127;
  _QWORD *v128;
  char *v129;
  __int128 v130;
  int64x2_t v131;
  uint64_t *v132;
  unsigned __int8 **v133;
  unint64_t v134;
  _QWORD *v135;
  char *v136;
  __int128 *v137;
  const char *v138;
  const unsigned __int8 **v139;
  std::string::value_type *v140;
  int v141;
  std::string *v142;
  int v143;
  int v144;
  int v145;
  const unsigned __int8 *v146;
  unint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  unsigned __int8 **v155;
  _QWORD *v156;
  _QWORD *v157;
  char *v158;
  __int128 v159;
  int64x2_t v160;
  int64x2_t *v161;
  unsigned __int8 **v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  unsigned __int8 **v172;
  _QWORD *v173;
  _QWORD *v174;
  char *v175;
  __int128 v176;
  int64x2_t v177;
  char v178;
  CA::ADMBuilder::Impl *v179;
  NSObject *v180;
  _BYTE *v181;
  char *v182;
  uint64_t v183;
  __int128 *v184;
  __int128 *v185;
  __int128 *v186;
  std::string::size_type v187;
  _QWORD *v188;
  unint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  __int128 v198;
  _QWORD *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  char v203;
  CA::ADMBuilder::Impl *v204;
  NSObject *v205;
  _BYTE *v206;
  std::string::size_type v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint8x8_t v214;
  unint64_t v215;
  unsigned __int8 **v216;
  unsigned __int8 *v217;
  unint64_t v218;
  _BOOL8 v219;
  char *v220;
  _QWORD *v221;
  std::string *v222;
  float v223;
  float v224;
  _BOOL8 v225;
  unint64_t v226;
  unint64_t v227;
  size_t v228;
  uint64_t v229;
  NSObject *v230;
  _BYTE *v231;
  std::string::size_type v232;
  uint64_t v233;
  _QWORD *v234;
  unint64_t v235;
  int v236;
  NSObject *v237;
  _BYTE *v238;
  _QWORD *v239;
  _OWORD *v240;
  unint64_t v241;
  _OWORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t v249;
  char *v250;
  _QWORD *v251;
  _QWORD *v252;
  char *v253;
  __int128 v254;
  int64x2_t v255;
  std::string::size_type v256;
  unint64_t *v257;
  unint64_t v258;
  CA::ADMBuilder::Impl *v259;
  std::string v260;
  _BYTE buf[28];
  std::string __p[2];
  char v263;
  _BYTE v264[32];
  _BYTE v265[25];
  _BYTE v266[25];
  int v267;
  char v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  _BYTE v272[128];
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;

  v276 = *MEMORY[0x1E0C80C00];
  if (!strcmp(__s1, "audioProgramme"))
  {
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    __p[1].__r_.__value_.__s.__data_[0] = 0;
    __p[1].__r_.__value_.__s.__data_[8] = 0;
    v263 = 0;
    v264[0] = 0;
    v264[24] = 0;
    v265[0] = 0;
    v265[24] = 0;
    v266[0] = 0;
    v266[24] = 0;
    LOBYTE(v267) = 0;
    v268 = 0;
    v272[68] = 0;
    v272[72] = 0;
    v272[120] = 0;
    v274 = 0;
    v275 = 0;
    v273 = 0;
    v269 = 0u;
    v270 = 0u;
    v271 = 0u;
    memset(v272, 0, 25);
    if (a3)
    {
      v16 = *a3;
      if (*a3)
      {
        v17 = (const unsigned __int8 **)(a3 + 2);
        do
        {
          v18 = (CA::ADMTime *)*(v17 - 1);
          if (!strcmp(v16, "audioProgrammeID"))
          {
            v20 = __p;
          }
          else
          {
            v19 = strcmp(v16, "audioProgrammeName");
            v20 = (std::string *)&__p[1].__r_.__value_.__r.__words[1];
            if (v19)
            {
              v21 = strcmp(v16, "audioProgrammeLanguage");
              v20 = (std::string *)v264;
              if (v21)
              {
                if (!strcmp(v16, "start"))
                {
                  CA::ADMTime::parse(v18, (uint64_t)buf);
                  if (!buf[24])
                    *(_DWORD *)(this + 632) = -66604;
                  *(_OWORD *)v265 = *(_OWORD *)buf;
                  *(_OWORD *)&v265[9] = *(_OWORD *)&buf[9];
                }
                else if (!strcmp(v16, "end"))
                {
                  CA::ADMTime::parse(v18, (uint64_t)buf);
                  if (!buf[24])
                    *(_DWORD *)(this + 632) = -66604;
                  *(_OWORD *)v266 = *(_OWORD *)buf;
                  *(_OWORD *)&v266[9] = *(_OWORD *)&buf[9];
                }
                else if (!strcmp(v16, "maxDuckingDepth"))
                {
                  std::string::basic_string[abi:ne180100]<0>(buf, (char *)v18);
                  v22 = CA::ADMBuilder::Impl::parse_float(this, (std::string *)buf);
                  v267 = v22;
                  v268 = BYTE4(v22);
                  if ((buf[23] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                }
                goto LABEL_37;
              }
            }
          }
          std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v20, (std::string::value_type *)v18);
LABEL_37:
          v23 = *v17;
          v17 += 2;
          v16 = (const char *)v23;
        }
        while (v23);
      }
    }
    if (*(_DWORD *)(this + 632))
      goto LABEL_46;
    if (__p[1].__r_.__value_.__s.__data_[0])
    {
      v52 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(this + 720, (unsigned __int8 *)__p, (uint64_t)__p);
      if ((v52 & 1) == 0)
      {
        v53 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v52);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v260, (uint64_t)__p, "");
          v54 = (v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v260
              : (std::string *)v260.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ADMBuilderParseModel.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 40;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v54;
          _os_log_impl(&dword_18EE07000, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple dialogues with ID '%s'", buf, 0x1Cu);
          if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v260.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)(this + 632) = -66591;
        goto LABEL_46;
      }
      if (*(_DWORD *)(this + 632))
      {
LABEL_46:
        v15 = 1;
LABEL_47:
        CA::ADMProgramme::~ADMProgramme((CA::ADMProgramme *)__p);
        return v15;
      }
    }
    v98 = *(uint64_t **)this;
    v99 = *(_QWORD *)(*(_QWORD *)this + 8);
    v100 = *(_QWORD *)(*(_QWORD *)this + 16);
    if (v99 >= v100)
    {
      v114 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v99 - *v98) >> 4);
      if (v114 + 1 > 0xB21642C8590B21)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v115 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v100 - *v98) >> 4);
      v116 = 2 * v115;
      if (2 * v115 <= v114 + 1)
        v116 = v114 + 1;
      if (v115 >= 0x590B21642C8590)
        v117 = 0xB21642C8590B21;
      else
        v117 = v116;
      if (v117)
      {
        if (v117 > 0xB21642C8590B21)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v118 = (char *)operator new(368 * v117);
      }
      else
      {
        v118 = 0;
      }
      v182 = &v118[368 * v117];
      v183 = std::construct_at[abi:ne180100]<CA::ADMProgramme,CA::ADMProgramme,CA::ADMProgramme*>((uint64_t)&v118[368 * v114], (__int128 *)__p);
      v101 = v183 + 368;
      v185 = (__int128 *)*v98;
      v184 = (__int128 *)v98[1];
      if (v184 == (__int128 *)*v98)
      {
        *v98 = v183;
        v98[1] = v101;
        v98[2] = (uint64_t)v182;
      }
      else
      {
        do
        {
          v184 -= 23;
          v183 = std::construct_at[abi:ne180100]<CA::ADMProgramme,CA::ADMProgramme,CA::ADMProgramme*>(v183 - 368, v184);
        }
        while (v184 != v185);
        v186 = (__int128 *)*v98;
        v184 = (__int128 *)v98[1];
        *v98 = v183;
        v98[1] = v101;
        v98[2] = (uint64_t)v182;
        if (v184 != v186)
        {
          do
          {
            v184 -= 23;
            CA::ADMProgramme::~ADMProgramme((CA::ADMProgramme *)v184);
          }
          while (v184 != v186);
          v184 = v186;
        }
      }
      if (v184)
        operator delete(v184);
    }
    else
    {
      v101 = std::construct_at[abi:ne180100]<CA::ADMProgramme,CA::ADMProgramme,CA::ADMProgramme*>(v99, (__int128 *)__p)
           + 368;
      v98[1] = v101;
    }
    v98[1] = v101;
    memset(buf, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)(this + 320), (uint64_t)buf);
    v260.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v260);
    memset(buf, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)(this + 344), (uint64_t)buf);
    v260.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v260);
    memset(buf, 0, 24);
    std::vector<std::vector<std::vector<std::string>>>::push_back[abi:ne180100]((void ***)(this + 368), (uint64_t)buf);
    v260.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v260);
    v15 = 3;
    goto LABEL_47;
  }
  v259 = (CA::ADMBuilder::Impl *)this;
  if (!strcmp(__s1, "audioContent"))
  {
    v24 = (char *)operator new(0xE0uLL);
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = 0;
    *(_QWORD *)v24 = &off_1E29178D8;
    *(_OWORD *)(v24 + 24) = 0u;
    v25 = (unsigned __int8 *)(v24 + 24);
    *(_OWORD *)(v24 + 40) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 120) = 0u;
    *(_OWORD *)(v24 + 136) = 0u;
    *(_OWORD *)(v24 + 152) = 0u;
    *(_OWORD *)(v24 + 168) = 0u;
    *(_OWORD *)(v24 + 184) = 0u;
    *(_OWORD *)(v24 + 200) = 0u;
    *((_QWORD *)v24 + 27) = 0;
    v260.__r_.__value_.__r.__words[0] = (std::string::size_type)(v24 + 24);
    v260.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
    if (a3)
    {
      v26 = *a3;
      if (*a3)
      {
        v27 = (const unsigned __int8 **)(a3 + 2);
        do
        {
          v28 = (std::string::value_type *)*(v27 - 1);
          v29 = strcmp(v26, "audioContentID");
          v30 = (std::string *)(v24 + 24);
          if (!v29
            || (v31 = strcmp(v26, "audioContentName"), v30 = (std::string *)(v24 + 56), !v31)
            || (v32 = strcmp(v26, "audioContentLanguage"), v30 = (std::string *)(v24 + 88), !v32))
          {
            std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v30, v28);
          }
          v33 = *v27;
          v27 += 2;
          v26 = (const char *)v33;
        }
        while (v33);
      }
    }
    if (*(_DWORD *)(this + 632))
      goto LABEL_57;
    if (v24[48])
    {
      v72 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(this + 640, v25, (uint64_t)v25);
      if ((v72 & 1) == 0)
      {
        v73 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v72);
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v25, "");
          v74 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
          WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 70;
          WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v74;
          _os_log_impl(&dword_18EE07000, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple contents with ID '%s'", (uint8_t *)__p, 0x1Cu);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        *(_DWORD *)(this + 632) = -66591;
        goto LABEL_57;
      }
      if (*(_DWORD *)(this + 632))
      {
LABEL_57:
        v34 = (unint64_t *)(v24 + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
LABEL_104:
        if (!v35)
        {
          (*(void (**)(char *))(*(_QWORD *)v24 + 16))(v24);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v24);
        }
        return 1;
      }
    }
    v132 = *(uint64_t **)this;
    v133 = *(unsigned __int8 ***)(*(_QWORD *)this + 32);
    v134 = *(_QWORD *)(*(_QWORD *)this + 40);
    if ((unint64_t)v133 >= v134)
    {
      v148 = v132[3];
      v149 = ((uint64_t)v133 - v148) >> 4;
      v150 = v149 + 1;
      if ((unint64_t)(v149 + 1) >> 60)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v151 = v134 - v148;
      if (v151 >> 3 > v150)
        v150 = v151 >> 3;
      if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF0)
        v152 = 0xFFFFFFFFFFFFFFFLL;
      else
        v152 = v150;
      __p[1].__r_.__value_.__l.__size_ = *(_QWORD *)this + 40;
      v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v152);
      v155 = (unsigned __int8 **)&v153[16 * v149];
      *v155 = v25;
      v155[1] = (unsigned __int8 *)v24;
      *(_OWORD *)&v260.__r_.__value_.__l.__data_ = 0uLL;
      v157 = (_QWORD *)v132[3];
      v156 = (_QWORD *)v132[4];
      if (v156 == v157)
      {
        v160 = vdupq_n_s64((unint64_t)v156);
        v158 = &v153[16 * v149];
      }
      else
      {
        v158 = &v153[16 * v149];
        do
        {
          v159 = *((_OWORD *)v156 - 1);
          v156 -= 2;
          *((_OWORD *)v158 - 1) = v159;
          v158 -= 16;
          *v156 = 0;
          v156[1] = 0;
        }
        while (v156 != v157);
        v160 = *(int64x2_t *)(v132 + 3);
      }
      v135 = v155 + 2;
      v132[3] = (uint64_t)v158;
      v132[4] = (uint64_t)(v155 + 2);
      *(int64x2_t *)&__p[0].__r_.__value_.__r.__words[1] = v160;
      v207 = v132[5];
      v132[5] = (uint64_t)&v153[16 * v154];
      __p[1].__r_.__value_.__r.__words[0] = v207;
      __p[0].__r_.__value_.__r.__words[0] = v160.i64[0];
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)__p);
    }
    else
    {
      *v133 = v25;
      v133[1] = (unsigned __int8 *)v24;
      v135 = v133 + 2;
      *(_OWORD *)&v260.__r_.__value_.__l.__data_ = 0uLL;
    }
    v132[4] = (uint64_t)v135;
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)(this + 56), (uint64_t)__p);
    *(_QWORD *)buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    return 21;
  }
  if (!strcmp(__s1, "audioObject"))
  {
    v24 = (char *)operator new(0x1D8uLL);
    *(_QWORD *)v24 = &off_1E2917A28;
    *((_QWORD *)v24 + 1) = 0;
    *(_OWORD *)(v24 + 24) = 0u;
    v36 = (unsigned __int8 *)(v24 + 24);
    *((_QWORD *)v24 + 2) = 0;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 120) = 0u;
    *(_OWORD *)(v24 + 136) = 0u;
    *(_OWORD *)(v24 + 152) = 0u;
    *(_OWORD *)(v24 + 168) = 0u;
    *(_OWORD *)(v24 + 184) = 0u;
    *(_OWORD *)(v24 + 200) = 0u;
    *(_OWORD *)(v24 + 216) = 0u;
    *(_OWORD *)(v24 + 232) = 0u;
    *(_OWORD *)(v24 + 248) = 0u;
    *(_OWORD *)(v24 + 264) = 0u;
    *(_OWORD *)(v24 + 280) = 0u;
    *(_OWORD *)(v24 + 296) = 0u;
    *(_OWORD *)(v24 + 312) = 0u;
    *(_OWORD *)(v24 + 328) = 0u;
    *(_OWORD *)(v24 + 344) = 0u;
    *(_OWORD *)(v24 + 360) = 0u;
    *(_OWORD *)(v24 + 376) = 0u;
    *(_OWORD *)(v24 + 392) = 0u;
    *(_OWORD *)(v24 + 408) = 0u;
    *(_OWORD *)(v24 + 424) = 0u;
    *(_OWORD *)(v24 + 440) = 0u;
    *(_OWORD *)(v24 + 456) = 0u;
    v260.__r_.__value_.__r.__words[0] = (std::string::size_type)(v24 + 24);
    v260.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
    if (a3)
    {
      v37 = *a3;
      if (*a3)
      {
        v38 = (const unsigned __int8 **)(a3 + 2);
        do
        {
          v39 = (CA::ADMTime *)*(v38 - 1);
          v40 = strcmp(v37, "audioObjectID");
          v41 = (std::string *)(v24 + 24);
          if (v40 && (v42 = strcmp(v37, "audioObjectName"), v41 = (std::string *)(v24 + 56), v42))
          {
            if (!strcmp(v37, "start"))
            {
              CA::ADMTime::parse(v39, (uint64_t)__p);
              if (!__p[1].__r_.__value_.__s.__data_[0])
                *((_DWORD *)v259 + 158) = -66604;
              *(_OWORD *)(v24 + 88) = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
              *(_OWORD *)(v24 + 97) = *(_OWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 1);
              goto LABEL_73;
            }
            if (!strcmp(v37, "duration"))
            {
              CA::ADMTime::parse(v39, (uint64_t)__p);
              if (!__p[1].__r_.__value_.__s.__data_[0])
                *((_DWORD *)v259 + 158) = -66604;
              *(_OWORD *)(v24 + 120) = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
              *(_OWORD *)(v24 + 129) = *(_OWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 1);
              goto LABEL_73;
            }
            if (!strcmp(v37, "dialogue"))
            {
              std::string::basic_string[abi:ne180100]<0>(__p, (char *)v39);
              v44 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_uint((uint64_t)v259, __p);
              v45 = v44;
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p[0].__r_.__value_.__l.__data_);
              if (!((unint64_t)v45 >> 32))
                goto LABEL_73;
              if ((_DWORD)v45)
              {
                if ((_DWORD)v45 == 1)
                {
                  v46 = 257;
                }
                else
                {
                  if ((_DWORD)v45 != 2)
                  {
                    v48 = CA::ADMBuilder::Impl::log(v44);
                    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                    {
                      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v36, "");
                      v49 = buf;
                      if (buf[23] < 0)
                        v49 = *(_BYTE **)buf;
                      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
                      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
                      WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 108;
                      WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v49;
                      _os_log_impl(&dword_18EE07000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown dialogue type in object '%s'", (uint8_t *)__p, 0x1Cu);
                      if ((buf[23] & 0x80000000) != 0)
                        operator delete(*(void **)buf);
                    }
                    *((_DWORD *)v259 + 158) = -66598;
                    goto LABEL_73;
                  }
                  v46 = 258;
                }
              }
              else
              {
                v46 = 256;
              }
              *((_WORD *)v24 + 76) = v46;
            }
            else
            {
              if (!strcmp(v37, "importance"))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, (char *)v39);
                v47 = CA::ADMBuilder::Impl::parse_uint((uint64_t)v259, __p);
                *((_DWORD *)v24 + 39) = v47;
                v24[160] = BYTE4(v47);
                goto LABEL_90;
              }
              if (!strcmp(v37, "interact"))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, (char *)v39);
                *((_WORD *)v24 + 82) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)v259, (unsigned __int8 *)__p);
LABEL_90:
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                goto LABEL_73;
              }
              if (!strcmp(v37, "disableDucking"))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, (char *)v39);
                *((_WORD *)v24 + 83) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)v259, (unsigned __int8 *)__p);
                goto LABEL_90;
              }
            }
          }
          else
          {
            std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v41, (std::string::value_type *)v39);
          }
LABEL_73:
          v43 = *v38;
          v38 += 2;
          v37 = (const char *)v43;
        }
        while (v43);
      }
    }
    if (*((_DWORD *)v259 + 158))
      goto LABEL_102;
    if (v24[48])
    {
      v95 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v259 + 680, v36, (uint64_t)v36);
      if ((v95 & 1) == 0)
      {
        v96 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v95);
        if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v36, "");
          v97 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
          WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 126;
          WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v97;
          _os_log_impl(&dword_18EE07000, v96, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple objects with ID '%s'", (uint8_t *)__p, 0x1Cu);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        *((_DWORD *)v259 + 158) = -66591;
        goto LABEL_102;
      }
      if (*((_DWORD *)v259 + 158))
      {
LABEL_102:
        v50 = (unint64_t *)(v24 + 8);
        do
          v35 = __ldaxr(v50);
        while (__stlxr(v35 - 1, v50));
        goto LABEL_104;
      }
    }
    v161 = *(int64x2_t **)v259;
    v162 = *(unsigned __int8 ***)(*(_QWORD *)v259 + 56);
    v163 = *(_QWORD *)(*(_QWORD *)v259 + 64);
    if ((unint64_t)v162 >= v163)
    {
      v165 = v161[3].i64[0];
      v166 = ((uint64_t)v162 - v165) >> 4;
      v167 = v166 + 1;
      if ((unint64_t)(v166 + 1) >> 60)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v168 = v163 - v165;
      if (v168 >> 3 > v167)
        v167 = v168 >> 3;
      if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF0)
        v169 = 0xFFFFFFFFFFFFFFFLL;
      else
        v169 = v167;
      __p[1].__r_.__value_.__l.__size_ = *(_QWORD *)v259 + 64;
      v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v169);
      v172 = (unsigned __int8 **)&v170[16 * v166];
      *v172 = v36;
      v172[1] = (unsigned __int8 *)v24;
      *(_OWORD *)&v260.__r_.__value_.__l.__data_ = 0uLL;
      v174 = (_QWORD *)v161[3].i64[0];
      v173 = (_QWORD *)v161[3].i64[1];
      if (v173 == v174)
      {
        v177 = vdupq_n_s64((unint64_t)v173);
        v175 = &v170[16 * v166];
      }
      else
      {
        v175 = &v170[16 * v166];
        do
        {
          v176 = *((_OWORD *)v173 - 1);
          v173 -= 2;
          *((_OWORD *)v175 - 1) = v176;
          v175 -= 16;
          *v173 = 0;
          v173[1] = 0;
        }
        while (v173 != v174);
        v177 = v161[3];
      }
      v164 = v172 + 2;
      v161[3].i64[0] = (uint64_t)v175;
      v161[3].i64[1] = (uint64_t)(v172 + 2);
      *(int64x2_t *)&__p[0].__r_.__value_.__r.__words[1] = v177;
      v232 = v161[4].u64[0];
      v161[4].i64[0] = (uint64_t)&v170[16 * v171];
      __p[1].__r_.__value_.__r.__words[0] = v232;
      __p[0].__r_.__value_.__r.__words[0] = v177.i64[0];
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)__p);
    }
    else
    {
      *v162 = v36;
      v162[1] = (unsigned __int8 *)v24;
      v164 = v162 + 2;
      *(_OWORD *)&v260.__r_.__value_.__l.__data_ = 0uLL;
    }
    v161[3].i64[1] = (uint64_t)v164;
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)v259 + 10, (uint64_t)__p);
    *(_QWORD *)buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)v259 + 13, (uint64_t)__p);
    *(_QWORD *)buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)v259 + 16, (uint64_t)__p);
    *(_QWORD *)buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)v259 + 19, (uint64_t)__p);
    *(_QWORD *)buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)v259 + 800);
    return 26;
  }
  if (strcmp(__s1, "audioPackFormat"))
  {
    if (!strcmp(__s1, "audioChannelFormat"))
    {
      v75 = (char *)operator new(0xC0uLL);
      *((_QWORD *)v75 + 1) = 0;
      *((_QWORD *)v75 + 2) = 0;
      *(_QWORD *)v75 = &off_1E29179F0;
      *(_OWORD *)(v75 + 24) = 0u;
      v76 = (unsigned __int8 *)(v75 + 24);
      *(_OWORD *)(v75 + 40) = 0u;
      *(_OWORD *)(v75 + 56) = 0u;
      *(_OWORD *)(v75 + 72) = 0u;
      *(_OWORD *)(v75 + 88) = 0u;
      *(_OWORD *)(v75 + 104) = 0u;
      *(_OWORD *)(v75 + 120) = 0u;
      *(_OWORD *)(v75 + 136) = 0u;
      *(_OWORD *)(v75 + 152) = 0u;
      *(_OWORD *)(v75 + 168) = 0u;
      *((_QWORD *)v75 + 23) = 0;
      *(_QWORD *)buf = v75 + 24;
      *(_QWORD *)&buf[8] = v75;
      if (a3)
      {
        v77 = *a3;
        if (*a3)
        {
          v78 = v75;
          v79 = (std::string *)(v75 + 120);
          v80 = (std::string *)(v75 + 88);
          v81 = (std::string *)(v75 + 56);
          v82 = (const unsigned __int8 **)(a3 + 2);
          do
          {
            v83 = (std::string::value_type *)*(v82 - 1);
            v84 = strcmp(v77, "audioChannelFormatID");
            v85 = (std::string *)v76;
            if (!v84
              || (v86 = strcmp(v77, "audioChannelFormatName"), v85 = v81, !v86)
              || (v87 = strcmp(v77, "typeLabel"), v85 = v80, !v87)
              || (v88 = strcmp(v77, "typeDefinition"), v85 = v79, !v88))
            {
              std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v85, v83);
            }
            v89 = *v82;
            v82 += 2;
            v77 = (const char *)v89;
          }
          while (v89);
          if (v78[48])
          {
            __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
            v90 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v259 + 920, v76, (__int128 **)__p);
            std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)v90 + 5, (uint64_t)v76, *(uint64_t *)&buf[8]);
          }
        }
      }
      v91 = *(int64x2_t **)v259;
      v92 = *(_OWORD **)(*(_QWORD *)v259 + 128);
      v93 = *(_QWORD *)(*(_QWORD *)v259 + 136);
      if ((unint64_t)v92 >= v93)
      {
        v119 = v91[7].i64[1];
        v120 = ((uint64_t)v92 - v119) >> 4;
        if ((unint64_t)(v120 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v121 = v93 - v119;
        v122 = v121 >> 3;
        if (v121 >> 3 <= (unint64_t)(v120 + 1))
          v122 = v120 + 1;
        if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF0)
          v123 = 0xFFFFFFFFFFFFFFFLL;
        else
          v123 = v122;
        __p[1].__r_.__value_.__l.__size_ = *(_QWORD *)v259 + 136;
        v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v123);
        v126 = &v124[16 * v120];
        *(_OWORD *)v126 = *(_OWORD *)buf;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v128 = (_QWORD *)v91[7].i64[1];
        v127 = (_QWORD *)v91[8].i64[0];
        if (v127 == v128)
        {
          v131 = vdupq_n_s64((unint64_t)v127);
          v129 = &v124[16 * v120];
        }
        else
        {
          v129 = &v124[16 * v120];
          do
          {
            v130 = *((_OWORD *)v127 - 1);
            v127 -= 2;
            *((_OWORD *)v129 - 1) = v130;
            v129 -= 16;
            *v127 = 0;
            v127[1] = 0;
          }
          while (v127 != v128);
          v131 = *(int64x2_t *)((char *)v91 + 120);
        }
        v94 = v126 + 16;
        v91[7].i64[1] = (uint64_t)v129;
        v91[8].i64[0] = (uint64_t)(v126 + 16);
        *(int64x2_t *)&__p[0].__r_.__value_.__r.__words[1] = v131;
        v187 = v91[8].u64[1];
        v91[8].i64[1] = (uint64_t)&v124[16 * v125];
        __p[1].__r_.__value_.__r.__words[0] = v187;
        __p[0].__r_.__value_.__r.__words[0] = v131.i64[0];
        std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *v92 = *(_OWORD *)buf;
        v94 = v92 + 1;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
      }
      v91[8].i64[0] = (uint64_t)v94;
      memset(__p, 0, 24);
      v188 = (_QWORD *)*((_QWORD *)v259 + 71);
      v189 = *((_QWORD *)v259 + 72);
      if ((unint64_t)v188 >= v189)
      {
        v191 = (_QWORD *)*((_QWORD *)v259 + 70);
        v192 = 0xAAAAAAAAAAAAAAABLL * (v188 - v191) + 1;
        if (v192 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v193 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v189 - (_QWORD)v191) >> 3);
        if (2 * v193 > v192)
          v192 = 2 * v193;
        if (v193 >= 0x555555555555555)
          v194 = 0xAAAAAAAAAAAAAAALL;
        else
          v194 = v192;
        if (v194 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v195 = (char *)operator new(24 * v194);
        v196 = &v195[8 * (v188 - v191)];
        *(_QWORD *)v196 = 0;
        *((_QWORD *)v196 + 1) = 0;
        *((_QWORD *)v196 + 2) = 0;
        v197 = &v195[24 * v194];
        memset(__p, 0, 24);
        v190 = v196 + 24;
        if (v188 == v191)
        {
          *((_QWORD *)v259 + 70) = v196;
          *((_QWORD *)v259 + 71) = v190;
          *((_QWORD *)v259 + 72) = v197;
        }
        else
        {
          do
          {
            v198 = *(_OWORD *)(v188 - 3);
            v188 -= 3;
            *(_OWORD *)(v196 - 24) = v198;
            v196 -= 24;
            *((_QWORD *)v196 + 2) = v188[2];
            *v188 = 0;
            v188[1] = 0;
            v188[2] = 0;
          }
          while (v188 != v191);
          v199 = (_QWORD *)*((_QWORD *)v259 + 70);
          v188 = (_QWORD *)*((_QWORD *)v259 + 71);
          *((_QWORD *)v259 + 70) = v196;
          *((_QWORD *)v259 + 71) = v190;
          *((_QWORD *)v259 + 72) = v197;
          if (v188 != v199)
          {
            do
            {
              v188 -= 3;
              v260.__r_.__value_.__r.__words[0] = (std::string::size_type)v188;
              std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v260);
            }
            while (v188 != v199);
            v188 = v199;
          }
        }
        if (v188)
          operator delete(v188);
      }
      else
      {
        *v188 = 0;
        v188[1] = 0;
        v188[2] = 0;
        memset(__p, 0, 24);
        v190 = v188 + 3;
        *((_QWORD *)v259 + 71) = v188 + 3;
      }
      *((_QWORD *)v259 + 71) = v190;
      v260.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v260);
      memset(__p, 0, 24);
      std::vector<std::vector<std::vector<std::string>>>::push_back[abi:ne180100]((void ***)v259 + 73, (uint64_t)__p);
      v260.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v260);
      v200 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v201 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 - 1, v201));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
          std::__shared_weak_count::__release_weak(v200);
        }
      }
      return 60;
    }
    if (strcmp(__s1, "audioTrackFormat"))
    {
      if (strcmp(__s1, "audioStreamFormat"))
      {
        if (!strcmp(__s1, "audioTrackUID"))
        {
          v6 = (char *)operator new(0xE0uLL);
          *((_QWORD *)v6 + 1) = 0;
          *((_QWORD *)v6 + 2) = 0;
          *(_QWORD *)v6 = &off_1E2917910;
          *(_OWORD *)(v6 + 40) = 0u;
          *(_OWORD *)(v6 + 56) = 0u;
          *(_OWORD *)(v6 + 72) = 0u;
          *(_OWORD *)(v6 + 88) = 0u;
          *(_OWORD *)(v6 + 104) = 0u;
          *(_OWORD *)(v6 + 120) = 0u;
          *(_OWORD *)(v6 + 136) = 0u;
          *(_OWORD *)(v6 + 152) = 0u;
          *(_OWORD *)(v6 + 168) = 0u;
          *(_OWORD *)(v6 + 184) = 0u;
          *(_OWORD *)(v6 + 200) = 0u;
          *((_QWORD *)v6 + 27) = 0;
          v260.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
          *(_OWORD *)(v6 + 24) = 0u;
          v260.__r_.__value_.__r.__words[0] = (std::string::size_type)(v6 + 24);
          if (a3)
          {
            v7 = *a3;
            if (*a3)
            {
              v8 = (const unsigned __int8 **)(a3 + 2);
              do
              {
                v9 = (std::string::value_type *)*(v8 - 1);
                if (!strcmp(v7, "UID"))
                {
                  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)v260.__r_.__value_.__l.__data_, v9);
                }
                else
                {
                  if (!strcmp(v7, "sampleRate"))
                  {
                    std::string::basic_string[abi:ne180100]<0>(__p, v9);
                    v12 = CA::ADMBuilder::Impl::parse_uint((uint64_t)v259, __p);
                    v13 = v260.__r_.__value_.__r.__words[0];
                    *(_DWORD *)(v260.__r_.__value_.__r.__words[0] + 32) = v12;
                    *(_BYTE *)(v13 + 36) = BYTE4(v12);
LABEL_18:
                    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p[0].__r_.__value_.__l.__data_);
                    goto LABEL_20;
                  }
                  if (!strcmp(v7, "bitDepth"))
                  {
                    std::string::basic_string[abi:ne180100]<0>(__p, v9);
                    v10 = CA::ADMBuilder::Impl::parse_uint((uint64_t)v259, __p);
                    v11 = v260.__r_.__value_.__r.__words[0];
                    *(_DWORD *)(v260.__r_.__value_.__r.__words[0] + 40) = v10;
                    *(_BYTE *)(v11 + 44) = BYTE4(v10);
                    goto LABEL_18;
                  }
                }
LABEL_20:
                v14 = *v8;
                v8 += 2;
                v7 = (const char *)v14;
              }
              while (v14);
            }
          }
          if (*((_DWORD *)v259 + 158))
            goto LABEL_22;
          if (*(_BYTE *)(v260.__r_.__value_.__r.__words[0] + 24))
          {
            v229 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v259 + 760, (unsigned __int8 *)v260.__r_.__value_.__l.__data_, (uint64_t)v260.__r_.__value_.__l.__data_);
            if ((v229 & 1) == 0)
            {
              v230 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v229);
              if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v260.__r_.__value_.__l.__data_, "");
                if (buf[23] >= 0)
                  v231 = buf;
                else
                  v231 = *(_BYTE **)buf;
                LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
                WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 290;
                WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v231;
                _os_log_impl(&dword_18EE07000, v230, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple track UIDs with UID '%s'", (uint8_t *)__p, 0x1Cu);
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
              }
              *((_DWORD *)v259 + 158) = -66591;
              goto LABEL_22;
            }
            if (*((_DWORD *)v259 + 158))
            {
LABEL_22:
              v15 = 1;
LABEL_23:
              std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v260);
              return v15;
            }
          }
          std::vector<std::shared_ptr<CA::ADMTrackFormat>>::push_back[abi:ne180100]((_QWORD *)(*(_QWORD *)v259 + 264), (uint64_t)&v260);
          __p[0].__r_.__value_.__s.__data_[0] = 0;
          __p[1].__r_.__value_.__s.__data_[0] = 0;
          std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)v259 + 536, (__int128 *)__p);
          if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          __p[0].__r_.__value_.__s.__data_[0] = 0;
          __p[1].__r_.__value_.__s.__data_[0] = 0;
          std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)v259 + 488, (__int128 *)__p);
          if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          __p[0].__r_.__value_.__s.__data_[0] = 0;
          __p[1].__r_.__value_.__s.__data_[0] = 0;
          std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)v259 + 512, (__int128 *)__p);
          if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          v15 = 52;
          goto LABEL_23;
        }
        return 1;
      }
      v136 = (char *)operator new(0xD0uLL);
      *((_QWORD *)v136 + 1) = 0;
      *((_QWORD *)v136 + 2) = 0;
      *(_QWORD *)v136 = &off_1E29179B8;
      *(_OWORD *)(v136 + 24) = 0u;
      v137 = (__int128 *)(v136 + 24);
      *(_OWORD *)(v136 + 40) = 0u;
      *(_OWORD *)(v136 + 56) = 0u;
      *(_OWORD *)(v136 + 72) = 0u;
      *(_OWORD *)(v136 + 88) = 0u;
      *(_OWORD *)(v136 + 104) = 0u;
      *(_OWORD *)(v136 + 120) = 0u;
      *(_OWORD *)(v136 + 136) = 0u;
      *(_OWORD *)(v136 + 152) = 0u;
      *(_OWORD *)(v136 + 168) = 0u;
      *(_OWORD *)(v136 + 184) = 0u;
      *((_QWORD *)v136 + 25) = 0;
      v260.__r_.__value_.__r.__words[0] = (std::string::size_type)(v136 + 24);
      v260.__r_.__value_.__l.__size_ = (std::string::size_type)v136;
      if (a3)
      {
        v138 = *a3;
        if (*a3)
        {
          v139 = (const unsigned __int8 **)(a3 + 2);
          do
          {
            v140 = (std::string::value_type *)*(v139 - 1);
            v141 = strcmp(v138, "audioStreamFormatID");
            v142 = (std::string *)(v136 + 24);
            if (!v141
              || (v143 = strcmp(v138, "audioStreamFormatName"), v142 = (std::string *)(v136 + 56), !v143)
              || (v144 = strcmp(v138, "formatLabel"), v142 = (std::string *)(v136 + 88), !v144)
              || (v145 = strcmp(v138, "formatDefinition"), v142 = (std::string *)(v136 + 120), !v145))
            {
              std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v142, v140);
            }
            v146 = *v139;
            v139 += 2;
            v138 = (const char *)v146;
          }
          while (v146);
        }
      }
      if (*((_DWORD *)v259 + 158))
        goto LABEL_219;
      if (v136[48])
      {
        std::pair<std::string const,std::shared_ptr<CA::ADMTrackFormat>>::pair[abi:ne180100]<std::string&,std::shared_ptr<CA::ADMTrackFormat>&,0>(__p, v137, (std::string::size_type *)&v260);
        v203 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<CA::ADMStreamFormat>>>((uint64_t)v259 + 960, (unsigned __int8 *)__p, (uint64_t)__p);
        v204 = (CA::ADMBuilder::Impl *)std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>::~pair((uint64_t)__p);
        if ((v203 & 1) == 0)
        {
          v205 = CA::ADMBuilder::Impl::log(v204);
          if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
          {
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v137, "");
            v206 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
            LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
            WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 260;
            WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v206;
            _os_log_impl(&dword_18EE07000, v205, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple stream formats with ID '%s'", (uint8_t *)__p, 0x1Cu);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          *((_DWORD *)v259 + 158) = -66591;
          goto LABEL_219;
        }
        if (*((_DWORD *)v259 + 158))
        {
LABEL_219:
          v15 = 1;
LABEL_220:
          size = (std::__shared_weak_count *)v260.__r_.__value_.__l.__size_;
          if (!v260.__r_.__value_.__l.__size_)
            return v15;
          v147 = (unint64_t *)(v260.__r_.__value_.__l.__size_ + 8);
          do
            v71 = __ldaxr(v147);
          while (__stlxr(v71 - 1, v147));
LABEL_223:
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
          return v15;
        }
      }
      std::vector<std::shared_ptr<CA::ADMTrackFormat>>::push_back[abi:ne180100]((_QWORD *)(*(_QWORD *)v259 + 168), (uint64_t)&v260);
      __p[0].__r_.__value_.__s.__data_[0] = 0;
      __p[1].__r_.__value_.__s.__data_[0] = 0;
      std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)v259 + 416, (__int128 *)__p);
      if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      __p[0].__r_.__value_.__s.__data_[0] = 0;
      __p[1].__r_.__value_.__s.__data_[0] = 0;
      std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)v259 + 392, (__int128 *)__p);
      if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      memset(__p, 0, 24);
      std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)v259 + 55, (uint64_t)__p);
      *(_QWORD *)buf = __p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v15 = 88;
      goto LABEL_220;
    }
    v102 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v102 + 1) = 0;
    *((_QWORD *)v102 + 2) = 0;
    *(_QWORD *)v102 = &off_1E2917980;
    *(_OWORD *)(v102 + 24) = 0u;
    v103 = (__int128 *)(v102 + 24);
    *(_OWORD *)(v102 + 40) = 0u;
    *(_OWORD *)(v102 + 56) = 0u;
    *(_OWORD *)(v102 + 72) = 0u;
    *(_OWORD *)(v102 + 88) = 0u;
    *(_OWORD *)(v102 + 104) = 0u;
    *(_OWORD *)(v102 + 120) = 0u;
    *(_OWORD *)(v102 + 136) = 0u;
    *(_OWORD *)(v102 + 152) = 0u;
    v260.__r_.__value_.__r.__words[0] = (std::string::size_type)(v102 + 24);
    v260.__r_.__value_.__l.__size_ = (std::string::size_type)v102;
    if (a3)
    {
      v104 = *a3;
      if (*a3)
      {
        v105 = (const unsigned __int8 **)(a3 + 2);
        do
        {
          v106 = (std::string::value_type *)*(v105 - 1);
          v107 = strcmp(v104, "audioTrackFormatID");
          v108 = (std::string *)(v102 + 24);
          if (!v107
            || (v109 = strcmp(v104, "audioTrackFormatName"), v108 = (std::string *)(v102 + 56), !v109)
            || (v110 = strcmp(v104, "formatLabel"), v108 = (std::string *)(v102 + 88), !v110)
            || (v111 = strcmp(v104, "formatDefinition"), v108 = (std::string *)(v102 + 120), !v111))
          {
            std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v108, v106);
          }
          v112 = *v105;
          v105 += 2;
          v104 = (const char *)v112;
        }
        while (v112);
      }
    }
    if (*((_DWORD *)v259 + 158))
      goto LABEL_179;
    if (v102[48])
    {
      std::pair<std::string const,std::shared_ptr<CA::ADMTrackFormat>>::pair[abi:ne180100]<std::string&,std::shared_ptr<CA::ADMTrackFormat>&,0>(__p, v103, (std::string::size_type *)&v260);
      v178 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<CA::ADMTrackFormat>>>((uint64_t)v259 + 1000, (unsigned __int8 *)__p, (uint64_t)__p);
      v179 = (CA::ADMBuilder::Impl *)std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>::~pair((uint64_t)__p);
      if ((v178 & 1) == 0)
      {
        v180 = CA::ADMBuilder::Impl::log(v179);
        if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v103, "");
          v181 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
          WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 227;
          WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v181;
          _os_log_impl(&dword_18EE07000, v180, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple track formats with ID '%s'", (uint8_t *)__p, 0x1Cu);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        *((_DWORD *)v259 + 158) = -66591;
        goto LABEL_179;
      }
      if (*((_DWORD *)v259 + 158))
      {
LABEL_179:
        v15 = 1;
LABEL_180:
        size = (std::__shared_weak_count *)v260.__r_.__value_.__l.__size_;
        if (!v260.__r_.__value_.__l.__size_)
          return v15;
        v113 = (unint64_t *)(v260.__r_.__value_.__l.__size_ + 8);
        do
          v71 = __ldaxr(v113);
        while (__stlxr(v71 - 1, v113));
        goto LABEL_223;
      }
    }
    std::vector<std::shared_ptr<CA::ADMTrackFormat>>::push_back[abi:ne180100]((_QWORD *)(*(_QWORD *)v259 + 216), (uint64_t)&v260);
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    __p[1].__r_.__value_.__s.__data_[0] = 0;
    std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)v259 + 464, (__int128 *)__p);
    if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v15 = 86;
    goto LABEL_180;
  }
  v55 = (char *)operator new(0x158uLL);
  v56 = v55;
  *((_QWORD *)v55 + 1) = 0;
  *((_QWORD *)v55 + 2) = 0;
  *(_QWORD *)v55 = &off_1E2917948;
  *(_OWORD *)(v55 + 24) = 0u;
  v57 = (std::string *)(v55 + 24);
  *(_OWORD *)(v55 + 40) = 0u;
  *(_OWORD *)(v55 + 56) = 0u;
  *(_OWORD *)(v55 + 72) = 0u;
  *(_OWORD *)(v55 + 88) = 0u;
  *(_OWORD *)(v55 + 104) = 0u;
  *(_OWORD *)(v55 + 120) = 0u;
  *(_OWORD *)(v55 + 136) = 0u;
  *(_OWORD *)(v55 + 152) = 0u;
  *(_OWORD *)(v55 + 168) = 0u;
  *(_OWORD *)(v55 + 184) = 0u;
  *(_OWORD *)(v55 + 200) = 0u;
  *(_OWORD *)(v55 + 216) = 0u;
  *(_OWORD *)(v55 + 232) = 0u;
  *(_OWORD *)(v55 + 248) = 0u;
  *(_OWORD *)(v55 + 264) = 0u;
  *(_OWORD *)(v55 + 280) = 0u;
  *(_OWORD *)(v55 + 296) = 0u;
  *(_OWORD *)(v55 + 312) = 0u;
  *(_OWORD *)(v55 + 328) = 0u;
  v260.__r_.__value_.__r.__words[0] = (std::string::size_type)(v55 + 24);
  v260.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
  if (a3)
  {
    v58 = *a3;
    if (*a3)
    {
      this = (int64_t)(v55 + 56);
      v59 = (const unsigned __int8 **)(a3 + 2);
      do
      {
        v60 = (char *)*(v59 - 1);
        v61 = strcmp(v58, "audioPackFormatID");
        v62 = v57;
        if (v61
          && (v63 = strcmp(v58, "audioPackFormatName"), v62 = (std::string *)(v56 + 56), v63)
          && (v64 = strcmp(v58, "typeLabel"), v62 = (std::string *)(v56 + 88), v64)
          && (v65 = strcmp(v58, "typeDefinition"), v62 = (std::string *)(v56 + 120), v65))
        {
          if (!strcmp(v58, "importance"))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, v60);
            v66 = CA::ADMBuilder::Impl::parse_uint((uint64_t)v259, __p);
            *((_DWORD *)v56 + 38) = v66;
            v56[156] = BYTE4(v66);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v62, v60);
        }
        v67 = *v59;
        v59 += 2;
        v58 = (const char *)v67;
      }
      while (v67);
    }
  }
  v68 = v259;
  if (*((_DWORD *)v259 + 158))
  {
LABEL_130:
    v15 = 1;
    goto LABEL_131;
  }
  if (!v56[48])
    goto LABEL_387;
  if (v56[47] < 0)
    std::string::__init_copy_ctor_external(__p, *((const std::string::value_type **)v56 + 3), *((_QWORD *)v56 + 4));
  else
    __p[0] = *v57;
  __p[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
  __p[1].__r_.__value_.__l.__size_ = v260.__r_.__value_.__l.__size_;
  if (v260.__r_.__value_.__l.__size_)
  {
    v208 = (unint64_t *)(v260.__r_.__value_.__l.__size_ + 8);
    do
      v209 = __ldxr(v208);
    while (__stxr(v209 + 1, v208));
  }
  v210 = (uint64_t *)((char *)v259 + 880);
  v211 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
  v212 = v211;
  v213 = *((_QWORD *)v259 + 111);
  if (!v213)
    goto LABEL_326;
  v214 = (uint8x8_t)vcnt_s8((int8x8_t)v213);
  v214.i16[0] = vaddlv_u8(v214);
  v215 = v214.u32[0];
  if (v214.u32[0] > 1uLL)
  {
    this = v211;
    if (v211 >= v213)
      this = v211 % v213;
  }
  else
  {
    this = (v213 - 1) & v211;
  }
  v216 = *(unsigned __int8 ***)(*v210 + 8 * this);
  if (!v216 || (v217 = *v216) == 0)
  {
LABEL_326:
    v220 = (char *)operator new(0x38uLL);
    v221 = (_QWORD *)((char *)v68 + 896);
    *(_QWORD *)buf = v220;
    *(_QWORD *)&buf[8] = (char *)v68 + 896;
    buf[16] = 0;
    *(_QWORD *)v220 = 0;
    *((_QWORD *)v220 + 1) = v212;
    v222 = (std::string *)(v220 + 16);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v222, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v222->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
      *((_QWORD *)v220 + 4) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
    }
    *(_OWORD *)(v220 + 40) = *(_OWORD *)&__p[1].__r_.__value_.__l.__data_;
    *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = 0uLL;
    buf[16] = 1;
    v223 = (float)(unint64_t)(*((_QWORD *)v68 + 113) + 1);
    v224 = *((float *)v68 + 228);
    if (!v213 || (float)(v224 * (float)v213) < v223)
    {
      v225 = 1;
      if (v213 >= 3)
        v225 = (v213 & (v213 - 1)) != 0;
      v226 = v225 | (2 * v213);
      v227 = vcvtps_u32_f32(v223 / v224);
      if (v226 <= v227)
        v228 = v227;
      else
        v228 = v226;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)v210, v228);
      v213 = *((_QWORD *)v68 + 111);
      if ((v213 & (v213 - 1)) != 0)
      {
        if (v212 >= v213)
          this = v212 % v213;
        else
          this = v212;
      }
      else
      {
        this = (v213 - 1) & v212;
      }
    }
    v233 = *v210;
    v234 = *(_QWORD **)(*v210 + 8 * this);
    if (v234)
    {
      *(_QWORD *)v220 = *v234;
    }
    else
    {
      *(_QWORD *)v220 = *v221;
      *v221 = v220;
      *(_QWORD *)(v233 + 8 * this) = v221;
      if (!*(_QWORD *)v220)
      {
LABEL_375:
        *(_QWORD *)buf = 0;
        ++*((_QWORD *)v68 + 113);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
        v236 = 0;
        goto LABEL_376;
      }
      v235 = *(_QWORD *)(*(_QWORD *)v220 + 8);
      if ((v213 & (v213 - 1)) != 0)
      {
        if (v235 >= v213)
          v235 %= v213;
      }
      else
      {
        v235 &= v213 - 1;
      }
      v234 = (_QWORD *)(*v210 + 8 * v235);
    }
    *v234 = v220;
    goto LABEL_375;
  }
  while (1)
  {
    v218 = *((_QWORD *)v217 + 1);
    if (v218 == v212)
      break;
    if (v215 > 1)
    {
      if (v218 >= v213)
        v218 %= v213;
    }
    else
    {
      v218 &= v213 - 1;
    }
    if (v218 != this)
    {
LABEL_325:
      v68 = v259;
      goto LABEL_326;
    }
LABEL_324:
    v217 = *(unsigned __int8 **)v217;
    if (!v217)
      goto LABEL_325;
  }
  v219 = std::equal_to<std::string>::operator()[abi:ne180100](v217 + 16, (unsigned __int8 *)__p);
  if (!v219)
    goto LABEL_324;
  if (v260.__r_.__value_.__l.__size_)
  {
    v257 = (unint64_t *)(v260.__r_.__value_.__l.__size_ + 8);
    v68 = v259;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v260.__r_.__value_.__l.__size_ + 16))(v260.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v260.__r_.__value_.__l.__size_);
    }
    v236 = 1;
  }
  else
  {
    v236 = 1;
    v68 = v259;
  }
LABEL_376:
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (v236)
  {
    v237 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v219);
    if (os_log_type_enabled(v237, OS_LOG_TYPE_ERROR))
    {
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v260.__r_.__value_.__l.__data_, "");
      v238 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
      WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 165;
      WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v238;
      _os_log_impl(&dword_18EE07000, v237, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple pack formats with ID '%s'", (uint8_t *)__p, 0x1Cu);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    *((_DWORD *)v68 + 158) = -66591;
    goto LABEL_130;
  }
  if (*((_DWORD *)v68 + 158))
    goto LABEL_130;
LABEL_387:
  v239 = *(_QWORD **)v68;
  v240 = *(_OWORD **)(*(_QWORD *)v68 + 80);
  v241 = *(_QWORD *)(*(_QWORD *)v68 + 88);
  if ((unint64_t)v240 >= v241)
  {
    v243 = v239[9];
    v244 = ((uint64_t)v240 - v243) >> 4;
    if ((unint64_t)(v244 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v245 = v241 - v243;
    v246 = v245 >> 3;
    if (v245 >> 3 <= (unint64_t)(v244 + 1))
      v246 = v244 + 1;
    if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF0)
      v247 = 0xFFFFFFFFFFFFFFFLL;
    else
      v247 = v246;
    __p[1].__r_.__value_.__l.__size_ = *(_QWORD *)v68 + 88;
    v248 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v247);
    v250 = &v248[16 * v244];
    *(_OWORD *)v250 = *(_OWORD *)&v260.__r_.__value_.__l.__data_;
    *(_OWORD *)&v260.__r_.__value_.__l.__data_ = 0uLL;
    v252 = (_QWORD *)v239[9];
    v251 = (_QWORD *)v239[10];
    if (v251 == v252)
    {
      v255 = vdupq_n_s64((unint64_t)v251);
      v253 = &v248[16 * v244];
    }
    else
    {
      v253 = &v248[16 * v244];
      do
      {
        v254 = *((_OWORD *)v251 - 1);
        v251 -= 2;
        *((_OWORD *)v253 - 1) = v254;
        v253 -= 16;
        *v251 = 0;
        v251[1] = 0;
      }
      while (v251 != v252);
      v255 = *(int64x2_t *)(v239 + 9);
    }
    v242 = v250 + 16;
    v239[9] = v253;
    v239[10] = v250 + 16;
    *(int64x2_t *)&__p[0].__r_.__value_.__r.__words[1] = v255;
    v256 = v239[11];
    v239[11] = &v248[16 * v249];
    __p[1].__r_.__value_.__r.__words[0] = v256;
    __p[0].__r_.__value_.__r.__words[0] = v255.i64[0];
    std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)__p);
  }
  else
  {
    *v240 = *(_OWORD *)&v260.__r_.__value_.__l.__data_;
    v242 = v240 + 1;
    *(_OWORD *)&v260.__r_.__value_.__l.__data_ = 0uLL;
  }
  v239[10] = v242;
  memset(__p, 0, 24);
  std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)v68 + 22, (uint64_t)__p);
  *(_QWORD *)buf = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  memset(__p, 0, 24);
  std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)v68 + 25, (uint64_t)__p);
  *(_QWORD *)buf = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  memset(__p, 0, 24);
  std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)v68 + 28, (uint64_t)__p);
  *(_QWORD *)buf = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  memset(__p, 0, 24);
  std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)v68 + 31, (uint64_t)__p);
  *(_QWORD *)buf = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  __p[1].__r_.__value_.__s.__data_[0] = 0;
  std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)v68 + 272, (__int128 *)__p);
  if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  __p[1].__r_.__value_.__s.__data_[0] = 0;
  std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)v68 + 296, (__int128 *)__p);
  if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v15 = 41;
LABEL_131:
  size = (std::__shared_weak_count *)v260.__r_.__value_.__l.__size_;
  if (v260.__r_.__value_.__l.__size_)
  {
    v70 = (unint64_t *)(v260.__r_.__value_.__l.__size_ + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    goto LABEL_223;
  }
  return v15;
}

void sub_18F002F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return 0;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v8;
  v16 = (std::string *)(v15 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v15[4] = *(_QWORD *)(a3 + 16);
  }
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v15 = *v24;
LABEL_41:
    *v24 = v15;
    goto LABEL_42;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v25 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_18F00344C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<std::string>>>::push_back[abi:ne180100](void ***a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  void **v15;
  __int128 v16;
  void **v17;
  void **v18;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a1);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = 3 * v8;
    v11 = (char *)operator new(24 * v8);
    v12 = &v11[24 * v7];
    v13 = (void **)&v11[8 * v10];
    *(_OWORD *)v12 = *(_OWORD *)a2;
    *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = (void **)(v12 + 24);
    v14 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      do
      {
        *((_QWORD *)v12 - 3) = 0;
        *((_QWORD *)v12 - 2) = 0;
        v12 -= 24;
        *((_QWORD *)v12 + 2) = 0;
        v16 = *(_OWORD *)(v15 - 3);
        v15 -= 3;
        *(_OWORD *)v12 = v16;
        *((_QWORD *)v12 + 2) = v15[2];
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
      }
      while (v15 != v14);
      v15 = *a1;
      v17 = a1[1];
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v13;
      while (v17 != v15)
      {
        v17 -= 3;
        v18 = v17;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v18);
      }
    }
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *(_OWORD *)v4 = *(_OWORD *)a2;
    v4[2] = *(void **)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = v4 + 3;
  }
  a1[1] = v6;
}

uint64_t std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>::~pair(uint64_t a1)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::pair<std::string const,std::shared_ptr<CA::ADMTrackFormat>>::pair[abi:ne180100]<std::string&,std::shared_ptr<CA::ADMTrackFormat>&,0>(std::string *this, __int128 *a2, std::string::size_type *a3)
{
  __int128 v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<CA::ADMTrackFormat>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return 0;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x38uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  v29 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v29 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v16 = *v25;
LABEL_41:
    *v25 = v16;
    goto LABEL_42;
  }
  *(_QWORD *)v16 = *v15;
  *v15 = v16;
  *(_QWORD *)(v24 + 8 * v3) = v15;
  if (*(_QWORD *)v16)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return 1;
}

void sub_18F0038F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<CA::ADMTrackFormat>>::push_back[abi:ne180100](_QWORD *result, uint64_t a2)
{
  char **v3;
  _QWORD *v4;
  unint64_t v5;
  _OWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int64x2_t v19;
  char *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v3 = (char **)result;
  v4 = result + 2;
  v5 = result[2];
  v6 = (_OWORD *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    v8 = ((uint64_t)v6 - *result) >> 4;
    if ((unint64_t)(v8 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *result;
    v10 = v9 >> 3;
    if (v9 >> 3 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v24 = v4;
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v11);
    v14 = &v12[16 * v8];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *v3;
    v15 = v3[1];
    if (v15 == *v3)
    {
      v19 = vdupq_n_s64((unint64_t)v15);
      v17 = &v12[16 * v8];
    }
    else
    {
      v17 = &v12[16 * v8];
      do
      {
        v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v16);
      v19 = *(int64x2_t *)v3;
    }
    v7 = v14 + 16;
    *v3 = v17;
    v3[1] = v14 + 16;
    v22 = v19;
    v20 = v3[2];
    v3[2] = &v12[16 * v13];
    v23 = v20;
    v21 = v19.i64[0];
    result = (_QWORD *)std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v6 = *(_OWORD *)a2;
    v7 = (char *)(v6 + 1);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  v3[1] = v7;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<CA::ADMStreamFormat>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return 0;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x38uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  v29 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v29 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v16 = *v25;
LABEL_41:
    *v25 = v16;
    goto LABEL_42;
  }
  *(_QWORD *)v16 = *v15;
  *v15 = v16;
  *(_QWORD *)(v24 + 8 * v3) = v15;
  if (*(_QWORD *)v16)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return 1;
}

void sub_18F003C80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CA::ADMObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CA::ADMObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<CA::ADMObject>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  void **v9;

  v2 = *(_QWORD *)(a1 + 448);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 456);
    v4 = *(void **)(a1 + 448);
    if (v3 != v2)
    {
      do
      {
        v3 -= 192;
        std::__destroy_at[abi:ne180100]<CA::ADMAlternativeValueSet,0>(v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 448);
    }
    *(_QWORD *)(a1 + 456) = v2;
    operator delete(v4);
  }
  v9 = (void **)(a1 + 288);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v5 = *(_QWORD *)(a1 + 264);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 272);
    v7 = *(void **)(a1 + 264);
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
          std::__shared_weak_count::__release_weak(v8);
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 264);
    }
    *(_QWORD *)(a1 + 272) = v5;
    operator delete(v7);
  }
  v9 = (void **)(a1 + 240);
  std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 216);
  std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 192);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 168);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
}

void std::__shared_ptr_emplace<CA::ADMContent>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29178D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CA::ADMContent>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29178D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<CA::ADMContent>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 200);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 168);
  std::vector<CA::ADMLoudnessMetadata>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 144);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 120);
  std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(_BYTE *)(a1 + 112) && *(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
}

uint64_t std::construct_at[abi:ne180100]<CA::ADMProgramme,CA::ADMProgramme,CA::ADMProgramme*>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v2 = *a2;
    *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)result = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(result + 24) = 1;
  }
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    v3 = a2[2];
    *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(result + 32) = v3;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *(_BYTE *)(result + 56) = 1;
  }
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    v4 = a2[4];
    *(_QWORD *)(result + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)(result + 64) = v4;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_BYTE *)(result + 88) = 1;
  }
  *(_OWORD *)(result + 96) = a2[6];
  v5 = a2[7];
  v6 = a2[8];
  v7 = a2[9];
  *(_QWORD *)(result + 157) = *(_QWORD *)((char *)a2 + 157);
  *(_OWORD *)(result + 128) = v6;
  *(_OWORD *)(result + 144) = v7;
  *(_OWORD *)(result + 112) = v5;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_OWORD *)(result + 168) = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(result + 184) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_OWORD *)(result + 192) = a2[12];
  *(_QWORD *)(result + 208) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 26) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 232) = 0;
  *(_OWORD *)(result + 216) = *(__int128 *)((char *)a2 + 216);
  *(_QWORD *)(result + 232) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  *((_QWORD *)a2 + 29) = 0;
  v8 = a2[15];
  v9 = a2[17];
  *(_OWORD *)(result + 256) = a2[16];
  *(_OWORD *)(result + 272) = v9;
  *(_OWORD *)(result + 240) = v8;
  *(_BYTE *)(result + 288) = 0;
  *(_BYTE *)(result + 336) = 0;
  if (*((_BYTE *)a2 + 336))
  {
    *(_QWORD *)(result + 288) = 0;
    *(_QWORD *)(result + 296) = 0;
    *(_QWORD *)(result + 304) = 0;
    *(_OWORD *)(result + 288) = a2[18];
    *(_QWORD *)(result + 304) = *((_QWORD *)a2 + 38);
    *((_QWORD *)a2 + 36) = 0;
    *((_QWORD *)a2 + 37) = 0;
    *((_QWORD *)a2 + 38) = 0;
    *(_QWORD *)(result + 312) = 0;
    *(_QWORD *)(result + 320) = 0;
    *(_QWORD *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = *(__int128 *)((char *)a2 + 312);
    *(_QWORD *)(result + 328) = *((_QWORD *)a2 + 41);
    *((_QWORD *)a2 + 39) = 0;
    *((_QWORD *)a2 + 40) = 0;
    *((_QWORD *)a2 + 41) = 0;
    *(_BYTE *)(result + 336) = 1;
  }
  *(_QWORD *)(result + 344) = 0;
  *(_QWORD *)(result + 352) = 0;
  *(_QWORD *)(result + 360) = 0;
  v10 = *((_QWORD *)a2 + 44);
  *(_QWORD *)(result + 344) = *((_QWORD *)a2 + 43);
  *(_QWORD *)(result + 352) = v10;
  *(_QWORD *)(result + 360) = *((_QWORD *)a2 + 45);
  *((_QWORD *)a2 + 43) = 0;
  *((_QWORD *)a2 + 44) = 0;
  *((_QWORD *)a2 + 45) = 0;
  return result;
}

void MP4BoxParser_MovieFragment::~MP4BoxParser_MovieFragment(MP4BoxParser_MovieFragment *this)
{
  MP4BoxParser_MovieFragment::~MP4BoxParser_MovieFragment(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2909198;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((_QWORD *)this + 8);
    if (v2)
    {
      std::__list_imp<MP4BoxInfo>::clear(*((uint64_t **)this + 8));
      MEMORY[0x193FFE460](v2, 0x1020C4062D53EE8);
    }
  }
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t MP4BoxParser_MovieFragment::Init(__n128 ***this)
{
  uint64_t result;
  __n128 **v3;
  uint64_t v4;
  int64_t v5;
  __n128 **v6;
  int64_t v7;

  result = MP4BoxParser::Initialize((MP4BoxParser *)this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) == 1836019558)
    {
      if (*((_BYTE *)this + 56))
      {
        v3 = (__n128 **)operator new();
        *v3 = (__n128 *)v3;
        v3[1] = (__n128 *)v3;
        v3[2] = 0;
        this[8] = v3;
        v4 = (uint64_t)this[1];
        v5 = ((unsigned int (*)(__n128 ***))(*this)[3])(this);
        v6 = this[3];
        v7 = (int64_t)v6 - ((unsigned int (*)(__n128 ***))(*this)[3])(this);
        return FillMP4BoxTable(v4, v5, v7, this[8], 1, 0);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

uint64_t MP4BoxParser_MovieFragment::GetSequence(MP4BoxParser_MovieFragment *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void (**v7)(MP4BoxParser *__hidden);
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 8);
  if (v2 == a2)
    return 0;
  while (*(_DWORD *)(v2 + 16) != 1835427940)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2 == a2)
      return 0;
  }
  v7 = &off_1E2902718;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v8);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 8;
  v7 = &off_1E2909998;
  if (MP4BoxParser_MovieFragmentHeader::Init((MP4BoxParser **)&v7))
  {
    v3 = v8;
    v7 = &off_1E2902718;
    v8 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return 0;
  }
  v4 = v14;
  v6 = v8;
  v7 = &off_1E2902718;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v4;
}

void sub_18F004330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t AudioConverterAPI::PrintObject(AudioConverterAPI *this, __sFILE *a2)
{
  fprintf(a2, "<%s 0x%x [%p]>", "AudioConverterRef", *((_DWORD *)this + 2), this);
  return fputc(10, a2);
}

uint64_t newAudioConverter(const AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2, unsigned int a3, const AudioClassDescription *a4, int a5)
{
  uint64_t v10;
  __int128 v11;
  AudioFormatID mFormatID;
  AudioFormatID v13;
  _BOOL4 v14;
  _BOOL4 v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v19;
  unsigned __int8 v20;
  uint64_t v21;
  const AudioClassDescription *v22;
  std::vector<char>::pointer begin;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  NSObject *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  NSObject *v39;
  const char *v40;
  _DWORD *exception;
  _QWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t message;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  caulk::concurrent::message *v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[48];
  std::vector<char>::value_type v53;
  _BYTE __x[12];
  __int16 v55;
  int v56;
  uint8_t buf[12];
  __int16 v58;
  _BYTE v59[13];
  void *v60[2];
  __int128 v61;
  char v62;
  char v63;
  void *v64[2];
  _QWORD v65[4];
  std::vector<char> __p;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v10 = operator new();
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)v10);
  *(_WORD *)(v10 + 12) = 0;
  *(_BYTE *)(v10 + 28) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E290A700;
  *(_QWORD *)(v10 + 32) = 0;
  if (gAudioConverterDeferredLogOnce != -1)
    dispatch_once(&gAudioConverterDeferredLogOnce, &__block_literal_global);
  if (!a1)
  {
    AudioConverterLog();
    v39 = AudioConverterLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_55;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioConverter.cpp";
    v58 = 1024;
    *(_DWORD *)v59 = 145;
    v40 = "%25s:%-5d inSourceFormat == NULL";
LABEL_54:
    _os_log_impl(&dword_18EE07000, v39, OS_LOG_TYPE_ERROR, v40, buf, 0x12u);
    goto LABEL_55;
  }
  if (!a2)
  {
    AudioConverterLog();
    v39 = AudioConverterLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_55;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioConverter.cpp";
    v58 = 1024;
    *(_DWORD *)v59 = 146;
    v40 = "%25s:%-5d inDestinationFormat == NULL";
    goto LABEL_54;
  }
  if (!MinimalSafetyCheck(a1) || (MinimalSafetyCheck(a2) & 1) == 0)
    goto LABEL_55;
  if ((a5 & 0x10000) != 0)
  {
    if (!a1->mBytesPerPacket)
    {
      v44 = _os_log_pack_size();
      message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v44 + 88, 16);
      if (!message)
        goto LABEL_55;
      goto LABEL_67;
    }
    if (!a2->mBytesPerPacket)
    {
      v46 = _os_log_pack_size();
      message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v46 + 88, 16);
      if (!message)
        goto LABEL_55;
      goto LABEL_67;
    }
    if (a1->mSampleRate != a2->mSampleRate)
    {
      v47 = _os_log_pack_size();
      message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v47 + 88, 16);
      if (!message)
        goto LABEL_55;
      goto LABEL_67;
    }
    if (a1->mFramesPerPacket == a2->mFramesPerPacket)
      goto LABEL_12;
    v48 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v48 + 88, 16);
    if (message)
    {
LABEL_67:
      v49 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v49);
    }
LABEL_55:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
LABEL_12:
  v11 = *(_OWORD *)&a1->mBytesPerPacket;
  v50 = *(_OWORD *)&a1->mSampleRate;
  v51 = v11;
  *(_QWORD *)v52 = *(_QWORD *)&a1->mBitsPerChannel;
  *(_OWORD *)&v52[8] = *(_OWORD *)&a2->mSampleRate;
  *(_OWORD *)&v52[24] = *(_OWORD *)&a2->mBytesPerPacket;
  *(_QWORD *)&v52[40] = *(_QWORD *)&a2->mBitsPerChannel;
  mFormatID = a1->mFormatID;
  v13 = a2->mFormatID;
  *(_DWORD *)(v10 + 16) = mFormatID;
  *(_DWORD *)(v10 + 20) = v13;
  if (DWORD2(v50) == 1819304813 && HIDWORD(v51) == 1)
    HIDWORD(v50) &= ~0x20u;
  if (*(_DWORD *)&v52[16] == 1819304813 && *(_DWORD *)&v52[36] == 1)
    *(_DWORD *)&v52[20] &= ~0x20u;
  v14 = a4 != 0;
  v15 = a3 != 0;
  v16 = v15 && v14;
  if (v15 && v14)
    v17 = a3;
  else
    v17 = 0;
  if (v13 == 1885564203 || mFormatID == 1885564203)
  {
    v19 = (_QWORD *)MEMORY[0x1E0DDB4F0];
    if (!*MEMORY[0x1E0DDB4F0])
    {
      MEMORY[0x193FFDC98]();
      if (!*v19)
        __break(1u);
    }
  }
  {
    v42 = (_QWORD *)operator new();
    *v42 = 0;
    acv2::ConverterRegistry::ConverterRegistry((acv2::ConverterRegistry *)(v42 + 1));
    acv2::GlobalConverterRegistry(void)::sImpl = (uint64_t)v42;
  }
  v21 = acv2::GlobalConverterRegistry(void)::sImpl;
  os_unfair_recursive_lock_lock_with_options();
  memset(buf, 0, sizeof(buf));
  v63 = 0;
  v65[3] = 0;
  *(_QWORD *)&v59[2] = 0;
  *(_DWORD *)&v59[9] = 0;
  *(_OWORD *)v60 = 0u;
  v61 = 0u;
  v62 = 0;
  *(_OWORD *)v64 = 0u;
  memset(v65, 0, 19);
  __x[0] = 0;
  std::vector<char>::vector(&__p, 0x20uLL, __x);
  if (v16)
    v22 = a4;
  else
    v22 = 0;
  begin = __p.__begin_;
  *(_QWORD *)__p.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  v24 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, const AudioClassDescription *, uint64_t))(*(_QWORD *)(v21 + 8) + 16))(v21 + 8, DWORD2(v50), *(unsigned int *)&v52[16], v22, v17);
  if (v24)
  {
    v25 = operator new();
    v26 = v51;
    *(_OWORD *)v25 = v50;
    *(_OWORD *)(v25 + 16) = v26;
    v27 = *(_OWORD *)&v52[32];
    v28 = *(_OWORD *)v52;
    *(_OWORD *)(v25 + 48) = *(_OWORD *)&v52[16];
    *(_OWORD *)(v25 + 64) = v27;
    *(_OWORD *)(v25 + 32) = v28;
    *(_BYTE *)(v25 + 80) = (*(_DWORD *)(v25 + 28) > 1u) & (*(_DWORD *)(v25 + 12) >> 5);
    *(_BYTE *)(v25 + 81) = (*(_DWORD *)(v25 + 68) > 1u) & (*(_DWORD *)(v25 + 52) >> 5);
    *(_BYTE *)(v25 + 82) = *(double *)v25 != *(double *)(v25 + 40);
    *(_QWORD *)(v25 + 88) = v24;
    *(_BYTE *)(v25 + 96) = BYTE2(a5) & 1;
    *(_QWORD *)(v25 + 104) = 0;
    *(_BYTE *)(v25 + 232) = 0;
    *(_BYTE *)(v25 + 128) = 0;
    *(_QWORD *)(v25 + 112) = 0;
    *(_QWORD *)(v25 + 120) = 0;
    *(_QWORD *)(v25 + 240) = caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::empty_invoker;
    *(_DWORD *)(v25 + 264) = 0;
    *(_OWORD *)(v25 + 336) = 0u;
    *(_OWORD *)(v25 + 320) = 0u;
    *(_OWORD *)(v25 + 304) = 0u;
    *(_OWORD *)(v25 + 288) = 0u;
    *(_OWORD *)(v25 + 272) = 0u;
    v53 = 0;
    std::vector<char>::vector((std::vector<char> *)(v25 + 352), 0x20uLL, &v53);
    v29 = *(_QWORD *)(v25 + 352);
    *(_QWORD *)v29 = 0;
    *(_DWORD *)(v29 + 8) = 0;
    v53 = 0;
    std::vector<char>::vector((std::vector<char> *)(v25 + 376), 0x20uLL, &v53);
    v30 = *(_QWORD *)(v25 + 376);
    *(_QWORD *)v30 = 0;
    *(_DWORD *)(v30 + 8) = 0;
    *(_WORD *)(v25 + 400) = 0;
    *(_BYTE *)(v25 + 402) = 0;
    *(_QWORD *)(v25 + 424) = 0;
    *(_DWORD *)(v25 + 432) = 0;
    *(_QWORD *)(v25 + 440) = 0;
    *(_WORD *)(v25 + 448) = 0;
    *(_QWORD *)(v25 + 488) = 0;
    *(_BYTE *)(v25 + 496) = 0;
    *(_QWORD *)(v25 + 404) = 0;
    *(_QWORD *)(v25 + 410) = 0;
    *(_QWORD *)(v25 + 520) = 0;
    *(_QWORD *)(v25 + 504) = 0;
    *(_QWORD *)(v25 + 512) = 0;
    *(_WORD *)(v25 + 528) = 0;
    v31 = (*(uint64_t (**)(uint64_t, __int128 *, uint8_t *, uint64_t, uint64_t))(*(_QWORD *)v24 + 40))(v24, &v50, buf, v25, v21 + 40);
    if (v31)
    {
      v32 = v31;
      acv2::AudioConverterChain::~AudioConverterChain((acv2::AudioConverterChain *)v25);
      MEMORY[0x193FFE460]();
      v33 = 1;
      v25 = v32;
    }
    else
    {
      if (*(_QWORD *)(v25 + 104) == *(_QWORD *)(v25 + 112))
      {
        v35 = operator new();
        v36 = *(_OWORD *)&v52[16];
        *(_OWORD *)(v35 + 48) = *(_OWORD *)v52;
        *(_OWORD *)(v35 + 64) = v36;
        *(_OWORD *)(v35 + 80) = *(_OWORD *)&v52[32];
        v37 = v51;
        *(_OWORD *)(v35 + 16) = v50;
        *(_OWORD *)(v35 + 32) = v37;
        *(_QWORD *)(v35 + 104) = 0;
        *(_QWORD *)(v35 + 112) = 0;
        *(_QWORD *)(v35 + 96) = 0;
        *(_DWORD *)(v35 + 120) = -1;
        *(_OWORD *)(v35 + 128) = 0u;
        *(_OWORD *)(v35 + 144) = 0u;
        *(_QWORD *)v35 = &off_1E290AAA0;
        *(_QWORD *)(v35 + 8) = 0;
        *(_QWORD *)__x = v35;
        acv2::AudioConverterChain::AddStep((_QWORD *)v25, (uint64_t *)__x);
        if (*(_QWORD *)__x)
          (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
      }
      acv2::AudioConverterChain::PostBuild((acv2::AudioConverterChain *)v25);
      v33 = 0;
    }
  }
  else
  {
    v25 = 1718449215;
    AudioConverterLog();
    v34 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__x = 136315394;
      *(_QWORD *)&__x[4] = "ConverterFactory.cpp";
      v55 = 1024;
      v56 = 55;
      _os_log_impl(&dword_18EE07000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given formats", __x, 0x12u);
    }
    v33 = 1;
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v64[1])
  {
    v65[0] = v64[1];
    operator delete(v64[1]);
  }
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
  os_unfair_recursive_lock_unlock();
  if (v33)
  {
    v43 = __cxa_allocate_exception(4uLL);
    *v43 = v25;
    __cxa_throw(v43, MEMORY[0x1E0DE4EF0], 0);
  }
  std::unique_ptr<acv2::AudioConverterChain>::reset[abi:ne180100]((acv2::AudioConverterChain **)(v10 + 32), (acv2::AudioConverterChain *)v25);
  return v10;
}

void sub_18F004C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  AudioConverterAPI *v42;
  acv2::AudioConverterChain **v43;
  uint64_t v44;

  MEMORY[0x193FFE460](v44, 0x1080C4066A550C5);
  std::unique_ptr<acv2::AudioConverterChain>::reset[abi:ne180100](v43, 0);
  AudioConverterAPI::~AudioConverterAPI(v42);
  MEMORY[0x193FFE460](v42, 0x10A1C404B08E27ELL);
  _Unwind_Resume(a1);
}

uint64_t getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v0 = getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr;
  v6 = getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr;
  if (!getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = ___ZL58getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLocv_block_invoke;
    v2[3] = &unk_1E2921498;
    v2[4] = &v3;
    ___ZL58getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLocv_block_invoke((uint64_t)v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_18F004E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void acv2::PCMConverter2::~PCMConverter2(acv2::PCMConverter2 *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x193FFE460);
}

const __CFString *acv2::PCMConverter2::ConverterName(acv2::PCMConverter2 *this)
{
  return CFSTR("PCMConverter2");
}

void acv2::PCMConverter_Scaled::~PCMConverter_Scaled(acv2::PCMConverter_Scaled *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x193FFE460);
}

const __CFString *acv2::PCMConverter_Scaled::ConverterName(acv2::PCMConverter_Scaled *this)
{
  return CFSTR("PCMConverter_Scaled");
}

uint64_t acv2::PCMConverter_Scaled::ConvertBufferList(uint64_t result, int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = result;
  if ((*(_BYTE *)(result + 28) & 0x20) != 0)
    v7 = 1;
  else
    v7 = *(_DWORD *)(result + 44);
  v8 = *(unsigned int *)*a3;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = (v7 * a2);
    v11 = 16 * v8;
    do
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, float))(v6 + 168))(*(_QWORD *)(*a3 + v9 + 16), *(_QWORD *)(*a4 + v9 + 16), v10, *(float *)(v6 + 176));
      v9 += 16;
    }
    while (v11 != v9);
  }
  return result;
}

void acv2::PCMConverterI1::~PCMConverterI1(acv2::PCMConverterI1 *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x193FFE460);
}

const __CFString *acv2::PCMConverterI1::ConverterName(acv2::PCMConverterI1 *this)
{
  return CFSTR("PCMConverterI1");
}

void acv2::PCMConverterFactory::~PCMConverterFactory(acv2::PCMConverterFactory *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t acv2::ConverterFactory::GetName(acv2::ConverterFactory *this)
{
  return 0;
}

uint64_t acv2::ConverterFactory::IsVBR(acv2::ConverterFactory *this, unsigned int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t acv2::ConverterFactory::GetAvailableEncodeBitRatesInfo(acv2::ConverterFactory *this, unsigned int *a2)
{
  return 1886547824;
}

uint64_t acv2::ConverterFactory::GetAvailableChannelLayoutsInfo(acv2::ConverterFactory *this, const AudioStreamBasicDescription *a2, unsigned int *a3)
{
  return 1886547824;
}

uint64_t acv2::ConverterFactory::GetAvailableEncodeBitRates(acv2::ConverterFactory *this, unsigned int *a2, void *a3)
{
  return 1886547824;
}

uint64_t acv2::ConverterFactory::GetAvailableChannelLayouts(acv2::ConverterFactory *this, const AudioStreamBasicDescription *a2, unsigned int *a3, void *a4)
{
  return 1886547824;
}

void acv2::ChannelLayoutPair::~ChannelLayoutPair(acv2::ChannelLayoutPair *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void acv2::PCMDeinterleaver::~PCMDeinterleaver(acv2::PCMDeinterleaver *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x193FFE460);
}

const __CFString *acv2::PCMDeinterleaver::ConverterName(acv2::PCMDeinterleaver *this)
{
  return CFSTR("PCMDeinterleaver");
}

uint64_t acv2::PCMDeinterleaver::ConvertBufferList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(a1 + 168))(*(_QWORD *)(*(_QWORD *)a3 + 16), *(_QWORD *)(*(_QWORD *)a4 + 16), *(_QWORD *)(*(_QWORD *)a4 + 32), a2);
}

void acv2::PCMInterleaver::~PCMInterleaver(acv2::PCMInterleaver *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x193FFE460);
}

const __CFString *acv2::PCMInterleaver::ConverterName(acv2::PCMInterleaver *this)
{
  return CFSTR("PCMInterleaver");
}

uint64_t acv2::PCMInterleaver::ConvertBufferList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(a1 + 168))(*(_QWORD *)(*(_QWORD *)a3 + 16), *(_QWORD *)(*(_QWORD *)a3 + 32), *(_QWORD *)(*(_QWORD *)a4 + 16), a2);
}

uint64_t acv2::ChannelMixerConverter::ChannelMixerConverter(uint64_t a1, __int128 *a2, uint8_t **a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  const void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  void *v25;
  char *v26;
  unint64_t v27;
  uint8_t *v28;
  int v29;
  uint8x8_t v30;
  unsigned int v31;
  int v32;
  uint8_t *v33;
  uint8x8_t v34;
  unsigned int v35;
  int v36;
  float *v38;
  OSStatus Property;
  NSObject *v40;
  __int128 v41;
  uint64_t v42;
  int outPropertyData;
  UInt32 ioPropertyDataSize;
  uint8_t buf[32];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD inSpecifier[2];
  _OWORD v50[2];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v5 = a2[3];
  v46 = a2[2];
  v9 = v46;
  v47 = v5;
  v48 = a2[4];
  v6 = v48;
  v8 = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = -1;
  *((_QWORD *)&v9 + 1) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 6);
  *(_DWORD *)(a1 + 164) = *((_DWORD *)a2 + 16);
  *(_OWORD *)buf = v8;
  *(_OWORD *)&buf[16] = v7;
  *(_QWORD *)a1 = &off_1E290AFF8;
  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 7);
  v10 = *((unsigned int *)a2 + 17);
  *(_DWORD *)(a1 + 172) = v10;
  *(_OWORD *)(a1 + 176) = 0u;
  v11 = (_QWORD *)(a1 + 176);
  *(_BYTE *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  if ((_DWORD)v10)
  {
    v12 = (v10 + 63) & 0x1FFFFFFC0;
    if (v12)
    {
      v13 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(((unint64_t)(v12 - 1) >> 6) + 1);
      *((_QWORD *)&v9 + 1) = v14;
      *v13 = 0;
      v15 = *(const void **)(a1 + 200);
      v12 = *(_QWORD *)(a1 + 208);
    }
    else
    {
      v15 = 0;
      v13 = 0;
    }
    v16 = v12 + v10;
    v17 = -8 * (_QWORD)v15;
    if (-8 * (uint64_t)v15 < 1)
    {
      LODWORD(v20) = 0;
      v21 = v13;
    }
    else
    {
      if (v17 >= 0)
        v18 = -8 * (_QWORD)v15;
      else
        v18 = v17 + 63;
      v19 = v18 >> 6;
      if ((unint64_t)(v17 + 63) >= 0x7F)
      {
        v42 = *((_QWORD *)&v9 + 1);
        memmove(v13, v15, 8 * v19);
        *((_QWORD *)&v9 + 1) = v42;
      }
      v20 = v17 - (v19 << 6);
      v21 = &v13[v19];
      if (v20 < 1)
        LODWORD(v20) = 0;
      else
        *v21 = *v21 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v20) | *((_QWORD *)v15 + v19) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v20);
    }
    *(_QWORD *)&v9 = v16;
    v41 = v9;
    v22 = *(_QWORD *)(a1 + 208);
    v23 = (_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * (v22 >> 6));
    v24 = v22 & 0x3F;
    *(_QWORD *)buf = &v13[v16 >> 6];
    *(_DWORD *)&buf[8] = v16 & 0x3F;
    if (*(_DWORD *)&buf[8] == v24)
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)v50, v23, v24, (uint64_t)buf);
    else
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)v50, v23, v24, (uint64_t)buf);
    v25 = *(void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v13;
    *(_OWORD *)(a1 + 208) = v41;
    if (v25)
      operator delete(v25);
    *(_QWORD *)buf = v21;
    *(_DWORD *)&buf[8] = v20;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)buf, v10);
  }
  else
  {
    *(_QWORD *)(a1 + 208) = v10;
    *(_QWORD *)buf = (v10 >> 3) & 0x1FFFFFF8;
    *(_DWORD *)&buf[8] = 0;
    std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)v50, 0, 0, (uint64_t)buf);
  }
  v26 = *(char **)(a1 + 176);
  v27 = (*(_DWORD *)(a1 + 172) * *(_DWORD *)(a1 + 168));
  *(_DWORD *)buf = 0;
  std::vector<float>::insert(v11, v26, v27, (char *)buf);
  memset(buf, 0, sizeof(buf));
  memset(v50, 0, sizeof(v50));
  v28 = *a3;
  v29 = *(_DWORD *)*a3;
  if (v29 == 0x10000)
  {
    v30 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v28 + 1));
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.i32[0])
      goto LABEL_34;
  }
  else if (v29)
  {
    if ((unsigned __int16)*(_DWORD *)*a3)
      goto LABEL_34;
  }
  else if (*((_DWORD *)v28 + 2))
  {
    goto LABEL_34;
  }
  v31 = *(_DWORD *)(a1 + 168);
  if (v31 > 2)
    return a1;
  if (v31 == 2)
    v32 = 6619138;
  else
    v32 = 6553601;
  *(_DWORD *)buf = v32;
  v28 = buf;
LABEL_34:
  inSpecifier[0] = v28;
  v33 = a3[3];
  if (*(_DWORD *)v33 == 0x10000)
  {
    v34 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v33 + 1));
    v34.i16[0] = vaddlv_u8(v34);
    if (!v34.i32[0])
      goto LABEL_41;
  }
  else if (*(_DWORD *)v33)
  {
    if (!(unsigned __int16)*(_DWORD *)v33)
    {
LABEL_41:
      v35 = *(_DWORD *)(a1 + 172);
      if (v35 > 2)
        return a1;
      if (v35 == 2)
        v36 = 6619138;
      else
        v36 = 6553601;
      LODWORD(v50[0]) = v36;
      v33 = (uint8_t *)v50;
    }
  }
  else if (!*((_DWORD *)v33 + 2))
  {
    goto LABEL_41;
  }
  inSpecifier[1] = v33;
  if (!*(_BYTE *)(a1 + 224))
  {
    ioPropertyDataSize = 4 * *(_DWORD *)(a1 + 168) * *(_DWORD *)(a1 + 172);
    Property = AudioFormatGetProperty(0x6D6D6170u, 0x10u, inSpecifier, &ioPropertyDataSize, *(void **)(a1 + 176));
    outPropertyData = 1;
    if (Property
      || (ioPropertyDataSize = 4,
          Property = AudioFormatGetProperty(0x6E726D6Du, 0x10u, inSpecifier, &ioPropertyDataSize, &outPropertyData),
          outPropertyData))
    {
      acv2::normalizeMixMap(*(unsigned int *)(a1 + 168), *(_DWORD *)(a1 + 172), *(float **)(a1 + 176), v38);
    }
    if (Property)
    {
      v40 = CADefaultLog();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v50, Property);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "ChannelMixerConverter.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 30;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v50;
        _os_log_impl(&dword_18EE07000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d SetLayouts failed, err %s being dropped!", buf, 0x1Cu);
      }
    }
  }
  return a1;
}

void sub_18F00566C(_Unwind_Exception *a1)
{
  acv2::AudioConverterBase *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)*((_QWORD *)v1 + 25);
  if (v4)
    operator delete(v4);
  v5 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 23) = v5;
    operator delete(v5);
  }
  acv2::AudioConverterBase::~AudioConverterBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = 8 * (_QWORD)a2 + a3;
  result = *(_QWORD **)a4;
  if (v6 >= 1)
  {
    if (a3)
    {
      if (v6 >= (unint64_t)a3)
        v8 = a3;
      else
        v8 = 8 * (_QWORD)a2 + a3;
      v6 -= v8;
      v9 = (-1 << (a3 - v8)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3);
      *result = *result & ~v9 | *a2 & v9;
      *(_DWORD *)(a4 + 8) = (*(_DWORD *)(a4 + 8) - (_BYTE)v8) & 0x3F;
    }
    if (v6 >= 0)
      v10 = v6;
    else
      v10 = v6 + 63;
    v11 = v10 >> 6;
    result -= v10 >> 6;
    *(_QWORD *)a4 = result;
    v12 = &a2[-(v10 >> 6)];
    if ((unint64_t)(v6 + 63) >= 0x7F)
    {
      memmove(result, &a2[-(v10 >> 6)], 8 * v11);
      result = *(_QWORD **)a4;
    }
    if (v6 - (v11 << 6) >= 1)
    {
      v13 = -1 << (((_BYTE)v11 << 6) - v6);
      v14 = *(v12 - 1) & v13;
      v15 = *--result;
      *(_QWORD *)a4 = result;
      *result = v15 & ~v13 | v14;
      *(_DWORD *)(a4 + 8) = -(int)v6 & 0x3F;
    }
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a4 + 8);
  return result;
}

uint64_t std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(uint64_t result, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = 8 * (_QWORD)a2 + a3;
  if (v4 <= 0)
  {
    v9 = *(unint64_t **)a4;
    LODWORD(v7) = *(_DWORD *)(a4 + 8);
  }
  else
  {
    if (a3)
    {
      if (v4 >= (unint64_t)a3)
        v5 = a3;
      else
        v5 = 8 * (_QWORD)a2 + a3;
      v4 -= v5;
      v6 = (-1 << (a3 - v5)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & *a2;
      v7 = *(unsigned int *)(a4 + 8);
      if (v5 >= v7)
        v8 = *(unsigned int *)(a4 + 8);
      else
        v8 = v5;
      v9 = *(unint64_t **)a4;
      if (v8)
      {
        v10 = v6 >> (a3 - v7);
        if (v7 > a3)
          v10 = v6 << (v7 - a3);
        *v9 = *v9 & ~((-1 << (v7 - v8)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7)) | v10;
        LODWORD(v7) = ((_BYTE)v7 - (_BYTE)v8) & 0x3F;
        *(_DWORD *)(a4 + 8) = v7;
        v5 -= v8;
      }
      if (v5 >= 1)
      {
        v11 = *--v9;
        *(_QWORD *)a4 = v9;
        LODWORD(v7) = -(int)v5 & 0x3F;
        *(_DWORD *)(a4 + 8) = v7;
        *v9 = v11 & ~(-1 << -(char)v5) | (v6 << (v5 + v8 - a3 + (-(char)v5 & 0x3F)));
      }
    }
    else
    {
      LODWORD(v7) = *(_DWORD *)(a4 + 8);
      v9 = *(unint64_t **)a4;
    }
    v12 = 64 - v7;
    v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (v4 >= 64)
    {
      v14 = *v9;
      do
      {
        v15 = v4;
        v17 = *--a2;
        v16 = v17;
        *v9 = v14 & ~v13 | (v17 >> v12);
        v18 = *--v9;
        v14 = v18 & v13 | (v16 << v7);
        *v9 = v14;
        v4 = v15 - 64;
      }
      while (v15 > 0x7F);
      *(_QWORD *)a4 = v9;
    }
    if (v4 >= 1)
    {
      v19 = *(a2 - 1) & (-1 << -(char)v4);
      if (v4 >= (unint64_t)v7)
        v20 = v7;
      else
        v20 = v4;
      *v9 = *v9 & ~((-1 << (v7 - v20)) & v13) | (v19 >> v12);
      LODWORD(v7) = ((_BYTE)v7 - (_BYTE)v20) & 0x3F;
      *(_DWORD *)(a4 + 8) = v7;
      if (v4 - v20 >= 1)
      {
        v21 = *--v9;
        *(_QWORD *)a4 = v9;
        *(_DWORD *)(a4 + 8) = (v20 - v4) & 0x3F;
        *v9 = v21 & ~(-1 << (v20 - v4)) | (v19 << (v4 + ((v20 - v4) & 0x3F)));
        LODWORD(v7) = (v20 - v4) & 0x3F;
      }
    }
  }
  *(_QWORD *)result = v9;
  *(_DWORD *)(result + 8) = v7;
  return result;
}

void sub_18F005D90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F006170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  id *v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v17);
  _Unwind_Resume(a1);
}

void sub_18F006644(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 152));
  objc_destroyWeak((id *)(v5 - 144));
  _Unwind_Resume(a1);
}

void sub_18F006D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F007914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F007BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F007E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F008130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F008480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a17, 8);
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)&a27);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_18F008750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F008A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F008CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F008F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__128(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__129(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F009250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)&a9);
  _Unwind_Resume(a1);
}

void sub_18F009758(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *__copy_helper_block_e8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40));
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_copy__7138(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void __Block_byref_object_dispose__7139(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void MP3AudioStream::~MP3AudioStream(MP3AudioStream *this)
{
  MP3AudioStream::~MP3AudioStream(this);
  JUMPOUT(0x193FFE460);
}

{
  CACFDictionary *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2904638;
  v2 = (CACFDictionary *)*((_QWORD *)this + 55);
  if (v2)
  {
    CACFDictionary::~CACFDictionary(v2);
    MEMORY[0x193FFE460]();
  }
  v3 = (void *)*((_QWORD *)this + 42);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 42) = 0;
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

uint64_t MP3AudioStream::GetPropertyInfo(MP3AudioStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  unsigned int v4;

  if (a2 <= 1768174436)
  {
    if (a2 == 1634494051)
    {
      if (a3)
        *a3 = 4;
      if (a4)
        *a4 = 1;
      return 0;
    }
    if (a2 != 1768174433)
      return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
    goto LABEL_9;
  }
  if (a2 == 1819243876)
  {
LABEL_9:
    if (!a3)
      goto LABEL_12;
    v4 = 8;
LABEL_11:
    *a3 = v4;
LABEL_12:
    if (a4)
      *a4 = 0;
    return 0;
  }
  if (a2 == 1768174437)
  {
    if (!a3)
      goto LABEL_12;
    v4 = 4;
    goto LABEL_11;
  }
  return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
}

uint64_t MP3AudioStream::GetProperty(MP3AudioStream *this, int a2, unsigned int *a3, _DWORD *__dst)
{
  uint64_t result;
  CFTypeRef v7;
  int v8;
  CFTypeRef *v9;

  if (a2 > 1768174436)
  {
    if (a2 == 1819243876)
    {
      if (*a3 != 8)
        return 561211770;
      v9 = (CFTypeRef *)*((_QWORD *)this + 55);
      if (!v9)
        return 1836020325;
      if (*v9)
      {
        CFRetain(*v9);
        v7 = *v9;
      }
      else
      {
        v7 = 0;
      }
      result = 0;
      goto LABEL_25;
    }
    if (a2 != 1768174437)
      return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
    result = 561211770;
    if (!a3 || *a3 != 4)
      return result;
    result = 0;
    v8 = *((_DWORD *)this + 99);
LABEL_15:
    *__dst = v8;
    return result;
  }
  if (a2 == 1634494051)
  {
    result = 561211770;
    if (!a3 || *a3 != 4)
      return result;
    result = 0;
    v8 = *((unsigned __int8 *)this + 409);
    goto LABEL_15;
  }
  if (a2 != 1768174433)
    return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
  result = 561211770;
  if (a3 && *a3 == 8)
  {
    result = 0;
    v7 = (CFTypeRef)*((_QWORD *)this + 50);
LABEL_25:
    *(_QWORD *)__dst = v7;
  }
  return result;
}

uint64_t MP3AudioStream::SetProperty(MP3AudioStream *this, int a2, unsigned int a3, _DWORD *a4)
{
  uint64_t result;

  if (a2 != 1634494051)
    return 1886681407;
  result = 0;
  *((_BYTE *)this + 409) = *a4 != 0;
  return result;
}

uint64_t MP3AudioStream::GetBitRate(MP3AudioStream *this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  LODWORD(v2) = *((_DWORD *)this + 107);
  if ((_DWORD)v2)
    goto LABEL_4;
  v3 = *((_QWORD *)this + 40);
  if (v3)
  {
    v2 = v3 / *((_QWORD *)this + 26);
LABEL_4:
    result = 0;
    *a2 = v2;
    return result;
  }
  return 1836020325;
}

uint64_t MP3AudioStream::ParseHeader(MP3AudioStream *this, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  _BOOL4 v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  int v33;
  char *v34;
  size_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v41;
  size_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;

  v4 = *((_DWORD *)this + 59);
  if (v4 <= 163)
  {
    if (v4 == -1)
      return 0;
    if (!v4)
      goto LABEL_10;
    goto LABEL_7;
  }
  if (v4 == 172)
  {
    v6 = *((_QWORD *)this + 1);
    LODWORD(v7) = *(_DWORD *)(v6 + 116);
    goto LABEL_57;
  }
  if (v4 != 164)
  {
LABEL_7:
    v5 = -1;
LABEL_9:
    *((_DWORD *)this + 59) = v5;
    return 0;
  }
  while (1)
  {
LABEL_10:
    v8 = *((_QWORD *)this + 1);
    v9 = *(unsigned int *)(v8 + 80);
    v11 = *(_QWORD *)(v8 + 88);
    v10 = *(_QWORD *)(v8 + 96);
    v12 = v11 + v9;
    if (v10 < v11 || v12 <= v10 || (_DWORD)v12 - (_DWORD)v10 == 0)
    {
      v5 = 164;
      goto LABEL_9;
    }
    if ((MP3AudioStream::Resync(this) & 1) != 0)
      break;
    v15 = *((unsigned int *)this + 108);
    if ((_DWORD)v15)
    {
      *((_DWORD *)this + 64) = v15;
      v6 = *((_QWORD *)this + 1);
      v16 = *(_QWORD *)(v6 + 88);
      v17 = *(_QWORD *)(v6 + 96);
      v18 = v16 + *(unsigned int *)(v6 + 80);
      v19 = v17 < v16 || v18 <= v17;
      v20 = v19;
      v21 = v18 - v17;
      v7 = v20 ? 0 : v21;
      if (v7 < v15)
      {
        *((_QWORD *)this + 34) = v17;
        v22 = *(char **)(v6 + 72);
        if (v22 == *(char **)(v6 + 128))
        {
          if (v21)
            v33 = v20;
          else
            v33 = 1;
          if (v33)
            v34 = 0;
          else
            v34 = &v22[(v17 - v16)];
          memmove(v22, v34, v7);
          v35 = *((unsigned int *)this + 108);
          v6 = *((_QWORD *)this + 1);
          if (*(_DWORD *)(v6 + 120) < v35)
          {
            *(_DWORD *)(v6 + 120) = v35;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v35);
            v6 = *((_QWORD *)this + 1);
          }
          *(_DWORD *)(v6 + 116) = v7;
          *(_QWORD *)(v6 + 96) = *(_QWORD *)(v6 + 88) + *(unsigned int *)(v6 + 80);
        }
        else
        {
          if (*(_DWORD *)(v6 + 120) < v15)
          {
            *(_DWORD *)(v6 + 120) = v15;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v15);
            v6 = *((_QWORD *)this + 1);
          }
          LODWORD(v7) = 0;
          *(_DWORD *)(v6 + 116) = 0;
        }
LABEL_57:
        v36 = *((_DWORD *)this + 64) - v7;
        v37 = *(_QWORD *)(v6 + 88);
        v38 = *(_QWORD *)(v6 + 96);
        v39 = v37 + *(unsigned int *)(v6 + 80);
        if (v39 <= v38 || v38 < v37)
          v41 = 0;
        else
          v41 = v39 - v38;
        if (v36 <= v41)
          v36 = v41;
        v47 = v36;
        v42 = v36 + v7;
        if (*(_DWORD *)(v6 + 120) < v42)
        {
          *(_DWORD *)(v6 + 120) = v42;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v42);
          v6 = *((_QWORD *)this + 1);
        }
        StreamBuffer::Copy((_QWORD *)(v6 + 72), &v47, (unsigned __int8 *)(*(_QWORD *)(v6 + 128) + *(unsigned int *)(v6 + 116)));
        v43 = *((_QWORD *)this + 1);
        v44 = *(_DWORD *)(v43 + 116) + v47;
        *(_DWORD *)(v43 + 116) = v44;
        if (v44 < *((_DWORD *)this + 64))
        {
          v5 = 172;
          goto LABEL_9;
        }
        v45 = *((_QWORD *)this + 34);
        v46 = *(_QWORD *)(v43 + 128);
        *(_QWORD *)(v43 + 88) = v45;
        *(_QWORD *)(v43 + 96) = v45;
        *(_QWORD *)(v43 + 72) = v46;
        *(_DWORD *)(v43 + 80) = v44;
      }
    }
  }
  v23 = 0;
  *(_QWORD *)a2 = this;
  *(_OWORD *)(a2 + 8) = xmmword_18F116F70;
  v24 = *((_QWORD *)this + 1);
  v25 = *(_QWORD *)(v24 + 88);
  v26 = *(_QWORD *)(v24 + 96);
  v27 = v25 + *(unsigned int *)(v24 + 80);
  v28 = v26 < v25 || v27 <= v26;
  v29 = v28;
  v30 = v27 - v26;
  if (!v28 && v30)
    v23 = *(_QWORD *)(v24 + 72) + (v26 - v25);
  *(_QWORD *)(a2 + 32) = v23;
  if (v29)
    v31 = 0;
  else
    v31 = v30;
  *(_DWORD *)(a2 + 24) = v31;
  return 0;
}

uint64_t MP3AudioStream::GeneratePackets(uint64_t a1)
{
  int v2;
  int v3;
  size_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  __int128 v23;
  uint64_t v24;
  void (*v25)(_QWORD, _QWORD, uint64_t, unsigned int *);
  unsigned int v26;
  int v27;
  int v28;
  AudioStreamPacketDescription *v29;
  UInt32 v30;
  const void *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v39;
  unsigned int v40;
  unsigned int v41;
  size_t v42;
  _WORD *v43;
  unsigned int v44;
  BOOL v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  void (*v56)(_QWORD, _QWORD, uint64_t, unsigned int *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  char v62;
  int v63;
  unsigned int v64;
  UInt32 v65;
  double v66;
  double v67;
  int v68;
  int v69;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v75;
  void (*v76)(_QWORD, _QWORD, uint64_t, int *);
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  AudioFileStreamWrapper *v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  int v86;
  AudioStreamPacketDescription *v87;
  UInt32 v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL4 v95;
  unsigned int v96;
  size_t v97;
  _BOOL4 v98;
  int v99;
  BOOL v100;
  int v101;
  int v102;
  int v103;
  void *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  size_t size[2];
  _OWORD v113[3];
  int v114[3];

  v2 = *(_DWORD *)(a1 + 236);
  v3 = -1;
  if (v2 > 238)
  {
    if (v2 == 375)
    {
      LODWORD(v4) = *(_DWORD *)(a1 + 256);
      v5 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_122;
    }
    if (v2 == 260)
    {
      v6 = *(_DWORD *)(a1 + 256);
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_34;
    }
    if (v2 != 239)
    {
LABEL_11:
      *(_DWORD *)(a1 + 236) = v3;
      return 0;
    }
    while (1)
    {
LABEL_13:
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(v10 + 88);
      v12 = *(_QWORD *)(v10 + 96);
      v13 = v11 + *(unsigned int *)(v10 + 80);
      v3 = 239;
      if (v12 < v11 || v13 <= v12)
        goto LABEL_11;
      v15 = v13 - v12;
      if (!v15)
        goto LABEL_11;
      if (*(_BYTE *)(a1 + 364))
      {
        v16 = *(unsigned int *)(a1 + 368);
        v17 = 4 - (int)v16 >= v15 ? v15 : (4 - v16);
        *(_DWORD *)(a1 + 372) = v17;
        memcpy((void *)(a1 + 376 + v16), (const void *)(*(_QWORD *)(v10 + 72) + (v12 - v11)), v17);
        v18 = *(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 372);
        *(_DWORD *)(a1 + 368) = v18;
        if (v18 >= 4)
        {
          if (*(unsigned __int8 *)(a1 + 376) == 255)
          {
            v19 = *(unsigned __int8 *)(a1 + 377);
            if (v19 >= 0xE0)
            {
              v20 = (*(unsigned __int8 *)(a1 + 378) << 8) | (v19 << 16) | *(unsigned __int8 *)(a1 + 379) | 0xFF000000;
              *(_OWORD *)size = 0u;
              memset(v113, 0, sizeof(v113));
              v21 = ParseMPEGSyncWord(v20, (uint64_t)size);
              *(_BYTE *)(a1 + 364) = v21;
              v22 = size[1];
              *(_DWORD *)(a1 + 352) = size[1];
              if (v21)
              {
                if (*((double *)v113 + 1) != *(double *)(a1 + 24) || HIDWORD(v113[1]) != *(_DWORD *)(a1 + 44))
                {
                  v23 = *(_OWORD *)((char *)&v113[1] + 8);
                  *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)v113 + 8);
                  *(_OWORD *)(a1 + 40) = v23;
                  *(_QWORD *)(a1 + 56) = *((_QWORD *)&v113[2] + 1);
                  v24 = *(_QWORD *)(a1 + 8);
                  v106 = 1;
                  if (!*(_BYTE *)(v24 + 105))
                  {
                    *(_BYTE *)(v24 + 105) = 1;
                    v25 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v24 + 24);
                    if (v25)
                    {
                      v25(*(_QWORD *)(v24 + 40), *(unsigned int *)(v24 + 8), 1684434292, &v106);
                      v22 = *(_DWORD *)(a1 + 352);
                    }
                  }
                }
                if (*(_DWORD *)(a1 + 284) < v22)
                {
                  *(_DWORD *)(a1 + 284) = v22;
                  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v22, 0);
                }
                **(_DWORD **)(a1 + 288) = *(_DWORD *)(a1 + 376);
                v7 = *(_QWORD *)(a1 + 8);
                *(_QWORD *)(v7 + 96) += *(unsigned int *)(a1 + 372);
                v6 = *(_DWORD *)(a1 + 352) - 4;
                *(_DWORD *)(a1 + 256) = v6;
                v8 = (unsigned __int8 *)(*(_QWORD *)(a1 + 288) + 4);
                *(_QWORD *)(a1 + 264) = v8;
LABEL_34:
                v106 = v6;
                StreamBuffer::Copy((_QWORD *)(v7 + 72), &v106, v8);
                v26 = v106;
                v27 = *(_DWORD *)(a1 + 256);
                *(_QWORD *)(a1 + 264) += v106;
                v28 = v27 - v26;
                *(_DWORD *)(a1 + 256) = v28;
                if (v28)
                {
                  v3 = 260;
                  goto LABEL_11;
                }
                v29 = *(AudioStreamPacketDescription **)(a1 + 192);
                v29->mStartOffset = 0;
                v30 = *(_DWORD *)(a1 + 352);
                v29->mVariableFramesInPacket = 0;
                v29->mDataByteSize = v30;
                *(_QWORD *)(a1 + 320) += LODWORD(v113[0]);
                AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v30, 1u, *(const void **)(a1 + 288), v29, 1);
                ++*(_QWORD *)(a1 + 184);
              }
            }
          }
          *(_BYTE *)(a1 + 364) = 0;
        }
      }
      if (!*(_BYTE *)(a1 + 380))
        goto LABEL_77;
      v31 = 0;
      v32 = *(unsigned int *)(a1 + 384);
      v33 = 4 - v32;
      v34 = *(_QWORD *)(a1 + 8);
      v35 = *(_QWORD *)(v34 + 88);
      v36 = *(_QWORD *)(v34 + 96);
      v37 = v35 + *(unsigned int *)(v34 + 80);
      v39 = v36 < v35 || v37 <= v36;
      v40 = v37 - v36;
      if (v39)
        v41 = 0;
      else
        v41 = v40;
      if (v41 >= v33)
        v42 = v33;
      else
        v42 = v41;
      *(_DWORD *)(a1 + 388) = v42;
      v43 = (_WORD *)(a1 + 392);
      if (!v39 && v40)
        v31 = (const void *)(*(_QWORD *)(v34 + 72) + (v36 - v35));
      memcpy((void *)(a1 + 392 + v32), v31, v42);
      v44 = *(_DWORD *)(a1 + 384) + *(_DWORD *)(a1 + 388);
      *(_DWORD *)(a1 + 384) = v44;
      if (v44 < 4)
        goto LABEL_77;
      v45 = *v43 == 17481 && *(_BYTE *)(a1 + 394) == 51;
      if (v45 || (*v43 == 16724 ? (v46 = *(_BYTE *)(a1 + 394) == 71) : (v46 = 0), v46))
      {
        v47 = -v44;
        *(_DWORD *)(a1 + 396) = -v44;
        v48 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 400) = *(_QWORD *)(v48 + 88) + v47;
        if (*(char *)(a1 + 408) < 0)
        {
          v49 = 0;
          v50 = *(_QWORD *)(v48 + 48);
          v51 = *(_QWORD *)(v48 + 56) - v50;
          if (v51)
          {
            v52 = 0;
            v53 = v51 >> 2;
            v54 = 1;
            do
            {
              v45 = *(_DWORD *)(v50 + 4 * v52) == 1768174437;
              v49 = v45;
              v52 = v54++;
            }
            while (!v45 && v53 > v52);
          }
          *(_BYTE *)(a1 + 408) = v49;
          if (!v49)
            goto LABEL_76;
LABEL_73:
          v106 = 0;
          v56 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v48 + 24);
          if (v56)
            v56(*(_QWORD *)(v48 + 40), *(unsigned int *)(v48 + 8), 1768174437, &v106);
          *(_DWORD *)(a1 + 384) = 0;
          goto LABEL_76;
        }
        if (*(_BYTE *)(a1 + 408))
          goto LABEL_73;
      }
LABEL_76:
      *(_BYTE *)(a1 + 380) = 0;
LABEL_77:
      v104 = 0;
      v57 = *(_QWORD *)(a1 + 8);
      v58 = *(_QWORD *)(v57 + 88);
      v59 = *(_QWORD *)(v57 + 96);
      v60 = v58 + *(unsigned int *)(v57 + 80);
      v61 = v59 < v58 || v60 <= v59;
      v62 = v61;
      v63 = v60 - v59;
      if (!v61 && (_DWORD)v60 != (_DWORD)v59)
        v104 = (void *)(*(_QWORD *)(v57 + 72) + (v59 - v58));
      if (!v63)
        v62 = 1;
      if ((v62 & 1) == 0)
      {
        v105 = 0;
        *(_BYTE *)(a1 + 356) = 0;
        if (v63 >= 4)
        {
          v64 = 0;
          v65 = 0;
          while (MP3AudioStream::ScanForSyncWord(a1, v63, (uint64_t)v104, &v105, (uint64_t)&v106, 1))
          {
            v66 = *(double *)&v109;
            v67 = *(double *)(a1 + 24);
            v68 = DWORD1(v110);
            v69 = *(_DWORD *)(a1 + 44);
            if (*(double *)&v109 != v67 || DWORD1(v110) != v69)
            {
              if (v64)
              {
                AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v65, v64, v104, *(AudioStreamPacketDescription **)(a1 + 192), 1);
                v71 = *(_QWORD *)(a1 + 8);
                v72 = *(_QWORD *)(v71 + 96) + v65;
                v65 = 0;
                *(_QWORD *)(v71 + 96) = v72;
                *(_QWORD *)(a1 + 184) += v64;
                v67 = *(double *)(a1 + 24);
                v69 = *(_DWORD *)(a1 + 44);
              }
              v73 = v110;
              *(_OWORD *)(a1 + 24) = v109;
              *(_OWORD *)(a1 + 40) = v73;
              *(_QWORD *)(a1 + 56) = v111;
              if (v66 != v67 || v68 != v69)
              {
                v75 = *(_QWORD *)(a1 + 8);
                v114[0] = 1;
                if (!*(_BYTE *)(v75 + 105))
                {
                  *(_BYTE *)(v75 + 105) = 1;
                  v76 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v75 + 24);
                  if (v76)
                    v76(*(_QWORD *)(v75 + 40), *(unsigned int *)(v75 + 8), 1684434292, v114);
                }
              }
              v64 = 0;
            }
            v77 = v105;
            v78 = v107;
            if (v63 - v105 < v107)
            {
              v82 = *(AudioFileStreamWrapper **)(a1 + 8);
              if (v64)
              {
                AudioFileStreamWrapper::CallPacketsProc(v82, v65, v64, v104, *(AudioStreamPacketDescription **)(a1 + 192), 1);
                v82 = *(AudioFileStreamWrapper **)(a1 + 8);
                v83 = *((_QWORD *)v82 + 12) + v65;
                *((_QWORD *)v82 + 12) = v83;
                LODWORD(v77) = v77 - v65;
                *(_QWORD *)(a1 + 184) += v64;
              }
              else
              {
                v83 = *((_QWORD *)v82 + 12);
              }
              *(_BYTE *)(a1 + 356) = 1;
              *(_DWORD *)(a1 + 360) = v108;
              *((_QWORD *)v82 + 12) = v83 + v77;
              *(_DWORD *)(a1 + 352) = v78;
              goto LABEL_118;
            }
            *(_QWORD *)(a1 + 320) += v108;
            v79 = v64 + 1;
            if (*(_DWORD *)(a1 + 200) < v64 + 1)
            {
              v80 = (1 << -__clz(v64));
              *(_DWORD *)(a1 + 200) = v80;
              CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), v80);
            }
            v81 = *(_QWORD *)(a1 + 192) + 16 * v64;
            *(_QWORD *)v81 = v77;
            *(_DWORD *)(v81 + 8) = 0;
            *(_DWORD *)(v81 + 12) = v78;
            v65 = v78 + v77;
            v105 = v78 + v77;
            ++v64;
            if ((int)(v63 - (v78 + v77)) <= 3)
              goto LABEL_112;
          }
          v79 = v64;
LABEL_112:
          if (v79)
          {
            AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v65, v79, v104, *(AudioStreamPacketDescription **)(a1 + 192), 1);
            *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) += v65;
            *(_QWORD *)(a1 + 184) += v79;
          }
        }
      }
LABEL_118:
      if (*(_BYTE *)(a1 + 356))
      {
        v4 = *(unsigned int *)(a1 + 352);
        if (*(_DWORD *)(a1 + 284) < v4)
        {
          *(_DWORD *)(a1 + 284) = v4;
          CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v4, 0);
          LODWORD(v4) = *(_DWORD *)(a1 + 352);
        }
        *(_DWORD *)(a1 + 256) = v4;
        v5 = *(unsigned __int8 **)(a1 + 288);
        *(_QWORD *)(a1 + 264) = v5;
LABEL_122:
        v106 = v4;
        StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), &v106, v5);
        v84 = v106;
        v85 = *(_DWORD *)(a1 + 256);
        *(_QWORD *)(a1 + 264) += v106;
        v86 = v85 - v84;
        *(_DWORD *)(a1 + 256) = v86;
        if (v86)
        {
          v3 = 375;
          goto LABEL_11;
        }
        if (!*(_DWORD *)(a1 + 200))
        {
          *(_DWORD *)(a1 + 200) = 1;
          CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), 1);
        }
        v87 = *(AudioStreamPacketDescription **)(a1 + 192);
        v87->mStartOffset = 0;
        v88 = *(_DWORD *)(a1 + 352);
        v87->mVariableFramesInPacket = 0;
        v87->mDataByteSize = v88;
        *(_QWORD *)(a1 + 320) += *(unsigned int *)(a1 + 360);
        AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v88, 1u, *(const void **)(a1 + 288), v87, 1);
        ++*(_QWORD *)(a1 + 184);
      }
      else
      {
        v89 = 0;
        v90 = *(_QWORD *)(a1 + 8);
        v91 = *(_QWORD *)(v90 + 88);
        v92 = *(_QWORD *)(v90 + 96);
        v93 = v91 + *(unsigned int *)(v90 + 80);
        v95 = v92 < v91 || v93 <= v92;
        v96 = v93 - v92;
        if (v95)
          v97 = 0;
        else
          v97 = v96;
        if (!v95 && v96)
          v89 = (unsigned __int8 *)(*(_QWORD *)(v90 + 72) + (v92 - v91));
        if ((_DWORD)v97 == 1)
        {
          v98 = *v89 == 255;
          *(_BYTE *)(a1 + 364) = v98;
          v99 = *v89;
          v100 = v99 == 73 || v99 == 84;
        }
        else
        {
          if ((v97 & 0xFFFFFFFE) == 2)
          {
            v98 = 0;
            if (*v89 == 255)
              v98 = v89[1] > 0xDFu;
            *(_BYTE *)(a1 + 364) = v98;
          }
          else
          {
            v98 = 0;
            *(_BYTE *)(a1 + 364) = 0;
          }
          if ((_DWORD)v97 != 2)
          {
LABEL_155:
            v103 = 0;
            goto LABEL_156;
          }
          v101 = *v89;
          v102 = 68;
          if (v101 != 73)
          {
            if (v101 != 84)
              goto LABEL_155;
            v102 = 65;
          }
          v100 = v89[1] == v102;
        }
        v103 = v100;
LABEL_156:
        *(_BYTE *)(a1 + 380) = v103;
        if (v98)
        {
          *(_DWORD *)(a1 + 368) = v97;
          *(_DWORD *)(a1 + 376) = 0;
          memcpy((void *)(a1 + 376), v89, v97);
          v103 = *(unsigned __int8 *)(a1 + 380);
        }
        if (v103)
        {
          *(_DWORD *)(a1 + 384) = v97;
          *(_DWORD *)(a1 + 392) = 0;
          memcpy((void *)(a1 + 392), v89, v97);
        }
        *(_QWORD *)(v90 + 96) = *(_QWORD *)(v90 + 88) + *(unsigned int *)(v90 + 80);
      }
    }
  }
  if (v2 != -1)
  {
    if (!v2)
      goto LABEL_13;
    goto LABEL_11;
  }
  return 0;
}

uint64_t MP3AudioStream::HandleDiscontinuity(MP3AudioStream *this)
{
  *((_DWORD *)this + 59) = 0;
  *((_BYTE *)this + 356) = 0;
  *((_BYTE *)this + 364) = 0;
  *((_BYTE *)this + 380) = 0;
  MP3AudioStream::Resync(this);
  return 0;
}

uint64_t MP3AudioStream::Resync(MP3AudioStream *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v24;
  int v25;
  unint64_t v26;
  BOOL v27;
  int v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  double v34;
  double v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  void (*v47)(_QWORD, _QWORD, uint64_t, _DWORD *);
  uint64_t v48;
  void (*v49)(_QWORD, _QWORD, uint64_t, _DWORD *);
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int i;
  unsigned __int8 *v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD, _QWORD, uint64_t, __int128 *);
  uint64_t v63;
  void (*v64)(_QWORD, _QWORD, uint64_t, __int128 *);
  void (*v65)(_QWORD, _QWORD, uint64_t, __int128 *);
  void (*v66)(_QWORD, _QWORD, uint64_t, __int128 *);
  void (*v67)(_QWORD, _QWORD, uint64_t, __int128 *);
  uint64_t result;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _QWORD v77[3];
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  unsigned int v83;
  _DWORD v84[3];

  v2 = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = *(_QWORD *)(v3 + 88);
  v5 = *(_QWORD *)(v3 + 96);
  v6 = v4 + *(unsigned int *)(v3 + 80);
  v8 = v5 < v4 || v6 <= v5;
  v9 = v6 - v5;
  if (v8)
    v10 = 0;
  else
    v10 = v9;
  if (!v8 && v9)
    v2 = *(_QWORD *)(v3 + 72) + (v5 - v4);
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  *((_DWORD *)this + 108) = 0;
  v11 = v10 - 4;
  v70 = 4;
  v12 = 3;
  v71 = v10;
  while (2)
  {
    v13 = 0;
    v14 = 0;
    v83 = 0;
    v72 = v12;
    while (MP3AudioStream::ScanForSyncWord((uint64_t)this, v10, v2, &v83, (uint64_t)&v79, 0))
    {
      v73 = v79;
      *((_QWORD *)&v74 + 1) = *((_QWORD *)&v80 + 1);
      v75 = v81;
      v76 = v82;
      v15 = v83;
      v16 = DWORD2(v79);
      if ((v14 & 1) == 0)
      {
        if (v10 - v83 < DWORD2(v79))
        {
          v13 = 0;
          *((_DWORD *)this + 108) = DWORD2(v79) + v83;
          goto LABEL_83;
        }
        v77[0] = v2 + v83;
        v77[1] = v77[0];
        v77[2] = v77[0] + v11 - v83;
        v78 = 0;
        if ((v77[0] & 3) != 0)
        {
          v17 = 0;
          v18 = v2 + 1 + v83;
          v19 = -8;
          v20 = (unsigned __int8 *)(v2 + v83);
          do
          {
            v21 = v19;
            if ((unint64_t)v20 >= v2 + v83 + (unint64_t)(v11 - v83))
              v22 = 255;
            else
              v22 = *v20;
            v17 = v22 | (v17 << 8);
            ++v20;
            v19 = v21 + 8;
          }
          while ((v18++ & 3) != 0);
          v77[0] = v20;
          LODWORD(v78) = v17 << (16 - v21);
          HIDWORD(v78) = v21 + 16;
        }
        v24 = *((_QWORD *)this + 1);
        v25 = VBRIHeader::Deserialize(v24 + 192, (uint64_t)v77, 1);
        v27 = v25 != 0;
        if (!v25)
        {
          v29 = *(unsigned int *)(v24 + 200);
          *((_QWORD *)this + 52) = v29;
          v30 = (unsigned int *)(v24 + 196);
LABEL_33:
          v31 = *v30;
          v32 = v31 >= v16;
          v33 = v31 - v16;
          if (!v32)
            v33 = 0;
          *((_DWORD *)this + 106) = v33;
          LODWORD(v26) = HIDWORD(v75);
          v34 = (double)v29 * (double)v26 / *((double *)&v74 + 1);
          v35 = 0.0;
          if (v34 > 0.0)
            v35 = (double)v33 * 8.0 / v34;
          v36 = v35;
LABEL_38:
          *((_DWORD *)this + 107) = v36;
          (*(void (**)(MP3AudioStream *, _QWORD))(*(_QWORD *)this + 96))(this, v33);
          v29 = *((_QWORD *)this + 52);
          v37 = 1;
          goto LABEL_39;
        }
        if (GetMetaHeader(v24 + 240, (unsigned __int8 *)(v2 + v15), v11 - v15))
        {
          v28 = *(_DWORD *)(v24 + 248);
          if ((v28 & 1) == 0)
          {
            v12 = v72;
            if ((v28 & 2) == 0)
            {
              if ((v28 & 0x10) != 0)
                goto LABEL_71;
              goto LABEL_67;
            }
            v50 = *(_DWORD *)(v24 + 256);
            v32 = v50 >= v16;
            v51 = v50 - v16;
            if (v32)
              v52 = v51;
            else
              v52 = 0;
            *((_DWORD *)this + 106) = v52;
            if ((v28 & 0x10) != 0)
            {
LABEL_71:
              for (i = v16 + v15; i <= v11; ++i)
              {
                v54 = (unsigned __int8 *)(v2 + i);
                if (*v54 == 255)
                {
                  v55 = v54[1];
                  if (v55 >= 0xE0)
                  {
                    v56 = (v54[2] << 8) | (v55 << 16) | v54[3] | 0xFF000000;
                    v79 = 0u;
                    v80 = 0u;
                    v81 = 0u;
                    v82 = 0u;
                    if ((ParseMPEGSyncWord(v56, (uint64_t)&v79) & 1) != 0)
                    {
                      if ((v28 & 2) == 0)
                      {
                        v39 = 1651663220;
                        *((_DWORD *)this + 107) = v80;
                        goto LABEL_66;
                      }
                      v33 = *((_DWORD *)this + 106);
                      v36 = v80;
                      LODWORD(v57) = HIDWORD(v75);
                      *((_QWORD *)this + 52) = vcvtpd_u64_f64((double)v33/ ((double)v80* 0.125)* (*((double *)&v74 + 1)/ (double)v57));
                      v27 = 1;
                      goto LABEL_38;
                    }
                  }
                }
              }
              *((_DWORD *)this + 108) = i + 4;
              if (i != -4)
              {
                LODWORD(v15) = 0;
                goto LABEL_104;
              }
              v58 = *((_QWORD *)this + 1);
LABEL_107:
              result = 0;
              v69 = *(_QWORD *)(v58 + 88) + *(unsigned int *)(v58 + 80);
LABEL_108:
              *(_QWORD *)(v58 + 96) = v69;
              return result;
            }
            v39 = 1650683508;
            (*(void (**)(MP3AudioStream *))(*(_QWORD *)this + 96))(this);
LABEL_66:
            AudioFileStreamWrapper::CallPropertyListener(*((_QWORD *)this + 1), v39, 1);
LABEL_67:
            v45 = v16 + v15;
            v83 = v16 + v15;
            v10 = v71;
            goto LABEL_68;
          }
          v29 = *(unsigned int *)(v24 + 252);
          *((_QWORD *)this + 52) = v29;
          if ((v28 & 2) != 0)
          {
            v30 = (unsigned int *)(v24 + 256);
            goto LABEL_33;
          }
          v37 = 0;
          v27 = 1;
LABEL_39:
          (*(void (**)(MP3AudioStream *, unint64_t))(*(_QWORD *)this + 80))(this, v29);
          v38 = *(_DWORD *)&v27 & ((*(_DWORD *)(v24 + 248) & 0x20u) >> 5);
          *((_BYTE *)this + 448) = v27 & ((*(_DWORD *)(v24 + 248) & 0x20u) >> 5);
          if (v38 == 1)
          {
            *((_DWORD *)this + 42) = *(unsigned __int16 *)(v24 + 380);
            *((_DWORD *)this + 43) = *(unsigned __int16 *)(v24 + 382);
            v39 = 1885564532;
            v12 = v72;
            if ((v37 & 1) == 0)
              goto LABEL_66;
          }
          else
          {
            v39 = 1885564532;
            v12 = v72;
            if (!v37)
              goto LABEL_66;
          }
          v46 = *((_QWORD *)this + 1);
          v84[0] = 1;
          v47 = *(void (**)(_QWORD, _QWORD, uint64_t, _DWORD *))(v46 + 24);
          if (v47)
          {
            v47(*(_QWORD *)(v46 + 40), *(unsigned int *)(v46 + 8), 1651663220, v84);
            v48 = *((_QWORD *)this + 1);
            v49 = *(void (**)(_QWORD, _QWORD, uint64_t, _DWORD *))(v48 + 24);
            v84[0] = 1;
            if (v49)
              v49(*(_QWORD *)(v48 + 40), *(unsigned int *)(v48 + 8), 1650683508, v84);
          }
          else
          {
            v84[0] = 1;
          }
          goto LABEL_66;
        }
        v10 = v71;
        v12 = v72;
      }
      v40 = v16 + v15;
      if (v40 <= v11)
      {
        v41 = 0;
        v13 = 1;
        while (1)
        {
          v42 = (unsigned __int8 *)(v2 + v40);
          if (*v42 != 255)
            break;
          v43 = v42[1];
          if (v43 < 0xE0)
            goto LABEL_51;
          v44 = (v42[2] << 8) | (v43 << 16) | v42[3] | 0xFF000000;
          v79 = 0u;
          v80 = 0u;
          v81 = 0u;
          v82 = 0u;
          if (!ParseMPEGSyncWord(v44, (uint64_t)&v79))
            break;
          if (v12 == v41)
          {
            v13 = v70;
            goto LABEL_83;
          }
          v40 += DWORD2(v79);
          ++v13;
          ++v41;
          if (v40 > v11)
          {
LABEL_51:
            v13 = v41 + 1;
            break;
          }
        }
      }
      else
      {
        v13 = 1;
      }
      if (v40 >= v11)
        break;
      v45 = v15 + 1;
      v83 = v15 + 1;
LABEL_68:
      v14 = 1;
      if (v45 > v11)
        break;
    }
    --v12;
    if (--v70)
      continue;
    break;
  }
  LODWORD(v15) = 0;
LABEL_83:
  if (*((_DWORD *)this + 108))
  {
LABEL_104:
    result = 0;
    v58 = *((_QWORD *)this + 1);
    v69 = *(_QWORD *)(v58 + 96) + v15;
    goto LABEL_108;
  }
  v58 = *((_QWORD *)this + 1);
  if (!v13)
    goto LABEL_107;
  v59 = *(_QWORD *)(v58 + 96) + v15;
  *(_QWORD *)(v58 + 96) = v59;
  if (!*(_DWORD *)(v58 + 112))
  {
    *((_DWORD *)this + 86) = BYTE4(v73);
    *((_DWORD *)this + 87) = BYTE5(v73);
    *((_DWORD *)this + 29) = HIDWORD(v73) + 8;
    (*(void (**)(MP3AudioStream *, char *))(*(_QWORD *)this + 56))(this, (char *)&v74 + 8);
    *((_QWORD *)this + 13) = v59;
    if (*((_BYTE *)this + 448))
    {
      v60 = (*(uint64_t (**)(MP3AudioStream *))(*(_QWORD *)this + 72))(this);
      *((_QWORD *)this + 20) = v60 * HIDWORD(v75) - (*((int *)this + 42) + (uint64_t)*((int *)this + 43));
      v61 = *((_QWORD *)this + 1);
      LODWORD(v79) = 1;
      if (!*(_BYTE *)(v61 + 106))
      {
        *(_BYTE *)(v61 + 106) = 1;
        v62 = *(void (**)(_QWORD, _QWORD, uint64_t, __int128 *))(v61 + 24);
        if (v62)
          v62(*(_QWORD *)(v61 + 40), *(unsigned int *)(v61 + 8), 1886283375, &v79);
      }
    }
    v63 = *((_QWORD *)this + 1);
    LODWORD(v79) = 1;
    if (!*(_BYTE *)(v63 + 104))
    {
      *(_BYTE *)(v63 + 104) = 1;
      v64 = *(void (**)(_QWORD, _QWORD, uint64_t, __int128 *))(v63 + 24);
      if (v64)
      {
        v64(*(_QWORD *)(v63 + 40), *(unsigned int *)(v63 + 8), 1717988724, &v79);
        v63 = *((_QWORD *)this + 1);
      }
    }
    LODWORD(v79) = 1;
    if (!*(_BYTE *)(v63 + 105))
    {
      *(_BYTE *)(v63 + 105) = 1;
      v65 = *(void (**)(_QWORD, _QWORD, uint64_t, __int128 *))(v63 + 24);
      if (v65)
      {
        v65(*(_QWORD *)(v63 + 40), *(unsigned int *)(v63 + 8), 1684434292, &v79);
        v63 = *((_QWORD *)this + 1);
      }
    }
    LODWORD(v79) = 1;
    v66 = *(void (**)(_QWORD, _QWORD, uint64_t, __int128 *))(v63 + 24);
    if (v66)
    {
      v66(*(_QWORD *)(v63 + 40), *(unsigned int *)(v63 + 8), 1685022310, &v79);
      v63 = *((_QWORD *)this + 1);
    }
    LODWORD(v79) = 1;
    if (!*(_DWORD *)(v63 + 112))
    {
      *(_DWORD *)(v63 + 112) = 1;
      v67 = *(void (**)(_QWORD, _QWORD, uint64_t, __int128 *))(v63 + 24);
      if (v67)
        v67(*(_QWORD *)(v63 + 40), *(unsigned int *)(v63 + 8), 1919247481, &v79);
    }
  }
  return 1;
}

BOOL MP3AudioStream::ScanForSyncWord(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5, int a6)
{
  int v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  void (*v28)(_QWORD, _QWORD, uint64_t, int *);
  uint64_t v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  void (*v42)(_QWORD, _QWORD, uint64_t, int *);
  _DWORD *v43;
  int v46;
  int v47;
  int v48;

  v9 = *a4;
  v46 = a2;
  if (*a4 <= a2 - 4)
  {
    v12 = v9;
    v13 = a2 - 4;
    v9 = a2 - 3;
    v10 = 1;
    while (1)
    {
      v14 = a3 + v12;
      if (*(unsigned __int8 *)(a3 + v12) == 255)
      {
        v15 = *(unsigned __int8 *)(v14 + 1);
        if (v15 >= 0xE0)
        {
          v16 = (*(unsigned __int8 *)(v14 + 2) << 8) | (v15 << 16) | *(unsigned __int8 *)(v14 + 3) | 0xFF000000;
          *(_OWORD *)(a5 + 32) = 0u;
          *(_OWORD *)(a5 + 48) = 0u;
          *(_OWORD *)a5 = 0u;
          *(_OWORD *)(a5 + 16) = 0u;
          if (ParseMPEGSyncWord(v16, a5))
          {
            if (*(_BYTE *)(a1 + 409)
              || !*(_BYTE *)(*(_QWORD *)(a1 + 8) + 105)
              || (*(double *)(a5 + 24) == *(double *)(a1 + 24)
                ? (v17 = *(_DWORD *)(a5 + 44) == *(_DWORD *)(a1 + 44))
                : (v17 = 0),
                  v17))
            {
              a2 = v12;
LABEL_66:
              v43 = a4;
              goto LABEL_67;
            }
          }
          goto LABEL_38;
        }
      }
      v18 = *(_WORD *)v14 == 17481 && *(_BYTE *)(v14 + 2) == 51;
      if (v18 || (*(_WORD *)v14 == 16724 ? (v19 = *(_BYTE *)(v14 + 2) == 71) : (v19 = 0), v19))
      {
        v20 = *(_QWORD *)(a1 + 8);
        v21 = v14 - *(_QWORD *)(v20 + 72);
        *(_DWORD *)(a1 + 396) = v21;
        *(_QWORD *)(a1 + 400) = *(_QWORD *)(v20 + 88) + v21;
        if (a6)
        {
          if (*(char *)(a1 + 408) < 0)
          {
            v22 = *(_QWORD *)(v20 + 48);
            v23 = *(_QWORD *)(v20 + 56) - v22;
            if (v23)
            {
              v24 = 0;
              v25 = v23 >> 2;
              v26 = 1;
              do
              {
                v17 = *(_DWORD *)(v22 + 4 * v24) == 1768174437;
                LODWORD(v23) = v17;
                v24 = v26++;
              }
              while (!v17 && v25 > v24);
            }
            *(_BYTE *)(a1 + 408) = v23;
            if (!(_DWORD)v23)
              goto LABEL_38;
LABEL_36:
            v47 = 0;
            v28 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v20 + 24);
            if (v28)
              v28(*(_QWORD *)(v20 + 40), *(unsigned int *)(v20 + 8), 1768174437, &v47);
            goto LABEL_38;
          }
          if (*(_BYTE *)(a1 + 408))
            goto LABEL_36;
        }
      }
LABEL_38:
      v10 = v12++ < v13;
      if (v9 == (_DWORD)v12)
      {
        a2 = v46;
        goto LABEL_40;
      }
    }
  }
  v10 = 0;
  if (v9 > a2 - 3)
    goto LABEL_66;
LABEL_40:
  v29 = v9;
  v30 = a2 - 2;
  do
  {
    v31 = a3 + v29;
    v32 = *(_WORD *)(a3 + v29) == 17481 && *(_BYTE *)(a3 + v29 + 2) == 51;
    if (v32 || (*(_WORD *)v31 == 16724 ? (v33 = *(_BYTE *)(v31 + 2) == 71) : (v33 = 0), v33))
    {
      v34 = *(_QWORD *)(a1 + 8);
      v35 = v31 - *(_QWORD *)(v34 + 72);
      *(_DWORD *)(a1 + 396) = v35;
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(v34 + 88) + v35;
      if (a6)
      {
        if ((*(char *)(a1 + 408) & 0x80000000) == 0)
        {
          if (!*(_BYTE *)(a1 + 408))
            goto LABEL_63;
LABEL_61:
          v48 = 0;
          v42 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v34 + 24);
          if (v42)
            v42(*(_QWORD *)(v34 + 40), *(unsigned int *)(v34 + 8), 1768174437, &v48);
          goto LABEL_63;
        }
        v36 = *(_QWORD *)(v34 + 48);
        v37 = *(_QWORD *)(v34 + 56) - v36;
        if (v37)
        {
          v38 = 0;
          v39 = v37 >> 2;
          v40 = 1;
          do
          {
            v17 = *(_DWORD *)(v36 + 4 * v38) == 1768174437;
            LODWORD(v37) = v17;
            v38 = v40++;
          }
          while (!v17 && v39 > v38);
        }
        *(_BYTE *)(a1 + 408) = v37;
        if ((_DWORD)v37)
          goto LABEL_61;
      }
    }
LABEL_63:
    ++v29;
  }
  while (v30 != (_DWORD)v29);
  v43 = a4;
  a2 = v46;
LABEL_67:
  *v43 = a2;
  return v10;
}

uint64_t VBRIHeader::Deserialize(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  int v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned int v88;
  int v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  uint64_t v104;
  unsigned __int8 *v105;
  unsigned int v106;
  int v107;

  if (a3)
    v3 = 496;
  else
    v3 = 432;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned int **)a2;
  v6 = v4 - *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 28);
  if (v7 + 8 * (int)v6 < v3)
    return 4294967285;
  if (v7 >= 288)
  {
    v12 = (_DWORD *)(a2 + 24);
    v23 = *(_DWORD *)(a2 + 24);
    v13 = v7 - 32;
    *(_DWORD *)(a2 + 28) = v13;
    goto LABEL_23;
  }
  v11 = 288 - v7;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = 0;
  v12 = (_DWORD *)(a2 + 24);
  if ((288 - v7) < 0x20)
  {
LABEL_10:
    v13 = -v11;
    *(_DWORD *)(a2 + 28) = -v11;
    v14 = *(_QWORD *)(a2 + 8);
    if ((v6 & ~(v6 >> 63) & 0xFFFFFFFC) != 0 && v14 <= (unint64_t)v5)
    {
      v22 = *v5++;
      v23 = bswap32(v22) << v11;
      *(_DWORD *)(a2 + 24) = v23;
      *(_DWORD *)(a2 + 28) = v13;
      v13 = 32 - v11;
      *(_QWORD *)a2 = v5;
      goto LABEL_25;
    }
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (unsigned __int8 *)v5 + v16;
      v19 = v17 << 8;
      *v12 = v19;
      v20 = 255;
      if ((unint64_t)v5 + v16 < v4 && (unint64_t)v18 >= v14)
        v20 = *v18;
      v17 = v20 | v19;
      *v12 = v17;
      ++v16;
    }
    while ((_DWORD)v16 != 4);
    *(_QWORD *)a2 = ++v5;
    v23 = v17 << v11;
    *(_DWORD *)(a2 + 24) = v17 << v11;
    *(_DWORD *)(a2 + 28) = v13;
    if (v11)
    {
      v13 = 32 - v11;
      goto LABEL_25;
    }
LABEL_23:
    v21 = v23;
    goto LABEL_35;
  }
  v5 = (unsigned int *)((char *)v5 + ((v11 >> 3) & 0x1FFFFFFC));
  *(_QWORD *)a2 = v5;
  v11 &= 0x1Fu;
  if (v11)
  {
    v6 = v4 - (_QWORD)v5;
    goto LABEL_10;
  }
  v13 = 0;
  v23 = 0;
  *(_DWORD *)(a2 + 28) = -32;
  v14 = *(_QWORD *)(a2 + 8);
LABEL_25:
  if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
    && v14 <= (unint64_t)v5)
  {
    v24 = bswap32(*v5);
    *v12 = v24;
  }
  else
  {
    v25 = 0;
    v24 = v23;
    do
    {
      v26 = (unsigned __int8 *)v5 + v25;
      v27 = v24 << 8;
      *v12 = v27;
      v28 = 255;
      if ((unint64_t)v5 + v25 < v4 && (unint64_t)v26 >= v14)
        v28 = *v26;
      v24 = v28 | v27;
      *v12 = v24;
      ++v25;
    }
    while ((_DWORD)v25 != 4);
  }
  *(_DWORD *)(a2 + 28) = v13;
  *(_QWORD *)a2 = ++v5;
  v21 = (v24 >> v13) | v23;
  if (!v13)
  {
    *v12 = 0;
    if (v21 == 1447187017)
      goto LABEL_39;
    return 0xFFFFFFFFLL;
  }
  v23 = v24 << -(char)v13;
  *v12 = v23;
LABEL_35:
  if (v21 != 1447187017)
    return 0xFFFFFFFFLL;
  if (v13 > 31)
  {
    v29 = 32;
    goto LABEL_42;
  }
LABEL_39:
  v29 = 32 - v13;
  *v12 = 0;
  if ((32 - v13) >= 0x20)
  {
    *(_QWORD *)a2 = ++v5;
    v29 &= 0x1Fu;
    if (!v29)
      goto LABEL_58;
  }
  v23 = 0;
  v13 = 0;
LABEL_42:
  v30 = v13 - v29;
  *(_DWORD *)(a2 + 28) = v13 - v29;
  if (v13 - v29 >= 0)
  {
    v31 = v23 << v29;
    goto LABEL_55;
  }
  v32 = *(_QWORD *)(a2 + 8);
  if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
    && v32 <= (unint64_t)v5)
  {
    v23 = bswap32(*v5);
  }
  else
  {
    v33 = 0;
    do
    {
      v34 = (unsigned __int8 *)v5 + v33;
      v35 = v23 << 8;
      *v12 = v35;
      v36 = 255;
      if ((unint64_t)v5 + v33 < v4 && (unint64_t)v34 >= v32)
        v36 = *v34;
      v23 = v36 | v35;
      *v12 = v23;
      ++v33;
    }
    while ((_DWORD)v33 != 4);
  }
  *(_QWORD *)a2 = ++v5;
  if (v30 == -32)
  {
    *v12 = 0;
LABEL_58:
    v37 = 0;
    v31 = 0;
    v30 = 0;
    *(_DWORD *)(a2 + 28) = -16;
    goto LABEL_59;
  }
  v31 = v23 << -(char)v30;
  v30 += 32;
LABEL_55:
  v37 = HIWORD(v31);
  v38 = v30 - 16;
  *(_DWORD *)(a2 + 24) = v31;
  *(_DWORD *)(a2 + 28) = v30 - 16;
  if (v30 - 16 >= 0)
  {
    v39 = v31 << 16;
    goto LABEL_70;
  }
LABEL_59:
  v40 = *(_QWORD *)(a2 + 8);
  if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
    && v40 <= (unint64_t)v5)
  {
    v31 = bswap32(*v5);
    *v12 = v31;
  }
  else
  {
    v41 = 0;
    do
    {
      v42 = (unsigned __int8 *)v5 + v41;
      v43 = v31 << 8;
      *v12 = v43;
      v44 = 255;
      if ((unint64_t)v5 + v41 < v4 && (unint64_t)v42 >= v40)
        v44 = *v42;
      v31 = v44 | v43;
      *v12 = v31;
      ++v41;
    }
    while ((_DWORD)v41 != 4);
  }
  v38 = v30 + 16;
  v90 = v30 == -16;
  *(_QWORD *)a2 = ++v5;
  v37 |= v31 >> (v30 + 16);
  v45 = v31 << (16 - v30);
  if (v90)
    v39 = 0;
  else
    v39 = v45;
LABEL_70:
  *(_WORD *)(a1 + 2) = v37;
  *(_DWORD *)(a2 + 24) = v39;
  *(_DWORD *)(a2 + 28) = v38 - 32;
  if (v38 - 32 < 0)
  {
    v48 = *(_QWORD *)(a2 + 8);
    if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
      && v48 <= (unint64_t)v5)
    {
      v49 = bswap32(*v5);
    }
    else
    {
      v50 = 0;
      v49 = v39;
      do
      {
        v51 = (unsigned __int8 *)v5 + v50;
        v52 = v49 << 8;
        *v12 = v52;
        v53 = 255;
        if ((unint64_t)v5 + v50 < v4 && (unint64_t)v51 >= v48)
          v53 = *v51;
        v49 = v53 | v52;
        *v12 = v49;
        ++v50;
      }
      while ((_DWORD)v50 != 4);
    }
    *(_QWORD *)a2 = ++v5;
    v47 = (v49 >> v38) | v39;
    if (v38)
      v39 = v49 << -(char)v38;
    else
      v39 = 0;
    *(_DWORD *)(a2 + 24) = v39;
    v46 = v38 - 32;
  }
  else
  {
    v46 = v38 - 64;
    v38 -= 32;
    v47 = v39;
  }
  *(_DWORD *)(a1 + 4) = v47;
  *(_DWORD *)(a2 + 28) = v46;
  if (v46 < 0)
  {
    v55 = *(_QWORD *)(a2 + 8);
    if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
      && v55 <= (unint64_t)v5)
    {
      v56 = bswap32(*v5);
    }
    else
    {
      v57 = 0;
      v56 = v39;
      do
      {
        v58 = (unsigned __int8 *)v5 + v57;
        v59 = v56 << 8;
        *v12 = v59;
        v60 = 255;
        if ((unint64_t)v5 + v57 < v4 && (unint64_t)v58 >= v55)
          v60 = *v58;
        v56 = v60 | v59;
        *v12 = v56;
        ++v57;
      }
      while ((_DWORD)v57 != 4);
    }
    *(_QWORD *)a2 = ++v5;
    v54 = (v56 >> v38) | v39;
    if (v38)
      v39 = v56 << -(char)v38;
    else
      v39 = 0;
    *(_DWORD *)(a2 + 24) = v39;
    *(_DWORD *)(a2 + 28) = v38;
  }
  else
  {
    v38 = v46;
    v54 = v39;
  }
  result = 0;
  *(_DWORD *)(a1 + 8) = v54;
  *(_BYTE *)a1 = 0;
  if (!a3)
    return result;
  v61 = HIWORD(v39);
  v62 = v38 - 16;
  *(_DWORD *)(a2 + 28) = v38 - 16;
  if (v38 - 16 < 0)
  {
    v64 = *(_QWORD *)(a2 + 8);
    if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
      && v64 <= (unint64_t)v5)
    {
      v39 = bswap32(*v5);
    }
    else
    {
      v65 = 0;
      do
      {
        v66 = (unsigned __int8 *)v5 + v65;
        v67 = v39 << 8;
        *v12 = v67;
        v68 = 255;
        if ((unint64_t)v5 + v65 < v4 && (unint64_t)v66 >= v64)
          v68 = *v66;
        v39 = v68 | v67;
        *v12 = v39;
        ++v65;
      }
      while ((_DWORD)v65 != 4);
    }
    *(_QWORD *)a2 = ++v5;
    v62 = v38 + 16;
    v61 |= v39 >> (v38 + 16);
    if (v38 == -16)
    {
      v69 = 0;
      v63 = 0;
      *(_QWORD *)(a2 + 24) = 0xFFFFFFF000000000;
      goto LABEL_115;
    }
    v63 = v39 << (16 - v38);
  }
  else
  {
    v63 = v39 << 16;
  }
  v69 = HIWORD(v63);
  v70 = v62 - 16;
  *(_DWORD *)(a2 + 24) = v63;
  *(_DWORD *)(a2 + 28) = v62 - 16;
  if (v62 - 16 >= 0)
  {
    v71 = v63 << 16;
    goto LABEL_125;
  }
  v64 = *(_QWORD *)(a2 + 8);
LABEL_115:
  if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
    && v64 <= (unint64_t)v5)
  {
    v63 = bswap32(*v5);
  }
  else
  {
    v72 = 0;
    do
    {
      v73 = (unsigned __int8 *)v5 + v72;
      v74 = v63 << 8;
      *v12 = v74;
      v75 = 255;
      if ((unint64_t)v5 + v72 < v4 && (unint64_t)v73 >= v64)
        v75 = *v73;
      v63 = v75 | v74;
      *v12 = v63;
      ++v72;
    }
    while ((_DWORD)v72 != 4);
  }
  *(_QWORD *)a2 = ++v5;
  v70 = v62 + 16;
  v69 |= v63 >> (v62 + 16);
  if (v62 == -16)
  {
    v76 = 0;
    v71 = 0;
    *(_QWORD *)(a2 + 24) = 0xFFFFFFF000000000;
    *(_WORD *)(a1 + 12) = v69;
    goto LABEL_129;
  }
  v71 = v63 << (16 - v62);
LABEL_125:
  *(_WORD *)(a1 + 12) = v69;
  v76 = HIWORD(v71);
  v77 = v70 - 16;
  *(_DWORD *)(a2 + 24) = v71;
  *(_DWORD *)(a2 + 28) = v70 - 16;
  if (v70 - 16 >= 0)
  {
    v78 = v71 << 16;
    goto LABEL_139;
  }
  v64 = *(_QWORD *)(a2 + 8);
LABEL_129:
  if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
    && v64 <= (unint64_t)v5)
  {
    v71 = bswap32(*v5);
  }
  else
  {
    v79 = 0;
    do
    {
      v80 = (unsigned __int8 *)v5 + v79;
      v81 = v71 << 8;
      *v12 = v71 << 8;
      v82 = 255;
      if ((unint64_t)v5 + v79 < v4 && (unint64_t)v80 >= v64)
        v82 = *v80;
      v71 = v82 | v81;
      *v12 = v71;
      ++v79;
    }
    while ((_DWORD)v79 != 4);
  }
  *(_QWORD *)a2 = ++v5;
  v77 = v70 + 16;
  v76 |= v71 >> (v70 + 16);
  if (v70 == -16)
  {
    v83 = 0;
    v78 = 0;
    *(_QWORD *)(a2 + 24) = 0xFFFFFFF000000000;
    *(_WORD *)(a1 + 14) = v76;
LABEL_143:
    if ((((_DWORD)v4 - (_DWORD)v5) & ~((uint64_t)(v4 - (_QWORD)v5) >> 63) & 0xFFFFFFFC) != 0
      && v64 <= (unint64_t)v5)
    {
      v78 = bswap32(*v5);
    }
    else
    {
      v86 = 0;
      do
      {
        v87 = (unsigned __int8 *)v5 + v86;
        v88 = v78 << 8;
        *v12 = v88;
        v89 = 255;
        if ((unint64_t)v5 + v86 < v4 && (unint64_t)v87 >= v64)
          v89 = *v87;
        v78 = v89 | v88;
        *v12 = v78;
        ++v86;
      }
      while ((_DWORD)v86 != 4);
    }
    v91 = v77 + 16;
    v90 = v77 == -16;
    *(_DWORD *)(a2 + 28) = v77 + 16;
    *(_QWORD *)a2 = ++v5;
    v83 |= v78 >> (v77 + 16);
    if (v77 == -16)
      v85 = 0;
    else
      v85 = v78 << (16 - v77);
    if (v90)
      v84 = 0;
    else
      v84 = v91;
    goto LABEL_157;
  }
  v78 = v71 << (16 - v70);
LABEL_139:
  *(_WORD *)(a1 + 14) = v76;
  v83 = HIWORD(v78);
  v84 = v77 - 16;
  *(_DWORD *)(a2 + 24) = v78;
  *(_DWORD *)(a2 + 28) = v77 - 16;
  if (v77 - 16 < 0)
  {
    v64 = *(_QWORD *)(a2 + 8);
    goto LABEL_143;
  }
  v85 = v78 << 16;
LABEL_157:
  *v12 = v85;
  *(_WORD *)(a1 + 16) = v83;
  v92 = (unsigned __int16)v61;
  if (v84 + 8 * ((int)v4 - (int)v5) < 8 * (unsigned __int16)v61 * (unsigned __int16)v76)
    return 4294967285;
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 24), (unsigned __int16)v61);
  if ((_DWORD)v92)
  {
    v93 = 0;
    v94 = 8 * *(unsigned __int16 *)(a1 + 14);
    v96 = *(_QWORD *)(a2 + 8);
    v95 = *(_QWORD *)(a2 + 16);
    v97 = *(unsigned int **)a2;
    v98 = *(_QWORD *)(a1 + 24);
    do
    {
      if ((v94 - 33) >= 0xFFFFFFE0)
      {
        v100 = *(_DWORD *)(a2 + 24);
        v99 = v100 >> (32 - v94);
        v101 = *(_DWORD *)(a2 + 28) - v94;
        *(_DWORD *)(a2 + 28) = v101;
        if (v101 < 0)
        {
          if ((((_DWORD)v95 - (_DWORD)v97) & ~((uint64_t)(v95 - (_QWORD)v97) >> 63) & 0xFFFFFFFC) == 0
            || v96 > (unint64_t)v97)
          {
            v104 = 0;
            do
            {
              v105 = (unsigned __int8 *)v97 + v104;
              v106 = v100 << 8;
              *v12 = v106;
              v107 = 255;
              if ((unint64_t)v97 + v104 < v95 && (unint64_t)v105 >= v96)
                v107 = *v105;
              v100 = v107 | v106;
              *v12 = v100;
              ++v104;
            }
            while ((_DWORD)v104 != 4);
          }
          else
          {
            v100 = bswap32(*v97);
          }
          *(_DWORD *)(a2 + 28) = v101 + 32;
          *(_QWORD *)a2 = ++v97;
          v99 |= v100 >> v101;
          if (v101 == -32)
            v102 = 0;
          else
            v102 = v100 << -(char)v101;
        }
        else
        {
          v102 = v100 << v94;
        }
        *v12 = v102;
      }
      else
      {
        v99 = 0;
      }
      *(_DWORD *)(v98 + 4 * v93++) = v99;
    }
    while (v93 != v92);
  }
  result = 0;
  *(_BYTE *)a1 = 1;
  return result;
}

uint64_t CA::ADMTime::ADMTime(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

{
  *(_DWORD *)this = 0;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

double CA::ADMTime::ADMTime(CA::ADMTime *this, double a2)
{
  unsigned int v2;
  double result;

  v2 = vcvtmd_u64_f64(a2);
  *(_DWORD *)this = v2;
  *((_BYTE *)this + 16) = 0;
  result = a2 - (double)v2;
  *((double *)this + 1) = result;
  return result;
}

{
  unsigned int v2;
  double result;

  v2 = vcvtmd_u64_f64(a2);
  *(_DWORD *)this = v2;
  *((_BYTE *)this + 16) = 0;
  result = a2 - (double)v2;
  *((double *)this + 1) = result;
  return result;
}

double CA::ADMTime::operator double(uint64_t a1, double a2, double a3)
{
  double v3;

  if (*(_BYTE *)(a1 + 16))
  {
    LODWORD(a2) = *(_DWORD *)(a1 + 8);
    LODWORD(a3) = *(_DWORD *)(a1 + 12);
    v3 = (double)*(unint64_t *)&a2 / (double)*(unint64_t *)&a3;
  }
  else
  {
    v3 = *(double *)(a1 + 8);
  }
  return v3 + (double)*(unsigned int *)a1;
}

uint64_t CA::ADMTime::parse@<X0>(CA::ADMTime *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE *v9;
  unsigned int v10;
  double v11;
  unsigned int v12;
  _BYTE v13[12];
  uint64_t v14;

  if (strchr((char *)this, 83))
  {
    *(_QWORD *)v13 = 0;
    v14 = 0;
    v12 = 0;
    result = sscanf((const char *)this, "%u:%u:%u.%uS%u", &v13[4], (char *)&v14 + 4, &v14, v13, &v12);
    if ((_DWORD)result == 5 && (v6 = v12) != 0 && (v7 = *(unsigned int *)v13, v12 > *(_DWORD *)v13))
    {
      *(_DWORD *)a2 = 3600 * *(_DWORD *)&v13[4] + 60 * HIDWORD(v14) + v14;
      *(_QWORD *)(a2 + 8) = v7 | (v6 << 32);
      v8 = 1;
      *(_BYTE *)(a2 + 16) = 1;
    }
    else
    {
      v8 = 0;
      *(_BYTE *)a2 = 0;
    }
  }
  else
  {
    *(_QWORD *)&v13[4] = 0;
    v14 = 0;
    result = sscanf((const char *)this, "%u:%u:%lf", (char *)&v14 + 4, &v14, &v13[4]);
    v8 = 0;
    v9 = (_BYTE *)a2;
    if ((_DWORD)result == 3)
    {
      v10 = vcvtmd_u64_f64(*(double *)&v13[4]);
      v11 = *(double *)&v13[4] - (double)v10;
      *(_DWORD *)a2 = v10 + 3600 * HIDWORD(v14) + 60 * v14;
      *(double *)(a2 + 8) = v11;
      v9 = (_BYTE *)(a2 + 16);
      v8 = 1;
    }
    *v9 = 0;
  }
  *(_BYTE *)(a2 + 24) = v8;
  return result;
}

void AC3PacketParser::GetMagicCookie(AC3PacketParser *this, void *__dst, unsigned int *a3)
{
  const void *v6;
  unsigned __int8 *v7;
  int v8;
  std::bad_alloc *exception;
  std::bad_alloc *v10;

  if (*a3 >= 0xB)
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (v6)
      goto LABEL_3;
    *((_DWORD *)this + 20) = 11;
    v7 = (unsigned __int8 *)malloc_type_malloc(0xBuLL, 0x7C51E058uLL);
    if (!v7)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v10 = std::bad_alloc::bad_alloc(exception);
    }
    *((_QWORD *)this + 9) = v7;
    v8 = ConvertAC3HeaderToAC3MP4Cookie(*((unsigned __int8 **)this + 1), *((_DWORD *)this + 4), v7, (unsigned int *)this + 20);
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v8)
    {
LABEL_3:
      *a3 = *((_DWORD *)this + 20);
      memcpy(__dst, v6, *((unsigned int *)this + 20));
    }
    else
    {
      if (v6)
        free(*((void **)this + 9));
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
    }
  }
}

void MP4AudioStream::~MP4AudioStream(MP4AudioStream *this)
{
  MP4AudioStream::~MP4AudioStream(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const void *v9;
  const void *v10;
  void *v11;

  *(_QWORD *)this = &off_1E2904728;
  v2 = *((_QWORD *)this + 60);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 61);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 59);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (void *)*((_QWORD *)this + 47);
  if (v5)
    free(v5);
  v6 = (void *)*((_QWORD *)this + 48);
  if (v6)
    free(v6);
  v7 = (void *)*((_QWORD *)this + 46);
  if (v7)
    free(v7);
  v8 = (void *)*((_QWORD *)this + 49);
  if (v8)
    free(v8);
  v9 = (const void *)*((_QWORD *)this + 102);
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 104);
  if (v10)
    CFRelease(v10);
  v11 = (void *)*((_QWORD *)this + 105);
  if (v11)
  {
    free(v11);
    *((_QWORD *)this + 105) = 0;
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

uint64_t MP4AudioStream::GetPropertyInfo(MP4AudioStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  if (a2 != 1819243876 && a2 != 1935893603)
    return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
  if (a3)
    *a3 = 8;
  if (a4)
    *a4 = 0;
  return 0;
}

uint64_t MP4AudioStream::GetProperty(MP4AudioStream *this, int a2, unsigned int *a3, _QWORD *__dst)
{
  const void *v5;
  const void *v6;
  const void *v8;
  __int16 v9;

  if (a2 == 1819243876)
  {
    if (*a3 == 8)
    {
      v6 = (const void *)*((_QWORD *)this + 104);
      if (v6)
      {
        v8 = v6;
        v9 = 256;
        CFRetain(v6);
        goto LABEL_9;
      }
      return 1836020325;
    }
    return 561211770;
  }
  if (a2 != 1935893603)
    return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
  if (*a3 != 8)
    return 561211770;
  v5 = (const void *)*((_QWORD *)this + 102);
  if (v5)
  {
    v8 = v5;
    v9 = 0;
    CFRetain(v5);
LABEL_9:
    *__dst = v8;
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v8);
    return 0;
  }
  return 1836020325;
}

void sub_18F00C498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

double MP4AudioStream::Seek(MP4Parser_PacketProvider **this, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  double result;
  int PacketOffset;
  uint64_t v10;
  MP4Parser_PacketProvider *v11;
  uint64_t v12;

  if ((*(unsigned int (**)(MP4Parser_PacketProvider *))(*(_QWORD *)this[59] + 32))(this[59]) >= a2)
  {
    v12 = 0;
    PacketOffset = MP4Parser_PacketProvider::GetPacketOffset(this[59], a2, (unint64_t *)&v12);
    v10 = v12;
    *a3 = v12 - (_QWORD)this[13];
    if (!PacketOffset)
    {
      *a4 = 0;
      *((_DWORD *)this + 59) = 0;
      *(_QWORD *)&result = 120;
      *((_OWORD *)this + 15) = xmmword_18F116F70;
      this[23] = (MP4Parser_PacketProvider *)a2;
      v11 = this[1];
      *((_QWORD *)v11 + 11) = v10;
      *((_QWORD *)v11 + 12) = v10;
      *((_DWORD *)v11 + 20) = 0;
      *((_QWORD *)v11 + 9) = 0;
    }
  }
  return result;
}

uint64_t MP4AudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  int v5;
  int v6;
  unsigned __int8 *j;
  int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t LoudnessInfo;
  unsigned int v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  int mSampleRate_low;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD, _QWORD, uint64_t, AudioFormatInfo *);
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  _QWORD *v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int TrackID;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  uint64_t *v70;
  unsigned int i;
  __n128 **v72;
  uint64_t v73;
  unsigned int v74;
  MP4BoxParser_MovieFragment *v75;
  unsigned int v76;
  __n128 *BoxInfo;
  __n128 *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  size_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  void (*v87)(_QWORD, _QWORD, uint64_t, AudioFormatInfo *);
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  __CFDictionary *v91;
  uint64_t v92;
  __CFDictionary *v93;
  int v94;
  __CFDictionary *v95;
  int v96;
  __CFDictionary *v97;
  __int128 v98;
  const void *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  void (*v103)(_QWORD, _QWORD, uint64_t, __CFDictionary **);
  void (*v104)(_QWORD, _QWORD, uint64_t, __CFDictionary **);
  void (*v105)(_QWORD, _QWORD, uint64_t, __CFDictionary **);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  int v111;
  int v112;
  int v113;
  std::bad_alloc *exception;
  std::bad_alloc *v115;
  std::bad_alloc *v116;
  std::bad_alloc *v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  size_t v127;
  uint64_t v128;
  int v129;
  _QWORD *v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  _QWORD *v138;
  int v139;
  int v140;
  int v141;
  MP4Parser_PacketProvider *v142;
  MP4BoxParser_Track *v143;
  int TrackType;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  void (*v149)(_QWORD, _QWORD, uint64_t, AudioFormatInfo *);
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int v158;
  int v159;
  void (*v161)(_QWORD, _QWORD, uint64_t, AudioFormatInfo *);
  size_t v162;
  uint64_t v163;
  void *v164;
  unsigned int v165;
  uint64_t v166;
  void (*v167)(_QWORD, _QWORD, uint64_t, AudioFormatInfo *);
  __int128 v168;
  const void *v169;
  uint64_t v170;
  void (*v171)(_QWORD, _QWORD, uint64_t, _BYTE *);
  MP4BoxParser_Track *v172;
  unsigned int v173;
  int v174;
  const __CFString *v175;
  const __CFDictionary *v176;
  Float64 mSampleRate;
  unsigned __int8 *v178;
  int v179;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _OWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  Float64 v194;
  uint64_t v195;
  void (*v196)(_QWORD, _QWORD, uint64_t, __CFDictionary **);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int StoreKind;
  const __CFString *v201;
  int v202;
  BOOL v203;
  uint64_t v204;
  unsigned int v205;
  int v206;
  void (*v208)(_QWORD, _QWORD, uint64_t, AudioFormatInfo *);
  UInt32 v209;
  int v210;
  __CFDictionary *v211;
  UInt32 v212;
  uint64_t v213;
  void (*v214)(_QWORD, _QWORD, uint64_t, _BYTE *);
  std::bad_alloc *v215;
  std::bad_alloc *v216;
  std::bad_alloc *v217;
  std::bad_alloc *v218;
  std::bad_alloc *v219;
  std::bad_alloc *v220;
  uint64_t v221;
  uint64_t v222;
  __int128 outPropertyData;
  UInt32 ioPropertyDataSize;
  AudioFormatInfo buf;
  uint64_t v226;
  unint64_t *v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  char v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  char v239;
  __int128 v240;
  __int128 v241;
  int v242;
  uint64_t v243;
  __int128 v244;
  _BYTE v245[1192];
  uint64_t v246;
  uint64_t v247;
  _BYTE v248[18];
  __CFDictionary *v249;
  MP4BoxParser_MovieFragment *v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  int v254;
  char v255;
  uint64_t v256;
  uint64_t v257;

  v257 = *MEMORY[0x1E0C80C00];
  v4 = (unint64_t *)(a1 + 516);
  v5 = *(_DWORD *)(a1 + 236);
  if (v5 <= 196)
  {
    if (v5 <= 108)
    {
      if (v5 == -1)
        return 0;
      if (v5)
        goto LABEL_39;
      if (*(_BYTE *)(a1 + 332))
      {
        v12 = *(_QWORD *)(a1 + 344);
        *(_QWORD *)(a1 + 296) = v12;
LABEL_33:
        *(_QWORD *)(a1 + 344) = v12;
        goto LABEL_123;
      }
      v28 = 8;
      *(_DWORD *)(a1 + 256) = 8;
      v29 = (unsigned __int8 *)(a1 + 551);
      *(_QWORD *)(a1 + 264) = a1 + 551;
    }
    else
    {
      if (v5 != 109)
      {
        if (v5 != 126)
        {
          if (v5 == 155)
          {
            v8 = *(_DWORD *)(a1 + 256);
            v9 = *(unsigned __int8 **)(a1 + 264);
            goto LABEL_50;
          }
          goto LABEL_39;
        }
        v14 = *(_DWORD *)(a1 + 256);
        v15 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_22;
      }
      v28 = *(_DWORD *)(a1 + 256);
      v29 = *(unsigned __int8 **)(a1 + 264);
    }
    LODWORD(buf.mASBD.mSampleRate) = v28;
    StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&buf, v29);
    mSampleRate_low = LODWORD(buf.mASBD.mSampleRate);
    v36 = *(_DWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 264) += LODWORD(buf.mASBD.mSampleRate);
    v37 = v36 - mSampleRate_low;
    *(_DWORD *)(a1 + 256) = v37;
    if (v37)
    {
      LoudnessInfo = 0;
      v34 = 109;
      goto LABEL_312;
    }
    *(_QWORD *)(a1 + 296) += 8;
    v38 = *(unint64_t *)((char *)v4 + 35);
    *v4 = v38;
    if (HIDWORD(v38) != 1887007846)
      goto LABEL_310;
    v39 = *(_QWORD *)(a1 + 8);
    LODWORD(buf.mASBD.mSampleRate) = 1;
    if (!*(_BYTE *)(v39 + 104))
    {
      *(_BYTE *)(v39 + 104) = 1;
      v40 = *(void (**)(_QWORD, _QWORD, uint64_t, AudioFormatInfo *))(v39 + 24);
      if (v40)
      {
        v40(*(_QWORD *)(v39 + 40), *(unsigned int *)(v39 + 8), 1717988724, &buf);
        LODWORD(v38) = *(_DWORD *)v4;
      }
    }
    v41 = bswap32(v38);
    *(_DWORD *)(a1 + 524) = v41;
    if (v41 - 257 <= 0xFFFFFF06)
      goto LABEL_310;
    v14 = v41 - 8;
    *(_DWORD *)(a1 + 256) = v14;
    v15 = (unsigned __int8 *)(a1 + 559);
    *(_QWORD *)(a1 + 264) = a1 + 559;
LABEL_22:
    LODWORD(buf.mASBD.mSampleRate) = v14;
    StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&buf, v15);
    v16 = LODWORD(buf.mASBD.mSampleRate);
    v17 = *(_DWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 264) += LODWORD(buf.mASBD.mSampleRate);
    v18 = v17 - v16;
    *(_DWORD *)(a1 + 256) = v18;
    if (v18)
    {
      LoudnessInfo = 0;
      v34 = 126;
      goto LABEL_312;
    }
    *(unint64_t *)((char *)v4 + 35) = *v4;
    v19 = *(unsigned int *)(a1 + 524);
    *(_QWORD *)(a1 + 296) = v19 + *(_QWORD *)(a1 + 296) - 8;
    if ((_DWORD)v19)
    {
      v20 = operator new();
      v21 = *(unsigned int *)v4;
      *(_BYTE *)(v20 + 8) = 0;
      *(_QWORD *)v20 = &off_1E2907000;
      *(_QWORD *)(v20 + 16) = v21;
      *(_QWORD *)(v20 + 24) = (char *)v4 + 35;
      *(_QWORD *)(v20 + 32) = 0;
      *(_QWORD *)(v20 + 40) = 0;
      *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2902718;
      Buffer_DataSource::Slice((Buffer_DataSource *)v20, 0, &buf.mASBD.mFormatID);
      LOBYTE(buf.mASBD.mBytesPerPacket) = 0;
      buf.mASBD.mFramesPerPacket = 0;
      *(_QWORD *)&buf.mASBD.mBytesPerFrame = 0;
      LOBYTE(buf.mASBD.mBitsPerChannel) = 0;
      *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2908630;
      buf.mASBD.mReserved = 8;
      v226 = 0;
      LODWORD(v227) = 0;
      v228 = 0;
      if (MP4BoxParser_FileType::Init((MP4BoxParser_FileType *)&buf))
        v22 = 0;
      else
        v22 = v226;
      *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2908630;
      if (v228)
        free(v228);
      v23 = *(_QWORD *)&buf.mASBD.mFormatID;
      *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2902718;
      *(_QWORD *)&buf.mASBD.mFormatID = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      *(_DWORD *)(a1 + 808) = v22;
      if (IsValidDataForMP4FileType((DataSource *)v20, *(_DWORD *)(a1 + 16)))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        *(_BYTE *)(a1 + 332) = 1;
        v12 = *(_QWORD *)(a1 + 296);
        goto LABEL_33;
      }
    }
LABEL_310:
    LoudnessInfo = 1685348671;
    *(_BYTE *)(a1 + 177) = 1;
    goto LABEL_311;
  }
  if (v5 > 248)
  {
    if (v5 == 249)
    {
      v32 = *(_DWORD *)(a1 + 256);
      v33 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_219;
    }
    if (v5 == 363)
    {
      v26 = *(_DWORD *)(a1 + 256);
      v27 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_269;
    }
    if (v5 != 628)
    {
LABEL_39:
      LoudnessInfo = 0;
      goto LABEL_311;
    }
    v10 = *(_DWORD *)(a1 + 256);
    v11 = *(unsigned __int8 **)(a1 + 264);
LABEL_77:
    LODWORD(buf.mASBD.mSampleRate) = v10;
    StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&buf, v11);
    v58 = LODWORD(buf.mASBD.mSampleRate);
    v59 = *(_DWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 264) += LODWORD(buf.mASBD.mSampleRate);
    v60 = v59 - v58;
    *(_DWORD *)(a1 + 256) = v60;
    v221 = a2;
    if (v60)
    {
      LoudnessInfo = 0;
      v34 = 628;
      goto LABEL_312;
    }
    v61 = *(unsigned int *)(a1 + 524);
    *(_QWORD *)(a1 + 296) = v61 + *(_QWORD *)(a1 + 296) - 8;
    v62 = *(_QWORD *)(a1 + 384);
    v222 = *(_QWORD *)(a1 + 336);
    ioPropertyDataSize = 0;
    v63 = operator new();
    *(_BYTE *)(v63 + 8) = 0;
    *(_QWORD *)v63 = &off_1E2907000;
    *(_QWORD *)(v63 + 16) = v61;
    *(_QWORD *)(v63 + 24) = v62;
    *(_QWORD *)(v63 + 32) = 0;
    *(_QWORD *)(v63 + 40) = 0;
    v249 = (__CFDictionary *)&off_1E2902718;
    Buffer_DataSource::Slice((Buffer_DataSource *)v63, 0, &v250);
    LOBYTE(v251) = 0;
    HIDWORD(v251) = 0;
    v252 = 0;
    v253 = 0;
    v254 = 8;
    v249 = (__CFDictionary *)&off_1E2909198;
    v255 = 1;
    v256 = 0;
    v64 = 0;
    if (MP4BoxParser_MovieFragment::Init((__n128 ***)&v249))
      goto LABEL_115;
    if (*(_DWORD *)(a1 + 440)
      && MP4BoxParser_MovieFragment::GetSequence(v250, v256) < *(_DWORD *)(a1 + 440))
    {
      v64 = -1;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mASBD.mSampleRate) = 136315394;
        *(_QWORD *)((char *)&buf.mASBD.mSampleRate + 4) = "MP4AudioStream.cpp";
        LOWORD(buf.mASBD.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&buf.mASBD.mFormatFlags + 2) = 902;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  a movie fragment was pushed out of sequence", (uint8_t *)&buf, 0x12u);
      }
      goto LABEL_115;
    }
    *(_DWORD *)(a1 + 440) = MP4BoxParser_MovieFragment::GetSequence(v250, v256);
    *(_QWORD *)&outPropertyData = -1;
    *((_QWORD *)&outPropertyData + 1) = -1;
    TrackID = MP4BoxParser_Track::GetTrackID(*(MP4BoxParser_Track **)(a1 + 472));
    v66 = *(_QWORD *)(a1 + 456);
    if (v66)
    {
      v67 = a1 + 456;
      do
      {
        v68 = *(_DWORD *)(v66 + 28);
        v69 = v68 >= TrackID;
        if (v68 >= TrackID)
          v70 = (uint64_t *)v66;
        else
          v70 = (uint64_t *)(v66 + 8);
        if (v69)
          v67 = v66;
        v66 = *v70;
      }
      while (*v70);
      if (v67 != a1 + 456 && TrackID >= *(_DWORD *)(v67 + 28))
        outPropertyData = *(_OWORD *)(v67 + 32);
    }
    for (i = 0; ; ++i)
    {
      v72 = (__n128 **)v256;
      if (!v256 || (v73 = *(_QWORD *)(v256 + 8), v73 == v256))
      {
        v74 = 0;
      }
      else
      {
        v74 = 0;
        do
        {
          if (*(_DWORD *)(v73 + 16) == 1953653094)
            ++v74;
          v73 = *(_QWORD *)(v73 + 8);
        }
        while (v73 != v256);
      }
      if (i >= v74)
      {
        v64 = 0;
        a2 = v221;
        goto LABEL_115;
      }
      v75 = v250;
      v76 = (*((uint64_t (**)(__CFDictionary **))v249 + 3))(&v249);
      BoxInfo = FindBoxInfo((uint64_t)v75, v76, v252, 1953653094, i, v72);
      v78 = BoxInfo;
      if (BoxInfo)
      {
        v79 = *(_QWORD *)(a1 + 472);
        v80 = BoxInfo[1].n128_u64[0];
        *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2902718;
        v81 = operator new();
        *(_BYTE *)(v81 + 8) = 0;
        *(_QWORD *)v81 = &off_1E2907000;
        *(_QWORD *)(v81 + 16) = (v61 - v80);
        *(_QWORD *)(v81 + 24) = v62 + v80;
        *(_QWORD *)(v81 + 32) = 0;
        *(_QWORD *)(v81 + 40) = 0;
        LOBYTE(buf.mASBD.mBytesPerPacket) = 0;
        buf.mASBD.mFramesPerPacket = 0;
        *(_QWORD *)&buf.mASBD.mBytesPerFrame = 0;
        LOBYTE(buf.mASBD.mBitsPerChannel) = 0;
        buf.mASBD.mReserved = 8;
        *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E29091F8;
        *(_QWORD *)&buf.mASBD.mFormatID = v81;
        v226 = v79;
        LOBYTE(v227) = 1;
        v231 = 0;
        v228 = 0;
        v229 = 0;
        LODWORD(v230) = 0;
        v235 = 0;
        v233 = 0u;
        v234 = 0u;
        v232 = 0u;
        v236 = 0u;
        v237 = 0u;
        v238 = 0u;
        v239 = 0;
        v240 = 0u;
        v241 = 0u;
        v242 = 0;
        v243 = v222;
        v244 = outPropertyData;
        if (!MP4BoxParser_TrackFragment::Init((__n128 ***)&buf, *(_DWORD *)(a1 + 420)))
        {
          v82 = MP4BoxParser_TrackFragment::GetTrackID(*(MP4BoxParser_TrackFragment **)&buf.mASBD.mFormatID, (uint64_t)v228);
          if (v82 == MP4BoxParser_Track::GetTrackID(*(MP4BoxParser_Track **)(a1 + 472)))
          {
            v83 = v78->n128_u64[1];
            v84 = malloc_type_malloc(v83, 0x2C8E6D5CuLL);
            v85 = v84;
            if (v83 && !v84)
            {
              exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v115 = std::bad_alloc::bad_alloc(exception);
            }
            bzero(v84, v83);
            if (v85)
            {
              v64 = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t, _QWORD, void *, UInt32 *))(*(_QWORD *)v63 + 48))(v63, 0, v78[1].n128_u64[0], v78->n128_u32[2], v85, &ioPropertyDataSize);
              if (v64)
              {
                a2 = v221;
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v248 = 136315394;
                  *(_QWORD *)&v248[4] = "MP4AudioStream.cpp";
                  *(_WORD *)&v248[12] = 1024;
                  *(_DWORD *)&v248[14] = 928;
                  _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  failed to read track fragment box", v248, 0x12u);
                }
                MP4BoxParser_TrackFragment::~MP4BoxParser_TrackFragment((MP4BoxParser_TrackFragment *)&buf);
              }
              else
              {
                MP4Parser_PacketProvider::AddTrackFragment(*(_QWORD *)(a1 + 472), (uint64_t)v85, v78->n128_u32[2], v222, &outPropertyData);
                free(v85);
                MP4BoxParser_TrackFragment::~MP4BoxParser_TrackFragment((MP4BoxParser_TrackFragment *)&buf);
                v64 = 0;
                a2 = v221;
              }
LABEL_115:
              (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
              MP4BoxParser_MovieFragment::~MP4BoxParser_MovieFragment((MP4BoxParser_MovieFragment *)&v249);
              if (!v64)
                *(_BYTE *)(a1 + 549) = 1;
              free(*(void **)(a1 + 384));
              *(_QWORD *)(a1 + 384) = 0;
LABEL_118:
              while (2)
              {
                if (*(_QWORD *)(a1 + 832))
                {
                  v86 = *(_QWORD *)(a1 + 8);
                  LODWORD(buf.mASBD.mSampleRate) = 0;
                  if (!*(_BYTE *)(v86 + 110))
                  {
                    *(_BYTE *)(v86 + 110) = 1;
                    v87 = *(void (**)(_QWORD, _QWORD, uint64_t, AudioFormatInfo *))(v86 + 24);
                    if (v87)
                      v87(*(_QWORD *)(v86 + 40), *(unsigned int *)(v86 + 8), 1819243876, &buf);
                  }
                }
                v12 = *(_QWORD *)(a1 + 296);
LABEL_123:
                *(_QWORD *)(a1 + 336) = v12;
                v8 = 8;
                *(_DWORD *)(a1 + 256) = 8;
                v9 = (unsigned __int8 *)(a1 + 516);
                *(_QWORD *)(a1 + 264) = a1 + 516;
LABEL_50:
                LODWORD(buf.mASBD.mSampleRate) = v8;
                StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&buf, v9);
                v42 = LODWORD(buf.mASBD.mSampleRate);
                v43 = *(_DWORD *)(a1 + 256);
                *(_QWORD *)(a1 + 264) += LODWORD(buf.mASBD.mSampleRate);
                v44 = v43 - v42;
                *(_DWORD *)(a1 + 256) = v44;
                if (v44)
                {
                  LoudnessInfo = 0;
                  v34 = 155;
                  goto LABEL_312;
                }
                v45 = *(_QWORD *)(a1 + 296) + 8;
                *(_QWORD *)(a1 + 296) = v45;
                v46 = bswap32(*(_DWORD *)(a1 + 516));
                *(_DWORD *)(a1 + 524) = v46;
                if (v46 <= 7)
                  goto LABEL_310;
                v47 = *(_QWORD *)(a1 + 344);
                if ((uint64_t)(v46 ^ 0x7FFFFFFFFFFFFFFFLL) < v47)
                  goto LABEL_310;
                v48 = v47 + v46;
                *(_QWORD *)(a1 + 344) = v48;
                v49 = *(_DWORD *)(a1 + 520);
                if (v49 != 1718579053)
                {
                  if (v49 != 1952539757)
                  {
                    if (v49 == 1987014509)
                    {
                      v50 = *(_DWORD *)(a1 + 16);
                      if (v50 == 1832149606 || v50 == 1832149350)
                      {
                        *(_BYTE *)(a1 + 540) = 1;
                        *(_BYTE *)(a1 + 546) = 1;
                        *(_BYTE *)(a1 + 548) = 1;
                      }
                      else
                      {
                        *(_WORD *)(a1 + 541) = 257;
                      }
                      *(_BYTE *)(a1 + 545) = 1;
                      *(_QWORD *)(a1 + 352) = v45;
                      goto LABEL_297;
                    }
LABEL_83:
                    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) = v48;
                    *(_QWORD *)(a1 + 296) = v48;
                    continue;
                  }
                  *(_BYTE *)(a1 + 546) = 0;
                  *(_BYTE *)(a1 + 548) = 0;
                  if (!*(_QWORD *)(a1 + 376) || !*(_DWORD *)(a1 + 512))
                    goto LABEL_131;
                  if (*(_BYTE *)(a1 + 550))
                  {
                    if (*(_BYTE *)(a1 + 549))
                    {
                      *(_WORD *)(a1 + 549) = 0;
                      goto LABEL_67;
                    }
LABEL_131:
                    LoudnessInfo = 1869640813;
LABEL_311:
                    v34 = -1;
                    goto LABEL_312;
                  }
LABEL_67:
                  v52 = *(_QWORD *)(a1 + 472);
                  if (!v52)
                    continue;
                  v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 32))(v52);
                  if (!v53)
                    continue;
                  v54 = *(_QWORD *)(a1 + 8);
                  if (*(_DWORD *)(v54 + 112))
                    goto LABEL_175;
                  v55 = v53;
                  if (*(_BYTE *)(a1 + 541))
                  {
                    v56 = *(unsigned __int8 *)(a1 + 543);
                    if (!MP4BoxParser_Track::GetPacketTableInfo(*(MP4BoxParser_Track **)(a1 + 472), (AudioFilePacketTableInfo *)v248, v53, *(_DWORD *)(a1 + 512), v56))
                    {
                      if (!v56)
                        goto LABEL_135;
LABEL_166:
                      buf.mASBD.mSampleRate = 0.0;
                      MP4Parser_PacketProvider::GetPacketOffset(*(MP4Parser_PacketProvider **)(a1 + 472), 0, (unint64_t *)&buf);
                      *(Float64 *)(a1 + 104) = buf.mASBD.mSampleRate;
                      v54 = *(_QWORD *)(a1 + 8);
                      LODWORD(v249) = 1;
                      v103 = *(void (**)(_QWORD, _QWORD, uint64_t, __CFDictionary **))(v54 + 24);
                      if (v103)
                      {
                        v103(*(_QWORD *)(v54 + 40), *(unsigned int *)(v54 + 8), 1685022310, &v249);
                        v54 = *(_QWORD *)(a1 + 8);
                      }
                      if (*(_QWORD *)(a1 + 160) != -1)
                      {
                        LODWORD(v249) = 1;
                        if (!*(_BYTE *)(v54 + 106))
                        {
                          *(_BYTE *)(v54 + 106) = 1;
                          v104 = *(void (**)(_QWORD, _QWORD, uint64_t, __CFDictionary **))(v54 + 24);
                          if (v104)
                          {
                            v104(*(_QWORD *)(v54 + 40), *(unsigned int *)(v54 + 8), 1886283375, &v249);
                            v54 = *(_QWORD *)(a1 + 8);
                          }
                        }
                      }
                      LODWORD(v249) = 1;
                      if (!*(_DWORD *)(v54 + 112))
                      {
                        *(_DWORD *)(v54 + 112) = 1;
                        v105 = *(void (**)(_QWORD, _QWORD, uint64_t, __CFDictionary **))(v54 + 24);
                        if (v105)
                        {
                          v105(*(_QWORD *)(v54 + 40), *(unsigned int *)(v54 + 8), 1919247481, &v249);
                          v54 = *(_QWORD *)(a1 + 8);
                        }
                      }
LABEL_175:
                      v106 = 0;
                      *(_QWORD *)a2 = a1;
                      *(_OWORD *)(a2 + 8) = xmmword_18F116F70;
                      v107 = *(_QWORD *)(v54 + 88);
                      v108 = *(_QWORD *)(v54 + 96);
                      v109 = v107 + *(unsigned int *)(v54 + 80);
                      v110 = v108 < v107 || v109 <= v108;
                      v111 = v110;
                      v112 = v109 - v108;
                      if (!v110 && v112)
                        v106 = *(_QWORD *)(v54 + 72) + (v108 - v107);
                      LoudnessInfo = 0;
                      *(_QWORD *)(a2 + 32) = v106;
                      if (v111)
                        v113 = 0;
                      else
                        v113 = v112;
                      *(_DWORD *)(a2 + 24) = v113;
                      return LoudnessInfo;
                    }
LABEL_134:
                    *(_OWORD *)(a1 + 160) = *(_OWORD *)v248;
                    goto LABEL_166;
                  }
                  if (MP4BoxParser_Track::GetPacketTableInfo(*(MP4BoxParser_Track **)(a1 + 472), (AudioFilePacketTableInfo *)v248, v53, *(_DWORD *)(a1 + 512), 0))
                  {
                    goto LABEL_134;
                  }
LABEL_135:
                  if (*(_BYTE *)(a1 + 547) || *(_QWORD *)(a1 + 160) == -1)
                    goto LABEL_166;
                  v88 = *(_DWORD *)(a1 + 408);
                  if (v88 == 1633889587)
                  {
                    v89 = 0;
                    v90 = *(_DWORD *)(a1 + 420);
                    goto LABEL_161;
                  }
                  if (v88 >> 8 == 6381923)
                  {
                    v90 = *(_DWORD *)(a1 + 420);
                    LODWORD(outPropertyData) = 0;
                    if (*(_DWORD *)(a1 + 128))
                    {
                      DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)v245);
                      v91 = *(__CFDictionary **)(a1 + 120);
                      v92 = *(unsigned int *)(a1 + 128);
                      v93 = (__CFDictionary *)((char *)v91 + v92);
                      v249 = v91;
                      v250 = (__CFDictionary *)((char *)v91 + v92);
                      v251 = 0;
                      if ((v91 & 3) != 0 && (_DWORD)v92)
                      {
                        v94 = 0;
                        v95 = (__CFDictionary *)((char *)v91 + 1);
                        v96 = -8;
                        v97 = v95;
                        do
                        {
                          HIDWORD(v251) = v96 + 16;
                          v249 = v97;
                          v94 = *((unsigned __int8 *)v97 - 1) | (v94 << 8);
                          LODWORD(v251) = v94;
                          v96 += 8;
                          if ((v95 & 3) == 0)
                            break;
                          LOBYTE(v95) = (_BYTE)v95 + 1;
                          v69 = v97 >= v93;
                          v97 = (__CFDictionary *)((char *)v97 + 1);
                        }
                        while (!v69);
                        LODWORD(v251) = v94 << (24 - v96);
                      }
                      if (MP4AudioESDS::Deserialize((uint64_t)&buf, (uint64_t)&v249, 0, 0))
                      {
                        v89 = 0;
                      }
                      else if (DecoderConfigDescr::GetDefaultPriming((DecoderConfigDescr *)v245, (unsigned int *)&outPropertyData))
                      {
                        v89 = 0;
                      }
                      else
                      {
                        v89 = outPropertyData;
                      }
                      std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v247);
                      std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v246);
                    }
                    else
                    {
                      v89 = 2112;
                    }
LABEL_161:
                    v100 = v55 * (unint64_t)v90;
                    v102 = v100 - v89;
                    if (v100 < v89)
                      v102 = 0;
                    *(_QWORD *)(a1 + 160) = v102;
                    if (v100 > v89)
                      LODWORD(v100) = v89;
                  }
                  else
                  {
                    v98 = *(_OWORD *)(a1 + 416);
                    *(_OWORD *)&buf.mASBD.mSampleRate = *(_OWORD *)(a1 + 400);
                    *(_OWORD *)&buf.mASBD.mBytesPerPacket = v98;
                    v99 = *(const void **)(a1 + 120);
                    *(_QWORD *)&buf.mASBD.mBitsPerChannel = *(_QWORD *)(a1 + 432);
                    buf.mMagicCookie = v99;
                    *(_QWORD *)&buf.mMagicCookieSize = 0;
                    buf.mMagicCookieSize = *(_DWORD *)(a1 + 128);
                    LODWORD(v249) = 0;
                    LODWORD(outPropertyData) = 4;
                    if (GetCodecPropertyFromFormatInfo(&buf, (unsigned int *)&outPropertyData, &v249, 0x64657066u))goto LABEL_166;
                    v100 = *(unsigned int *)(a1 + 420) * (unint64_t)v55;
                    v101 = v100 - v249;
                    if (v100 < v249)
                      v101 = 0;
                    if (v100 > v249)
                      LODWORD(v100) = (_DWORD)v249;
                    *(_QWORD *)(a1 + 160) = v101;
                  }
                  *(_DWORD *)(a1 + 168) = v100;
                  *(_DWORD *)(a1 + 172) = 0;
                  goto LABEL_166;
                }
                break;
              }
              if (!*(_QWORD *)(a1 + 472))
                goto LABEL_83;
              *(_QWORD *)(a1 + 384) = 0;
              v57 = malloc_type_malloc(v46, 0x7C51E058uLL);
              if (!v57)
              {
                v116 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                v117 = std::bad_alloc::bad_alloc(v116);
              }
              *(_QWORD *)(a1 + 384) = v57;
              *v57 = *v4;
              v10 = *(_DWORD *)(a1 + 524) - 8;
              *(_DWORD *)(a1 + 256) = v10;
              v11 = (unsigned __int8 *)(*(_QWORD *)(a1 + 384) + 8);
              *(_QWORD *)(a1 + 264) = v11;
              goto LABEL_77;
            }
          }
        }
        MP4BoxParser_TrackFragment::~MP4BoxParser_TrackFragment((MP4BoxParser_TrackFragment *)&buf);
      }
    }
  }
  if (v5 == 197)
  {
    v30 = *(_DWORD *)(a1 + 256);
    v31 = *(unsigned __int8 **)(a1 + 264);
    goto LABEL_198;
  }
  if (v5 == 215)
  {
    v24 = *(_DWORD *)(a1 + 256);
    v25 = *(unsigned __int8 **)(a1 + 264);
    goto LABEL_190;
  }
  if (v5 != 234)
    goto LABEL_39;
  v6 = *(_DWORD *)(a1 + 256);
  for (j = *(unsigned __int8 **)(a1 + 264); ; *(_QWORD *)(a1 + 264) = j)
  {
    LODWORD(buf.mASBD.mSampleRate) = v6;
    StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&buf, j);
    v131 = LODWORD(buf.mASBD.mSampleRate);
    v132 = *(_DWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 264) += LODWORD(buf.mASBD.mSampleRate);
    v133 = v132 - v131;
    *(_DWORD *)(a1 + 256) = v133;
    if (v133)
      break;
    v134 = *(unsigned int *)(a1 + 536);
    *(_QWORD *)(a1 + 296) = v134 + *(_QWORD *)(a1 + 296) - 8;
    v135 = *(_QWORD *)(a1 + 392);
    v136 = operator new();
    *(_BYTE *)(v136 + 8) = 0;
    *(_QWORD *)v136 = &off_1E2907000;
    *(_QWORD *)(v136 + 16) = v134;
    *(_QWORD *)(v136 + 24) = v135;
    *(_QWORD *)(v136 + 32) = 0;
    *(_QWORD *)(v136 + 40) = 0;
    *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2902718;
    Buffer_DataSource::Slice((Buffer_DataSource *)v136, 0, &buf.mASBD.mFormatID);
    LOBYTE(buf.mASBD.mBytesPerPacket) = 0;
    buf.mASBD.mFramesPerPacket = 0;
    *(_QWORD *)&buf.mASBD.mBytesPerFrame = 0;
    LOBYTE(buf.mASBD.mBitsPerChannel) = 0;
    buf.mASBD.mReserved = 8;
    *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2909040;
    LOBYTE(v226) = 1;
    v227 = 0;
    if (!MP4BoxParser_MovieExtends::Init((__n128 ***)&buf))
    {
      *(_BYTE *)(a1 + 543) = 1;
      v249 = 0;
      if (MP4BoxParser_MovieExtends::GetOverallDurationIncludingFragments(*(MP4BoxParser_MovieExtends **)&buf.mASBD.mFormatID, v227, &v249))
      {
        v137 = *(_DWORD *)(a1 + 512);
        if (v137)
        {
          *(_BYTE *)(a1 + 544) = 1;
          *(double *)(a1 + 504) = (double)(unint64_t)v249 / (double)v137;
        }
      }
      MP4BoxParser_MovieExtends::GetTrackFragmentDefaultsMap((uint64_t)&buf, a1 + 448);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
    MP4BoxParser_MovieExtends::~MP4BoxParser_MovieExtends((MP4BoxParser_MovieExtends *)&buf);
    free(*(void **)(a1 + 392));
    *(_QWORD *)(a1 + 392) = 0;
    *(_BYTE *)(a1 + 542) = 0;
    while (1)
    {
      while (1)
      {
        v48 = *(_QWORD *)(a1 + 344);
        v45 = *(_QWORD *)(a1 + 352);
        if (v45 >= v48)
        {
          v202 = 0;
          if (*(_BYTE *)(a1 + 545))
            goto LABEL_310;
        }
        else
        {
          v202 = *(unsigned __int8 *)(a1 + 545);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) = v45;
        *(_QWORD *)(a1 + 296) = v45;
        if (v202 || *(_BYTE *)(a1 + 542) || *(_BYTE *)(a1 + 546))
        {
LABEL_297:
          if (v45 >= v48)
            goto LABEL_305;
        }
        else
        {
          if (*(_BYTE *)(a1 + 548))
            v203 = v45 < v48;
          else
            v203 = 0;
          if (!v203)
          {
LABEL_305:
            v204 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(v204 + 96) = v48;
            *(_QWORD *)(a1 + 296) = v48;
            if (!*(_BYTE *)(a1 + 541))
              goto LABEL_118;
            if (!*(_BYTE *)(a1 + 543))
            {
              MP4AudioStream::SetStreamLengthAndPacketCountPerPacketProvider(a1);
              goto LABEL_118;
            }
            v205 = *(_DWORD *)(a1 + 408);
            v206 = 480;
            if (v205 != 1935764850)
            {
              if (v205 == 1935767394)
              {
                v206 = 915;
              }
              else
              {
                if (v205 >> 8 != 6381923)
                {
                  v249 = 0;
                  v209 = *(_DWORD *)(a1 + 428);
                  buf.mASBD.mSampleRate = *(Float64 *)(a1 + 400);
                  *(_OWORD *)&buf.mASBD.mFormatID = xmmword_18F116FC0;
                  buf.mASBD.mBytesPerFrame = 4;
                  buf.mASBD.mChannelsPerFrame = v209;
                  *(_QWORD *)&buf.mASBD.mBitsPerChannel = 32;
                  v210 = AudioConverterNewWithOptions((AudioStreamBasicDescription *)(a1 + 400), &buf.mASBD, 0, &v249);
                  v211 = v249;
                  if (v249)
                  {
                    v212 = *(_DWORD *)(a1 + 128);
                    if (v212)
                      v210 = AudioConverterSetProperty(v249, 0x646D6763u, v212, *(const void **)(a1 + 120));
                    if (!v210)
                    {
                      LODWORD(outPropertyData) = 0;
                      ioPropertyDataSize = 4;
                      if (!AudioConverterGetProperty(v211, 0x78697073u, &ioPropertyDataSize, &outPropertyData))
                      {
                        if ((_DWORD)outPropertyData)
                        {
                          *(_DWORD *)(a1 + 112) = outPropertyData;
                          v213 = *(_QWORD *)(a1 + 8);
                          *(_DWORD *)v248 = 1;
                          v214 = *(void (**)(_QWORD, _QWORD, uint64_t, _BYTE *))(v213 + 24);
                          if (v214)
                            v214(*(_QWORD *)(v213 + 40), *(unsigned int *)(v213 + 8), 1886616165, v248);
                        }
                      }
                    }
                    AudioConverterDispose(v211);
                  }
                  goto LABEL_118;
                }
                v206 = 768 * *(_DWORD *)(a1 + 428);
              }
            }
            *(_DWORD *)(a1 + 112) = v206;
            LODWORD(buf.mASBD.mSampleRate) = 1;
            v208 = *(void (**)(_QWORD, _QWORD, uint64_t, AudioFormatInfo *))(v204 + 24);
            if (v208)
              v208(*(_QWORD *)(v204 + 40), *(unsigned int *)(v204 + 8), 1886616165, &buf);
            goto LABEL_118;
          }
        }
        v30 = 8;
        *(_DWORD *)(a1 + 256) = 8;
        v31 = (unsigned __int8 *)(a1 + 528);
        *(_QWORD *)(a1 + 264) = a1 + 528;
LABEL_198:
        LODWORD(buf.mASBD.mSampleRate) = v30;
        StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&buf, v31);
        v124 = LODWORD(buf.mASBD.mSampleRate);
        v125 = *(_DWORD *)(a1 + 256);
        *(_QWORD *)(a1 + 264) += LODWORD(buf.mASBD.mSampleRate);
        v126 = v125 - v124;
        *(_DWORD *)(a1 + 256) = v126;
        if (v126)
        {
          LoudnessInfo = 0;
          v34 = 197;
          goto LABEL_312;
        }
        v127 = bswap32(*(_DWORD *)(a1 + 528));
        *(_DWORD *)(a1 + 536) = v127;
        if (v127 <= 7)
          goto LABEL_310;
        v128 = *(_QWORD *)(a1 + 296);
        if (*(_QWORD *)(a1 + 344) - v128 < v127)
          goto LABEL_310;
        *(_QWORD *)(a1 + 296) = v128 + 8;
        *(_QWORD *)(a1 + 352) += v127;
        v129 = *(_DWORD *)(a1 + 532);
        if (v129 != 1684567661)
          break;
        if (v127 >= 0x79)
          goto LABEL_310;
        *(unint64_t *)((char *)v4 + 35) = *(_QWORD *)(a1 + 528);
        v24 = v127 - 8;
        *(_DWORD *)(a1 + 256) = v127 - 8;
        v25 = (unsigned __int8 *)(a1 + 559);
        *(_QWORD *)(a1 + 264) = a1 + 559;
LABEL_190:
        LODWORD(buf.mASBD.mSampleRate) = v24;
        StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&buf, v25);
        v118 = LODWORD(buf.mASBD.mSampleRate);
        v119 = *(_DWORD *)(a1 + 256);
        *(_QWORD *)(a1 + 264) += LODWORD(buf.mASBD.mSampleRate);
        v120 = v119 - v118;
        *(_DWORD *)(a1 + 256) = v120;
        if (v120)
        {
          LoudnessInfo = 0;
          v34 = 215;
          goto LABEL_312;
        }
        v121 = *(unsigned int *)(a1 + 536);
        *(_QWORD *)(a1 + 296) = v121 + *(_QWORD *)(a1 + 296) - 8;
        *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2902718;
        v122 = operator new();
        *(_BYTE *)(v122 + 8) = 0;
        *(_QWORD *)v122 = &off_1E2907000;
        *(_QWORD *)(v122 + 16) = v121;
        *(_QWORD *)(v122 + 24) = a1 + 551;
        *(_QWORD *)(v122 + 32) = 0;
        *(_QWORD *)(v122 + 40) = 0;
        LOBYTE(buf.mASBD.mBytesPerPacket) = 0;
        buf.mASBD.mFramesPerPacket = 0;
        *(_QWORD *)&buf.mASBD.mBytesPerFrame = 0;
        LOBYTE(buf.mASBD.mBitsPerChannel) = 0;
        buf.mASBD.mReserved = 8;
        *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2908D30;
        *(_QWORD *)&buf.mASBD.mFormatID = v122;
        v230 = 0;
        v227 = 0;
        v228 = 0;
        LODWORD(v229) = 0;
        if (!MP4BoxParser_MovieHeader::Init((MP4BoxParser **)&buf))
          *(_DWORD *)(a1 + 512) = v229;
        if (*(_QWORD *)(a1 + 376))
          *(_BYTE *)(a1 + 545) = 0;
        v123 = *(_QWORD *)&buf.mASBD.mFormatID;
        *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2902718;
        *(_QWORD *)&buf.mASBD.mFormatID = 0;
        if (v123)
          (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
      }
      if (*(_BYTE *)(a1 + 542) && v129 == 2019915373)
        break;
      if (*(_BYTE *)(a1 + 545) && v129 == 1801548404)
      {
        *(_QWORD *)(a1 + 376) = 0;
        v138 = malloc_type_malloc(v127, 0x7C51E058uLL);
        if (!v138)
        {
          v217 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v218 = std::bad_alloc::bad_alloc(v217);
        }
        *(_QWORD *)(a1 + 376) = v138;
        *v138 = *(_QWORD *)(a1 + 528);
        v32 = *(_DWORD *)(a1 + 536) - 8;
        *(_DWORD *)(a1 + 256) = v32;
        v33 = (unsigned __int8 *)(*(_QWORD *)(a1 + 376) + 8);
        *(_QWORD *)(a1 + 264) = v33;
LABEL_219:
        LODWORD(buf.mASBD.mSampleRate) = v32;
        StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&buf, v33);
        v139 = LODWORD(buf.mASBD.mSampleRate);
        v140 = *(_DWORD *)(a1 + 256);
        *(_QWORD *)(a1 + 264) += LODWORD(buf.mASBD.mSampleRate);
        v141 = v140 - v139;
        *(_DWORD *)(a1 + 256) = v141;
        if (v141)
        {
          LoudnessInfo = 0;
          v34 = 249;
          goto LABEL_312;
        }
        *(_QWORD *)(a1 + 296) = *(unsigned int *)(a1 + 536) + *(_QWORD *)(a1 + 296) - 8;
        v142 = (MP4Parser_PacketProvider *)operator new();
        MP4Parser_PacketProvider::MP4Parser_PacketProvider(v142, *(const void **)(a1 + 376), *(_DWORD *)(a1 + 536), *(_DWORD *)(a1 + 360));
        *(_QWORD *)(a1 + 472) = v142;
        if (!(*(unsigned int (**)(MP4Parser_PacketProvider *))(*(_QWORD *)v142 + 16))(v142))
        {
          v143 = *(MP4BoxParser_Track **)(a1 + 472);
          if (!v143)
            goto LABEL_291;
          TrackType = MP4BoxParser_Track::GetTrackType(v143);
          v145 = *(_QWORD *)(a1 + 472);
          if (TrackType != 1936684398)
          {
            if (v145)
              (*(void (**)(_QWORD))(*(_QWORD *)v145 + 8))(*(_QWORD *)(a1 + 472));
LABEL_291:
            *(_QWORD *)(a1 + 472) = 0;
            free(*(void **)(a1 + 376));
            *(_QWORD *)(a1 + 376) = 0;
            goto LABEL_292;
          }
          if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes(*(MP4BoxParser_Track **)(a1 + 472)))
          {
            *(_DWORD *)(a1 + 236) = -1;
            return 1718449215;
          }
          v146 = *(_OWORD *)(v145 + 328);
          v147 = *(_OWORD *)(v145 + 344);
          *(_QWORD *)(a1 + 432) = *(_QWORD *)(v145 + 360);
          *(_OWORD *)(a1 + 400) = v146;
          *(_OWORD *)(a1 + 416) = v147;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a1 + 400);
          v148 = *(_QWORD *)(a1 + 8);
          LODWORD(buf.mASBD.mSampleRate) = 1;
          if (!*(_BYTE *)(v148 + 105))
          {
            *(_BYTE *)(v148 + 105) = 1;
            v149 = *(void (**)(_QWORD, _QWORD, uint64_t, AudioFormatInfo *))(v148 + 24);
            if (v149)
              v149(*(_QWORD *)(v148 + 40), *(unsigned int *)(v148 + 8), 1684434292, &buf);
          }
          v150 = *(unsigned int **)(a1 + 472);
          v151 = v150[106];
          *(_DWORD *)(a1 + 812) = v151;
          if (v151)
          {
            v152 = *(_QWORD *)(a1 + 8);
            v153 = *(_QWORD *)(v152 + 48);
            v154 = *(_QWORD *)(v152 + 56);
            v155 = v154 - v153;
            if (v154 != v153)
            {
              v156 = 0;
              v157 = v155 >> 2;
              v158 = 1;
              do
              {
                v159 = *(_DWORD *)(v153 + 4 * v156);
                v156 = v158++;
              }
              while (v159 != 1935832164 && v157 > v156);
              if (v159 == 1935832164)
              {
                LODWORD(buf.mASBD.mSampleRate) = 1;
                v161 = *(void (**)(_QWORD, _QWORD, uint64_t, AudioFormatInfo *))(v152 + 24);
                if (v161)
                {
                  v161(*(_QWORD *)(v152 + 40), *(unsigned int *)(v152 + 8), 1935832164, &buf);
                  v150 = *(unsigned int **)(a1 + 472);
                }
              }
            }
          }
          if (!MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v150))
          {
            v162 = v150[96];
            *(_DWORD *)(a1 + 128) = v162;
            CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 120), v162, 0);
            v163 = *(_QWORD *)(a1 + 472);
            v164 = *(void **)(a1 + 120);
            if (!MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v163))
            {
              v165 = *(_DWORD *)(v163 + 384);
              if (*(_DWORD *)(a1 + 128) >= v165)
              {
                *(_DWORD *)(a1 + 128) = v165;
                memcpy(v164, *(const void **)(v163 + 392), *(unsigned int *)(v163 + 384));
                v166 = *(_QWORD *)(a1 + 8);
                LODWORD(buf.mASBD.mSampleRate) = 1;
                *(_BYTE *)(v166 + 108) = 1;
                v167 = *(void (**)(_QWORD, _QWORD, uint64_t, AudioFormatInfo *))(v166 + 24);
                if (v167)
                  v167(*(_QWORD *)(v166 + 40), *(unsigned int *)(v166 + 8), 1835493731, &buf);
                v168 = *(_OWORD *)(a1 + 416);
                *(_OWORD *)&buf.mASBD.mSampleRate = *(_OWORD *)(a1 + 400);
                *(_OWORD *)&buf.mASBD.mBytesPerPacket = v168;
                v169 = *(const void **)(a1 + 120);
                *(_QWORD *)&buf.mASBD.mBitsPerChannel = *(_QWORD *)(a1 + 432);
                buf.mMagicCookie = v169;
                *(_QWORD *)&buf.mMagicCookieSize = 0;
                buf.mMagicCookieSize = *(_DWORD *)(a1 + 128);
                LODWORD(outPropertyData) = 0;
                if (!AudioFormatProperty_FormatListSize(&buf, 0x38u, (unsigned int *)&outPropertyData)
                  && (_DWORD)outPropertyData)
                {
                  std::vector<AudioFormatListItem>::vector(&v249, outPropertyData / 0x30uLL);
                  if (!AudioFormatProperty_FormatList(&buf, 0x38u, (unsigned int *)&outPropertyData, (AudioFormatListItem *)v249))
                  {
                    (*(void (**)(uint64_t, _QWORD, __CFDictionary *))(*(_QWORD *)a1 + 64))(a1, outPropertyData, v249);
                    v170 = *(_QWORD *)(a1 + 8);
                    *(_DWORD *)v248 = 1;
                    *(_BYTE *)(v170 + 108) = 1;
                    v171 = *(void (**)(_QWORD, _QWORD, uint64_t, _BYTE *))(v170 + 24);
                    if (v171)
                      v171(*(_QWORD *)(v170 + 40), *(unsigned int *)(v170 + 8), 1718383476, v248);
                  }
                  if (v249)
                  {
                    v250 = v249;
                    operator delete(v249);
                  }
                }
                v172 = *(MP4BoxParser_Track **)(a1 + 472);
                v173 = (*(uint64_t (**)(MP4BoxParser_Track *))(*(_QWORD *)v172 + 32))(v172);
                MP4BoxParser_Track::UpdateOffsetTableToIndex(v172, v173);
                if (!*(_BYTE *)(a1 + 541))
                  MP4AudioStream::SetStreamLengthAndPacketCountPerPacketProvider(a1);
                v174 = *(_DWORD *)(a1 + 408);
                if (v174 == 1935767394 || v174 == 1935764850)
                  *(_DWORD *)(a1 + 496) = 0;
              }
            }
          }
          v249 = 0;
          *(_QWORD *)&buf.mASBD.mSampleRate = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          LOWORD(buf.mASBD.mFormatID) = 257;
          LoudnessInfo = MP4BoxParser_Track::GetLoudnessInfo(*(MP4BoxParser_Track **)(a1 + 472), &v249);
          if ((_DWORD)LoudnessInfo)
          {
            CACFDictionary::~CACFDictionary((CACFDictionary *)&buf);
            return LoudnessInfo;
          }
          if (v249)
          {
            CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)&buf, v249, 1);
            CFRelease(v249);
            if (*(_DWORD *)(a1 + 824))
            {
              v175 = CopyMediaKindStringFromStoreItemKind(*(_DWORD *)(a1 + 824));
              CACFDictionary::AddString((CACFDictionary *)&buf, CFSTR("media kind"), v175);
            }
            v176 = *(const __CFDictionary **)(a1 + 816);
            if (v176)
              CACFDictionary::AddDictionary((CACFDictionary *)&buf, CFSTR("sound check info"), v176);
            mSampleRate = 0.0;
            if (*(_QWORD *)&buf.mASBD.mSampleRate)
            {
              CFRetain(*(CFTypeRef *)&buf.mASBD.mSampleRate);
              mSampleRate = buf.mASBD.mSampleRate;
            }
            *(Float64 *)(a1 + 832) = mSampleRate;
          }
          if (*(_DWORD *)(a1 + 512))
            *(_BYTE *)(a1 + 545) = 0;
          CACFDictionary::~CACFDictionary((CACFDictionary *)&buf);
        }
LABEL_292:
        ++*(_DWORD *)(a1 + 360);
      }
      else if (v129 == 1635017845)
      {
        *(_QWORD *)(a1 + 368) = 0;
        v178 = (unsigned __int8 *)malloc_type_malloc(v127, 0x7C51E058uLL);
        v27 = v178;
        if (!v178)
        {
          v219 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v220 = std::bad_alloc::bad_alloc(v219);
        }
        *(_QWORD *)(a1 + 368) = v178;
        v26 = *(_DWORD *)(a1 + 536) - 8;
        *(_DWORD *)(a1 + 256) = v26;
        *(_QWORD *)(a1 + 264) = v178;
LABEL_269:
        LODWORD(buf.mASBD.mSampleRate) = v26;
        StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&buf, v27);
        v179 = LODWORD(buf.mASBD.mSampleRate);
        v180 = *(_DWORD *)(a1 + 256);
        *(_QWORD *)(a1 + 264) += LODWORD(buf.mASBD.mSampleRate);
        v181 = v180 - v179;
        *(_DWORD *)(a1 + 256) = v181;
        if (v181)
        {
          LoudnessInfo = 0;
          v34 = 363;
          goto LABEL_312;
        }
        *(_QWORD *)(a1 + 296) = *(unsigned int *)(a1 + 536) + *(_QWORD *)(a1 + 296) - 8;
        if (*(_BYTE *)(a1 + 546))
        {
          v182 = operator new();
          v183 = *(_QWORD *)(a1 + 368);
          v184 = *(unsigned int *)(a1 + 536);
          *(_QWORD *)v182 = &off_1E2902718;
          v185 = operator new();
          *(_BYTE *)(v185 + 8) = 0;
          *(_QWORD *)v185 = &off_1E2907000;
          *(_QWORD *)(v185 + 16) = v184;
          *(_QWORD *)(v185 + 24) = v183;
          *(_QWORD *)(v185 + 32) = 0;
          *(_QWORD *)(v185 + 40) = 0;
          *(_BYTE *)(v182 + 16) = 0;
          *(_DWORD *)(v182 + 20) = 0;
          *(_QWORD *)(v182 + 24) = 0;
          *(_BYTE *)(v182 + 32) = 0;
          *(_DWORD *)(v182 + 36) = 8;
          *(_QWORD *)(v182 + 64) = 0;
          *(_DWORD *)(v182 + 72) = 0;
          *(_QWORD *)v182 = &off_1E29094E8;
          *(_QWORD *)(v182 + 8) = v185;
          *(_QWORD *)(v182 + 84) = 0;
          *(_QWORD *)(v182 + 76) = 0;
          *(_DWORD *)(v182 + 92) = 0;
          *(_QWORD *)(a1 + 480) = v182;
          if (!MP4BoxParser_iTunesSMPBMeta::Init((AudioFilePacketTableInfo *)v182))
          {
            v186 = *(_QWORD *)(a1 + 480);
            v188 = *(_QWORD *)(v186 + 80);
            v187 = (_OWORD *)(v186 + 80);
            *(_BYTE *)(a1 + 547) = v188 > 0;
            if (v188 >= 1)
              *(_OWORD *)(a1 + 160) = *v187;
            *(_BYTE *)(a1 + 546) = 0;
          }
        }
        if (*(_BYTE *)(a1 + 548))
        {
          v189 = operator new();
          v190 = *(_QWORD *)(a1 + 368);
          v191 = *(unsigned int *)(a1 + 536);
          v192 = *(_DWORD *)(a1 + 428);
          *(_QWORD *)v189 = &off_1E2902718;
          v193 = operator new();
          *(_BYTE *)(v193 + 8) = 0;
          *(_QWORD *)v193 = &off_1E2907000;
          *(_QWORD *)(v193 + 16) = v191;
          *(_QWORD *)(v193 + 24) = v190;
          *(_QWORD *)(v193 + 32) = 0;
          *(_QWORD *)(v193 + 40) = 0;
          *(_BYTE *)(v189 + 16) = 0;
          *(_DWORD *)(v189 + 20) = 0;
          *(_QWORD *)(v189 + 24) = 0;
          *(_BYTE *)(v189 + 32) = 0;
          *(_DWORD *)(v189 + 36) = 8;
          *(_QWORD *)(v189 + 64) = 0;
          *(_QWORD *)(v189 + 72) = 0;
          *(_QWORD *)v189 = &off_1E29094B8;
          *(_QWORD *)(v189 + 8) = v193;
          *(_DWORD *)(v189 + 80) = v192;
          *(_QWORD *)(a1 + 488) = v189;
          if (!MP4BoxParser_iTunesNORMMeta::Init((MP4BoxParser_iTunesNORMMeta *)v189))
          {
            *(_QWORD *)&buf.mASBD.mSampleRate = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            LOWORD(buf.mASBD.mFormatID) = 257;
            MP4BoxParser_iTunesNORMMeta::FillSoundCheckDictionary(*(MP4BoxParser_iTunesNORMMeta **)(a1 + 488), (CACFDictionary *)&buf);
            v194 = 0.0;
            if (*(_QWORD *)&buf.mASBD.mSampleRate)
            {
              CFRetain(*(CFTypeRef *)&buf.mASBD.mSampleRate);
              v194 = buf.mASBD.mSampleRate;
            }
            *(Float64 *)(a1 + 816) = v194;
            v195 = *(_QWORD *)(a1 + 8);
            LODWORD(v249) = 0;
            v196 = *(void (**)(_QWORD, _QWORD, uint64_t, __CFDictionary **))(v195 + 24);
            if (v196)
              v196(*(_QWORD *)(v195 + 40), *(unsigned int *)(v195 + 8), 1935893603, &v249);
            if (*(_QWORD *)(a1 + 832))
            {
              v249 = *(__CFDictionary **)(a1 + 832);
              LOWORD(v250) = 256;
              CACFDictionary::AddDictionary((CACFDictionary *)&v249, CFSTR("sound check info"), *(const __CFDictionary **)(a1 + 816));
              CACFDictionary::~CACFDictionary((CACFDictionary *)&v249);
            }
            *(_BYTE *)(a1 + 548) = 0;
            CACFDictionary::~CACFDictionary((CACFDictionary *)&buf);
          }
        }
        v197 = *(_QWORD *)(a1 + 368);
        v198 = *(unsigned int *)(a1 + 536);
        *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2902718;
        v199 = operator new();
        *(_BYTE *)(v199 + 8) = 0;
        *(_QWORD *)v199 = &off_1E2907000;
        *(_QWORD *)(v199 + 16) = v198;
        *(_QWORD *)(v199 + 24) = v197;
        *(_QWORD *)(v199 + 32) = 0;
        *(_QWORD *)(v199 + 40) = 0;
        LOBYTE(buf.mASBD.mBytesPerPacket) = 0;
        buf.mASBD.mFramesPerPacket = 0;
        *(_QWORD *)&buf.mASBD.mBytesPerFrame = 0;
        LOBYTE(buf.mASBD.mBitsPerChannel) = 0;
        buf.mASBD.mReserved = 8;
        v227 = 0;
        LODWORD(v228) = 0;
        *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2908BA0;
        *(_QWORD *)&buf.mASBD.mFormatID = v199;
        if (!MP4BoxParser_iTunesMeta::Init((MP4BoxParser_iTunesMeta *)&buf))
        {
          StoreKind = MP4BoxParser_iTunesMeta::GetStoreKind((MP4BoxParser_iTunesMeta *)&buf);
          *(_DWORD *)(a1 + 824) = StoreKind;
          if (*(_QWORD *)(a1 + 832))
          {
            if (StoreKind)
            {
              v249 = *(__CFDictionary **)(a1 + 832);
              LOWORD(v250) = 256;
              v201 = CopyMediaKindStringFromStoreItemKind(StoreKind);
              CACFDictionary::AddString((CACFDictionary *)&v249, CFSTR("media kind"), v201);
              CACFDictionary::~CACFDictionary((CACFDictionary *)&v249);
            }
          }
        }
        MP4BoxParser_Meta::~MP4BoxParser_Meta((MP4BoxParser_Meta *)&buf);
        free(*(void **)(a1 + 368));
        *(_QWORD *)(a1 + 368) = 0;
      }
    }
    *(_QWORD *)(a1 + 392) = 0;
    v130 = malloc_type_malloc(v127, 0x7C51E058uLL);
    if (!v130)
    {
      v215 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v216 = std::bad_alloc::bad_alloc(v215);
    }
    *(_QWORD *)(a1 + 392) = v130;
    *v130 = *(_QWORD *)(a1 + 528);
    v6 = *(_DWORD *)(a1 + 536) - 8;
    *(_DWORD *)(a1 + 256) = v6;
    j = (unsigned __int8 *)(*(_QWORD *)(a1 + 392) + 8);
  }
  LoudnessInfo = 0;
  v34 = 234;
LABEL_312:
  *(_DWORD *)(a1 + 236) = v34;
  return LoudnessInfo;
}

void sub_18F00E1EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(_QWORD *)(v1 - 168) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_18F00E204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v13 - 176));
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

void sub_18F00E238(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10A1C400A2E7247);
  _Unwind_Resume(a1);
}

uint64_t MP4AudioStream::GeneratePackets(uint64_t a1, uint64_t a2)
{
  int v2;
  size_t v5;
  unsigned __int8 *v6;
  int mStartOffset;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  UInt32 v16;
  AudioStreamPacketDescription **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  SInt64 v37;
  AudioStreamPacketDescription *v38;
  AudioStreamPacketDescription *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  AudioStreamPacketDescription v56;

  v2 = *(_DWORD *)(a1 + 236);
  if (v2 == -1)
    return 0;
  if (!v2)
  {
    MP4Parser_PacketProvider::GetPacketIndexForOffset(*(MP4Parser_PacketProvider **)(a1 + 472), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96), (uint64_t *)(a1 + 184));
    v15 = *(_QWORD *)(a1 + 184);
    goto LABEL_13;
  }
  if (v2 != 686)
  {
    result = 0;
LABEL_44:
    v42 = -1;
    goto LABEL_45;
  }
  LODWORD(v5) = *(_DWORD *)(a1 + 256);
  v6 = *(unsigned __int8 **)(a1 + 264);
LABEL_5:
  LODWORD(v56.mStartOffset) = v5;
  StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&v56, v6);
  mStartOffset = v56.mStartOffset;
  v8 = *(_DWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 264) += LODWORD(v56.mStartOffset);
  v9 = v8 - mStartOffset;
  *(_DWORD *)(a1 + 256) = v9;
  if (v9)
  {
    result = 0;
    v42 = 686;
LABEL_45:
    *(_DWORD *)(a1 + 236) = v42;
    return result;
  }
  if (*(_DWORD *)(a1 + 416))
  {
    v10 = *(unsigned int *)(a1 + 304);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v12 + 224) += *(unsigned int *)(v12 + 44);
    v13 = *(_QWORD *)(v12 + 216) + v10;
    ++*(_QWORD *)(v12 + 208);
    *(_QWORD *)(v12 + 216) = v13;
    (*(void (**)(_QWORD))(v11 + 32))(*(_QWORD *)(v11 + 40));
  }
  else
  {
    v56.mStartOffset = 0;
    v16 = *(_DWORD *)(a1 + 304);
    v56.mVariableFramesInPacket = 0;
    v56.mDataByteSize = v16;
    AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v16, 1u, *(const void **)(a1 + 288), &v56, 1);
  }
  v15 = *(_QWORD *)(a1 + 184) + 1;
  *(_QWORD *)(a1 + 184) = v15;
LABEL_13:
  v17 = (AudioStreamPacketDescription **)(a1 + 192);
  while (1)
  {
    MP4BoxParser_Track::UpdateOffsetTableToIndex(*(MP4BoxParser_Track **)(a1 + 472), v15);
    if (MP4Parser_PacketProvider::GetPacketInfo(*(MP4Parser_PacketProvider **)(a1 + 472), *(_DWORD *)(a1 + 184), (unsigned int *)(a1 + 304), (unint64_t *)(a1 + 312)))break;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(v18 + 96) = v19;
    v20 = *(_QWORD *)(v18 + 88);
    v21 = v20 + *(unsigned int *)(v18 + 80);
    if (v21 <= v19 || v19 < v20)
      v23 = 0;
    else
      v23 = v21 - v19;
    v5 = *(unsigned int *)(a1 + 304);
    if (v23 < v5)
    {
      if (*(_DWORD *)(a1 + 284) < v5)
      {
        *(_DWORD *)(a1 + 284) = v5;
        CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v5, 0);
        LODWORD(v5) = *(_DWORD *)(a1 + 304);
      }
      *(_DWORD *)(a1 + 256) = v5;
      v6 = *(unsigned __int8 **)(a1 + 288);
      *(_QWORD *)(a1 + 264) = v6;
      goto LABEL_5;
    }
    v56.mStartOffset = *(_QWORD *)(a1 + 184);
    v54 = v23;
    v55 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, AudioStreamPacketDescription *, unsigned int *))(*(_QWORD *)a1 + 208))(a1, v19, &v54, &v56, &v55);
    if ((_DWORD)result)
      goto LABEL_42;
    v24 = v55;
    if (!v55)
    {
      *(_DWORD *)(a1 + 236) = -1;
      return 2003334207;
    }
    v25 = 0;
    v26 = *(_QWORD *)(a1 + 8);
    v27 = *(_QWORD *)(v26 + 88);
    v28 = *(_QWORD *)(v26 + 96);
    if (v28 >= v27)
    {
      v29 = v27 + *(unsigned int *)(v26 + 80);
      if (v29 > v28 && (_DWORD)v29 - (_DWORD)v28 != 0)
        v25 = (const void *)(*(_QWORD *)(v26 + 72) + (v28 - v27));
    }
    if (*(_DWORD *)(a1 + 416))
    {
      v31 = v54;
      v32 = *(_QWORD *)(v26 + 16);
      *(_QWORD *)(v32 + 224) += *(_DWORD *)(v32 + 44) * v55;
      v33 = *(_QWORD *)(v32 + 216) + v31;
      *(_QWORD *)(v32 + 208) += v24;
      *(_QWORD *)(v32 + 216) = v33;
      (*(void (**)(_QWORD))(v26 + 32))(*(_QWORD *)(v26 + 40));
    }
    else
    {
      if (*(_DWORD *)(a1 + 200) < v55)
      {
        v34 = (1 << -__clz(v55 - 1));
        *(_DWORD *)(a1 + 200) = v34;
        CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), v34);
        LODWORD(v24) = v55;
      }
      MP4BoxParser_Track::UpdateOffsetTableToIndex(*(MP4BoxParser_Track **)(a1 + 472), v24 + *(_DWORD *)(a1 + 184));
      v52 = 0;
      if (v55)
      {
        v35 = 0;
        v36 = 0;
        v37 = 0;
        while (1)
        {
          result = MP4Parser_PacketProvider::GetPacketInfo(*(MP4Parser_PacketProvider **)(a1 + 472), (int)v36 + *(_DWORD *)(a1 + 184), &v52, (unint64_t *)&v53);
          if ((_DWORD)result)
            break;
          v38 = *v17;
          v39 = &(*v17)[v35];
          v39->mStartOffset = v37;
          v40 = v52;
          v39->mVariableFramesInPacket = 0;
          v39->mDataByteSize = v40;
          v37 += v40;
          ++v36;
          v41 = v55;
          ++v35;
          if (v36 >= v55)
            goto LABEL_40;
        }
LABEL_42:
        if ((_DWORD)result == 1685348671)
        {
          result = 1685348671;
          *(_BYTE *)(a1 + 177) = 1;
        }
        goto LABEL_44;
      }
      v41 = 0;
      v38 = *v17;
LABEL_40:
      AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v54, v41, v25, v38, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) += v54;
    v15 = *(_QWORD *)(a1 + 184) + v55;
    *(_QWORD *)(a1 + 184) = v15;
  }
  v43 = 0;
  *(_BYTE *)(a1 + 550) = 1;
  v44 = *(_QWORD *)(a1 + 8);
  v45 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(v44 + 96) = v45;
  *(_QWORD *)a2 = a1;
  *(_OWORD *)(a2 + 8) = xmmword_18F116F80;
  v46 = *(_QWORD *)(v44 + 88);
  v47 = v46 + *(unsigned int *)(v44 + 80);
  v48 = v45 < v46 || v47 <= v45;
  v49 = v48;
  v50 = v47 - v45;
  if (!v48 && v50)
    v43 = *(_QWORD *)(v44 + 72) + (v45 - v46);
  result = 0;
  *(_QWORD *)(a2 + 32) = v43;
  if (v49)
    v51 = 0;
  else
    v51 = v50;
  *(_DWORD *)(a2 + 24) = v51;
  return result;
}

uint64_t MP4AudioStream::RestrictsRandomAccess(MP4AudioStream *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 59);
  MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v1);
  if (v1[296])
    return 1;
  MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v1);
  return v1[240];
}

uint64_t MP4AudioStream::PacketToRollDistance(unsigned __int8 **this, AudioPacketRollDistanceTranslation *a2)
{
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  const SampleToRollDistanceTable *v7;
  int v8;
  const SampleToRollDistanceTable *v10;
  int v11;
  int v12;
  SInt64 mPacket;
  unsigned int outPropertyData;
  UInt32 ioPropertyDataSize;
  int inSpecifier;

  a2->mRollDistance = 0;
  v4 = (*((uint64_t (**)(unsigned __int8 **))*this + 20))(this);
  v5 = this[59];
  MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v5);
  if (v4)
  {
    v6 = this[59];
    MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v6);
    v8 = v5[240];
    v7 = (const SampleToRollDistanceTable *)(v5 + 240);
    if (v8 | v6[296])
      return PacketToRollDistanceForRestrictedRandomAccess(a2, v7, (const SyncSampleTable *)(v6 + 296));
  }
  else
  {
    v11 = v5[152];
    v10 = (const SampleToRollDistanceTable *)(v5 + 152);
    if (v11)
      return PacketToRollDistanceForRollRecovery(a2, v10);
    v12 = *((_DWORD *)this + 8);
    ioPropertyDataSize = 4;
    inSpecifier = v12;
    outPropertyData = 0;
    AudioFormatGetProperty(0x64726C6Cu, 4u, &inSpecifier, &ioPropertyDataSize, &outPropertyData);
    mPacket = outPropertyData;
    if (a2->mPacket < outPropertyData)
      mPacket = a2->mPacket;
    a2->mRollDistance = mPacket;
  }
  return 0;
}

uint64_t MP4AudioStream::ScanForIndependentPacket(_QWORD *a1, int a2, AudioIndependentPacketTranslation *a3)
{
  SampleToRollDistanceTable **v6;
  SyncSampleTable **v7;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 160))(a1))
    return AudioFileStreamObject::ScanForIndependentPacket((uint64_t)a1, a2, a3);
  v6 = (SampleToRollDistanceTable **)a1[59];
  MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v6);
  v7 = (SyncSampleTable **)a1[59];
  MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v7);
  return ScanForIndependentPacketWithRestrictedRandomAccess(a2 == 1, a3, v6 + 30, v7 + 37);
}

uint64_t MP4AudioStream::PacketToDependencyInfo(unsigned __int8 **this, AudioPacketDependencyInfoTranslation *a2)
{
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  const SampleToRollDistanceTable *v8;
  int v9;
  AudioPacketRollDistanceTranslation v10;

  v4 = (*((uint64_t (**)(unsigned __int8 **))*this + 20))(this);
  v5 = this[59];
  MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v5);
  if (v4)
  {
    v6 = this[59];
    MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v6);
    return PacketToDependencyInfoForRestrictedRandomAccess(a2, (const SampleToRollDistanceTable *)(v5 + 240), (const SyncSampleTable *)(v6 + 296));
  }
  else
  {
    v9 = v5[152];
    v8 = (const SampleToRollDistanceTable *)(v5 + 152);
    if (v9)
    {
      a2->mIsIndependentlyDecodable = 1;
      v10.mPacket = a2->mPacket;
      v10.mRollDistance = 0;
      PacketToRollDistanceForRollRecovery(&v10, v8);
      a2->mNumberPrerollPackets = v10.mRollDistance;
    }
    else
    {
      AudioFileStreamObject::PacketToDependencyInfo((AudioFileStreamObject *)this, a2);
    }
    return 0;
  }
}

uint64_t MP4AudioStream::ByteRangeToPacketRange(MP4Parser_PacketProvider **this, uint64_t a2, unsigned int *a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  result = MP4Parser_PacketProvider::GetPacketIndexForOffset(this[59], a2, a4);
  if (!(_DWORD)result)
  {
    v10 = *((_DWORD *)this + 28);
    if (!v10)
      return 2003334207;
    if (v10 <= *a3)
    {
      v11 = *a3 / v10;
    }
    else
    {
      v12 = 0;
      result = MP4Parser_PacketProvider::GetPacketInfo(this[59], *(_DWORD *)a4, &v12, (unint64_t *)&v13);
      v11 = v12 <= *a3;
      if ((_DWORD)result)
        return result;
    }
    return MP4Parser_PacketProvider::GetContiguousPacketCountAndSize((uint64_t **)this[59], *(_DWORD *)a4, v11, a5, a3);
  }
  return result;
}

uint64_t MP4AudioStream::HandleDiscontinuity(MP4AudioStream *this)
{
  return 0;
}

_QWORD *std::vector<AudioFormatListItem>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<AudioFormatListItem>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_18F00EAB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4AudioStream::SetStreamLengthAndPacketCountPerPacketProvider(uint64_t this)
{
  uint64_t v1;
  _QWORD **v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD, _QWORD, uint64_t, int *);
  _QWORD *v7;
  uint64_t (*v8)(_QWORD, _QWORD, uint64_t, int *);
  _QWORD *v9;
  uint64_t (*v10)(_QWORD, _QWORD, uint64_t, int *);
  int v11;
  int v12;
  int v13;

  v1 = *(_QWORD *)(this + 472);
  if (v1)
  {
    v2 = (_QWORD **)this;
    if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes(*(MP4BoxParser_Track **)(this + 472)))
      v3 = 0;
    else
      v3 = *(_QWORD *)(v1 + 104);
    ((void (*)(_QWORD **, uint64_t))(*v2)[12])(v2, *(_QWORD *)(v1 + 448) + v3);
    v4 = (*(uint64_t (**)(_QWORD *))(*v2[59] + 32))(v2[59]);
    ((void (*)(_QWORD **, _QWORD))(*v2)[10])(v2, v4);
    this = MP4Parser_PacketProvider::GetMaximumPacketSize((MP4Parser_PacketProvider *)v2[59]);
    *((_DWORD *)v2 + 28) = this;
    v5 = v2[1];
    v11 = 1;
    v6 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, int *))v5[3];
    if (v6)
    {
      this = v6(v5[5], *((unsigned int *)v5 + 2), 1650683508, &v11);
      v7 = v2[1];
      v8 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, int *))v7[3];
      v12 = 1;
      if (v8)
      {
        this = v8(v7[5], *((unsigned int *)v7 + 2), 1885564532, &v12);
        v9 = v2[1];
        v10 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, int *))v9[3];
        v13 = 1;
        if (v10)
          return v10(v9[5], *((unsigned int *)v9 + 2), 1886616165, &v13);
      }
    }
  }
  return this;
}

void MP4AudioStream::MP4AudioStream(MP4AudioStream *this, int a2)
{
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = -1;
  *((_QWORD *)this + 12) = -1;
  *((_QWORD *)this + 13) = -1;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_WORD *)this + 88) = 0;
  *((_DWORD *)this + 59) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_BYTE *)this + 232) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 15) = xmmword_18F116F80;
  *((_DWORD *)this + 64) = 0;
  *((_QWORD *)this + 33) = 0;
  *(_QWORD *)((char *)this + 300) = 0;
  *(_OWORD *)((char *)this + 284) = 0u;
  *((_DWORD *)this + 82) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_QWORD *)this = &off_1E2904728;
  *((_BYTE *)this + 332) = 0;
  *((_DWORD *)this + 110) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 90) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_QWORD *)this + 56) = (char *)this + 456;
  *((_QWORD *)this + 61) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_DWORD *)this + 124) = 1;
  *((_QWORD *)this + 63) = 0;
  *((_DWORD *)this + 128) = 0;
  *((_DWORD *)this + 135) = 0;
  *((_WORD *)this + 272) = 256;
  *((_BYTE *)this + 550) = 0;
  *(_DWORD *)((char *)this + 546) = 0;
  *(_OWORD *)((char *)this + 808) = 0u;
  *((_DWORD *)this + 206) = 0;
  *((_OWORD *)this + 52) = 0u;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = -1;
  *((_QWORD *)this + 21) = 0;
  bzero((char *)this + 400, 0x28uLL);
  *((_DWORD *)this + 4) = a2;
}

BOOL DSPGraph::NewBoxRegistry::has(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  std::string __p;

  v2 = (_QWORD *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<std::string>(v2, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3 != 0;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

uint64_t std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int a2, int a3)
{
  int v4;
  int v5;

  v5 = a2;
  v4 = a3;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)a1 + 48))(a1, &v5, &v4);
}

void std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void DSPGraph::NewBoxRegistry::~NewBoxRegistry(DSPGraph::NewBoxRegistry *this)
{
  char *v2;
  void **v3;

  *(_QWORD *)this = &off_1E290D2C0;
  v2 = (char *)this + 8;
  v3 = (void **)((char *)this + 88);
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)v2);
}

{
  char *v2;
  void **v3;

  *(_QWORD *)this = &off_1E290D2C0;
  v2 = (char *)this + 8;
  v3 = (void **)((char *)this + 88);
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)v2);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::NewBoxRegistry::ClassName(DSPGraph::NewBoxRegistry *this)
{
  return "NewBoxRegistry";
}

uint64_t DSPGraph::NewBoxRegistry::print(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t result;
  uint64_t *v8;
  unsigned int v9;
  const char *v10;

  result = DSPGraph::printi(a2, a4, "NewBoxRegistry registered boxes:\n");
  v8 = *(uint64_t **)(a1 + 24);
  if (v8)
  {
    v9 = a4 + 4;
    do
    {
      v10 = (const char *)(v8 + 2);
      if (*((char *)v8 + 39) < 0)
        v10 = *(const char **)v10;
      result = DSPGraph::printi(a2, v9, "%s\n", v10);
      v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  return result;
}

DSPGraph::Interpreter *DSPGraph::Interpreter::Interpreter(DSPGraph::Interpreter *this, const DSPGraph::NewBoxRegistry *a2)
{
  unint64_t v2;
  unsigned __int8 *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t **v34;
  uint64_t *j;
  unint64_t v36;
  _QWORD *v38;
  __int128 v39;
  float v40;
  float v41;
  _BOOL8 v42;
  unint64_t v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  __int128 *v49;
  __int128 *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  char *v56;
  __int128 v57;
  uint64_t *v59;
  char *v60;
  char **v61;
  char **v62;
  char v63;
  char *v64;
  char *v65;

  *(_QWORD *)this = &off_1E290C3B0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &off_1E290D2C0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 10);
  v59 = (uint64_t *)((char *)this + 24);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)this + 24, *((_QWORD *)a2 + 2));
  v5 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
  if (v5)
  {
    v6 = (_QWORD *)((char *)this + 40);
    do
    {
      v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      v8 = v7;
      v9 = *((_QWORD *)this + 4);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7;
          if (v7 >= v9)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v12 = *(unsigned __int8 ***)(*v59 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = *(unsigned __int8 **)i)
          {
            v14 = *((_QWORD *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16))
                goto LABEL_44;
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = (char *)operator new(0x48uLL);
      v16 = v15;
      v60 = v15;
      v61 = (char **)((char *)this + 40);
      LOBYTE(v62) = 0;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = v8;
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v15 + 16), *((const std::string::value_type **)v5 + 2), *((_QWORD *)v5 + 3));
      }
      else
      {
        v17 = *((_OWORD *)v5 + 1);
        *((_QWORD *)v15 + 4) = *((_QWORD *)v5 + 4);
        *((_OWORD *)v15 + 1) = v17;
      }
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v16 + 40), (uint64_t)(v5 + 40));
      LOBYTE(v62) = 1;
      v18 = (float)(unint64_t)(*((_QWORD *)this + 6) + 1);
      v19 = *((float *)this + 14);
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v20 = 1;
        v21 = v20 | (2 * v9);
        v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22)
          v23 = v22;
        else
          v23 = v21;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)v59, v23);
        v9 = *((_QWORD *)this + 4);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
      }
      v24 = *v59;
      v25 = *(_QWORD **)(*v59 + 8 * v2);
      if (v25)
      {
        *(_QWORD *)v16 = *v25;
      }
      else
      {
        *(_QWORD *)v16 = *v6;
        *v6 = v16;
        *(_QWORD *)(v24 + 8 * v2) = v6;
        if (!*(_QWORD *)v16)
          goto LABEL_43;
        v26 = *(_QWORD *)(*(_QWORD *)v16 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9)
            v26 %= v9;
        }
        else
        {
          v26 &= v9 - 1;
        }
        v25 = (_QWORD *)(*v59 + 8 * v26);
      }
      *v25 = v16;
LABEL_43:
      v60 = 0;
      ++*((_QWORD *)this + 6);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v60);
LABEL_44:
      v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  v27 = (uint64_t *)((char *)this + 64);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 20);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)this + 64, *((_QWORD *)a2 + 7));
  v28 = (uint64_t *)*((_QWORD *)a2 + 8);
  if (v28)
  {
    v29 = (_QWORD *)((char *)this + 80);
    do
    {
      v30 = v28 + 2;
      v31 = *((unsigned int *)v28 + 5) + (unint64_t)*((unsigned int *)v28 + 4) + *((unsigned int *)v28 + 6);
      v32 = *((_QWORD *)this + 9);
      if (v32)
      {
        v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
        v33.i16[0] = vaddlv_u8(v33);
        if (v33.u32[0] > 1uLL)
        {
          v2 = *((unsigned int *)v28 + 5) + (unint64_t)*((unsigned int *)v28 + 4) + *((unsigned int *)v28 + 6);
          if (v31 >= v32)
            v2 = v31 % v32;
        }
        else
        {
          v2 = (v32 - 1) & v31;
        }
        v34 = *(uint64_t ***)(*v27 + 8 * v2);
        if (v34)
        {
          for (j = *v34; j; j = (uint64_t *)*j)
          {
            v36 = j[1];
            if (v36 == v31)
            {
              if (j[2] == *v30 && *((_DWORD *)j + 6) == (unint64_t)*((unsigned int *)v28 + 6))
                goto LABEL_89;
            }
            else
            {
              if (v33.u32[0] > 1uLL)
              {
                if (v36 >= v32)
                  v36 %= v32;
              }
              else
              {
                v36 &= v32 - 1;
              }
              if (v36 != v2)
                break;
            }
          }
        }
      }
      v38 = operator new(0x48uLL);
      *v38 = 0;
      v38[1] = v31;
      v39 = *(_OWORD *)v30;
      *((_DWORD *)v38 + 8) = *((_DWORD *)v28 + 8);
      *((_OWORD *)v38 + 1) = v39;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v38 + 5), (uint64_t)(v28 + 5));
      v40 = (float)(unint64_t)(*((_QWORD *)this + 11) + 1);
      v41 = *((float *)this + 24);
      if (!v32 || (float)(v41 * (float)v32) < v40)
      {
        v42 = (v32 & (v32 - 1)) != 0;
        if (v32 < 3)
          v42 = 1;
        v43 = v42 | (2 * v32);
        v44 = vcvtps_u32_f32(v40 / v41);
        if (v43 <= v44)
          v45 = v44;
        else
          v45 = v43;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)this + 64, v45);
        v32 = *((_QWORD *)this + 9);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v31 >= v32)
            v2 = v31 % v32;
          else
            v2 = v31;
        }
        else
        {
          v2 = (v32 - 1) & v31;
        }
      }
      v46 = *v27;
      v47 = *(_QWORD **)(*v27 + 8 * v2);
      if (v47)
      {
        *v38 = *v47;
      }
      else
      {
        *v38 = *v29;
        *v29 = v38;
        *(_QWORD *)(v46 + 8 * v2) = v29;
        if (!*v38)
          goto LABEL_88;
        v48 = *(_QWORD *)(*v38 + 8);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v48 >= v32)
            v48 %= v32;
        }
        else
        {
          v48 &= v32 - 1;
        }
        v47 = (_QWORD *)(*v27 + 8 * v48);
      }
      *v47 = v38;
LABEL_88:
      ++*((_QWORD *)this + 11);
LABEL_89:
      v28 = (uint64_t *)*v28;
    }
    while (v28);
  }
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  v49 = (__int128 *)*((_QWORD *)a2 + 11);
  v50 = (__int128 *)*((_QWORD *)a2 + 12);
  if (v50 != v49)
  {
    v51 = 0xAAAAAAAAAAAAAAABLL * (v50 - v49);
    if (v51 >= 0x555555555555556)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v51);
    *((_QWORD *)this + 15) = &v52[48 * v53];
    *((_QWORD *)this + 13) = v52;
    *((_QWORD *)this + 14) = v52;
    v64 = v52;
    v65 = v52;
    v60 = (char *)this + 120;
    v61 = &v64;
    v62 = &v65;
    v63 = 0;
    v54 = v52;
    do
    {
      if (*((char *)v49 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v54, *(const std::string::value_type **)v49, *((_QWORD *)v49 + 1));
        v56 = v65;
      }
      else
      {
        v55 = *v49;
        *((_QWORD *)v54 + 2) = *((_QWORD *)v49 + 2);
        *(_OWORD *)v54 = v55;
        v56 = v54;
      }
      v57 = *(__int128 *)((char *)v49 + 24);
      *((_DWORD *)v54 + 10) = *((_DWORD *)v49 + 10);
      *(_OWORD *)(v54 + 24) = v57;
      v49 += 3;
      v54 = v56 + 48;
      v65 = v56 + 48;
    }
    while (v49 != v50);
    v63 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,AudioComponentDescription>>,std::pair<std::string,AudioComponentDescription>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v60);
    *((_QWORD *)this + 14) = v54;
  }
  *((_QWORD *)this + 20) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 42) = 1;
  *((_QWORD *)this + 22) = 0;
  *((_BYTE *)this + 184) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = 0;
  return this;
}

void sub_18F00F7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(v11);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(a10);
  v13 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 8) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,AudioComponentDescription>>,std::pair<std::string,AudioComponentDescription>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 25) < 0)
        operator delete(*(void **)(v3 - 48));
      v3 -= 48;
    }
  }
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  _QWORD *v3;
  uint64_t v4;

  if (a1)
  {
    v3 = (_QWORD *)__p[8];
    if (v3 == __p + 5)
    {
      v4 = 4;
      v3 = __p + 5;
      goto LABEL_8;
    }
    if (v3)
    {
      v4 = 5;
LABEL_8:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
LABEL_9:
    operator delete(__p);
    return;
  }
  if (__p)
    goto LABEL_9;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *this, _QWORD *a2, _QWORD *a3)
{
  _BOOL4 v6;
  int v7;
  std::string::value_type *v8;
  std::string::value_type v9;
  uint64_t v10;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  while (!a2)
  {
    v6 = 1;
    if (!a3)
      goto LABEL_17;
LABEL_11:
    if (a3[3] == a3[4])
    {
      if ((*(unsigned int (**)(_QWORD *))(*a3 + 72))(a3) == -1)
        goto LABEL_17;
      if (!v6)
        return;
    }
    else if (!v6)
    {
      return;
    }
LABEL_19:
    v8 = (std::string::value_type *)a2[3];
    if (v8 == (std::string::value_type *)a2[4])
      v9 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v9 = *v8;
    std::string::push_back(this, v9);
    v10 = a2[3];
    if (v10 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v10 + 1;
  }
  if (a2[3] != a2[4])
  {
    v6 = 0;
    if (!a3)
      goto LABEL_17;
    goto LABEL_11;
  }
  v7 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  v6 = v7 == -1;
  if (v7 == -1)
    a2 = 0;
  if (a3)
    goto LABEL_11;
LABEL_17:
  if (!v6)
  {
    a3 = 0;
    goto LABEL_19;
  }
}

void sub_18F00FAA0(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_18F00FABC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x193FFE118](a1 + 2);
  std::istream::~istream();
  MEMORY[0x193FFE3A0](a1 + 53);
  return a1;
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_7265()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t DSPGraph::Preprocessor::def(uint64_t a1, unsigned __int8 **a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  const void **v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v6)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = (uint64_t *)(v6 + 8 * (v7 >> 9));
    v9 = *v8;
    v10 = *v8 + 8 * (v7 & 0x1FF);
    v11 = *(_QWORD *)(v6 + (((*(_QWORD *)(a1 + 40) + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(_QWORD *)(a1 + 40) + v7) & 0x1FF);
    if (v10 == v11)
    {
LABEL_24:
      if (v10 != v11)
        return *(_QWORD *)v10;
    }
    else
    {
      v12 = *((_BYTE *)a2 + 23);
      if (v12 >= 0)
        v13 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      if (v12 >= 0)
        v14 = (unsigned __int8 *)a2;
      else
        v14 = *a2;
      do
      {
        v15 = *(unsigned __int8 *)(*(_QWORD *)v10 + 31);
        if ((v15 & 0x80u) == 0)
          v16 = (unsigned __int8 *)*(unsigned __int8 *)(*(_QWORD *)v10 + 31);
        else
          v16 = *(unsigned __int8 **)(*(_QWORD *)v10 + 16);
        if (v16 == v13)
        {
          v17 = (const void **)(*(_QWORD *)v10 + 8);
          if ((v15 & 0x80) != 0)
          {
            if (!memcmp(*v17, v14, *(_QWORD *)(*(_QWORD *)v10 + 16)))
              goto LABEL_24;
          }
          else
          {
            if (!*(_BYTE *)(*(_QWORD *)v10 + 31))
              goto LABEL_24;
            v18 = v14;
            while (*(unsigned __int8 *)v17 == *v18)
            {
              v17 = (const void **)((char *)v17 + 1);
              ++v18;
              if (!--v15)
                goto LABEL_24;
            }
          }
        }
        v10 += 8;
        if (v10 - v9 == 4096)
        {
          v19 = v8[1];
          ++v8;
          v9 = v19;
          v10 = v19;
        }
      }
      while (v10 != v11);
    }
  }
  v20 = operator new();
  DSPGraph::StringSubMacro::StringSubMacro(v20, (__int128 *)a2, a3);
  v21 = *(_QWORD *)(a1 + 32);
  if (!v21)
  {
    std::deque<std::unique_ptr<DSPGraph::Macro>>::__add_front_capacity((char **)a1);
    v21 = *(_QWORD *)(a1 + 32);
  }
  v22 = *(_QWORD *)(a1 + 8);
  v23 = (_QWORD *)(v22 + 8 * (v21 >> 9));
  if (*(_QWORD *)(a1 + 16) == v22)
    v24 = 0;
  else
    v24 = *v23 + 8 * (v21 & 0x1FF);
  if (v24 == *v23)
    v24 = *(v23 - 1) + 4096;
  *(_QWORD *)(v24 - 8) = v20;
  v25 = v21 - 1;
  v26 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v25;
  *(_QWORD *)(a1 + 40) = v26;
  v10 = *(_QWORD *)(v22 + ((v25 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v25 & 0x1FF);
  return *(_QWORD *)v10;
}

void sub_18F00FD5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::unique_ptr<DSPGraph::Macro>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 9];
    v7 = (uint64_t *)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(_QWORD *)(a1 + 40) + v5) & 0x1FF);
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        v9 = *v7;
        *v7 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        if ((char *)++v7 - (_BYTE *)*v6 == 4096)
        {
          v10 = (uint64_t *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (uint64_t *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 256;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    v13 = 512;
LABEL_16:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void DSPGraph::Preprocessor::~Preprocessor(DSPGraph::Preprocessor *this)
{
  void **v2;

  v2 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::deque<std::unique_ptr<DSPGraph::Macro>>::~deque[abi:ne180100]((uint64_t)this);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

void DSPGraph::Interpreter::parseOrderCommand(DSPGraph::Interpreter *this, const char **a2)
{
  DSPGraph::Graph *v4;
  unsigned __int8 *v5;
  DSPGraph::Box *v6;
  unsigned __int8 *v7;
  DSPGraph::Box *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v13 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)v14) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "parseOrderCommand");
    std::string::basic_string[abi:ne180100]<0>(&v9, "expected 'before' argument in 'order' command");
    DSPGraph::ThrowException(1886548769, &v11, 1072, &v10, &v9);
  }
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)__p) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "parseOrderCommand");
    std::string::basic_string[abi:ne180100]<0>(&v9, "expected 'after' argument in 'order' command");
    DSPGraph::ThrowException(1886548769, &v11, 1075, &v10, &v9);
  }
  v4 = (DSPGraph::Graph *)*((_QWORD *)this + 1);
  v5 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)v4 + 98, (unsigned __int8 *)v14);
  if (!v5 || (v6 = (DSPGraph::Box *)*((_QWORD *)v5 + 5)) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "parseOrderCommand");
    std::string::basic_string[abi:ne180100]<0>(&v9, "order : before box not found");
    DSPGraph::ThrowException(1852204065, &v11, 1080, &v10, &v9);
  }
  v7 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)v4 + 98, (unsigned __int8 *)__p);
  if (!v7 || (v8 = (DSPGraph::Box *)*((_QWORD *)v7 + 5)) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "parseOrderCommand");
    std::string::basic_string[abi:ne180100]<0>(&v9, "order : after box not found");
    DSPGraph::ThrowException(1852204065, &v11, 1085, &v10, &v9);
  }
  DSPGraph::Graph::addOrderingConstraint(v4, v6, v8);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_18F0101AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v33 - 33) < 0)
    operator delete(*(void **)(v33 - 56));
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseSetCommand(DSPGraph::Interpreter *this, const char **a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v22;
  _BYTE *v23;
  const char *v24[4];
  _BYTE v25[12];
  uint64_t v26;
  uint64_t v27;
  std::string v28;
  __int128 v29;
  __int128 v30;

  *(_QWORD *)&v25[4] = 0;
  v26 = 0;
  v27 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)&v25[4]) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v29, "parseSetCommand");
    std::string::basic_string[abi:ne180100]<0>(&v28, "expected name argument in 'set' command");
    DSPGraph::ThrowException(1886548769, &v30, 1095, &v29, (__int128 *)&v28);
  }
  v5 = HIBYTE(v27);
  if (v27 < 0)
    v5 = v26;
  if (v5 == 13)
  {
    v18 = (uint64_t *)&v25[4];
    if (v27 < 0)
      v18 = *(uint64_t **)&v25[4];
    v19 = *v18;
    v20 = *(uint64_t *)((char *)v18 + 5);
    if (v19 != 0x7275446563696C73 || v20 != 0x6E6F697461727544)
    {
LABEL_47:
      std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v29, "operator()");
      v23 = &v25[4];
      if (v27 < 0)
        v23 = *(_BYTE **)&v25[4];
      DSPGraph::strprintf((DSPGraph *)"unknown value name '%s' in 'set' command", &v28, v23);
      DSPGraph::ThrowException(1886548769, &v30, 1118, &v29, (__int128 *)&v28);
    }
    v17 = 0;
LABEL_39:
    *(_DWORD *)v25 = 0;
    if ((DSPGraph::Interpreter::parseUInt32((DSPGraph::Interpreter *)a2, (const char **)v25, v4) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v29, "parseSetCommand");
      std::operator+<char>();
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v28, (std::string *)((char *)v24 + 4), "' command");
      DSPGraph::ThrowException(1886548769, &v30, 1122, &v29, (__int128 *)&v28);
    }
    LODWORD(v24[0]) = 0;
    if ((DSPGraph::Interpreter::parseUInt32((DSPGraph::Interpreter *)a2, v24, v22) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v29, "parseSetCommand");
      std::operator+<char>();
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v28, (std::string *)((char *)v24 + 4), "' command");
      DSPGraph::ThrowException(1886548769, &v30, 1126, &v29, (__int128 *)&v28);
    }
    DSPGraph::Graph::setSliceDuration(*((_QWORD *)this + 1), *(int *)v25, (int)v24[0], v17);
    goto LABEL_42;
  }
  if (v5 == 21)
  {
    v11 = (uint64_t *)&v25[4];
    if (v27 < 0)
      v11 = *(uint64_t **)&v25[4];
    v12 = *v11;
    v13 = v11[1];
    v14 = *(uint64_t *)((char *)v11 + 13);
    if (v12 != 0x656C626169726176 || v13 != 0x7275446563696C53 || v14 != 0x6E6F697461727544)
      goto LABEL_47;
    v17 = 1;
    goto LABEL_39;
  }
  if (v5 != 14)
    goto LABEL_47;
  v6 = (uint64_t *)&v25[4];
  if (v27 < 0)
    v6 = *(uint64_t **)&v25[4];
  if (*v6 == 0x416D726F66726570 && *(uint64_t *)((char *)v6 + 6) == 0x6E7552797244416DLL)
  {
    BYTE4(v24[0]) = 0;
    if ((DSPGraph::Interpreter::parseBool((DSPGraph::Interpreter *)a2, (const char **)((char *)v24 + 4), (BOOL *)v4) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v29, "parseSetCommand");
      std::string::basic_string[abi:ne180100]<0>(&v28, "expected integer in 'set performADryRun' command");
      DSPGraph::ThrowException(1886548769, &v30, 1100, &v29, (__int128 *)&v28);
    }
    *(_BYTE *)(*((_QWORD *)this + 1) + 765) = BYTE4(v24[0]);
  }
  else
  {
    v8 = *v6;
    v9 = *(uint64_t *)((char *)v6 + 6);
    if (v8 != 0x694664726F636572 || v9 != 0x65707954656C6946)
      goto LABEL_47;
    HIDWORD(v24[0]) = 0;
    if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)a2, (const char **)((char *)v24 + 4), (unsigned int *)1) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v29, "parseSetCommand");
      std::string::basic_string[abi:ne180100]<0>(&v28, "expected 4 char code in 'set recordFileType' command");
      DSPGraph::ThrowException(1886548769, &v30, 1106, &v29, (__int128 *)&v28);
    }
    *(_DWORD *)(*((_QWORD *)this + 1) + 940) = HIDWORD(v24[0]);
  }
LABEL_42:
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)&v25[4]);
}

void sub_18F0106B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseBeginSubsetCommand(DSPGraph::Interpreter *this, const char **a2)
{
  unsigned __int8 **v3;
  unsigned __int8 **v4;
  unint64_t v5;
  unsigned __int8 ***v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned __int8 ***v14;
  unsigned __int8 **v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *__p[2];
  uint64_t v20;

  __p[0] = 0;
  __p[1] = 0;
  v20 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)__p) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v17, "parseBeginSubsetCommand");
    std::string::basic_string[abi:ne180100]<0>(&v16, "expected name argument in 'beginSubset' command");
    DSPGraph::ThrowException(1886548769, &v18, 1136, &v17, &v16);
  }
  v3 = DSPGraph::Graph::addSubset(*((_QWORD **)this + 1), (uint64_t)__p);
  v4 = v3;
  v6 = (unsigned __int8 ***)*((_QWORD *)this + 25);
  v5 = *((_QWORD *)this + 26);
  if ((unint64_t)v6 >= v5)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 24);
    v9 = v6 - (unsigned __int8 ***)v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = (unsigned __int8 ***)&v13[8 * v9];
    *v14 = v4;
    v7 = v14 + 1;
    if (v6 != v8)
    {
      do
      {
        v15 = *--v6;
        *--v14 = v15;
      }
      while (v6 != v8);
      v6 = (unsigned __int8 ***)*((_QWORD *)this + 24);
    }
    *((_QWORD *)this + 24) = v14;
    *((_QWORD *)this + 25) = v7;
    *((_QWORD *)this + 26) = &v13[8 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v3;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 25) = v7;
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_18F010924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseComponentNameCommand(DSPGraph::Interpreter *this, const char **a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void *v8[2];
  uint64_t v9;

  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  if ((DSPGraph::Interpreter::parseString(this, (uint64_t)v8) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "parseComponentNameCommand");
    std::string::basic_string[abi:ne180100]<0>(&v4, "expected a string in 'componentName' command");
    DSPGraph::ThrowException(1886548769, &v6, 1162, &v5, &v4);
  }
  v6 = 0uLL;
  v7 = 0;
  if ((DSPGraph::Interpreter::parseString(this, (uint64_t)&v6) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "parseComponentNameCommand");
    std::string::basic_string[abi:ne180100]<0>(&v3, "expected a string in 'componentName' command");
    DSPGraph::ThrowException(1886548769, &v5, 1167, &v4, &v3);
  }
  if (SHIBYTE(v7) < 0)
    operator delete((void *)v6);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
}

void sub_18F010AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseJackCommand(DSPGraph::Interpreter *this, const char **a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v6 = 0uLL;
  v7 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)&v6) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "parseJackCommand");
    std::string::basic_string[abi:ne180100]<0>(&v3, "jack : expected name.");
    DSPGraph::ThrowException(1886548769, &v5, 1194, &v4, &v3);
  }
  DSPGraph::Graph::addJack(*((_QWORD *)this + 1), &v6);
  if (SHIBYTE(v7) < 0)
    operator delete((void *)v6);
}

void sub_18F010BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseRecordCommand(DSPGraph::Interpreter *this, const char **a2)
{
  std::string *p_str;
  tm *v5;
  std::string *v6;
  std::string::value_type *v7;
  int64_t size;
  std::string *v9;
  int64_t v10;
  std::string *v11;
  int v12;
  std::string *v13;
  int64_t v14;
  std::string *v15;
  std::string *v16;
  char *v17;
  char *v18;
  size_t v19;
  _BOOL4 v20;
  char *v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  char v31;
  BOOL *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  std::string *v35;
  std::string v36;
  void *__p[2];
  unsigned __int8 v38;
  std::string v39;
  std::string v40;
  std::string __str;
  unsigned __int8 v42;
  _BYTE v43[15];
  std::string::value_type __s[23];
  unsigned __int8 v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  memset(&__str, 0, sizeof(__str));
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)&__str) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__s, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v40, "parseRecordCommand");
    std::string::basic_string[abi:ne180100]<0>(&v39, "record : expected a file path.");
    DSPGraph::ThrowException(1886548769, (__int128 *)__s, 1206, (__int128 *)&v40, (__int128 *)&v39);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (strchr((char *)p_str, 37))
  {
    bzero(__s, 0x400uLL);
    v36.__r_.__value_.__r.__words[0] = 0;
    time((time_t *)&v36);
    v5 = localtime((const time_t *)&v36);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &__str;
    else
      v6 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (!strftime(__s, 0x400uLL, (const char *)v6, v5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v39, "parseRecordCommand");
      std::string::basic_string[abi:ne180100]<0>(__p, "record file path from date failed to format");
      DSPGraph::ThrowException(1886548769, (__int128 *)&v40, 1215, (__int128 *)&v39, (__int128 *)__p);
    }
    v46 = 0;
    std::string::__assign_external(&__str, __s);
  }
  v7 = __s;
  std::string::basic_string[abi:ne180100]<0>(__s, "$TMPDIR/");
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &__str;
  else
    v9 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((v45 & 0x80u) == 0)
  {
    v10 = v45;
  }
  else
  {
    v7 = *(std::string::value_type **)__s;
    v10 = *(_QWORD *)&__s[8];
  }
  if (v10)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size >= v10)
    {
      v11 = (std::string *)((char *)v9 + size);
      v12 = *v7;
      v13 = v9;
      do
      {
        v14 = size - v10;
        if (v14 == -1)
          break;
        v15 = (std::string *)memchr(v13, v12, v14 + 1);
        if (!v15)
          break;
        v16 = v15;
        if (!memcmp(v15, v7, v10))
        {
          if (v16 == v11 || v16 != v9)
            break;
          goto LABEL_29;
        }
        v13 = (std::string *)((char *)&v16->__r_.__value_.__l.__data_ + 1);
        size = (char *)v11 - ((char *)&v16->__r_.__value_.__l.__data_ + 1);
      }
      while (size >= v10);
    }
  }
  else
  {
LABEL_29:
    v17 = getenv("TMPDIR");
    if (v17)
      v18 = v17;
    else
      v18 = "/tmp/";
    v19 = strlen(v18);
    if (v19)
      v20 = v18[v19 - 1] == 47;
    else
      v20 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v39, v18);
    if (v20)
      v21 = "";
    else
      v21 = "/";
    std::string::basic_string[abi:ne180100]<0>(__p, v21);
    if ((v38 & 0x80u) == 0)
      v22 = __p;
    else
      v22 = (void **)__p[0];
    if ((v38 & 0x80u) == 0)
      v23 = v38;
    else
      v23 = (std::string::size_type)__p[1];
    v24 = std::string::append(&v39, (const std::string::value_type *)v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if ((v45 & 0x80u) == 0)
      v26 = v45;
    else
      v26 = *(_QWORD *)&__s[8];
    std::string::basic_string(&v36, &__str, v26, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v42);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v36;
    else
      v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    else
      v28 = v36.__r_.__value_.__l.__size_;
    v29 = std::string::append(&v40, (const std::string::value_type *)v27, v28);
    v30 = v29->__r_.__value_.__r.__words[0];
    *(_QWORD *)v43 = v29->__r_.__value_.__l.__size_;
    *(_QWORD *)&v43[7] = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
    v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[0] = v30;
    __str.__r_.__value_.__l.__size_ = *(_QWORD *)v43;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v43[7];
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = v31;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if ((char)v38 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  memset(&v40, 0, sizeof(v40));
  *(_DWORD *)v43 = 0;
  if ((DSPGraph::Interpreter::parsePortDesc((char **)a2, (const char **)&v40.__r_.__value_.__l.__data_, (const char **)v43) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(__p, "parseRecordCommand");
    std::string::basic_string[abi:ne180100]<0>(&v36, "record port description parse failed.");
    DSPGraph::ThrowException(1886548769, (__int128 *)&v39, 1238, (__int128 *)__p, (__int128 *)&v36);
  }
  v42 = 0;
  DSPGraph::Interpreter::parseBool((DSPGraph::Interpreter *)a2, (const char **)&v42, v32);
  v33 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(*((_QWORD *)this + 1) + 784), (unsigned __int8 *)&v40);
  if (!v33 || (v34 = *((_QWORD *)v33 + 5)) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(__p, "parseRecordCommand");
    std::string::basic_string[abi:ne180100]<0>(&v36, "record box not found");
    DSPGraph::ThrowException(1852204065, (__int128 *)&v39, 1246, (__int128 *)__p, (__int128 *)&v36);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &__str;
  else
    v35 = (std::string *)__str.__r_.__value_.__r.__words[0];
  (*(void (**)(uint64_t, std::string *, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v34 + 152))(v34, v35, *(unsigned int *)v43, 1, v42, 4096);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if ((char)v45 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_18F011168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseInjectCommand(DSPGraph::Interpreter *this, const char **a2)
{
  BOOL *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  void **v7;
  const char *v8[3];
  const char *v9[3];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)v13) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "parseInjectCommand");
    std::string::basic_string[abi:ne180100]<0>((const char **)((char *)v9 + 4), "inject : expected a file path.");
    DSPGraph::ThrowException(1886548769, &v11, 1257, &v10, (__int128 *)((char *)v9 + 4));
  }
  v11 = 0uLL;
  v12 = 0;
  LODWORD(v9[0]) = 0;
  if ((DSPGraph::Interpreter::parsePortDesc((char **)a2, (const char **)&v11, v9) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>((const char **)((char *)v9 + 4), "parseInjectCommand");
    std::string::basic_string[abi:ne180100]<0>((const char **)((char *)v8 + 1), "inject port description parse failed.");
    DSPGraph::ThrowException(1886548769, &v10, 1264, (__int128 *)((char *)v9 + 4), (__int128 *)((char *)v8 + 1));
  }
  LOBYTE(v8[0]) = 0;
  DSPGraph::Interpreter::parseBool((DSPGraph::Interpreter *)a2, v8, v4);
  v5 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(*((_QWORD *)this + 1) + 784), (unsigned __int8 *)&v11);
  if (!v5 || (v6 = *((_QWORD *)v5 + 5)) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>((const char **)((char *)v9 + 4), "parseInjectCommand");
    std::string::basic_string[abi:ne180100]<0>((const char **)((char *)v8 + 1), "inject box not found");
    DSPGraph::ThrowException(1852204065, &v10, 1272, (__int128 *)((char *)v9 + 4), (__int128 *)((char *)v8 + 1));
  }
  if (v14 >= 0)
    v7 = v13;
  else
    v7 = (void **)v13[0];
  (*(void (**)(uint64_t, void **, _QWORD, _QWORD))(*(_QWORD *)v6 + 136))(v6, v7, LODWORD(v9[0]), LOBYTE(v8[0]));
  if (SHIBYTE(v12) < 0)
    operator delete((void *)v11);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

void sub_18F01149C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 41) < 0)
    operator delete(*(void **)(v29 - 64));
  if (*(char *)(v29 - 17) < 0)
    operator delete(*(void **)(v29 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseAnalysisCommand(DSPGraph::Interpreter *this, const char **a2)
{
  unsigned int v4;
  unsigned __int8 *v5;
  DSPGraph::Box *v6;
  __int128 v7;
  unsigned int v8[7];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;

  LODWORD(v12) = 0;
  if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)a2, (const char **)&v12, (unsigned int *)1) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v9, "parseAnalysisCommand");
    std::string::basic_string[abi:ne180100]<0>(&v8[1], "expected 4cc ID in 'analysis' command");
    DSPGraph::ThrowException(1886548769, &v10, 1326, &v9, (__int128 *)&v8[1]);
  }
  v4 = v12;
  if (!std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((_QWORD *)(*((_QWORD *)this + 1) + 952), v12))
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v9, "parseAnalysisCommand");
    std::string::basic_string[abi:ne180100]<0>(&v8[1], "expected valid AnalysisID in 'analysis' command");
    DSPGraph::ThrowException(1886548769, &v10, 1330, &v9, (__int128 *)&v8[1]);
  }
  v10 = 0uLL;
  v11 = 0;
  v8[0] = 0;
  if ((DSPGraph::Interpreter::parsePortDesc((char **)a2, (const char **)&v10, (const char **)v8) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8[1], "parseAnalysisCommand");
    std::string::basic_string[abi:ne180100]<0>(&v7, "analysis port description parse failed.");
    DSPGraph::ThrowException(1886548769, &v9, 1337, (__int128 *)&v8[1], &v7);
  }
  v5 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(*((_QWORD *)this + 1) + 784), (unsigned __int8 *)&v10);
  if (!v5 || (v6 = (DSPGraph::Box *)*((_QWORD *)v5 + 5)) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8[1], "parseAnalysisCommand");
    std::string::basic_string[abi:ne180100]<0>(&v7, "analysis box not found");
    DSPGraph::ThrowException(1852204065, &v9, 1341, (__int128 *)&v8[1], &v7);
  }
  DSPGraph::Box::addAnalysis(v6, v4, v8[0]);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)v10);
}

void sub_18F01173C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseAnalysisDefineCommand(DSPGraph::Interpreter *this, const char **a2)
{
  AudioComponentDescription *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t (**v10)();
  char *v11;
  _QWORD *v12;
  uint64_t (**v13)();
  uint64_t v14;
  uint64_t *v15;
  void **v16;
  __int128 v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  void **v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t (**v29)();
  uint64_t v30;
  uint64_t *v31;
  void **v32;
  __int128 v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  std::string __p;
  _BYTE v40[24];
  std::string v41;
  char *v42[2];
  int v43;
  __int128 v44;
  std::string v45;
  unsigned int v46;
  __int128 v47;
  __int128 *v48;
  std::string v49;
  __int128 v50;
  int v51;
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v46 = 0;
  if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)a2, (const char **)&v46, (unsigned int *)1) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v47, "parseAnalysisDefineCommand");
    std::string::basic_string[abi:ne180100]<0>(&v45, "expected 4cc ID in 'analysisDefine' command");
    DSPGraph::ThrowException(1886548769, (__int128 *)&v49, 1285, &v47, (__int128 *)&v45);
  }
  memset(&v45, 0, sizeof(v45));
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)&v45) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v47, "parseAnalysisDefineCommand");
    DSPGraph::strprintf((DSPGraph *)"expected name in 'analysisDefine' command: %s", &v44, *a2);
    DSPGraph::ThrowException(1886548769, (__int128 *)&v49, 1290, &v47, &v44);
  }
  v42[0] = 0;
  v42[1] = 0;
  v43 = 0;
  if (!DSPGraph::Interpreter::parseCompDesc((DSPGraph::Interpreter *)a2, (const char **)v42, v4))
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v47, "parseAnalysisDefineCommand");
    DSPGraph::strprintf((DSPGraph *)"expected class name or component description in 'analysisDefine' command: %s", &v44, *a2);
    DSPGraph::ThrowException(1886548769, (__int128 *)&v49, 1294, &v47, &v44);
  }
  if (LODWORD(v42[0]) >> 15 == 49898)
  {
    v5 = *((_QWORD *)this + 1);
    v6 = v46;
    *(_DWORD *)v40 = v46;
    *(_OWORD *)&v40[4] = *(_OWORD *)v42;
    *(_DWORD *)&v40[20] = v43;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v41, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
    else
      v41 = v45;
    v48 = 0;
    v11 = (char *)operator new(0x38uLL);
    *(_QWORD *)v11 = off_1E2916650;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)v40;
    *((_QWORD *)v11 + 3) = *(_QWORD *)&v40[16];
    *(std::string *)(v11 + 32) = v41;
    memset(&v41, 0, sizeof(v41));
    v48 = (__int128 *)v11;
    LODWORD(v44) = v6;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
      v14 = (uint64_t)v48;
      v50 = *(_OWORD *)v42;
      v51 = v43;
      v12 = v52;
      if (!v48)
        goto LABEL_17;
      if (v48 == &v47)
      {
        v53 = v52;
        (*(void (**)(__int128 *, _QWORD *))(v47 + 24))(&v47, v52);
LABEL_18:
        v15 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5 + 952, v6, &v44);
        v16 = (void **)(v15 + 3);
        if (*((char *)v15 + 47) < 0)
          operator delete(*v16);
        *(_OWORD *)v16 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
        v15[5] = v49.__r_.__value_.__r.__words[2];
        *((_BYTE *)&v49.__r_.__value_.__s + 23) = 0;
        v49.__r_.__value_.__s.__data_[0] = 0;
        v17 = v50;
        *((_DWORD *)v15 + 16) = v51;
        *((_OWORD *)v15 + 3) = v17;
        std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](v15 + 9, (uint64_t)v52);
        if (v53 == v52)
        {
          v18 = 4;
        }
        else
        {
          if (!v53)
            goto LABEL_28;
          v18 = 5;
          v12 = v53;
        }
        (*(void (**)(_QWORD *))(*v12 + 8 * v18))(v12);
LABEL_28:
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        v19 = v48;
        if (v48 == &v47)
        {
          v20 = 4;
          v19 = &v47;
        }
        else
        {
          if (!v48)
          {
LABEL_35:
            if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_80;
            v21 = (void *)v41.__r_.__value_.__r.__words[0];
LABEL_79:
            operator delete(v21);
            goto LABEL_80;
          }
          v20 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
        goto LABEL_35;
      }
      v13 = *(uint64_t (***)())v48;
    }
    else
    {
      v49 = v45;
      v50 = *(_OWORD *)v42;
      v51 = v43;
      v12 = v52;
      v13 = off_1E2916650;
    }
    v14 = v13[2]();
LABEL_17:
    v53 = (_QWORD *)v14;
    goto LABEL_18;
  }
  v7 = *((_QWORD *)this + 1);
  v8 = v46;
  if (v42[0] == (char *)0x74657374616E6C7ALL)
  {
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
    else
      __p = v45;
    v48 = 0;
    v27 = (char *)operator new(0x28uLL);
    *(_QWORD *)v27 = off_1E2916698;
    *((_DWORD *)v27 + 2) = v8;
    *(std::string *)(v27 + 16) = __p;
    memset(&__p, 0, sizeof(__p));
    v48 = (__int128 *)v27;
    LODWORD(v44) = v8;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
      v30 = (uint64_t)v48;
      v50 = *(_OWORD *)v42;
      v51 = v43;
      v28 = v52;
      if (!v48)
        goto LABEL_50;
      if (v48 == &v47)
      {
        v53 = v52;
        (*(void (**)(__int128 *, _QWORD *))(v47 + 24))(&v47, v52);
LABEL_51:
        v31 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7 + 952, v8, &v44);
        v32 = (void **)(v31 + 3);
        if (*((char *)v31 + 47) < 0)
          operator delete(*v32);
        *(_OWORD *)v32 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
        v31[5] = v49.__r_.__value_.__r.__words[2];
        *((_BYTE *)&v49.__r_.__value_.__s + 23) = 0;
        v49.__r_.__value_.__s.__data_[0] = 0;
        v33 = v50;
        *((_DWORD *)v31 + 16) = v51;
        *((_OWORD *)v31 + 3) = v33;
        std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](v31 + 9, (uint64_t)v52);
        if (v53 == v52)
        {
          v34 = 4;
        }
        else
        {
          if (!v53)
            goto LABEL_70;
          v34 = 5;
          v28 = v53;
        }
        (*(void (**)(_QWORD *))(*v28 + 8 * v34))(v28);
LABEL_70:
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        v37 = v48;
        if (v48 == &v47)
        {
          v38 = 4;
          v37 = &v47;
        }
        else
        {
          if (!v48)
          {
LABEL_77:
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_80;
            v21 = (void *)__p.__r_.__value_.__r.__words[0];
            goto LABEL_79;
          }
          v38 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
        goto LABEL_77;
      }
      v29 = *(uint64_t (***)())v48;
    }
    else
    {
      v49 = v45;
      v50 = *(_OWORD *)v42;
      v51 = v43;
      v28 = v52;
      v29 = off_1E2916698;
    }
    v30 = v29[2]();
LABEL_50:
    v53 = (_QWORD *)v30;
    goto LABEL_51;
  }
  *(_QWORD *)&v47 = &off_1E29166E0;
  v48 = &v47;
  LODWORD(v44) = v46;
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v49 = v45;
    v50 = *(_OWORD *)v42;
    v51 = v43;
    v9 = v52;
    v10 = &off_1E29166E0;
LABEL_12:
    v53 = v52;
    ((void (*)(uint64_t, _QWORD *))v10[3])((uint64_t)&v47, v52);
    goto LABEL_41;
  }
  std::string::__init_copy_ctor_external(&v49, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  v22 = (uint64_t)v48;
  v50 = *(_OWORD *)v42;
  v51 = v43;
  v9 = v52;
  if (v48)
  {
    if (v48 == &v47)
    {
      v10 = (uint64_t (**)())v47;
      goto LABEL_12;
    }
    v22 = (*(uint64_t (**)(void))(*(_QWORD *)v48 + 16))();
  }
  v53 = (_QWORD *)v22;
LABEL_41:
  v23 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7 + 952, v8, &v44);
  v24 = (void **)(v23 + 3);
  if (*((char *)v23 + 47) < 0)
    operator delete(*v24);
  *(_OWORD *)v24 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
  v23[5] = v49.__r_.__value_.__r.__words[2];
  *((_BYTE *)&v49.__r_.__value_.__s + 23) = 0;
  v49.__r_.__value_.__s.__data_[0] = 0;
  v25 = v50;
  *((_DWORD *)v23 + 16) = v51;
  *((_OWORD *)v23 + 3) = v25;
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](v23 + 9, (uint64_t)v52);
  if (v53 == v52)
  {
    v26 = 4;
    goto LABEL_60;
  }
  if (v53)
  {
    v26 = 5;
    v9 = v53;
LABEL_60:
    (*(void (**)(_QWORD *))(*v9 + 8 * v26))(v9);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  v35 = v48;
  if (v48 == &v47)
  {
    v36 = 4;
    v35 = &v47;
  }
  else
  {
    if (!v48)
      goto LABEL_80;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_80:
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
}

void sub_18F011F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void **a49)
{
  void **v50;
  uint64_t v51;

  v50 = a49;
  if (a49 == &a43)
  {
    v51 = 4;
    v50 = &a43;
  }
  else
  {
    if (!a49)
      goto LABEL_6;
    v51 = 5;
  }
  (*((void (**)(void))*v50 + v51))();
LABEL_6:
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x68uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = (int8x8_t)v18;
  else
    prime = (int8x8_t)v17;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = operator new(8 * *(_QWORD *)&prime);
  v21 = *(void **)a1;
  *(_QWORD *)a1 = v20;
  if (v21)
    operator delete(v21);
  v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
  while (*(_QWORD *)&prime != v22);
  v23 = (_QWORD *)*v12;
  if (*v12)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&prime)
        v24 %= *(_QWORD *)&prime;
    }
    else
    {
      v24 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
    v29 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *v23 = *v29;
          *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
          v29 = v23;
        }
        v30 = v24;
LABEL_56:
        v23 = v29;
        v29 = (_QWORD *)*v29;
        v24 = v30;
      }
      while (v29);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_18F01250C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void DSPGraph::AnalyzerBuilder::Info::~Info(DSPGraph::AnalyzerBuilder::Info *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)this + 48;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29166E0;
  return result;
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29166E0;
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2916698;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2916698;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x193FFE460);
}

char *std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  std::string *v3;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_1E2916698;
  *((_DWORD *)v2 + 2) = *(_DWORD *)(a1 + 8);
  v3 = (std::string *)(v2 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 16);
    *((_QWORD *)v2 + 4) = *(_QWORD *)(a1 + 32);
  }
  return v2;
}

void sub_18F0126D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  *(_QWORD *)a2 = off_1E2916698;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  v2 = (std::string *)(a2 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

uint64_t std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v4;
  _QWORD *v5;
  int v6;
  uint64_t result;
  __int128 v8;
  int v9;

  v4 = (__int128 *)(a1 + 16);
  v5 = (_QWORD *)operator new();
  v6 = *(_DWORD *)(a1 + 8);
  v8 = xmmword_18F117190;
  v9 = 0;
  result = DSPGraph::Analyzer::Analyzer((uint64_t)v5, v6, &v8, v4);
  *v5 = off_1E290C9F0;
  *a2 = v5;
  return result;
}

void sub_18F0127EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10B3C40FE0296F9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,DSPGraph::AnalyzerBuilder::Info>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,DSPGraph::AnalyzerBuilder::Info>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 80);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

uint64_t std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2916650;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2916650;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x193FFE460);
}

char *std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  std::string *v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_1E2916650;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  v3 = (std::string *)(v2 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  }
  return v2;
}

void sub_18F0129B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  std::string *v3;
  __int128 v4;

  *(_QWORD *)a2 = off_1E2916650;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = (std::string *)(a2 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 55) < 0)
    operator delete(__p[4]);
  operator delete(__p);
}

uint64_t std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t result;

  v4 = (__int128 *)(a1 + 12);
  v5 = (__int128 *)(a1 + 32);
  v6 = operator new();
  result = DSPGraph::Analyzer::Analyzer(v6, *(_DWORD *)(a1 + 8), v4, v5);
  *(_QWORD *)v6 = off_1E290B518;
  *(_BYTE *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *a2 = v6;
  return result;
}

void sub_18F012AD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10B3C4013FA6A31);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Interpreter::parseBool(DSPGraph::Interpreter *this, const char **a2, BOOL *a3)
{
  unint64_t *v5;
  std::string::size_type size;
  char v7;
  std::string *p_p;
  uint64_t v9;
  std::string *v10;
  int v11;
  char v12;
  std::string *v13;
  int data;
  int v15;
  std::string __p;
  uint64_t v19;
  unsigned int __val[2];
  uint64_t v21;

  DSPGraph::skipspace(this, a2);
  v19 = *(_QWORD *)this;
  memset(&__p, 0, sizeof(__p));
  v21 = v19;
  *(_QWORD *)__val = 0;
  if (!DSPGraph::Interpreter::parseUInt64((DSPGraph::Interpreter *)&v21, (const char **)__val, v5)
    || __val[1])
  {
    if ((DSPGraph::Interpreter::parseName((DSPGraph *)&v19, (uint64_t)&__p) & 1) == 0)
    {
      v9 = 0;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_28;
      return v9;
    }
  }
  else
  {
    v19 = v21;
    std::to_string(&__p, __val[0]);
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size != 1)
  {
    if (size != 5)
    {
      if (size == 4)
      {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        if (LODWORD(p_p->__r_.__value_.__l.__data_) == 1702195828)
          goto LABEL_20;
      }
      goto LABEL_27;
    }
    v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &__p;
    data = (int)v13->__r_.__value_.__l.__data_;
    v15 = v13->__r_.__value_.__s.__data_[4];
    if (data != 1936482662 || v15 != 101)
      goto LABEL_27;
LABEL_30:
    v12 = 0;
LABEL_31:
    *(_BYTE *)a2 = v12;
    *(_QWORD *)this = v19;
    v9 = 1;
    if ((v7 & 0x80) == 0)
      return v9;
    goto LABEL_28;
  }
  v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &__p;
  v11 = v10->__r_.__value_.__s.__data_[0];
  if (v11 == 48)
    goto LABEL_30;
  if (v11 == 49)
  {
LABEL_20:
    v12 = 1;
    goto LABEL_31;
  }
LABEL_27:
  v9 = 0;
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_28:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_18F012C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<std::vector<unsigned char>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_18F012CD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  if (*(_BYTE *)(v1 + 24))
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::StringSubMacro::StringSubMacro(uint64_t a1, __int128 *a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *(_QWORD *)a1 = off_1E2911C90;
  v5 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_1E290D2F8;
  v7 = (std::string *)(a1 + 56);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_BYTE *)(a1 + 80) = 0;
  return a1;
}

void sub_18F012D94(_Unwind_Exception *a1)
{
  void **v1;

  DSPGraph::Macro::~Macro(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::unique_ptr<DSPGraph::Macro>>::__add_front_capacity(char **a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = a1[4];
  if (v4 - (unint64_t)&v5[(_QWORD)a1[5]] < 0x200)
  {
    v6 = a1[3];
    v7 = *a1;
    v8 = v6 - *a1;
    if (v2 - v3 >= (unint64_t)v8)
    {
      if (v6 == v7)
        v12 = 1;
      else
        v12 = v8 >> 2;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v12);
      v15 = v14;
      v16 = operator new(0x1000uLL);
      if (v15)
      {
        v17 = &v13[8 * v15];
      }
      else
      {
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(1uLL);
        v17 = &v30[8 * v31];
        if (v13)
          operator delete(v13);
        v13 = v30;
      }
      *(_QWORD *)v13 = v16;
      v32 = v13 + 8;
      v33 = a1[1];
      if (v33 == a1[2])
      {
        v36 = v13;
        v34 = v13;
        v50 = v13 + 8;
      }
      else
      {
        v34 = v13;
        do
        {
          if (v32 == v17)
          {
            if (v13 <= v34)
            {
              if (v32 == v34)
                v41 = 1;
              else
                v41 = (v32 - v34) >> 2;
              v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v41);
              v44 = v42;
              v36 = &v42[8 * (v41 >> 2)];
              v35 = v36;
              v45 = v32 - v13;
              if (v32 != v13)
              {
                v35 = &v36[v45 & 0xFFFFFFFFFFFFFFF8];
                v46 = 8 * (v45 >> 3);
                v47 = v36;
                do
                {
                  v48 = *(_QWORD *)v13;
                  v13 += 8;
                  *(_QWORD *)v47 = v48;
                  v47 += 8;
                  v46 -= 8;
                }
                while (v46);
              }
              v32 = &v42[8 * v43];
              if (v34)
                operator delete(v34);
              v34 = v44;
            }
            else
            {
              v37 = (v13 - v34) >> 3;
              if (v37 >= -1)
                v38 = v37 + 1;
              else
                v38 = v37 + 2;
              v39 = v32;
              if (v32 != v13)
              {
                memmove(&v13[-8 * (v38 >> 1)], v13, v32 - v13);
                v39 = v13;
              }
              v40 = -(v38 >> 1);
              v35 = &v32[-8 * (v38 >> 1)];
              v36 = &v39[8 * v40];
            }
          }
          else
          {
            v35 = v32;
            v36 = v13;
            v32 = v17;
          }
          v17 = v32;
          v49 = *(_QWORD *)v33;
          v33 += 8;
          *(_QWORD *)v35 = v49;
          v50 = v35 + 8;
          v32 = v50;
          v13 = v36;
        }
        while (v33 != a1[2]);
      }
      v51 = *a1;
      *a1 = v34;
      a1[1] = v36;
      a1[2] = v50;
      a1[3] = v17;
      if (v50 - v36 == 8)
        v52 = 256;
      else
        v52 = (uint64_t)(a1[4] + 512);
      a1[4] = (char *)v52;
      if (v51)
        operator delete(v51);
    }
    else
    {
      v9 = operator new(0x1000uLL);
      v10 = v9;
      if (v3 == v7)
      {
        if (v2 == v6)
        {
          if (v2 == v3)
            v18 = 1;
          else
            v18 = (v2 - v7) >> 2;
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v18);
          v21 = &v19[8 * (v18 >> 2)];
          v22 = a1[1];
          v2 = v21;
          v23 = a1[2] - v22;
          if (v23)
          {
            v2 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
            v24 = 8 * (v23 >> 3);
            v25 = v21;
            do
            {
              v26 = *(_QWORD *)v22;
              v22 += 8;
              *(_QWORD *)v25 = v26;
              v25 += 8;
              v24 -= 8;
            }
            while (v24);
          }
          v27 = *a1;
          *a1 = v19;
          a1[1] = v21;
          a1[2] = v2;
          a1[3] = &v19[8 * v20];
          if (v27)
          {
            operator delete(v27);
            v2 = a1[2];
          }
        }
        *(_QWORD *)v2 = v10;
        v28 = a1[2];
        a1[2] = v28 + 8;
        v53 = *(_QWORD *)v28;
        a1[2] = v28;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)a1, &v53);
        v11 = (uint64_t)a1[1];
      }
      else
      {
        *((_QWORD *)v3 - 1) = v9;
        v11 = (uint64_t)(a1[1] - 8);
        a1[1] = (char *)v11;
      }
      if (&a1[2][-v11] == (char *)8)
        v29 = 256;
      else
        v29 = (uint64_t)(a1[4] + 512);
      a1[4] = (char *)v29;
    }
  }
  else
  {
    a1[4] = v5 + 512;
    v53 = *((_QWORD *)v2 - 1);
    a1[2] = v2 - 8;
    std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)a1, &v53);
  }
}

void sub_18F0130FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v1);
  if (v2)
    operator delete(v2);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_18F0131D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

unsigned __int8 *DSPGraph::NewBoxRegistry::newBox(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  unsigned __int8 *result;

  result = std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<std::string>((_QWORD *)(a1 + 8), a2);
  if (result)
    return (unsigned __int8 *)std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(*((_QWORD *)result + 8), a3, a4);
  return result;
}

BOOL DSPGraph::NewBoxRegistry::has(DSPGraph::NewBoxRegistry *this, const AudioComponentDescription *a2)
{
  AudioComponentDescription v3;

  v3 = *a2;
  return std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<AudioComponentDescription>((_QWORD *)this + 6, &v3.componentType) != 0;
}

uint64_t *DSPGraph::NewBoxRegistry::newBox(DSPGraph::NewBoxRegistry *this, const AudioComponentDescription *a2, int a3, int a4)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<AudioComponentDescription>((_QWORD *)this + 6, &a2->componentType);
  if (result)
    return (uint64_t *)std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(result[8], a3, a4);
  return result;
}

void _ZNSt3__110__function6__funcIZZN8DSPGraph14NewBoxRegistryC1EvENK3__0clIPKciNS2_14CalculationBox14OperatorDomainENS8_16OperatorCodomainENS8_8OperatorEEEDaT_T0_T1_T2_T3_EUljjE_NS_9allocatorISI_EEFPNS2_3BoxEjjEED0Ev()
{
  JUMPOUT(0x193FFE460);
}

__n128 _ZNKSt3__110__function6__funcIZZN8DSPGraph14NewBoxRegistryC1EvENK3__0clIPKciNS2_14CalculationBox14OperatorDomainENS8_16OperatorCodomainENS8_8OperatorEEEDaT_T0_T1_T2_T3_EUljjE_NS_9allocatorISI_EEFPNS2_3BoxEjjEE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E29171D8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN8DSPGraph14NewBoxRegistryC1EvENK3__0clIPKciNS2_14CalculationBox14OperatorDomainENS8_16OperatorCodomainENS8_8OperatorEEEDaT_T0_T1_T2_T3_EUljjE_NS_9allocatorISI_EEFPNS2_3BoxEjjEEclEOjSP_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  DSPGraph::Box *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "operator()");
    caulk::make_string((caulk *)"wrong number of inputs for '%s' box (must be 0)", (uint64_t)&v13, *(_QWORD *)(a1 + 8));
    DSPGraph::ThrowException(1701602593, &v15, 1679, &v14, &v13);
  }
  if (*a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "operator()");
    caulk::make_string((caulk *)"wrong number of output for '%s' box (must be 0)", (uint64_t)&v13, *(_QWORD *)(a1 + 8));
    DSPGraph::ThrowException(1701602593, &v15, 1683, &v14, &v13);
  }
  v4 = operator new();
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v8 = DSPGraph::Box::Box((DSPGraph::Box *)v4, 0, 0);
  *(_QWORD *)v4 = &off_1E290CFF8;
  *(_QWORD *)(v4 + 772) = v5;
  *(_DWORD *)(v4 + 780) = v7;
  *(_DWORD *)(v4 + 784) = v6;
  *(_QWORD *)(v4 + 824) = 0;
  if ((v6 - 4) > 4)
  {
    v9 = 2;
  }
  else
  {
    v9 = qword_18F10C058[v6 - 4];
    if (!v9)
      goto LABEL_11;
    if (v9 > 2)
      boost::container::dtl::static_storage_allocator<DSPGraph::CalculationBox::Value,2ul,0ul,true>::on_capacity_overflow(v8);
  }
  v10 = v4 + 792;
  v11 = v9;
  do
  {
    *(_QWORD *)v10 = 0;
    *(_DWORD *)(v10 + 8) = 0;
    v10 += 16;
    --v11;
  }
  while (v11);
  v9 += *(_QWORD *)(v4 + 824);
LABEL_11:
  *(_QWORD *)(v4 + 824) = v9;
  return v4;
}

void sub_18F0134E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916F98;
  return result;
}

DSPGraph::Box *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  DSPGraph::Box *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*a2 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of inputs for SingleRateLPCMConverterBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1667, &v6, &v5);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of outputs for SingleRateLPCMConverterBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1669, &v6, &v5);
  }
  v3 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v3, 1u, 1u);
  *(_QWORD *)v3 = &off_1E29110E0;
  *((_QWORD *)v3 + 97) = 0;
  return v3;
}

void sub_18F0136B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916F50;
  return result;
}

uint64_t std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  char *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*a2 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v6, "wrong number of inputs for NonFiniteProtectionBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v8, 1656, &v7, &v6);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v6, "wrong number of outputs for NonFiniteProtectionBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v8, 1659, &v7, &v6);
  }
  v3 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v3, 1u, 1u);
  *(_QWORD *)v3 = &off_1E2910E50;
  *(_DWORD *)(v3 + 772) = 1109393408;
  *(_OWORD *)(v3 + 776) = 0u;
  *(_OWORD *)(v3 + 792) = 0u;
  *(_DWORD *)(v3 + 807) = 0;
  *(_DWORD *)(v3 + 812) = 10;
  v4 = (char *)operator new(0xC00uLL);
  *(_QWORD *)(v3 + 776) = v4;
  *(_QWORD *)(v3 + 784) = v4;
  *(_QWORD *)(v3 + 792) = v4 + 3072;
  return v3;
}

void sub_18F0138BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916F08;
  return result;
}

uint64_t std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v0, 0, 0);
  *(_QWORD *)v0 = &off_1E290D328;
  *(_DWORD *)(v0 + 772) = 0;
  *(_OWORD *)(v0 + 776) = xmmword_18F117360;
  __asm { FMOV            V0.2S, #0.25 }
  *(_QWORD *)(v0 + 792) = _D0;
  *(_DWORD *)(v0 + 800) = -1036779520;
  return v0;
}

void sub_18F0139F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F3C40C7A618E7);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916EC0;
  return result;
}

uint64_t std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned int rep;
  uint64_t v5;
  uint64_t i;
  int v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (*a2 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v9, "wrong number of inputs for MantissaRandomizerBox (must be 1)");
    DSPGraph::ThrowException(1701602593, &v11, 1640, &v10, &v9);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v9, "wrong number of outputs for MantissaRandomizerBox (must be 1)");
    DSPGraph::ThrowException(1701602593, &v11, 1643, &v10, &v9);
  }
  v3 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v3, 1u, 1u);
  *(_QWORD *)v3 = &off_1E2910BC0;
  *(_BYTE *)(v3 + 772) = 0;
  *(_DWORD *)(v3 + 776) = 0;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  *(_DWORD *)(v3 + 784) = rep;
  v5 = 1;
  for (i = 197; i != 820; ++i)
  {
    v7 = 1812433253 * (rep ^ (rep >> 30));
    rep = v7 + v5;
    *(_DWORD *)(v3 + 4 * i) = i + v7 - 196;
    ++v5;
  }
  *(_QWORD *)(v3 + 3280) = 0;
  return v3;
}

void sub_18F013BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916E78;
  return result;
}

DSPGraph::Box *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  DSPGraph::Box *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*a2 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of inputs for DenormalEliminatorBox (must be 1)");
    DSPGraph::ThrowException(1701602593, &v7, 1629, &v6, &v5);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of outputs for DenormalEliminatorBox (must be 1)");
    DSPGraph::ThrowException(1701602593, &v7, 1632, &v6, &v5);
  }
  v3 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v3, 1u, 1u);
  *(_QWORD *)v3 = &off_1E2910930;
  *((_BYTE *)v3 + 772) = 0;
  return v3;
}

void sub_18F013D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916E30;
  return result;
}

uint64_t std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v0, 0, 0);
  *(_QWORD *)v0 = &off_1E29103C0;
  *(_QWORD *)(v0 + 772) = 1065353216;
  return v0;
}

void sub_18F013EA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F3C40C16BE0E1);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916DE8;
  return result;
}

uint64_t std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a3;
  v4 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v4, 0, v3);
  *(_QWORD *)v4 = &off_1E2910130;
  *(_QWORD *)(v4 + 772) = 0;
  *(_OWORD *)(v4 + 784) = 0u;
  *(_OWORD *)(v4 + 800) = 0u;
  *(_OWORD *)(v4 + 816) = 0u;
  *(_OWORD *)(v4 + 832) = 0u;
  return v4;
}

void sub_18F013F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F3C408EDD2FDCLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916DA0;
  return result;
}

DSPGraph::Box *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  DSPGraph::Box *v3;

  v2 = *a2;
  v3 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v3, v2, 0);
  *(_QWORD *)v3 = &off_1E290B850;
  return v3;
}

void sub_18F014024(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F3C40614663B3);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916D58;
  return result;
}

uint64_t std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()()
{
  uint64_t v0;

  v0 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v0, 1u, 1u);
  *(_QWORD *)v0 = &off_1E2912D80;
  *(_QWORD *)(v0 + 776) = 0;
  *(_BYTE *)(v0 + 784) = 0;
  *(_QWORD *)(v0 + 792) = 0;
  *(_QWORD *)(v0 + 808) = 0;
  *(_QWORD *)(v0 + 800) = 0;
  return v0;
}

void sub_18F0140EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F3C40AB73B33ELL);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916D10;
  return result;
}

DSPGraph::Box *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()()
{
  DSPGraph::Box *v0;

  v0 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v0, 1u, 1u);
  *(_QWORD *)v0 = &off_1E290E2C0;
  return v0;
}

void sub_18F0141A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F3C40614663B3);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916CC8;
  return result;
}

DSPGraph::Box *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v3;
  DSPGraph::Box *v4;

  v3 = *a3;
  v4 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v4, 1u, v3);
  *(_QWORD *)v4 = &off_1E2910650;
  return v4;
}

void sub_18F014258(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F3C40614663B3);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916C80;
  return result;
}

DSPGraph::Box *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  DSPGraph::Box *v3;

  v2 = *a2;
  v3 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v3, v2, 1u);
  *(_QWORD *)v3 = &off_1E290E550;
  return v3;
}

void sub_18F014310(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F3C40614663B3);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916C38;
  return result;
}

uint64_t std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*a2 != 1 || *a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v6, "TimeFreqBox number of inputs and outputs must be one.");
    DSPGraph::ThrowException(1701602593, &v8, 1579, &v7, &v6);
  }
  v4 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v4, 1u, 1u);
  *(_QWORD *)v4 = &off_1E290C3E0;
  *(_QWORD *)(v4 + 776) = 0;
  *(_QWORD *)(v4 + 792) = 0;
  *(_QWORD *)(v4 + 784) = 0;
  *(_DWORD *)(v4 + 800) = 0;
  return v4;
}

void sub_18F014440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916BF0;
  return result;
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _QWORD *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*a2 != 1 || *a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v6, "FreqSRCBox number of inputs and outputs must be one.");
    DSPGraph::ThrowException(1701602593, &v8, 1571, &v7, &v6);
  }
  v4 = (_QWORD *)operator new();
  bzero(v4, 0x390uLL);
  DSPGraph::Box::Box((DSPGraph::Box *)v4, 1u, 1u);
  *(_QWORD *)((char *)v4 + 772) = 0;
  v4[109] = 0;
  v4[111] = 0;
  v4[110] = 0;
  *((_OWORD *)v4 + 49) = 0u;
  *((_OWORD *)v4 + 50) = 0u;
  *((_BYTE *)v4 + 816) = 0;
  *(_OWORD *)(v4 + 103) = 0u;
  *(_OWORD *)(v4 + 105) = 0u;
  *(_OWORD *)((char *)v4 + 849) = 0u;
  *v4 = &off_1E290BAE0;
  *((_BYTE *)v4 + 896) = 0;
  return v4;
}

void sub_18F0145E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916BA8;
  return result;
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _QWORD *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*a2 != 1 || *a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v6, "ReblockerBox number of inputs and outputs must be one.");
    DSPGraph::ThrowException(1701602593, &v8, 1563, &v7, &v6);
  }
  v4 = (_QWORD *)operator new();
  bzero(v4, 0x380uLL);
  DSPGraph::Box::Box((DSPGraph::Box *)v4, 1u, 1u);
  *(_QWORD *)((char *)v4 + 772) = 0;
  *(_OWORD *)(v4 + 109) = 0u;
  *((_OWORD *)v4 + 49) = 0u;
  *((_OWORD *)v4 + 50) = 0u;
  *((_BYTE *)v4 + 816) = 0;
  *(_OWORD *)(v4 + 103) = 0u;
  *(_OWORD *)(v4 + 105) = 0u;
  *(_OWORD *)((char *)v4 + 849) = 0u;
  *v4 = &off_1E290C710;
  return v4;
}

void sub_18F014788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916B60;
  return result;
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _QWORD *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*a2 != 1 || *a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v6, "SRCBox number of inputs and outputs must be one.");
    DSPGraph::ThrowException(1701602593, &v8, 1555, &v7, &v6);
  }
  v4 = (_QWORD *)operator new();
  bzero(v4, 0x3B0uLL);
  DSPGraph::Box::Box((DSPGraph::Box *)v4, 1u, 1u);
  *(_QWORD *)((char *)v4 + 772) = 0;
  v4[109] = 0;
  v4[111] = 0;
  v4[110] = 0;
  *((_OWORD *)v4 + 49) = 0u;
  *((_OWORD *)v4 + 50) = 0u;
  *((_BYTE *)v4 + 816) = 0;
  *(_OWORD *)(v4 + 103) = 0u;
  *(_OWORD *)(v4 + 105) = 0u;
  *(_OWORD *)((char *)v4 + 849) = 0u;
  *v4 = &off_1E2911F88;
  v4[112] = 0x7F6E6F726DLL;
  *((_BYTE *)v4 + 904) = 0;
  v4[114] = 0;
  *((_BYTE *)v4 + 920) = 0;
  *((_DWORD *)v4 + 232) = 0;
  return v4;
}

void sub_18F014948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916B18;
  return result;
}

DSPGraph::Box *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  DSPGraph::Box *v5;

  v3 = *a2;
  v4 = *a3;
  v5 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v5, v3, v4);
  *(_QWORD *)v5 = &off_1E2912A18;
  *((_BYTE *)v5 + 772) = 1;
  return v5;
}

void sub_18F014A60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F3C4012623749);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916AD0;
  return result;
}

DSPGraph::Box *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unsigned int v3;
  DSPGraph::Box *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v6, "AverageBox number of outputs must be 1");
    DSPGraph::ThrowException(1701602593, &v8, 1539, &v7, &v6);
  }
  v3 = *a2;
  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v6, "AverageBox number of inputs cannot be 0.");
    DSPGraph::ThrowException(1701602593, &v8, 1542, &v7, &v6);
  }
  v4 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v4, v3, 1u);
  *(_QWORD *)v4 = &off_1E290B5C0;
  return v4;
}

void sub_18F014BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916A88;
  return result;
}

DSPGraph::Box *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  DSPGraph::Box *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v6, "wrong number of outputs for MixBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v8, 1528, &v7, &v6);
  }
  v3 = *a2;
  if (!(_DWORD)v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v6, "MixBox number of inputs cannot be zero.");
    DSPGraph::ThrowException(1701602593, &v8, 1531, &v7, &v6);
  }
  v4 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v4, v3, 1u);
  *(_QWORD *)v4 = &off_1E2911CF8;
  LODWORD(v8) = 1065353216;
  std::vector<float>::vector((_QWORD *)v4 + 97, v3, &v8);
  LODWORD(v8) = 1065353216;
  std::vector<float>::vector((_QWORD *)v4 + 100, v3, &v8);
  return v4;
}

void sub_18F014DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916A40;
  return result;
}

DSPGraph::Box *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unsigned int v3;
  DSPGraph::Box *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v6, "wrong number of outputs for SumBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v8, 1517, &v7, &v6);
  }
  v3 = *a2;
  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v6, "SumBox number of inputs cannot be zero.");
    DSPGraph::ThrowException(1701602593, &v8, 1520, &v7, &v6);
  }
  v4 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v4, v3, 1u);
  *(_QWORD *)v4 = &off_1E2912268;
  return v4;
}

void sub_18F014FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29169F8;
  return result;
}

DSPGraph::Box *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  DSPGraph::Box *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*a2 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of inputs for CopyBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1508, &v6, &v5);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of outputs for CopyBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1510, &v6, &v5);
  }
  v3 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v3, 1u, 1u);
  *(_QWORD *)v3 = &off_1E29124F8;
  return v3;
}

void sub_18F015180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29169B0;
  return result;
}

uint64_t std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*a2 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of inputs for DBGainBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1499, &v6, &v5);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of outputs for DBGainBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1501, &v6, &v5);
  }
  v3 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v3, 1u, 1u);
  *(_DWORD *)(v3 + 776) = 1065353216;
  *(_BYTE *)(v3 + 780) = 0;
  *(_OWORD *)(v3 + 784) = xmmword_18F117370;
  *(_QWORD *)(v3 + 800) = 0x3F80000000000000;
  *(_DWORD *)(v3 + 808) = 0;
  *(_WORD *)(v3 + 812) = 257;
  *(_QWORD *)v3 = &off_1E2913048;
  return v3;
}

void sub_18F01537C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916968;
  return result;
}

uint64_t std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*a2 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of inputs for VectorGainBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1490, &v6, &v5);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of outputs for VectorGainBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1492, &v6, &v5);
  }
  v3 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v3, 1u, 1u);
  *(_QWORD *)v3 = &off_1E290CD68;
  *(_QWORD *)(v3 + 772) = 0x100000000;
  *(_OWORD *)(v3 + 784) = 0u;
  *(_OWORD *)(v3 + 800) = 0u;
  *(_OWORD *)(v3 + 816) = 0u;
  return v3;
}

void sub_18F015560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916920;
  return result;
}

DSPGraph::Box *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  DSPGraph::Box *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*a2 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of inputs for arithmetic abs box. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1481, &v6, &v5);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of outputs for arithmetic abs box. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1483, &v6, &v5);
  }
  v3 = (DSPGraph::Box *)operator new();
  DSPGraph::Box::Box(v3, 1u, 1u);
  *(_QWORD *)v3 = &off_1E290D5F0;
  return v3;
}

void sub_18F01572C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29168D8;
  return result;
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _QWORD *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*a2 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of inputs for arithmetic sum box. must be 2.");
    DSPGraph::ThrowException(1701602593, &v7, 1472, &v6, &v5);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of outputs for arithmetic sum box. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1474, &v6, &v5);
  }
  v3 = (_QWORD *)operator new();
  bzero(v3, 0x310uLL);
  DSPGraph::Box::Box((DSPGraph::Box *)v3, 2u, 1u);
  v3[97] = 0;
  *v3 = &off_1E290E030;
  return v3;
}

void sub_18F015908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::ArithmeticSumBox::~ArithmeticSumBox(DSPGraph::ArithmeticSumBox *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E290EFE0;
  v2 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DSPGraph::Box::~Box(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E290EFE0;
  v2 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::ArithmeticSumBox::ClassName(DSPGraph::ArithmeticSumBox *this)
{
  return "asum";
}

double DSPGraph::ArithmeticSumBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 2.73571922e161;
  *(_OWORD *)a1 = xmmword_18F117200;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticSumBox>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t result;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v4 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v39 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v39 = (_QWORD *)*v39;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v39, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v7) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v40 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v40 = (_QWORD *)*v40;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v40, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v8 = *(unsigned int **)(*(_QWORD *)(v6 + 56) + 80);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 32) + 40))(v7 + 32);
  v10 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v41 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v41 = (_QWORD *)*v41;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v41, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v11 = *(_DWORD **)(*(_QWORD *)(v9 + 56) + 80);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  if (*v8 != *v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v64, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v63, "process");
    v42 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v42)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "in");
      v43 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v43 = (_QWORD *)*v43;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v43, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
    }
    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v54 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)(*(_QWORD *)(a1 + 72) - v54) > 0x20)
    {
      v55 = *(unsigned int *)(*(_QWORD *)(v53 + 120) + 28);
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v54 + 32) + 40))(v54 + 32);
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", &v67, v55, *(unsigned int *)(*(_QWORD *)(v56 + 120) + 28));
      DSPGraph::ThrowException(1667788321, &v64, 807, &v63, &v67);
    }
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v60 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v60 = (_QWORD *)*v60;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v60, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v13 = *(_DWORD **)(*(_QWORD *)(v12 + 56) + 80);
  if (*v8 != *v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&v64, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v63, "process");
    v44 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v44)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "in");
      v45 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v45 = (_QWORD *)*v45;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v45, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
    }
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
    v58 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v58)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "out");
      v59 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v59 = (_QWORD *)*v59;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v59, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
    }
    v61 = *(unsigned int *)(*(_QWORD *)(v57 + 120) + 28);
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", &v67, v61, *(unsigned int *)(*(_QWORD *)(v62 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v64, 810, &v63, &v67);
  }
  v14 = v8[3];
  if (v14 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 24))(*(_QWORD *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "process");
    v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 24))(*(_QWORD *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", &v65, (v46 * a2), v8[3]);
    DSPGraph::ThrowException(1718449215, &v67, 815, &v66, &v65);
  }
  v15 = v11[3];
  if (v15 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 32))(*(_QWORD *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "process");
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 32))(*(_QWORD *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 1 should be at least %u bytes, but is %u.", &v65, (v47 * a2), v11[3]);
    DSPGraph::ThrowException(1718449215, &v67, 818, &v66, &v65);
  }
  v16 = *v8;
  if ((_DWORD)v16)
  {
    v17 = v13 + 4;
    v18 = (uint64_t *)(v11 + 4);
    v19 = (uint64_t *)(v8 + 4);
    do
    {
      v21 = *v19;
      v19 += 2;
      v20 = v21;
      v22 = *v18;
      v18 += 2;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 776) + 16))(*(_QWORD *)(a1 + 776), a2, v20, v22, *v17);
      *((_DWORD *)v17 - 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 40))(*(_QWORD *)(a1 + 776))
                           * a2;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  v23 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v23)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v48 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v48 = (_QWORD *)*v48;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v48, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
  v25 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v49 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v49 = (_QWORD *)*v49;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v49, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v26 = *(_QWORD *)(v24 + 56);
  v27 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25) + 56);
  v28 = *(_OWORD *)(v26 + 8);
  v29 = *(_OWORD *)(v26 + 24);
  v30 = *(_OWORD *)(v26 + 40);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
  *(_OWORD *)(v27 + 40) = v30;
  *(_OWORD *)(v27 + 24) = v29;
  *(_OWORD *)(v27 + 8) = v28;
  v31 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v31)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v50 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v50 = (_QWORD *)*v50;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v50, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
  v33 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v33) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v51 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v51 = (_QWORD *)*v51;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v51, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v34 = *(_DWORD *)(*(_QWORD *)(v32 + 56) + 72);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 + 32) + 40))(v33 + 32);
  v36 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v36)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v52 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v52 = (_QWORD *)*v52;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v52, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v37 = (*(_DWORD *)(*(_QWORD *)(v35 + 56) + 72) | 0xFFFFFFEF) & v34;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
  *(_DWORD *)(*(_QWORD *)(result + 56) + 72) = v37;
  return result;
}

void sub_18F0163F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticSumBox>::initialize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v18;
  uint64_t (**v20)();
  _QWORD *v21;
  _QWORD *v22;
  uint64_t (**v23)();
  uint64_t result;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0x40 || ((*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) & 0x1FFFFFFFE0) != 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "initialize");
    DSPGraph::strprintf((DSPGraph *)"There must be two inputs and one output, instead of %u and %u.", &v47, (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, (*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5);
    DSPGraph::ThrowException(1701602593, &v49, 745, &v48, &v47);
  }
  if (v3 == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v25 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v25 = (_QWORD *)*v25;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v25, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v5 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v5) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v26 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v26 = (_QWORD *)*v26;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v26, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 120) + 28);
  if (v6 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 32) + 40))(v5 + 32) + 120)
                       + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
    v27 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v27)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "in");
      v28 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v28 = (_QWORD *)*v28;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v28, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
    }
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    v36 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)(*(_QWORD *)(a1 + 72) - v36) > 0x20)
    {
      v37 = *(unsigned int *)(*(_QWORD *)(v35 + 120) + 28);
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 + 32) + 40))(v36 + 32);
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", &v49, v37, *(unsigned int *)(*(_QWORD *)(v38 + 120) + 28));
      DSPGraph::ThrowException(1667788321, &v46, 750, &v45, &v49);
    }
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v42 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v42 = (_QWORD *)*v42;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v42, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v29 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v29 = (_QWORD *)*v29;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v29, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v9 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "out");
    v30 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v30 = (_QWORD *)*v30;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v47, v30, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1418, &v48, &v47);
  }
  v10 = *(_DWORD *)(*(_QWORD *)(v8 + 120) + 28);
  if (v10 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120) + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
    v31 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v31)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "in");
      v32 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v32 = (_QWORD *)*v32;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v32, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
    }
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
    v40 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v40)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "out");
      v41 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v41 = (_QWORD *)*v41;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v47, v41, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1418, &v48, &v47);
    }
    v43 = *(unsigned int *)(*(_QWORD *)(v39 + 120) + 28);
    v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", &v49, v43, *(unsigned int *)(*(_QWORD *)(v44 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v46, 756, &v45, &v49);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v33 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v33 = (_QWORD *)*v33;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v33, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  v13 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v13) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v34 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v34 = (_QWORD *)*v34;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v34, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v14 = *(_DWORD *)(*(_QWORD *)(v12 + 120) + 8);
  v15 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 32) + 40))(v13 + 32) + 120)
                  + 8);
  if (v14 == 1819304813 && v15 == 1819304813)
  {
    v21 = (_QWORD *)operator new();
    v22 = v21;
    v23 = &off_1E290F9D0;
    goto LABEL_26;
  }
  if (v14 == 1819304813 && v15 != 1819304813)
  {
    v21 = (_QWORD *)operator new();
    v22 = v21;
    v23 = &off_1E290F990;
LABEL_26:
    *v21 = v23;
    goto LABEL_29;
  }
  v18 = (_QWORD *)operator new();
  v22 = v18;
  if (v14 != 1819304813 && v15 == 1819304813)
    v20 = &off_1E290F910;
  else
    v20 = &off_1E290F950;
  *v18 = v20;
LABEL_29:
  result = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 776) = v22;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_18F016D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, float *a3, float *a4, float *a5)
{
  DSPSplitComplex v5;
  DSPSplitComplex __B;
  DSPSplitComplex __A;

  __A.realp = a3;
  __A.imagp = &a3[__N];
  __B.realp = a4;
  __B.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zvadd(&__A, 1, &__B, 1, &v5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, float *a3, const float *__B, float *a5)
{
  DSPSplitComplex v5;
  DSPSplitComplex __A;

  __A.realp = a3;
  __A.imagp = &a3[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zrvadd(&__A, 1, __B, 1, &v5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, const float *a3, float *a4, float *a5)
{
  DSPSplitComplex v5;
  DSPSplitComplex __A;

  __A.realp = a4;
  __A.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zrvadd(&__A, 1, a3, 1, &v5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, const float *__A, const float *__B, float *a5)
{
  vDSP_vadd(__A, 1, __B, 1, a5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 4;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916890;
  return result;
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _QWORD *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*a2 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of inputs for arithmetic difference box. Must be 2.");
    DSPGraph::ThrowException(1701602593, &v7, 1463, &v6, &v5);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of outputs for arithmetic difference box. Must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1465, &v6, &v5);
  }
  v3 = (_QWORD *)operator new();
  bzero(v3, 0x310uLL);
  DSPGraph::Box::Box((DSPGraph::Box *)v3, 2u, 1u);
  v3[97] = 0;
  *v3 = &off_1E290FC10;
  return v3;
}

void sub_18F0171E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::ArithmeticDiffBox::~ArithmeticDiffBox(DSPGraph::ArithmeticDiffBox *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E290F270;
  v2 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DSPGraph::Box::~Box(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E290F270;
  v2 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::ArithmeticDiffBox::ClassName(DSPGraph::ArithmeticDiffBox *this)
{
  return "adif";
}

double DSPGraph::ArithmeticDiffBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.43485253e161;
  *(_OWORD *)a1 = xmmword_18F1171F0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticDiffBox>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t result;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v4 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v39 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v39 = (_QWORD *)*v39;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v39, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v7) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v40 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v40 = (_QWORD *)*v40;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v40, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v8 = *(unsigned int **)(*(_QWORD *)(v6 + 56) + 80);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 32) + 40))(v7 + 32);
  v10 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v41 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v41 = (_QWORD *)*v41;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v41, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v11 = *(_DWORD **)(*(_QWORD *)(v9 + 56) + 80);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  if (*v8 != *v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v64, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v63, "process");
    v42 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v42)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "in");
      v43 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v43 = (_QWORD *)*v43;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v43, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
    }
    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v54 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)(*(_QWORD *)(a1 + 72) - v54) > 0x20)
    {
      v55 = *(unsigned int *)(*(_QWORD *)(v53 + 120) + 28);
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v54 + 32) + 40))(v54 + 32);
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", &v67, v55, *(unsigned int *)(*(_QWORD *)(v56 + 120) + 28));
      DSPGraph::ThrowException(1667788321, &v64, 807, &v63, &v67);
    }
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v60 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v60 = (_QWORD *)*v60;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v60, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v13 = *(_DWORD **)(*(_QWORD *)(v12 + 56) + 80);
  if (*v8 != *v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&v64, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v63, "process");
    v44 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v44)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "in");
      v45 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v45 = (_QWORD *)*v45;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v45, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
    }
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
    v58 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v58)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "out");
      v59 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v59 = (_QWORD *)*v59;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v59, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
    }
    v61 = *(unsigned int *)(*(_QWORD *)(v57 + 120) + 28);
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", &v67, v61, *(unsigned int *)(*(_QWORD *)(v62 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v64, 810, &v63, &v67);
  }
  v14 = v8[3];
  if (v14 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 24))(*(_QWORD *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "process");
    v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 24))(*(_QWORD *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", &v65, (v46 * a2), v8[3]);
    DSPGraph::ThrowException(1718449215, &v67, 815, &v66, &v65);
  }
  v15 = v11[3];
  if (v15 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 32))(*(_QWORD *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "process");
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 32))(*(_QWORD *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 1 should be at least %u bytes, but is %u.", &v65, (v47 * a2), v11[3]);
    DSPGraph::ThrowException(1718449215, &v67, 818, &v66, &v65);
  }
  v16 = *v8;
  if ((_DWORD)v16)
  {
    v17 = v13 + 4;
    v18 = (uint64_t *)(v11 + 4);
    v19 = (uint64_t *)(v8 + 4);
    do
    {
      v21 = *v19;
      v19 += 2;
      v20 = v21;
      v22 = *v18;
      v18 += 2;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 776) + 16))(*(_QWORD *)(a1 + 776), a2, v20, v22, *v17);
      *((_DWORD *)v17 - 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 40))(*(_QWORD *)(a1 + 776))
                           * a2;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  v23 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v23)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v48 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v48 = (_QWORD *)*v48;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v48, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
  v25 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v49 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v49 = (_QWORD *)*v49;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v49, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v26 = *(_QWORD *)(v24 + 56);
  v27 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25) + 56);
  v28 = *(_OWORD *)(v26 + 8);
  v29 = *(_OWORD *)(v26 + 24);
  v30 = *(_OWORD *)(v26 + 40);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
  *(_OWORD *)(v27 + 40) = v30;
  *(_OWORD *)(v27 + 24) = v29;
  *(_OWORD *)(v27 + 8) = v28;
  v31 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v31)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v50 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v50 = (_QWORD *)*v50;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v50, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
  v33 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v33) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v51 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v51 = (_QWORD *)*v51;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v51, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v34 = *(_DWORD *)(*(_QWORD *)(v32 + 56) + 72);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 + 32) + 40))(v33 + 32);
  v36 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v36)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v52 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v52 = (_QWORD *)*v52;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v52, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v37 = (*(_DWORD *)(*(_QWORD *)(v35 + 56) + 72) | 0xFFFFFFEF) & v34;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
  *(_DWORD *)(*(_QWORD *)(result + 56) + 72) = v37;
  return result;
}

void sub_18F017CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticDiffBox>::initialize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v18;
  uint64_t (**v20)();
  _QWORD *v21;
  _QWORD *v22;
  uint64_t (**v23)();
  uint64_t result;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0x40 || ((*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) & 0x1FFFFFFFE0) != 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "initialize");
    DSPGraph::strprintf((DSPGraph *)"There must be two inputs and one output, instead of %u and %u.", &v47, (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, (*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5);
    DSPGraph::ThrowException(1701602593, &v49, 745, &v48, &v47);
  }
  if (v3 == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v25 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v25 = (_QWORD *)*v25;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v25, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v5 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v5) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v26 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v26 = (_QWORD *)*v26;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v26, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 120) + 28);
  if (v6 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 32) + 40))(v5 + 32) + 120)
                       + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
    v27 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v27)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "in");
      v28 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v28 = (_QWORD *)*v28;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v28, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
    }
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    v36 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)(*(_QWORD *)(a1 + 72) - v36) > 0x20)
    {
      v37 = *(unsigned int *)(*(_QWORD *)(v35 + 120) + 28);
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 + 32) + 40))(v36 + 32);
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", &v49, v37, *(unsigned int *)(*(_QWORD *)(v38 + 120) + 28));
      DSPGraph::ThrowException(1667788321, &v46, 750, &v45, &v49);
    }
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v42 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v42 = (_QWORD *)*v42;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v42, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v29 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v29 = (_QWORD *)*v29;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v29, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v9 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "out");
    v30 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v30 = (_QWORD *)*v30;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v47, v30, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1418, &v48, &v47);
  }
  v10 = *(_DWORD *)(*(_QWORD *)(v8 + 120) + 28);
  if (v10 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120) + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
    v31 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v31)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "in");
      v32 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v32 = (_QWORD *)*v32;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v32, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
    }
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
    v40 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v40)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "out");
      v41 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v41 = (_QWORD *)*v41;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v47, v41, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1418, &v48, &v47);
    }
    v43 = *(unsigned int *)(*(_QWORD *)(v39 + 120) + 28);
    v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", &v49, v43, *(unsigned int *)(*(_QWORD *)(v44 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v46, 756, &v45, &v49);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v33 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v33 = (_QWORD *)*v33;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v33, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  v13 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v13) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v34 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v34 = (_QWORD *)*v34;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v34, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v14 = *(_DWORD *)(*(_QWORD *)(v12 + 120) + 8);
  v15 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 32) + 40))(v13 + 32) + 120)
                  + 8);
  if (v14 == 1819304813 && v15 == 1819304813)
  {
    v21 = (_QWORD *)operator new();
    v22 = v21;
    v23 = &off_1E290FAD0;
    goto LABEL_26;
  }
  if (v14 == 1819304813 && v15 != 1819304813)
  {
    v21 = (_QWORD *)operator new();
    v22 = v21;
    v23 = &off_1E290FA90;
LABEL_26:
    *v21 = v23;
    goto LABEL_29;
  }
  v18 = (_QWORD *)operator new();
  v22 = v18;
  if (v14 != 1819304813 && v15 == 1819304813)
    v20 = &off_1E290FA10;
  else
    v20 = &off_1E290FA50;
  *v18 = v20;
LABEL_29:
  result = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 776) = v22;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_18F01865C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, float *a3, float *a4, float *a5)
{
  DSPSplitComplex v5;
  DSPSplitComplex __B;
  DSPSplitComplex __A;

  __A.realp = a3;
  __A.imagp = &a3[__N];
  __B.realp = a4;
  __B.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zvsub(&__A, 1, &__B, 1, &v5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, float *a3, const float *__B, float *a5)
{
  DSPSplitComplex v5;
  DSPSplitComplex __A;

  __A.realp = a3;
  __A.imagp = &a3[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zrvsub(&__A, 1, __B, 1, &v5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, const float *a3, float *a4, float *a5)
{
  vDSP_Length v5;
  DSPSplitComplex v6;
  DSPSplitComplex __A;

  v5 = __N;
  __A.realp = a4;
  __A.imagp = &a4[__N];
  v6.realp = a5;
  v6.imagp = &a5[__N];
  vDSP_zrvsub(&__A, 1, a3, 1, &v6, 1, __N);
  vDSP_zvneg(&v6, 1, &v6, 1, v5);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, const float *a3, const float *__B, float *a5)
{
  vDSP_vsub(__B, 1, a3, 1, a5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 4;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916848;
  return result;
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _QWORD *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*a2 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of inputs for arithmetic max box. Must be 2.");
    DSPGraph::ThrowException(1701602593, &v7, 1453, &v6, &v5);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of outputs for arithmetic max box. Must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1455, &v6, &v5);
  }
  v3 = (_QWORD *)operator new();
  bzero(v3, 0x310uLL);
  DSPGraph::Box::Box((DSPGraph::Box *)v3, 2u, 1u);
  v3[97] = 0;
  *v3 = &off_1E290DB10;
  return v3;
}

void sub_18F018AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::ArithmeticMaxBox::~ArithmeticMaxBox(DSPGraph::ArithmeticMaxBox *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E290EAC0;
  v2 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DSPGraph::Box::~Box(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E290EAC0;
  v2 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::ArithmeticMaxBox::ClassName(DSPGraph::ArithmeticMaxBox *this)
{
  return "amax";
}

double DSPGraph::ArithmeticMaxBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 2.06533485e161;
  *(_OWORD *)a1 = xmmword_18F1171E0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticMaxBox>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t result;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v4 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v39 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v39 = (_QWORD *)*v39;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v39, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v7) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v40 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v40 = (_QWORD *)*v40;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v40, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v8 = *(unsigned int **)(*(_QWORD *)(v6 + 56) + 80);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 32) + 40))(v7 + 32);
  v10 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v41 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v41 = (_QWORD *)*v41;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v41, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v11 = *(_DWORD **)(*(_QWORD *)(v9 + 56) + 80);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  if (*v8 != *v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v64, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v63, "process");
    v42 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v42)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "in");
      v43 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v43 = (_QWORD *)*v43;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v43, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
    }
    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v54 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)(*(_QWORD *)(a1 + 72) - v54) > 0x20)
    {
      v55 = *(unsigned int *)(*(_QWORD *)(v53 + 120) + 28);
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v54 + 32) + 40))(v54 + 32);
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", &v67, v55, *(unsigned int *)(*(_QWORD *)(v56 + 120) + 28));
      DSPGraph::ThrowException(1667788321, &v64, 807, &v63, &v67);
    }
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v60 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v60 = (_QWORD *)*v60;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v60, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v13 = *(_DWORD **)(*(_QWORD *)(v12 + 56) + 80);
  if (*v8 != *v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&v64, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v63, "process");
    v44 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v44)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "in");
      v45 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v45 = (_QWORD *)*v45;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v45, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
    }
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
    v58 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v58)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "out");
      v59 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v59 = (_QWORD *)*v59;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v59, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
    }
    v61 = *(unsigned int *)(*(_QWORD *)(v57 + 120) + 28);
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", &v67, v61, *(unsigned int *)(*(_QWORD *)(v62 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v64, 810, &v63, &v67);
  }
  v14 = v8[3];
  if (v14 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 24))(*(_QWORD *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "process");
    v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 24))(*(_QWORD *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", &v65, (v46 * a2), v8[3]);
    DSPGraph::ThrowException(1718449215, &v67, 815, &v66, &v65);
  }
  v15 = v11[3];
  if (v15 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 32))(*(_QWORD *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "process");
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 32))(*(_QWORD *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 1 should be at least %u bytes, but is %u.", &v65, (v47 * a2), v11[3]);
    DSPGraph::ThrowException(1718449215, &v67, 818, &v66, &v65);
  }
  v16 = *v8;
  if ((_DWORD)v16)
  {
    v17 = v13 + 4;
    v18 = (uint64_t *)(v11 + 4);
    v19 = (uint64_t *)(v8 + 4);
    do
    {
      v21 = *v19;
      v19 += 2;
      v20 = v21;
      v22 = *v18;
      v18 += 2;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 776) + 16))(*(_QWORD *)(a1 + 776), a2, v20, v22, *v17);
      *((_DWORD *)v17 - 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 40))(*(_QWORD *)(a1 + 776))
                           * a2;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  v23 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v23)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v48 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v48 = (_QWORD *)*v48;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v48, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
  v25 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v49 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v49 = (_QWORD *)*v49;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v49, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v26 = *(_QWORD *)(v24 + 56);
  v27 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25) + 56);
  v28 = *(_OWORD *)(v26 + 8);
  v29 = *(_OWORD *)(v26 + 24);
  v30 = *(_OWORD *)(v26 + 40);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
  *(_OWORD *)(v27 + 40) = v30;
  *(_OWORD *)(v27 + 24) = v29;
  *(_OWORD *)(v27 + 8) = v28;
  v31 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v31)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v50 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v50 = (_QWORD *)*v50;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v50, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
  v33 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v33) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v51 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v51 = (_QWORD *)*v51;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v51, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v34 = *(_DWORD *)(*(_QWORD *)(v32 + 56) + 72);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 + 32) + 40))(v33 + 32);
  v36 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v36)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v52 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v52 = (_QWORD *)*v52;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v52, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v37 = (*(_DWORD *)(*(_QWORD *)(v35 + 56) + 72) | 0xFFFFFFEF) & v34;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
  *(_DWORD *)(*(_QWORD *)(result + 56) + 72) = v37;
  return result;
}

void sub_18F0195C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticMaxBox>::initialize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v17;
  uint64_t result;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0x40 || ((*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) & 0x1FFFFFFFE0) != 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
    DSPGraph::strprintf((DSPGraph *)"There must be two inputs and one output, instead of %u and %u.", &v46, (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, (*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5);
    DSPGraph::ThrowException(1701602593, &v48, 745, &v47, &v46);
  }
  if (v3 == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    v19 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v19 = (_QWORD *)*v19;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v19, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v5 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v5) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    v20 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v20 = (_QWORD *)*v20;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v20, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
  }
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 120) + 28);
  if (v6 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 32) + 40))(v5 + 32) + 120)
                       + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v44, "initialize");
    v21 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v21)
    {
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v47, "in");
      v22 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v22 = (_QWORD *)*v22;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v22, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
    }
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    v34 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)(*(_QWORD *)(a1 + 72) - v34) > 0x20)
    {
      v35 = *(unsigned int *)(*(_QWORD *)(v33 + 120) + 28);
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v34 + 32) + 40))(v34 + 32);
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", &v48, v35, *(unsigned int *)(*(_QWORD *)(v36 + 120) + 28));
      DSPGraph::ThrowException(1667788321, &v45, 750, &v44, &v48);
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    v41 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v41 = (_QWORD *)*v41;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v41, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    v23 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v23 = (_QWORD *)*v23;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v23, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v9 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "out");
    v24 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v24 = (_QWORD *)*v24;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v46, v24, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v48, 1418, &v47, &v46);
  }
  v10 = *(_DWORD *)(*(_QWORD *)(v8 + 120) + 28);
  if (v10 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120) + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v44, "initialize");
    v25 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v25)
    {
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v47, "in");
      v26 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v26 = (_QWORD *)*v26;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v26, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
    }
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
    v38 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v38)
    {
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v47, "out");
      v39 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v39 = (_QWORD *)*v39;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v46, v39, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v48, 1418, &v47, &v46);
    }
    v42 = *(unsigned int *)(*(_QWORD *)(v37 + 120) + 28);
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", &v48, v42, *(unsigned int *)(*(_QWORD *)(v43 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v45, 756, &v44, &v48);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    v27 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v27 = (_QWORD *)*v27;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v27, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  v13 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v13) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    v28 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v28 = (_QWORD *)*v28;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v28, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
  }
  v14 = *(_DWORD *)(*(_QWORD *)(v12 + 120) + 8);
  v15 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 32) + 40))(v13 + 32) + 120)
                  + 8);
  if (v14 != 1819304813 || v15 != 1819304813)
  {
    if (v14 == 1819304813 && v15 != 1819304813)
    {
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      DSPGraph::strprintf((DSPGraph *)"Can't use real input for one bus and complex input for another with '%s' box", &v46, v32);
      DSPGraph::ThrowException(1718444833, &v48, 773, &v47, &v46);
    }
    if (v14 == 1819304813 || v15 != 1819304813)
    {
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      DSPGraph::strprintf((DSPGraph *)"Can't use complex inputs with '%s' box", &v46, v31);
      DSPGraph::ThrowException(1718444833, &v48, 787, &v47, &v46);
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    DSPGraph::strprintf((DSPGraph *)"Can't use complex input for one bus and real input for another with '%s' box", &v46, v40);
    DSPGraph::ThrowException(1718444833, &v48, 780, &v47, &v46);
  }
  v17 = (_QWORD *)operator new();
  *v17 = &off_1E290F890;
  result = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 776) = v17;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_18F01A028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMaxBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMaxBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, const float *__A, const float *__B, float *a5)
{
  vDSP_vmax(__A, 1, __B, 1, a5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMaxBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMaxBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMaxBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 4;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916800;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916800;
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _QWORD *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*a2 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of inputs for arithmetic min box. Must be 2.");
    DSPGraph::ThrowException(1701602593, &v7, 1444, &v6, &v5);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of outputs for arithmetic min box. Must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1446, &v6, &v5);
  }
  v3 = (_QWORD *)operator new();
  bzero(v3, 0x310uLL);
  DSPGraph::Box::Box((DSPGraph::Box *)v3, 2u, 1u);
  v3[97] = 0;
  *v3 = &off_1E290DDA0;
  return v3;
}

void sub_18F01A350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::ArithmeticMinBox::~ArithmeticMinBox(DSPGraph::ArithmeticMinBox *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E290ED50;
  v2 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DSPGraph::Box::~Box(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E290ED50;
  v2 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::ArithmeticMinBox::ClassName(DSPGraph::ArithmeticMinBox *this)
{
  return "amin";
}

double DSPGraph::ArithmeticMinBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 2.06752086e161;
  *(_OWORD *)a1 = xmmword_18F1171D0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticMinBox>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t result;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v4 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v39 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v39 = (_QWORD *)*v39;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v39, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v7) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v40 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v40 = (_QWORD *)*v40;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v40, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v8 = *(unsigned int **)(*(_QWORD *)(v6 + 56) + 80);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 32) + 40))(v7 + 32);
  v10 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v41 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v41 = (_QWORD *)*v41;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v41, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v11 = *(_DWORD **)(*(_QWORD *)(v9 + 56) + 80);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  if (*v8 != *v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v64, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v63, "process");
    v42 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v42)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "in");
      v43 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v43 = (_QWORD *)*v43;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v43, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
    }
    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v54 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)(*(_QWORD *)(a1 + 72) - v54) > 0x20)
    {
      v55 = *(unsigned int *)(*(_QWORD *)(v53 + 120) + 28);
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v54 + 32) + 40))(v54 + 32);
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", &v67, v55, *(unsigned int *)(*(_QWORD *)(v56 + 120) + 28));
      DSPGraph::ThrowException(1667788321, &v64, 807, &v63, &v67);
    }
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v60 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v60 = (_QWORD *)*v60;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v60, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v13 = *(_DWORD **)(*(_QWORD *)(v12 + 56) + 80);
  if (*v8 != *v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&v64, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v63, "process");
    v44 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v44)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "in");
      v45 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v45 = (_QWORD *)*v45;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v45, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
    }
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
    v58 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v58)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "out");
      v59 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v59 = (_QWORD *)*v59;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v59, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
    }
    v61 = *(unsigned int *)(*(_QWORD *)(v57 + 120) + 28);
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", &v67, v61, *(unsigned int *)(*(_QWORD *)(v62 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v64, 810, &v63, &v67);
  }
  v14 = v8[3];
  if (v14 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 24))(*(_QWORD *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "process");
    v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 24))(*(_QWORD *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", &v65, (v46 * a2), v8[3]);
    DSPGraph::ThrowException(1718449215, &v67, 815, &v66, &v65);
  }
  v15 = v11[3];
  if (v15 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 32))(*(_QWORD *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "process");
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 32))(*(_QWORD *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 1 should be at least %u bytes, but is %u.", &v65, (v47 * a2), v11[3]);
    DSPGraph::ThrowException(1718449215, &v67, 818, &v66, &v65);
  }
  v16 = *v8;
  if ((_DWORD)v16)
  {
    v17 = v13 + 4;
    v18 = (uint64_t *)(v11 + 4);
    v19 = (uint64_t *)(v8 + 4);
    do
    {
      v21 = *v19;
      v19 += 2;
      v20 = v21;
      v22 = *v18;
      v18 += 2;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 776) + 16))(*(_QWORD *)(a1 + 776), a2, v20, v22, *v17);
      *((_DWORD *)v17 - 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 40))(*(_QWORD *)(a1 + 776))
                           * a2;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  v23 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v23)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v48 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v48 = (_QWORD *)*v48;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v48, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
  v25 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v49 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v49 = (_QWORD *)*v49;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v49, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v26 = *(_QWORD *)(v24 + 56);
  v27 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25) + 56);
  v28 = *(_OWORD *)(v26 + 8);
  v29 = *(_OWORD *)(v26 + 24);
  v30 = *(_OWORD *)(v26 + 40);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
  *(_OWORD *)(v27 + 40) = v30;
  *(_OWORD *)(v27 + 24) = v29;
  *(_OWORD *)(v27 + 8) = v28;
  v31 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v31)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v50 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v50 = (_QWORD *)*v50;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v50, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
  v33 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v33) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v51 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v51 = (_QWORD *)*v51;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v51, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v34 = *(_DWORD *)(*(_QWORD *)(v32 + 56) + 72);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 + 32) + 40))(v33 + 32);
  v36 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v36)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v52 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v52 = (_QWORD *)*v52;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v52, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v37 = (*(_DWORD *)(*(_QWORD *)(v35 + 56) + 72) | 0xFFFFFFEF) & v34;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
  *(_DWORD *)(*(_QWORD *)(result + 56) + 72) = v37;
  return result;
}

void sub_18F01AE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticMinBox>::initialize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v17;
  uint64_t result;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0x40 || ((*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) & 0x1FFFFFFFE0) != 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
    DSPGraph::strprintf((DSPGraph *)"There must be two inputs and one output, instead of %u and %u.", &v46, (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, (*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5);
    DSPGraph::ThrowException(1701602593, &v48, 745, &v47, &v46);
  }
  if (v3 == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    v19 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v19 = (_QWORD *)*v19;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v19, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v5 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v5) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    v20 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v20 = (_QWORD *)*v20;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v20, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
  }
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 120) + 28);
  if (v6 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 32) + 40))(v5 + 32) + 120)
                       + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v44, "initialize");
    v21 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v21)
    {
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v47, "in");
      v22 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v22 = (_QWORD *)*v22;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v22, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
    }
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    v34 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)(*(_QWORD *)(a1 + 72) - v34) > 0x20)
    {
      v35 = *(unsigned int *)(*(_QWORD *)(v33 + 120) + 28);
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v34 + 32) + 40))(v34 + 32);
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", &v48, v35, *(unsigned int *)(*(_QWORD *)(v36 + 120) + 28));
      DSPGraph::ThrowException(1667788321, &v45, 750, &v44, &v48);
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    v41 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v41 = (_QWORD *)*v41;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v41, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    v23 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v23 = (_QWORD *)*v23;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v23, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v9 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "out");
    v24 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v24 = (_QWORD *)*v24;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v46, v24, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v48, 1418, &v47, &v46);
  }
  v10 = *(_DWORD *)(*(_QWORD *)(v8 + 120) + 28);
  if (v10 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120) + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v44, "initialize");
    v25 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v25)
    {
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v47, "in");
      v26 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v26 = (_QWORD *)*v26;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v26, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
    }
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
    v38 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v38)
    {
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v47, "out");
      v39 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v39 = (_QWORD *)*v39;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v46, v39, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v48, 1418, &v47, &v46);
    }
    v42 = *(unsigned int *)(*(_QWORD *)(v37 + 120) + 28);
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", &v48, v42, *(unsigned int *)(*(_QWORD *)(v43 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v45, 756, &v44, &v48);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    v27 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v27 = (_QWORD *)*v27;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v27, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  v13 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v13) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    v28 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v28 = (_QWORD *)*v28;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v46, v28, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v48, 1410, &v47, &v46);
  }
  v14 = *(_DWORD *)(*(_QWORD *)(v12 + 120) + 8);
  v15 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 32) + 40))(v13 + 32) + 120)
                  + 8);
  if (v14 != 1819304813 || v15 != 1819304813)
  {
    if (v14 == 1819304813 && v15 != 1819304813)
    {
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      DSPGraph::strprintf((DSPGraph *)"Can't use real input for one bus and complex input for another with '%s' box", &v46, v32);
      DSPGraph::ThrowException(1718444833, &v48, 773, &v47, &v46);
    }
    if (v14 == 1819304813 || v15 != 1819304813)
    {
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      DSPGraph::strprintf((DSPGraph *)"Can't use complex inputs with '%s' box", &v46, v31);
      DSPGraph::ThrowException(1718444833, &v48, 787, &v47, &v46);
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    DSPGraph::strprintf((DSPGraph *)"Can't use complex input for one bus and real input for another with '%s' box", &v46, v40);
    DSPGraph::ThrowException(1718444833, &v48, 780, &v47, &v46);
  }
  v17 = (_QWORD *)operator new();
  *v17 = &off_1E290F8D0;
  result = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 776) = v17;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_18F01B8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMinBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMinBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, const float *__A, const float *__B, float *a5)
{
  vDSP_vmin(__A, 1, __B, 1, a5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMinBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMinBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMinBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 4;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29167B8;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29167B8;
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _QWORD *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*a2 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of inputs for arithmetic divide box. must be 2.");
    DSPGraph::ThrowException(1701602593, &v7, 1435, &v6, &v5);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of outputs for arithmetic divide box. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1437, &v6, &v5);
  }
  v3 = (_QWORD *)operator new();
  bzero(v3, 0x310uLL);
  DSPGraph::Box::Box((DSPGraph::Box *)v3, 2u, 1u);
  v3[97] = 0;
  *v3 = &off_1E290D880;
  return v3;
}

void sub_18F01BBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::ArithmeticDivBox::~ArithmeticDivBox(DSPGraph::ArithmeticDivBox *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E290E830;
  v2 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DSPGraph::Box::~Box(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E290E830;
  v2 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::ArithmeticDivBox::ClassName(DSPGraph::ArithmeticDivBox *this)
{
  return "advi";
}

double DSPGraph::ArithmeticDivBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.43486969e161;
  *(_OWORD *)a1 = xmmword_18F1171C0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticDivBox>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t result;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  int v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;

  v4 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v64, "in");
    v37 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v37 = (_QWORD *)*v37;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v63, v37, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v65, 1410, &v64, &v63);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v7) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v64, "in");
    v38 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v38 = (_QWORD *)*v38;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v63, v38, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v65, 1410, &v64, &v63);
  }
  v8 = *(unsigned int **)(*(_QWORD *)(v6 + 56) + 80);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 32) + 40))(v7 + 32);
  v10 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v64, "out");
    v39 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v39 = (_QWORD *)*v39;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v63, v39, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v65, 1418, &v64, &v63);
  }
  v11 = *(_DWORD **)(*(_QWORD *)(v9 + 56) + 80);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  if (*v8 != *v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v62, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v61, "process");
    v40 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v40)
    {
      std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v64, "in");
      v41 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v41 = (_QWORD *)*v41;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v63, v41, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v65, 1410, &v64, &v63);
    }
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
    v52 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)(*(_QWORD *)(a1 + 72) - v52) > 0x20)
    {
      v53 = *(unsigned int *)(*(_QWORD *)(v51 + 120) + 28);
      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v52 + 32) + 40))(v52 + 32);
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", &v65, v53, *(unsigned int *)(*(_QWORD *)(v54 + 120) + 28));
      DSPGraph::ThrowException(1667788321, &v62, 807, &v61, &v65);
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v64, "in");
    v58 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v58 = (_QWORD *)*v58;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v63, v58, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v65, 1410, &v64, &v63);
  }
  v13 = *(_DWORD **)(*(_QWORD *)(v12 + 56) + 80);
  if (*v8 != *v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&v62, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v61, "process");
    v42 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v42)
    {
      std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v64, "in");
      v43 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v43 = (_QWORD *)*v43;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v63, v43, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v65, 1410, &v64, &v63);
    }
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v56 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v56)
    {
      std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v64, "out");
      v57 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v57 = (_QWORD *)*v57;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v63, v57, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v65, 1418, &v64, &v63);
    }
    v59 = *(unsigned int *)(*(_QWORD *)(v55 + 120) + 28);
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", &v65, v59, *(unsigned int *)(*(_QWORD *)(v60 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v62, 810, &v61, &v65);
  }
  v14 = v8[3];
  if (v14 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 24))(*(_QWORD *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v64, "process");
    v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 24))(*(_QWORD *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", &v63, (v44 * a2), v8[3]);
    DSPGraph::ThrowException(1718449215, &v65, 815, &v64, &v63);
  }
  v15 = v11[3];
  if (v15 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 32))(*(_QWORD *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v64, "process");
    v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 32))(*(_QWORD *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 1 should be at least %u bytes, but is %u.", &v63, (v45 * a2), v11[3]);
    DSPGraph::ThrowException(1718449215, &v65, 818, &v64, &v63);
  }
  v16 = *v8;
  if ((_DWORD)v16)
  {
    v17 = v13 + 4;
    v18 = (uint64_t *)(v11 + 4);
    v19 = (uint64_t *)(v8 + 4);
    do
    {
      v21 = *v19;
      v19 += 2;
      v20 = v21;
      v22 = *v18;
      v18 += 2;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 776) + 16))(*(_QWORD *)(a1 + 776), a2, v20, v22, *v17);
      *((_DWORD *)v17 - 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 40))(*(_QWORD *)(a1 + 776))
                           * a2;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  v23 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v23)
  {
    std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v64, "in");
    v46 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v46 = (_QWORD *)*v46;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v63, v46, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v65, 1410, &v64, &v63);
  }
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
  v25 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v64, "out");
    v47 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v47 = (_QWORD *)*v47;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v63, v47, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v65, 1418, &v64, &v63);
  }
  v26 = *(_QWORD *)(v24 + 56);
  v27 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25) + 56);
  v28 = *(_OWORD *)(v26 + 8);
  v29 = *(_OWORD *)(v26 + 24);
  v30 = *(_OWORD *)(v26 + 40);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
  *(_OWORD *)(v27 + 40) = v30;
  *(_OWORD *)(v27 + 24) = v29;
  *(_OWORD *)(v27 + 8) = v28;
  v31 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v31)
  {
    std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v64, "in");
    v48 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v48 = (_QWORD *)*v48;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v63, v48, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v65, 1410, &v64, &v63);
  }
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
  v33 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v33) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v64, "in");
    v49 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v49 = (_QWORD *)*v49;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v63, v49, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v65, 1410, &v64, &v63);
  }
  v34 = *(_DWORD *)(*(_QWORD *)(v32 + 56) + 72);
  (*(void (**)(uint64_t))(*(_QWORD *)(v33 + 32) + 40))(v33 + 32);
  v35 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v35)
  {
    std::string::basic_string[abi:ne180100]<0>(&v65, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v64, "out");
    v50 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v50 = (_QWORD *)*v50;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v63, v50, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v65, 1418, &v64, &v63);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
  *(_DWORD *)(*(_QWORD *)(result + 56) + 72) = v34;
  return result;
}

void sub_18F01C69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticDivBox>::initialize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v18;
  uint64_t (**v20)();
  _QWORD *v21;
  _QWORD *v22;
  uint64_t (**v23)();
  uint64_t result;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0x40 || ((*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) & 0x1FFFFFFFE0) != 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "initialize");
    DSPGraph::strprintf((DSPGraph *)"There must be two inputs and one output, instead of %u and %u.", &v47, (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, (*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5);
    DSPGraph::ThrowException(1701602593, &v49, 745, &v48, &v47);
  }
  if (v3 == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v25 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v25 = (_QWORD *)*v25;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v25, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v5 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v5) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v26 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v26 = (_QWORD *)*v26;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v26, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 120) + 28);
  if (v6 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 32) + 40))(v5 + 32) + 120)
                       + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
    v27 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v27)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "in");
      v28 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v28 = (_QWORD *)*v28;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v28, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
    }
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    v36 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)(*(_QWORD *)(a1 + 72) - v36) > 0x20)
    {
      v37 = *(unsigned int *)(*(_QWORD *)(v35 + 120) + 28);
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 + 32) + 40))(v36 + 32);
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", &v49, v37, *(unsigned int *)(*(_QWORD *)(v38 + 120) + 28));
      DSPGraph::ThrowException(1667788321, &v46, 750, &v45, &v49);
    }
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v42 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v42 = (_QWORD *)*v42;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v42, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v29 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v29 = (_QWORD *)*v29;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v29, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v9 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "out");
    v30 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v30 = (_QWORD *)*v30;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v47, v30, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1418, &v48, &v47);
  }
  v10 = *(_DWORD *)(*(_QWORD *)(v8 + 120) + 28);
  if (v10 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120) + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
    v31 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v31)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "in");
      v32 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v32 = (_QWORD *)*v32;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v32, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
    }
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
    v40 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v40)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "out");
      v41 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v41 = (_QWORD *)*v41;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v47, v41, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1418, &v48, &v47);
    }
    v43 = *(unsigned int *)(*(_QWORD *)(v39 + 120) + 28);
    v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", &v49, v43, *(unsigned int *)(*(_QWORD *)(v44 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v46, 756, &v45, &v49);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v33 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v33 = (_QWORD *)*v33;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v33, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  v13 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v13) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v34 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v34 = (_QWORD *)*v34;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v34, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v14 = *(_DWORD *)(*(_QWORD *)(v12 + 120) + 8);
  v15 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 32) + 40))(v13 + 32) + 120)
                  + 8);
  if (v14 == 1819304813 && v15 == 1819304813)
  {
    v21 = (_QWORD *)operator new();
    v22 = v21;
    v23 = &off_1E290F850;
    goto LABEL_26;
  }
  if (v14 == 1819304813 && v15 != 1819304813)
  {
    v21 = (_QWORD *)operator new();
    v22 = v21;
    v23 = &off_1E290F810;
LABEL_26:
    *v21 = v23;
    goto LABEL_29;
  }
  v18 = (_QWORD *)operator new();
  v22 = v18;
  if (v14 != 1819304813 && v15 == 1819304813)
    v20 = &off_1E290F790;
  else
    v20 = &off_1E290F7D0;
  *v18 = v20;
LABEL_29:
  result = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 776) = v22;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_18F01D030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, float *a3, float *a4, float *a5)
{
  DSPSplitComplex v5;
  DSPSplitComplex __B;
  DSPSplitComplex __A;

  __A.realp = a3;
  __A.imagp = &a3[__N];
  __B.realp = a4;
  __B.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zvdiv(&__B, 1, &__A, 1, &v5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, float *a3, const float *__B, float *a5)
{
  DSPSplitComplex v5;
  DSPSplitComplex __A;

  __A.realp = a3;
  __A.imagp = &a3[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zrvdiv(&__A, 1, __B, 1, &v5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, float *a3, float *a4, float *a5)
{
  DSPSplitComplex v5;
  DSPSplitComplex v6;

  v6.realp = a4;
  v6.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  DSPGraph::ArithmeticDivBox::f(a3, &v6, &v5, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, const float *a3, const float *__B, float *a5)
{
  vDSP_vdiv(__B, 1, a3, 1, a5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 4;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916770;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916770;
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _QWORD *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*a2 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of inputs for arithmetic multiply box. must be 2.");
    DSPGraph::ThrowException(1701602593, &v7, 1426, &v6, &v5);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of outputs for arithmetic multiply box. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1428, &v6, &v5);
  }
  v3 = (_QWORD *)operator new();
  bzero(v3, 0x310uLL);
  DSPGraph::Box::Box((DSPGraph::Box *)v3, 2u, 1u);
  v3[97] = 0;
  *v3 = &off_1E290FEA0;
  return v3;
}

void sub_18F01D498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::ArithmeticMultBox::~ArithmeticMultBox(DSPGraph::ArithmeticMultBox *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E290F500;
  v2 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DSPGraph::Box::~Box(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E290F500;
  v2 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::ArithmeticMultBox::ClassName(DSPGraph::ArithmeticMultBox *this)
{
  return "amul";
}

double DSPGraph::ArithmeticMultBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 2.07081382e161;
  *(_OWORD *)a1 = xmmword_18F1171B0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticMultBox>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t result;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v4 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v39 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v39 = (_QWORD *)*v39;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v39, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v7) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v40 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v40 = (_QWORD *)*v40;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v40, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v8 = *(unsigned int **)(*(_QWORD *)(v6 + 56) + 80);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 32) + 40))(v7 + 32);
  v10 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v41 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v41 = (_QWORD *)*v41;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v41, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v11 = *(_DWORD **)(*(_QWORD *)(v9 + 56) + 80);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  if (*v8 != *v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v64, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v63, "process");
    v42 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v42)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "in");
      v43 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v43 = (_QWORD *)*v43;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v43, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
    }
    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v54 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)(*(_QWORD *)(a1 + 72) - v54) > 0x20)
    {
      v55 = *(unsigned int *)(*(_QWORD *)(v53 + 120) + 28);
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v54 + 32) + 40))(v54 + 32);
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", &v67, v55, *(unsigned int *)(*(_QWORD *)(v56 + 120) + 28));
      DSPGraph::ThrowException(1667788321, &v64, 807, &v63, &v67);
    }
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v60 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v60 = (_QWORD *)*v60;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v60, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v13 = *(_DWORD **)(*(_QWORD *)(v12 + 56) + 80);
  if (*v8 != *v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&v64, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v63, "process");
    v44 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v44)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "in");
      v45 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v45 = (_QWORD *)*v45;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v45, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
    }
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
    v58 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v58)
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v66, "out");
      v59 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v59 = (_QWORD *)*v59;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v59, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
    }
    v61 = *(unsigned int *)(*(_QWORD *)(v57 + 120) + 28);
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", &v67, v61, *(unsigned int *)(*(_QWORD *)(v62 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v64, 810, &v63, &v67);
  }
  v14 = v8[3];
  if (v14 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 24))(*(_QWORD *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "process");
    v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 24))(*(_QWORD *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", &v65, (v46 * a2), v8[3]);
    DSPGraph::ThrowException(1718449215, &v67, 815, &v66, &v65);
  }
  v15 = v11[3];
  if (v15 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 32))(*(_QWORD *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "process");
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 32))(*(_QWORD *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 1 should be at least %u bytes, but is %u.", &v65, (v47 * a2), v11[3]);
    DSPGraph::ThrowException(1718449215, &v67, 818, &v66, &v65);
  }
  v16 = *v8;
  if ((_DWORD)v16)
  {
    v17 = v13 + 4;
    v18 = (uint64_t *)(v11 + 4);
    v19 = (uint64_t *)(v8 + 4);
    do
    {
      v21 = *v19;
      v19 += 2;
      v20 = v21;
      v22 = *v18;
      v18 += 2;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 776) + 16))(*(_QWORD *)(a1 + 776), a2, v20, v22, *v17);
      *((_DWORD *)v17 - 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 776) + 40))(*(_QWORD *)(a1 + 776))
                           * a2;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  v23 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v23)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v48 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v48 = (_QWORD *)*v48;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v48, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
  v25 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v49 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v49 = (_QWORD *)*v49;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v49, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v26 = *(_QWORD *)(v24 + 56);
  v27 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25) + 56);
  v28 = *(_OWORD *)(v26 + 8);
  v29 = *(_OWORD *)(v26 + 24);
  v30 = *(_OWORD *)(v26 + 40);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
  *(_OWORD *)(v27 + 40) = v30;
  *(_OWORD *)(v27 + 24) = v29;
  *(_OWORD *)(v27 + 8) = v28;
  v31 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v31)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v50 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v50 = (_QWORD *)*v50;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v50, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
  v33 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v33) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "in");
    v51 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v51 = (_QWORD *)*v51;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v65, v51, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v67, 1410, &v66, &v65);
  }
  v34 = *(_DWORD *)(*(_QWORD *)(v32 + 56) + 72);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 + 32) + 40))(v33 + 32);
  v36 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v36)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v66, "out");
    v52 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v52 = (_QWORD *)*v52;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v65, v52, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v67, 1418, &v66, &v65);
  }
  v37 = *(_DWORD *)(*(_QWORD *)(v35 + 56) + 72) & 0x10 | v34;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
  *(_DWORD *)(*(_QWORD *)(result + 56) + 72) = v37;
  return result;
}

void sub_18F01DF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticMultBox>::initialize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v18;
  uint64_t (**v20)();
  _QWORD *v21;
  _QWORD *v22;
  uint64_t (**v23)();
  uint64_t result;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0x40 || ((*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) & 0x1FFFFFFFE0) != 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "initialize");
    DSPGraph::strprintf((DSPGraph *)"There must be two inputs and one output, instead of %u and %u.", &v47, (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, (*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5);
    DSPGraph::ThrowException(1701602593, &v49, 745, &v48, &v47);
  }
  if (v3 == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v25 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v25 = (_QWORD *)*v25;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v25, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v5 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v5) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v26 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v26 = (_QWORD *)*v26;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v26, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 120) + 28);
  if (v6 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 32) + 40))(v5 + 32) + 120)
                       + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
    v27 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v27)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "in");
      v28 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v28 = (_QWORD *)*v28;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v28, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
    }
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    v36 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)(*(_QWORD *)(a1 + 72) - v36) > 0x20)
    {
      v37 = *(unsigned int *)(*(_QWORD *)(v35 + 120) + 28);
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 + 32) + 40))(v36 + 32);
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", &v49, v37, *(unsigned int *)(*(_QWORD *)(v38 + 120) + 28));
      DSPGraph::ThrowException(1667788321, &v46, 750, &v45, &v49);
    }
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v42 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v42 = (_QWORD *)*v42;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v42, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v29 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v29 = (_QWORD *)*v29;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v29, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v9 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "out");
    v30 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v30 = (_QWORD *)*v30;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v47, v30, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1418, &v48, &v47);
  }
  v10 = *(_DWORD *)(*(_QWORD *)(v8 + 120) + 28);
  if (v10 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120) + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v45, "initialize");
    v31 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) == v31)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "in");
      v32 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v32 = (_QWORD *)*v32;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v32, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
    }
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
    v40 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v40)
    {
      std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v48, "out");
      v41 = (_QWORD *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v41 = (_QWORD *)*v41;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v47, v41, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v49, 1418, &v48, &v47);
    }
    v43 = *(unsigned int *)(*(_QWORD *)(v39 + 120) + 28);
    v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", &v49, v43, *(unsigned int *)(*(_QWORD *)(v44 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v46, 756, &v45, &v49);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v33 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v33 = (_QWORD *)*v33;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v33, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  v13 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)(*(_QWORD *)(a1 + 72) - v13) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    v34 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v34 = (_QWORD *)*v34;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v47, v34, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5, 1);
    DSPGraph::ThrowException(1919837985, &v49, 1410, &v48, &v47);
  }
  v14 = *(_DWORD *)(*(_QWORD *)(v12 + 120) + 8);
  v15 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 32) + 40))(v13 + 32) + 120)
                  + 8);
  if (v14 == 1819304813 && v15 == 1819304813)
  {
    v21 = (_QWORD *)operator new();
    v22 = v21;
    v23 = &off_1E290FBD0;
    goto LABEL_26;
  }
  if (v14 == 1819304813 && v15 != 1819304813)
  {
    v21 = (_QWORD *)operator new();
    v22 = v21;
    v23 = &off_1E290FB90;
LABEL_26:
    *v21 = v23;
    goto LABEL_29;
  }
  v18 = (_QWORD *)operator new();
  v22 = v18;
  if (v14 != 1819304813 && v15 == 1819304813)
    v20 = &off_1E290FB10;
  else
    v20 = &off_1E290FB50;
  *v18 = v20;
LABEL_29:
  result = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 776) = v22;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_18F01E914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, float *a3, float *a4, float *a5)
{
  DSPSplitComplex v5;
  DSPSplitComplex __B;
  DSPSplitComplex __A;

  __A.realp = a3;
  __A.imagp = &a3[__N];
  __B.realp = a4;
  __B.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zvmul(&__A, 1, &__B, 1, &v5, 1, __N, 1);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, float *a3, const float *__B, float *a5)
{
  DSPSplitComplex v5;
  DSPSplitComplex __A;

  __A.realp = a3;
  __A.imagp = &a3[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zrvmul(&__A, 1, __B, 1, &v5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, const float *a3, float *a4, float *a5)
{
  DSPSplitComplex v5;
  DSPSplitComplex __A;

  __A.realp = a4;
  __A.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zrvmul(&__A, 1, a3, 1, &v5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
  JUMPOUT(0x193FFE460);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, const float *__A, const float *__B, float *a5)
{
  vDSP_vmul(__A, 1, __B, 1, a5, 1, __N);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 4;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2916728;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2916728;
}

uint64_t std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*a2 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of inputs for GainBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1417, &v6, &v5);
  }
  if (*a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v5, "wrong number of outputs for GainBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v7, 1419, &v6, &v5);
  }
  v3 = operator new();
  DSPGraph::Box::Box((DSPGraph::Box *)v3, 1u, 1u);
  *(_DWORD *)(v3 + 776) = 1065353216;
  *(_BYTE *)(v3 + 780) = 0;
  *(_OWORD *)(v3 + 784) = xmmword_18F117370;
  *(_QWORD *)(v3 + 800) = 0x3F80000000000000;
  *(_DWORD *)(v3 + 808) = 0;
  *(_WORD *)(v3 + 812) = 257;
  *(_QWORD *)v3 = &off_1E2912788;
  return v3;
}

void sub_18F01EDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void AUProcessingBlock_DSPGraph::~AUProcessingBlock_DSPGraph(DSPGraph::Profiler **this)
{
  AUProcessingBlock_DSPGraph::~AUProcessingBlock_DSPGraph(this);
  JUMPOUT(0x193FFE460);
}

{
  char *v2;

  *this = (DSPGraph::Profiler *)&off_1E2909100;
  v2 = (char *)(this + 6);
  std::unique_ptr<DSPGraph::Profiler>::reset[abi:ne180100](this + 8, 0);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  AUProcessingBlockBase::~AUProcessingBlockBase((AUProcessingBlockBase *)this);
}

uint64_t AUProcessingBlock_DSPGraph::CopyProperty(AUProcessingBlock_DSPGraph *this, int a2, CFDataRef *a3)
{
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  DSPGraph::Profiler *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *i;
  uint64_t v15;
  _QWORD *v16;
  void *p_p;
  double LatencyInSeconds;
  void *__p;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a2 > 1819569762)
  {
    if (a2 == 1819569763)
    {
      __p = 0;
      v20 = 0;
      v21 = 0;
      v12 = (char *)*((_QWORD *)this + 6);
      v13 = v12 + 408;
      if (v12[431] < 0)
        v13 = (_QWORD *)*v13;
      *(_QWORD *)&v22 = v13;
      LatencyInSeconds = DSPGraph::Graph::getLatencyInSeconds((DSPGraph::Graph *)v12);
      std::vector<applesauce::CF::TypeRefPair>::emplace_back<char const*,double>(&__p, (char **)&v22, (uint64_t *)&LatencyInSeconds);
      for (i = *(_QWORD **)(*((_QWORD *)this + 6) + 24); i; i = (_QWORD *)*i)
      {
        v15 = i[2];
        v16 = (_QWORD *)(v15 + 32);
        if (*(char *)(v15 + 55) < 0)
          v16 = (_QWORD *)*v16;
        *(_QWORD *)&v22 = v16;
        LatencyInSeconds = (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15)
                         / (double)*(unint64_t *)(*(_QWORD *)(v15 + 8) + 696);
        std::vector<applesauce::CF::TypeRefPair>::emplace_back<char const*,double>(&__p, (char **)&v22, (uint64_t *)&LatencyInSeconds);
      }
      *a3 = applesauce::CF::details::make_CFDictionaryRef((void ***)&__p);
      *(_QWORD *)&v22 = &__p;
      std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      return 0;
    }
    if (a2 == 1886545456)
    {
      std::mutex::lock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
      v7 = *((_QWORD *)this + 8);
      applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v22, "ProfilerEnabledKey");
      v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
      if (!v7)
        v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
      *((_QWORD *)&v22 + 1) = *v8;
      __p = &v22;
      v20 = 1;
      *a3 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&__p);
      if (*((_QWORD *)&v22 + 1))
        CFRelease(*((CFTypeRef *)&v22 + 1));
      if ((_QWORD)v22)
        CFRelease((CFTypeRef)v22);
      std::mutex::unlock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
      return 0;
    }
    return AUProcessingBlockBase::CopyProperty((const UInt8 **)this, a2, a3);
  }
  if (a2 == 1734570101)
  {
    std::mutex::lock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
    v10 = (DSPGraph::Profiler *)*((_QWORD *)this + 8);
    if (v10)
    {
      DSPGraph::Profiler::copyStatistics(v10, (CFDictionaryRef *)&__p);
      if (__p)
      {
        v11 = 0;
        *a3 = (CFDataRef)__p;
      }
      else
      {
        v11 = 1886806380;
      }
    }
    else
    {
      v11 = 561145191;
    }
    std::mutex::unlock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
    return v11;
  }
  if (a2 != 1735554168)
    return AUProcessingBlockBase::CopyProperty((const UInt8 **)this, a2, a3);
  DSPGraph::Graph::decompile(*((DSPGraph::Graph **)this + 6), 1, &__p);
  if (DSPGraph::getLog(void)::onceToken != -1)
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_7516);
  v5 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if (v21 < 0)
      p_p = __p;
    LODWORD(v22) = 136315138;
    *(_QWORD *)((char *)&v22 + 4) = p_p;
    _os_log_debug_impl(&dword_18EE07000, v5, OS_LOG_TYPE_DEBUG, "Analyzer::initialize <----Graph Text From AUPB CopyProperty---->\n\n%s", (uint8_t *)&v22, 0xCu);
  }
  if (v21 >= 0)
    v6 = (const char *)&__p;
  else
    v6 = (const char *)__p;
  *a3 = (CFDataRef)CFStringCreateWithCString(0, v6, 0x8000100u);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  return 0;
}

void sub_18F01F198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AUProcessingBlock_DSPGraph::SetProperty(AUProcessingBlock_DSPGraph *this, int a2, CFTypeRef cf)
{
  uint64_t v3;
  CFTypeID v6;
  const __CFDictionary *v7;
  const __CFBoolean *Value;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  const __CFDictionary **v18;
  double v19;
  char v20;
  double v21;
  char *v22;
  DSPGraph::Profiler *v23;
  uint64_t v24;
  _QWORD *v25;
  std::runtime_error *exception;
  double v27;
  CFTypeRef cfa;
  _BYTE key[12];
  __int16 v30;
  double v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = 1886806380;
  if (a2 == 1635087726)
    return v3;
  if (a2 != 1886545456)
    return AUProcessingBlockBase::SetProperty(this, a2, cf);
  std::mutex::lock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
  if (cf)
  {
    v6 = CFGetTypeID(cf);
    if (v6 == CFDictionaryGetTypeID())
    {
      CFRetain(cf);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cfa, cf);
      v7 = (const __CFDictionary *)cfa;
      if (!cfa)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)key, "ProfilerEnabledKey");
      Value = (const __CFBoolean *)CFDictionaryGetValue(v7, *(const void **)key);
      if (*(_QWORD *)key)
        CFRelease(*(CFTypeRef *)key);
      if (!Value)
        goto LABEL_28;
      v9 = applesauce::CF::convert_as<BOOL,0>(Value);
      if (v9 < 0x100u)
        goto LABEL_28;
      v10 = *((_QWORD *)this + 8);
      if ((_BYTE)v9 || !v10)
      {
        v3 = 0;
        if (!(_BYTE)v9 || v10)
          goto LABEL_28;
        v18 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&cfa);
        v19 = COERCE_DOUBLE(applesauce::CF::details::find_at_key_or_optional<double,char const(&)[28]>(*v18));
        if (v20)
          v21 = v19;
        else
          v21 = 0.1;
        v27 = v21;
        v22 = (char *)this + 48;
        std::make_unique[abi:ne180100]<DSPGraph::Profiler,std::shared_ptr<DSPGraph::Graph> &,double const&>((uint64_t **)key, (uint64_t *)this + 6, &v27);
        v23 = *(DSPGraph::Profiler **)key;
        *(_QWORD *)key = 0;
        std::unique_ptr<DSPGraph::Profiler>::reset[abi:ne180100]((DSPGraph::Profiler **)this + 8, v23);
        std::unique_ptr<DSPGraph::Profiler>::reset[abi:ne180100]((DSPGraph::Profiler **)key, 0);
        if (DSPGraph::getLog(void)::onceToken != -1)
          dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_7516);
        v24 = DSPGraph::getLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
LABEL_27:
          v3 = 0;
LABEL_28:
          if (cfa)
            CFRelease(cfa);
          goto LABEL_30;
        }
        v25 = (_QWORD *)(*(_QWORD *)v22 + 408);
        if (*(char *)(*(_QWORD *)v22 + 431) < 0)
          v25 = (_QWORD *)*v25;
        *(_DWORD *)key = 136315394;
        *(_QWORD *)&key[4] = v25;
        v30 = 2048;
        v31 = v21;
        v14 = "created Profiler for %s secondsPerWindow:%f";
        v15 = v24;
        v16 = 22;
      }
      else
      {
        std::unique_ptr<DSPGraph::Profiler>::reset[abi:ne180100]((DSPGraph::Profiler **)this + 8, 0);
        if (DSPGraph::getLog(void)::onceToken != -1)
          dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_7516);
        v11 = DSPGraph::getLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
          goto LABEL_27;
        v12 = *((_QWORD *)this + 6);
        v13 = (_QWORD *)(v12 + 408);
        if (*(char *)(v12 + 431) < 0)
          v13 = (_QWORD *)*v13;
        *(_DWORD *)key = 136315138;
        *(_QWORD *)&key[4] = v13;
        v14 = "destroyed Profiler for %s";
        v15 = v11;
        v16 = 12;
      }
      _os_log_debug_impl(&dword_18EE07000, v15, OS_LOG_TYPE_DEBUG, v14, key, v16);
      goto LABEL_27;
    }
  }
LABEL_30:
  std::mutex::unlock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
  return v3;
}

void sub_18F01F588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, CFTypeRef cf)
{
  applesauce::CF::DictionaryRef::~DictionaryRef(&a10);
  std::mutex::unlock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
  _Unwind_Resume(a1);
}

AudioComponent AUProcessingBlock_DSPGraph::GetAvailableAUs(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  OpaqueAudioComponent *v6;
  AudioComponent result;
  uint64_t (***v8)(_QWORD);
  _DWORD *v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  AudioComponentDescription v23;

  v6 = 0;
  v23.componentFlagsMask = 0;
  *(_OWORD *)&v23.componentType = *(_OWORD *)"xfua";
  while (1)
  {
    result = AudioComponentFindNext(v6, &v23);
    if (!result)
      break;
    v6 = result;
    v8 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(AudioComponent))result)(result);
    if (v8)
    {
      v9 = (_DWORD *)(**v8)(v8);
      v2 = v9[9];
      v3 = v9[10];
      v4 = v9[11];
    }
    v11 = *(_DWORD **)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v11 >= v10)
    {
      v13 = *(_DWORD **)a2;
      v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *(_QWORD *)a2) >> 2);
      v15 = v14 + 1;
      if (v14 + 1 > 0x1555555555555555)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v13) >> 2);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0xAAAAAAAAAAAAAAALL)
        v17 = 0x1555555555555555;
      else
        v17 = v15;
      if (v17)
      {
        v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(v17);
        v13 = *(_DWORD **)a2;
        v11 = *(_DWORD **)(a2 + 8);
      }
      else
      {
        v18 = 0;
      }
      v19 = (_DWORD *)(v17 + 12 * v14);
      *v19 = v2;
      v19[1] = v3;
      v19[2] = v4;
      v20 = v19;
      if (v11 != v13)
      {
        do
        {
          v21 = *(_QWORD *)(v11 - 3);
          v11 -= 3;
          v22 = v11[2];
          *(_QWORD *)(v20 - 3) = v21;
          v20 -= 3;
          v20[2] = v22;
        }
        while (v11 != v13);
        v13 = *(_DWORD **)a2;
      }
      v12 = v19 + 3;
      *(_QWORD *)a2 = v20;
      *(_QWORD *)(a2 + 8) = v19 + 3;
      *(_QWORD *)(a2 + 16) = v17 + 12 * v18;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v11 = v2;
      v11[1] = v3;
      v12 = v11 + 3;
      v11[2] = v4;
    }
    *(_QWORD *)(a2 + 8) = v12;
  }
  return result;
}

uint64_t AUProcessingBlock_DSPGraph::AUGetPropertyInfo(AUProcessingBlock_DSPGraph *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int *a6, BOOL *a7)
{
  uint64_t v7;
  uint64_t v9;
  unsigned int v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;

  v7 = 4294967246;
  if (a6)
  {
    if (a7)
    {
      v7 = 1633906209;
      v9 = *((_QWORD *)this + 6);
      if (v9)
      {
        v12 = *a6;
        v13 = *a7;
        if (*(OpaqueRemoteAudioUnit **)(v9 + 768) == a2)
        {
          v14 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v9 + 64))(*((_QWORD *)this + 6), a3);
        }
        else
        {
          v16 = DSPGraph::Graph::box(*((int8x8_t **)this + 6), (unint64_t)a2);
          if (v16)
          {
            v17 = *(uint64_t (**)(void))(*(_QWORD *)v16 + 296);
          }
          else
          {
            v18 = DSPGraph::Graph::analyzer((std::mutex *)v9, (unint64_t)a2);
            if (!v18)
            {
LABEL_14:
              *a6 = v12;
              *a7 = v13 != 0;
              return v7;
            }
            v17 = *(uint64_t (**)(void))(*(_QWORD *)v18 + 104);
          }
          v14 = v17();
        }
        if (v15)
        {
          v13 = BYTE4(v14);
          v12 = v14;
          v7 = 0;
        }
        else
        {
          v7 = v14;
        }
        goto LABEL_14;
      }
    }
  }
  return v7;
}

uint64_t AUProcessingBlock_DSPGraph::AUGetProperty(AUProcessingBlock_DSPGraph *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, unsigned int *a7)
{
  uint64_t v7;
  OpaqueRemoteAudioUnit **v9;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;

  v7 = 4294967246;
  if (a6)
  {
    if (a7)
    {
      v7 = 1633906209;
      v9 = (OpaqueRemoteAudioUnit **)*((_QWORD *)this + 6);
      if (v9)
      {
        v18 = *a7;
        if (v9[96] == a2)
        {
          (*((void (**)(OpaqueRemoteAudioUnit **, uint64_t, unsigned int *, void *))*v9 + 9))(v9, a3, &v18, a6);
LABEL_8:
          v7 = 0;
          *a7 = v18;
          return v7;
        }
        v15 = DSPGraph::Graph::box((int8x8_t *)v9, (unint64_t)a2);
        if (v15)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, void *))(*(_QWORD *)v15 + 304))(v15, a3, a4, a5, &v18, a6);
          goto LABEL_8;
        }
        v17 = DSPGraph::Graph::analyzer((std::mutex *)v9, (unint64_t)a2);
        if (v17)
        {
          v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, void *))(*(_QWORD *)v17 + 96))(v17, a3, a4, a5, &v18, a6);
          if (!(_DWORD)v7)
            goto LABEL_8;
        }
      }
    }
  }
  return v7;
}

void sub_18F01F9F4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F01F998);
}

uint64_t AUProcessingBlock_DSPGraph::AUSetProperty(AUProcessingBlock_DSPGraph *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7)
{
  uint64_t v7;
  OpaqueRemoteAudioUnit **v8;
  uint64_t v15;
  uint64_t v17;

  v7 = 1633906209;
  v8 = (OpaqueRemoteAudioUnit **)*((_QWORD *)this + 6);
  if (v8)
  {
    if (v8[96] == a2)
    {
      (*((void (**)(_QWORD, uint64_t, uint64_t, const void *))*v8 + 7))(*((_QWORD *)this + 6), a3, a7, a6);
      return 0;
    }
    v15 = DSPGraph::Graph::box(*((int8x8_t **)this + 6), (unint64_t)a2);
    if (v15)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *))(*(_QWORD *)v15 + 312))(v15, a3, a4, a5, a7, a6);
      return 0;
    }
    v17 = DSPGraph::Graph::analyzer((std::mutex *)v8, (unint64_t)a2);
    if (v17)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *))(*(_QWORD *)v17
                                                                                                  + 112))(v17, a3, a4, a5, a7, a6);
  }
  return v7;
}

void sub_18F01FB2C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F01FAD8);
}

uint64_t AUProcessingBlock_DSPGraph::AUGetParameter(AUProcessingBlock_DSPGraph *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  uint64_t v6;
  OpaqueRemoteAudioUnit **v7;
  float v11;
  uint64_t v14;
  uint64_t v15;

  v6 = 1633906209;
  v7 = (OpaqueRemoteAudioUnit **)*((_QWORD *)this + 6);
  if (v7)
  {
    if (v7[96] == a2)
    {
      (*((void (**)(_QWORD, uint64_t))*v7 + 6))(*((_QWORD *)this + 6), a3);
LABEL_8:
      v6 = 0;
      *a6 = v11;
      return v6;
    }
    v14 = DSPGraph::Graph::box(*((int8x8_t **)this + 6), (unint64_t)a2);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 88))(v14, a3, a4, a5);
      goto LABEL_8;
    }
    v15 = DSPGraph::Graph::analyzer((std::mutex *)v7, (unint64_t)a2);
    if (v15)
    {
      v11 = (*(float (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 72))(v15, a3, a4, a5);
      goto LABEL_8;
    }
  }
  return v6;
}

void sub_18F01FC48(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F01FC2CLL);
}

uint64_t AUProcessingBlock_DSPGraph::AUSetParameter(AUProcessingBlock_DSPGraph *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;

  v6 = 1633906209;
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    if (*(OpaqueRemoteAudioUnit **)(v7 + 768) == a2)
    {
      (*(void (**)(_QWORD, uint64_t, float))(*(_QWORD *)v7 + 40))(*((_QWORD *)this + 6), a3, a6);
      return 0;
    }
    else
    {
      v13 = DSPGraph::Graph::box(*((int8x8_t **)this + 6), (unint64_t)a2);
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)v13 + 80))(v13, a3, a4, a5, 0, a6);
        return 0;
      }
      else
      {
        v14 = DSPGraph::Graph::analyzer((std::mutex *)v7, (unint64_t)a2);
        if (v14)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)v14 + 88))(v14, a3, a4, a5, 0, a6);
          return 0;
        }
      }
    }
  }
  return v6;
}

void sub_18F01FD7C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F01FD60);
}

DSPGraph::Profiler *std::unique_ptr<DSPGraph::Profiler>::reset[abi:ne180100](DSPGraph::Profiler **a1, DSPGraph::Profiler *a2)
{
  DSPGraph::Profiler *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    DSPGraph::Profiler::~Profiler(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

_QWORD *applesauce::CF::DictionaryRef::operator->(_QWORD *result)
{
  std::runtime_error *exception;

  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_18F01FE44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t applesauce::CF::details::find_at_key_or_optional<double,char const(&)[28]>(const __CFDictionary *a1)
{
  const void *Value;
  unint64_t result;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, "ProfilerSecondsPerWindowKey");
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  result = 0;
  if (a1)
  {
    if (Value)
      return applesauce::CF::convert_as<double,0>((unint64_t)Value);
  }
  return result;
}

void sub_18F01FECC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F01FEB8);
}

uint64_t *std::make_unique[abi:ne180100]<DSPGraph::Profiler,std::shared_ptr<DSPGraph::Graph> &,double const&>(uint64_t **a1, uint64_t *a2, double *a3)
{
  uint64_t *v6;
  uint64_t *result;

  v6 = (uint64_t *)operator new();
  result = DSPGraph::Profiler::Profiler(v6, a2, *a3);
  *a1 = v6;
  return result;
}

void sub_18F01FF5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10A0C40E238633CLL);
  _Unwind_Resume(a1);
}

unint64_t applesauce::CF::convert_as<double,0>(unint64_t result)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  unint64_t v5;
  double v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  double v14;
  uint64_t valuePtr;

  if (*(double *)&result != 0.0)
  {
    v1 = (const __CFNumber *)result;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_16;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          v7 = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_18;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          v8 = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_20;
        case kCFNumberSInt64Type:
          valuePtr = 0;
          v9 = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_29;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          v10 = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_25;
        case kCFNumberFloat64Type:
          valuePtr = 0;
          v11 = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_38;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_16:
          v12 = Value == 0;
          v13 = (char)valuePtr;
          goto LABEL_21;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          v7 = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_18:
          v12 = v7 == 0;
          v13 = (__int16)valuePtr;
          goto LABEL_21;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          v8 = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
LABEL_20:
          v12 = v8 == 0;
          v13 = valuePtr;
LABEL_21:
          v14 = (double)v13;
          goto LABEL_30;
        case kCFNumberLongType:
          valuePtr = 0;
          v9 = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_29;
        case kCFNumberLongLongType:
          valuePtr = 0;
          v9 = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_29;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          v10 = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_25:
          v12 = v10 == 0;
          v14 = *(float *)&valuePtr;
          goto LABEL_30;
        case kCFNumberDoubleType:
          valuePtr = 0;
          v11 = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_38;
        case kCFNumberCFIndexType:
          valuePtr = 0;
          v9 = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_29;
        case kCFNumberNSIntegerType:
          valuePtr = 0;
          v9 = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_29:
          v12 = v9 == 0;
          v14 = (double)valuePtr;
LABEL_30:
          v6 = v14;
          goto LABEL_31;
        case kCFNumberCGFloatType:
          valuePtr = 0;
          v11 = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_38:
          v12 = v11 == 0;
          v6 = *(double *)&valuePtr;
LABEL_31:
          if (v12)
            v6 = 0.0;
          v5 = *(_QWORD *)&v6 & 0xFFFFFFFFFFFFFF00;
          break;
        default:
          v5 = 0;
          LOBYTE(v6) = 0;
          break;
      }
      return LOBYTE(v6) | v5;
    }
    else
    {
      v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1))
        *(double *)&result = (double)CFBooleanGetValue(v1);
      else
        *(double *)&result = 0.0;
    }
  }
  return result;
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_7520()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t applesauce::CF::convert_as<BOOL,0>(const __CFBoolean *a1)
{
  CFTypeID TypeID;
  __int16 v3;
  int v4;
  CFTypeID v5;

  TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    LOBYTE(v3) = CFBooleanGetValue(a1) != 0;
    v4 = 1;
  }
  else
  {
    v5 = CFNumberGetTypeID();
    if (v5 == CFGetTypeID(a1))
    {
      v3 = applesauce::CF::details::number_convert_as<BOOL>(a1);
      v4 = HIBYTE(v3);
    }
    else
    {
      LOBYTE(v3) = 0;
      v4 = 0;
    }
  }
  return v3 | (v4 << 8);
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<char const*,double>(_QWORD *a1, char **a2, uint64_t *a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  applesauce::CF::TypeRef *v17;
  applesauce::CF::TypeRef *v18;
  unint64_t v19;
  _QWORD *v20;

  v6 = a1 + 2;
  v7 = a1[2];
  v8 = a1[1];
  if (v8 >= v7)
  {
    v11 = (uint64_t)(v8 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v7 - *a1;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v20 = v6;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v14);
    else
      v15 = 0;
    v16 = v14;
    v17 = (applesauce::CF::TypeRef *)(v14 + 16 * v11);
    v18 = v17;
    v19 = v14 + 16 * v15;
    applesauce::CF::TypeRefPair::TypeRefPair<char const*,double>(v17, *a2, a3);
    v18 = (applesauce::CF::TypeRef *)((char *)v17 + 16);
    std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__swap_out_circular_buffer(a1, &v16);
    v10 = a1[1];
    result = std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v16);
  }
  else
  {
    result = (uint64_t)applesauce::CF::TypeRefPair::TypeRefPair<char const*,double>((applesauce::CF::TypeRef *)a1[1], *a2, a3);
    v10 = v8 + 16;
    a1[1] = v8 + 16;
  }
  a1[1] = v10;
  return result;
}

void sub_18F0203D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const*,double>(applesauce::CF::TypeRef *a1, char *a2, uint64_t *a3)
{
  CFNumberRef v5;
  std::runtime_error *exception;
  uint64_t valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_18F020484(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

const __CFString *acv2::CodecConverter::ConverterName(acv2::CodecConverter *this)
{
  return CFSTR("CodecConverter");
}

uint64_t acv2::CodecConverter::description@<X0>(int16x8_t *this@<X0>, _QWORD *a2@<X8>)
{
  void *p_p;
  uint64_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  void **v13;
  size_t v14;
  void **v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  const char *v22;
  _QWORD *v23;
  void *__dst[2];
  unsigned __int8 v26;
  uint64_t v27;
  _QWORD v28[10];
  char v29;
  uint64_t v30;
  char v31;
  _OWORD __s[2];
  uint64_t v33;
  void *v34[2];
  char v35;
  void *__p;
  uint64_t v37;
  unsigned __int8 v38;
  void *v39;
  char v40;
  _QWORD v41[22];

  v41[19] = *MEMORY[0x1E0C80C00];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v27);
  acv2::AudioConverterBase::description(this, &__p);
  if ((v38 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v38 & 0x80u) == 0)
    v5 = v38;
  else
    v5 = v37;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)p_p, v5);
  if ((char)v38 < 0)
    operator delete(__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"    codec: ", 11);
  CAX4CCString::CAX4CCString((CAX4CCString *)&__p, this[11].u32[0]);
  v6 = strlen((const char *)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)&__p, v6);
  LOBYTE(__s[0]) = 47;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)__s, 1);
  CAX4CCString::CAX4CCString((CAX4CCString *)__s, this[11].u32[1]);
  v7 = strlen((const char *)__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)__s, v7);
  LOBYTE(v34[0]) = 47;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)v34, 1);
  CAX4CCString::CAX4CCString((CAX4CCString *)v34, this[11].u32[2]);
  v8 = strlen((const char *)v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)v34, v8);
  LOBYTE(__dst[0]) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)__dst, 1);
  v9 = this[44].i64[1];
  v10 = MEMORY[0x1E0DE4F60];
  v11 = MEMORY[0x1E0DE4FB8];
  if (v9)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"      spatially rendered from:  ", 32);
    v12 = *(int16x8_t *)(v9 + 32);
    __s[0] = *(_OWORD *)(v9 + 16);
    __s[1] = v12;
    v33 = *(_QWORD *)(v9 + 48);
    CA::StreamDescription::AsString((CA::StreamDescription *)v34, __s, *(double *)__s, v12);
    if (v35 >= 0)
      v13 = v34;
    else
      v13 = (void **)v34[0];
    v14 = strlen((const char *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v13, v14);
    v31 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v31, 1);
    if (v35 < 0)
      operator delete(v34[0]);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)&v37);
    __p = *(void **)v10;
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v10 + 24);
    v37 = v11 + 16;
    if (v40 < 0)
      operator delete(v39);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x193FFE3A0](v41);
    if ((v26 & 0x80u) == 0)
      v15 = __dst;
    else
      v15 = (void **)__dst[0];
    if ((v26 & 0x80u) == 0)
      v16 = v26;
    else
      v16 = (uint64_t)__dst[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)v15, v16);
    if ((char)v26 < 0)
      operator delete(__dst[0]);
  }
  v17 = 1;
  do
  {
    v18 = v17;
    if ((v17 & 1) != 0)
      v19 = 1768123424;
    else
      v19 = 1868786720;
    LODWORD(__s[0]) = 0;
    LOBYTE(__dst[0]) = 0;
    if ((*(unsigned int (**)(int16x8_t *, uint64_t, _OWORD *, void **))(this->i64[0] + 80))(this, v19, __s, __dst))
    {
      v20 = 1;
    }
    else
    {
      v20 = LODWORD(__s[0]) == 0;
    }
    if (!v20)
    {
      __p = 0;
      CADeprecated::CAAutoFree<AudioChannelLayout>::alloc(&__p, LODWORD(__s[0]));
      v21 = __p;
      if (!(*(unsigned int (**)(int16x8_t *, uint64_t, _OWORD *, void *))(this->i64[0] + 88))(this, v19, __s, __p))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"    ", 4);
        if ((v18 & 1) != 0)
          v22 = "Input ";
        else
          v22 = "Output";
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)v22, 6);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)" layout tag: 0x", 15);
        *(_DWORD *)((char *)v28 + *(_QWORD *)(v27 - 24)) = *(_DWORD *)((_BYTE *)v28 + *(_QWORD *)(v27 - 24)) & 0xFFFFFFB5 | 8;
        v23 = (_QWORD *)std::ostream::operator<<();
        *(_DWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(*v23 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 2;
        LOBYTE(v34[0]) = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v34, 1);
LABEL_40:
        free(v21);
        goto LABEL_41;
      }
      if (v21)
        goto LABEL_40;
    }
LABEL_41:
    v17 = 0;
  }
  while ((v18 & 1) != 0);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v28);
  v27 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v28[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v29 < 0)
    operator delete((void *)v28[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x193FFE3A0](&v30);
}

void sub_18F020990(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, ...)
{
  va_list va;

  va_start(va, a8);
  if (a8 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t acv2::CodecConverter::GetPropertyInfo(acv2::CodecConverter *this, signed int inPropertyID, UInt32 *outSize, unsigned __int8 *a4)
{
  uint64_t v8;
  void *v9;
  OpaqueAudioComponentInstance *v10;
  UInt32 v11;
  uint64_t PropertyInfo;
  UInt32 v13;
  OpaqueAudioComponentInstance *v14;
  unsigned __int16 v15;
  AudioCodecPropertyID v16;
  OpaqueAudioComponentInstance *v17;
  AudioCodecPropertyID v18;
  unsigned __int16 v19;
  uint64_t v20;
  _QWORD v22[4];
  Boolean outWritable;
  UInt32 outSizea;
  UInt32 v25;

  outSizea = 0;
  outWritable = 0;
  if (HIBYTE(inPropertyID) != 94)
  {
    if (inPropertyID > 1668114274)
    {
      if (inPropertyID > 1986355825)
      {
        if (inPropertyID > 2020172402)
        {
          if (inPropertyID != 2020172403 && inPropertyID != 2020175987 && inPropertyID != 2020569203)
            goto LABEL_72;
LABEL_49:
          if (outSize)
            *outSize = 4;
          outWritable = 0;
          goto LABEL_84;
        }
        if (inPropertyID != 1986355826)
        {
          if (inPropertyID != 1986360178)
            goto LABEL_72;
          if (*((_BYTE *)this + 196))
          {
            v14 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
            v15 = 29554;
LABEL_44:
            v16 = v15 | 0x616F0000;
            goto LABEL_60;
          }
          return 1886547824;
        }
        if (!*((_BYTE *)this + 196))
          return 1886547824;
        v17 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
        v18 = 1633841780;
        goto LABEL_69;
      }
      if (inPropertyID > 1835623026)
      {
        if (inPropertyID == 1835623027)
          goto LABEL_49;
        if (inPropertyID != 1886353266)
          goto LABEL_72;
        if (!AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x706F7772u, outSize, &outWritable))
          goto LABEL_84;
        return 1886547824;
      }
      if (inPropertyID != 1668114275)
      {
        if (inPropertyID != 1718383476)
          goto LABEL_72;
        if (*((_BYTE *)this + 196))
        {
          acv2::CodecConverter::GetCodecCookie((acv2::CodecConverter *)v22, (uint64_t)this);
          v9 = (void *)v22[0];
          gsl::narrow<unsigned int,unsigned long>(v22[1] - v22[0]);
          v10 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
          v25 = 0;
          if (AudioCodecGetPropertyInfo(v10, 0x6163666Cu, &v25, 0))
            v11 = 48;
          else
            v11 = v25;
          outSizea = v11;
          if (outSize)
            *outSize = v11;
          if (v9)
            operator delete(v9);
          goto LABEL_84;
        }
        return 1886547824;
      }
      if (!*((_BYTE *)this + 196))
        return 1886547824;
      LODWORD(v22[0]) = 0;
      PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x6B756B69u, (UInt32 *)v22, &outWritable);
      if (!(_DWORD)PropertyInfo)
      {
        if (!outSize)
          goto LABEL_84;
        v13 = v22[0];
        goto LABEL_78;
      }
      return PropertyInfo;
    }
    if (inPropertyID <= 1634038641)
    {
      if (inPropertyID <= 1634034289)
      {
        if (inPropertyID == 1633904996 || inPropertyID == 1633906532)
        {
          if (outSize)
            *outSize = 40;
          if (a4)
          {
            v8 = 0;
            *a4 = 0;
            return v8;
          }
          return 0;
        }
LABEL_72:
        if (AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), inPropertyID, outSize, &outWritable))
        {
          v8 = 1886547824;
          v20 = *((_QWORD *)this + 89);
          if (!v20 || AudioUnitGetPropertyInfo(*(AudioUnit *)(v20 + 8), inPropertyID, 0, 0, outSize, &outWritable))
            return v8;
        }
LABEL_84:
        if (a4)
        {
          v8 = 0;
          *a4 = outWritable;
          return v8;
        }
        return 0;
      }
      if (inPropertyID != 1634034290)
      {
        if (inPropertyID != 1634034540)
          goto LABEL_72;
        if (*((_BYTE *)this + 196))
        {
          v14 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
          v15 = 25452;
          goto LABEL_44;
        }
        return 1886547824;
      }
      if (!*((_BYTE *)this + 196))
        return 1886547824;
      v17 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
      v19 = 29793;
      goto LABEL_68;
    }
    if (inPropertyID > 1651663219)
    {
      if (inPropertyID == 1651663220)
      {
        v17 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
        v19 = 24948;
LABEL_68:
        v18 = v19 | 0x62720000;
LABEL_69:
        v8 = AudioCodecGetPropertyInfo(v17, v18, &outSizea, &outWritable);
        if ((_DWORD)v8)
          return v8;
        if (!outSize)
          goto LABEL_84;
        v13 = outSizea;
LABEL_78:
        *outSize = v13;
        goto LABEL_84;
      }
      if (inPropertyID != 1667527029)
        goto LABEL_72;
      v14 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
      v16 = 1936876401;
    }
    else
    {
      if (inPropertyID != 1634038642)
      {
        if (inPropertyID != 1634366322)
          goto LABEL_72;
        v8 = 1886547824;
        if (!*((_BYTE *)this + 196) || !*((_BYTE *)this + 200))
          return v8;
        LODWORD(v22[0]) = 0;
        PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x636F7372u, (UInt32 *)v22, &outWritable);
        if (!(_DWORD)PropertyInfo)
        {
          if (!outSize)
            goto LABEL_84;
          v13 = 8;
          goto LABEL_78;
        }
        return PropertyInfo;
      }
      if (!*((_BYTE *)this + 196))
        return 1886547824;
      v14 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
      v16 = 1869836897;
    }
LABEL_60:
    v8 = AudioCodecGetPropertyInfo(v14, v16, outSize, &outWritable);
    if ((_DWORD)v8)
      return v8;
    goto LABEL_84;
  }
  v8 = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), inPropertyID, &outSizea, &outWritable);
  if (!(_DWORD)v8)
  {
    if (a4)
      *a4 = outWritable;
    if (outSize)
    {
      v8 = 0;
      *outSize = outSizea;
      return v8;
    }
    return 0;
  }
  return v8;
}

void sub_18F020EC8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::CodecConverter::GetProperty(acv2::CodecConverter *this, signed int a2, unsigned int *a3, AudioFormatListItem *a4)
{
  OpaqueAudioComponentInstance *v8;
  AudioCodecPropertyID v9;
  uint64_t PropertyInfo;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  void *v18;
  UInt32 v19;
  OpaqueAudioComponentInstance *v20;
  UInt32 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  OpaqueAudioComponentInstance *v25;
  unsigned __int16 v26;
  AudioCodecPropertyID v27;
  __int128 *v28;
  AudioConverterCapturer *v29;
  UInt32 *p_ioPropertyDataSize;
  uint64_t v31;
  unsigned int v32;
  _QWORD outPropertyData[4];
  AudioFormatInfo ioPropertyDataSize;
  UInt32 outSize;

  if (HIBYTE(a2) == 94
    && acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), a2))
  {
    goto LABEL_3;
  }
  if (a2 <= 1668114274)
  {
    if (a2 > 1634038641)
    {
      if (a2 > 1651663219)
      {
        if (a2 == 1651663220)
        {
          if (*a3 == 4)
          {
            acv2::CodecConverter::CheckInitialize(this, 0, 0);
            v8 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
            v9 = 1651663220;
            return AudioCodecGetProperty(v8, v9, a3, a4);
          }
          return 561211770;
        }
        if (a2 == 1667527029)
        {
          if (*a3 == 4)
          {
            acv2::CodecConverter::CheckInitialize(this, 0, 0);
            v8 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
            v9 = 1936876401;
            return AudioCodecGetProperty(v8, v9, a3, a4);
          }
          return 561211770;
        }
      }
      else
      {
        if (a2 == 1634038642)
        {
          if (*((_BYTE *)this + 196))
          {
            acv2::CodecConverter::CheckInitialize(this, 0, 0);
            LOBYTE(outPropertyData[0]) = 0;
            LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 0;
            PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x6F737261u, (UInt32 *)&ioPropertyDataSize, (Boolean *)outPropertyData);
            if ((_DWORD)PropertyInfo)
              return PropertyInfo;
            if (*a3 == LODWORD(ioPropertyDataSize.mASBD.mSampleRate))
            {
              v25 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
              v27 = 1869836897;
              goto LABEL_86;
            }
            return 561211770;
          }
          return 1886547824;
        }
        if (a2 == 1634366322)
        {
          if (*((_BYTE *)this + 196))
          {
            if (!*((_BYTE *)this + 200))
              return 1869627199;
            if (*a3 == 8)
            {
              acv2::CodecConverter::CheckInitialize(this, 0, 0);
              LODWORD(outPropertyData[0]) = 0;
              LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 4;
              if (!AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x75727372u, (UInt32 *)&ioPropertyDataSize, outPropertyData)&& LODWORD(outPropertyData[0]))
              {
                PropertyInfo = 0;
                a4->mASBD.mSampleRate = 0.0;
                return PropertyInfo;
              }
              LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 8;
              v25 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
              p_ioPropertyDataSize = (UInt32 *)&ioPropertyDataSize;
              v27 = 1668248434;
              return AudioCodecGetProperty(v25, v27, p_ioPropertyDataSize, a4);
            }
            return 561211770;
          }
          return 1886547824;
        }
      }
    }
    else
    {
      if (a2 <= 1634034289)
      {
        if (a2 == 1633904996)
        {
          if (*a3 != 40)
            return 561211770;
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          PropertyInfo = 0;
          if (*((_BYTE *)this + 196))
          {
            v28 = (__int128 *)*((_QWORD *)this + 20);
            v14 = *v28;
            v15 = v28[1];
            v16 = *((_QWORD *)v28 + 4);
          }
          else
          {
            v14 = *((_OWORD *)this + 1);
            v15 = *((_OWORD *)this + 2);
            v16 = *((_QWORD *)this + 6);
          }
        }
        else
        {
          if (a2 != 1633906532)
            goto LABEL_93;
          if (*a3 != 40)
            return 561211770;
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          PropertyInfo = 0;
          if (*((_BYTE *)this + 197))
          {
            v13 = *((_QWORD *)this + 20);
            v14 = *(_OWORD *)(v13 + 40);
            v15 = *(_OWORD *)(v13 + 56);
            v16 = *(_QWORD *)(v13 + 72);
          }
          else
          {
            v14 = *(_OWORD *)((char *)this + 56);
            v15 = *(_OWORD *)((char *)this + 72);
            v16 = *((_QWORD *)this + 11);
          }
        }
        *(_QWORD *)&a4->mASBD.mBitsPerChannel = v16;
        *(_OWORD *)&a4->mASBD.mSampleRate = v14;
        *(_OWORD *)&a4->mASBD.mBytesPerPacket = v15;
        return PropertyInfo;
      }
      if (a2 == 1634034290)
      {
        if (*((_BYTE *)this + 196))
        {
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          LOBYTE(outPropertyData[0]) = 0;
          LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 0;
          PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x62727461u, (UInt32 *)&ioPropertyDataSize, (Boolean *)outPropertyData);
          if ((_DWORD)PropertyInfo)
            return PropertyInfo;
          if (*a3 == LODWORD(ioPropertyDataSize.mASBD.mSampleRate))
          {
            v25 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
            v27 = 1651668065;
            goto LABEL_86;
          }
          return 561211770;
        }
        return 1886547824;
      }
      if (a2 == 1634034540)
      {
        if (*((_BYTE *)this + 196))
        {
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          LOBYTE(outPropertyData[0]) = 0;
          LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 0;
          PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x616F636Cu, (UInt32 *)&ioPropertyDataSize, (Boolean *)outPropertyData);
          if ((_DWORD)PropertyInfo)
            return PropertyInfo;
          if (*a3 == LODWORD(ioPropertyDataSize.mASBD.mSampleRate))
          {
            v25 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
            v26 = 25452;
            goto LABEL_53;
          }
          return 561211770;
        }
        return 1886547824;
      }
    }
  }
  else
  {
    if (a2 <= 1986355825)
    {
      if (a2 > 1835623026)
      {
        if (a2 == 1835623027)
        {
          PropertyInfo = 0;
          LODWORD(a4->mASBD.mSampleRate) = 0;
          return PropertyInfo;
        }
        if (a2 != 1886353266)
          goto LABEL_93;
        if (acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), 0x706F7772u))
        {
          v8 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
          v9 = 1886353266;
          return AudioCodecGetProperty(v8, v9, a3, a4);
        }
        return 1886547824;
      }
      if (a2 == 1668114275)
      {
        if (!*((_BYTE *)this + 196))
          return 1886547824;
        acv2::CodecConverter::CheckInitialize(this, 0, 0);
        PropertyInfo = AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x6B756B69u, a3, a4);
        v29 = (AudioConverterCapturer *)*((_QWORD *)this + 19);
        if (!v29 || (_DWORD)PropertyInfo)
          return PropertyInfo;
        if (*a3)
          AudioConverterCapturer::setDecompressionCookie(v29, a4, *a3);
      }
      else
      {
        if (a2 != 1718383476)
          goto LABEL_93;
        if (!*((_BYTE *)this + 196))
          return 1886547824;
        if (*a3 < 0x30)
          return 561211770;
        acv2::CodecConverter::GetCodecCookie((acv2::CodecConverter *)outPropertyData, (uint64_t)this);
        v17 = *(_OWORD *)((char *)this + 72);
        *(_OWORD *)&ioPropertyDataSize.mASBD.mSampleRate = *(_OWORD *)((char *)this + 56);
        *(_OWORD *)&ioPropertyDataSize.mASBD.mBytesPerPacket = v17;
        v18 = (void *)outPropertyData[0];
        *(_QWORD *)&ioPropertyDataSize.mASBD.mBitsPerChannel = *((_QWORD *)this + 11);
        ioPropertyDataSize.mMagicCookie = (const void *)outPropertyData[0];
        ioPropertyDataSize.mMagicCookieSize = gsl::narrow<unsigned int,unsigned long>(outPropertyData[1] - outPropertyData[0]);
        v19 = *a3;
        v20 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
        outSize = 0;
        if (AudioCodecGetPropertyInfo(v20, 0x6163666Cu, &outSize, 0))
          goto LABEL_29;
        v21 = outSize;
        if (v19 < outSize)
          v21 = v19;
        v32 = v21;
        if (GetFormatListFromCodec(*((AudioCodec *)this + 21), &ioPropertyDataSize, &v32, a4))
        {
LABEL_29:
          v22 = *(_OWORD *)((char *)this + 56);
          v23 = *(_OWORD *)((char *)this + 72);
          *(_QWORD *)&a4->mASBD.mBitsPerChannel = *((_QWORD *)this + 11);
          *(_OWORD *)&a4->mASBD.mSampleRate = v22;
          *(_OWORD *)&a4->mASBD.mBytesPerPacket = v23;
          a4->mChannelLayoutTag = a4->mASBD.mChannelsPerFrame | 0xFFFF0000;
          v24 = 48;
        }
        else
        {
          v24 = v32;
        }
        *a3 = v24;
        if (v18)
          operator delete(v18);
      }
      return 0;
    }
    if (a2 > 2020172402)
    {
      switch(a2)
      {
        case 2020172403:
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          PropertyInfo = 0;
          v12 = *((_DWORD *)this + 88);
          goto LABEL_99;
        case 2020175987:
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          if (!*((_BYTE *)this + 197))
          {
            PropertyInfo = 0;
            v12 = *((_DWORD *)this + 8);
            goto LABEL_99;
          }
          goto LABEL_64;
        case 2020569203:
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          if (!*((_BYTE *)this + 196))
          {
            PropertyInfo = 0;
            v12 = *((_DWORD *)this + 18);
LABEL_99:
            LODWORD(a4->mASBD.mSampleRate) = v12;
            return PropertyInfo;
          }
LABEL_64:
          PropertyInfo = 0;
          v12 = *((_DWORD *)this + 89);
          goto LABEL_99;
      }
      goto LABEL_93;
    }
    if (a2 == 1986355826)
    {
      if (*((_BYTE *)this + 196))
      {
        acv2::CodecConverter::CheckInitialize(this, 0, 0);
        LOBYTE(outPropertyData[0]) = 0;
        LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 0;
        PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x61627274u, (UInt32 *)&ioPropertyDataSize, (Boolean *)outPropertyData);
        if ((_DWORD)PropertyInfo)
          return PropertyInfo;
        if (*a3 == LODWORD(ioPropertyDataSize.mASBD.mSampleRate))
        {
          v25 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
          v27 = 1633841780;
          goto LABEL_86;
        }
        return 561211770;
      }
      return 1886547824;
    }
    if (a2 == 1986360178)
    {
      if (*((_BYTE *)this + 196))
      {
        acv2::CodecConverter::CheckInitialize(this, 0, 0);
        LOBYTE(outPropertyData[0]) = 0;
        LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 0;
        PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x616F7372u, (UInt32 *)&ioPropertyDataSize, (Boolean *)outPropertyData);
        if ((_DWORD)PropertyInfo)
          return PropertyInfo;
        if (*a3 == LODWORD(ioPropertyDataSize.mASBD.mSampleRate))
        {
          v25 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
          v26 = 29554;
LABEL_53:
          v27 = v26 | 0x616F0000;
LABEL_86:
          p_ioPropertyDataSize = a3;
          return AudioCodecGetProperty(v25, v27, p_ioPropertyDataSize, a4);
        }
        return 561211770;
      }
      return 1886547824;
    }
  }
LABEL_93:
  if (acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), a2))
  {
    acv2::CodecConverter::CheckInitialize(this, 0, 0);
LABEL_3:
    v8 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 21);
    v9 = a2;
    return AudioCodecGetProperty(v8, v9, a3, a4);
  }
  PropertyInfo = 1886547824;
  v31 = *((_QWORD *)this + 89);
  if (v31 && acv2::PostDecodeRenderer::SupportsProperty(*(acv2::PostDecodeRenderer **)(v31 + 8), a2))
    return AudioUnitGetProperty(*(AudioUnit *)(*((_QWORD *)this + 89) + 8), a2, 0, 0, a4, a3);
  return PropertyInfo;
}

void sub_18F0216B4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::CodecConverter::NeedsBufferedInput(acv2::CodecConverter *this)
{
  return 1;
}

uint64_t acv2::CodecConverter::HasPrimeInfo(acv2::CodecConverter *this)
{
  return 1;
}

OpaqueAudioComponentInstance *acv2::CodecConverter::CalcPrimeInfo(OpaqueAudioComponentInstance *this, AudioConverterPrimeInfo *a2)
{
  AudioCodec *v3;
  uint64_t v4;
  UInt32 v5;
  uint64_t v6;
  UInt32 ioPropertyDataSize;

  v3 = (AudioCodec *)this;
  v6 = 0;
  if (*((_BYTE *)this + 197) && *((_BYTE *)this + 380))
  {
    v4 = *(_QWORD *)((char *)this + 372);
  }
  else
  {
    this = acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), 0x7072696Du);
    if ((_DWORD)this)
    {
      acv2::CodecConverter::CheckInitialize((acv2::CodecConverter *)v3, 0, 0);
      ioPropertyDataSize = 8;
      this = (OpaqueAudioComponentInstance *)AudioCodecGetProperty(v3[21], 0x7072696Du, &ioPropertyDataSize, &v6);
      v4 = v6;
    }
    else
    {
      v4 = 0;
    }
  }
  v5 = a2->trailingFrames + HIDWORD(v4);
  a2->leadingFrames += v4;
  a2->trailingFrames = v5;
  return this;
}

BOOL acv2::CodecConverter::HasPropertySettings(AudioCodec *this)
{
  BOOL v1;
  Boolean outWritable;
  UInt32 outSize;

  outSize = 0;
  outWritable = 0;
  if (AudioCodecGetPropertyInfo(this[21], 0x61637320u, &outSize, &outWritable))
    v1 = 1;
  else
    v1 = outSize == 0;
  return !v1;
}

applesauce::CF::DictionaryRef *acv2::CodecConverter::GetPropertySettings@<X0>(AudioCodec *this@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  applesauce::CF::DictionaryRef *result;
  __CFDictionary *v5;
  const void *v6;
  CFTypeRef cf;
  UInt32 ioPropertyDataSize;

  acv2::CodecConverter::CheckInitialize((acv2::CodecConverter *)this, 0, 0);
  cf = 0;
  ioPropertyDataSize = 8;
  result = (applesauce::CF::DictionaryRef *)AudioCodecGetProperty(this[21], 0x61637320u, &ioPropertyDataSize, &cf);
  if ((_DWORD)result)
  {
    *(_QWORD *)a2 = 0;
  }
  else
  {
    v5 = (__CFDictionary *)cf;
    v6 = (const void *)(*((uint64_t (**)(AudioCodec *))*this + 7))(this);
    CFDictionaryAddValue(v5, CFSTR("converter"), v6);
    return applesauce::CF::DictionaryRef::DictionaryRef(a2, cf);
  }
  return result;
}

uint64_t acv2::CodecConverter::SetPropertySettings(acv2::CodecConverter **this, const __CFDictionary *a2)
{
  const __CFDictionary *inPropertyData;

  inPropertyData = a2;
  acv2::CodecConverter::CheckUninitialize(this);
  return AudioCodecSetProperty(this[21], 0x61637320u, 8u, &inPropertyData);
}

uint64_t acv2::CodecConverter::EnableInstrumentation(AudioCodec *this, int a2)
{
  int inPropertyData;

  inPropertyData = a2;
  return AudioCodecSetProperty(this[21], 0x24696E73u, 4u, &inPropertyData);
}

uint64_t acv2::CodecConverter::GetInstrumentationData(AudioCodec *this)
{
  uint64_t v2;
  UInt32 ioPropertyDataSize;

  v2 = 0;
  ioPropertyDataSize = 8;
  AudioCodecGetProperty(this[21], 0x24696E64u, &ioPropertyDataSize, &v2);
  return v2;
}

uint64_t acv2::CodecConverter::PostBuild(acv2::CodecConverter *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  int v12;
  CA::AudioBuffers *v13;
  std::pmr **v14;
  AudioStreamBasicDescription v16;

  acv2::CodecConverter::CheckInitialize(this, 0, 0);
  v2 = *((_QWORD *)this + 89);
  if (v2)
  {
    v3 = *((_DWORD *)this + 90);
    v4 = *((_DWORD *)this + 92);
    v5 = *(_QWORD *)(v2 + 72);
    *(_DWORD *)(v2 + 56) = v3;
    v6 = (v3 + 4095) / v3;
    if (v6 <= 1)
      v6 = 1;
    v7 = v6 * v3;
    v8 = 2 * v6;
    *(_DWORD *)(v2 + 96) = v7;
    *(_DWORD *)(v2 + 100) = v8;
    v9 = (v8 * v4);
    v10 = *(_QWORD *)(v2 + 80) - v5;
    if (v9 <= v10)
    {
      if (v9 < v10)
        *(_QWORD *)(v2 + 80) = v5 + v9;
    }
    else
    {
      std::vector<unsigned char>::__append((std::vector<char> *)(v2 + 72), v9 - v10);
      v7 = *(_DWORD *)(v2 + 96);
    }
    v11 = *(_OWORD *)(v2 + 32);
    *(_OWORD *)&v16.mSampleRate = *(_OWORD *)(v2 + 16);
    *(_OWORD *)&v16.mBytesPerPacket = v11;
    *(_QWORD *)&v16.mBitsPerChannel = *(_QWORD *)(v2 + 48);
    v16.mFormatID = 1885564203;
    v12 = *(_DWORD *)(v2 + 40) * v7;
    v13 = (CA::AudioBuffers *)operator new();
    CA::AudioBuffers::AudioBuffers(v13, &v16, v12);
    v14 = *(std::pmr ***)(v2 + 64);
    *(_QWORD *)(v2 + 64) = v13;
    if (v14)
      std::default_delete<CA::AudioBuffers>::operator()[abi:ne180100](v14);
  }
  return 0;
}

void sub_18F021A2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_18F021A50(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F021A14);
}

void std::__optional_destruct_base<ACCodecOutputBuffer,false>::reset[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 208))
  {
    v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 120);
    if (v3)
    {
      *(_QWORD *)(a1 + 128) = v3;
      operator delete(v3);
    }
    ExtendedAudioBufferList_Destroy(*(std::pmr **)(a1 + 112));
    ACAudioSpan::~ACAudioSpan((std::pmr **)(a1 + 8));
    *(_BYTE *)(a1 + 208) = 0;
  }
}

applesauce::CF::StringRef *applesauce::CF::StringRef::from_get(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  applesauce::CF::StringRef *v2;

  v2 = this;
  if (cf)
  {
    CFRetain(cf);
    return applesauce::CF::StringRef::StringRef(v2, cf);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

void acv2::CodecConverter::GetCodecCookie(acv2::CodecConverter *this, uint64_t a2)
{
  OSStatus PropertyInfo;
  std::vector<char>::pointer begin;
  std::vector<char> outPropertyData;
  Boolean outWritable;
  UInt32 outSize;

  memset(&outPropertyData, 0, sizeof(outPropertyData));
  outSize = 0;
  outWritable = 0;
  PropertyInfo = AudioCodecGetPropertyInfo(*(AudioCodec *)(a2 + 168), 0x6B756B69u, &outSize, &outWritable);
  if (PropertyInfo)
  {
    begin = 0;
  }
  else
  {
    if (outSize)
    {
      std::vector<unsigned char>::__append(&outPropertyData, outSize);
      begin = outPropertyData.__begin_;
    }
    else
    {
      begin = 0;
    }
    PropertyInfo = AudioCodecGetProperty(*(AudioCodec *)(a2 + 168), 0x6B756B69u, &outSize, begin);
    if (!PropertyInfo)
    {
      if ((std::vector<char>::pointer)outSize <= (std::vector<char>::pointer)(outPropertyData.__end_ - begin))
      {
        PropertyInfo = 0;
        if ((std::vector<char>::pointer)outSize < (std::vector<char>::pointer)(outPropertyData.__end_ - begin))
          outPropertyData.__end_ = &begin[outSize];
      }
      else
      {
        std::vector<unsigned char>::__append(&outPropertyData, outSize - (unint64_t)(outPropertyData.__end_ - begin));
        PropertyInfo = 0;
        begin = outPropertyData.__begin_;
      }
    }
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(this, begin, (uint64_t)outPropertyData.__end_, outPropertyData.__end_ - begin);
  *((_DWORD *)this + 6) = PropertyInfo;
  if (outPropertyData.__begin_)
    operator delete(outPropertyData.__begin_);
}

void sub_18F021C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t gsl::narrow<unsigned int,unsigned long>(unint64_t result)
{
  _QWORD *exception;

  if (HIDWORD(result))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_1E290A260;
  }
  return result;
}

void *CADeprecated::CAAutoFree<AudioChannelLayout>::alloc(void **a1, unint64_t a2)
{
  void *v4;
  void *result;
  std::bad_alloc *exception;
  std::bad_alloc *v7;

  if (a2 >> 59)
    goto LABEL_7;
  v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  result = malloc_type_malloc(32 * a2, 0x7C51E058uLL);
  if (a2)
  {
    if (!result)
    {
LABEL_7:
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v7 = std::bad_alloc::bad_alloc(exception);
    }
  }
  *a1 = result;
  return result;
}

uint64_t std::__optional_destruct_base<ACCodecOutputBuffer,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 208))
  {
    v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 120);
    if (v3)
    {
      *(_QWORD *)(a1 + 128) = v3;
      operator delete(v3);
    }
    ExtendedAudioBufferList_Destroy(*(std::pmr **)(a1 + 112));
    ACAudioSpan::~ACAudioSpan((std::pmr **)(a1 + 8));
  }
  return a1;
}

uint64_t acv2::CodecConverter::CodecConverter(uint64_t a1, uint64_t a2, OpaqueAudioComponent *a3, uint64_t a4, uint64_t a5, __int128 *a6, _OWORD *a7, char **a8, uint64_t *a9, char a10)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  AudioComponentInstance *v20;
  uint64_t v21;
  int v22;
  BOOL v24;
  int v25;
  BOOL v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  AudioComponentInstance v37;
  OSStatus v38;
  uint64_t (***v39)(_QWORD);
  uint64_t (***v40)(_QWORD);
  uint64_t (***v41)(_QWORD);
  uint64_t v42;
  __int128 v43;
  BOOL v44;
  char v45;
  int16x8_t v46;
  unsigned __int8 v47;
  int32x4_t v48;
  uint32x4_t v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  const char *v54;
  unsigned __int8 v55;
  int32x4_t v56;
  uint32x4_t v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  const void *v63;
  char *v65;
  uint64_t v66;
  void *v67;
  __int128 *v68;
  char v69;
  char *v70;
  uint64_t v71;
  void *v72;
  __int128 *v73;
  char v74;
  _DWORD *exception;
  __int128 *p_x;
  __int128 *v77;
  char **v78;
  std::string v79;
  std::string v80;
  std::string v81;
  void *outPropertyData[2];
  char v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 __x;
  int64_t v90;

  v16 = a6[3];
  v86 = a6[2];
  v87 = v16;
  v88 = a6[4];
  v17 = v88;
  v18 = a6[1];
  v84 = *a6;
  v19 = v84;
  v85 = v18;
  *(_OWORD *)(a1 + 48) = v86;
  *(_OWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = v17;
  *(_OWORD *)(a1 + 16) = v19;
  *(_OWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = -1;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)a1 = &off_1E290A4C8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 168) = a4;
  v20 = (AudioComponentInstance *)(a1 + 168);
  *(_QWORD *)(a1 + 176) = 0;
  v21 = a1 + 176;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v22 = *((_DWORD *)a6 + 2);
  v24 = v22 == 1819304813 || v22 == 1885564203;
  *(_BYTE *)(a1 + 196) = v24;
  v25 = *((_DWORD *)a6 + 12);
  v27 = v25 == 1819304813 || v25 == 1885564203;
  *(_BYTE *)(a1 + 197) = v27;
  *(_BYTE *)(a1 + 198) = a10;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 203) = 0;
  *(_DWORD *)(a1 + 199) = 0;
  LOBYTE(__x) = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 328), 8uLL, (const std::vector<char>::value_type *)&__x);
  **(_DWORD **)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 352) = xmmword_18F117380;
  *(_DWORD *)(a1 + 368) = 0;
  v28 = *a9;
  *(_DWORD *)(a1 + 380) = *((_DWORD *)a9 + 2);
  *(_QWORD *)(a1 + 372) = v28;
  *(_DWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 388) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 600) = 0;
  v30 = a7[3];
  v29 = a7[4];
  v31 = a7[2];
  *(_OWORD *)(a1 + 624) = a7[1];
  *(_OWORD *)(a1 + 640) = v31;
  *(_OWORD *)(a1 + 656) = v30;
  *(_OWORD *)(a1 + 672) = v29;
  *(_OWORD *)(a1 + 608) = *a7;
  *(_QWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 720) = 1;
  *(_DWORD *)(a1 + 724) = 0;
  LOBYTE(__x) = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 728), 0x20uLL, (const std::vector<char>::value_type *)&__x);
  v32 = *(_QWORD *)(a1 + 728);
  *(_QWORD *)v32 = 0;
  *(_DWORD *)(v32 + 8) = 0;
  LOBYTE(__x) = 0;
  v78 = (char **)(a1 + 752);
  std::vector<char>::vector((std::vector<char> *)(a1 + 752), 0x20uLL, (const std::vector<char>::value_type *)&__x);
  v33 = *(_QWORD *)(a1 + 752);
  *(_QWORD *)v33 = 0;
  *(_DWORD *)(v33 + 8) = 0;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_QWORD *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 832) = 1;
  *(_OWORD *)(a1 + 840) = 0u;
  if (a5)
  {
    v34 = operator new();
    *(_QWORD *)v34 = &off_1E290AB50;
    *(_QWORD *)(v34 + 8) = a5;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 44) = 0u;
    *(_OWORD *)(v34 + 64) = 0u;
    *(_OWORD *)(v34 + 80) = 0u;
    *(_OWORD *)(v34 + 96) = 0u;
    *(_OWORD *)(v34 + 112) = 0u;
    *(_OWORD *)(v34 + 128) = 0u;
    *(_OWORD *)(v34 + 144) = 0u;
    *(_QWORD *)(v34 + 160) = 0;
    v35 = *(_QWORD *)(a1 + 712);
    *(_QWORD *)(a1 + 712) = v34;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    if (v78 != a8)
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v78, *a8, a8[1], a8[1] - *a8);
  }
  v36 = *a9;
  *(_BYTE *)(a1 + 380) = *((_BYTE *)a9 + 8);
  *(_QWORD *)(a1 + 372) = v36;
  v37 = *v20;
  if (*v20)
    goto LABEL_21;
  v38 = AudioComponentInstanceNew(a3, v20);
  if (v38)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = v38;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  v37 = *v20;
  if (*v20)
  {
LABEL_21:
    v39 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioComponentInstance))(*(_QWORD *)v37 + 8))(v37);
    if (v39)
    {
      v40 = (uint64_t (***)(_QWORD))(**v39)(v39);
      if (v40)
      {
        v41 = (uint64_t (***)(_QWORD))(**v40)(v40);
        if (v41)
        {
          v42 = (**v41)(v41);
          v43 = *(_OWORD *)(v42 + 36);
          *(_DWORD *)(v21 + 16) = *(_DWORD *)(v42 + 52);
          *(_OWORD *)v21 = v43;
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 196))
  {
    LODWORD(outPropertyData[0]) = 0;
    LODWORD(__x) = 4;
    if (AudioCodecGetProperty(*v20, 0x6C6D7263u, (UInt32 *)&__x, outPropertyData))
      v44 = 1;
    else
      v44 = LODWORD(outPropertyData[0]) == 0;
    v45 = !v44;
    *(_BYTE *)(a1 + 200) = v45;
  }
  *(_QWORD *)(a1 + 688) = a6;
  *(_QWORD *)(a1 + 696) = (char *)a6 + 40;
  acv2::CodecConverter::CheckInitialize((acv2::CodecConverter *)a1, 0, 0);
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  if (!*(_BYTE *)(a1 + 197))
    goto LABEL_61;
  v47 = atomic_load((unsigned __int8 *)_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input);
  if ((v47 & 1) == 0
    && __cxa_guard_acquire(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input))
  {
    v65 = getenv("CoreAudio_CaptureDecoder_Output");
    if (!v65)
    {
LABEL_75:
      v69 = 0;
LABEL_95:
      _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input = v69;
      __cxa_guard_release(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input);
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(&__x, v65);
    v66 = HIBYTE(v90);
    if (v90 < 0)
      v66 = *((_QWORD *)&__x + 1);
    if (v66 == 2)
    {
      v67 = (void *)__x;
      p_x = &__x;
      if (v90 < 0)
        p_x = (__int128 *)__x;
      if (*(_WORD *)p_x == 20302)
        goto LABEL_73;
    }
    else if (v66 == 1)
    {
      v67 = (void *)__x;
      v68 = &__x;
      if (v90 < 0)
        v68 = (__int128 *)__x;
      if (*(_BYTE *)v68 == 48)
      {
LABEL_73:
        if (SHIBYTE(v90) < 0)
          operator delete(v67);
        goto LABEL_75;
      }
    }
    if (SHIBYTE(v90) < 0)
      operator delete((void *)__x);
    v69 = 1;
    goto LABEL_95;
  }
LABEL_35:
  if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input)
  {
    v46.i32[0] = bswap32(*(_DWORD *)(a1 + 24));
    *(int8x8_t *)v46.i8 = vzip1_s8(*(int8x8_t *)v46.i8, *(int8x8_t *)v46.i8);
    v48.i64[0] = 0x1F0000001FLL;
    v48.i64[1] = 0x1F0000001FLL;
    v49.i64[0] = 0x5F0000005FLL;
    v49.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)v46.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v49, (uint32x4_t)vsraq_n_s32(v48, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v46.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v46.i8, (int8x8_t)0x2E002E002E002ELL);
    *((_BYTE *)&v80.__r_.__value_.__s + 23) = 4;
    LODWORD(v80.__r_.__value_.__l.__data_) = vmovn_s16(v46).u32[0];
    v80.__r_.__value_.__s.__data_[4] = 0;
    v50 = std::string::insert(&v80, 0, "-", 1uLL);
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v52 = std::string::append(&v81, "-DecoderOut", 0xBuLL);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v90 = v52->__r_.__value_.__r.__words[2];
    __x = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    if (v90 >= 0)
      v54 = (const char *)&__x;
    else
      v54 = (const char *)__x;
    acv2::AudioConverterBase::createCapturer(outPropertyData, v54, (const std::__fs::filesystem::path **)(a1 + 848), (__int128 *)(a1 + 56), (const void *)a1);
    if (v83 < 0)
      operator delete(outPropertyData[0]);
    if (SHIBYTE(v90) < 0)
      operator delete((void *)__x);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
  }
  if (*(_BYTE *)(a1 + 197))
  {
    v55 = atomic_load((unsigned __int8 *)&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
    if ((v55 & 1) != 0
      || !__cxa_guard_acquire(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input))
    {
LABEL_49:
      if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input)
      {
        v46.i32[0] = bswap32(*(_DWORD *)(a1 + 24));
        *(int8x8_t *)v46.i8 = vzip1_s8(*(int8x8_t *)v46.i8, *(int8x8_t *)v46.i8);
        v56.i64[0] = 0x1F0000001FLL;
        v56.i64[1] = 0x1F0000001FLL;
        v57.i64[0] = 0x5F0000005FLL;
        v57.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v46.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v57, (uint32x4_t)vsraq_n_s32(v56, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v46.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v46.i8, (int8x8_t)0x2E002E002E002ELL);
        *((_BYTE *)&v79.__r_.__value_.__s + 23) = 4;
        LODWORD(v79.__r_.__value_.__l.__data_) = vmovn_s16(v46).u32[0];
        v79.__r_.__value_.__s.__data_[4] = 0;
        v58 = std::string::insert(&v79, 0, "-", 1uLL);
        v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v80.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        v60 = std::string::append(&v80, "-DecoderIn", 0xAuLL);
        v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v81.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &v81;
        else
          v62 = (std::string *)v81.__r_.__value_.__r.__words[0];
        acv2::AudioConverterBase::createCapturer(&__x, (const char *)v62, (const std::__fs::filesystem::path **)(a1 + 840), (__int128 *)(a1 + 16), (const void *)a1);
        if (SHIBYTE(v90) < 0)
          operator delete((void *)__x);
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
      }
      goto LABEL_61;
    }
    v70 = getenv("CoreAudio_CaptureDecoder_Input");
    if (!v70)
      goto LABEL_87;
    std::string::basic_string[abi:ne180100]<0>(&__x, v70);
    v71 = HIBYTE(v90);
    if (v90 < 0)
      v71 = *((_QWORD *)&__x + 1);
    if (v71 == 2)
    {
      v72 = (void *)__x;
      v77 = &__x;
      if (v90 < 0)
        v77 = (__int128 *)__x;
      if (*(_WORD *)v77 == 20302)
        goto LABEL_85;
    }
    else if (v71 == 1)
    {
      v72 = (void *)__x;
      v73 = &__x;
      if (v90 < 0)
        v73 = (__int128 *)__x;
      if (*(_BYTE *)v73 == 48)
      {
LABEL_85:
        if (SHIBYTE(v90) < 0)
          operator delete(v72);
LABEL_87:
        v74 = 0;
LABEL_102:
        _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input = v74;
        __cxa_guard_release(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
        goto LABEL_49;
      }
    }
    if (SHIBYTE(v90) < 0)
      operator delete((void *)__x);
    v74 = 1;
    goto LABEL_102;
  }
LABEL_61:
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v81, "");
  v63 = *(const void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v81.__r_.__value_.__r.__words[0];
  v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
  if (v63)
    CFRelease(v63);
  return a1;
}

void sub_18F0224F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::pmr **a10, void **a11, void **a12, const std::__fs::filesystem::path **a13, const std::__fs::filesystem::path **a14, void **a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  void **v35;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  const void *v42;

  __cxa_guard_abort(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100](a14, 0);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100](a13, 0);
  v37 = *v35;
  if (*v35)
  {
    *(_QWORD *)(v34 + 784) = v37;
    operator delete(v37);
  }
  v38 = *a15;
  if (*a15)
  {
    *(_QWORD *)(v34 + 760) = v38;
    operator delete(v38);
  }
  v39 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v34 + 736) = v39;
    operator delete(v39);
  }
  v40 = *(_QWORD *)(v34 + 712);
  *(_QWORD *)(v34 + 712) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  std::__optional_destruct_base<ACCodecOutputBuffer,false>::~__optional_destruct_base[abi:ne180100](v34 + 392);
  v41 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v34 + 336) = v41;
    operator delete(v41);
  }
  if (*(_BYTE *)(v34 + 320))
    ACAudioSpan::~ACAudioSpan(a10);
  v42 = *(const void **)(v34 + 208);
  if (v42)
    CFRelease(v42);
  acv2::AudioConverterBase::~AudioConverterBase((acv2::AudioConverterBase *)v34);
  _Unwind_Resume(a1);
}

uint64_t acv2::CodecConverter::GetInputLayout(char **this, std::vector<char> *a2, unsigned __int8 *a3)
{
  int Codec;
  std::vector<char>::pointer begin;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  std::vector<char>::pointer v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t message;
  caulk::concurrent::message *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  std::vector<char> __p;

  acv2::CodecConverter::CheckInitialize((acv2::CodecConverter *)this, 0, 0);
  memset(&__p, 0, sizeof(__p));
  Codec = acv2::CodecConverter::GetCodecProperty<unsigned char>((uint64_t)this, 0x69636C20u, &__p);
  begin = __p.__begin_;
  if (Codec)
  {
    if (!__p.__begin_)
      goto LABEL_13;
    goto LABEL_12;
  }
  v8 = *((_DWORD *)__p.__begin_ + 2);
  if (v8 <= 1)
    v9 = 1;
  else
    v9 = *((_DWORD *)__p.__begin_ + 2);
  v10 = 20 * v9 + 12;
  v11 = a2->__begin_;
  v12 = a2->__end_ - a2->__begin_;
  if (v10 <= v12)
  {
    if (v10 < v12)
      a2->__end_ = &v11[v10];
  }
  else
  {
    std::vector<unsigned char>::__append(a2, v10 - v12);
    v11 = a2->__begin_;
    v8 = *((_DWORD *)begin + 2);
  }
  memcpy(v11, begin, 20 * v8 + 12);
  v21 = 0;
  if (AudioFormatProperty_NumberOfChannelsForLayout((const AudioChannelLayout *)a2->__begin_, &v21))
  {
LABEL_12:
    operator delete(begin);
LABEL_13:
    if (this + 91 != (char **)a2)
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, this[91], this[92], this[92] - this[91]);
    v13 = 0;
    *a3 = 1;
    return v13;
  }
  v15 = v21;
  if (v21 == *((_DWORD *)this + 11))
  {
    v13 = 0;
  }
  else
  {
    v13 = 1718449215;
    v16 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v16 + 88, 16);
    if (message)
    {
      v18 = (caulk::concurrent::message *)message;
      v19 = _os_log_pack_fill();
      v20 = *((_DWORD *)this + 11);
      *(_DWORD *)v19 = 67109376;
      *(_DWORD *)(v19 + 4) = v15;
      *(_WORD *)(v19 + 8) = 1024;
      *(_DWORD *)(v19 + 10) = v20;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v18);
    }
  }
  operator delete(begin);
  return v13;
}

void sub_18F022858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  operator delete(v10);
  _Unwind_Resume(a1);
}

caulk::concurrent::message *acv2::CodecConverter::SetInputChannelLayout(acv2::CodecConverter *this, const AudioChannelLayout *a2, int a3)
{
  UInt32 mNumberChannelDescriptions;
  UInt32 v6;
  unint64_t v7;
  std::vector<char>::pointer begin;
  unint64_t v9;
  std::vector<char> *v10;
  uint64_t v12;
  caulk::concurrent::message *result;
  caulk::concurrent::message *v14;
  uint64_t v15;
  int v16;

  if (*((_DWORD *)this + 11) == a3)
  {
    mNumberChannelDescriptions = a2->mNumberChannelDescriptions;
    if (mNumberChannelDescriptions <= 1)
      v6 = 1;
    else
      v6 = a2->mNumberChannelDescriptions;
    v7 = 20 * v6 + 12;
    begin = (std::vector<char>::pointer)*((_QWORD *)this + 91);
    v9 = *((_QWORD *)this + 92) - (_QWORD)begin;
    if (v7 <= v9)
    {
      if (v7 < v9)
        *((_QWORD *)this + 92) = &begin[v7];
    }
    else
    {
      v10 = (std::vector<char> *)((char *)this + 728);
      std::vector<unsigned char>::__append(v10, v7 - v9);
      begin = v10->__begin_;
      mNumberChannelDescriptions = a2->mNumberChannelDescriptions;
    }
    return (caulk::concurrent::message *)memcpy(begin, a2, 20 * mNumberChannelDescriptions + 12);
  }
  else
  {
    v12 = _os_log_pack_size();
    result = (caulk::concurrent::message *)caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v12 + 88, 16);
    if (result)
    {
      v14 = result;
      v15 = _os_log_pack_fill();
      v16 = *((_DWORD *)this + 11);
      *(_DWORD *)v15 = 67109376;
      *(_DWORD *)(v15 + 4) = a3;
      *(_WORD *)(v15 + 8) = 1024;
      *(_DWORD *)(v15 + 10) = v16;
      return (caulk::concurrent::message *)caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v14);
    }
  }
  return result;
}

uint64_t acv2::CodecConverter::SetOutputChannelLayout(acv2::CodecConverter *this, const AudioChannelLayout *inData, UInt32 inDataSize, int a4)
{
  uint64_t v7;
  uint64_t result;
  UInt32 mNumberChannelDescriptions;
  UInt32 v10;
  unint64_t v11;
  std::vector<char>::pointer begin;
  unint64_t v13;
  std::vector<char> *v14;
  uint64_t v16;
  caulk::concurrent::message *v17;
  uint64_t v18;
  int v19;
  unsigned int PropertyInfo;
  UInt32 v21;
  UInt32 v22;
  unint64_t v23;
  std::vector<char>::pointer v24;
  unint64_t v25;
  std::vector<char> *v26;
  Boolean outWritable;

  outWritable = 0;
  if (*((_DWORD *)this + 21) != a4)
  {
    v16 = _os_log_pack_size();
    result = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v16 + 88, 16);
    if (!result)
      return result;
    v17 = (caulk::concurrent::message *)result;
    v18 = _os_log_pack_fill();
    v19 = *((_DWORD *)this + 21);
    *(_DWORD *)v18 = 67109376;
    *(_DWORD *)(v18 + 4) = a4;
    *(_WORD *)(v18 + 8) = 1024;
    *(_DWORD *)(v18 + 10) = v19;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v17);
    return 0;
  }
  v7 = *((_QWORD *)this + 89);
  if (v7)
  {
    result = AudioUnitSetProperty(*(AudioUnit *)(v7 + 8), 0x13u, 2u, 0, inData, inDataSize);
    if ((_DWORD)result)
      return result;
    mNumberChannelDescriptions = inData->mNumberChannelDescriptions;
    if (mNumberChannelDescriptions <= 1)
      v10 = 1;
    else
      v10 = inData->mNumberChannelDescriptions;
    v11 = 20 * v10 + 12;
    begin = (std::vector<char>::pointer)*((_QWORD *)this + 94);
    v13 = *((_QWORD *)this + 95) - (_QWORD)begin;
    if (v11 <= v13)
    {
      if (v11 < v13)
        *((_QWORD *)this + 95) = &begin[v11];
    }
    else
    {
      v14 = (std::vector<char> *)((char *)this + 752);
      std::vector<unsigned char>::__append(v14, v11 - v13);
      begin = v14->__begin_;
      mNumberChannelDescriptions = inData->mNumberChannelDescriptions;
    }
    memcpy(begin, inData, 20 * mNumberChannelDescriptions + 12);
    return 0;
  }
  if (!*((_BYTE *)this + 196)
    || AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x69636C20u, 0, &outWritable)
    || !outWritable
    || (acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this),
        result = AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x69636C20u, inDataSize, inData),
        !(_DWORD)result))
  {
    PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x6F636C20u, 0, &outWritable);
    if (PropertyInfo || !outWritable)
    {
      v21 = inData->mNumberChannelDescriptions;
      if (v21 <= 1)
        v22 = 1;
      else
        v22 = inData->mNumberChannelDescriptions;
      v23 = 20 * v22 + 12;
      v24 = (std::vector<char>::pointer)*((_QWORD *)this + 94);
      v25 = *((_QWORD *)this + 95) - (_QWORD)v24;
      if (v23 <= v25)
      {
        if (v23 < v25)
          *((_QWORD *)this + 95) = &v24[v23];
      }
      else
      {
        v26 = (std::vector<char> *)((char *)this + 752);
        std::vector<unsigned char>::__append(v26, v23 - v25);
        v24 = v26->__begin_;
        v21 = inData->mNumberChannelDescriptions;
      }
      memcpy(v24, inData, 20 * v21 + 12);
      if (PropertyInfo | outWritable)
        return PropertyInfo;
      else
        return 561476212;
    }
    else
    {
      acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
      return AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x6F636C20u, inDataSize, inData);
    }
  }
  return result;
}

BOOL acv2::CodecConverter::PrimeInfoIsWritable(acv2::CodecConverter *this)
{
  BOOL v2;
  UInt32 outSize;
  Boolean outWritable;

  if (*((_BYTE *)this + 197))
    return 1;
  outWritable = 0;
  outSize = 0;
  if (AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x7072696Du, &outSize, &outWritable))
    v2 = 1;
  else
    v2 = outWritable == 0;
  return !v2;
}

void ResamplerInitLocker::~ResamplerInitLocker(ResamplerInitLocker *this)
{
  pthread_mutex_unlock(&sInitLocker);
}

void sub_18F022D2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F022D9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F022E58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F0233B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  void *v26;
  void *v27;
  void *v28;

  if (a15)
    free(a15);

  _Unwind_Resume(a1);
}

void sub_18F02361C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F0236D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F023798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL21getAVAudioFormatClassv_block_invoke_7639(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFAudioLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioFormat");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAudioFormatClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVAudioFormatClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AVFASoftLink.h"), 64, CFSTR("Unable to find class %s"), "AVAudioFormat");

    __break(1u);
  }
}

void sub_18F023874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F023994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _Unwind_Exception *exception_object)
{
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZL28getAVAudioChannelLayoutClassv_block_invoke_7654(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFAudioLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioChannelLayout");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAudioChannelLayoutClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVAudioChannelLayoutClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AVFASoftLink.h"), 65, CFSTR("Unable to find class %s"), "AVAudioChannelLayout");

    __break(1u);
  }
}

void sub_18F023A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F023CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F023FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_18F024130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18F0244F8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_18F0245E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F02489C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_18F024938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)AUAudioUnitV2Bridge;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18F024B58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F024BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F024CA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18F024D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18F024E90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F025084(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_18F025F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{

  _Unwind_Resume(a1);
}

void sub_18F0261A4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_18F026390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_18F0264C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F0265D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F026684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_18F026750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F0267C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F026818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F026B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  void *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18F026D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void std::default_delete<AUAudioUnitV2Bridge_Renderer>::operator()[abi:ne180100](_QWORD *a1)
{
  (*(void (**)(_QWORD *))(a1[11] + 24))(a1 + 12);
  (*(void (**)(_QWORD *))(a1[6] + 24))(a1 + 7);
  (*(void (**)(_QWORD *))(a1[1] + 24))(a1 + 2);
  JUMPOUT(0x193FFE460);
}

uint64_t setStateAndNotify(const __CFDictionary *a1, AUAudioUnitV2Bridge *a2, int a3)
{
  AUAudioUnitV2Bridge *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  AUAudioUnitV2Bridge *v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  atomic_store(1u, (unsigned __int8 *)&v5->_willSetFullState);
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917CC8;
  LODWORD(v6[1].__vftable) = 0;
  v8 = v6 + 1;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = v5;
  LODWORD(v20) = a3;
  *((_QWORD *)&v20 + 1) = a1;
  v11 = operator new(0x30uLL);
  *v11 = &off_1E29138C0;
  v11[1] = v8;
  v11[2] = v6;
  v11[3] = v10;
  *((_OWORD *)v11 + 2) = v20;
  v26 = v11;
  v12 = dispatch_to_main_queue_with_timeout((uint64_t)v25);
  v13 = v26;
  if (v26 == v25)
  {
    v14 = 4;
    v13 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_8;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_8:
  if ((v12 & 1) != 0)
    goto LABEL_16;
  if (kInterAppAudioScope)
  {
    v15 = *(id *)kInterAppAudioScope;
    if (!v15)
      goto LABEL_16;
  }
  else
  {
    v15 = MEMORY[0x1E0C81028];
    v16 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v22 = "AUAudioUnitV2Bridge.mm";
    v23 = 1024;
    v24 = 1700;
    _os_log_impl(&dword_18EE07000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d setStateAndNotify: failed to execute on the main queue. Falling back to secondary thread.", buf, 0x12u);
  }

LABEL_16:
  v17 = LODWORD(v8->__vftable);
  if (!(_DWORD)v17)
  {
    notifyParametersChanged(v10);
    v17 = LODWORD(v8->__vftable);
  }
  atomic_store(0, (unsigned __int8 *)&v10->_willSetFullState);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }

  return v17;
}

void sub_18F027170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t setPresentPresetAndNotify(AUAudioUnitV2Bridge *a1, AUAudioUnitPreset *a2)
{
  AUAudioUnitV2Bridge *v3;
  AUAudioUnitPreset *v4;
  OpaqueAudioComponentInstance *audioUnit;
  uint64_t v6;
  uint64_t v8;
  id v9;

  v3 = a1;
  v4 = a2;
  audioUnit = v3->_audioUnit;
  LODWORD(v8) = -[AUAudioUnitPreset number](v4, "number", 0);
  -[AUAudioUnitPreset name](v4, "name", v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();

  v6 = AudioUnitSetProperty(audioUnit, 0x24u, 0, 0, &v8, 0x10u);
  if (!(_DWORD)v6)
    notifyParametersChanged(v3);

  return v6;
}

void sub_18F027284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const void *AUAudioUnitProperties::infoForKey(AUAudioUnitProperties *this, NSString *a2)
{
  AUAudioUnitProperties *v2;
  uint64_t v3;
  const void *Value;

  v2 = this;
  v3 = CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), v2);

  return Value;
}

void sub_18F0272D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void notifyParametersChanged(AUAudioUnitV2Bridge *a1)
{
  AUAudioUnitV2Bridge *v1;
  AUListenerBase *parameterListener;
  AUListenerBase *eventListener;
  AudioUnitParameter inParameter;

  v1 = a1;
  inParameter.mAudioUnit = v1->_audioUnit;
  inParameter.mParameterID = -1;
  AUParameterListenerNotify(0, 0, &inParameter);
  parameterListener = v1->_parameterListener;
  if (parameterListener)
    AUEventListenerFlush(parameterListener);
  eventListener = v1->_eventListener;
  if (eventListener)
    AUEventListenerFlush(eventListener);

}

void sub_18F027364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t dispatch_to_main_queue_with_timeout(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  unint64_t *v6;
  std::mutex *v7;
  id v8;
  unint64_t v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  int v16;
  uint64_t v17;
  std::mutex *i;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::unique_lock<std::mutex> v22;
  std::mutex *v23;
  std::__shared_weak_count *v24;

  if (pthread_main_np())
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (!v2)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    return 1;
  }
  else
  {
    v5 = (char *)operator new(0xC0uLL);
    *((_QWORD *)v5 + 1) = 0;
    v6 = (unint64_t *)(v5 + 8);
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = &off_1E2917C90;
    *(_OWORD *)(v5 + 24) = 0u;
    v7 = (std::mutex *)(v5 + 24);
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_OWORD *)(v5 + 152) = 0u;
    *(_OWORD *)(v5 + 168) = 0u;
    *((_QWORD *)v5 + 23) = 0;
    caulk::semaphore::semaphore((caulk::semaphore *)(v5 + 24));
    *((_QWORD *)v5 + 5) = 1018212795;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_QWORD *)v5 + 10) = 0;
    *((_QWORD *)v5 + 11) = 850045863;
    *((_QWORD *)v5 + 23) = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 8) = 0u;
    *(_OWORD *)(v5 + 138) = 0u;
    v23 = (std::mutex *)(v5 + 24);
    v24 = (std::__shared_weak_count *)v5;
    std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((_QWORD *)v5 + 20, a1);
    v8 = MEMORY[0x1E0C80D38];
    do
      v9 = __ldxr(v6);
    while (__stxr(v9 + 1, v6));
    v10 = MEMORY[0x1E0C80D38];
    v11 = MEMORY[0x1E0C80D38];
    v12 = v10;
    v13 = (_QWORD *)operator new();
    *v13 = v7;
    v13[1] = v5;
    v22.__m_ = 0;
    dispatch_async_f(v10, v13, (dispatch_function_t)applesauce::dispatch::v1::async<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0>(NSObject  {objcproto17OS_dispatch_queue}*,dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0 &&)::{lambda(void *)#1}::__invoke);
    std::unique_ptr<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0,std::default_delete<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v22);

    if ((caulk::semaphore::timed_wait((caulk::semaphore *)v7, 1.0) & 1) != 0)
      goto LABEL_16;
    v14 = (unsigned __int8 *)(v5 + 153);
    while (!__ldaxr(v14))
    {
      v16 = 1;
      if (!__stlxr(1u, v14))
        goto LABEL_13;
    }
    v16 = 0;
    __clrex();
LABEL_13:
    v7 = v23;
    if (!v16)
    {
LABEL_16:
      v22.__m_ = v7 + 1;
      v22.__owns_ = 1;
      std::mutex::lock(v7 + 1);
      for (i = v23;
            !LOBYTE(i[2].__m_.__sig);
      if (v22.__owns_)
        std::mutex::unlock(v22.__m_);
      v3 = 1;
    }
    else
    {
      v17 = *(_QWORD *)&v23[2].__m_.__opaque[24];
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
      v3 = 0;
    }
    v19 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  return v3;
}

void sub_18F0275C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *applesauce::dispatch::v1::async<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0>(NSObject  {objcproto17OS_dispatch_queue}*,dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0 &&)::{lambda(void *)#1}::__invoke(caulk::semaphore **a1)
{
  unsigned __int8 *v2;
  std::mutex *v4;
  uint64_t v5;
  caulk::semaphore *v6;
  caulk::semaphore **v8;

  v8 = a1;
  v2 = (unsigned __int8 *)*a1 + 129;
  do
  {
    if (__ldaxr(v2))
    {
      __clrex();
      return std::unique_ptr<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0,std::default_delete<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
    }
  }
  while (__stlxr(1u, v2));
  caulk::semaphore::signal(*a1);
  v4 = (std::mutex *)((char *)*a1 + 64);
  std::mutex::lock(v4);
  v5 = *((_QWORD *)*a1 + 20);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  v6 = *a1;
  *((_BYTE *)v6 + 128) = 1;
  std::condition_variable::notify_one((std::condition_variable *)((char *)v6 + 16));
  std::mutex::unlock(v4);
  return std::unique_ptr<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0,std::default_delete<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_18F0276A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  std::unique_ptr<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0,std::default_delete<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0,std::default_delete<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x193FFE460](v3, 0x20C40A4A59CD2);
  }
  return a1;
}

void std::__shared_ptr_emplace<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::State,std::allocator<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::State>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::State,std::allocator<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::State>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::State,std::allocator<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::State>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 160);
  v3 = *(_QWORD **)(a1 + 184);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      std::mutex::~mutex((std::mutex *)(a1 + 88));
      std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 40));
      JUMPOUT(0x193FFDDC4);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E29138C0;
  v2 = a1 + 8;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = &off_1E29138C0;
  v1 = a1 + 8;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *v2 = &off_1E29138C0;
  v2[1] = v4;
  v2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v2[3] = *(id *)(a1 + 24);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  return v2;
}

__n128 std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::__clone(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 result;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  a2->n128_u64[0] = (unint64_t)&off_1E29138C0;
  a2->n128_u64[1] = v5;
  a2[1].n128_u64[0] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a2[1].n128_u64[1] = (unint64_t)*(id *)(a1 + 24);
  result = *(__n128 *)(a1 + 32);
  a2[2] = result;
  return result;
}

uint64_t std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;

  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
}

void std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 1);

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2);
  operator delete(a1);
}

uint64_t std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result;

  result = AudioUnitSetProperty(*(AudioUnit *)(*(_QWORD *)(a1 + 24) + 616), *(_DWORD *)(a1 + 32), 0, 0, (const void *)(a1 + 40), 8u);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

void std::__shared_ptr_emplace<int>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<int>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

id std::function<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v5, &v4);
  return (id)objc_claimAutoreleasedReturnValue();
}

void V2BridgePropertyListener(void *a1, OpaqueAudioComponentInstance *a2, unsigned int a3, int a4, unsigned int a5)
{
  CFDictionaryRef *v8;
  _QWORD *Value;
  int *v10;
  char *v11;
  char *v12;
  char *v13;

  v13 = a1;
  v8 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v8, (const void *)a3);
  if (Value)
  {
    switch(a4)
    {
      case 0:
        v11 = v13;
        goto LABEL_9;
      case 1:
        v10 = &OBJC_IVAR___AUAudioUnitV2Bridge__inputBusses;
        goto LABEL_7;
      case 2:
        v10 = &OBJC_IVAR___AUAudioUnitV2Bridge__outputBusses;
LABEL_7:
        objc_msgSend(*(id *)&v13[*v10], "objectAtIndexedSubscript:", a5);
        v11 = (char *)objc_claimAutoreleasedReturnValue();
LABEL_9:
        v12 = v11;
        objc_msgSend(v11, "willChangeValueForKey:", Value[1]);
        objc_msgSend(v12, "didChangeValueForKey:", Value[1]);

        break;
    }
  }

}

void sub_18F027C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7758(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7759(uint64_t a1)
{

}

void ___ZN10applesauce8dispatch2v19sync_implIZ36__AUAudioUnitV2Bridge_parameterTree_E3__5EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  AUParameterTree ***v1;
  AUParameterTree *v2;
  void *v3;
  uint64_t v4;

  v1 = *(AUParameterTree ****)(a1 + 32);
  v2 = **v1;
  if (!v2[3].super.super._impl_implementorValueObserver)
  {
    if ((-[AUParameterTree renderResourcesAllocated](v2, "renderResourcesAllocated") & 1) != 0
      || (-[AUParameterGroup allParameters](*v1[1], "allParameters"),
          v3 = (void *)objc_claimAutoreleasedReturnValue(),
          v4 = objc_msgSend(v3, "count"),
          v3,
          v4))
    {
      objc_storeStrong(&(**v1)[3].super.super._impl_implementorValueObserver, *v1[1]);
      addOrRemoveParameterListeners((OpaqueAudioComponentInstance *)(**v1)[3].super.super._displayName, (AUListenerBase *)(**v1)[2]._addrToParamIndex.__end_cap_.__value_, *v1[1], 1);
    }
  }
}

void sub_18F027D5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void addOrRemoveParameterListeners(OpaqueAudioComponentInstance *a1, AUListenerBase *a2, AUParameterTree *a3, int a4)
{
  AUParameterTree *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  AUParameterTree *v14;
  AudioUnitEvent inEvent;
  AudioUnitParameter inParameter;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if (v7)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v14 = v7;
    -[AUParameterGroup allParameters](v7, "allParameters");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v18;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v18 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * v11);
          inParameter.mAudioUnit = a1;
          v13 = objc_msgSend(v12, "address");
          inParameter.mScope = v13 >> 61;
          inParameter.mElement = HIDWORD(v13) & 0x1FFFFFFF;
          inParameter.mParameterID = v13;
          inEvent.mEventType = kAudioUnitEvent_BeginParameterChangeGesture;
          inEvent.mArgument.mParameter = inParameter;
          if (a4)
          {
            AUListenerAddParameter(a2, v12, &inParameter);
            AUEventListenerAddEventType(a2, v12, &inEvent);
            inEvent.mEventType = kAudioUnitEvent_EndParameterChangeGesture;
            AUEventListenerAddEventType(a2, v12, &inEvent);
          }
          else
          {
            AUListenerRemoveParameter(a2, v12, &inParameter);
            AUEventListenerRemoveEventType(a2, v12, &inEvent);
            inEvent.mEventType = kAudioUnitEvent_EndParameterChangeGesture;
            AUEventListenerRemoveEventType(a2, v12, &inEvent);
          }
          ++v11;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v9);
    }

    v7 = v14;
  }

}

void sub_18F027F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_18F0280E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F028254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F0283CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F028468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F028508(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F028640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *,false>(unint64_t i, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *j;
  uint64_t *k;
  BOOL v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  BOOL v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  BOOL v41;
  BOOL v42;
  uint64_t *v43;
  uint64_t *v44;
  unsigned int v45;
  BOOL v46;
  int v48;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  int64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  unsigned int v123;
  void *v124;
  uint64_t v125;
  unint64_t v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  unsigned int *v133;
  unsigned int v134;
  int v135;
  BOOL v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  unsigned int v143;
  BOOL v144;
  void *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  unsigned int v150;
  unsigned int v152;
  unsigned int v153;
  uint64_t *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  int64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int16 v161;
  char v162;
  uint64_t v163;
  __int16 v164;
  __int16 v165;
  __int16 v166;
  __int16 v167;
  uint64_t v168;
  __int16 v169;
  char v170;
  char v171;
  char v172;
  char v173;
  char v174;
  int v175;
  int v176;

void std::vector<ParameterTreeBuilder::ClumpableParam>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ParameterTreeBuilder::buildClumpedElementNodes(unsigned int,std::vector<ParameterTreeBuilder::ClumpableParam> const&)::{lambda(void)#1}::operator()(unsigned int **a1)
{
  unsigned int *v2;
  id v3;
  OSStatus Property;
  void *v5;
  BOOL v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  UInt32 ioDataSize;
  _DWORD outData[2];
  void *v14;

  v2 = a1[1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("clump_%d"), **a1);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  outData[0] = **a1;
  outData[1] = -1;
  v14 = 0;
  ioDataSize = 16;
  Property = AudioUnitGetProperty(*((AudioUnit *)v2 + 1), 0x23u, *a1[2], 0, outData, &ioDataSize);
  v5 = v14;
  if (Property)
    v6 = 1;
  else
    v6 = v14 == 0;
  v7 = v3;
  if (!v6)
  {

    v7 = v5;
  }
  +[AUParameterTree createGroupWithIdentifier:name:children:](AUParameterTree, "createGroupWithIdentifier:name:children:", v3, v7, *(_QWORD *)a1[3]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)a1[4], "addObject:", v8);
  v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(_QWORD *)a1[5]);
  v10 = (void **)a1[3];
  v11 = *v10;
  *v10 = (void *)v9;

}

void sub_18F0297D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ParameterTreeBuilder::ClumpableParam::operator<(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  BOOL v5;

  v2 = *(unsigned __int8 *)(a1 + 4);
  v3 = *(unsigned __int8 *)(a2 + 4);
  if (*(_BYTE *)(a1 + 4))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if (*(_BYTE *)(a2 + 4))
      v5 = v2 == 0;
    else
      v5 = 0;
    if (v5)
      return 1;
    if ((v2 != 0) != (v3 != 0))
      return 0;
    return *(_DWORD *)(a1 + 8) < *(_DWORD *)(a2 + 8);
  }
  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 1;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
    return *(_DWORD *)(a1 + 8) < *(_DWORD *)(a2 + 8);
  return 0;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;

  v8 = *a1;
  v9 = *((_DWORD *)a1 + 2);
  v3 = a1[2];
  a1[2] = 0;
  v4 = *a2;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *a1 = v4;
  v5 = a2[2];
  a2[2] = 0;
  v6 = (void *)a1[2];
  a1[2] = v5;

  *a2 = v8;
  *((_DWORD *)a2 + 2) = v9;
  v7 = (void *)a2[2];
  a2[2] = v3;

}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v6;
  _BOOL4 v7;
  uint64_t *v8;

  v6 = ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a2, (uint64_t)a1);
  v7 = ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a3, (uint64_t)a2);
  if (v6)
  {
    if (v7)
    {
      v8 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a1, a2);
      if (!ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a3, (uint64_t)a2))
        return;
      v8 = a2;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(v8, a3);
  }
  else if (v7)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a2, a3);
    if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a2, (uint64_t)a1))
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a1, a2);
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(a1, a2, a3);
  if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a4, (uint64_t)a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a3, a4);
    if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a3, (uint64_t)a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a2, a3);
      if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a2, (uint64_t)a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a1, a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(a1, a2, a3, a4);
  if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a5, (uint64_t)a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a4, a5);
    if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a4, (uint64_t)a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a3, a4);
      if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a3, (uint64_t)a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a2, a3);
        if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a2, (uint64_t)a1))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a1, a2);
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int *v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)(a2 - 3), (uint64_t)a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a1, v2 - 3);
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v6 = (uint64_t)(a1 + 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(a1, a1 + 3, a1 + 6);
      v7 = (uint64_t)(a1 + 9);
      if (a1 + 9 == v2)
        return 1;
      v8 = 0;
      v9 = 0;
      v24 = v2;
      break;
  }
  while (2)
  {
    if (!ParameterTreeBuilder::ClumpableParam::operator<(v7, v6))
      goto LABEL_26;
    v10 = *(_DWORD *)v7;
    v11 = *(unsigned __int8 *)(v7 + 4);
    v26 = *(_WORD *)(v7 + 5);
    v27 = *(_BYTE *)(v7 + 7);
    v12 = *(_DWORD *)(v7 + 8);
    v13 = *(_QWORD *)(v7 + 16);
    *(_QWORD *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(v6 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v6;
    v14 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v7 + 16) = v14;
    v15 = (uint64_t)a1;
    if ((uint64_t *)v6 == a1)
      goto LABEL_25;
    v25 = v13;
    v16 = v8;
    while (1)
    {
      v17 = (char *)a1 + v16;
      v18 = (unsigned int *)((char *)a1 + v16 + 24);
      if (!v11 || !*((_BYTE *)a1 + v16 + 28))
        break;
      if (v10 >= *v18)
      {
        if (v10 != *v18)
          goto LABEL_22;
        goto LABEL_19;
      }
LABEL_20:
      v6 -= 24;
      *((_QWORD *)v17 + 6) = *(_QWORD *)v18;
      *((_DWORD *)v17 + 14) = *(_DWORD *)((char *)a1 + v16 + 32);
      v20 = (char *)a1 + v16;
      v21 = *(uint64_t *)((char *)a1 + v16 + 40);
      *((_QWORD *)v20 + 5) = 0;
      v22 = *(void **)((char *)a1 + v16 + 64);
      *((_QWORD *)v20 + 8) = v21;

      v16 -= 24;
      if (v16 == -48)
      {
        v15 = (uint64_t)a1;
        goto LABEL_24;
      }
    }
    if (*((_BYTE *)a1 + v16 + 28))
      v19 = v11 == 0;
    else
      v19 = 0;
    if (v19)
      goto LABEL_20;
    if ((v11 != 0) != (*((_BYTE *)a1 + v16 + 28) != 0))
    {
LABEL_22:
      v15 = v6;
      goto LABEL_24;
    }
LABEL_19:
    if (v12 < *(_DWORD *)((char *)a1 + v16 + 32))
      goto LABEL_20;
    v15 = (uint64_t)a1 + v16 + 48;
LABEL_24:
    v2 = v24;
    v13 = v25;
LABEL_25:
    *(_DWORD *)v15 = v10;
    *(_BYTE *)(v15 + 4) = v11;
    *(_WORD *)(v15 + 5) = v26;
    *(_BYTE *)(v15 + 7) = v27;
    *(_DWORD *)(v15 + 8) = v12;
    v23 = *(void **)(v15 + 16);
    *(_QWORD *)(v15 + 16) = v13;

    if (++v9 != 8)
    {
LABEL_26:
      v6 = v7;
      v8 += 24;
      v7 += 24;
      if ((uint64_t *)v7 == v2)
        return 1;
      continue;
    }
    return v7 + 24 == (_QWORD)v2;
  }
}

void std::vector<AUDependentParameter>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v4[8 * a2];
    goto LABEL_18;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v16 = &v3[8 * v6];
LABEL_18:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v4;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v11 = (char *)operator new(8 * v10);
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  v14 = &v12[8 * v6];
  if (v3 != v4)
  {
    do
    {
      v15 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v12 - 1) = v15;
      v12 -= 8;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

uint64_t std::__split_buffer<ParameterTreeBuilder::ClumpableParam>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void AUAudioUnitV2Bridge_Renderer::prepareHostCallbacks(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t (**v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  __int128 v12;
  uint64_t (*v13)(AUAudioUnitV2Bridge_Renderer *, BOOL *, BOOL *, unsigned __int8 *, unsigned __int8 *, double *, unsigned __int8 *, double *, double *);
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = caulk::inplace_function<BOOL ()(double *,double *,long *,double *,long *,double *),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>;
  *(_QWORD *)&v11 = caulk::inplace_function<BOOL ()(double *,double *,long *,double *,long *,double *),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>;
  *((_QWORD *)&v11 + 1) = _Block_copy((const void *)v5);
  if ((__int128 *)(a1 + 48) != &v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 24))(a1 + 56);
    v8 = v11;
    *(_QWORD *)&v11 = &caulk::inplace_function_detail::vtable<BOOL,double *,double *,long *,double *,long *,double *>::empty;
    *(_QWORD *)(a1 + 48) = v8;
    (*(void (**)(void **, const void **))(v8 + 16))((void **)(a1 + 56), (const void **)&v11 + 1);
    v7 = (uint64_t (**)())v11;
  }
  ((void (*)(char *))v7[3])((char *)&v11 + 8);
  *(_QWORD *)&v11 = caulk::inplace_function<BOOL ()(unsigned long *,double *,double *,double *),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>;
  *((_QWORD *)&v11 + 1) = _Block_copy((const void *)v6);
  if ((__int128 *)(a1 + 88) == &v11)
  {
    v10 = caulk::inplace_function<BOOL ()(unsigned long *,double *,double *,double *),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 88) + 24))(a1 + 96);
    v9 = v11;
    *(_QWORD *)&v11 = &caulk::inplace_function_detail::vtable<BOOL,unsigned long *,double *,double *,double *>::empty;
    *(_QWORD *)(a1 + 88) = v9;
    (*(void (**)(void **, const void **))(v9 + 16))((void **)(a1 + 96), (const void **)&v11 + 1);
    v10 = (uint64_t (**)())v11;
  }
  ((void (*)(char *))v10[3])((char *)&v11 + 8);
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  if (v5 | v6)
  {
    *(_QWORD *)&v11 = a1;
    *((_QWORD *)&v11 + 1) = AUAudioUnitV2Bridge_Renderer::beatAndTempoProc;
    *(_QWORD *)&v12 = AUAudioUnitV2Bridge_Renderer::musicalTimeLocationProc;
    *((_QWORD *)&v12 + 1) = AUAudioUnitV2Bridge_Renderer::transportStateProc;
    v13 = AUAudioUnitV2Bridge_Renderer::transportStateProc2;
  }
  AudioUnitSetProperty(*(AudioUnit *)a1, 0x1Bu, 0, 0, &v11, 0x28u);

}

void sub_18F02A0E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t AUAudioUnitV2Bridge_Renderer::beatAndTempoProc(AUAudioUnitV2Bridge_Renderer *this, void *a2, double *a3, double *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;

  v4 = *((_QWORD *)this + 6);
  v5 = 4294956433;
  if (*(_BYTE *)(v4 + 32))
  {
    v12 = a3;
    v10 = 0;
    v11 = 0;
    v8 = 0;
    v9 = a2;
    v7 = 0;
    if ((*(unsigned int (**)(char *, double **, uint64_t *, uint64_t *, void **, uint64_t *, uint64_t *))v4)((char *)this + 56, &v12, &v11, &v10, &v9, &v8, &v7))
    {
      return 0;
    }
    else
    {
      return 4294956433;
    }
  }
  return v5;
}

uint64_t AUAudioUnitV2Bridge_Renderer::musicalTimeLocationProc(AUAudioUnitV2Bridge_Renderer *this, _DWORD *a2, float *a3, float *a4, unsigned int *a5, double *a6)
{
  uint64_t v6;
  float v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  double v14;
  unsigned int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  double *v19;
  uint64_t v20;

  v13 = 4;
  v14 = 4.0;
  v12 = 0;
  v6 = *((_QWORD *)this + 6);
  if (!*(_BYTE *)(v6 + 32))
    return 4294956433;
  v19 = &v14;
  v20 = 0;
  v17 = 0;
  v18 = &v13;
  v15 = a5;
  v16 = &v12;
  if (!(*(unsigned int (**)(char *, uint64_t *, double **, uint64_t **, uint64_t *, uint64_t **, unsigned int **))v6)((char *)this + 56, &v20, &v19, &v18, &v17, &v16, &v15))return 4294956433;
  if (a3)
  {
    v10 = v14;
    *a3 = v10;
  }
  if (a4)
    *(_DWORD *)a4 = v13;
  result = 0;
  if (a2)
    *a2 = v12;
  return result;
}

uint64_t AUAudioUnitV2Bridge_Renderer::transportStateProc(AUAudioUnitV2Bridge_Renderer *this, BOOL *a2, unsigned __int8 *a3, unsigned __int8 *a4, double *a5, unsigned __int8 *a6, double *a7, double *a8, double *a9)
{
  return AUAudioUnitV2Bridge_Renderer::transportStateProc2(this, a2, 0, a3, a4, a5, a6, a7, a9);
}

uint64_t AUAudioUnitV2Bridge_Renderer::transportStateProc2(AUAudioUnitV2Bridge_Renderer *this, BOOL *a2, BOOL *a3, unsigned __int8 *a4, unsigned __int8 *a5, double *a6, unsigned __int8 *a7, double *a8, double *a9)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v15;
  double *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t *v19;

  v15 = 0;
  v9 = *((_QWORD *)this + 11);
  if (!*(_BYTE *)(v9 + 32))
    return 4294956433;
  v18 = a5;
  v19 = &v15;
  v16 = a8;
  v17 = a7;
  if (!(*(unsigned int (**)(char *, uint64_t **, unsigned __int8 **, unsigned __int8 **, double **))v9)((char *)this + 96, &v19, &v18, &v17, &v16))return 4294956433;
  if (a2)
    *a2 = (v15 & 2) != 0;
  if (a3)
    *a3 = (v15 & 4) != 0;
  if (a4)
    *a4 = v15 & 1;
  result = 0;
  if (a6)
    *(_BYTE *)a6 = (v15 & 8) != 0;
  return result;
}

void caulk::inplace_function_detail::vtable<BOOL,unsigned long *,double *,double *,double *>::vtable(void)::{lambda(void *,unsigned long *&&,double *&&,unsigned long *&&,unsigned long *&&)#1}::__invoke()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

uint64_t caulk::inplace_function_detail::vtable<BOOL,unsigned long *,double *,double *,double *>::vtable<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>)::{lambda(void *,unsigned long *&&,double *&&,unsigned long *&&,unsigned long *&&)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

void *caulk::inplace_function_detail::vtable<BOOL,unsigned long *,double *,double *,double *>::vtable<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>)::{lambda(void *,void *)#1}::__invoke(_QWORD *a1, const void **a2)
{
  void *result;

  result = _Block_copy(*a2);
  *a1 = result;
  return result;
}

void caulk::inplace_function_detail::vtable<BOOL,unsigned long *,double *,double *,double *>::vtable<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>)::{lambda(void *,void *)#2}::__invoke(void **a1, const void **a2)
{
  *a1 = _Block_copy(*a2);

}

void caulk::inplace_function_detail::vtable<BOOL,unsigned long *,double *,double *,double *>::vtable<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>)::{lambda(void *)#1}::__invoke(id *a1)
{

}

void caulk::inplace_function_detail::vtable<BOOL,double *,double *,long *,double *,long *,double *>::vtable(void)::{lambda(void *,double *&&,double *&,long *&&,double *&,double *&&,double *&)#1}::__invoke()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

uint64_t caulk::inplace_function_detail::vtable<BOOL,double *,double *,long *,double *,long *,double *>::vtable<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>)::{lambda(void *,double *&&,double *&,long *&&,double *&,double *&&,double *&)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

void *caulk::inplace_function_detail::vtable<BOOL,double *,double *,long *,double *,long *,double *>::vtable<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>)::{lambda(void *,void *)#1}::__invoke(_QWORD *a1, const void **a2)
{
  void *result;

  result = _Block_copy(*a2);
  *a1 = result;
  return result;
}

void caulk::inplace_function_detail::vtable<BOOL,double *,double *,long *,double *,long *,double *>::vtable<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>)::{lambda(void *,void *)#2}::__invoke(void **a1, const void **a2)
{
  *a1 = _Block_copy(*a2);

}

void caulk::inplace_function_detail::vtable<BOOL,double *,double *,long *,double *,long *,double *>::vtable<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>)::{lambda(void *)#1}::__invoke(id *a1)
{

}

uint64_t _auV2midiOutCallback(void *a1, const AudioTimeStamp *a2, unsigned __int8 a3, const MIDIPacketList *a4)
{
  void *v7;
  unint64_t packet;
  UInt32 v9;
  uint64_t v10;

  if (!a1)
    return 0;
  v7 = _Block_copy(a1);
  if ((int)a4->numPackets < 1)
  {
LABEL_6:
    v10 = 0;
  }
  else
  {
    packet = (unint64_t)a4->packet;
    v9 = a4->numPackets + 1;
    while (1)
    {
      v10 = (*((uint64_t (**)(void *, uint64_t, _QWORD, _QWORD, unint64_t))v7 + 2))(v7, (uint64_t)(a2->mSampleTime + (double)*(unint64_t *)packet), a3, *(unsigned __int16 *)(packet + 8), packet + 10);
      if ((_DWORD)v10)
        break;
      packet = (packet + *(unsigned __int16 *)(packet + 8) + 13) & 0xFFFFFFFFFFFFFFFCLL;
      if (--v9 <= 1)
        goto LABEL_6;
    }
  }

  return v10;
}

void sub_18F02A55C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN28AUAudioUnitV2Bridge_Renderer11renderBlockEv_block_invoke(uint64_t a1, uint64_t a2, const AudioTimeStamp *a3, UInt32 a4, uint64_t a5, AudioBufferList *a6, uint64_t *a7, uint64_t a8)
{
  AudioBufferList *v9;
  UInt32 v10;
  UInt32 v11;
  uint64_t v14;
  uint64_t *v15;
  signed int v16;
  uint64_t mSampleTime;
  AudioUnitParameterEvent *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  AudioUnitParameterValue v24;
  AudioUnitParameterEvent *v25;
  uint64_t (**v26)();
  uint64_t v27;
  AudioUnitParameterEvent inParameterEvent[16];
  uint64_t v32;

  v9 = a6;
  v10 = a5;
  v11 = a4;
  v32 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(a1 + 32);
  if (!a5)
  {
    v15 = a7;
    if (a7)
    {
      v16 = 0;
      mSampleTime = (uint64_t)a3->mSampleTime;
      while (2)
      {
        switch(*((_BYTE *)v15 + 16))
        {
          case 1:
          case 2:
            v18 = &inParameterEvent[v16];
            v19 = v15[3];
            v20 = v19 >> 61;
            v21 = HIDWORD(v19) & 0x1FFFFFFF;
            v18->scope = v19 >> 61;
            v18->element = v21;
            v18->parameter = v19;
            v22 = *((unsigned __int8 *)v15 + 16);
            if (v22 == 2)
            {
              v18->eventType = kParameterEvent_Ramped;
              v18->eventValues.ramp.startBufferOffset = *((_DWORD *)v15 + 2) - mSampleTime;
              v18->eventValues.ramp.durationInFrames = *((_DWORD *)v15 + 5);
              v24 = *((float *)v15 + 8);
              v18->eventValues.ramp.startValue = v24;
              v18->eventValues.ramp.endValue = v24;
              AudioUnitGetParameter(*(AudioUnit *)v14, v19, v20, v21, &v18->eventValues.ramp.startValue);
            }
            else if (v22 == 1)
            {
              if (*((_DWORD *)v15 + 9))
              {
                v23 = v15[1];
                if (v23 >> 28 != 0xFFFFFFFE0)
                  std::terminate();
                AudioUnitSetParameter(*(AudioUnit *)v14, v19, v20, v21, *((AudioUnitParameterValue *)v15 + 8), v23);
                goto LABEL_18;
              }
              v25 = &inParameterEvent[v16];
              v25->eventType = kParameterEvent_Immediate;
              v25->eventValues.ramp.startBufferOffset = *((_DWORD *)v15 + 2) - mSampleTime;
              v25->eventValues.ramp.durationInFrames = *((_DWORD *)v15 + 8);
            }
            if (++v16 != 16)
              goto LABEL_18;
            AudioUnitScheduleParameters(*(AudioUnit *)v14, inParameterEvent, 0x10u);
            v16 = 0;
            v15 = (uint64_t *)*v15;
            if (v15)
              continue;
            goto LABEL_21;
          case 8:
            MusicDeviceMIDIEvent(*(MusicDeviceComponent *)v14, *((unsigned __int8 *)v15 + 21), *((unsigned __int8 *)v15 + 22), *((unsigned __int8 *)v15 + 23), *((_DWORD *)v15 + 2) - mSampleTime);
            goto LABEL_18;
          case 9:
            MusicDeviceSysEx(*(MusicDeviceComponent *)v14, (const UInt8 *)v15 + 21, *((unsigned __int16 *)v15 + 9));
            goto LABEL_18;
          case 0xA:
            MusicDeviceMIDIEventList(*(MusicDeviceComponent *)v14, *((_DWORD *)v15 + 2) - mSampleTime, (const MIDIEventList *)((char *)v15 + 20));
            goto LABEL_18;
          default:
LABEL_18:
            v15 = (uint64_t *)*v15;
            if (v15)
              continue;
            if (v16 > 0)
              AudioUnitScheduleParameters(*(AudioUnit *)v14, inParameterEvent, v16);
            break;
        }
        break;
      }
    }
LABEL_21:
    v9 = a6;
    v11 = a4;
  }
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
    return 0;
  v26 = caulk::inplace_function<int ()(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>;
  *(_QWORD *)&inParameterEvent[0].scope = caulk::inplace_function<int ()(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>;
  *(_QWORD *)&inParameterEvent[0].parameter = a8;
  if ((AudioUnitParameterEvent *)(v14 + 8) != inParameterEvent)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 24))(v14 + 16);
    v27 = *(_QWORD *)&inParameterEvent[0].scope;
    *(_QWORD *)&inParameterEvent[0].scope = &caulk::inplace_function_detail::vtable<int,unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *>::empty;
    *(_QWORD *)(v14 + 8) = v27;
    (*(void (**)(uint64_t, AudioUnitParameterID *))(v27 + 16))(v14 + 16, &inParameterEvent[0].parameter);
    v26 = *(uint64_t (***)())&inParameterEvent[0].scope;
  }
  ((void (*)(AudioUnitParameterID *))v26[3])(&inParameterEvent[0].parameter);
  return AudioUnitRender(*(AudioUnit *)v14, (AudioUnitRenderActionFlags *)a2, a3, v10, v11, v9);
}

void sub_18F02A820(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void caulk::inplace_function_detail::vtable<int,unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *>::vtable(void)::{lambda(void *,unsigned int *&&,AudioTimeStamp const*&&,unsigned int &&,long &&,AudioBufferList *&&)#1}::__invoke()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

uint64_t caulk::inplace_function_detail::vtable<int,unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *>::vtable<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>(caulk::inplace_function_detail::wrapper<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>)::{lambda(void *,unsigned int *&&,AudioTimeStamp const*&&,unsigned int &&,long &&,AudioBufferList *&&)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

_QWORD *_ZZN5caulk23inplace_function_detail6vtableIiJPjPK14AudioTimeStampjlP15AudioBufferListEEC1IU13block_pointerFiS2_S5_jlS7_EEENS0_7wrapperIT_EEENUlPvSG_E_8__invokeESG_SG_(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *_ZZN5caulk23inplace_function_detail6vtableIiJPjPK14AudioTimeStampjlP15AudioBufferListEEC1IU13block_pointerFiS2_S5_jlS7_EEENS0_7wrapperIT_EEENUlPvSG_E0_8__invokeESG_SG_(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void ElementCountPropertyListener(void *a1, OpaqueAudioComponentInstance *a2, uint64_t a3, uint64_t a4)
{
  id v6;

  v6 = a1;
  if ((a4 - 1) <= 1)
  {
    objc_msgSend(v6, "_rebuildBusses:", a4);
    objc_msgSend(v6, "_invalidateParameterTree:", a3);
  }

}

void sub_18F02A904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ParameterListPropertyListener(void *a1, OpaqueAudioComponentInstance *a2, int a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id to;
  int v8;
  id location;

  v4 = a1;
  objc_initWeak(&location, v4);
  v5 = objc_msgSend(v4, "scheduledParameterRefresher");

  objc_copyWeak(&to, &location);
  v8 = a3;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E290B3B8;
  *(_QWORD *)(v6 + 8) = 0;
  objc_moveWeak((id *)(v6 + 24), &to);
  *(_DWORD *)(v6 + 32) = v8;
  *(_QWORD *)v6 = &off_1E290B408;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(v5 + 128), (caulk::concurrent::message *)v6);
  objc_destroyWeak(&to);
  objc_destroyWeak(&location);
}

void sub_18F02A9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, id location)
{
  void *v12;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10applesauce8dispatch2v19sync_implIZ42__AUAudioUnitV2Bridge_invalidateAudioUnit_E3__3EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = AUListenerDispose(*(AUParameterListenerRef *)(**(_QWORD **)v1 + 592));
  *(_QWORD *)(**(_QWORD **)v1 + 592) = 0;
  return result;
}

void caulk::concurrent::details::rt_message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::~rt_message_call(id *a1)
{
  objc_destroyWeak(a1 + 3);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

{
  objc_destroyWeak(a1 + 3);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  JUMPOUT(0x193FFE460);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_18F02AB54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::perform(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_invalidateParameterTree:", *(unsigned int *)(a1 + 32));

}

void sub_18F02ABAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  objc_destroyWeak((id *)*a1 + 3);
  caulk::concurrent::message::~message(v2);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::~message_call(id *a1)
{
  objc_destroyWeak(a1 + 3);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

{
  objc_destroyWeak(a1 + 3);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  JUMPOUT(0x193FFE460);
}

void ___ZN10applesauce8dispatch2v19sync_implIZ48__AUAudioUnitV2Bridge__invalidateParameterTree__E3__2EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  id **v1;

  v1 = *(id ***)(a1 + 32);
  addOrRemoveParameterListeners(*((OpaqueAudioComponentInstance **)**v1 + 77), *((AUListenerBase **)**v1 + 74), *((AUParameterTree **)**v1 + 81), 0);
  objc_storeStrong((id *)**v1 + 81, *v1[1]);
  addOrRemoveParameterListeners(*((OpaqueAudioComponentInstance **)**v1 + 77), *((AUListenerBase **)**v1 + 74), (AUParameterTree *)*v1[1], 1);
}

void ___ZN10applesauce8dispatch2v19sync_implIZ45__AUAudioUnitV2Bridge__buildNewParameterTree_E3__0EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  void ***v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = *(void ****)(a1 + 32);
  objc_msgSend(*v1[1], "_createParameterTree");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = **v1;
  **v1 = (void *)v2;

  v4 = (void *)*((_QWORD *)*v1[1] + 81);
  if (v4)
  {
    if (parameterNodesEqual(**v1, v4, (uint64_t)v1[2]))
    {
      v5 = **v1;
      **v1 = 0;

    }
  }
}

uint64_t parameterNodesEqual(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  char v18;
  int isKindOfClass;
  uint64_t v20;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  char v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int v36;
  int v37;
  uint64_t v38;
  NSString *v39;
  NSString *v40;
  char v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;

  v5 = a1;
  v6 = a2;
  objc_msgSend(v5, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v7;
  v10 = v8;
  v11 = v10;
  if (v9 && v10)
    v12 = objc_msgSend(v9, "isEqualToString:", v10);
  else
    v12 = v9 == v10;

  if ((v12 & 1) != 0)
  {
    objc_msgSend(v5, "displayName");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "displayName");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v13;
    v16 = v14;
    v17 = v16;
    if (v15 && v16)
      v18 = objc_msgSend(v15, "isEqualToString:", v16);
    else
      v18 = v15 == v16;

    if ((v18 & 1) != 0)
    {
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      objc_opt_class();
      if (((isKindOfClass ^ objc_opt_isKindOfClass()) & 1) == 0)
      {
        if ((isKindOfClass & 1) != 0)
        {
          objc_msgSend(v5, "children");
          v22 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "children");
          v23 = (id)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v22, "count");
          if (v24 == objc_msgSend(v23, "count"))
          {
            v25 = objc_msgSend(v23, "count");
            if (v25)
            {
              v26 = 0;
              do
              {
                objc_msgSend(v22, "objectAtIndexedSubscript:", v26);
                v27 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v23, "objectAtIndexedSubscript:", v26);
                v28 = (void *)objc_claimAutoreleasedReturnValue();
                v29 = parameterNodesEqual(v27, v28, a3);

                if ((v29 & 1) == 0)
                  goto LABEL_29;
              }
              while (v25 != ++v26);
            }
LABEL_20:
            v20 = 1;
LABEL_30:

            goto LABEL_13;
          }
        }
        else
        {
          v22 = v5;
          v23 = v6;
          objc_msgSend(v22, "minValue");
          v31 = v30;
          objc_msgSend(v23, "minValue");
          if (v31 == v32)
          {
            objc_msgSend(v22, "maxValue");
            v34 = v33;
            objc_msgSend(v23, "maxValue");
            if (v34 == v35)
            {
              v36 = objc_msgSend(v22, "unit");
              if (v36 == objc_msgSend(v23, "unit"))
              {
                v37 = objc_msgSend(v22, "flags");
                if (v37 == objc_msgSend(v23, "flags"))
                {
                  v38 = objc_msgSend(v22, "address");
                  if (v38 == objc_msgSend(v23, "address"))
                  {
                    objc_msgSend(v22, "unitName");
                    v39 = (NSString *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v23, "unitName");
                    v40 = (NSString *)objc_claimAutoreleasedReturnValue();
                    v41 = equalStrings(v39, v40);

                    if ((v41 & 1) != 0)
                    {
                      objc_msgSend(v22, "value");
                      v43 = v42;
                      objc_msgSend(v23, "value");
                      if (v43 != v44)
                      {
                        v45 = objc_msgSend(v22, "address");
                        std::vector<unsigned long long>::emplace_back<unsigned long long>(a3, &v45);
                      }
                      goto LABEL_20;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_29:
        v20 = 0;
        goto LABEL_30;
      }
    }
  }
  v20 = 0;
LABEL_13:

  return v20;
}

void sub_18F02B0CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t equalStrings(NSString *a1, NSString *a2)
{
  NSString *v3;
  NSString *v4;
  NSString *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 && v4)
    v6 = -[NSString isEqualToString:](v3, "isEqualToString:", v4);
  else
    v6 = v3 == v4;

  return v6;
}

void sub_18F02B1C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::emplace_back<unsigned long long>(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_QWORD **)a1;
    v8 = ((uint64_t)v5 - *(_QWORD *)a1) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v9;
    if (v12)
    {
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v12);
      v7 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = (_QWORD *)(v12 + 8 * v8);
    v15 = v12 + 8 * v13;
    *v14 = *a2;
    v6 = v14 + 1;
    while (v5 != v7)
    {
      v16 = *--v5;
      *--v14 = v16;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v15;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  *(_QWORD *)(a1 + 8) = v6;
}

void sub_18F02B308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t AUAudioUnitV2Bridge_Renderer::renderInputProc(AUAudioUnitV2Bridge_Renderer *this, void *a2, unsigned int *a3, const AudioTimeStamp *a4, int a5, uint64_t a6, AudioBufferList *a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  void *v13;

  v7 = *((_QWORD *)this + 1);
  if (!*(_BYTE *)(v7 + 32))
    return 4294956420;
  v12 = a3;
  v13 = a2;
  v11 = a5;
  v9 = a6;
  v10 = a4;
  return (*(uint64_t (**)(char *, void **, unsigned int **, int *, uint64_t *, uint64_t *, AudioBufferList *))v7)((char *)this + 16, &v13, &v12, &v11, &v10, &v9, a7);
}

void sub_18F02B420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F02B4B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F02B52C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F02BA58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  id *v3;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,void({block_pointer} {__strong})(unsigned int,AudioTimeStamp const*,unsigned int,long)>,void *>>>::operator()[abi:ne180100](1, v3);

  _Unwind_Resume(a1);
}

void sub_18F02BE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F02BF28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long,void({block_pointer} {__strong})(unsigned int,AudioTimeStamp const*,unsigned int,long)>,std::__unordered_map_hasher<long,std::__hash_value_type<long,void({block_pointer} {__strong})(unsigned int,AudioTimeStamp const*,unsigned int,long)>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,void({block_pointer} {__strong})(unsigned int,AudioTimeStamp const*,unsigned int,long)>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,void({block_pointer} {__strong})(unsigned int,AudioTimeStamp const*,unsigned int,long)>>>::__deallocate_node(id *a1)
{
  id *v1;
  id *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (id *)*v1;

      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t AUHALOutputUnit_InputAvailableCallback(void (**a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, uint64_t a5, AudioBufferList *a6)
{
  if (a1)
    ((void (**)(_QWORD, unsigned int *, const AudioTimeStamp *, uint64_t, _QWORD, AudioBufferList *))a1)[2](a1, a2, a3, a5, a4, a6);
  return 0;
}

uint64_t AUHALOutputUnit_ProvideOutputCallback(uint64_t (**a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, uint64_t a5, AudioBufferList *a6)
{
  if (a1)
    return ((uint64_t (**)(_QWORD, unsigned int *, const AudioTimeStamp *, uint64_t, _QWORD, AudioBufferList *))a1)[2](a1, a2, a3, a5, 0, a6);
  else
    return 4294956420;
}

uint64_t AUHALOutputUnit_RenderNotifyCallback(void *a1, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, uint64_t a5, AudioBufferList *a6)
{
  void *v10;
  void *v11;

  v10 = _Block_copy(a1);
  v11 = v10;
  if (v10)
    (*((void (**)(void *, _QWORD, const AudioTimeStamp *, uint64_t, _QWORD))v10 + 2))(v10, *a2, a3, a5, a4);

  return 0;
}

void sub_18F02C364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,void({block_pointer} {__strong})(unsigned int,AudioTimeStamp const*,unsigned int,long)>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_18F02C410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t MP4GASpecificConfig::SerializeCount(MP4GASpecificConfig *this)
{
  unsigned int v2;
  int v3;
  uint64_t result;
  int v6;

  if (*((_BYTE *)this + 21))
    v2 = 17;
  else
    v2 = 3;
  if (!*((_DWORD *)this + 4))
    v2 += MP4AudioProgramConfig::SerializeCount((MP4GASpecificConfig *)((char *)this + 32), v2);
  v3 = *((_DWORD *)this + 2);
  if (v3 == 20 || v3 == 6)
    result = v2 + 3;
  else
    result = v2;
  if (*((_BYTE *)this + 28))
  {
    v6 = result + 16;
    if (v3 != 22)
      v6 = result;
    if (v3 == 23 || v3 == 17)
      v6 += 3;
    return (v6 + 1);
  }
  return result;
}

uint64_t MP4GASpecificConfig::Serialize(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(unsigned __int8 *)(a1 + 20), 1u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(unsigned __int8 *)(a1 + 21), 1u);
  if (*(_BYTE *)(a1 + 21))
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 24), 0xEu);
  v4 = *(unsigned __int8 *)(a1 + 28);
  if (*(_DWORD *)(a1 + 8) != 23)
    goto LABEL_6;
  if (*(_BYTE *)(a1 + 28))
  {
    v4 = 1;
LABEL_6:
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v4, 1u);
    if (!*(_DWORD *)(a1 + 16))
      MP4AudioProgramConfig::Serialize(a1 + 32, a2);
    if (*(_BYTE *)(a1 + 28))
    {
      v5 = *(_DWORD *)(a1 + 8);
      if (v5 == 22)
      {
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 1136), 5u);
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 1140), 0xBu);
        v5 = *(_DWORD *)(a1 + 8);
      }
      if (v5 == 23 || v5 == 17)
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 1144) >> 1, 3u);
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 1144) & 1, 1u);
    }
    return 0;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v7 = 136315394;
    v8 = "MP4GASpecificConfig.cpp";
    v9 = 1024;
    v10 = 128;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4GASpecificConfig::Serialize: extension flag must be set", (uint8_t *)&v7, 0x12u);
  }
  return 4294967090;
}

void CompressedPacketTable::~CompressedPacketTable(CompressedPacketTable *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2 != *(void **)this)
  {
    if ((unint64_t)(((uint64_t)v2 - *(_QWORD *)this) / 24) <= 1)
      v3 = 1;
    else
      v3 = ((uint64_t)v2 - *(_QWORD *)this) / 24;
    v4 = 16;
    do
    {
      free(*(void **)(*(_QWORD *)this + v4));
      v4 += 24;
      --v3;
    }
    while (v3);
    v2 = *(void **)this;
  }
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void MP4BoxParser_SampleToGroupCompact::~MP4BoxParser_SampleToGroupCompact(MP4BoxParser_SampleToGroupCompact *this)
{
  MP4BoxParser_SampleToGroupCompact::~MP4BoxParser_SampleToGroupCompact(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E29099F8;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t MP4BoxParser_SampleToGroupCompact::Init(MP4BoxParser_SampleToGroupCompact *this)
{
  uint64_t DataSourceBytes;
  uint64_t v3;
  unsigned int v4;
  int32x2_t v5;
  uint32x2_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  NSObject *v11;
  const char *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v15;
  unsigned int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  DataSourceBytes = MP4BoxParser_Full::Initialize(this);
  if ((_DWORD)DataSourceBytes)
    return DataSourceBytes;
  if (*((_DWORD *)this + 5) != 1668507504)
    return 4294967294;
  v3 = (*(unsigned int (**)(MP4BoxParser_SampleToGroupCompact *))(*(_QWORD *)this + 24))(this);
  v63 = 0;
  v4 = *((unsigned __int8 *)this + 59);
  *((_BYTE *)this + 78) = *((_BYTE *)this + 59) >> 7;
  *((_BYTE *)this + 68) = (v4 & 0x40) != 0;
  v5 = vdup_n_s32(v4);
  v6.i32[0] = v4;
  v6.i32[0] = vshr_n_u32(v6, 1uLL).u32[0];
  v6.i32[1] = vadd_s32(v5, v5).i32[1];
  *((int8x8_t *)this + 10) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(0x20100804u), (uint32x2_t)vneg_s32((int32x2_t)vand_s8((int8x8_t)v6, (int8x8_t)0x1800000018))), (int8x8_t)0x3C0000003CLL);
  *((_DWORD *)this + 22) = (0x20100804u >> (8 * (v4 & 3))) & 0x3C;
  v7 = *((_QWORD *)this + 3);
  v8 = (*(uint64_t (**)(MP4BoxParser_SampleToGroupCompact *))(*(_QWORD *)this + 24))(this);
  v9 = *((_QWORD *)this + 3);
  if (v7 > v8 && v9 >= 4)
  {
    v62 = 0;
    DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v3, 4uLL, &v62);
    if ((_DWORD)DataSourceBytes)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return DataSourceBytes;
      *(_DWORD *)buf = 136315394;
      v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      v66 = 1024;
      v67 = 169;
      v11 = MEMORY[0x1E0C81028];
      v12 = "%25s:%-5d  couldn't read grouping type";
LABEL_11:
      _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
      return DataSourceBytes;
    }
    *((_DWORD *)this + 16) = bswap32(v62);
    v3 += 4;
    v9 = *((_QWORD *)this + 3);
  }
  if (*((_BYTE *)this + 68))
    v13 = 12;
  else
    v13 = 8;
  if (v9 <= (*(unsigned int (**)(MP4BoxParser_SampleToGroupCompact *))(*(_QWORD *)this + 24))(this)
    || *((_QWORD *)this + 3) < v13)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      v66 = 1024;
      v67 = 179;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  'csgp' box is too small for its basic contents";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  if (*((_BYTE *)this + 68))
  {
    v62 = 0;
    DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v3, 4uLL, &v62);
    if ((_DWORD)DataSourceBytes)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return DataSourceBytes;
      *(_DWORD *)buf = 136315394;
      v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      v66 = 1024;
      v67 = 186;
      v11 = MEMORY[0x1E0C81028];
      v12 = "%25s:%-5d  couldn't read grouping type parameter";
      goto LABEL_11;
    }
    *((_DWORD *)this + 18) = bswap32(v62);
    v3 += 4;
  }
  DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v3, 4uLL, &v63);
  if ((_DWORD)DataSourceBytes)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return DataSourceBytes;
    *(_DWORD *)buf = 136315394;
    v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
    v66 = 1024;
    v67 = 192;
    v11 = MEMORY[0x1E0C81028];
    v12 = "%25s:%-5d  Couldn't read compact sample to group pattern count";
    goto LABEL_11;
  }
  v17 = bswap32(v63);
  *((_DWORD *)this + 23) = v17;
  v18 = *((_DWORD *)this + 20);
  v19 = *((_DWORD *)this + 21);
  if (v18 == 4)
  {
    if (v19 != 4)
      goto LABEL_34;
  }
  else if (v19 == 4)
  {
LABEL_34:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      v66 = 1024;
      v67 = 198;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  if either pattern size or count size is 4 bits, the other must be 4 bits also";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v20 = v17 * (unint64_t)((v19 + v18) >> 3);
  if ((v20 & 0xFFFFFFFF00000000) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      v66 = 1024;
      v67 = 201;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  total pattern spec byte count is too large";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v21 = *((_QWORD *)this + 3);
  if (v21 <= (*(unsigned int (**)(MP4BoxParser_SampleToGroupCompact *))(*(_QWORD *)this + 24))(this)
    || (v22 = v13 + v20, *((_QWORD *)this + 3) < v22))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      v66 = 1024;
      v67 = 204;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  'csgp' box is too small for its pattern lengths and sample counts";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v23 = v20;
  v24 = (char *)*((_QWORD *)this + 12);
  v25 = *((_QWORD *)this + 13) - (_QWORD)v24;
  if (v20 <= v25)
  {
    if (v20 < v25)
      *((_QWORD *)this + 13) = &v24[v20];
  }
  else
  {
    std::vector<unsigned char>::__append((std::vector<char> *)this + 4, v20 - v25);
    v24 = (char *)*((_QWORD *)this + 12);
  }
  v26 = v3 + 4;
  DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v26, v20, v24);
  if ((_DWORD)DataSourceBytes)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return DataSourceBytes;
    *(_DWORD *)buf = 136315394;
    v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
    v66 = 1024;
    v67 = 209;
    v11 = MEMORY[0x1E0C81028];
    v12 = "%25s:%-5d  Couldn't read compact sample to group pattern specs";
    goto LABEL_11;
  }
  v27 = *((_DWORD *)this + 23);
  if (v27)
  {
    v28 = *((_QWORD *)this + 12);
    v29 = v28 + (*((_DWORD *)this + 26) - v28);
    if ((v28 & 3) != 0)
    {
      v30 = 0;
      v31 = v28 + 1;
      v32 = 8 * ((v28 ^ 3) & 3);
      v33 = v32 + 8;
      v34 = (unsigned __int8 *)*((_QWORD *)this + 12);
      do
      {
        if ((unint64_t)v34 >= v29)
          v35 = 255;
        else
          v35 = *v34;
        v30 = v35 | (v30 << 8);
        ++v34;
      }
      while ((v31++ & 3) != 0);
      v37 = (unsigned int *)(v28 + ((v28 ^ 3) & 3) + 1);
      v38 = v30 << (v32 ^ 0x18);
      v39 = v38;
    }
    else
    {
      v33 = 0;
      v38 = 0;
      v39 = 0;
      v37 = (unsigned int *)*((_QWORD *)this + 12);
    }
    v41 = 0;
    LODWORD(v40) = 0;
    v42 = *((_DWORD *)this + 20);
    if (v27 <= 1)
      v27 = 1;
    while (1)
    {
      if ((v42 - 33) < 0xFFFFFFE0)
        goto LABEL_108;
      v43 = v38 >> (32 - v42);
      v33 -= v42;
      v44 = v33;
      if (v33 < 0)
      {
        if (((*((_DWORD *)this + 26) - (_DWORD)v37) & ~((uint64_t)(v29 - (_QWORD)v37) >> 63) & 0xFFFFFFFC) == 0
          || v28 > (unint64_t)v37)
        {
          v46 = 0;
          v47 = v39;
          do
          {
            v48 = (unsigned __int8 *)v37 + v46;
            v49 = 255;
            if ((unint64_t)v37 + v46 < v29 && (unint64_t)v48 >= v28)
              v49 = *v48;
            v47 = (v47 << 8) | v49;
            v50 = v47;
            ++v46;
          }
          while ((_DWORD)v46 != 4);
        }
        else
        {
          v50 = bswap32(*v37);
        }
        ++v37;
        v43 |= v50 >> v44;
        v33 = v44 + 32;
        v38 = v44 == -32 ? 0 : v50 << -(char)v44;
      }
      else
      {
        v38 <<= v42;
      }
      if (!v43)
      {
LABEL_108:
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_22;
        *(_DWORD *)buf = 136315394;
        v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
        v66 = 1024;
        v67 = 219;
        v14 = MEMORY[0x1E0C81028];
        v15 = "%25s:%-5d  zero pattern length prohibited";
        goto LABEL_21;
      }
      v51 = *((_DWORD *)this + 22);
      if (v51 == 4)
      {
        LODWORD(v52) = ((v43 - 1) >> 1) + 1;
      }
      else
      {
        v52 = v43 * (unint64_t)(v51 >> 3);
        if ((v52 & 0xFFFFFFFF00000000) != 0)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_22;
          *(_DWORD *)buf = 136315394;
          v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
          v66 = 1024;
          v67 = 228;
          v14 = MEMORY[0x1E0C81028];
          v15 = "%25s:%-5d  pattern too long";
LABEL_21:
          _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
          goto LABEL_22;
        }
      }
      if (__CFADD__((_DWORD)v40, (_DWORD)v52))
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_22;
        *(_DWORD *)buf = 136315394;
        v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
        v66 = 1024;
        v67 = 231;
        v14 = MEMORY[0x1E0C81028];
        v15 = "%25s:%-5d  total pattern byte count is too large";
        goto LABEL_21;
      }
      v39 = v38;
      v53 = *((_DWORD *)this + 21);
      if ((v53 - 33) >= 0xFFFFFFE0)
      {
        v33 -= v53;
        v54 = v33;
        if (v33 < 0)
        {
          if ((((_DWORD)v29 - (_DWORD)v37) & ~((uint64_t)(v29 - (_QWORD)v37) >> 63) & 0xFFFFFFFC) != 0
            && v28 <= (unint64_t)v37)
          {
            v55 = bswap32(*v37);
          }
          else
          {
            v56 = 0;
            do
            {
              v57 = (unsigned __int8 *)v37 + v56;
              v58 = 255;
              if ((unint64_t)v37 + v56 < v29 && (unint64_t)v57 >= v28)
                v58 = *v57;
              v38 = (v38 << 8) | v58;
              v55 = v38;
              ++v56;
            }
            while ((_DWORD)v56 != 4);
          }
          ++v37;
          if (v54 == -32)
            v38 = 0;
          else
            v38 = v55 << -(char)v54;
          if (v54 == -32)
            v33 = 0;
          else
            v33 = v54 + 32;
        }
        else
        {
          v38 <<= v53;
        }
        v39 = v38;
      }
      v40 = (v52 + v40);
      if (++v41 == v27)
        goto LABEL_104;
    }
  }
  v40 = 0;
LABEL_104:
  v59 = *((_QWORD *)this + 3);
  if (v59 <= (*(unsigned int (**)(MP4BoxParser_SampleToGroupCompact *))(*(_QWORD *)this + 24))(this)
    || *((_QWORD *)this + 3) < v22 + v40)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      v66 = 1024;
      v67 = 239;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  'csgp' box is too small to contain its patterns";
      goto LABEL_21;
    }
LABEL_22:
    DataSourceBytes = 0;
    *((_BYTE *)this + 60) = 0;
    return DataSourceBytes;
  }
  v60 = (char *)*((_QWORD *)this + 15);
  v61 = *((_QWORD *)this + 16) - (_QWORD)v60;
  if (v40 <= v61)
  {
    if (v40 < v61)
      *((_QWORD *)this + 16) = &v60[v40];
  }
  else
  {
    std::vector<unsigned char>::__append((std::vector<char> *)this + 5, v40 - v61);
    v60 = (char *)*((_QWORD *)this + 15);
  }
  DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v26 + v23, v40, v60);
  if (!(_DWORD)DataSourceBytes)
  {
    *((_BYTE *)this + 60) = 1;
    return DataSourceBytes;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
    v66 = 1024;
    v67 = 243;
    v11 = MEMORY[0x1E0C81028];
    v12 = "%25s:%-5d  Couldn't read compact sample to group patterns";
    goto LABEL_11;
  }
  return DataSourceBytes;
}

uint64_t MP4BoxParser_SampleToGroupCompact::GetSampleToGroupTable(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  char v6;
  unint64_t v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int *v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  unsigned int v48;
  BOOL v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  uint64_t v72;
  unsigned __int8 *v73;
  int v74;
  unsigned int v75;
  BOOL v76;
  unint64_t v78;
  unint64_t v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;

  v3 = *(_QWORD *)(a1 + 96);
  v4 = v3 + (*(_DWORD *)(a1 + 104) - v3);
  if ((v3 & 3) != 0)
  {
    v5 = 0;
    v6 = v3 ^ 3;
    v7 = v3 + 1;
    v8 = 8 * ((v3 ^ 3) & 3) + 8;
    v9 = *(unsigned __int8 **)(a1 + 96);
    do
    {
      if ((unint64_t)v9 >= v4)
        v10 = 255;
      else
        v10 = *v9;
      v5 = v10 | (v5 << 8);
      ++v9;
      v49 = (v7++ & 3) == 0;
    }
    while (!v49);
    v11 = (unsigned int *)(v3 + (v6 & 3) + 1);
    v12 = v5 << ((8 * (v6 & 3)) ^ 0x18);
  }
  else
  {
    v12 = 0;
    v8 = 0;
    v11 = *(unsigned int **)(a1 + 96);
  }
  v13 = *(uint64_t **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  if (*(_BYTE *)(a1 + 60))
  {
    v14 = *(_DWORD *)(a1 + 92);
    if (v14)
    {
      v15 = 0;
      v16 = 0;
      v87 = a2;
      v78 = v4;
      v79 = v3;
      do
      {
        v17 = *(_DWORD *)(a1 + 80);
        if ((v17 - 33) >= 0xFFFFFFE0)
        {
          v18 = v12 >> -(char)v17;
          v8 -= v17;
          if (v8 < 0)
          {
            if ((((_DWORD)v4 - (_DWORD)v11) & ~((uint64_t)(v4 - (_QWORD)v11) >> 63) & 0xFFFFFFFC) != 0
              && v3 <= (unint64_t)v11)
            {
              v12 = bswap32(*v11);
            }
            else
            {
              v19 = 0;
              do
              {
                v20 = (unsigned __int8 *)v11 + v19;
                v21 = 255;
                if ((unint64_t)v11 + v19 < v4 && (unint64_t)v20 >= v3)
                  v21 = *v20;
                v12 = v21 | (v12 << 8);
                ++v19;
              }
              while ((_DWORD)v19 != 4);
            }
            ++v11;
            v18 |= v12 >> v8;
            if (v8 == -32)
              v12 = 0;
            else
              v12 <<= -(char)v8;
            if (v8 == -32)
              v8 = 0;
            else
              v8 += 32;
          }
          else
          {
            v12 <<= v17;
          }
        }
        else
        {
          v18 = 0;
        }
        v22 = *(_DWORD *)(a1 + 84);
        if ((v22 - 33) >= 0xFFFFFFE0)
        {
          v23 = v12 >> -(char)v22;
          v8 -= v22;
          if (v8 < 0)
          {
            if ((((_DWORD)v4 - (_DWORD)v11) & ~((uint64_t)(v4 - (_QWORD)v11) >> 63) & 0xFFFFFFFC) != 0
              && v3 <= (unint64_t)v11)
            {
              v12 = bswap32(*v11);
            }
            else
            {
              v24 = 0;
              do
              {
                v25 = (unsigned __int8 *)v11 + v24;
                v26 = 255;
                if ((unint64_t)v11 + v24 < v4 && (unint64_t)v25 >= v3)
                  v26 = *v25;
                v12 = v26 | (v12 << 8);
                ++v24;
              }
              while ((_DWORD)v24 != 4);
            }
            ++v11;
            v23 |= v12 >> v8;
            if (v8 == -32)
              v12 = 0;
            else
              v12 <<= -(char)v8;
            if (v8 == -32)
              v8 = 0;
            else
              v8 += 32;
          }
          else
          {
            v12 <<= v22;
          }
        }
        else
        {
          v23 = 0;
        }
        v27 = *(_DWORD *)(a1 + 88);
        if (v27 == 4)
          v28 = ((v18 - 1) >> 1) + 1;
        else
          v28 = (v27 >> 3) * v18;
        v29 = *(_QWORD *)(a1 + 120);
        v30 = v28 + v16;
        if (*(_QWORD *)(a1 + 128) - v29 >= v30)
        {
          v31 = v29 + v16;
          v32 = v31 + v28;
          if ((v31 & 3) == 0)
          {
            v39 = 0;
            v40 = 0;
            v36 = (unsigned int *)(v29 + v16);
            if (!v23)
              goto LABEL_153;
LABEL_63:
            v80 = v30;
            v81 = v15;
            v82 = v12;
            v83 = v11;
            v41 = 0;
            v42 = 8 * v28;
            v86 = v23;
            v84 = v8;
            v85 = 8 * v28;
            while (2)
            {
              v43 = *(_DWORD *)(a1 + 88);
              if ((v43 - 33) >= 0xFFFFFFE0)
              {
                v44 = v40 >> -(char)v43;
                v39 -= v43;
                if (v39 < 0)
                {
                  if ((((_DWORD)v32 - (_DWORD)v36) & ~((uint64_t)(v32 - (_QWORD)v36) >> 63) & 0xFFFFFFFC) != 0
                    && v31 <= (unint64_t)v36)
                  {
                    v40 = bswap32(*v36);
                  }
                  else
                  {
                    v45 = 0;
                    do
                    {
                      v46 = (unsigned __int8 *)v36 + v45;
                      v47 = 255;
                      if ((unint64_t)v36 + v45 < v32 && (unint64_t)v46 >= v31)
                        v47 = *v46;
                      v40 = v47 | (v40 << 8);
                      ++v45;
                    }
                    while ((_DWORD)v45 != 4);
                  }
                  v48 = v40 << -(char)v39;
                  v49 = v39 == -32;
                  ++v36;
                  v44 = (v40 >> v39) | v44;
                  if (v39 == -32)
                    v39 = 0;
                  else
                    v39 += 32;
                  if (v49)
                    v40 = 0;
                  else
                    v40 = v48;
                }
                else
                {
                  v40 <<= v43;
                }
              }
              else
              {
                v44 = 0;
              }
              if (*(_BYTE *)(a1 + 78) && ((v44 >> (v43 - 1)) & 1) != 0)
              {
                v50 = v44 & (0x7FFFFFFFu >> -(char)v43);
                if (v50)
                {
                  v44 = v50 | 0x10000u;
                  *(_BYTE *)(a1 + 77) = 1;
                }
                else
                {
                  v44 = 0;
                }
              }
              else if ((_DWORD)v44)
              {
                *(_BYTE *)(a1 + 76) = 1;
              }
              v51 = *(uint64_t **)a2;
              v52 = ((uint64_t)v13 - *(_QWORD *)a2) >> 3;
              if (v13 == *(uint64_t **)a2 || HIDWORD(v51[v52 - 1]) != (_DWORD)v44)
              {
                v53 = *(_QWORD *)(a2 + 16);
                if ((unint64_t)v13 >= v53)
                {
                  if ((unint64_t)(v52 + 1) >> 61)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v54 = a1;
                  v55 = v53 - (_QWORD)v51;
                  v56 = v55 >> 2;
                  if (v55 >> 2 <= (unint64_t)(v52 + 1))
                    v56 = v52 + 1;
                  if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
                    v57 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v57 = v56;
                  if (v57)
                  {
                    v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v57);
                    a2 = v87;
                  }
                  else
                  {
                    v58 = 0;
                  }
                  v59 = (uint64_t *)(v57 + 8 * v52);
                  *v59 = (v44 << 32) | 1;
                  v13 = v59 + 1;
                  v61 = *(uint64_t **)a2;
                  v60 = *(uint64_t **)(a2 + 8);
                  if (v60 != *(uint64_t **)a2)
                  {
                    do
                    {
                      v62 = *--v60;
                      *--v59 = v62;
                    }
                    while (v60 != v61);
                    v60 = *(uint64_t **)a2;
                  }
                  *(_QWORD *)a2 = v59;
                  *(_QWORD *)(a2 + 8) = v13;
                  *(_QWORD *)(a2 + 16) = v57 + 8 * v58;
                  if (v60)
                  {
                    v63 = v13;
                    operator delete(v60);
                    v13 = v63;
                    a2 = v87;
                  }
                  a1 = v54;
                  v42 = v85;
                  v23 = v86;
                }
                else
                {
                  *v13++ = (v44 << 32) | 1;
                }
                *(_QWORD *)(a2 + 8) = v13;
              }
              else
              {
                ++LODWORD(v51[v52 - 1]);
              }
              if (++v41 % v18)
              {
LABEL_111:
                if (v41 == v23)
                {
                  v14 = *(_DWORD *)(a1 + 92);
                  v4 = v78;
                  v3 = v79;
                  v8 = v84;
                  v11 = v83;
                  v15 = v81;
                  v12 = v82;
                  LODWORD(v30) = v80;
                  goto LABEL_153;
                }
                continue;
              }
              break;
            }
            v64 = 8 * (v32 - (_DWORD)v36);
            v65 = (unsigned int *)((char *)v36 + ((v32 - (_QWORD)v36) & 0x1FFFFFFC));
            if (v64 >= 0x20)
              v64 &= 0x18u;
            else
              v65 = v36;
            if ((int)v32 - (int)v36 < 1)
            {
              v66 = v39 + 8 * (v32 - (_DWORD)v36);
            }
            else
            {
              v39 = 0;
              v40 = 0;
              v36 = v65;
              v66 = v64;
            }
            if (v66 - 33 < 0xFFFFFFE0)
            {
LABEL_122:
              if (!v42)
                goto LABEL_111;
            }
            else
            {
              v39 -= v66;
              if (v39 >= 0)
              {
                v40 <<= v66;
                goto LABEL_122;
              }
              if ((((_DWORD)v32 - (_DWORD)v36) & ~((uint64_t)(v32 - (_QWORD)v36) >> 63) & 0xFFFFFFFC) != 0
                && v31 <= (unint64_t)v36)
              {
                v40 = bswap32(*v36);
              }
              else
              {
                v72 = 0;
                do
                {
                  v73 = (unsigned __int8 *)v36 + v72;
                  v74 = 255;
                  if ((unint64_t)v36 + v72 < v32 && (unint64_t)v73 >= v31)
                    v74 = *v73;
                  v40 = v74 | (v40 << 8);
                  ++v72;
                }
                while ((_DWORD)v72 != 4);
              }
              v75 = v40 << -(char)v39;
              v76 = v39 == -32;
              ++v36;
              if (v39 == -32)
                v39 = 0;
              else
                v39 += 32;
              if (v76)
                v40 = 0;
              else
                v40 = v75;
              if (!v42)
                goto LABEL_111;
            }
            v36 = (unsigned int *)((char *)v36 - (((v39 + v42) >> 3) & 0x1FFFFFFC));
            v39 = (v39 + v42) & 0x1F;
            if (v39)
            {
              v67 = v36 - 1;
              if ((((_DWORD)v32 - ((_DWORD)v36 - 4)) & ~((uint64_t)(v32 - (_QWORD)(v36 - 1)) >> 63) & 0xFFFFFFFC) == 0
                || v31 > (unint64_t)v67)
              {
                v69 = -4;
                do
                {
                  v70 = (unsigned __int8 *)v36 + v69;
                  v71 = 255;
                  if ((unint64_t)v36 + v69 < v32 && (unint64_t)v70 >= v31)
                    v71 = *v70;
                  v40 = v71 | (v40 << 8);
                  ++v69;
                }
                while ((_DWORD)v69);
              }
              else
              {
                v40 = bswap32(*v67);
              }
              v40 <<= -(char)v39;
            }
            else
            {
              v40 = 0;
            }
            goto LABEL_111;
          }
          v33 = 0;
          v34 = v29 + v16 + 1;
          v35 = -8;
          v36 = (unsigned int *)v31;
          do
          {
            v37 = v35;
            if ((unint64_t)v36 >= v32)
              v38 = 255;
            else
              v38 = *(unsigned __int8 *)v36;
            v33 = v38 | (v33 << 8);
            v36 = (unsigned int *)((char *)v36 + 1);
            v35 = v37 + 8;
            v49 = (v34++ & 3) == 0;
          }
          while (!v49);
          v39 = v37 + 16;
          v40 = v33 << (16 - v37);
          if (v23)
            goto LABEL_63;
        }
LABEL_153:
        ++v15;
        v16 = v30;
      }
      while (v15 < v14);
    }
  }
  return 0;
}

void acv2::ConverterRegistry::~ConverterRegistry(acv2::ConverterRegistry *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E290A840;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E290A840;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x193FFE460);
}

uint64_t acv2::ConverterRegistry::GetEncodersSize(acv2::ConverterRegistry *this, int a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;

  acv2::ConverterRegistry::MakeEncoderFactories(this, a2);
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  if (v6 == v7)
  {
    v8 = 0;
    if (!a3)
      return 0;
    goto LABEL_12;
  }
  v8 = 0;
  do
  {
    v9 = *(_DWORD *)(*(_QWORD *)v6 + 16);
    v10 = v9 == 1852597614 || v9 == 1634037347;
    if (v10 && *(_DWORD *)(*(_QWORD *)v6 + 20) == a2)
      ++v8;
    v6 += 8;
  }
  while (v6 != v7);
  if (a3)
LABEL_12:
    *a3 = 12 * v8;
  return 0;
}

uint64_t acv2::ConverterRegistry::GetOutputFormatsSize(acv2::ConverterRegistry *this)
{
  uint64_t v1;
  _QWORD **v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v3 = &v4;
  acv2::ConverterRegistry::GetOutputFormatsSet((uint64_t)this, (uint64_t *)&v3);
  v1 = (4 * v5);
  return v1;
}

void sub_18F02DA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  _Unwind_Resume(a1);
}

uint64_t acv2::ConverterRegistry::GetAvailableEncodeBitRatesInfo(acv2::ConverterRegistry *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t FactoryBySpecifier;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  FactoryBySpecifier = acv2::ConverterRegistry::FindFactoryBySpecifier(this, a2, a3);
  if (FactoryBySpecifier)
    return (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)FactoryBySpecifier + 48))(FactoryBySpecifier, a4);
  AudioConverterLog();
  v7 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v8 = 136315394;
    v9 = "ConverterFactory.cpp";
    v10 = 1024;
    v11 = 433;
    _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for encode bit rates info", (uint8_t *)&v8, 0x12u);
  }
  return 1718449215;
}

uint64_t acv2::ConverterRegistry::GetAvailableChannelLayoutsInfo(acv2::ConverterRegistry *this, const AudioStreamBasicDescription *a2, unsigned int *a3, int a4)
{
  AudioFormatID mFormatID;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mFormatID = a2->mFormatID;
  if (a4)
    v7 = mFormatID;
  else
    v7 = 1819304813;
  if (a4)
    v8 = 1819304813;
  else
    v8 = mFormatID;
  v9 = (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 16))(this, v8, v7, 0, 0);
  if (v9)
    return (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *, unsigned int *))(*(_QWORD *)v9 + 64))(v9, a2, a3);
  AudioConverterLog();
  v11 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v12 = 136315394;
    v13 = "ConverterFactory.cpp";
    v14 = 1024;
    v15 = 465;
    _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for channel layouts info", (uint8_t *)&v12, 0x12u);
  }
  return 1718449215;
}

uint64_t acv2::ConverterRegistry::GetAvailableNumberChannelsInfo(acv2::ConverterRegistry *this, const AudioStreamBasicDescription *a2, unsigned int *a3, int a4)
{
  AudioFormatID mFormatID;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  mFormatID = a2->mFormatID;
  if (a4)
    v7 = mFormatID;
  else
    v7 = 1819304813;
  if (a4)
    v8 = 1819304813;
  else
    v8 = mFormatID;
  v9 = (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 16))(this, v8, v7, 0, 0);
  if (v9)
    return (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *, unsigned int *))(*(_QWORD *)v9 + 72))(v9, a2, a3);
  AudioConverterLog();
  v11 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v12 = 136315394;
    v13 = "ConverterFactory.cpp";
    v14 = 1024;
    v15 = 484;
    _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for # channels info", (uint8_t *)&v12, 0x12u);
  }
  return 1718449215;
}

uint64_t acv2::ConverterRegistry::GetFormatInfo(acv2::ConverterRegistry *this, int a2, int *a3, AudioStreamBasicDescription *a4)
{
  UInt32 mChannelsPerFrame;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  signed int v11;
  int v13;
  AudioStreamBasicDescription v14;
  OpaqueAudioConverter **v15;
  uint64_t v16;
  int v17;
  Float64 v18;
  __int128 v19;
  uint64_t v20;
  UInt32 v21;
  AudioStreamBasicDescription v22;
  Float64 **v23;
  int **v24;
  int **v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  Float64 ***v27;
  Float64 *v28;
  int *v29;
  int v30;

  mChannelsPerFrame = a4->mChannelsPerFrame;
  if (mChannelsPerFrame || (v8 = 0, a2) && a3)
  {
    v17 = 0;
    if (mChannelsPerFrame <= 1)
      mChannelsPerFrame = 1;
    v22.mSampleRate = a4->mSampleRate;
    *(_QWORD *)&v22.mFormatID = 0x96C70636DLL;
    v22.mBytesPerPacket = 4 * mChannelsPerFrame;
    v22.mFramesPerPacket = 1;
    v22.mBytesPerFrame = 4 * mChannelsPerFrame;
    v22.mChannelsPerFrame = mChannelsPerFrame;
    *(_QWORD *)&v22.mBitsPerChannel = 32;
    v15 = (OpaqueAudioConverter **)&v16;
    v16 = 0;
    v9 = *(_OWORD *)&a4->mBytesPerPacket;
    *(_OWORD *)&v14.mSampleRate = *(_OWORD *)&a4->mSampleRate;
    *(_OWORD *)&v14.mBytesPerPacket = v9;
    *(_QWORD *)&v14.mBitsPerChannel = *(_QWORD *)&a4->mBitsPerChannel;
    v13 = 1969977198;
    v14.mFormatID = AudioFormatEncryptedFormatTranslator::DecryptFormatID(a4->mFormatID, &v13);
    if (a3)
    {
      if (AudioConverterNewInternal(&v14, &v22, 0, 0, &v16, newAudioConverter, 0, 0))
      {
        v8 = AudioConverterNewInternal(&v22, &v14, 0, 0, &v16, newAudioConverter, 0, 0);
        if (!(_DWORD)v8)
        {
          if (a2)
          {
            LODWORD(v28) = 1668114275;
            v30 = a2;
            v29 = a3;
            v23 = &v28;
            v24 = (int **)&v30;
            v25 = &v29;
            v26 = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
            v27 = &v23;
            with_resolved(v16, &v26);
          }
          goto LABEL_18;
        }
        goto LABEL_22;
      }
      if (a2)
      {
        LODWORD(v28) = 1684891491;
        v30 = a2;
        v29 = a3;
        v23 = &v28;
        v24 = (int **)&v30;
        v25 = &v29;
        v26 = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
        v27 = &v23;
        with_resolved(v16, &v26);
      }
    }
    else
    {
      if (!AudioConverterNewInternal(&v22, &v14, 0, 0, &v16, newAudioConverter, 0, 0))
      {
LABEL_18:
        v17 = 40;
        v30 = 1633906532;
        v28 = &v18;
        v29 = &v17;
        v23 = (Float64 **)&v30;
        v24 = &v29;
        v25 = (int **)&v28;
        v26 = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
        v27 = &v23;
        v10 = with_resolved(v16, &v26);
        goto LABEL_19;
      }
      v8 = AudioConverterNewInternal(&v14, &v22, 0, 0, &v16, newAudioConverter, 0, 0);
      if ((_DWORD)v8)
      {
LABEL_22:
        applesauce::raii::v1::detail::ScopeGuard<acv2::ConverterRegistry::GetFormatInfo(unsigned int,void const*,AudioStreamBasicDescription *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&v15);
        return v8;
      }
    }
    v17 = 40;
    v30 = 1633904996;
    v28 = &v18;
    v29 = &v17;
    v23 = (Float64 **)&v30;
    v24 = &v29;
    v25 = (int **)&v28;
    v26 = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
    v27 = &v23;
    v10 = with_resolved(v16, &v26);
LABEL_19:
    v8 = v10;
    if (!(_DWORD)v10)
    {
      a4->mSampleRate = v18;
      v11 = v19;
      *(_OWORD *)&a4->mFormatID = v19;
      *(_QWORD *)&a4->mBytesPerFrame = v20;
      a4->mBitsPerChannel = v21;
      v8 = 0;
      if (v13 != 1969977198)
        a4->mFormatID = AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(v11, v13);
    }
    goto LABEL_22;
  }
  return v8;
}

void sub_18F02E148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  applesauce::raii::v1::detail::ScopeGuard<acv2::ConverterRegistry::GetFormatInfo(unsigned int,void const*,AudioStreamBasicDescription *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((OpaqueAudioConverter ***)va);
  _Unwind_Resume(a1);
}

uint64_t acv2::ConverterRegistry::GetEncoders(acv2::ConverterRegistry *this, unsigned int a2, unsigned int *a3, char *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  int v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  NSObject *v27;
  int16x8_t v28;
  int32x4_t v29;
  uint32x4_t v30;
  void *__p;
  char v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  void **p_p;
  __int16 v40;
  unsigned int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  acv2::ConverterRegistry::MakeEncoderFactories(this, a2);
  if (a4)
  {
    if (a3)
    {
      v8 = *a3;
      v10 = *((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      v11 = 0;
      if (v10 != v9 && v8 >= 0xC)
      {
        v13 = v8 / 0xC;
        v14 = v10 + 8;
        do
        {
          v15 = *(_QWORD *)(v14 - 8);
          v18 = *(_DWORD *)(v15 + 16);
          v16 = (uint64_t *)(v15 + 16);
          v17 = v18;
          v19 = v18 == 1852597614 || v17 == 1634037347;
          if (v19 && *(_DWORD *)(*(_QWORD *)(v14 - 8) + 20) == a2)
          {
            v20 = &a4[12 * v11++];
            v21 = *v16;
            *((_DWORD *)v20 + 2) = *((_DWORD *)v16 + 2);
            *(_QWORD *)v20 = v21;
            v9 = *((_QWORD *)this + 2);
          }
          if (v14 == v9)
            break;
          v14 += 8;
        }
        while (v11 < v13);
      }
      v22 = 0;
      *a3 = 12 * v11;
    }
    else
    {
      return 561211770;
    }
  }
  else
  {
    v23 = *((_QWORD *)this + 1);
    v24 = *((_QWORD *)this + 2);
    if (v23 == v24)
    {
LABEL_27:
      v22 = 1718449215;
      AudioConverterLog();
      v27 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v28.i32[0] = bswap32(a2);
        *(int8x8_t *)v28.i8 = vzip1_s8(*(int8x8_t *)v28.i8, *(int8x8_t *)v28.i8);
        v29.i64[0] = 0x1F0000001FLL;
        v29.i64[1] = 0x1F0000001FLL;
        v30.i64[0] = 0x5F0000005FLL;
        v30.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v28.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v30, (uint32x4_t)vsraq_n_s32(v29, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v28.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v28.i8, (int8x8_t)0x2E002E002E002ELL);
        v33 = 4;
        LODWORD(__p) = vmovn_s16(v28).u32[0];
        BYTE4(__p) = 0;
        *(_DWORD *)buf = 136315906;
        v35 = "ConverterFactory.cpp";
        v36 = 1024;
        v37 = 550;
        v38 = 2080;
        p_p = &__p;
        v40 = 1024;
        v41 = a2;
        _os_log_impl(&dword_18EE07000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d no encoder found for format ID '%s' (%d)", buf, 0x22u);
        if (v33 < 0)
          operator delete(__p);
      }
    }
    else
    {
      while (1)
      {
        v25 = *(_DWORD *)(*(_QWORD *)v23 + 16);
        v26 = v25 == 1852597614 || v25 == 1634037347;
        if (v26 && *(_DWORD *)(*(_QWORD *)v23 + 20) == a2)
          return 0;
        v23 += 8;
        if (v23 == v24)
          goto LABEL_27;
      }
    }
  }
  return v22;
}

uint64_t acv2::ConverterRegistry::GetOutputFormats(acv2::ConverterRegistry *this, const unsigned int *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD **v8;
  BOOL v9;
  _QWORD **v11;
  _QWORD *v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v11 = &v12;
  acv2::ConverterRegistry::GetOutputFormatsSet((uint64_t)this, (uint64_t *)&v11);
  v5 = 561211770;
  if (a2 && *a2 == 4 * (_DWORD)v13)
  {
    v6 = (uint64_t)v11;
    if (v11 != &v12)
    {
      do
      {
        *a3 = *(_DWORD *)(v6 + 28);
        v7 = *(_QWORD **)(v6 + 8);
        if (v7)
        {
          do
          {
            v8 = (_QWORD **)v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = *(_QWORD ***)(v6 + 16);
            v9 = *v8 == (_QWORD *)v6;
            v6 = (uint64_t)v8;
          }
          while (!v9);
        }
        ++a3;
        v6 = (uint64_t)v8;
      }
      while (v8 != &v12);
    }
    v5 = 0;
  }
  return v5;
}

void sub_18F02E494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  _Unwind_Resume(a1);
}

uint64_t acv2::ConverterRegistry::GetAvailableEncodeBitRates(acv2::ConverterRegistry *this, unsigned int a2, unsigned int *a3, unsigned int *a4, void *a5)
{
  uint64_t FactoryBySpecifier;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  FactoryBySpecifier = acv2::ConverterRegistry::FindFactoryBySpecifier(this, a2, a3);
  if (FactoryBySpecifier)
    return (*(uint64_t (**)(uint64_t, unsigned int *, void *))(*(_QWORD *)FactoryBySpecifier + 80))(FactoryBySpecifier, a4, a5);
  AudioConverterLog();
  v9 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v10 = 136315394;
    v11 = "ConverterFactory.cpp";
    v12 = 1024;
    v13 = 600;
    _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for encode bit rates", (uint8_t *)&v10, 0x12u);
  }
  return 1718449215;
}

uint64_t acv2::ConverterRegistry::GetAvailableChannelLayouts(acv2::ConverterRegistry *this, const AudioStreamBasicDescription *a2, unsigned int *a3, void *a4, int a5)
{
  AudioFormatID mFormatID;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  mFormatID = a2->mFormatID;
  if (a5)
    v9 = mFormatID;
  else
    v9 = 1819304813;
  if (a5)
    v10 = 1819304813;
  else
    v10 = mFormatID;
  v11 = (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 16))(this, v10, v9, 0, 0);
  if (v11)
    return (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *, unsigned int *, void *))(*(_QWORD *)v11 + 96))(v11, a2, a3, a4);
  AudioConverterLog();
  v13 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v14 = 136315394;
    v15 = "ConverterFactory.cpp";
    v16 = 1024;
    v17 = 632;
    _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for channel layouts", (uint8_t *)&v14, 0x12u);
  }
  return 1718449215;
}

uint64_t acv2::ConverterRegistry::GetAvailableNumberChannels(acv2::ConverterRegistry *this, const AudioStreamBasicDescription *a2, unsigned int *a3, void *a4, int a5)
{
  AudioFormatID mFormatID;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  mFormatID = a2->mFormatID;
  if (a5)
    v9 = mFormatID;
  else
    v9 = 1819304813;
  if (a5)
    v10 = 1819304813;
  else
    v10 = mFormatID;
  v11 = (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 16))(this, v10, v9, 0, 0);
  if (v11)
    return (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *, unsigned int *, void *))(*(_QWORD *)v11 + 104))(v11, a2, a3, a4);
  AudioConverterLog();
  v13 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v14 = 136315394;
    v15 = "ConverterFactory.cpp";
    v16 = 1024;
    v17 = 651;
    _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for # channels", (uint8_t *)&v14, 0x12u);
  }
  return 1718449215;
}

uint64_t acv2::ConverterRegistry::GetOutputFormatsSet(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a2 + 1;
  *a2 = (uint64_t)v4;
  a2[2] = 0;
  *v4 = 0;
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, 0x6C70636Du, 1819304813);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, 0x616C6177u, 1634492791);
  result = (uint64_t)std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, 0x756C6177u, 1970037111);
  if (!*(_BYTE *)(a1 + 65))
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    if (v6 == v7)
    {
LABEL_10:
      v11 = operator new();
      qmemcpy((void *)(v11 + 8), "mcplwalanelnwalalppa", 20);
      *(_QWORD *)v11 = &off_1E290B2C0;
      acv2::ConverterRegistry::AddFactory((acv2::ConverterRegistry *)a1, (acv2::ConverterFactory *)v11);
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      while (1)
      {
        if (*(_DWORD *)(*(_QWORD *)v8 + 20) == 1634492791)
        {
          v9 = *(_DWORD *)(*(_QWORD *)v8 + 16);
          if (v9 == 1634037347 || v9 == 1852597614)
            break;
        }
        v8 += 8;
        if (v8 == v7)
          goto LABEL_10;
      }
    }
    if (v6 == v7)
    {
LABEL_18:
      v14 = operator new();
      qmemcpy((void *)(v14 + 8), "mcplwalunelnwalulppa", 20);
      *(_QWORD *)v14 = &off_1E290B2C0;
      acv2::ConverterRegistry::AddFactory((acv2::ConverterRegistry *)a1, (acv2::ConverterFactory *)v14);
    }
    else
    {
      while (1)
      {
        if (*(_DWORD *)(*(_QWORD *)v6 + 20) == 1970037111)
        {
          v12 = *(_DWORD *)(*(_QWORD *)v6 + 16);
          if (v12 == 1634037347 || v12 == 1852597614)
            break;
        }
        v6 += 8;
        if (v6 == v7)
          goto LABEL_18;
      }
    }
    result = acv2::ConverterRegistry::MakeFactories((acv2::ConverterRegistry *)a1, 0, 1819304813, COERCE_DOUBLE(1634037347));
    *(_BYTE *)(a1 + 65) = 1;
  }
  v16 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  while (v16 != v15)
  {
    if (*(_DWORD *)(*(_QWORD *)v16 + 8) == 1819304813)
      result = (uint64_t)std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, *(_DWORD *)(*(_QWORD *)v16 + 12), *(_DWORD *)(*(_QWORD *)v16 + 12));
    v16 += 8;
  }
  return result;
}

OpaqueAudioConverter ***applesauce::raii::v1::detail::ScopeGuard<acv2::ConverterRegistry::GetFormatInfo(unsigned int,void const*,AudioStreamBasicDescription *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(OpaqueAudioConverter ***a1)
{
  OpaqueAudioConverter *v2;

  v2 = **a1;
  if (v2)
    AudioConverterDispose(v2);
  return a1;
}

uint64_t acv2::ConverterFactory::GetAvailableEncodeSampleRatesInfo(acv2::ConverterFactory *this, unsigned int *a2)
{
  *a2 = 16;
  return 0;
}

uint64_t acv2::ConverterFactory::GetAvailableNumberChannelsInfo(acv2::ConverterFactory *this, const AudioStreamBasicDescription *a2, unsigned int *a3)
{
  *a3 = 4;
  return 0;
}

uint64_t acv2::ConverterFactory::GetAvailableEncodeSampleRates(acv2::ConverterFactory *this, unsigned int *a2, _QWORD *a3)
{
  uint64_t result;

  if (*a2 != 16)
    return 561211770;
  result = 0;
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t acv2::ConverterFactory::GetAvailableNumberChannels(acv2::ConverterFactory *this, const AudioStreamBasicDescription *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t result;

  if (*a3 != 4)
    return 561211770;
  result = 0;
  *a4 = -1;
  return result;
}

uint64_t DSPGraph::Macro::isArg(DSPGraph::Macro *this)
{
  return 0;
}

void DSPGraph::StringSubMacro::~StringSubMacro(void **this)
{
  *this = off_1E290D2F8;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  DSPGraph::Macro::~Macro(this);
}

{
  *this = off_1E290D2F8;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  DSPGraph::Macro::~Macro(this);
  JUMPOUT(0x193FFE460);
}

void DSPGraph::StringSubMacro::apply(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  __int128 v32;
  std::string v33;
  __int128 __p;
  unint64_t v35;

  if (*(_BYTE *)(a1 + 80))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v33, "apply");
    v29 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v29 = (_QWORD *)*v29;
    DSPGraph::strprintf((DSPGraph *)"preprocessor error: recursive call to macro %s.", &v32, v29);
    DSPGraph::ThrowException(1886548769, &__p, 137, (__int128 *)&v33, &v32);
  }
  *(_BYTE *)(a1 + 80) = 1;
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  if (a3[1] - *a3 != v6 - v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v33, "apply");
    v30 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v30 = (_QWORD *)*v30;
    DSPGraph::strprintf((DSPGraph *)"preprocessor error: macro %s: wrong number of arguments expected %zu. got %zu\n", &v32, v30, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3), 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
    DSPGraph::ThrowException(1886548769, &__p, 143, (__int128 *)&v33, &v32);
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)&v32 = a2;
  *(_QWORD *)(a4 + 16) = 0;
  __p = 0uLL;
  v35 = 0;
  *((_QWORD *)&v32 + 1) = &__p;
  if (v6 != v7)
  {
    v9 = 0;
    do
    {
      v10 = *a3;
      v11 = (_QWORD *)operator new();
      DSPGraph::StringSubMacro::StringSubMacro((uint64_t)v11, (__int128 *)(v7 + 24 * v9), (__int128 *)(v10 + 24 * v9));
      *v11 = off_1E2912D50;
      v12 = *(_QWORD *)(a2 + 32);
      if (!v12)
      {
        std::deque<std::unique_ptr<DSPGraph::Macro>>::__add_front_capacity((char **)a2);
        v12 = *(_QWORD *)(a2 + 32);
      }
      v13 = *(_QWORD *)(a2 + 8);
      v14 = (_QWORD *)(v13 + 8 * (v12 >> 9));
      if (*(_QWORD *)(a2 + 16) == v13)
        v15 = 0;
      else
        v15 = *v14 + 8 * (v12 & 0x1FF);
      if (v15 == *v14)
        v15 = *(v14 - 1) + 4096;
      *(_QWORD *)(v15 - 8) = v11;
      v16 = v12 - 1;
      v17 = *(_QWORD *)(a2 + 40) + 1;
      *(_QWORD *)(a2 + 32) = v16;
      *(_QWORD *)(a2 + 40) = v17;
      v18 = *(_QWORD *)(*(_QWORD *)(v13 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v16 & 0x1FF));
      v19 = *((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1) >= v35)
      {
        v21 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v22 = (uint64_t)(v35 - __p) >> 2;
        if (v22 <= v21 + 1)
          v22 = v21 + 1;
        if (v35 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v23);
        else
          v24 = 0;
        v25 = (_QWORD *)(v23 + 8 * v21);
        *v25 = v18;
        v20 = v25 + 1;
        v26 = (char *)*((_QWORD *)&__p + 1);
        v27 = (char *)__p;
        if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
        {
          do
          {
            v28 = *((_QWORD *)v26 - 1);
            v26 -= 8;
            *--v25 = v28;
          }
          while (v26 != v27);
          v26 = (char *)__p;
        }
        *(_QWORD *)&__p = v25;
        *((_QWORD *)&__p + 1) = v20;
        v35 = v23 + 8 * v24;
        if (v26)
          operator delete(v26);
      }
      else
      {
        **((_QWORD **)&__p + 1) = v18;
        v20 = (_QWORD *)(v19 + 8);
      }
      *((_QWORD *)&__p + 1) = v20;
      ++v9;
      v7 = *(_QWORD *)(a1 + 32);
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 40) - v7) >> 3));
  }
  DSPGraph::Preprocessor::preprocess(&v33, (DSPGraph::Preprocessor *)a2, a1 + 56, 1);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v33;
  DSPGraph::UndefineLocals::~UndefineLocals((DSPGraph::UndefineLocals *)&v32);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  *(_BYTE *)(a1 + 80) = 0;
}

void sub_18F02EF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  *(_BYTE *)(v31 + 80) = 0;
  _Unwind_Resume(exception_object);
}

void DSPGraph::Preprocessor::undef(DSPGraph::Preprocessor *this, const DSPGraph::Macro *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const DSPGraph::Macro ***v7;
  const DSPGraph::Macro **v8;
  const DSPGraph::Macro **v9;
  uint64_t v10;
  char v11;
  const DSPGraph::Macro **v12;
  const DSPGraph::Macro **v13;
  uint64_t v14;
  __int16 v15;
  char *v16;
  BOOL v17;
  const DSPGraph::Macro **v18;
  const DSPGraph::Macro ***v19;
  const DSPGraph::Macro **v20;
  const DSPGraph::Macro **v21;
  const DSPGraph::Macro *v22;
  const DSPGraph::Macro *v23;
  const DSPGraph::Macro **v24;
  uint64_t v25;
  char *v26;
  const DSPGraph::Macro **v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t *v46;
  char *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  const DSPGraph::Macro **v51;
  const DSPGraph::Macro *v52;
  const DSPGraph::Macro **v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  BOOL v67;
  char v68[8];
  char *v69;
  uint64_t *v70;

  if (a2)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *((_QWORD *)this + 5);
    v5 = *((_QWORD *)this + 1);
    v6 = *((_QWORD *)this + 2);
    v7 = (const DSPGraph::Macro ***)(v5 + 8 * (v3 >> 9));
    if (v6 == v5)
    {
      v13 = 0;
      v9 = 0;
      v14 = 0;
      v15 = v3 + v4;
      v16 = (char *)(v5 + 8 * ((v3 + v4) >> 9));
      v17 = 1;
    }
    else
    {
      v8 = *v7;
      v9 = &(*v7)[*((_QWORD *)this + 4) & 0x1FFLL];
      v10 = *(_QWORD *)(v5 + (((v3 + v4) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v3 + v4) & 0x1FF);
      if (v9 != (const DSPGraph::Macro **)v10)
      {
        v11 = 0;
        while ((v11 & 1) != 0 || *v9 != a2)
        {
          if ((char *)++v9 - (char *)v8 == 4096)
          {
            v12 = v7[1];
            ++v7;
            v8 = v12;
            v9 = v12;
          }
          v11 = 1;
          if (v9 == (const DSPGraph::Macro **)v10)
            goto LABEL_10;
        }
        if (v9 == (const DSPGraph::Macro **)v10)
        {
LABEL_10:
          v9 = (const DSPGraph::Macro **)(*(_QWORD *)(v5 + (((v3 + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * ((v3 + v4) & 0x1FF));
          goto LABEL_23;
        }
        v18 = v9;
        v19 = v7;
LABEL_14:
        v20 = v9 - 512;
        while (1)
        {
          if ((char *)++v18 - (char *)*v19 == 4096)
          {
            v21 = v19[1];
            ++v19;
            v18 = v21;
          }
          if (v18 == (const DSPGraph::Macro **)v10)
            break;
          v22 = *v18;
          *v18 = 0;
          v23 = *v9;
          *v9 = v22;
          if (v23)
            (*(void (**)(const DSPGraph::Macro *))(*(_QWORD *)v23 + 8))(v23);
          ++v9;
          if (*v7 == ++v20)
          {
            v24 = v7[1];
            ++v7;
            v9 = v24;
            goto LABEL_14;
          }
        }
        v3 = *((_QWORD *)this + 4);
        v4 = *((_QWORD *)this + 5);
        v5 = *((_QWORD *)this + 1);
        v6 = *((_QWORD *)this + 2);
      }
LABEL_23:
      v15 = v3 + v4;
      v16 = (char *)(v5 + 8 * ((v3 + v4) >> 9));
      v17 = v6 == v5;
      if (v6 == v5)
        v14 = 0;
      else
        v14 = *(_QWORD *)v16 + 8 * (v15 & 0x1FF);
      v13 = v9;
    }
    v66 = v15;
    if (v9 == (const DSPGraph::Macro **)v14)
      v25 = 0;
    else
      v25 = ((v14 - *(_QWORD *)v16) >> 3) + ((v16 - (char *)v7) << 6) - (v13 - *v7);
    v26 = (char *)(v5 + 8 * (v3 >> 9));
    if (v17)
      v27 = 0;
    else
      v27 = (const DSPGraph::Macro **)(*(_QWORD *)v26 + 8 * (v3 & 0x1FF));
    v67 = v17;
    if (v9 == v27)
      v28 = 0;
    else
      v28 = v13 - *v7 + (((char *)v7 - v26) << 6) - (((uint64_t)v27 - *(_QWORD *)v26) >> 3);
    v29 = (char *)std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro>*,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro>**,long,512l>::operator+[abi:ne180100](v26, (uint64_t)v27, v28);
    if (v25 >= 1)
    {
      v31 = v29;
      v32 = (uint64_t *)v30;
      v33 = (char *)std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro>*,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro>**,long,512l>::operator+[abi:ne180100](v29, v30, v25);
      v35 = v34;
      if (v28 <= (unint64_t)(v4 - v25) >> 1)
      {
        if (v26 == v31)
        {
          v44 = (uint64_t)v27;
          v43 = (uint64_t)v32;
          v41 = v33;
        }
        else
        {
          v39 = *(_QWORD *)v31;
          v38 = (uint64_t *)(v31 - 8);
          v37 = v39;
          v40 = (uint64_t)v32;
          v41 = v33;
          while (1)
          {
            std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<DSPGraph::Macro> *,std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro> *,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro> **,long,512l>,0>((uint64_t)v68, v37, v40, v41, v35);
            v35 = v70;
            v41 = v69;
            if (v38 == (uint64_t *)v26)
              break;
            v42 = *v38--;
            v37 = v42;
            v40 = v42 + 4096;
          }
          v43 = *(_QWORD *)v26 + 4096;
          v44 = (uint64_t)v27;
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<DSPGraph::Macro> *,std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro> *,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro> **,long,512l>,0>((uint64_t)v68, v44, v43, v41, v35);
        v51 = (const DSPGraph::Macro **)v70;
        while (v27 != v51)
        {
          v52 = *v27;
          *v27 = 0;
          if (v52)
            (*(void (**)(const DSPGraph::Macro *))(*(_QWORD *)v52 + 8))(v52);
          if ((const DSPGraph::Macro **)((char *)++v27 - *(_QWORD *)v26) == (const DSPGraph::Macro **)4096)
          {
            v53 = (const DSPGraph::Macro **)*((_QWORD *)v26 + 1);
            v26 += 8;
            v27 = v53;
          }
        }
        *((_QWORD *)this + 5) -= v25;
        while (1)
        {
          v54 = *((_QWORD *)this + 4) + v25;
          *((_QWORD *)this + 4) = v54;
          if (v54 < 0x400)
            break;
          operator delete(**((void ***)this + 1));
          *((_QWORD *)this + 1) += 8;
          v25 = -512;
        }
      }
      else
      {
        if (v67)
          v36 = 0;
        else
          v36 = *(_QWORD *)v16 + 8 * (v66 & 0x1FF);
        if (v16 == v33)
        {
          v50 = (uint64_t *)v36;
          v47 = v31;
          v48 = v32;
        }
        else
        {
          v45 = (uint64_t **)(v33 + 8);
          v46 = (uint64_t *)(*(_QWORD *)v33 + 4096);
          v47 = v31;
          v48 = v32;
          while (1)
          {
            std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<DSPGraph::Macro> *,std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro> *,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro> **,long,512l>,0>((uint64_t)v68, v34, v46, v47, v48);
            v48 = v70;
            v47 = v69;
            if (v45 == (uint64_t **)v16)
              break;
            v49 = *v45++;
            v34 = v49;
            v46 = v49 + 512;
          }
          v34 = *(uint64_t **)v16;
          v50 = (uint64_t *)v36;
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<DSPGraph::Macro> *,std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro> *,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro> **,long,512l>,0>((uint64_t)v68, v34, v50, v47, v48);
        v55 = v70;
        v57 = *((_QWORD *)this + 1);
        v56 = *((_QWORD *)this + 2);
        if (v56 == v57)
        {
          v59 = 0;
        }
        else
        {
          v58 = *((_QWORD *)this + 5) + *((_QWORD *)this + 4);
          v59 = *(_QWORD *)(v57 + ((v58 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v58 & 0x1FF);
        }
        if ((uint64_t *)v59 != v70)
        {
          v60 = v69;
          do
          {
            v61 = *v55;
            *v55 = 0;
            if (v61)
              (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
            if ((uint64_t *)((char *)++v55 - *(_QWORD *)v60) == (uint64_t *)4096)
            {
              v62 = (uint64_t *)*((_QWORD *)v60 + 1);
              v60 += 8;
              v55 = v62;
            }
          }
          while (v55 != (uint64_t *)v59);
          v56 = *((_QWORD *)this + 2);
        }
        v63 = *((_QWORD *)this + 5) - v25;
        for (*((_QWORD *)this + 5) = v63; ; v63 = *((_QWORD *)this + 5))
        {
          v64 = *((_QWORD *)this + 1);
          v65 = v56 == v64 ? 0 : ((v56 - v64) << 6) - 1;
          if ((unint64_t)(v65 - (v63 + *((_QWORD *)this + 4))) < 0x400)
            break;
          operator delete(*(void **)(v56 - 8));
          v56 = *((_QWORD *)this + 2) - 8;
          *((_QWORD *)this + 2) = v56;
        }
      }
    }
  }
}

_QWORD *std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro>*,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro>**,long,512l>::operator+[abi:ne180100](_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = a3 + ((a2 - *result) >> 3);
    if (v3 < 1)
      result -= (unint64_t)(511 - v3) >> 9;
    else
      result += (unint64_t)v3 >> 9;
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<DSPGraph::Macro> *,std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro> *,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro> **,long,512l>,0>(uint64_t result, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;

  v6 = a4;
  v7 = a2;
  v8 = (_QWORD *)result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = (uint64_t *)*a4;
    while (1)
    {
      v11 = (char *)v10 - (char *)a5 + 4096;
      if (v9 - v7 >= v11 >> 3)
        v12 = v11 >> 3;
      else
        v12 = v9 - v7;
      if (v12)
      {
        v13 = 8 * v12;
        v14 = &v7[v12];
        do
        {
          v15 = *v7;
          *v7 = 0;
          result = *a5;
          *a5 = v15;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++v7;
          ++a5;
          v13 -= 8;
        }
        while (v13);
        v7 = v14;
      }
      if (v7 == v9)
        break;
      v16 = (uint64_t *)v6[1];
      ++v6;
      v10 = v16;
      a5 = v16;
    }
    if ((uint64_t *)(*v6 + 4096) == a5)
    {
      v17 = (uint64_t *)v6[1];
      ++v6;
      a5 = v17;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<DSPGraph::Macro> *,std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro> *,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro> **,long,512l>,0>(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v6 = a4;
  v8 = (_QWORD *)result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    v11 = a3;
    while (1)
    {
      v12 = (uint64_t)a5 - v10;
      if ((v11 - a2) >> 3 >= v12 >> 3)
        v13 = v12 >> 3;
      else
        v13 = (v11 - a2) >> 3;
      if (v13)
      {
        v14 = -8 * v13;
        v15 = (uint64_t *)(v11 - 8);
        do
        {
          v16 = *v15;
          *v15 = 0;
          v17 = *--a5;
          result = v17;
          *a5 = v16;
          if (v17)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          --v15;
          v14 += 8;
        }
        while (v14);
      }
      v11 -= 8 * v13;
      if (v11 == a2)
        break;
      v18 = *--v6;
      v10 = v18;
      a5 = (_QWORD *)(v18 + 4096);
    }
    if ((_QWORD *)(*v6 + 4096) == a5)
    {
      v19 = (_QWORD *)v6[1];
      ++v6;
      a5 = v19;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

void DSPGraph::ArgMacro::~ArgMacro(void **this)
{
  *this = off_1E290D2F8;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  DSPGraph::Macro::~Macro(this);
}

{
  *this = off_1E290D2F8;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  DSPGraph::Macro::~Macro(this);
  JUMPOUT(0x193FFE460);
}

uint64_t DSPGraph::ArgMacro::isArg(DSPGraph::ArgMacro *this)
{
  return 1;
}

void DSPGraph::Macro::~Macro(void **this)
{
  void **v2;

  *this = off_1E2911C90;
  v2 = this + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void DSPGraph::Preprocessor::parseToEnd(std::string::value_type **a1, char a2, std::string::value_type a3, std::string *this)
{
  std::string::value_type v8;
  std::string::value_type *v9;
  int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v8 = **a1;
  if (!v8)
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "parseToEnd");
    std::string::basic_string[abi:ne180100]<0>(&v12, "preprocessor error: expected closing brace");
    DSPGraph::ThrowException(1886548769, &v14, 176, &v13, &v12);
  }
  v9 = *a1 + 1;
  v10 = 1;
  while (1)
  {
    if (v8 != a3)
    {
      if (v8 == a2)
        ++v10;
      goto LABEL_11;
    }
    if (!--v10)
      break;
    v8 = a3;
LABEL_11:
    std::string::push_back(this, v8);
    v11 = *v9++;
    v8 = v11;
    if (!v11)
      goto LABEL_12;
  }
  *a1 = v9;
}

void sub_18F02F918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::Preprocessor::parseToken(std::string::value_type **a1, uint64_t a2)
{
  _BOOL4 v4;
  std::string::value_type *i;
  std::string::value_type v6;

  DSPGraph::skipspace(a1);
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = DSPGraph::endOfWord(**a1);
  if (!v4)
  {
    for (i = *a1; ; ++i)
    {
      v6 = *i;
      if (DSPGraph::endOfWord(*i))
        break;
      std::string::push_back((std::string *)a2, v6);
    }
    *a1 = i;
  }
  return !v4;
}

uint64_t DSPGraph::Preprocessor::find(_QWORD *a1, unsigned __int8 **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[1];
  if (a1[2] != v2)
  {
    v3 = a1[4];
    v4 = (uint64_t *)(v2 + 8 * (v3 >> 9));
    v5 = *v4;
    v6 = *v4 + 8 * (v3 & 0x1FF);
    v7 = *(_QWORD *)(v2 + (((a1[5] + v3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v3) & 0x1FF);
    if (v6 != v7)
    {
      v8 = *((_BYTE *)a2 + 23);
      if (v8 >= 0)
        v9 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
      else
        v9 = a2[1];
      if (v8 >= 0)
        v10 = (unsigned __int8 *)a2;
      else
        v10 = *a2;
      do
      {
        v11 = *(_QWORD *)v6;
        v12 = *(unsigned __int8 *)(*(_QWORD *)v6 + 31);
        if ((v12 & 0x80u) == 0)
          v13 = (unsigned __int8 *)*(unsigned __int8 *)(*(_QWORD *)v6 + 31);
        else
          v13 = *(unsigned __int8 **)(*(_QWORD *)v6 + 16);
        if (v13 == v9)
        {
          if ((v12 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)(v11 + 8), v10, *(_QWORD *)(*(_QWORD *)v6 + 16)))
              return v11;
          }
          else
          {
            if (!*(_BYTE *)(*(_QWORD *)v6 + 31))
              return v11;
            v14 = 0;
            while (*(unsigned __int8 *)(v11 + v14 + 8) == v10[v14])
            {
              if (v12 == ++v14)
                return v11;
            }
          }
        }
        v6 += 8;
        if (v6 - v5 == 4096)
        {
          v15 = v4[1];
          ++v4;
          v5 = v15;
          v6 = v15;
        }
      }
      while (v6 != v7);
    }
  }
  return 0;
}

std::vector<std::string>::pointer std::vector<std::string>::__push_back_slow_path<std::string const&>(std::vector<std::string> *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  std::allocator<std::string> *p_end_cap;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::__split_buffer<std::string>::pointer end;
  __int128 v11;
  std::vector<std::string>::pointer v12;
  std::__split_buffer<std::string> __v;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_18F02FC20(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

BOOL DSPGraph::Preprocessor::parseMacroBody(_QWORD *a1, std::string::value_type **a2, uint64_t a3)
{
  _QWORD *v6;
  size_t v7;
  std::string *p_p;
  void *v9;
  const void *v10;
  std::string::size_type v11;
  char v12;
  int v14;
  std::string __p;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  if (!DSPGraph::Preprocessor::parseToken(a2, a3) && (DSPGraph::Preprocessor::parseString(a2, a3) & 1) == 0)
  {
    DSPGraph::skipspace(a2);
    if (**a2 == 40)
    {
      ++*a2;
      DSPGraph::Preprocessor::parseToEnd(a2, 40, 41, (std::string *)a3);
      v6 = (_QWORD *)(a3 + 8);
      if (*(char *)(a3 + 23) >= 0)
        v7 = *(unsigned __int8 *)(a3 + 23);
      else
        v7 = *(_QWORD *)(a3 + 8);
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      p_p->__r_.__value_.__s.__data_[0] = 40;
      v9 = (char *)&p_p->__r_.__value_.__l.__data_ + 1;
      if (v7)
      {
        if (*(char *)(a3 + 23) >= 0)
          v10 = (const void *)a3;
        else
          v10 = *(const void **)a3;
        memmove(v9, v10, v7);
      }
      *((_BYTE *)v9 + v7) = 0;
      std::string::push_back(&__p, 41);
      v16[0] = __p.__r_.__value_.__l.__size_;
      v11 = __p.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
      v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      memset(&__p, 0, sizeof(__p));
      if (*(char *)(a3 + 23) < 0)
      {
        operator delete(*(void **)a3);
        v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)a3 = v11;
        *v6 = v16[0];
        *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v16 + 7);
        *(_BYTE *)(a3 + 23) = v12;
        if (v14 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        *(_QWORD *)a3 = v11;
        *v6 = v16[0];
        *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v16 + 7);
        *(_BYTE *)(a3 + 23) = v12;
      }
    }
    else
    {
      DSPGraph::skipspace(a2);
      if (**a2 != 123)
        return DSPGraph::Preprocessor::parseMacroCall(a1, a2, a3);
      ++*a2;
      DSPGraph::Preprocessor::parseToEnd(a2, 123, 125, (std::string *)a3);
    }
  }
  return 1;
}

void sub_18F02FE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::strToLong(uint64_t *a1, uint64_t a2, int a3, char *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v12;
  uint64_t *v13;
  char *__endptr;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v7 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    if (a1[1])
    {
      __endptr = 0;
      a1 = (uint64_t *)*a1;
      goto LABEL_6;
    }
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v16, a4);
    DSPGraph::strprintf((DSPGraph *)"empty %s argument", &v15, a2);
    DSPGraph::ThrowException(1886548769, &v17, a3, &v16, &v15);
  }
  if (!*((_BYTE *)a1 + 23))
    goto LABEL_15;
  __endptr = 0;
LABEL_6:
  v8 = strtol((const char *)a1, &__endptr, 10);
  if ((unint64_t)(v8 - 0x7FFFFFFFFFFFFFFFLL) <= 1 && *__error())
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v16, a4);
    if (*((char *)v7 + 23) >= 0)
      v13 = v7;
    else
      v13 = (uint64_t *)*v7;
    DSPGraph::strprintf((DSPGraph *)"out-of-range %s argument: %s", &v15, a2, v13);
    DSPGraph::ThrowException(1886548769, &v17, a3, &v16, &v15);
  }
  v9 = *((unsigned __int8 *)v7 + 23);
  if ((v9 & 0x80u) == 0)
    v10 = v7;
  else
    v10 = (uint64_t *)*v7;
  if ((v9 & 0x80u) != 0)
    v9 = v7[1];
  if (__endptr != (char *)v10 + v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v16, a4);
    if (*((char *)v7 + 23) >= 0)
      v12 = v7;
    else
      v12 = (uint64_t *)*v7;
    DSPGraph::strprintf((DSPGraph *)"non-numerical characters in %s argument: %s", &v15, a2, v12);
    DSPGraph::ThrowException(1886548769, &v17, a3, &v16, &v15);
  }
  return v8;
}

void sub_18F03003C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t caulk::numeric::exceptional_add<long>(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;
  std::runtime_error *exception;

  v2 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic addition overflow");
  }
  return result;
}

void sub_18F0300F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::numeric::exceptional_mul<long>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  std::runtime_error *exception;

  result = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != result >> 63)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic multiplication overflow");
  }
  return result;
}

void sub_18F030160(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Preprocessor::skipMacroBody(std::string::value_type **this, const char **a2)
{
  std::string::value_type *v3;
  std::string::value_type v4;
  char v5;
  uint64_t v6;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (DSPGraph::Preprocessor::parseToken(this, (uint64_t)&__p)
    || (DSPGraph::Preprocessor::parseString(this, (uint64_t)&__p) & 1) != 0)
  {
    goto LABEL_9;
  }
  DSPGraph::skipspace(this);
  v3 = *this;
  if (**this == 40)
  {
    v4 = 41;
    v5 = 40;
LABEL_8:
    *this = v3 + 1;
    DSPGraph::Preprocessor::parseToEnd(this, v5, v4, &__p);
LABEL_9:
    v6 = 1;
    goto LABEL_10;
  }
  DSPGraph::skipspace(this);
  v3 = *this;
  if (**this == 123 || (DSPGraph::skipspace(this), v3 = *this, **this == 91))
  {
    v4 = 125;
    v5 = 123;
    goto LABEL_8;
  }
  v6 = 0;
LABEL_10:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_18F03024C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Preprocessor::parseString(std::string::value_type **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  DSPGraph::skipspace(a1);
  if (DSPGraph::Preprocessor::parseToken(a1, a2))
    return 1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  if (**a1 == 34)
  {
    std::string::push_back((std::string *)a2, 34);
    v4 = (uint64_t)(*a1 - 1);
    do
    {
      v5 = *(unsigned __int8 *)(v4 + 2);
      if (v5 == 10 || v5 == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v9, "parseString");
        std::string::basic_string[abi:ne180100]<0>(&v8, "unterminated string");
        DSPGraph::ThrowException(1886548769, &v10, 293, &v9, &v8);
      }
      std::string::push_back((std::string *)a2, v5);
      ++v4;
    }
    while (v5 != 34);
    *a1 = (std::string::value_type *)(v4 + 2);
    return 1;
  }
  return 0;
}

void sub_18F03037C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, std::string *a2)
{
  std::string::size_type v3;
  BOOL v4;
  std::string::size_type size;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  v4 = (v3 & 0x80000000) != 0;
  size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80000000) != 0)
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v3 = v3;
  if (v4)
    v3 = size;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, (std::string *)((char *)a2 + v3));
  return a1;
}

void sub_18F030410(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL std::__fs::filesystem::is_regular_file[abi:ne180100](const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  char v3;

  std::__fs::filesystem::__status(a1, a2);
  return v3 == 1;
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x193FFE10C](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_18F030538(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x193FFE3A0](v1 + 424);
  _Unwind_Resume(a1);
}

std::string *std::optional<std::string>::emplace[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,void>(std::string *this, _QWORD **a2, _QWORD **a3)
{
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(this, *a2, *a3);
  this[1].__r_.__value_.__s.__data_[0] = 1;
  return this;
}

uint64_t DSPGraph::Preprocessor::parseActualArg(uint64_t a1, std::string::value_type **a2, uint64_t a3)
{
  std::string *v6;
  std::string::size_type v7;
  char v8;
  uint64_t v9;
  std::string __p;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  if (DSPGraph::Preprocessor::parseToken(a2, a3) || (DSPGraph::Preprocessor::parseString(a2, a3) & 1) != 0)
    return 1;
  DSPGraph::skipspace(a2);
  if (**a2 == 40)
  {
    ++*a2;
    DSPGraph::Preprocessor::parseToEnd(a2, 40, 41, (std::string *)a3);
    std::operator+<char>();
    v6 = std::string::append(&__p, ")", 1uLL);
    v7 = v6->__r_.__value_.__r.__words[0];
    v12[0] = v6->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v12 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    v9 = v12[0];
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v12 + 7);
    *(_BYTE *)(a3 + 23) = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 1;
  }
  DSPGraph::skipspace(a2);
  if (**a2 == 123)
  {
    ++*a2;
    DSPGraph::Preprocessor::parseToEnd(a2, 123, 125, (std::string *)a3);
    return 1;
  }
  return DSPGraph::Preprocessor::parseMacroCall(a1, a2, a3);
}

void sub_18F030774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_18F0307EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::skipspace(_BYTE **a1)
{
  _BYTE *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  int v6;

  v2 = *a1;
  v3 = MEMORY[0x1E0C80978];
  do
  {
    v4 = (char)*v2;
    if ((v4 & 0x80000000) != 0)
    {
      result = __maskrune((char)*v2, 0x4000uLL);
      if ((_DWORD)result)
      {
LABEL_4:
        v2 = *a1 + 1;
        *a1 = v2;
        continue;
      }
    }
    else
    {
      result = *(_DWORD *)(v3 + 4 * v4 + 60) & 0x4000;
      if ((_DWORD)result)
        goto LABEL_4;
    }
    if (v4 != 59)
      return result;
    v2 = *a1;
    do
    {
      v6 = *v2;
      if (!*v2)
        break;
      *a1 = ++v2;
    }
    while (v6 != 10);
  }
  while ((_DWORD)result);
  return result;
}

BOOL DSPGraph::Preprocessor::parseMacroCall(_QWORD *a1, _BYTE **a2, uint64_t a3)
{
  int v6;
  std::vector<std::string>::pointer end;
  __int128 v8;
  std::string *v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned __int8 **v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  std::vector<std::string> v18;
  void *__p[2];
  std::string::size_type v20;
  unsigned __int8 *v21[2];
  uint64_t v22;
  _BYTE *v23;

  v23 = *a2;
  if (*(char *)(a3 + 23) < 0)
  {
    **(_BYTE **)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 23) = 0;
  }
  DSPGraph::skipspace(&v23);
  v6 = *v23;
  if (v6 == 91)
  {
    v22 = 0;
    ++v23;
    v21[0] = 0;
    v21[1] = 0;
    if (!DSPGraph::Preprocessor::parseToken(&v23, (uint64_t)v21))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v18, "parseMacroCall");
      std::string::basic_string[abi:ne180100]<0>(&v16, "preprocessor error: expected macro name");
      DSPGraph::ThrowException(1886548769, (__int128 *)__p, 252, (__int128 *)&v18, &v16);
    }
    __p[0] = 0;
    __p[1] = 0;
    v20 = 0;
    memset(&v18, 0, sizeof(v18));
    while (DSPGraph::Preprocessor::parseActualArg((uint64_t)a1, &v23, (uint64_t)__p))
    {
      end = v18.__end_;
      if (v18.__end_ >= v18.__end_cap_.__value_)
      {
        v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v18, (__int128 *)__p);
      }
      else
      {
        if (SHIBYTE(v20) < 0)
        {
          std::string::__init_copy_ctor_external(v18.__end_, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v8 = *(_OWORD *)__p;
          v18.__end_->__r_.__value_.__r.__words[2] = v20;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
        }
        v9 = end + 1;
      }
      v18.__end_ = v9;
    }
    DSPGraph::skipspace(&v23);
    v10 = v23;
    if (*v23 != 93)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v15, "parseMacroCall");
      std::string::basic_string[abi:ne180100]<0>(&v14, "preprocessor error: expected closing brace");
      DSPGraph::ThrowException(1886548769, &v16, 261, &v15, &v14);
    }
    v11 = DSPGraph::Preprocessor::find(a1, v21);
    if (!v11)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v15, "parseMacroCall");
      v13 = v21;
      if (v22 < 0)
        v13 = (unsigned __int8 **)v21[0];
      DSPGraph::strprintf((DSPGraph *)"preprocessor error: macro %s not found.", &v14, v13);
      DSPGraph::ThrowException(1852204065, &v16, 266, &v15, &v14);
    }
    *a2 = v10 + 1;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *, std::vector<std::string> *))(*(_QWORD *)v11 + 16))(&v16, v11, a1, &v18);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v16;
    *(_QWORD *)(a3 + 16) = v17;
    *(_QWORD *)&v16 = &v18;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
  }
  return v6 == 91;
}

void sub_18F030B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  a22 = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v39 - 57) < 0)
    operator delete(*(void **)(v39 - 80));
  _Unwind_Resume(a1);
}

void DSPGraph::CounterMacro::~CounterMacro(void **this)
{
  DSPGraph::Macro::~Macro(this);
  JUMPOUT(0x193FFE460);
}

uint64_t DSPGraph::CounterMacro::apply@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  std::to_string(a3, *(_QWORD *)(a1 + 56));
  v5 = *(uint64_t **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 == v6)
  {
    result = caulk::numeric::exceptional_add<long>(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    if (v6 - (_QWORD)v5 != 24)
    {
      std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v10, "apply");
      std::string::basic_string[abi:ne180100]<0>(&v9, "too many arguments to counter");
      DSPGraph::ThrowException(1886548769, &v11, 397, &v10, &v9);
    }
    v7 = DSPGraph::strToLong(v5, (uint64_t)"counter step", 394, "apply");
    result = caulk::numeric::exceptional_add<long>(*(_QWORD *)(a1 + 56), v7);
  }
  *(_QWORD *)(a1 + 56) = result;
  return result;
}

void sub_18F030D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 + 23) < 0)
    operator delete(*(void **)v27);
  _Unwind_Resume(exception_object);
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_7987()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

BOOL DSPGraph::endOfWord(unsigned int this)
{
  if (!this)
    return 1;
  if (this <= 0x7F)
  {
    if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * this + 60) & 0x4000) != 0)
      return 1;
  }
  else if (__maskrune(this, 0x4000uLL))
  {
    return 1;
  }
}

void sub_18F030EE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F030F88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F03105C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::raii::v1::detail::ScopeGuard<-[AVAudioChannelGroupSemantics createAudioChannelGroupSemantics]::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F03111C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F0311B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F031264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F031354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class ___ZL28getAVAudioChannelLayoutClassv_block_invoke_8034(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
    AVFAudioLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AVFAudioLibrary()");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AVFASoftLink.h"), 63, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("AVAudioChannelLayout");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVAudioChannelLayoutClass()_block_invoke");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("AVFASoftLink.h"), 65, CFSTR("Unable to find class %s"), "AVAudioChannelLayout");

LABEL_8:
    __break(1u);
  }
  getAVAudioChannelLayoutClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18F03150C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18F031624(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F0317B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18F031884(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void AACAudioFile::~AACAudioFile(AACAudioFile *this)
{
  AACAudioFile::~AACAudioFile(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E2901800;
  v2 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v2)
    MEMORY[0x193FFE460](v2, 0x1000C4003A0DE81);
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 18);
  if (v4)
  {
    *((_QWORD *)this + 19) = v4;
    operator delete(v4);
  }
  AudioFileObject::~AudioFileObject(this);
}

uint64_t AACAudioFile::Create(AACAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  AudioFormatID mFormatID;

  mFormatID = a3->mFormatID;
  if (mFormatID - 1633772392 <= 0xB && ((1 << (mFormatID - 104)) & 0x901) != 0 || mFormatID == 1633772320)
    return AudioFileObject::Create(this, a2, a3);
  else
    return 1718449215;
}

uint64_t AACAudioFile::InitializeDataSource(AACAudioFile *this, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID;

  mFormatID = a2->mFormatID;
  if (mFormatID - 1633772392 <= 0xB && ((1 << (mFormatID - 104)) & 0x901) != 0 || mFormatID == 1633772320)
    return 0;
  else
    return 1718449215;
}

uint64_t AACAudioFile::ReadPackets(AACAudioFile *this, unsigned int a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  BOOL v7;
  int v8;
  uint64_t v10;
  char *v11;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  UInt32 *p_mVariableFramesInPacket;
  UInt32 v30;
  unint64_t v31;
  UInt32 v32;
  uint64_t v33;
  int v34;
  UInt32 *v35;
  uint64_t v36;
  uint64_t v37;
  UInt32 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  UInt32 v42;
  uint64_t v43;
  UInt32 v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v49;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE buf[12];
  _DWORD v61[3];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (a4)
    v7 = a7 == 0;
  else
    v7 = 0;
  v8 = v7;
  if (!a6 || (v10 = *a6, !(_DWORD)v10))
  {
    v18 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v18;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AACAudioFile.cpp";
    LOWORD(v61[0]) = 1024;
    *(_DWORD *)((char *)v61 + 2) = 155;
    v19 = MEMORY[0x1E0C81028];
    v20 = "%25s:%-5d  invalid num packets parameter";
    goto LABEL_14;
  }
  v11 = a7;
  v17 = (*(uint64_t (**)(AACAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, v10 + a5, 0, 1);
  if ((_DWORD)v17)
  {
    v18 = v17;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v18;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AACAudioFile.cpp";
    LOWORD(v61[0]) = 1024;
    *(_DWORD *)((char *)v61 + 2) = 159;
    v19 = MEMORY[0x1E0C81028];
    v20 = "%25s:%-5d  ScanForPackets (AAC) failed";
LABEL_14:
    _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
    return v18;
  }
  v22 = (uint64_t *)*((_QWORD *)this + 15);
  if (!v22)
  {
    if (a5 <= 0)
      return 1685348671;
    else
      return 1885563711;
  }
  if (v22[3] >= a5)
    v18 = 1685348671;
  else
    v18 = 1885563711;
  if (v22[3] >= a5 && v22 != 0)
  {
    v24 = v22[3];
    if (a3)
      *a3 = 0;
    v25 = *a6;
    if (v25 + a5 > v24)
    {
      LODWORD(v25) = v24 - a5;
      *a6 = v24 - a5;
    }
    if (!(_DWORD)v25)
    {
      if (a3)
        *a3 = 0;
      return 4294967257;
    }
    v52 = a3;
    v58 = a5;
    if (v8)
    {
      v26 = v22;
      CompressedPacketTable::operator[]((uint64_t)buf, v22, a5);
      if (*a6)
      {
        v27 = 0;
        v28 = *(_QWORD *)buf;
        p_mVariableFramesInPacket = &a4->mVariableFramesInPacket;
        do
        {
          CompressedPacketTable::operator[]((uint64_t)buf, v26, v58 + v27);
          v30 = v61[0];
          *((_QWORD *)p_mVariableFramesInPacket - 1) = *(_QWORD *)buf - v28;
          *p_mVariableFramesInPacket = 0;
          p_mVariableFramesInPacket[1] = v30;
          p_mVariableFramesInPacket += 4;
          ++v27;
        }
        while (v27 < *a6);
      }
LABEL_67:
      v18 = 0;
      v49 = 0;
LABEL_68:
      if (v52)
        *v52 = v49;
      return v18;
    }
    v53 = a2;
    v59 = 0;
    v56 = v22;
    CompressedPacketTable::operator[]((uint64_t)buf, v22, a5);
    if (!*a6)
      goto LABEL_67;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v54 = *(_QWORD *)buf;
    v55 = 0;
    v35 = &a4->mVariableFramesInPacket;
    v36 = v58;
    v57 = v58;
    while (1)
    {
      v37 = v33;
      v38 = v32;
      v39 = v36 + v31;
      CompressedPacketTable::operator[]((uint64_t)buf, v56, v36 + v31);
      v33 = *(_QWORD *)buf;
      v32 = v61[0];
      if (v57 < v39)
      {
        v40 = *((unsigned int *)this + 43);
        if (*(_QWORD *)buf == v37 + v38 + v40)
        {
          if (!a4)
          {
            v36 = v58;
            goto LABEL_58;
          }
          v41 = 1;
          v36 = v58;
          goto LABEL_54;
        }
        v42 = v61[0];
        v43 = *(_QWORD *)buf;
        LODWORD(v55) = (*(uint64_t (**)(AACAudioFile *, _QWORD, uint64_t, unsigned int *, char *))(*(_QWORD *)this + 72))(this, v53, v54, &v59, v11);
        if ((_DWORD)v55 != -39 && (_DWORD)v55 != 0)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AACAudioFile.cpp";
            LOWORD(v61[0]) = 1024;
            *(_DWORD *)((char *)v61 + 2) = 223;
            _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes failed", buf, 0x12u);
          }
          return v55;
        }
        v33 = v43;
        HIDWORD(v55) += v59;
        v11 += v59;
        v59 = 0;
        v57 = v39;
        v54 = v43;
        v32 = v42;
      }
      v36 = v58;
      if (!a4)
        goto LABEL_56;
      v41 = 0;
      LODWORD(v40) = 0;
LABEL_54:
      *((_QWORD *)v35 - 1) = (v40 + v34);
      *v35 = 0;
      v35[1] = v32;
      if (v41)
      {
        LODWORD(v40) = *((_DWORD *)this + 43);
LABEL_58:
        v45 = v40 + v32;
        goto LABEL_59;
      }
LABEL_56:
      v45 = v32;
LABEL_59:
      v46 = v59 + v45;
      v59 += v45;
      v34 += v45;
      ++v31;
      v35 += 4;
      if (v31 >= *a6)
      {
        if (!v46)
        {
          v18 = v55;
          v49 = HIDWORD(v55);
          goto LABEL_68;
        }
        v47 = (*(uint64_t (**)(AACAudioFile *, _QWORD, uint64_t, unsigned int *, char *))(*(_QWORD *)this + 72))(this, v53, v54, &v59, v11);
        v18 = v47;
        if ((_DWORD)v47 == -39 || (_DWORD)v47 == 0)
        {
          v49 = v59 + HIDWORD(v55);
          goto LABEL_68;
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AACAudioFile.cpp";
          LOWORD(v61[0]) = 1024;
          *(_DWORD *)((char *)v61 + 2) = 259;
          v19 = MEMORY[0x1E0C81028];
          v20 = "%25s:%-5d  ReadBytes failed";
          goto LABEL_14;
        }
        return v18;
      }
    }
  }
  return v18;
}

uint64_t AACAudioFile::WritePackets(AACAudioFile *this, unsigned __int8 a2, unsigned int a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  double v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unsigned int v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  UInt32 *p_mDataByteSize;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  UInt32 mDataByteSize;
  int *v64;
  int v65;
  int v66;
  UInt32 v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  _QWORD *exception;
  unint64_t v74;
  unsigned int v75;
  _QWORD v76[4];
  int v77;
  AudioStreamPacketDescription v78;
  _BYTE buf[12];
  __int16 v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v78.mStartOffset = 0;
  *(_QWORD *)&v78.mVariableFramesInPacket = 0;
  v77 = 0;
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AACAudioFile.cpp";
      v80 = 1024;
      v81 = 328;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  WritePackets Failed";
LABEL_9:
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x12u);
    }
    return 0;
  }
  if (!*a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AACAudioFile.cpp";
      v80 = 1024;
      v81 = 329;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  WritePackets Failed";
      goto LABEL_9;
    }
    return 0;
  }
  v11 = *((_QWORD *)this + 15);
  if (v11)
    v12 = *(_QWORD *)(v11 + 24);
  else
    v12 = 0;
  if (v12 != a5)
  {
    v15 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v15;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AACAudioFile.cpp";
    v80 = 1024;
    v81 = 331;
    v18 = MEMORY[0x1E0C81028];
    v19 = "%25s:%-5d  ";
LABEL_22:
    _os_log_impl(&dword_18EE07000, v18, OS_LOG_TYPE_ERROR, v19, buf, 0x12u);
    return v15;
  }
  if (!a4)
  {
    v15 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v15;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AACAudioFile.cpp";
    v80 = 1024;
    v81 = 332;
    v18 = MEMORY[0x1E0C81028];
    v19 = "%25s:%-5d  Packet Descriptions were not provided";
    goto LABEL_22;
  }
  if (!a5)
  {
    v20 = *((double *)this + 3);
    v21 = *((_DWORD *)this + 8);
    v22 = *((_DWORD *)this + 13);
    if (v22 == 2)
    {
      v23 = 6619138;
    }
    else
    {
      if (v22 != 1)
      {
        v76[0] = a7;
        v76[1] = 385;
        v76[2] = a7;
        v76[3] = 0;
        ParseADTSChannelConfig((CABitStreamReader *)v76, (int *)buf, (int *)this + 35);
        v23 = *((_DWORD *)this + 35);
        if (!v23)
        {
          v24 = v22 - 3;
          if ((v22 - 3) <= 5 && ((0x2Fu >> v24) & 1) != 0)
          {
            v23 = dword_18F10CBD0[v24];
            *((_DWORD *)this + 35) = v23;
          }
          else
          {
            v23 = 0;
          }
        }
LABEL_33:
        if (v21 != 1633772320)
        {
          if (*((_QWORD *)this + 18) == *((_QWORD *)this + 19))
            return 2003334207;
          *(_DWORD *)buf = 0;
          LODWORD(v74) = 0;
          if (!(*(unsigned int (**)(AACAudioFile *, unint64_t *, _BYTE *))(*(_QWORD *)this + 192))(this, &v74, buf))
          {
            CA_calloc(v74);
            v26 = v25;
            if (!(*(unsigned int (**)(AACAudioFile *, unint64_t *, char *))(*(_QWORD *)this + 200))(this, &v74, v25))
            {
              v27 = &v26[48 * (v74 / 0x30) - 48];
              v20 = *(double *)v27;
              v23 = *((_DWORD *)v27 + 10);
            }
            free(v26);
          }
        }
        if (v23 > 8126469)
        {
          if (v23 <= 9306118)
          {
            if (v23 == 8126470)
            {
              v28 = 24;
              goto LABEL_58;
            }
            if (v23 == 8323080)
            {
              v28 = 28;
              goto LABEL_58;
            }
          }
        }
        else if (v23 <= 7471106)
        {
          if (v23 == 6553601)
          {
            v28 = 4;
            goto LABEL_58;
          }
          if (v23 == 6619138)
          {
            v28 = 8;
            goto LABEL_58;
          }
        }
        else
        {
          switch(v23)
          {
            case 7471107:
              v28 = 12;
              goto LABEL_58;
            case 7602180:
              v28 = 16;
              goto LABEL_58;
            case 7864325:
              v28 = 20;
LABEL_58:
              v29 = operator new();
              v30 = v29;
              v31 = v20;
              *(_WORD *)(v29 + 8) = 0;
              *(_DWORD *)(v29 + 12) = 1768843636;
              *(_QWORD *)v29 = 268407808;
              v32 = 13;
              v33 = (char *)MP4SampleRate::kMP4SampleRateTable;
              do
              {
                v34 = v32 >> 1;
                v35 = &v33[4 * (v32 >> 1)];
                v37 = *(_DWORD *)v35;
                v36 = v35 + 4;
                v32 += ~(v32 >> 1);
                if (v37 > v31)
                  v33 = v36;
                else
                  v32 = v34;
              }
              while (v32);
              if (v33 == "mcaa caarcaatcaahcaa"
                || *(_DWORD *)v33 != v31
                || ((unint64_t)(v33 - (char *)MP4SampleRate::kMP4SampleRateTable) >> 2) > 0xC)
              {
                exception = __cxa_allocate_exception(8uLL);
                *exception = "Error in MP4SampleRate::MP4SampleRate(): sample rate value not allowed";
                __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
              }
              v38 = (char *)MP4SampleRate::kMP4SampleRateTable;
              v39 = 13;
              do
              {
                v40 = v39 >> 1;
                v41 = &v38[4 * (v39 >> 1)];
                v43 = *(_DWORD *)v41;
                v42 = v41 + 4;
                v39 += ~(v39 >> 1);
                if (v43 > v31)
                  v38 = v42;
                else
                  v39 = v40;
              }
              while (v39);
              v44 = 268408768;
              if (v38 != "mcaa caarcaatcaahcaa" && *(_DWORD *)v38 == v31)
                v44 = (16 * ((_DWORD)v38 - MP4SampleRate::kMP4SampleRateTable)) & 0xF0006BC0 | 0xFFF9400;
              v45 = v44 | v28 | 2;
              *(_DWORD *)v29 = v45;
              v46 = *((_QWORD *)this + 25);
              *((_QWORD *)this + 25) = v30;
              if (v46)
              {
                MEMORY[0x193FFE460](v46, 0x1000C4003A0DE81);
                v45 = **((_DWORD **)this + 25);
              }
              v47 = v45 & 0x1000;
              v48 = 7;
              if (!v47)
                v48 = 9;
              buf[0] = 0;
              v49 = *((_QWORD *)this + 22);
              v50 = *((_QWORD *)this + 23) - v49;
              if (v48 <= v50)
              {
                if (v48 < v50)
                  *((_QWORD *)this + 23) = v49 + v48;
              }
              else
              {
                std::vector<unsigned char>::__append((_QWORD *)this + 22, v48 - v50, buf);
                v47 = **((_DWORD **)this + 25) & 0x1000;
              }
              v51 = *((_QWORD *)this + 9);
              v52 = v47 == 0;
              v53 = 7;
              if (v52)
                v53 = 9;
              v17 = v53 + v51;
              v78.mStartOffset = v53 + v51;
              v11 = *((_QWORD *)this + 15);
              if (v11)
                goto LABEL_86;
              goto LABEL_85;
          }
        }
        v28 = 0;
        goto LABEL_58;
      }
      v23 = 6553601;
    }
    *((_DWORD *)this + 35) = v23;
    goto LABEL_33;
  }
  v17 = 0;
  if (!v11)
  {
LABEL_85:
    v11 = operator new();
    v54 = *((_DWORD *)this + 11);
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_DWORD *)(v11 + 32) = v54;
    *((_QWORD *)this + 15) = v11;
  }
LABEL_86:
  if (*a6)
  {
    v55 = 0;
    p_mDataByteSize = &a4->mDataByteSize;
    while (1)
    {
      v57 = *((_QWORD *)this + 15);
      if (v57)
      {
        v58 = *(_QWORD *)(v57 + 24);
        if (v58 >= 1)
        {
          CompressedPacketTable::operator[]((uint64_t)buf, (uint64_t *)v11, v58 - 1);
          v59 = *((_QWORD *)this + 15);
          if (v59)
            v59 = *(_QWORD *)(v59 + 24);
          v60 = *(_QWORD *)buf;
          CompressedPacketTable::operator[]((uint64_t)&v74, (uint64_t *)v11, v59 - 1);
          v61 = v60 + v75;
          if ((**((_DWORD **)this + 25) & 0x1000) != 0)
            v62 = 7;
          else
            v62 = 9;
          v17 = v61 + v62;
          v78.mStartOffset = v61 + v62;
        }
      }
      v78.mDataByteSize = *p_mDataByteSize;
      mDataByteSize = v78.mDataByteSize;
      if (mDataByteSize > (*(unsigned int (**)(AACAudioFile *))(*(_QWORD *)this + 632))(this))
        (*(void (**)(AACAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, *p_mDataByteSize);
      v64 = (int *)*((_QWORD *)this + 25);
      v65 = *v64;
      if ((*v64 & 0x1000) != 0)
        v66 = 7;
      else
        v66 = 9;
      v67 = v66 + *p_mDataByteSize;
      if (!(v67 >> 13))
      {
        v64[1] = v64[1] & 0xFC001FFF | (v67 << 13);
        v64[3] = 0;
      }
      v77 = v66;
      v68 = *((_QWORD *)this + 22);
      v69 = *v64;
      if ((v65 & 0x1000) != 0 && (v69 & 0x1000) == 0 || v64[3])
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return 0;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AACAudioFile.cpp";
        v80 = 1024;
        v81 = 421;
        v13 = MEMORY[0x1E0C81028];
        v14 = "%25s:%-5d  mMutableADTSHeader->Serialize Failed";
        goto LABEL_9;
      }
      *(_DWORD *)v68 = bswap32(*((unsigned __int8 *)v64 + 7) | (16 * v69));
      v70 = v64[1];
      *(_WORD *)(v68 + 4) = bswap32(v70) >> 8;
      *(_BYTE *)(v68 + 6) = v70;
      if ((*((_BYTE *)v64 + 1) & 0x10) != 0)
      {
        v71 = 7;
      }
      else
      {
        *(_WORD *)(v68 + 7) = *((_WORD *)v64 + 4);
        v71 = 9;
      }
      v77 = v71;
      v72 = -7;
      if ((**((_DWORD **)this + 25) & 0x1000) == 0)
        v72 = -9;
      v15 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v72 + v17);
      if ((_DWORD)v15)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return v15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AACAudioFile.cpp";
        v80 = 1024;
        v81 = 423;
        v18 = MEMORY[0x1E0C81028];
        v19 = "%25s:%-5d  GetDataSource()->WriteBytes Failed";
        goto LABEL_22;
      }
      v15 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, char *, int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v17, *p_mDataByteSize, &a7[*(_QWORD *)(p_mDataByteSize - 3)], &v77);
      if ((_DWORD)v15)
        break;
      AudioFileObject::AppendPacket(this, &v78);
      ++v55;
      p_mDataByteSize += 4;
      if (v55 >= *a6)
        goto LABEL_116;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v15;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AACAudioFile.cpp";
    v80 = 1024;
    v81 = 429;
    v18 = MEMORY[0x1E0C81028];
    v19 = "%25s:%-5d  GetDataSource()->WriteBytes Failed";
    goto LABEL_22;
  }
  LODWORD(v55) = 0;
LABEL_116:
  v15 = 0;
  *a6 = v55;
  return v15;
}

void sub_18F032820(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x1000C4003A0DE81);
  _Unwind_Resume(a1);
}

uint64_t AACAudioFile::UpdateSize(AACAudioFile *this)
{
  return 0;
}

uint64_t AACAudioFile::GetNumBytes(AACAudioFile *this)
{
  uint64_t v3;

  v3 = 0;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v3);
  return v3 - *((_QWORD *)this + 9);
}

uint64_t AACAudioFile::GetNumPackets(AACAudioFile *this)
{
  uint64_t v2;
  uint64_t result;
  int v4;

  if (*((_BYTE *)this + 169)
    || (v4 = (*(uint64_t (**)(AACAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1), result = 0, !v4))
  {
    v2 = *((_QWORD *)this + 15);
    if (v2)
      return *(_QWORD *)(v2 + 24);
    else
      return 0;
  }
  return result;
}

uint64_t AACAudioFile::SetMagicCookieData(AACAudioFile *this, unsigned int a2, char *__src)
{
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 18, __src, &__src[a2], a2);
  return 0;
}

uint64_t AACAudioFile::GetChannelLayoutSize(AACAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3)
    *a3 = 0;
  if (a2)
    *a2 = 32;
  return 0;
}

uint64_t AACAudioFile::GetChannelLayout(AACAudioFile *this, unsigned int *a2, AudioChannelLayout *a3)
{
  uint64_t result;
  size_t v5;

  result = 561211770;
  if (a2)
  {
    LODWORD(v5) = *a2;
    if (*a2 >= 0xC)
    {
      if (v5 >= 0x20)
        v5 = 32;
      else
        v5 = v5;
      *a2 = v5;
      if (a3)
      {
        bzero(a3, v5);
        result = 0;
        a3->mChannelLayoutTag = *((_DWORD *)this + 35);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t AACAudioFile::GetInfoDictionary(AACAudioFile *this, CACFDictionary *a2)
{
  AudioFileObject *v3;
  double v5;

  v5 = 0.0;
  v3 = (AudioFileObject *)(*(uint64_t (**)(AACAudioFile *, double *))(*(_QWORD *)this + 544))(this, &v5);
  if ((_DWORD)v3)
    return 1886681407;
  AudioFileObject::AddDurationToInfoDictionary(v3, a2, &v5);
  return 0;
}

uint64_t AACAudioFile::FindMaximumPacketSize(AACAudioFile *this)
{
  if (*((_BYTE *)this + 169)
    || !(*(unsigned int (**)(AACAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1))
  {
    return *((unsigned int *)this + 28);
  }
  else
  {
    return 0;
  }
}

uint64_t AACAudioFile::GetPacketSizeUpperBound(AACAudioFile *this)
{
  return (768 * *((_DWORD *)this + 13));
}

uint64_t AACAudioFile::PacketRangeUpperBound(uint64_t **this, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  unint64_t v7;
  uint64_t *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD v19[6];
  uint64_t v20;
  unsigned int v21;

  result = 1885563711;
  *a4 = 0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    v7 = *a3;
    if ((*a3 & 0x8000000000000000) == 0)
    {
      if ((a2 ^ 0x7FFFFFFFFFFFFFFFuLL) < v7)
        return 4294967246;
      result = ((uint64_t (*)(uint64_t **, unint64_t, _QWORD, uint64_t))(*this)[86])(this, a2 + v7 + 1, 0, 1);
      if (!(_DWORD)result || (_DWORD)result == -39)
      {
        if (*((_BYTE *)this + 168))
        {
          v10 = this[15];
          result = 1885563711;
          if (v10)
          {
            v11 = v10[3];
            v12 = *a3;
            if ((uint64_t)(*a3 + a2) > v11)
            {
              v12 = (v11 - a2) & ~((v11 - a2) >> 63);
              *a3 = v12;
            }
            if (v12 >= 1)
            {
              v13 = 0;
              v14 = a2;
              while (1)
              {
                CompressedPacketTable::operator[]((uint64_t)&v20, v10, v14);
                v15 = v21;
                if (v14 > 0)
                {
                  CompressedPacketTable::operator[]((uint64_t)&v20, v10, v14 - 1);
                  v16 = v20;
                  CompressedPacketTable::operator[]((uint64_t)v19, v10, v14 - 1);
                  v17 = v16 + v19[3];
                  if (v17 >= 0)
                  {
                    CompressedPacketTable::operator[]((uint64_t)&v20, v10, v14);
                    if (v20 - v17 == *((_DWORD *)this + 43))
                      v18 = *((_DWORD *)this + 43);
                    else
                      v18 = 0;
                    v15 += v18;
                  }
                }
                if ((v13 ^ 0x7FFFFFFFFFFFFFFFuLL) < v15)
                  return 4294967246;
                v13 += v15;
                if (++v14 >= (uint64_t)(*a3 + a2))
                  goto LABEL_24;
              }
            }
            v13 = 0;
LABEL_24:
            result = 0;
            *a4 = v13;
          }
        }
        else
        {
          return AudioFileObject::PacketRangeUpperBound((AudioFileObject *)this, a2, a3, a4);
        }
      }
    }
  }
  return result;
}

uint64_t AACAudioFile::CreatePacketTable(AACAudioFile *this)
{
  return (*(uint64_t (**)(AACAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1);
}

void AACAudioFormat::~AACAudioFormat(AACAudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

const __CFArray *AACAudioFormat::GetExtensions(AACAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("aac");
  values[1] = CFSTR("adts");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *AACAudioFormat::GetUTIs(AACAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("public.aac-audio");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *AACAudioFormat::GetMIMETypes(AACAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("audio/aac");
  values[1] = CFSTR("audio/x-aac");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void AACAudioFormat::GetFileTypeName(AACAudioFormat *this, const __CFString **a2)
{
  __CFBundle *v3;
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_5:
    v4 = (const __CFString *)CFRetain(CFSTR("AAC ADTS"));
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_5;
LABEL_3:
  v4 = CFBundleCopyLocalizedString(v3, CFSTR("AAC ADTS"), CFSTR("AAC ADTS"), CFSTR("FileTypeNames"));
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_18F032F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t AACAudioFormat::GetAvailableFormatIDs(AACAudioFormat *this, unsigned int *a2, void *a3)
{
  uint64_t PropertyInfo;
  UInt32 v7;
  unint64_t v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  size_t v19;
  void *outPropertyData;
  UInt32 outPropertyDataSize;
  _DWORD __src[4];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  outPropertyDataSize = 0;
  PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if ((_DWORD)PropertyInfo)
    return PropertyInfo;
  v7 = outPropertyDataSize;
  v8 = (unint64_t)outPropertyDataSize >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&outPropertyData, v8, 1);
  PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, outPropertyData);
  v9 = outPropertyData;
  if ((_DWORD)PropertyInfo)
  {
    if (outPropertyData)
      free(outPropertyData);
    return PropertyInfo;
  }
  if (v7 >= 4)
  {
    v10 = 0;
    if (v8 <= 1)
      v12 = 1;
    else
      v12 = v8;
    v13 = (int *)outPropertyData;
    do
    {
      v15 = *v13++;
      v14 = v15;
      v16 = (1 << (v15 - 104)) & 0x901;
      if ((v15 - 1633772392) <= 0xB && v16 != 0 || v14 == 1633772320)
        __src[v10++] = v14;
      --v12;
    }
    while (v12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
    if (!outPropertyData)
      goto LABEL_24;
  }
  free(v9);
  v11 = v10;
LABEL_24:
  v19 = (4 * v11);
  *a2 = v19;
  if (a3)
    memcpy(a3, __src, v19);
  return 0;
}

void sub_18F03307C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

uint64_t AACAudioFormat::GetAvailableStreamDescriptions(AACAudioFormat *this, int a2, unsigned int *a3, void *a4)
{
  uint64_t PropertyInfo;
  UInt32 v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  size_t v15;
  UInt32 ioPropertyDataSize;
  void *v18;
  UInt32 outPropertyDataSize;
  _OWORD outPropertyData[2];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  outPropertyDataSize = 0;
  PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if ((_DWORD)PropertyInfo)
    return PropertyInfo;
  v8 = outPropertyDataSize;
  v9 = (unint64_t)outPropertyDataSize >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&v18, v9, 1);
  PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, v18);
  v10 = v18;
  if (!(_DWORD)PropertyInfo)
  {
    if (v8 < 4)
    {
      if (v18)
        free(v18);
    }
    else
    {
      v11 = 0;
      if (v9 <= 1)
        v12 = 1;
      else
        v12 = v9;
      v13 = a2 - 1633772392;
      v14 = 1;
      do
      {
        if (*((_DWORD *)v18 + v11) == a2 && (v13 <= 0xB && ((1 << v13) & 0x901) != 0 || a2 == 1633772320))
          break;
        v14 = ++v11 < v9;
      }
      while (v12 != v11);
      free(v18);
      v18 = 0;
      if (v14)
      {
        v21 = 0;
        memset(outPropertyData, 0, sizeof(outPropertyData));
        DWORD2(outPropertyData[0]) = a2;
        ioPropertyDataSize = 40;
        AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, outPropertyData);
        if (*a3 >= 0x28)
          v15 = 40;
        else
          v15 = 0;
        *a3 = v15;
        if (a4)
          memcpy(a4, outPropertyData, v15);
        PropertyInfo = 0;
        v10 = v18;
        if (v18)
          goto LABEL_4;
        return PropertyInfo;
      }
    }
    *a3 = 0;
    return 1718449215;
  }
  if (v18)
LABEL_4:
    free(v10);
  return PropertyInfo;
}

void sub_18F03325C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11)
    free(a11);
  _Unwind_Resume(exception_object);
}

uint64_t AACAudioFormat::GetHFSCodes(AACAudioFormat *this, unsigned int *a2, void *__dst)
{
  size_t v3;
  int __src;

  __src = 1633772320;
  if (*a2 >= 4)
    v3 = 4;
  else
    v3 = *a2 & 0xFFFFFFFC;
  *a2 = v3;
  if (__dst)
    memcpy(__dst, &__src, v3);
  return 0;
}

double AACAudioFormat::NewStream(AACAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = -1;
  *(_QWORD *)(v1 + 96) = -1;
  *(_QWORD *)(v1 + 104) = -1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_QWORD *)&result = 112;
  *(_OWORD *)(v1 + 240) = xmmword_18F116F80;
  *(_DWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 300) = 0;
  *(_QWORD *)(v1 + 284) = 0;
  *(_QWORD *)(v1 + 292) = 0;
  *(_DWORD *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)v1 = &off_1E2904AE8;
  *(_BYTE *)(v1 + 332) = 0;
  *(_DWORD *)(v1 + 336) = 0;
  *(_BYTE *)(v1 + 344) = 0;
  *(_QWORD *)(v1 + 348) = 0x700000000;
  *(_BYTE *)(v1 + 356) = 0;
  *(_DWORD *)(v1 + 360) = 0;
  *(_BYTE *)(v1 + 373) = 0;
  *(_DWORD *)(v1 + 376) = 0;
  *(_QWORD *)(v1 + 392) = 0;
  *(_QWORD *)(v1 + 400) = 0;
  *(_BYTE *)(v1 + 424) = -1;
  *(_QWORD *)(v1 + 408) = 0;
  *(_QWORD *)(v1 + 416) = -1;
  return result;
}

void acv2::NonlinearPCMConverterFactory::~NonlinearPCMConverterFactory(acv2::NonlinearPCMConverterFactory *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t acv2::NonlinearPCMConverterFactory::BuildConverterChain(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void (**v16)(acv2::ULawEncoder *__hidden);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void (**v20)(acv2::ULawDecoder *__hidden);
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  __int128 v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[20];
  uint64_t v41;
  int v42;
  _BYTE v43[28];
  uint64_t v44;
  int v45;

  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = *((_DWORD *)a2 + 9);
  v11 = *((_DWORD *)a2 + 12);
  v33 = *(_OWORD *)((char *)a2 + 52);
  v12 = *((_DWORD *)a2 + 19);
  if (*((double *)a2 + 5) == 0.0)
    v13 = *a2;
  else
    v13 = a2[5];
  if (v9 == 1819304813)
  {
    if (v11 == 1970037111)
    {
      v29 = *(uint64_t *)((char *)a2 + 28);
      v31 = *(uint64_t *)((char *)a2 + 68);
      v27 = *(_OWORD *)((char *)a2 + 12);
      v14 = (_QWORD *)operator new();
      v15 = v14;
      v16 = &off_1E290A330;
    }
    else
    {
      if (v11 != 1634492791)
        return 1869627199;
      v29 = *(uint64_t *)((char *)a2 + 28);
      v31 = *(uint64_t *)((char *)a2 + 68);
      v27 = *(_OWORD *)((char *)a2 + 12);
      v14 = (_QWORD *)operator new();
      v15 = v14;
      v16 = &off_1E290A2E0;
    }
    *v14 = v16;
    v39 = v8;
    *(_DWORD *)v40 = 1819304813;
    *(_OWORD *)&v40[4] = v27;
    v41 = v29;
    v42 = v10;
    v21 = 2 * v31 / v31 * v31;
    *(_QWORD *)v43 = v13;
    *(_QWORD *)&v43[8] = 0xC6C70636DLL;
    *(_DWORD *)&v43[16] = v21;
    *(_DWORD *)&v43[20] = 1;
    *(_DWORD *)&v43[24] = v21;
    v44 = v31 | 0x1000000000;
    v45 = v12;
    v37 = *(_OWORD *)v43;
    v38 = *(_QWORD *)&v43[16];
    v36 = v12;
    v35 = v44;
    v17 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 40))(a5, &v39, a3, a4, a5);
    if ((_DWORD)v17)
    {
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    }
    else
    {
      v22 = operator new();
      *(_OWORD *)(v22 + 16) = v37;
      *(_QWORD *)(v22 + 32) = v38;
      *(_DWORD *)(v22 + 40) = v21;
      *(_QWORD *)(v22 + 44) = v35;
      *(_DWORD *)(v22 + 52) = v36;
      *(_QWORD *)(v22 + 56) = v13;
      *(_DWORD *)(v22 + 64) = v11;
      *(_DWORD *)(v22 + 68) = v33;
      *(_DWORD *)(v22 + 72) = v31;
      *(_DWORD *)(v22 + 76) = 1;
      *(_DWORD *)(v22 + 80) = v31;
      *(_DWORD *)(v22 + 84) = v31;
      *(_DWORD *)(v22 + 88) = 8;
      *(_DWORD *)(v22 + 92) = v12;
      *(_QWORD *)(v22 + 96) = 0;
      *(_QWORD *)(v22 + 104) = 0;
      *(_QWORD *)(v22 + 112) = 0;
      *(_DWORD *)(v22 + 120) = -1;
      *(_OWORD *)(v22 + 128) = 0u;
      *(_OWORD *)(v22 + 144) = 0u;
      *(_DWORD *)(v22 + 160) = v21;
      *(_DWORD *)(v22 + 164) = v31;
      *(_QWORD *)v22 = &off_1E290B140;
      *(_QWORD *)(v22 + 8) = 0;
      *(_QWORD *)(v22 + 168) = v15;
      v34 = v22;
      acv2::AudioConverterChain::AddStep((_QWORD *)a4, &v34);
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      v17 = 0;
      *(_QWORD *)(a4 + 40) = v13;
      *(_DWORD *)(a4 + 48) = v11;
      *(_DWORD *)(a4 + 52) = v33;
      *(_DWORD *)(a4 + 56) = v31;
      *(_DWORD *)(a4 + 60) = 1;
      *(_DWORD *)(a4 + 64) = v31;
      *(_DWORD *)(a4 + 68) = v31;
      *(_DWORD *)(a4 + 72) = 8;
      *(_DWORD *)(a4 + 76) = v12;
    }
  }
  else
  {
    v17 = 1869627199;
    if (v11 == 1819304813)
    {
      if (v9 == 1970037111)
      {
        v30 = *(uint64_t *)((char *)a2 + 28);
        v32 = *(uint64_t *)((char *)a2 + 68);
        v28 = *(_OWORD *)((char *)a2 + 12);
        v18 = (_QWORD *)operator new();
        v19 = v18;
        v20 = &off_1E290A308;
      }
      else
      {
        if (v9 != 1634492791)
          return v17;
        v30 = *(uint64_t *)((char *)a2 + 28);
        v32 = *(uint64_t *)((char *)a2 + 68);
        v28 = *(_OWORD *)((char *)a2 + 12);
        v18 = (_QWORD *)operator new();
        v19 = v18;
        v20 = &off_1E290A2B8;
      }
      *v18 = v20;
      if (v30)
        v23 = 2 * v30 / v30;
      else
        v23 = 2;
      v24 = v23 * v30;
      v39 = v8;
      *(_QWORD *)v40 = 0xC6C70636DLL;
      *(_DWORD *)&v40[8] = v23 * v30;
      *(_DWORD *)&v40[12] = 1;
      *(_DWORD *)&v40[16] = v23 * v30;
      v41 = v30 | 0x1000000000;
      v42 = v10;
      *(_QWORD *)v43 = v13;
      *(_DWORD *)&v43[8] = 1819304813;
      *(_OWORD *)&v43[12] = v33;
      v44 = v32;
      v45 = v12;
      v25 = operator new();
      *(_QWORD *)(v25 + 16) = v8;
      *(_DWORD *)(v25 + 24) = v9;
      *(_DWORD *)(v25 + 28) = v28;
      *(_DWORD *)(v25 + 32) = v30;
      *(_DWORD *)(v25 + 36) = 1;
      *(_DWORD *)(v25 + 40) = v30;
      *(_DWORD *)(v25 + 44) = v30;
      *(_DWORD *)(v25 + 48) = 8;
      *(_DWORD *)(v25 + 52) = v10;
      *(_QWORD *)(v25 + 56) = v8;
      *(_QWORD *)(v25 + 64) = 0xC6C70636DLL;
      *(_DWORD *)(v25 + 72) = v24;
      *(_DWORD *)(v25 + 76) = 1;
      *(_DWORD *)(v25 + 80) = v24;
      *(_DWORD *)(v25 + 84) = v30;
      *(_DWORD *)(v25 + 88) = 16;
      *(_DWORD *)(v25 + 92) = v10;
      *(_QWORD *)(v25 + 104) = 0;
      *(_QWORD *)(v25 + 112) = 0;
      *(_QWORD *)(v25 + 96) = 0;
      *(_DWORD *)(v25 + 120) = -1;
      *(_OWORD *)(v25 + 128) = 0u;
      *(_OWORD *)(v25 + 144) = 0u;
      *(_DWORD *)(v25 + 160) = v30;
      *(_DWORD *)(v25 + 164) = v24;
      *(_QWORD *)v25 = &off_1E290B140;
      *(_QWORD *)(v25 + 8) = 0;
      *(_QWORD *)(v25 + 168) = v19;
      *(_QWORD *)&v37 = v25;
      acv2::AudioConverterChain::AddStep((_QWORD *)a4, (uint64_t *)&v37);
      if ((_QWORD)v37)
        (*(void (**)(_QWORD))(*(_QWORD *)v37 + 8))(v37);
      v17 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 40))(a5, &v39, a3, a4, a5);
      if (!(_DWORD)v17)
      {
        *(_QWORD *)a4 = v8;
        *(_DWORD *)(a4 + 8) = v9;
        *(_DWORD *)(a4 + 12) = v28;
        *(_DWORD *)(a4 + 16) = v30;
        *(_DWORD *)(a4 + 20) = 1;
        *(_DWORD *)(a4 + 24) = v30;
        *(_DWORD *)(a4 + 28) = v30;
        *(_DWORD *)(a4 + 32) = 8;
        *(_DWORD *)(a4 + 36) = v10;
      }
    }
  }
  return v17;
}

void sub_18F03384C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  _Unwind_Resume(exception_object);
}

void acv2::ULawDecoder::~ULawDecoder(acv2::ULawDecoder *this)
{
  JUMPOUT(0x193FFE460);
}

void acv2::ULawDecoder::Convert(acv2::ULawDecoder *this, unsigned __int8 *a2, _WORD *a3, int a4)
{
  int v4;

  for (; a4; --a4)
  {
    v4 = *a2++;
    *a3++ = acv2::ulaw_table[v4];
  }
}

void acv2::ALawDecoder::~ALawDecoder(acv2::ALawDecoder *this)
{
  JUMPOUT(0x193FFE460);
}

void acv2::ALawDecoder::Convert(acv2::ALawDecoder *this, unsigned __int8 *a2, _WORD *a3, int a4)
{
  int v4;

  for (; a4; --a4)
  {
    v4 = *a2++;
    *a3++ = acv2::alaw_table[v4];
  }
}

void acv2::NonlinearPCMConverter::~NonlinearPCMConverter(acv2::NonlinearPCMConverter *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E290B140;
  v2 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  acv2::AudioConverterBase::~AudioConverterBase(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E290B140;
  v2 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x193FFE460);
}

const __CFString *acv2::NonlinearPCMConverter::ConverterName(acv2::NonlinearPCMConverter *this)
{
  return CFSTR("NonlinearPCMConverter");
}

uint64_t acv2::NonlinearPCMConverter::ConvertBufferList(uint64_t result, int a2, unsigned int **a3, _DWORD **a4)
{
  int *v4;
  int v5;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (int *)*a3;
  v5 = **a3;
  if (v5 != **a4)
    std::terminate();
  v8 = result;
  if ((*(_BYTE *)(result + 28) & 0x20) != 0)
  {
    v9 = 1;
    if (!v5)
      return result;
  }
  else
  {
    v9 = *(_DWORD *)(result + 44);
    if (!v5)
      return result;
  }
  v10 = 0;
  v11 = (v9 * a2);
  v12 = 4;
  do
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v8 + 168) + 16))(*(_QWORD *)(v8 + 168), *(_QWORD *)&v4[v12], *(_QWORD *)&(*a4)[v12], v11);
    ++v10;
    v4 = (int *)*a3;
    v12 += 4;
  }
  while (v10 < **a3);
  return result;
}

void acv2::ULawEncoder::~ULawEncoder(acv2::ULawEncoder *this)
{
  JUMPOUT(0x193FFE460);
}

void acv2::ULawEncoder::Convert(acv2::ULawEncoder *this, char *a2, char *a3, int a4)
{
  int v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  char v10;

  for (; a4; --a4)
  {
    v5 = *(__int16 *)a2;
    a2 += 2;
    v4 = v5;
    v6 = (v5 >> 8) & 0x80;
    if (v6)
      v4 = -v4;
    if (v4 >= 32635)
      v4 = 32635;
    v7 = (v4 + 132);
    v8 = acv2::exp_lut[(v7 >> 7)];
    v9 = ((int)v7 >> (v8 + 3)) & 0xF | (16 * v8) | v6;
    if ((_BYTE)v9 == 0xFF)
      v10 = 2;
    else
      v10 = ~(_BYTE)v9;
    *a3++ = v10;
  }
}

void acv2::ALawEncoder::~ALawEncoder(acv2::ALawEncoder *this)
{
  JUMPOUT(0x193FFE460);
}

void acv2::ALawEncoder::Convert(acv2::ALawEncoder *this, char *a2, char *a3, int a4)
{
  int i;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  if (a4)
  {
    for (i = 0; i != a4; ++i)
    {
      v6 = *(__int16 *)a2;
      a2 += 2;
      v5 = v6;
      if (v6 == -32768)
      {
        LOBYTE(v7) = 42;
      }
      else
      {
        v8 = v5 & 0x8000;
        if ((v5 & 0x8000) != 0)
          v5 = -v5;
        if (v5 > 0xFF)
        {
          if ((((v5 >> 15) ^ (v5 >> 14)) & 1) != 0)
          {
            v11 = 0;
          }
          else
          {
            v11 = 0;
            v12 = v5;
            do
            {
              v5 = 2 * v12;
              ++v11;
              v13 = (v12 >> 14) ^ (v12 >> 13);
              v12 *= 2;
            }
            while ((v13 & 1) == 0);
          }
          v10 = v5 >> 10;
          v9 = 112 - 16 * v11;
        }
        else
        {
          v9 = 0;
          v10 = v5 >> 4;
        }
        v7 = (v9 | (v8 >> 8) | v10 & 0xF) ^ 0xFFFFFFD5;
      }
      *a3++ = v7;
    }
  }
}

uint64x2_t CreateMagicalWindow(uint64_t a1, int a2, uint64x2_t result)
{
  uint64_t v3;
  uint64x2_t v4;
  int32x4_t v5;
  _DWORD *v6;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int16x4_t v37;
  int32x4_t v38;
  int64x2_t v39;
  float32x4_t v40;
  float64x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64x2_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int64x2_t v52;
  int64x2_t v53;
  float32x4_t v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;

  if (a2 >= 1)
  {
    *(float *)result.i32 = (float)a2;
    v44 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.i8, 0);
    v45 = (uint64x2_t)vdupq_n_s64((unint64_t)a2 - 1);
    v3 = (a2 + 3) & 0x1FFFFFFFCLL;
    v4 = (uint64x2_t)xmmword_18F116E50;
    result = (uint64x2_t)xmmword_18F1173A0;
    v5 = (int32x4_t)xmmword_18F116EA0;
    v6 = (_DWORD *)(a1 + 8);
    __asm { FMOV            V1.4S, #4.0 }
    v43 = _Q1;
    __asm { FMOV            V1.4S, #1.0 }
    v54 = _Q1;
    __asm { FMOV            V4.4S, #3.0 }
    v41 = (float64x2_t)vdupq_n_s64(0x3FF459A5D6E6692DuLL);
    v42 = _Q4;
    v39 = vdupq_n_s64(4uLL);
    v40 = (float32x4_t)vdupq_n_s32(0x3FC90FDBu);
    do
    {
      v52 = (int64x2_t)result;
      v53 = (int64x2_t)v4;
      v14 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v45, result), (int32x4_t)vcgeq_u64(v45, v4));
      v51 = v5;
      v15 = vdivq_f32(vmulq_f32(vcvtq_f32_s32(v5), v43), v44);
      v16 = (int8x16_t)vcgtq_f32(v54, v15);
      v17.i64[0] = 0x4000000040000000;
      v17.i64[1] = 0x4000000040000000;
      v18 = (int8x16_t)vcgtq_f32(v17, v15);
      v19 = (int8x16_t)vcgtq_f32(v42, v15);
      v20 = vsubq_f32(v17, v15);
      v21.i64[0] = 0xC0000000C0000000;
      v21.i64[1] = 0xC0000000C0000000;
      v50 = vandq_s8(v14, v16);
      v22 = vbicq_s8(v14, v16);
      v23 = (int32x4_t)vandq_s8(v22, v18);
      v24 = vbicq_s8(v22, v18);
      v48 = (int8x16_t)v23;
      v49 = (int32x4_t)vandq_s8(v24, v19);
      v25 = (int32x4_t)vbicq_s8(v24, v19);
      v26 = (float32x4_t)vbslq_s8((int8x16_t)v25, (int8x16_t)vaddq_f32(v20, v17), vbslq_s8((int8x16_t)v49, (int8x16_t)vaddq_f32(v15, v21), vbslq_s8((int8x16_t)v23, (int8x16_t)v20, (int8x16_t)v15)));
      v46 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorn_s8((int8x8_t)vmovn_s32(v25), vorr_s8((int8x8_t)vmovn_s32(v49), (int8x8_t)vmovn_s32(v23)))), 0x1FuLL));
      v47 = (int8x16_t)v25;
      v58 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v26.f32), v41)), vmulq_f64(vcvt_hight_f64_f32(v26), v41)), v40);
      v55 = cosf(v58.f32[1]);
      v27.f32[0] = cosf(v58.f32[0]);
      v27.f32[1] = v55;
      v56 = v27;
      v28 = cosf(v58.f32[2]);
      v29 = v56;
      v29.f32[2] = v28;
      v57 = v29;
      v30 = cosf(v58.f32[3]);
      v31 = v57;
      v31.f32[3] = v30;
      v32.i64[0] = 0x3F0000003F000000;
      v32.i64[1] = 0x3F0000003F000000;
      v33.i64[0] = 0xBF000000BF000000;
      v33.i64[1] = 0xBF000000BF000000;
      v34 = vmlaq_f32(v32, v33, v31);
      v35 = vmulq_f32(v34, v34);
      v36 = vsqrtq_f32((float32x4_t)vbslq_s8(v46, (int8x16_t)v35, (int8x16_t)vsubq_f32(v54, v35)));
      v37 = vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8(v47, vorrq_s8(v50, v48)), (int8x16_t)v49));
      if ((v37.i8[0] & 1) != 0)
        *(v6 - 2) = v36.i32[0];
      if ((v37.i8[2] & 1) != 0)
        *(v6 - 1) = v36.i32[1];
      if ((v37.i8[4] & 1) != 0)
        *v6 = v36.i32[2];
      if ((v37.i8[6] & 1) != 0)
        v6[1] = v36.i32[3];
      v4 = (uint64x2_t)vaddq_s64(v53, v39);
      result = (uint64x2_t)vaddq_s64(v52, v39);
      v38.i64[0] = 0x400000004;
      v38.i64[1] = 0x400000004;
      v5 = vaddq_s32(v51, v38);
      v6 += 4;
      v3 -= 4;
    }
    while (v3);
  }
  return result;
}

uint64_t acv2::Resampler2Wrapper::GetPrimeMethod(acv2::Resampler2Wrapper *this)
{
  return *((unsigned int *)this + 12);
}

double acv2::Resampler2Wrapper::GetInitialPhase(acv2::Resampler2Wrapper *this)
{
  return *(double *)(**((_QWORD **)this + 3) + 144);
}

uint64_t acv2::Resampler2Wrapper::SetInitialPhase(uint64_t this, double a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(this + 24);
  for (i = *(uint64_t **)(this + 32);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 96))(v5, *(unsigned int *)(v5 + 120)))
  {
    v5 = *v2++;
    *(double *)(v5 + 144) = a2;
  }
  return this;
}

uint64_t acv2::Resampler2Wrapper::GetMinimumPhase(acv2::Resampler2Wrapper *this)
{
  return *(unsigned __int8 *)(**((_QWORD **)this + 3) + 185);
}

const char *acv2::Resampler2Wrapper::KernelName(acv2::Resampler2Wrapper *this)
{
  return "Resampler2Wrapper";
}

uint64_t AudioSampleRateConverterCreate(uint64_t *a1, int a2, CFTypeRef cf)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeID v5;
  double v7;
  double v8;
  uint64_t v9;
  Resampler2 *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t v19;
  Resampler2 *v20;
  unint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  int64x2_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  const __CFString *v41;
  CFTypeID v42;
  CFTypeID TypeID;
  const __CFBoolean *v44;
  unsigned __int16 v45;
  int v46;
  int v47;
  int64x2_t *v48;
  Resampler2 *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  double v55;
  Resampler2 *v56;
  unint64_t v57;
  Resampler2 **v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  Resampler2 **v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  Resampler2 *v69;
  int64x2_t v70;
  unint64_t v71;
  _DWORD *exception;
  std::runtime_error *v74;
  uint64_t *v75;
  __int128 v76;
  __int128 v77;
  Resampler2 *v78[2];
  double v79;
  BOOL v80;
  uint64_t v81;
  int64x2_t v82;
  unint64_t v83;
  uint64_t v84;
  const __CFString *v85;

  v3 = 4294967246;
  if (a1)
  {
    v4 = cf;
    if (cf)
    {
      switch(a2)
      {
        case 2:
          v75 = a1;
          v77 = 0uLL;
          LODWORD(v78[0]) = 1;
          v78[1] = 0;
          GetAttribute<double>((unint64_t *)&v77, cf, CFSTR("InputSampleRate"));
          GetAttribute<double>((unint64_t *)&v77 + 1, v4, CFSTR("OutputSampleRate"));
          GetAttribute<unsigned int>((int *)v78, v4, CFSTR("NumberOfChannels"));
          GetAttribute<double>((unint64_t *)&v78[1], v4, CFSTR("InitialPhase"));
          v13 = *(double *)&v77;
          if (*(double *)&v77 > 0.0)
          {
            v14 = *((double *)&v77 + 1);
            if (*((double *)&v77 + 1) > 0.0)
            {
              v15 = v78[0];
              if (LODWORD(v78[0]))
              {
                v16 = operator new();
                *(_DWORD *)(v16 + 304) = -1;
                *(_QWORD *)v16 = &off_1E290A0F8;
                *(_QWORD *)(v16 + 8) = 0;
                v17 = (uint64_t **)(v16 + 8);
                *(_QWORD *)(v16 + 16) = 0;
                *(_QWORD *)(v16 + 24) = 0;
                *(double *)(v16 + 32) = v13;
                *(double *)(v16 + 40) = v14;
                *(_DWORD *)(v16 + 48) = v15;
                *(_QWORD *)(v16 + 56) = 0x3FF0000000000000;
                v18 = vcvtpd_u64_f64((double)v15 * 0.5);
                if (v18)
                {
                  v19 = 0;
                  v20 = v78[1];
                  v21 = vcvtd_n_s64_f64(*(double *)&v78[1], 0x20uLL);
                  v22 = v13 / v14;
                  do
                  {
                    v23 = operator new();
                    *(_BYTE *)v23 = 0;
                    ShortTermLinearInterpolationResampler::SetRate(v23, v22);
                    if (*(double *)&v20 < 0.0)
                    {
                      exception = __cxa_allocate_exception(4uLL);
                      *exception = -50;
                    }
                    *(double *)(v23 + 32) = *(double *)&v20;
                    *(_QWORD *)(v23 + 8) = v21;
                    *(_QWORD *)(v23 + 16) = v21;
                    v25 = *(uint64_t **)(v16 + 16);
                    v24 = *(_QWORD *)(v16 + 24);
                    if ((unint64_t)v25 >= v24)
                    {
                      v27 = *v17;
                      v28 = v25 - *v17;
                      v29 = v28 + 1;
                      if ((unint64_t)(v28 + 1) >> 61)
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      v30 = v24 - (_QWORD)v27;
                      if (v30 >> 2 > v29)
                        v29 = v30 >> 2;
                      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
                        v31 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v31 = v29;
                      if (v31)
                      {
                        if (v31 >> 61)
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        v32 = (char *)operator new(8 * v31);
                      }
                      else
                      {
                        v32 = 0;
                      }
                      v33 = (uint64_t *)&v32[8 * v28];
                      *v33 = v23;
                      v26 = v33 + 1;
                      if (v25 == v27)
                      {
                        v35 = vdupq_n_s64((unint64_t)v25);
                      }
                      else
                      {
                        do
                        {
                          v34 = *--v25;
                          *v25 = 0;
                          *--v33 = v34;
                        }
                        while (v25 != v27);
                        v35 = *(int64x2_t *)v17;
                      }
                      *(_QWORD *)(v16 + 8) = v33;
                      *(_QWORD *)(v16 + 16) = v26;
                      *(_QWORD *)(v16 + 24) = &v32[8 * v31];
                      v36 = (_QWORD *)v35.i64[1];
                      v37 = (_QWORD *)v35.i64[0];
                      while (v36 != v37)
                      {
                        v39 = *--v36;
                        v38 = v39;
                        *v36 = 0;
                        if (v39)
                          MEMORY[0x193FFE460](v38, 0x1000C40AC875A91);
                      }
                      if (v37)
                        operator delete(v37);
                    }
                    else
                    {
                      *v25 = v23;
                      v26 = v25 + 1;
                    }
                    *(_QWORD *)(v16 + 16) = v26;
                    ++v19;
                  }
                  while (v19 != v18);
                }
                v3 = 0;
                v40 = 3;
                goto LABEL_79;
              }
            }
          }
          break;
        case 1:
          v77 = 0uLL;
          v78[0] = (Resampler2 *)0x4000000001;
          v78[1] = 0;
          GetAttribute<double>((unint64_t *)&v77, cf, CFSTR("InputSampleRate"));
          GetAttribute<double>((unint64_t *)&v77 + 1, v4, CFSTR("OutputSampleRate"));
          GetAttribute<unsigned int>((int *)v78, v4, CFSTR("NumberOfChannels"));
          GetAttribute<unsigned int>((int *)v78 + 1, v4, CFSTR("Quality"));
          GetAttribute<double>((unint64_t *)&v78[1], v4, CFSTR("MaxVariableRateDeviation"));
          v7 = *(double *)&v77;
          if (*(double *)&v77 > 0.0)
          {
            v8 = *((double *)&v77 + 1);
            if (*((double *)&v77 + 1) > 0.0)
            {
              v9 = LODWORD(v78[0]);
              if (LODWORD(v78[0]))
              {
                v10 = v78[1];
                v11 = operator new();
                v12 = v11 + 8;
                *(_DWORD *)(v11 + 304) = -1;
                *(_QWORD *)v11 = &off_1E290A170;
                if (*(double *)&v10 == 0.0)
                  MEMORY[0x193FFD740](v12, v9, HIDWORD(v78[0]), v7, v8);
                else
                  MEMORY[0x193FFD74C](v12, v9, HIDWORD(v78[0]), *(double *)&v77, v8, *(double *)&v10);
                *(_OWORD *)(v11 + 280) = v77;
                v3 = 0;
                *(_QWORD *)(v11 + 296) = 0x3FF0000000000000;
                *(_DWORD *)(v11 + 304) = 2;
                *(_QWORD *)(v11 + 312) = v11;
                *a1 = v11;
              }
            }
          }
          break;
        case 0:
          v75 = a1;
          v77 = 0uLL;
          *(_OWORD *)v78 = xmmword_18F1173B0;
          v79 = 0.0;
          v80 = 1;
          GetAttribute<double>((unint64_t *)&v77, cf, CFSTR("InputSampleRate"));
          GetAttribute<double>((unint64_t *)&v77 + 1, v4, CFSTR("OutputSampleRate"));
          GetAttribute<unsigned int>((int *)v78, v4, CFSTR("NumberOfChannels"));
          GetAttribute<unsigned int>((int *)v78 + 1, v4, CFSTR("Algorithm"));
          GetAttribute<unsigned int>((int *)&v78[1], v4, CFSTR("Quality"));
          GetAttribute<unsigned int>((int *)&v78[1] + 1, v4, CFSTR("PrimeMethod"));
          GetAttribute<double>((unint64_t *)&v79, v4, CFSTR("InitialPhase"));
          CFRetain(v4);
          v5 = CFGetTypeID(v4);
          if (v5 == CFDictionaryGetTypeID())
          {
            v81 = (uint64_t)v4;
          }
          else
          {
            v81 = 0;
            CFRelease(v4);
            v4 = 0;
          }
          CFRetain(CFSTR("AllowVariableRate"));
          v41 = CFSTR("AllowVariableRate");
          v42 = CFGetTypeID(CFSTR("AllowVariableRate"));
          TypeID = CFStringGetTypeID();
          if (v42 == TypeID)
          {
            v85 = CFSTR("AllowVariableRate");
          }
          else
          {
            v85 = 0;
            CFRelease(CFSTR("AllowVariableRate"));
            v41 = 0;
          }
          if (!v4)
          {
            v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v74, "Could not construct");
          }
          v44 = (const __CFBoolean *)applesauce::CF::details::at_key<applesauce::CF::StringRef const&>((const __CFDictionary *)v4, v41);
          if (v44 && (v45 = applesauce::CF::convert_as<BOOL,0>(v44), v45 > 0xFFu))
            v46 = v45;
          else
            v46 = v80;
          v80 = v46 != 0;
          if (v42 == TypeID)
            CFRelease(v41);
          CFRelease(v4);
          v3 = 4294967246;
          if (*(double *)&v77 > 0.0 && *((double *)&v77 + 1) > 0.0)
          {
            v47 = (int)v78[0];
            if (LODWORD(v78[0]))
            {
              v16 = operator new();
              *(_DWORD *)(v16 + 304) = -1;
              *(_QWORD *)v16 = &off_1E290A1E8;
              *(_QWORD *)(v16 + 8) = 0;
              v48 = (int64x2_t *)(v16 + 8);
              *(_QWORD *)(v16 + 16) = 0;
              *(_QWORD *)(v16 + 24) = 0;
              v76 = v77;
              *(_OWORD *)(v16 + 32) = v77;
              v49 = (Resampler2 *)LODWORD(v78[1]);
              *(_DWORD *)(v16 + 48) = v47;
              *(_DWORD *)(v16 + 52) = (_DWORD)v49;
              *(_QWORD *)(v16 + 56) = 0x3FF0000000000000;
              Resampler2::InitializeVarispeedMode(v49);
              LODWORD(v50) = *(_DWORD *)(v16 + 48);
              v51 = vcvtpd_u64_f64((double)v50 * 0.5);
              if (v51)
              {
                v52 = 0;
                v53 = HIDWORD(v78[0]);
                v54 = HIDWORD(v78[1]);
                v55 = v79;
                do
                {
                  v56 = (Resampler2 *)operator new();
                  Resampler2::Resampler2(v56, *(double *)&v76, *((double *)&v76 + 1), v53, (int)v49, v54, v55, v46 != 0);
                  v58 = *(Resampler2 ***)(v16 + 16);
                  v57 = *(_QWORD *)(v16 + 24);
                  if ((unint64_t)v58 >= v57)
                  {
                    v60 = ((uint64_t)v58 - v48->i64[0]) >> 3;
                    if ((unint64_t)(v60 + 1) >> 61)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v61 = v57 - v48->i64[0];
                    v62 = v61 >> 2;
                    if (v61 >> 2 <= (unint64_t)(v60 + 1))
                      v62 = v60 + 1;
                    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
                      v63 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v63 = v62;
                    v84 = v16 + 24;
                    if (v63)
                      v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v63);
                    else
                      v64 = 0;
                    v65 = (Resampler2 **)(v63 + 8 * v60);
                    v66 = v63 + 8 * v64;
                    v83 = v66;
                    *v65 = v56;
                    v59 = v65 + 1;
                    v82.i64[1] = (uint64_t)(v65 + 1);
                    v68 = *(_QWORD **)(v16 + 8);
                    v67 = *(_QWORD **)(v16 + 16);
                    if (v67 == v68)
                    {
                      v70 = vdupq_n_s64((unint64_t)v67);
                    }
                    else
                    {
                      do
                      {
                        v69 = (Resampler2 *)*--v67;
                        *v67 = 0;
                        *--v65 = v69;
                      }
                      while (v67 != v68);
                      v70 = *v48;
                      v59 = (_QWORD *)v82.i64[1];
                      v66 = v83;
                    }
                    *(_QWORD *)(v16 + 8) = v65;
                    *(_QWORD *)(v16 + 16) = v59;
                    v82 = v70;
                    v71 = *(_QWORD *)(v16 + 24);
                    *(_QWORD *)(v16 + 24) = v66;
                    v83 = v71;
                    v81 = v70.i64[0];
                    std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)&v81);
                  }
                  else
                  {
                    *v58 = v56;
                    v59 = v58 + 1;
                  }
                  *(_QWORD *)(v16 + 16) = v59;
                  ++v52;
                }
                while (v52 != v51);
              }
              v3 = 0;
              v40 = 1;
LABEL_79:
              *(_DWORD *)(v16 + 304) = v40;
              *(_QWORD *)(v16 + 312) = v16;
              *v75 = v16;
            }
          }
          break;
      }
    }
  }
  return v3;
}

void sub_18F034680(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,OpaqueAudioSampleRateConverter::Resampler2Kernel,OpaqueAudioSampleRateConverter::RamstadKernel,OpaqueAudioSampleRateConverter::STLIKernel>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  MEMORY[0x193FFE460](v3, 0x10A2C40A97E99A9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F0345E4);
}

void GetAttribute<double>(unint64_t *a1, CFTypeRef cf, const void *a3)
{
  CFTypeRef v4;
  CFTypeID v6;
  CFTypeID v7;
  const void *v8;
  unint64_t v9;
  char v10;
  std::runtime_error *exception;

  v4 = cf;
  CFRetain(cf);
  v6 = CFGetTypeID(v4);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v4);
    v4 = 0;
  }
  if (a3)
  {
    CFRetain(a3);
    v7 = CFGetTypeID(a3);
    if (v7 != CFStringGetTypeID())
    {
      CFRelease(a3);
      a3 = 0;
    }
  }
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v8 = applesauce::CF::details::at_key<applesauce::CF::StringRef const&>((const __CFDictionary *)v4, a3);
  if (!v8 || (v9 = applesauce::CF::convert_as<double,0>((unint64_t)v8), !v10))
    v9 = *a1;
  *a1 = v9;
  if (a3)
    CFRelease(a3);
  CFRelease(v4);
}

void sub_18F0348FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  applesauce::CF::StringRef::~StringRef((const void **)&a9);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a10);
  _Unwind_Resume(a1);
}

void GetAttribute<unsigned int>(int *a1, CFTypeRef cf, const void *a3)
{
  CFTypeRef v4;
  CFTypeID v6;
  CFTypeID v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  int v10;
  std::runtime_error *exception;

  v4 = cf;
  CFRetain(cf);
  v6 = CFGetTypeID(v4);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v4);
    v4 = 0;
  }
  if (a3)
  {
    CFRetain(a3);
    v7 = CFGetTypeID(a3);
    if (v7 != CFStringGetTypeID())
    {
      CFRelease(a3);
      a3 = 0;
    }
  }
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v8 = (const __CFNumber *)applesauce::CF::details::at_key<applesauce::CF::StringRef const&>((const __CFDictionary *)v4, a3);
  if (v8)
  {
    v9 = applesauce::CF::convert_as<unsigned int,0>(v8);
    v10 = *a1;
    if ((unint64_t)v9 >> 32)
      v10 = (int)v9;
  }
  else
  {
    v10 = *a1;
  }
  *a1 = v10;
  if (a3)
    CFRelease(a3);
  CFRelease(v4);
}

void sub_18F034A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  applesauce::CF::StringRef::~StringRef((const void **)&a9);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,OpaqueAudioSampleRateConverter::Resampler2Kernel,OpaqueAudioSampleRateConverter::RamstadKernel,OpaqueAudioSampleRateConverter::STLIKernel>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 304);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_1E29219C0 + v2))(&v4, a1);
  *(_DWORD *)(a1 + 304) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN30OpaqueAudioSampleRateConverter16Resampler2KernelENS9_13RamstadKernelENS9_10STLIKernelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS8_SA_SB_SC_EEEEEEDcSG_DpT0_(int a1, OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  OpaqueAudioSampleRateConverter::Resampler2Kernel::~Resampler2Kernel(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN30OpaqueAudioSampleRateConverter16Resampler2KernelENS9_13RamstadKernelENS9_10STLIKernelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS8_SA_SB_SC_EEEEEEDcSG_DpT0_()
{
  JUMPOUT(0x193FFD758);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN30OpaqueAudioSampleRateConverter16Resampler2KernelENS9_13RamstadKernelENS9_10STLIKernelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS8_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  void **v2;

  v2 = (void **)(a2 + 8);
  std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          MEMORY[0x193FFE460](v6, 0x1000C40AC875A91);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void OpaqueAudioSampleRateConverter::Resampler2Kernel::~Resampler2Kernel(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  void **v2;

  Resampler2::ShutdownVarispeedMode((Resampler2 *)*((unsigned int *)this + 13));
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  OpaqueAudioSampleRateConverter::Resampler2Kernel::~Resampler2Kernel(this);
  JUMPOUT(0x193FFE460);
}

void OpaqueAudioSampleRateConverter::STLIKernel::~STLIKernel(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  void **v1;

  v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x193FFE460);
}

double OpaqueAudioSampleRateConverter::STLIKernel::GetInputSampleRate(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  return *((double *)this + 4);
}

double OpaqueAudioSampleRateConverter::STLIKernel::GetOutputSampleRate(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  return *((double *)this + 5);
}

uint64_t OpaqueAudioSampleRateConverter::STLIKernel::GetNumberOfChannels(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  return *((unsigned int *)this + 12);
}

double OpaqueAudioSampleRateConverter::STLIKernel::GetLatency(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  return 0.0;
}

uint64_t OpaqueAudioSampleRateConverter::STLIKernel::GetKernelSize(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  return 0;
}

double OpaqueAudioSampleRateConverter::STLIKernel::GetVariableRate(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  return *((double *)this + 7);
}

uint64_t OpaqueAudioSampleRateConverter::STLIKernel::SetVariableRate(uint64_t this, double a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = this;
  v4 = *(uint64_t **)(this + 8);
  v5 = *(uint64_t **)(this + 16);
  while (v4 != v5)
    this = ShortTermLinearInterpolationResampler::SetRate(*v4++, a2);
  *(double *)(v3 + 56) = a2;
  return this;
}

unint64_t OpaqueAudioSampleRateConverter::STLIKernel::GetRequiredNumberOfInputFrames(ShortTermLinearInterpolationResampler ***this, uint64_t a2)
{
  return ShortTermLinearInterpolationResampler::GetNumberOfSourceFrames(*this[1], a2);
}

uint64_t OpaqueAudioSampleRateConverter::STLIKernel::GetExpectedNumberOfOutputFrames(ShortTermLinearInterpolationResampler ***this, uint64_t a2, unsigned int *a3)
{
  *a3 = a2;
  return ShortTermLinearInterpolationResampler::GetNumberOfOutputFrames(*this[1], a2);
}

uint64_t OpaqueAudioSampleRateConverter::STLIKernel::Process(OpaqueAudioSampleRateConverter::STLIKernel *this, const float *const *a2, int a3, unsigned int *a4, float *const *a5, int a6, unsigned int *a7)
{
  ShortTermLinearInterpolationResampler **v7;
  uint64_t v10;
  _BOOL4 v12;
  uint64_t v13;
  const float *v14;
  float *v15;
  const float *v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  ShortTermLinearInterpolationResampler *v21;
  unint64_t NumberOfSourceFrames;
  uint64_t v23;
  unsigned int v24;
  unsigned int NumberOfOutputFrames;
  size_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  float v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  float v42;
  unint64_t v43;
  _DWORD *exception;
  int v46;
  _BOOL4 v47;
  ShortTermLinearInterpolationResampler *v48;
  ShortTermLinearInterpolationResampler *v49;
  const float *const *v50;
  float *const *v51;
  ShortTermLinearInterpolationResampler **v52;

  v7 = (ShortTermLinearInterpolationResampler **)*((_QWORD *)this + 1);
  v52 = (ShortTermLinearInterpolationResampler **)*((_QWORD *)this + 2);
  if (v7 != v52)
  {
    v10 = 0;
    v12 = a3 == 1 && a6 == 1;
    v47 = v12;
    v50 = a2;
    v51 = a5;
    while (1)
    {
      v13 = v10 | 1;
      if ((v10 | 1uLL) >= *((unsigned int *)this + 12))
      {
        v14 = 0;
        v15 = 0;
      }
      else
      {
        v14 = a2[v13];
        v15 = a5[v13];
      }
      v16 = a2[v10];
      v17 = a5[v10];
      v18 = *a4;
      v19 = *a7;
      if (v16 && v17 != 0)
      {
        v21 = *v7;
        if (!v14 || v15)
          break;
      }
      a2 = v50;
      a5 = v51;
LABEL_56:
      v10 += 2;
      if (++v7 == v52)
        goto LABEL_59;
    }
    if (*(_BYTE *)v21)
    {
      LODWORD(v18) = *a7;
    }
    else
    {
      v48 = *v7;
      NumberOfSourceFrames = ShortTermLinearInterpolationResampler::GetNumberOfSourceFrames(v21, v19);
      if (NumberOfSourceFrames <= v18)
      {
        LODWORD(v18) = NumberOfSourceFrames;
        NumberOfOutputFrames = ShortTermLinearInterpolationResampler::GetNumberOfOutputFrames(v48, NumberOfSourceFrames);
        if (NumberOfOutputFrames < v19)
          LODWORD(v19) = NumberOfOutputFrames;
      }
      else
      {
        v23 = ShortTermLinearInterpolationResampler::GetNumberOfOutputFrames(v48, v18);
        if (v23 > v19)
        {
          exception = __cxa_allocate_exception(4uLL);
          *exception = 1835103336;
          __cxa_throw(exception, MEMORY[0x1E0DE4EF8], 0);
        }
        LODWORD(v19) = v23;
        v24 = ShortTermLinearInterpolationResampler::GetNumberOfSourceFrames(v48, v23);
        if (v24 < v18)
          LODWORD(v18) = v24;
      }
      if ((_DWORD)v19 != (_DWORD)v18)
      {
        v30 = (uint64_t)((double)(v18 - 1) * 4294967300.0 / (double)(v19 - 1));
        if (v14)
        {
          if ((_DWORD)v19)
          {
            v31 = 0;
            v32 = 0;
            v33 = v19;
            do
            {
              v34 = (float)v32 * 2.3283e-10;
              v35 = HIDWORD(v32) * a3 + a3;
              v17[v31] = v16[HIDWORD(v32) * a3] + (float)(v34 * (float)(v16[v35] - v16[HIDWORD(v32) * a3]));
              v15[v31] = v14[HIDWORD(v32) * a3] + (float)(v34 * (float)(v14[v35] - v14[HIDWORD(v32) * a3]));
              v32 += v30;
              v31 += a6;
              --v33;
            }
            while (v33);
          }
        }
        else if ((_DWORD)v19)
        {
          v39 = 0;
          v40 = 0;
          v41 = v19;
          do
          {
            v42 = v16[HIDWORD(v40) * a3];
            v17[v39] = v42
                     + (float)((float)((float)v40 * 2.3283e-10)
                             * (float)(v16[HIDWORD(v40) * a3 + a3] - v42));
            v40 += v30;
            v39 += a6;
            --v41;
          }
          while (v41);
        }
        a2 = v50;
        a5 = v51;
        v21 = v48;
        goto LABEL_52;
      }
      v21 = v48;
    }
    if (v47)
    {
      v49 = v21;
      v46 = v18;
      v26 = (4 * v18);
      memcpy(v17, v16, v26);
      if (v14)
        memcpy(v15, v14, v26);
      a2 = v50;
      a5 = v51;
      v21 = v49;
      LODWORD(v18) = v46;
    }
    else
    {
      if (v14)
      {
        if ((_DWORD)v18)
        {
          v27 = 0;
          v28 = 0;
          v29 = v18;
          do
          {
            v17[v28] = v16[v27];
            v15[v28] = v14[v27];
            v27 += a3;
            v28 += a6;
            --v29;
          }
          while (v29);
        }
      }
      else if ((_DWORD)v18)
      {
        v36 = 0;
        v37 = 0;
        v38 = v18;
        do
        {
          v17[v37] = v16[v36];
          v36 += a3;
          v37 += a6;
          --v38;
        }
        while (v38);
      }
      a2 = v50;
      a5 = v51;
    }
LABEL_52:
    if (*(_BYTE *)v21)
      v43 = 0;
    else
      v43 = *((_QWORD *)v21 + 2)
          + *((_QWORD *)v21 + 3) * v19
          + ((unint64_t)-(int)v18 << 32);
    *((_QWORD *)v21 + 2) = v43;
    goto LABEL_56;
  }
  LODWORD(v18) = *a4;
  LODWORD(v19) = *a7;
LABEL_59:
  *a4 = v18;
  *a7 = v19;
  return 0;
}

void sub_18F0350E0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F035094);
}

uint64_t OpaqueAudioSampleRateConverter::STLIKernel::Reset(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 8);
  v2 = *(uint64_t **)(this + 16);
  while (v1 != v2)
  {
    v3 = *v1++;
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v3 + 8);
  }
  return this;
}

void OpaqueAudioSampleRateConverter::RamstadKernel::~RamstadKernel(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  MEMORY[0x193FFD758]((char *)this + 8);
}

{
  MEMORY[0x193FFD758]((char *)this + 8);
  JUMPOUT(0x193FFE460);
}

double OpaqueAudioSampleRateConverter::RamstadKernel::GetInputSampleRate(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return *((double *)this + 35);
}

double OpaqueAudioSampleRateConverter::RamstadKernel::GetOutputSampleRate(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return *((double *)this + 36);
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::GetNumberOfChannels(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::GetLatency(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return RamstadSRC::latencySeconds((OpaqueAudioSampleRateConverter::RamstadKernel *)((char *)this + 8));
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::GetKernelSize(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return 0;
}

double OpaqueAudioSampleRateConverter::RamstadKernel::GetVariableRate(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return *((double *)this + 37);
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::SetVariableRate(OpaqueAudioSampleRateConverter::RamstadKernel *this, double a2)
{
  uint64_t result;

  result = RamstadSRC::setRate((OpaqueAudioSampleRateConverter::RamstadKernel *)((char *)this + 8), a2);
  *((double *)this + 37) = a2;
  return result;
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::GetRequiredNumberOfInputFrames(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return RamstadSRC::inputSamplesForOutputSamples((OpaqueAudioSampleRateConverter::RamstadKernel *)((char *)this + 8));
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::GetExpectedNumberOfOutputFrames(OpaqueAudioSampleRateConverter::RamstadKernel *this, uint64_t a2, unsigned int *a3)
{
  uint64_t result;
  int v5;

  v5 = a2;
  result = RamstadSRC::outputSamplesForInputSamples((OpaqueAudioSampleRateConverter::RamstadKernel *)((char *)this + 8), a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::Process(OpaqueAudioSampleRateConverter::RamstadKernel *this, const float **a2, int a3, unsigned int *a4, float **a5, int a6, unsigned int *a7)
{
  RamstadSRC *v8;
  int v9;

  v8 = (OpaqueAudioSampleRateConverter::RamstadKernel *)((char *)this + 8);
  v9 = *((_DWORD *)this + 14);
  if (v9 == 2)
  {
    RamstadSRC::processStereo(v8, *a2, a2[1], *a5, a5[1], *a4, *a7, a3, a6);
  }
  else if (v9 == 1)
  {
    RamstadSRC::processMono(v8, *a2, *a5);
  }
  else
  {
    RamstadSRC::processMulti(v8, a2, a5);
  }
  return 0;
}

void sub_18F035310(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F035300);
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::Reset(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return RamstadSRC::reset((OpaqueAudioSampleRateConverter::RamstadKernel *)((char *)this + 8));
}

double OpaqueAudioSampleRateConverter::Resampler2Kernel::GetInputSampleRate(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  return *((double *)this + 4);
}

double OpaqueAudioSampleRateConverter::Resampler2Kernel::GetOutputSampleRate(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  return *((double *)this + 5);
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::GetNumberOfChannels(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::GetLatency(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  double i;
  uint64_t v4;
  double v5;
  double v6;

  v1 = *(uint64_t **)(this + 8);
  v2 = *(uint64_t **)(this + 16);
  for (i = 0.0; v1 != v2; ++v1)
  {
    v4 = *v1;
    v5 = 0.0;
    if ((*(_DWORD *)(*v1 + 120) | 2) == 2)
    {
      v6 = 0.5;
      if (*(_DWORD *)(v4 + 116) != 1818848869)
        v6 = *(double *)(v4 + 168) + (double)*(int *)(*(_QWORD *)(v4 + 56) + 20);
      v5 = v6 / *(double *)(v4 + 96);
    }
    if (v5 >= i)
      i = v5;
  }
  return this;
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::GetKernelSize(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0x100000000;
  LODWORD(v3) = 0;
  do
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 152))(*v1);
    if (v4 <= v3)
      v3 = v3;
    else
      v3 = v4;
    ++v1;
  }
  while (v1 != v2);
  return v3 | 0x100000000;
}

double OpaqueAudioSampleRateConverter::Resampler2Kernel::GetVariableRate(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  return *((double *)this + 7);
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::SetVariableRate(uint64_t this, double a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = this;
  v4 = *(_QWORD **)(this + 8);
  v5 = *(_QWORD **)(this + 16);
  while (v4 != v5)
  {
    this = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*v4 + 56))(*v4, a2);
    ++v4;
  }
  *(double *)(v3 + 56) = a2;
  return this;
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::GetRequiredNumberOfInputFrames(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 1) + 136))(**((_QWORD **)this + 1));
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::GetExpectedNumberOfOutputFrames(OpaqueAudioSampleRateConverter::Resampler2Kernel *this, unsigned int a2, unsigned int *a3)
{
  *a3 = a2;
  return (*(uint64_t (**)(_QWORD))(***((_QWORD ***)this + 1) + 144))(**((_QWORD **)this + 1));
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::Process(OpaqueAudioSampleRateConverter::Resampler2Kernel *this, const float *const *a2, uint64_t a3, unsigned int *a4, float *const *a5, unsigned int a6, unsigned int *a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v16;
  const float *v17;
  float *v18;

  v7 = (_QWORD *)*((_QWORD *)this + 1);
  v8 = (_QWORD *)*((_QWORD *)this + 2);
  if (v7 != v8)
  {
    v16 = 0;
    do
    {
      if (v16 + 1 >= (unint64_t)*((unsigned int *)this + 12))
      {
        v17 = 0;
        v18 = 0;
      }
      else
      {
        v17 = a2[v16 + 1];
        v18 = a5[v16 + 1];
      }
      (*(void (**)(_QWORD, const float *const, const float *, float *const, float *, unsigned int *, unsigned int *, uint64_t, _QWORD))(*(_QWORD *)*v7 + 32))(*v7, a2[v16], v17, a5[v16], v18, a4, a7, a3, a6);
      v16 += 2;
      ++v7;
    }
    while (v7 != v8);
  }
  return 0;
}

void sub_18F035608(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F0355E4);
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::Reset(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(this + 8);
  v2 = *(_QWORD **)(this + 16);
  while (v1 != v2)
  {
    this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 88))(*v1);
    ++v1;
  }
  return this;
}

const void *applesauce::CF::details::at_key<applesauce::CF::StringRef const&>(const __CFDictionary *a1, const void *a2)
{
  if (a2)
    return CFDictionaryGetValue(a1, a2);
  else
    return 0;
}

uint64_t AudioSampleRateConverterDispose(uint64_t result)
{
  if (result)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,OpaqueAudioSampleRateConverter::Resampler2Kernel,OpaqueAudioSampleRateConverter::RamstadKernel,OpaqueAudioSampleRateConverter::STLIKernel>,(std::__variant_detail::_Trait)1>::~__dtor(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

uint64_t AudioSampleRateConverterGetInputSampleRate(uint64_t a1)
{
  uint64_t result;

  if (a1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 16))(*(_QWORD *)(a1 + 312));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t AudioSampleRateConverterGetOutputSampleRate(uint64_t a1)
{
  uint64_t result;

  if (a1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 24))(*(_QWORD *)(a1 + 312));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t AudioSampleRateConverterGetNumberOfChannels(uint64_t a1)
{
  uint64_t result;

  if (a1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 32))(*(_QWORD *)(a1 + 312));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t AudioSampleRateConverterGetLatency(uint64_t a1)
{
  uint64_t result;

  if (a1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 40))(*(_QWORD *)(a1 + 312));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t AudioSampleRateConverterGetKernelSize(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 48))(*(_QWORD *)(a1 + 312));
    v4 = v3 & 0xFF00000000;
    if (a2)
    {
      if (v4)
        *a2 = v3;
    }
    return v4 != 0;
  }
  else
  {
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t AudioSampleRateConverterGetVariableRate(uint64_t a1)
{
  uint64_t result;

  if (a1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 56))(*(_QWORD *)(a1 + 312));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t AudioSampleRateConverterSetVariableRate(uint64_t a1)
{
  uint64_t result;

  if (a1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 64))(*(_QWORD *)(a1 + 312));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t AudioSampleRateConverterGetRequiredNumberOfInputFrames(uint64_t a1)
{
  uint64_t result;

  if (a1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 72))(*(_QWORD *)(a1 + 312));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t AudioSampleRateConverterGetExpectedNumberOfOutputFrames(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  int v5;

  if (a1)
  {
    v5 = a2;
    result = (*(uint64_t (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 312) + 80))(*(_QWORD *)(a1 + 312), a2, &v5);
    if (a3)
      *a3 = v5;
  }
  else
  {
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t AudioSampleRateConverterProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1 && a2 && a4 && a5 && a7)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 88))(*(_QWORD *)(a1 + 312));
  else
    return 4294967246;
}

uint64_t AudioSampleRateConverterProcessAudioBufferLists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  result = 4294967246;
  if (a1 && a2 && a3 && a4 && a5)
  {
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 32))(*(_QWORD *)(a1 + 312));
    v12 = v11;
    MEMORY[0x1E0C80A78](v11);
    v15 = (char *)v34 - v14;
    if (v13 >= 0x200)
      v16 = 512;
    else
      v16 = v13;
    bzero((char *)v34 - v14, v16);
    if (*(_DWORD *)a2 == (_DWORD)v11)
    {
      v34[0] = a5;
      if ((_DWORD)v11)
      {
        v17 = (uint64_t *)(a2 + 16);
        v18 = v15;
        v19 = v11;
        do
        {
          v20 = *v17;
          v17 += 2;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v19;
        }
        while (v19);
      }
      v21 = 1;
LABEL_21:
      MEMORY[0x1E0C80A78](result);
      v26 = (char *)v34 - ((v25 + 15) & 0xFFFFFFFF0);
      bzero(v26, v16);
      if (*(_DWORD *)a4 == (_DWORD)v11)
      {
        if ((_DWORD)v11)
        {
          v27 = (uint64_t *)(a4 + 16);
          v28 = v26;
          v29 = v21;
          do
          {
            v30 = *v27;
            v27 += 2;
            *(_QWORD *)v28 = v30;
            v28 += 8;
            --v12;
          }
          while (v12);
          v11 = 1;
          return (*(uint64_t (**)(_QWORD, char *, uint64_t, uint64_t, char *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 312) + 88))(*(_QWORD *)(a1 + 312), v15, v29, a3, v26, v11, v34[0]);
        }
        v11 = 1;
      }
      else
      {
        if (*(_DWORD *)a4 != 1 || *(_DWORD *)(a4 + 8) != (_DWORD)v11)
          return 4294967246;
        if ((_DWORD)v11)
        {
          v32 = *(_QWORD *)(a4 + 16);
          v33 = v26;
          v29 = v21;
          do
          {
            *(_QWORD *)v33 = v32;
            v33 += 8;
            v32 += 4;
            --v12;
          }
          while (v12);
          return (*(uint64_t (**)(_QWORD, char *, uint64_t, uint64_t, char *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 312) + 88))(*(_QWORD *)(a1 + 312), v15, v29, a3, v26, v11, v34[0]);
        }
      }
      v29 = v21;
      return (*(uint64_t (**)(_QWORD, char *, uint64_t, uint64_t, char *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 312)
                                                                                                  + 88))(*(_QWORD *)(a1 + 312), v15, v29, a3, v26, v11, v34[0]);
    }
    result = 4294967246;
    if (*(_DWORD *)a2 == 1 && *(_DWORD *)(a2 + 8) == (_DWORD)v11)
    {
      v34[0] = a5;
      if ((_DWORD)v11)
      {
        v22 = *(_QWORD *)(a2 + 16);
        v23 = v15;
        v24 = v11;
        do
        {
          *(_QWORD *)v23 = v22;
          v23 += 8;
          v22 += 4;
          --v24;
        }
        while (v24);
        v21 = v11;
      }
      else
      {
        v21 = 0;
      }
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t AudioSampleRateConverterReset(uint64_t a1)
{
  uint64_t result;

  if (a1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 96))(*(_QWORD *)(a1 + 312));
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t DSPGraph::RingBufferBox::hasPresetData(DSPGraph::RingBufferBox *this)
{
  return 0;
}

uint64_t DSPGraph::RingBufferBox::interleaved(DSPGraph::RingBufferBox *this)
{
  return 0;
}

uint64_t DSPGraph::RingBufferBox::configureRingBuffer(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 772) = a2;
  *(_DWORD *)(this + 776) = a3;
  return this;
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_8173()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

const char *DSPGraph::FCBox::ClassName(DSPGraph::FCBox *this)
{
  return "FCBox";
}

uint64_t DSPGraph::FCBox::canProcessInPlace(DSPGraph::FCBox *this)
{
  return (*(uint64_t (**)(DSPGraph::FCBox *))(*(_QWORD *)this + 712))(this);
}

DSPGraph::FCBox *DSPGraph::FCBox::asOperativeFCBox(DSPGraph::FCBox *this)
{
  if ((*(unsigned int (**)(DSPGraph::FCBox *))(*(_QWORD *)this + 712))(this))
    return 0;
  else
    return this;
}

uint64_t DSPGraph::FCBox::hasPresetData(DSPGraph::FCBox *this)
{
  return 0;
}

_QWORD *DSPGraph::FCBox::isogroup(DSPGraph::Box *a1, uint64_t a2, float *a3)
{
  _QWORD *result;

  if ((*(unsigned int (**)(DSPGraph::Box *))(*(_QWORD *)a1 + 712))(a1))
    return DSPGraph::Box::isogroup(a1, a2, (DSPGraph::IsoGroup *)a3);
  result = std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::find<DSPGraph::Box *>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), (unint64_t)a1);
  if (!result)
  {
    std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box *>(a2, (unint64_t)a1, (uint64_t)a1);
    DSPGraph::IsoGroup::add((DSPGraph::IsoGroup *)a3, a1);
    std::__hash_table<DSPGraph::FCBox *,std::hash<DSPGraph::FCBox *>,std::equal_to<DSPGraph::FCBox *>,std::allocator<DSPGraph::FCBox *>>::__emplace_unique_key_args<DSPGraph::FCBox *,DSPGraph::FCBox * const&>(a3 + 34, (unint64_t)a1, (uint64_t)a1);
    *((_QWORD *)a1 + 106) = a3;
    return (_QWORD *)(*(uint64_t (**)(DSPGraph::Box *, uint64_t, float *))(*(_QWORD *)a1 + 424))(a1, a2, a3);
  }
  return result;
}

uint64_t DSPGraph::FCBox::doProcess(uint64_t this, uint64_t a2)
{
  DSPGraph::Box *v3;
  unsigned int *v4;
  unsigned int v5;
  DSPGraph::ParameterTap *v6;
  DSPGraph::ParameterTap *v7;
  DSPGraph::PropertyTap *v8;
  DSPGraph::PropertyTap *v9;
  caulk::concurrent::details::lf_read_sync_write_impl *v10;
  _BYTE **v11;
  _BYTE **v12;
  DSPGraph::FileInjector **v13;
  DSPGraph::FileInjector **v14;
  caulk::concurrent::details::lf_read_sync_write_impl *v15;
  unsigned int v16;
  DSPGraph::Box *v17;
  int v18;

  if (*(_BYTE *)(this + 744))
  {
    v3 = (DSPGraph::Box *)this;
    v4 = (unsigned int *)(this + 768);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 | 0x80000000, v4));
    if (v5)
    {
      v6 = *(DSPGraph::ParameterTap **)(this + 152);
      v7 = *(DSPGraph::ParameterTap **)(this + 160);
      while (v6 != v7)
      {
        DSPGraph::ParameterTap::process(v6, v3);
        v6 = (DSPGraph::ParameterTap *)((char *)v6 + 40);
      }
      v8 = (DSPGraph::PropertyTap *)*((_QWORD *)v3 + 22);
      v9 = (DSPGraph::PropertyTap *)*((_QWORD *)v3 + 23);
      while (v8 != v9)
      {
        DSPGraph::PropertyTap::process(v8, v3);
        v8 = (DSPGraph::PropertyTap *)((char *)v8 + 64);
      }
      v10 = (caulk::concurrent::details::lf_read_sync_write_impl *)*((_QWORD *)v3 + 92);
      v17 = v3;
      v18 = a2;
      _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_3BoxEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(v10, (uint64_t *)&v17);
      (*(void (**)(DSPGraph::Box *, uint64_t))(*(_QWORD *)v3 + 472))(v3, a2);
      if ((*(unsigned int (**)(DSPGraph::Box *))(*(_QWORD *)v3 + 712))(v3))
      {
        v11 = (_BYTE **)*((_QWORD *)v3 + 25);
        v12 = (_BYTE **)*((_QWORD *)v3 + 26);
        while (v11 != v12)
          DSPGraph::FileRecorder::record(*v11++, a2);
      }
      v13 = (DSPGraph::FileInjector **)*((_QWORD *)v3 + 28);
      v14 = (DSPGraph::FileInjector **)*((_QWORD *)v3 + 29);
      while (v13 != v14)
        DSPGraph::FileInjector::inject(*v13++, a2);
      v15 = (caulk::concurrent::details::lf_read_sync_write_impl *)(*((_QWORD *)v3 + 92) + 64);
      v17 = v3;
      v18 = a2;
      this = _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_3BoxEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(v15, (uint64_t *)&v17);
    }
    else
    {
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 472))(this, a2);
    }
    do
      v16 = __ldaxr(v4);
    while (__stlxr(v16 & 0x7FFFFFFF, v4));
  }
  return this;
}

void sub_18F035E60(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 & 0x7FFFFFFF, v1));
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::FCBox::numChannels(DSPGraph::FCBox *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "out");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1434, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 28);
}

void sub_18F035F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::bytesPerPacket(DSPGraph::FCBox *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "out");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1434, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 16);
}

void sub_18F036040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

_BYTE *DSPGraph::FCBox::copyOutput(DSPGraph::FCBox *this, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *result;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  _BYTE **v19;
  _BYTE **v20;
  _BYTE *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = (char *)this + 88;
  v3 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v28, "out");
    v22 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v22 = (_QWORD *)*v22;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v27, v22, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v29, 1418, &v28, &v27);
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v28, "out");
    v23 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v23 = (_QWORD *)*v23;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v27, v23, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v29, 1418, &v28, &v27);
  }
  v8 = *(_DWORD *)(*(_QWORD *)(v6 + 120) + 20);
  *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) + 56) + 72) = 0;
  v9 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v28, "out");
    v24 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v24 = (_QWORD *)*v24;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v27, v24, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v29, 1418, &v28, &v27);
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  DSPGraph::Buffer::setByteSize(*(DSPGraph::Buffer **)(v10 + 56), *(_DWORD *)(*(_QWORD *)(v10 + 56) + 100));
  v11 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v28, "out");
    v25 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v25 = (_QWORD *)*v25;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v27, v25, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v29, 1418, &v28, &v27);
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  DSPGraph::RingBuffer::read((DSPGraph::FCBox *)((char *)this + 808), a2 / v8, a2 / v8, (DSPGraph::SimpleABL *)(*(_QWORD *)(v12 + 56) + 80));
  v13 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v28, "out");
    v26 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v26 = (_QWORD *)*v26;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v27, v26, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v29, 1418, &v28, &v27);
  }
  result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  v15 = *((_QWORD *)result + 7);
  *(_DWORD *)(v15 + 64) = 1;
  v16 = *(double *)(*((_QWORD *)this + 107) + 256);
  *(double *)(v15 + 8) = v16;
  if (*((_BYTE *)this + 864))
  {
    *(_DWORD *)(v15 + 64) = 3;
    v17 = v16 / (double)DSPGraph::FCBox::downstreamSampleRate(this);
    v18 = *((double *)this + 110);
    result = (_BYTE *)DSPGraph::FCBox::upstreamSampleRate(this);
    *(_QWORD *)(v15 + 16) = *((_QWORD *)this + 109) + llround((v17 - v18 / (double)result) * 24000000.0);
  }
  v20 = (_BYTE **)*((_QWORD *)this + 25);
  v19 = (_BYTE **)*((_QWORD *)this + 26);
  while (v20 != v19)
  {
    v21 = *v20++;
    result = DSPGraph::FileRecorder::record(v21, a2);
  }
  return result;
}

void sub_18F03644C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::isNoOp(DSPGraph::FCBox *this)
{
  int v2;
  int v3;
  _BOOL4 IsCBR;

  v2 = DSPGraph::FCBox::upstreamSampleRate(this);
  if (v2 != DSPGraph::FCBox::downstreamSampleRate(this))
    return 0;
  v3 = DSPGraph::FCBox::upstreamBlockSize(this);
  if (v3 != DSPGraph::FCBox::downstreamBlockSize(this))
    return 0;
  IsCBR = DSPGraph::FCBox::upstreamIsCBR(this);
  return IsCBR ^ DSPGraph::FCBox::downstreamIsCBR(this) ^ 1u;
}

uint64_t DSPGraph::FCBox::upstreamSampleRate(DSPGraph::FCBox *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 64;
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "in");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1426, &v7, &v6);
  }
  return **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
}

void sub_18F0365F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::downstreamSampleRate(DSPGraph::FCBox *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "out");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1434, &v7, &v6);
  }
  return **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
}

void sub_18F036700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::upstreamBlockSize(DSPGraph::FCBox *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 64;
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "in");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1426, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 40);
}

void sub_18F036804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::downstreamBlockSize(DSPGraph::FCBox *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "out");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1434, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 40);
}

void sub_18F036908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::FCBox::upstreamIsCBR(DSPGraph::FCBox *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v3 = (char *)this + 64;
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v10, "in");
    v8 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v8 = (_QWORD *)*v8;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v9, v8, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v11, 1426, &v10, &v9);
  }
  v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
  v5 = *(_DWORD *)(v4 + 8);
  return v5 != 1718773105 && v5 != 1819304813 && *(_DWORD *)(v4 + 16) != 0;
}

void sub_18F036A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::FCBox::downstreamIsCBR(DSPGraph::FCBox *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v10, "out");
    v8 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v8 = (_QWORD *)*v8;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v9, v8, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v11, 1434, &v10, &v9);
  }
  v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120);
  v5 = *(_DWORD *)(v4 + 8);
  return v5 != 1718773105 && v5 != 1819304813 && *(_DWORD *)(v4 + 16) != 0;
}

void sub_18F036B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::downstreamFramesPerPacket(DSPGraph::FCBox *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "out");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1434, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 20);
}

void sub_18F036C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_3BoxEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(caulk::concurrent::details::lf_read_sync_write_impl *a1, uint64_t *a2)
{
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  result = caulk::concurrent::details::lf_read_sync_write_impl::begin_access(a1);
  if (*((_BYTE *)a1 + result + 8))
  {
    v5 = (char *)a1 + 24 * result;
    v6 = *((_QWORD *)v5 + 2);
    v7 = *((_QWORD *)v5 + 3);
    if (v6 == v7)
      return caulk::concurrent::details::lf_read_sync_write_impl::end_access(a1);
    do
    {
      v8 = *((_DWORD *)a2 + 2);
      v11 = *a2;
      v10 = v8;
      v9 = *(_QWORD *)(v6 + 32);
      if (!v9)
        std::__throw_bad_function_call[abi:ne180100]();
      result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v9 + 48))(v9, &v11, &v10);
      v6 += 48;
    }
    while (v6 != v7);
    if (a1)
      return caulk::concurrent::details::lf_read_sync_write_impl::end_access(a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void DSPGraph::SRCBox::~SRCBox(DSPGraph::SRCBox *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2911F88;
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 912));
  v2 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_1E290CA98;
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 808));
  DSPGraph::Box::~Box(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2911F88;
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 912));
  v2 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_1E290CA98;
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 808));
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::SRCBox::ClassName(DSPGraph::SRCBox *this)
{
  return "src";
}

unint64_t DSPGraph::SRCBox::selfLatencyInTicks(DSPGraph::SRCBox *this)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (((*(uint64_t (**)(DSPGraph::SRCBox *))(*(_QWORD *)this + 712))(this) & 1) != 0)
    return 0;
  v3 = *((unsigned int *)this + 194);
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 696);
  v5 = v4 / (*(unsigned int (**)(DSPGraph::SRCBox *))(*(_QWORD *)this + 664))(this) * v3;
  v6 = *((_QWORD *)this + 111);
  if (v6)
    v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 48))(v6, *(_QWORD *)(*((_QWORD *)this + 1) + 696));
  return v6 + v5;
}

double DSPGraph::SRCBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.28569068e248;
  *(_OWORD *)a1 = xmmword_18F117290;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

DSPGraph::SRCBox *DSPGraph::SRCBox::asOperativeSRCBox(DSPGraph::SRCBox *this)
{
  if ((*(unsigned int (**)(DSPGraph::SRCBox *))(*(_QWORD *)this + 712))(this))
    return 0;
  else
    return this;
}

uint64_t DSPGraph::SRCBox::getPropertyInfo(DSPGraph::SRCBox *this, int a2, uint64_t a3)
{
  uint64_t result;

  result = 0x100000004;
  if (a2 <= 1835626095)
  {
    if (a2 != 26 && a2 != 3014)
      return DSPGraph::Box::getPropertyInfo(this, a2, a3);
  }
  else if (a2 != 1835626096 && a2 != 1936876385 && a2 != 1936876401)
  {
    return DSPGraph::Box::getPropertyInfo(this, a2, a3);
  }
  return result;
}

uint64_t DSPGraph::SRCBox::getProperty(DSPGraph::SRCBox *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  uint64_t v6;
  int v7;

  if (a2 > 1835626095)
  {
    if (a2 == 1835626096)
    {
      if (*a5 == 4)
      {
        v6 = 0;
        v7 = *((unsigned __int8 *)this + 904);
        goto LABEL_14;
      }
      return 561211770;
    }
    if (a2 != 1936876401)
    {
      if (a2 == 1936876385)
        goto LABEL_5;
      return DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
    }
LABEL_10:
    if (*a5 == 4)
    {
      v6 = 0;
      v7 = *((_DWORD *)this + 225);
      goto LABEL_14;
    }
    return 561211770;
  }
  if (a2 == 26)
    goto LABEL_10;
  if (a2 != 3014)
    return DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
LABEL_5:
  if (*a5 != 4)
    return 561211770;
  v6 = 0;
  v7 = *((_DWORD *)this + 224);
LABEL_14:
  *(_DWORD *)a6 = v7;
  return v6;
}

uint64_t DSPGraph::SRCBox::setProperty(DSPGraph::SRCBox *this, int a2, int a3, unsigned int a4, int a5, _DWORD *a6)
{
  uint64_t v6;

  if (a2 > 1835626095)
  {
    if (a2 == 1835626096)
    {
      if (a5 == 4)
      {
        v6 = 0;
        *((_BYTE *)this + 904) = *a6 != 0;
        return v6;
      }
      return 561211770;
    }
    if (a2 != 1936876401)
    {
      if (a2 == 1936876385)
        goto LABEL_5;
      return DSPGraph::Box::setProperty(this, a2, a3, a4, a5, a6);
    }
LABEL_10:
    if (a5 == 4)
    {
      v6 = 0;
      *((_DWORD *)this + 225) = *a6;
      return v6;
    }
    return 561211770;
  }
  if (a2 == 26)
    goto LABEL_10;
  if (a2 != 3014)
    return DSPGraph::Box::setProperty(this, a2, a3, a4, a5, a6);
LABEL_5:
  if (a5 != 4)
    return 561211770;
  v6 = 0;
  *((_DWORD *)this + 224) = *a6;
  return v6;
}

_QWORD *DSPGraph::SRCBox::process(DSPGraph::SRCBox *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  DSPGraph::Buffer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *result;
  _QWORD *v21;
  _OWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  if ((*(unsigned int (**)(DSPGraph::SRCBox *))(*(_QWORD *)this + 712))(this))
  {
    v4 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v36, "out");
      v31 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v31 = (_QWORD *)*v31;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v35, v31, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v37, 1418, &v36, &v35);
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v6 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v6)
    {
      std::string::basic_string[abi:ne180100]<0>(&v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v36, "in");
      v33 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v33 = (_QWORD *)*v33;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v35, v33, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v37, 1410, &v36, &v35);
    }
    v7 = *(DSPGraph::Buffer **)(v5 + 56);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    DSPGraph::Buffer::copyFrom(v7, *(DSPGraph::Buffer **)(v8 + 56));
  }
  else
  {
    v9 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v9)
    {
      std::string::basic_string[abi:ne180100]<0>(&v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v36, "in");
      v32 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v32 = (_QWORD *)*v32;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v35, v32, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v37, 1410, &v36, &v35);
    }
    v10 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 56);
    v11 = *(_DWORD *)(v10 + 64);
    *((_BYTE *)this + 864) = (v11 & 2) != 0;
    if ((v11 & 2) != 0)
    {
      *((_QWORD *)this + 109) = *(_QWORD *)(v10 + 16);
      *((_QWORD *)this + 110) = *(_QWORD *)(v10 + 8);
    }
    v12 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v12)
    {
      std::string::basic_string[abi:ne180100]<0>(&v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v36, "in");
      v34 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v34 = (_QWORD *)*v34;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v35, v34, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v37, 1410, &v36, &v35);
    }
    v13 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) + 56) + 80);
    v14 = *((_QWORD *)this + 114);
    LODWORD(v37) = *((_DWORD *)this + 232);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, __int128 *))(**((_QWORD **)this + 111) + 56))(*((_QWORD *)this + 111), v13, v14, a2, &v37);
    DSPGraph::RingBuffer::write((DSPGraph::SRCBox *)((char *)this + 808), v37, v37, (unsigned int **)this + 114);
  }
  v15 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v15)
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v36, "in");
    v29 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v29 = (_QWORD *)*v29;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v35, v29, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v37, 1410, &v36, &v35);
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  v17 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v17)
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v36, "in");
    v30 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v30 = (_QWORD *)*v30;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v35, v30, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v37, 1410, &v36, &v35);
  }
  v18 = *(_DWORD *)(*(_QWORD *)(v16 + 56) + 72);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  result = (_QWORD *)*((_QWORD *)this + 11);
  v21 = (_QWORD *)*((_QWORD *)this + 12);
  if (result != v21)
  {
    v22 = (_OWORD *)(*(_QWORD *)(v19 + 56) + 8);
    v23 = result;
    do
    {
      v24 = *v23;
      v23 += 4;
      v25 = *(_QWORD *)((*(uint64_t (**)(void))(v24 + 40))() + 56);
      v27 = v22[2];
      v26 = v22[3];
      v28 = v22[1];
      *(_OWORD *)(v25 + 8) = *v22;
      *(_OWORD *)(v25 + 24) = v28;
      *(_OWORD *)(v25 + 40) = v27;
      *(_OWORD *)(v25 + 56) = v26;
      *(_DWORD *)(v25 + 72) = v18;
      result = v23;
    }
    while (v23 != v21);
  }
  return result;
}

void sub_18F037594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

double DSPGraph::SRCBox::open(DSPGraph::SRCBox *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 1);
  result = *(double *)(v1 + 928);
  *((double *)this + 112) = result;
  *((_BYTE *)this + 904) = *(_BYTE *)(v1 + 936);
  return result;
}

void DSPGraph::SRCBox::initialize(DSPGraph::SRCBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  int64x2_t *v21;
  int v22;
  int i;
  Resampler2 *v24;
  unint64_t v25;
  Resampler2 **v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  Resampler2 **v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  Resampler2 *v37;
  int64x2_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  int v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int64x2_t v46;
  unint64_t v47;
  _QWORD *v48;

  if (((*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) & 0x1FFFFFFFE0) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v44, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v43, "SRCBox has no inputs");
    DSPGraph::ThrowException(1970168609, (__int128 *)&v45, 435, &v44, &v43);
  }
  DSPGraph::RingBufferBox::initialize(this);
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v44, "out");
    v40 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v40 = (_QWORD *)*v40;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v43, v40, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, (__int128 *)&v45, 1418, &v44, &v43);
  }
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v4 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v44, "in");
    v41 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v41 = (_QWORD *)*v41;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v43, v41, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, (__int128 *)&v45, 1410, &v44, &v43);
  }
  v5 = *(unsigned int *)(*(_QWORD *)(v3 + 120) + 28);
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) + 120) + 28) != (_DWORD)v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v44, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v43, "input and output channel counts don't match");
    DSPGraph::ThrowException(1667788321, (__int128 *)&v45, 442, &v44, &v43);
  }
  v6 = (double)DSPGraph::FCBox::upstreamSampleRate(this);
  v7 = (double)DSPGraph::FCBox::downstreamSampleRate(this);
  if (*((_BYTE *)this + 904))
  {
    v8 = operator new();
    *(_OWORD *)(v8 + 8) = 0u;
    v9 = *((unsigned int *)this + 225);
    *(_OWORD *)(v8 + 40) = 0u;
    *(_QWORD *)v8 = &off_1E290E7E0;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_QWORD *)(v8 + 56) = 0;
    *(_DWORD *)(v8 + 64) = v5;
    *(double *)(v8 + 72) = v7;
    v10 = operator new();
    MEMORY[0x193FFD740](v10, v5, v9, v6, v7);
    std::unique_ptr<RamstadSRC>::reset[abi:ne180100]((uint64_t *)(v8 + 8), v10);
    v11 = *(char **)(v8 + 16);
    v45 = 0;
    std::vector<float *>::insert((_QWORD *)(v8 + 16), v11, v5, (char *)&v45);
    v12 = *(char **)(v8 + 40);
    v45 = 0;
    std::vector<float *>::insert((_QWORD *)(v8 + 40), v12, v5, (char *)&v45);
    v13 = *((_QWORD *)this + 111);
    *((_QWORD *)this + 111) = v8;
    if (!v13)
      goto LABEL_8;
    goto LABEL_7;
  }
  v17 = operator new();
  v18 = (_QWORD *)v17;
  v19 = *((_DWORD *)this + 224);
  v20 = *((_DWORD *)this + 225);
  *(_QWORD *)(v17 + 8) = 0;
  v21 = (int64x2_t *)(v17 + 8);
  *(_QWORD *)v17 = &off_1E29108E0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  if ((_DWORD)v5 == 2)
    v22 = 1;
  else
    v22 = v5;
  v42 = v5;
  *(_DWORD *)(v17 + 32) = v5;
  if (v22)
  {
    for (i = 0; i != v22; ++i)
    {
      v24 = (Resampler2 *)operator new();
      Resampler2::Resampler2(v24, v6, v7, v19, v20, 2, 0.0, 0);
      v26 = (Resampler2 **)v18[2];
      v25 = v18[3];
      if ((unint64_t)v26 >= v25)
      {
        v28 = ((uint64_t)v26 - v21->i64[0]) >> 3;
        if ((unint64_t)(v28 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v29 = v25 - v21->i64[0];
        v30 = v29 >> 2;
        if (v29 >> 2 <= (unint64_t)(v28 + 1))
          v30 = v28 + 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        v48 = v18 + 3;
        if (v31)
          v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v31);
        else
          v32 = 0;
        v33 = (Resampler2 **)(v31 + 8 * v28);
        v34 = v31 + 8 * v32;
        v47 = v34;
        *v33 = v24;
        v27 = v33 + 1;
        v46.i64[1] = (uint64_t)(v33 + 1);
        v36 = (_QWORD *)v18[1];
        v35 = (_QWORD *)v18[2];
        if (v35 == v36)
        {
          v38 = vdupq_n_s64((unint64_t)v35);
        }
        else
        {
          do
          {
            v37 = (Resampler2 *)*--v35;
            *v35 = 0;
            *--v33 = v37;
          }
          while (v35 != v36);
          v38 = *v21;
          v27 = (_QWORD *)v46.i64[1];
          v34 = v47;
        }
        v18[1] = v33;
        v18[2] = v27;
        v46 = v38;
        v39 = v18[3];
        v18[3] = v34;
        v47 = v39;
        v45 = v38.i64[0];
        std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)&v45);
      }
      else
      {
        *v26 = v24;
        v27 = v26 + 1;
      }
      v18[2] = v27;
    }
  }
  v13 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = v18;
  LODWORD(v5) = v42;
  if (v13)
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_8:
  v14 = *((_QWORD *)this + 2);
  v15 = *(_DWORD *)(v14 + 268);
  if (v15 == 1)
    v15 = *(_DWORD *)(v14 + 272);
  v16 = vcvtpd_u64_f64(v7 * (double)v15 / v6);
  *((_DWORD *)this + 232) = v16;
  DSPGraph::SimpleABL::alloc((DSPGraph::SRCBox *)((char *)this + 912), v5, 4 * v16, 0);
}

void sub_18F037B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::SRCBox::uninitialize(DSPGraph::SRCBox *this)
{
  uint64_t result;

  DSPGraph::Box::uninitialize(this);
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 912));
  result = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t DSPGraph::SRCBox::reset(DSPGraph::SRCBox *this)
{
  int v2;
  uint64_t result;

  if ((*(unsigned int (**)(DSPGraph::SRCBox *))(*(_QWORD *)this + 696))(this))
    v2 = *((_DWORD *)this + 194);
  else
    v2 = 0;
  DSPGraph::RingBuffer::initialize((DSPGraph::SRCBox *)((char *)this + 808), v2);
  result = *((_QWORD *)this + 111);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

BOOL DSPGraph::SRCBox::shouldAddRingBufferZeros(DSPGraph::SRCBox *this)
{
  return *((_BYTE *)this + 904) == 0;
}

void DSPGraph::ResamplerSRCKernel::~ResamplerSRCKernel(DSPGraph::ResamplerSRCKernel *this)
{
  void **v1;

  *(_QWORD *)this = &off_1E29108E0;
  v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_1E29108E0;
  v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::ResamplerSRCKernel::ClassName(DSPGraph::ResamplerSRCKernel *this)
{
  return "ResamplerSRCKernel";
}

uint64_t DSPGraph::ResamplerSRCKernel::reset(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 8);
  v2 = *(uint64_t **)(this + 16);
  while (v1 != v2)
  {
    v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
  }
  return this;
}

uint64_t DSPGraph::ResamplerSRCKernel::selfLatencyInTicks(DSPGraph::ResamplerSRCKernel *this, unint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;

  v2 = **((_QWORD **)this + 1);
  if ((*(_DWORD *)(v2 + 120) | 2) == 2)
  {
    v3 = 0.5;
    if (*(_DWORD *)(v2 + 116) != 1818848869)
      v3 = *(double *)(v2 + 168) + (double)*(int *)(*(_QWORD *)(v2 + 56) + 20);
    v4 = v3 / *(double *)(v2 + 96);
  }
  else
  {
    v4 = 0.0;
  }
  v5 = llround(ceil(v4 * (double)a2));
  if (v5 <= 0)
    v6 = 0;
  else
    v6 = -1;
  if (v5 >= 0)
    return v5;
  else
    return v6;
}

uint64_t DSPGraph::ResamplerSRCKernel::process(uint64_t this, AudioBufferList *a2, AudioBufferList *a3, int a4, unsigned int *a5)
{
  uint64_t v6;
  UInt32 v7;
  void *mData;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void **p_mData;
  void **v15;
  void *v16;
  void *v17;
  int v18;

  v6 = this;
  v18 = a4;
  v7 = 4 * *a5;
  if (*(_DWORD *)(this + 32) == 2)
  {
    mData = a2->mBuffers[0].mData;
    v9 = *(_QWORD *)&a2[1].mBuffers[0].mNumberChannels;
    v10 = a3->mBuffers[0].mData;
    v11 = *(_QWORD *)&a3[1].mBuffers[0].mNumberChannels;
    a3->mBuffers[0].mDataByteSize = v7;
    *(&a3[1].mNumberBuffers + 1) = v7;
    return (*(uint64_t (**)(_QWORD, void *, uint64_t, void *, uint64_t, int *, unsigned int *, uint64_t, uint64_t))(***(_QWORD ***)(this + 8) + 32))(**(_QWORD **)(this + 8), mData, v9, v10, v11, &v18, a5, 1, 1);
  }
  else
  {
    v12 = *(_QWORD *)(this + 8);
    if (*(_QWORD *)(this + 16) != v12)
    {
      v13 = 0;
      p_mData = &a3->mBuffers[0].mData;
      v15 = &a2->mBuffers[0].mData;
      do
      {
        v16 = *v15;
        v15 += 2;
        v17 = *p_mData;
        *((_DWORD *)p_mData - 1) = v7;
        this = (*(uint64_t (**)(_QWORD, void *, _QWORD, void *, _QWORD, int *, unsigned int *, uint64_t, uint64_t))(**(_QWORD **)(v12 + 8 * v13) + 32))(*(_QWORD *)(v12 + 8 * v13), v16, 0, v17, 0, &v18, a5, 1, 1);
        ++v13;
        v12 = *(_QWORD *)(v6 + 8);
        p_mData += 2;
      }
      while (v13 < (*(_QWORD *)(v6 + 16) - v12) >> 3);
    }
  }
  return this;
}

uint64_t std::unique_ptr<RamstadSRC>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x193FFD758]();
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void DSPGraph::RamstadSRCKernel::~RamstadSRCKernel(DSPGraph::RamstadSRCKernel *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E290E7E0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
  std::unique_ptr<RamstadSRC>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E290E7E0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
  std::unique_ptr<RamstadSRC>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::RamstadSRCKernel::ClassName(DSPGraph::RamstadSRCKernel *this)
{
  return "RamstadSRCKernel";
}

uint64_t DSPGraph::RamstadSRCKernel::reset(RamstadSRC **this)
{
  return RamstadSRC::reset(this[1]);
}

uint64_t DSPGraph::RamstadSRCKernel::selfLatencyInTicks(DSPGraph::RamstadSRCKernel *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = llround(5.0 / *((double *)this + 9) * (double)a2);
  if (v2 <= 0)
    v3 = 0;
  else
    v3 = -1;
  if (v2 >= 0)
    return v2;
  else
    return v3;
}

uint64_t DSPGraph::RamstadSRCKernel::process(DSPGraph::RamstadSRCKernel *this, AudioBufferList *a2, AudioBufferList *a3, uint64_t a4, unsigned int *a5)
{
  int v6;
  int v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  UInt32 v16;
  const float *v17;
  const float *v18;
  float *v19;
  float *v20;
  const float *mData;
  float *v23;
  uint64_t v24;
  void **p_mData;
  void **v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;

  v6 = a4;
  v31 = 0;
  v10 = RamstadSRC::outputSamplesForInputSamples(*((RamstadSRC **)this + 1), a4, &v31);
  v11 = v10 <= 0;
  v12 = v10 & 0xFFFFFF00 | (v10 & ~(v10 >> 31));
  if (v11)
    v13 = 0;
  else
    v13 = -1;
  if (v11)
    v14 = v13;
  else
    v14 = v12;
  if (v14 > *a5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v29, "process");
    std::string::basic_string[abi:ne180100]<0>(&v28, "internal error. SRC output would be more than slice duration.");
    DSPGraph::ThrowException(1718775073, &v30, 386, &v29, &v28);
  }
  *a5 = v14;
  v15 = *((unsigned int *)this + 16);
  if ((_DWORD)v15)
  {
    v16 = 4 * v14;
    if ((_DWORD)v15 == 1)
    {
      mData = (const float *)a2->mBuffers[0].mData;
      v23 = (float *)a3->mBuffers[0].mData;
      a3->mBuffers[0].mDataByteSize = v16;
      return RamstadSRC::processMono(*((RamstadSRC **)this + 1), mData, v23);
    }
    if ((_DWORD)v15 == 2)
    {
      v17 = (const float *)a2->mBuffers[0].mData;
      v18 = *(const float **)&a2[1].mBuffers[0].mNumberChannels;
      v19 = (float *)a3->mBuffers[0].mData;
      v20 = *(float **)&a3[1].mBuffers[0].mNumberChannels;
      a3->mBuffers[0].mDataByteSize = v16;
      *(&a3[1].mNumberBuffers + 1) = v16;
      return RamstadSRC::processStereo(*((RamstadSRC **)this + 1), v17, v18, v19, v20, v6, *a5, 1, 1);
    }
    v24 = 0;
    p_mData = &a3->mBuffers[0].mData;
    v26 = &a2->mBuffers[0].mData;
    do
    {
      v27 = *v26;
      v26 += 2;
      *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v24) = v27;
      *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v24) = *p_mData;
      *((_DWORD *)p_mData - 1) = v16;
      ++v24;
      p_mData += 2;
    }
    while (v15 != v24);
  }
  return RamstadSRC::processMulti(*((RamstadSRC **)this + 1), *((const float *const **)this + 2), *((float *const **)this + 5));
}

void sub_18F03824C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void DSPGraph::ReblockerBox::~ReblockerBox(DSPGraph::ReblockerBox *this)
{
  DSPGraph::SimpleABL *v2;

  *(_QWORD *)this = off_1E290CA98;
  v2 = (DSPGraph::ReblockerBox *)((char *)this + 808);
  DSPGraph::SimpleABL::free((DSPGraph::ReblockerBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free(v2);
  DSPGraph::Box::~Box(this);
}

{
  DSPGraph::SimpleABL *v2;

  *(_QWORD *)this = off_1E290CA98;
  v2 = (DSPGraph::ReblockerBox *)((char *)this + 808);
  DSPGraph::SimpleABL::free((DSPGraph::ReblockerBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free(v2);
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::ReblockerBox::ClassName(DSPGraph::ReblockerBox *this)
{
  return "reblocker";
}

double DSPGraph::ReblockerBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.14073544e243;
  *(_OWORD *)a1 = xmmword_18F1172A0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

_QWORD *DSPGraph::ReblockerBox::process(DSPGraph::ReblockerBox *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  DSPGraph::Buffer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *result;
  _QWORD *v17;
  _OWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if ((*(unsigned int (**)(DSPGraph::ReblockerBox *))(*(_QWORD *)this + 712))(this))
  {
    v4 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v31, "out");
      v27 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v27 = (_QWORD *)*v27;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v30, v27, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v32, 1418, &v31, &v30);
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v6 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v6)
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v31, "in");
      v29 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v29 = (_QWORD *)*v29;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v30, v29, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v32, 1410, &v31, &v30);
    }
    v7 = *(DSPGraph::Buffer **)(v5 + 56);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    DSPGraph::Buffer::copyFrom(v7, *(DSPGraph::Buffer **)(v8 + 56));
  }
  else
  {
    v9 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v9)
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v31, "in");
      v28 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v28 = (_QWORD *)*v28;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v30, v28, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v32, 1410, &v31, &v30);
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    DSPGraph::RingBuffer::write((DSPGraph::ReblockerBox *)((char *)this + 808), a2, a2, (unsigned int **)(*(_QWORD *)(v10 + 56) + 80));
  }
  v11 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v31, "in");
    v25 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v25 = (_QWORD *)*v25;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v30, v25, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v32, 1410, &v31, &v30);
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  v13 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v31, "in");
    v26 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v26 = (_QWORD *)*v26;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v30, v26, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v32, 1410, &v31, &v30);
  }
  v14 = *(_DWORD *)(*(_QWORD *)(v12 + 56) + 72);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  result = (_QWORD *)*((_QWORD *)this + 11);
  v17 = (_QWORD *)*((_QWORD *)this + 12);
  if (result != v17)
  {
    v18 = (_OWORD *)(*(_QWORD *)(v15 + 56) + 8);
    v19 = result;
    do
    {
      v20 = *v19;
      v19 += 4;
      v21 = *(_QWORD *)((*(uint64_t (**)(void))(v20 + 40))() + 56);
      v23 = v18[2];
      v22 = v18[3];
      v24 = v18[1];
      *(_OWORD *)(v21 + 8) = *v18;
      *(_OWORD *)(v21 + 24) = v24;
      *(_OWORD *)(v21 + 40) = v23;
      *(_OWORD *)(v21 + 56) = v22;
      *(_DWORD *)(v21 + 72) = v14;
      result = v19;
    }
    while (v19 != v17);
  }
  return result;
}

void sub_18F0386DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ReblockerBox::initialize(DSPGraph::ReblockerBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (((*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) & 0x1FFFFFFFE0) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v9, "ReblockerBox has no inputs");
    DSPGraph::ThrowException(1970168609, &v11, 629, &v10, &v9);
  }
  DSPGraph::RingBufferBox::initialize(this);
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v10, "out");
    v7 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v7 = (_QWORD *)*v7;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v9, v7, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v11, 1418, &v10, &v9);
  }
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v4 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v10, "in");
    v8 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v8 = (_QWORD *)*v8;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v9, v8, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v11, 1410, &v10, &v9);
  }
  v5 = *(_DWORD *)(*(_QWORD *)(v3 + 120) + 28);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  if (*(_DWORD *)(*(_QWORD *)(result + 120) + 28) != v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v9, "input and output channel counts don't match");
    DSPGraph::ThrowException(1667788321, &v11, 637, &v10, &v9);
  }
  return result;
}

void sub_18F038964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::FreqSRCBox::~FreqSRCBox(DSPGraph::FreqSRCBox *this)
{
  *(_QWORD *)this = &off_1E290BAE0;
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 888));
  *(_QWORD *)this = off_1E290CA98;
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 808));
  DSPGraph::Box::~Box(this);
}

{
  *(_QWORD *)this = &off_1E290BAE0;
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 888));
  *(_QWORD *)this = off_1E290CA98;
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 808));
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::FreqSRCBox::ClassName(DSPGraph::FreqSRCBox *this)
{
  return "freqsrc";
}

double DSPGraph::FreqSRCBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 3.3052639e185;
  *(_OWORD *)a1 = xmmword_18F1172B0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

DSPGraph::FreqSRCBox *DSPGraph::FreqSRCBox::asOperativeFreqSRCBox(DSPGraph::FreqSRCBox *this)
{
  if ((*(unsigned int (**)(DSPGraph::FreqSRCBox *))(*(_QWORD *)this + 712))(this))
    return 0;
  else
    return this;
}

unsigned int **DSPGraph::FreqSRCBox::process(unsigned int **this)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  size_t v11;
  size_t v12;
  const void **v13;
  void **v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  int v27;
  uint64_t v28;
  unsigned int *v29;
  _OWORD *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  unsigned int v43;
  unsigned int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  if (!DSPGraph::FreqSRCBox::isValidFreqSRCBoxConnection((DSPGraph::FreqSRCBox *)this))
    __assert_rtn("process", "DSPGraph_SRCBox.cpp", 727, "isValidFreqSRCBoxConnection()");
  v2 = this[8];
  if (this[9] == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v46, "in");
    v39 = this + 4;
    if (*((char *)this + 55) < 0)
      v39 = (_QWORD *)*v39;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v45, v39, ((char *)this[9] - (char *)this[8]) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v47, 1410, &v46, &v45);
  }
  v3 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 40))(v2);
  v4 = this[11];
  if (this[12] == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v46, "out");
    v40 = this + 4;
    if (*((char *)this + 55) < 0)
      v40 = (_QWORD *)*v40;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v45, v40, ((char *)this[12] - (char *)this[11]) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v47, 1418, &v46, &v45);
  }
  v5 = *(unsigned int **)(*(_QWORD *)(v3 + 56) + 80);
  v6 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 40))(v4);
  v7 = *v5;
  if ((_DWORD)v7 != **(_DWORD **)(*(_QWORD *)(v6 + 56) + 80))
    __assert_rtn("process", "DSPGraph_SRCBox.cpp", 731, "inBuf->mNumberBuffers == outBuf->mNumberBuffers");
  v8 = DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this);
  v43 = DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this);
  v44 = v8;
  if (v8 <= v43)
  {
    v9 = DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this);
    v11 = 0;
    if (!(_DWORD)v7)
      goto LABEL_16;
    goto LABEL_9;
  }
  v9 = DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this);
  v10 = DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this);
  v11 = 4 * (v10 - DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this));
  if ((_DWORD)v7)
  {
LABEL_9:
    v12 = (4 * v9);
    v13 = (const void **)(v5 + 4);
    v14 = (void **)(this[111] + 4);
    while (1)
    {
      v15 = (char *)*v14;
      v16 = (char *)*v13;
      v17 = &v15[4 * DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this)];
      v18 = &v16[4 * DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this)];
      memcpy(v15, v16, v12);
      v19 = DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this);
      bzero(&v15[4 * v19], v11);
      memcpy(v17, v18, v12);
      v20 = DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this);
      bzero(&v17[4 * v20], v11);
      if (v44 > v43)
        break;
      v23 = DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this);
      if (v23 < DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this))
      {
        v22 = *(_DWORD *)&v16[4 * DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this)];
        goto LABEL_14;
      }
LABEL_15:
      v13 += 2;
      v14 += 2;
      if (!--v7)
        goto LABEL_16;
    }
    v21 = *(_DWORD *)v18;
    *(_DWORD *)&v15[4 * DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this)] = v21;
    v22 = 0;
LABEL_14:
    *(_DWORD *)v17 = v22;
    goto LABEL_15;
  }
LABEL_16:
  v24 = this[8];
  if (this[9] == v24)
  {
    std::string::basic_string[abi:ne180100]<0>(&v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v46, "in");
    v41 = this + 4;
    if (*((char *)this + 55) < 0)
      v41 = (_QWORD *)*v41;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v45, v41, ((char *)this[9] - (char *)this[8]) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v47, 1410, &v46, &v45);
  }
  v25 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v24 + 40))(v24);
  v26 = this[8];
  if (this[9] == v26)
  {
    std::string::basic_string[abi:ne180100]<0>(&v47, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v46, "in");
    v42 = this + 4;
    if (*((char *)this + 55) < 0)
      v42 = (_QWORD *)*v42;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v45, v42, ((char *)this[9] - (char *)this[8]) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v47, 1410, &v46, &v45);
  }
  v27 = *(_DWORD *)(*(_QWORD *)(v25 + 56) + 72);
  v28 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v26 + 40))(v26);
  v29 = this[12];
  if (this[11] != v29)
  {
    v30 = (_OWORD *)(*(_QWORD *)(v28 + 56) + 8);
    v31 = this[11];
    do
    {
      v32 = *(_QWORD *)v31;
      v31 += 8;
      v33 = *(_QWORD *)((*(uint64_t (**)(void))(v32 + 40))() + 56);
      v35 = v30[2];
      v34 = v30[3];
      v36 = v30[1];
      *(_OWORD *)(v33 + 8) = *v30;
      *(_OWORD *)(v33 + 24) = v36;
      *(_OWORD *)(v33 + 40) = v35;
      *(_OWORD *)(v33 + 56) = v34;
      *(_DWORD *)(v33 + 72) = v27;
    }
    while (v31 != v29);
  }
  v37 = DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this);
  return DSPGraph::RingBuffer::write((DSPGraph::RingBuffer *)(this + 101), v37, v37, this + 111);
}

void sub_18F038F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void DSPGraph::FreqSRCBox::initialize(DSPGraph::FreqSRCBox *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v20, "out");
    v11 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v11 = (_QWORD *)*v11;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v19, v11, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v21, 1418, &v20, &v19);
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v5 = *((_QWORD *)this + 8);
  v6 = *((_QWORD *)this + 9);
  if (((v6 - v5) & 0x1FFFFFFFE0) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v19, "FreqSRCBox has no inputs");
    DSPGraph::ThrowException(1970168609, &v21, 666, &v20, &v19);
  }
  if (v6 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v20, "in");
    v12 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v12 = (_QWORD *)*v12;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v19, v12, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v21, 1410, &v20, &v19);
  }
  v7 = *(_DWORD *)(*(_QWORD *)(v4 + 120) + 28);
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) + 120) + 28) != v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v19, "FreqSRCBox input and output channel counts don't match");
    DSPGraph::ThrowException(1667788321, &v21, 671, &v20, &v19);
  }
  if (!DSPGraph::FreqSRCBox::isValidFreqSRCBoxConnection(this))
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "initialize");
    v13 = DSPGraph::FCBox::upstreamBlockSize(this);
    v14 = DSPGraph::FCBox::upstreamSampleRate(this);
    v15 = DSPGraph::FCBox::downstreamBlockSize(this);
    v16 = DSPGraph::FCBox::downstreamSampleRate(this);
    DSPGraph::strprintf((DSPGraph *)"FreqSRCBox I/O sample rates and block sizes invalid  %u / %u <> %u / %u", &v19, v13, v14, v15, v16);
    DSPGraph::ThrowException(1718444833, &v21, 675, &v20, &v19);
  }
  if (((*(uint64_t (**)(DSPGraph::FreqSRCBox *))(*(_QWORD *)this + 440))(this) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v19, "FreqSRCBox box can not have ring buffer padding zeros");
    DSPGraph::ThrowException(1634628385, &v21, 680, &v20, &v19);
  }
  if (DSPGraph::FCBox::upstreamBytesPerPacket(this) != 8)
    goto LABEL_14;
  v8 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v8)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v20, "in");
    v17 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v17 = (_QWORD *)*v17;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v19, v17, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v21, 1410, &v20, &v19);
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) + 120) + 8) != 1718773105)
  {
LABEL_14:
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v19, "FreqSRCBox box needs 8 byte packets at input");
    DSPGraph::ThrowException(1718449215, &v21, 684, &v20, &v19);
  }
  if (DSPGraph::FCBox::downstreamBytesPerPacket(this) != 8)
    goto LABEL_15;
  v9 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v20, "out");
    v18 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v18 = (_QWORD *)*v18;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v19, v18, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v21, 1418, &v20, &v19);
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 120) + 8) != 1718773105)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v19, "FreqSRCBox box needs 8 byte packets at output");
    DSPGraph::ThrowException(1718449215, &v21, 689, &v20, &v19);
  }
  DSPGraph::RingBufferBox::initialize(this);
  v10 = DSPGraph::FCBox::downstreamBlockSize(this);
  DSPGraph::SimpleABL::alloc((DSPGraph::FreqSRCBox *)((char *)this + 888), v7, 8 * v10, 0);
}

void sub_18F039518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v25 - 33) < 0)
    operator delete(*(void **)(v25 - 56));
  _Unwind_Resume(exception_object);
}

void DSPGraph::FreqSRCBox::uninitialize(DSPGraph::FreqSRCBox *this)
{
  DSPGraph::Box::uninitialize(this);
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 888));
}

BOOL DSPGraph::FreqSRCBox::isValidFreqSRCBoxConnection(DSPGraph::FreqSRCBox *this)
{
  int v2;
  int v3;
  int v4;

  v2 = DSPGraph::FCBox::upstreamSampleRate(this);
  v3 = DSPGraph::FCBox::downstreamBlockSize(this) * v2;
  v4 = DSPGraph::FCBox::downstreamSampleRate(this);
  return v3 == DSPGraph::FCBox::upstreamBlockSize(this) * v4;
}

uint64_t DSPGraph::FCBox::upstreamBytesPerPacket(DSPGraph::FCBox *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 64;
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "in");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1426, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 16);
}

void sub_18F03970C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::downstreamBytesPerPacket(DSPGraph::FCBox *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "out");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1434, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 16);
}

void sub_18F039810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

double DSPGraph::RingBufferBox::dryRunInit(DSPGraph::RingBufferBox *this)
{
  double result;

  *((_QWORD *)this + 100) = 0;
  result = 0.0;
  *((_OWORD *)this + 49) = 0u;
  return result;
}

uint64_t DSPGraph::RingBufferBox::dryRunWrite(uint64_t this, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 784) + a2;
  *(_QWORD *)(this + 784) = v2;
  if (*(_QWORD *)(this + 800) > v2)
    v2 = *(_QWORD *)(this + 800);
  *(_QWORD *)(this + 800) = v2;
  return this;
}

uint64_t DSPGraph::RingBufferBox::dryRunRead(uint64_t this, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 784) - a2;
  *(_QWORD *)(this + 784) = v2;
  if (v2 >= *(_QWORD *)(this + 792))
    v2 = *(_QWORD *)(this + 792);
  *(_QWORD *)(this + 792) = v2;
  return this;
}

uint64_t DSPGraph::RingBufferBox::configureFromDryRun(DSPGraph::RingBufferBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  int v19;
  int v20;

  v2 = *((_QWORD *)this + 99);
  v3 = v2 * (*(unsigned int (**)(DSPGraph::RingBufferBox *))(*(_QWORD *)this + 664))(this);
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 696);
  v5 = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(_QWORD *)this + 672))(this);
  v6 = (v4 * v5 + ~v3) / (v4 * v5);
  if (v6 >= 0x100000000)
    v7 = 0;
  else
    v7 = (v4 * v5 + ~v3) / (v4 * v5);
  v8 = (uint64_t)v6 <= 0;
  v9 = HIDWORD(v6);
  v10 = v6 & 0xFFFFFF00 | v7;
  if (v8)
    v11 = 0;
  else
    v11 = -1;
  if (v9)
    v10 = v11;
  *((_DWORD *)this + 194) = v10;
  v12 = *((_QWORD *)this + 100) - *((_QWORD *)this + 99);
  v13 = (*(unsigned int (**)(DSPGraph::RingBufferBox *))(*(_QWORD *)this + 664))(this);
  v14 = *(_QWORD *)(*((_QWORD *)this + 1) + 696);
  result = (*(uint64_t (**)(DSPGraph::RingBufferBox *))(*(_QWORD *)this + 672))(this);
  v16 = (v14 * result + v12 * v13 - 1) / (v14 * result);
  if (v16 >= 0x100000000)
    v17 = 0;
  else
    v17 = (v14 * result + v12 * v13 - 1) / (v14 * result);
  v8 = (uint64_t)v16 <= 0;
  v18 = HIDWORD(v16);
  v19 = v16 & 0xFFFFFF00 | v17;
  if (v8)
    v20 = 0;
  else
    v20 = -1;
  if (v18)
    v19 = v20;
  *((_DWORD *)this + 193) = v19;
  return result;
}

double DSPGraph::FCBox::upstreamSampleTime(DSPGraph::FCBox *this)
{
  return *(double *)(*((_QWORD *)this + 106) + 256);
}

double DSPGraph::FCBox::downstreamSampleTime(DSPGraph::FCBox *this)
{
  return *(double *)(*((_QWORD *)this + 107) + 256);
}

uint64_t DSPGraph::FCBox::upstreamFramesPerPacket(DSPGraph::FCBox *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = (char *)this + 64;
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v7, "in");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v6, v5, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v8, 1426, &v7, &v6);
  }
  return *(unsigned int *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 120) + 20);
}

void sub_18F039A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::NonFiniteProtectionBox::~NonFiniteProtectionBox(DSPGraph::NonFiniteProtectionBox *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2910E50;
  v2 = (void *)*((_QWORD *)this + 97);
  if (v2)
  {
    *((_QWORD *)this + 98) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2910E50;
  v2 = (void *)*((_QWORD *)this + 97);
  if (v2)
  {
    *((_QWORD *)this + 98) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::NonFiniteProtectionBox::ClassName(DSPGraph::NonFiniteProtectionBox *this)
{
  return "NonFiniteProtectionBox";
}

uint64_t DSPGraph::NonFiniteProtectionBox::canBypass(DSPGraph::NonFiniteProtectionBox *this)
{
  return 1;
}

uint64_t DSPGraph::NonFiniteProtectionBox::isBypassed(DSPGraph::NonFiniteProtectionBox *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 809);
  return v1 & 1;
}

uint64_t DSPGraph::NonFiniteProtectionBox::bypass(uint64_t this, unsigned __int8 a2)
{
  atomic_store(a2, (unsigned __int8 *)(this + 809));
  return this;
}

uint64_t DSPGraph::NonFiniteProtectionBox::canProcessInPlace(DSPGraph::NonFiniteProtectionBox *this)
{
  return 1;
}

uint64_t DSPGraph::NonFiniteProtectionBox::setParameter(uint64_t this, int a2, int a3, int a4, float a5)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_NonFiniteProtectionBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v5, "");
    DSPGraph::ThrowException(-10866, &v7, 153, &v6, &v5);
  }
  if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_NonFiniteProtectionBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v5, "");
    DSPGraph::ThrowException(-10877, &v7, 156, &v6, &v5);
  }
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_NonFiniteProtectionBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v5, "");
    DSPGraph::ThrowException(-10878, &v7, 161, &v6, &v5);
  }
  if (a5 < 0.0)
    a5 = 0.0;
  atomic_store(LODWORD(a5), (unsigned int *)(this + 772));
  return this;
}

void sub_18F039CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

float DSPGraph::NonFiniteProtectionBox::getParameter(DSPGraph::NonFiniteProtectionBox *this, int a2, int a3, int a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_NonFiniteProtectionBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10866, &v8, 168, &v7, &v6);
  }
  if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_NonFiniteProtectionBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10877, &v8, 171, &v7, &v6);
  }
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_NonFiniteProtectionBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10878, &v8, 176, &v7, &v6);
  }
  return COERCE_FLOAT(atomic_load((unsigned int *)this + 193));
}

void sub_18F039E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::NonFiniteProtectionBox::getParameterList(int a1@<W1>, _QWORD *a2@<X8>)
{
  _DWORD *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    v4 = operator new(4uLL);
    *a2 = v4;
    *v4++ = 0;
    a2[1] = v4;
    a2[2] = v4;
  }
}

__n128 DSPGraph::NonFiniteProtectionBox::getParameterInfo@<Q0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  int v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = -10866;
  }
  else
  {
    if (!a2)
    {
      v15 = 3221225472;
      v13 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v14.n128_u64[1] = 0x4220000042A00000;
      v14.n128_u64[0] = 13;
      strlcpy((char *)&v9, "hard clip threshold", 0x34uLL);
      *((_QWORD *)&v13 + 1) = CFSTR("hard clip threshold");
      LODWORD(v15) = v15 | 0x8000000;
      v6 = v10;
      *(_OWORD *)a3 = v9;
      *(_OWORD *)(a3 + 16) = v6;
      v7 = v12;
      *(_OWORD *)(a3 + 32) = v11;
      *(_OWORD *)(a3 + 48) = v7;
      result = v14;
      *(_OWORD *)(a3 + 64) = v13;
      *(__n128 *)(a3 + 80) = result;
      *(_QWORD *)(a3 + 96) = v15;
      *(_BYTE *)(a3 + 104) = 1;
      return result;
    }
    v5 = -10878;
  }
  *(_DWORD *)a3 = v5;
  *(_BYTE *)(a3 + 104) = 0;
  return result;
}

void sub_18F039FC8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

double DSPGraph::NonFiniteProtectionBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 6.48669114e223;
  *(_OWORD *)a1 = xmmword_18F117340;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

unint64_t DSPGraph::NonFiniteProtectionBox::getPropertyInfo(DSPGraph::NonFiniteProtectionBox *this, int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t PropertyInfo;

  if (a2 == 64331 || a2 == 64330)
  {
    v3 = 4;
    if ((_DWORD)a3)
    {
      v3 = 4294956430;
      v4 = 0;
    }
    else
    {
      v4 = 0x100000000;
    }
  }
  else
  {
    PropertyInfo = DSPGraph::Box::getPropertyInfo(this, a2, a3);
    v4 = PropertyInfo & 0xFFFFFFFF00000000;
    v3 = PropertyInfo;
  }
  return v4 | v3;
}

uint64_t DSPGraph::NonFiniteProtectionBox::getProperty(DSPGraph::NonFiniteProtectionBox *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  uint64_t result;
  unsigned __int8 v8;
  int v9;

  if (a2 == 64331)
  {
    if (*a5 == 4)
    {
      if (a6)
      {
        if (!(_DWORD)a3)
        {
          result = 0;
          v9 = atomic_load((unsigned int *)this + 203);
          goto LABEL_15;
        }
        return 4294956430;
      }
      return 4294967246;
    }
    return 561211770;
  }
  if (a2 != 64330)
    return DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
  if (*a5 != 4)
    return 561211770;
  if (!a6)
    return 4294967246;
  if ((_DWORD)a3)
    return 4294956430;
  result = 0;
  v8 = atomic_load((unsigned __int8 *)this + 810);
  v9 = v8 & 1;
LABEL_15:
  *(_DWORD *)a6 = v9;
  return result;
}

uint64_t DSPGraph::NonFiniteProtectionBox::setProperty(DSPGraph::NonFiniteProtectionBox *this, int a2, int a3, unsigned int a4, int a5, unsigned int *a6)
{
  uint64_t result;

  if (a2 != 64331)
  {
    if (a2 != 64330)
      return DSPGraph::Box::setProperty(this, a2, a3, a4, a5, a6);
    if (a5 == 4)
    {
      if (!a3)
      {
        result = 0;
        atomic_store(*a6 != 0, (unsigned __int8 *)this + 810);
        return result;
      }
      return 4294956430;
    }
    return 561211770;
  }
  if (a5 != 4)
    return 561211770;
  if (a3)
    return 4294956430;
  if (!*a6)
    return 4294956445;
  result = 0;
  atomic_store(*a6, (unsigned int *)this + 203);
  return result;
}

uint64_t DSPGraph::NonFiniteProtectionBox::hasPresetData(DSPGraph::NonFiniteProtectionBox *this)
{
  return 0;
}

void DSPGraph::NonFiniteProtectionBox::uninitialize(DSPGraph::NonFiniteProtectionBox *this)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  tm *v8;
  NSObject *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  const char *v13;
  unsigned int v14;
  int v15;
  NSObject *v16;
  char *v17;
  int v18;
  char *v19;
  int v20;
  float v21;
  char *v22;
  uint8_t buf[4];
  char *v24;
  __int16 v25;
  _BYTE v26[18];
  __int16 v27;
  const char *v28;
  __int16 v29;
  unsigned int v30;
  char __str[16];
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 200))
  {
    if (DSPGraph::getLog(void)::onceToken != -1)
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8208);
    v2 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v17 = (char *)this + 32;
      if (*((char *)this + 55) < 0)
        v17 = *(char **)v17;
      v18 = *((_DWORD *)this + 200);
      *(_DWORD *)buf = 136315394;
      v24 = v17;
      v25 = 1024;
      *(_DWORD *)v26 = v18;
      _os_log_error_impl(&dword_18EE07000, v2, OS_LOG_TYPE_ERROR, "%s: Detected total %u audio buffers with non-finite (<NaN> or <inf>) sample during audio start/stop cycle", buf, 0x12u);
    }
    *((_DWORD *)this + 200) = 0;
  }
  if (*((_DWORD *)this + 201))
  {
    if (DSPGraph::getLog(void)::onceToken != -1)
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8208);
    v3 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v19 = (char *)this + 32;
      if (*((char *)this + 55) < 0)
        v19 = *(char **)v19;
      v20 = *((_DWORD *)this + 201);
      v21 = COERCE_FLOAT(atomic_load((unsigned int *)this + 193));
      *(_DWORD *)buf = 136315650;
      v24 = v19;
      v25 = 1024;
      *(_DWORD *)v26 = v20;
      *(_WORD *)&v26[4] = 2048;
      *(double *)&v26[6] = v21;
      _os_log_error_impl(&dword_18EE07000, v3, OS_LOG_TYPE_ERROR, "%s: Detected total %u audio buffers with peak over limit (%.0f dB) during audio start/stop cycle", buf, 0x1Cu);
    }
    *((_DWORD *)this + 201) = 0;
  }
  v4 = (_QWORD *)*((_QWORD *)this + 97);
  v5 = (_QWORD *)*((_QWORD *)this + 98);
  if (v4 != v5)
  {
    v6 = v4 + 1;
    do
    {
      v7 = *((_DWORD *)v6 - 2);
      *(_OWORD *)__str = 0u;
      v32 = 0u;
      v8 = localtime(v6);
      if (!strftime(__str, 0x20uLL, "%Y-%m-%d %H:%M:%S", v8))
        snprintf(__str, 0x20uLL, "%ld", *v6);
      if (DSPGraph::getLog(void)::onceToken != -1)
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8208);
      v9 = DSPGraph::getLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v11 = (char *)this + 32;
        if (*((char *)this + 55) < 0)
          v11 = (char *)*((_QWORD *)this + 4);
        v12 = v6[1];
        v13 = "peak over limit";
        if (!v7)
          v13 = "non-finite sample";
        v14 = atomic_load((unsigned int *)this + 203);
        *(_DWORD *)buf = 136316162;
        v24 = __str;
        v25 = 2048;
        *(_QWORD *)v26 = v12;
        *(_WORD *)&v26[8] = 2080;
        *(_QWORD *)&v26[10] = v11;
        v27 = 2080;
        v28 = v13;
        v29 = 1024;
        v30 = v14;
        _os_log_error_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, "%s.%09ld :: %s: Detected %s in %u audio buffers", buf, 0x30u);
      }
      v10 = v6 + 2;
      v6 += 3;
    }
    while (v10 != v5);
    v4 = (_QWORD *)*((_QWORD *)this + 97);
  }
  *((_QWORD *)this + 98) = v4;
  v15 = *((unsigned __int8 *)this + 808);
  *((_BYTE *)this + 808) = 0;
  if (v15)
  {
    if (DSPGraph::getLog(void)::onceToken != -1)
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_8208);
    v16 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v22 = (char *)this + 32;
      if (*((char *)this + 55) < 0)
        v22 = *(char **)v22;
      *(_DWORD *)buf = 136315138;
      v24 = v22;
      _os_log_error_impl(&dword_18EE07000, v16, OS_LOG_TYPE_ERROR, "%s: NonFiniteProtectionBox event logging capacity exceeded (some descriptions dropped)", buf, 0xCu);
    }
  }
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_8217()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

void DSPGraph::NonFiniteProtectionBox::addEvent(int64x2_t *a1, int a2)
{
  const double *v3;
  int64x2_t v4;
  uint64x2_t v5;
  char *v7;
  unint64_t v8;
  _DWORD *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  unsigned __int128 v17;
  _BYTE v18[20];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (const double *)&a1[48].i64[1];
  v4 = (int64x2_t)vld1q_dup_f64(v3);
  v5 = (uint64x2_t)vshrq_n_s64(vsubq_s64(a1[49], v4), 3uLL);
  v5.i64[0] *= 0xAAAAAAAAAAAAAAABLL;
  v5.i64[1] *= 0xAAAAAAAAAAAAAAABLL;
  if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(v5.u64[1]), v5)).u32[0] & 1) != 0)
  {
    v17 = 0uLL;
    clock_gettime(_CLOCK_REALTIME, (timespec *)&v17);
    *(_OWORD *)&v18[4] = v17;
    v7 = (char *)a1[49].i64[0];
    v8 = a1[49].u64[1];
    if ((unint64_t)v7 >= v8)
    {
      v10 = (char *)a1[48].i64[1];
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v10) >> 3) + 1;
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v10) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v14 = (char *)operator new(24 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[8 * ((v7 - v10) >> 3)];
      *(_DWORD *)v15 = a2;
      *(_OWORD *)(v15 + 4) = *(_OWORD *)v18;
      *((_DWORD *)v15 + 5) = *(_DWORD *)&v18[16];
      v9 = v15 + 24;
      if (v7 != v10)
      {
        do
        {
          v16 = *(_OWORD *)(v7 - 24);
          *((_QWORD *)v15 - 1) = *((_QWORD *)v7 - 1);
          *(_OWORD *)(v15 - 24) = v16;
          v15 -= 24;
          v7 -= 24;
        }
        while (v7 != v10);
        v7 = (char *)a1[48].i64[1];
      }
      a1[48].i64[1] = (uint64_t)v15;
      a1[49].i64[0] = (uint64_t)v9;
      a1[49].i64[1] = (uint64_t)&v14[24 * v13];
      if (v7)
        operator delete(v7);
    }
    else
    {
      *(_DWORD *)v7 = a2;
      *(_OWORD *)(v7 + 4) = *(_OWORD *)v18;
      *((_DWORD *)v7 + 5) = *(_DWORD *)&v18[16];
      v9 = v7 + 24;
    }
    a1[49].i64[0] = (uint64_t)v9;
  }
  else
  {
    a1[50].i8[8] = 1;
  }
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      result = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void AUOOPRenderingServer::~AUOOPRenderingServer(AUOOPRenderingServer *this)
{
  AUOOPRenderingServer::~AUOOPRenderingServer(this);
  JUMPOUT(0x193FFE460);
}

{
  unsigned int v2;
  void **v3;

  *(_QWORD *)this = &off_1E2907FE8;
  v2 = atomic_load(*((unsigned int **)this + 11));
  if (v2 != 2)
  {
    atomic_store(1u, (unsigned __int8 *)this + 113);
    os_eventlink_cancel();
  }
  if (*((_BYTE *)this + 56))
    caulk::thread::join((AUOOPRenderingServer *)((char *)this + 40));
  if (*((_BYTE *)this + 200))
  {
    v3 = (void **)((char *)this + 168);
    std::vector<audioipc::SharedAudioBuffers::Element>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  audioipc::eventlink_primitive::~eventlink_primitive((AUOOPRenderingServer *)((char *)this + 120));
  caulk::ipc::mapped_memory::reset((AUOOPRenderingServer *)((char *)this + 64));
  if (*((_BYTE *)this + 56))
    caulk::thread::~thread((AUOOPRenderingServer *)((char *)this + 40));
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

BOOL TOpaqueObject<AUOOPRenderingServer,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AUOOPRenderingServer>::sRTTI || a2 == (void *)MEMORY[0x1E0DDEC88];
}

uint64_t AUOOPRenderingServerUser::updateHostCallbacks(AUOOPRenderingServerUser *this, char a2)
{
  uint64_t v4;
  AUAudioUnit *mAUAudioUnit;
  uint64_t *v6;
  AUAudioUnit *v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD *, _QWORD *, _QWORD *, _QWORD *);
  void *v13;
  AUOOPRenderingServerUser *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD *, double *, _QWORD *, _QWORD *, _QWORD *, _QWORD *);
  void *v18;
  AUOOPRenderingServerUser *v19;

  v4 = MEMORY[0x1E0C809B0];
  if ((a2 & 1) != 0)
  {
    v15 = MEMORY[0x1E0C809B0];
    v16 = 3221225472;
    v17 = ___ZNK24AUOOPRenderingServerUser19updateHostCallbacksEm_block_invoke;
    v18 = &__block_descriptor_40_e29_B56__0_d8_d16_q24_d32_q40_d48l;
    v19 = this;
    mAUAudioUnit = this->mAUAudioUnit;
    v6 = &v15;
  }
  else
  {
    mAUAudioUnit = this->mAUAudioUnit;
    v6 = 0;
  }
  -[AUAudioUnit setMusicalContextBlock:](mAUAudioUnit, "setMusicalContextBlock:", v6);
  if ((a2 & 2) != 0)
  {
    v10 = v4;
    v11 = 3221225472;
    v12 = ___ZNK24AUOOPRenderingServerUser19updateHostCallbacksEm_block_invoke_2;
    v13 = &__block_descriptor_40_e21_B40__0_Q8_d16_d24_d32l;
    v14 = this;
    v7 = this->mAUAudioUnit;
    v8 = &v10;
  }
  else
  {
    v7 = this->mAUAudioUnit;
    v8 = 0;
  }
  return -[AUAudioUnit setTransportStateBlock:](v7, "setTransportStateBlock:", v8, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
}

uint64_t ___ZN24AUOOPRenderingServerUserC2EP11AUAudioUnitm_block_invoke(uint64_t a1, unint64_t a2, char a3, unsigned int a4, const void *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  pthread_t v12;
  _opaque_pthread_t *v13;
  BOOL v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  unint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 v25;
  unsigned int v26;
  uint64_t v27;
  size_t v28;
  _BYTE *v29;
  int v30;
  char v31;
  uint64_t __src;
  __int16 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6)
    v7 = *(_BYTE *)(v5 + 80) == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  v12 = pthread_self();
  v13 = *(_opaque_pthread_t **)(v5 + 72);
  if (!v12)
  {
    if (!v13)
      goto LABEL_11;
    return 0;
  }
  if (v13)
    v14 = v12 == v13;
  else
    v14 = 0;
  if (!v14)
    return 0;
LABEL_11:
  v15 = *(_DWORD **)(v6 + 8);
  v33 = 0;
  __src = 0;
  v16 = v15[1];
  if ((_DWORD)v16)
  {
    a2 -= *(_QWORD *)(v5 + 48);
    if (a2 >= 0x80)
    {
      v17 = 0;
      do
      {
        *((_BYTE *)&__src + v17) = a2 | 0x80;
        v18 = a2 >> 14;
        a2 >>= 7;
        ++v17;
      }
      while (v18);
      goto LABEL_23;
    }
LABEL_22:
    LOBYTE(v17) = 0;
    goto LABEL_23;
  }
  *(_QWORD *)(v5 + 48) = a2;
  if (a2 < 0x80)
    goto LABEL_22;
  v17 = 0;
  do
  {
    *((_BYTE *)&__src + v17) = a2 | 0x80;
    v20 = a2 >> 14;
    a2 >>= 7;
    ++v17;
  }
  while (v20);
LABEL_23:
  *((_BYTE *)&__src + v17) = a2;
  v21 = v17 + 1;
  v31 = 0;
  v30 = 0;
  if (a4 < 0x80)
  {
    LOBYTE(v22) = 0;
    LOBYTE(v23) = a4;
  }
  else
  {
    v22 = 0;
    v23 = a4;
    do
    {
      *((_BYTE *)&v30 + v22) = v23 | 0x80;
      v24 = v23 >> 14;
      v23 >>= 7;
      ++v22;
    }
    while (v24);
  }
  *((_BYTE *)&v30 + v22) = v23;
  v25 = v22 + 1;
  v26 = a4 + v21 + v25 + 1;
  if (*v15 - (int)v16 < v26)
    return 4294900543;
  v27 = v21;
  v28 = v25;
  memcpy((char *)v15 + v16 + 8, &__src, v21);
  v29 = (char *)v15 + v16 + v27 + 8;
  *v29++ = a3;
  memcpy(v29, &v30, v28);
  memcpy(&v29[v28], a5, a4);
  result = 0;
  v15[1] = v16 + v26;
  return result;
}

void sub_18F03ABCC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t ___ZN24AUOOPRenderingServerUserC2EP11AUAudioUnitm_block_invoke_2(uint64_t a1, unint64_t a2, char a3, MIDI::EventList *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  pthread_t v10;
  _opaque_pthread_t *v11;
  BOOL v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  unint64_t v18;
  size_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 v25;
  unsigned int v26;
  _BYTE *v27;
  int v28;
  char v29;
  uint64_t __src;
  __int16 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5)
    v6 = *(_BYTE *)(v4 + 80) == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  v10 = pthread_self();
  v11 = *(_opaque_pthread_t **)(v4 + 72);
  if (!v10)
  {
    if (!v11)
      goto LABEL_11;
    return 0;
  }
  if (v11)
    v12 = v10 == v11;
  else
    v12 = 0;
  if (!v12)
    return 0;
LABEL_11:
  v13 = *(_DWORD **)(v5 + 16);
  v31 = 0;
  __src = 0;
  v14 = v13[1];
  if ((_DWORD)v14)
  {
    a2 -= *(_QWORD *)(v4 + 48);
    if (a2 >= 0x80)
    {
      v15 = 0;
      do
      {
        *((_BYTE *)&__src + v15) = a2 | 0x80;
        v16 = a2 >> 14;
        a2 >>= 7;
        ++v15;
      }
      while (v16);
      goto LABEL_23;
    }
  }
  else
  {
    *(_QWORD *)(v4 + 48) = a2;
    if (a2 >= 0x80)
    {
      v15 = 0;
      do
      {
        *((_BYTE *)&__src + v15) = a2 | 0x80;
        v18 = a2 >> 14;
        a2 >>= 7;
        ++v15;
      }
      while (v18);
      goto LABEL_23;
    }
  }
  LOBYTE(v15) = 0;
LABEL_23:
  *((_BYTE *)&__src + v15) = a2;
  v19 = (v15 + 1);
  v20 = MIDI::EventList::size(a4);
  v21 = v20;
  LOBYTE(v22) = 0;
  v29 = 0;
  v28 = 0;
  LOBYTE(v23) = v20;
  if (v20 >= 0x80)
  {
    v22 = 0;
    v23 = v20;
    do
    {
      *((_BYTE *)&v28 + v22) = v23 | 0x80;
      v24 = v23 >> 14;
      v23 >>= 7;
      ++v22;
    }
    while (v24);
  }
  *((_BYTE *)&v28 + v22) = v23;
  v25 = v22 + 1;
  v26 = v19 + v20 + (v22 + 1) + 1;
  if (v26 > *v13 - v13[1])
    return 4294900543;
  memcpy((char *)v13 + v14 + 8, &__src, v19);
  v27 = (char *)v13 + v14 + v19 + 8;
  *v27++ = a3;
  memcpy(v27, &v28, v25);
  memcpy(&v27[v25], a4, v21);
  result = 0;
  v13[1] = v26 + v14;
  return result;
}

void sub_18F03ADE8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t ___ZNK24AUOOPRenderingServerUser19updateHostCallbacksEm_block_invoke(uint64_t a1, _QWORD *a2, double *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t *v8;
  BOOL v9;
  pthread_t v16;
  _opaque_pthread_t *v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(uint64_t **)(v7 + 64);
  if (v8)
    v9 = *(_BYTE *)(v7 + 80) == 0;
  else
    v9 = 1;
  if (v9)
    return 0;
  v16 = pthread_self();
  v17 = *(_opaque_pthread_t **)(v7 + 72);
  if (!v16)
  {
    if (!v17)
      goto LABEL_11;
    return 0;
  }
  if (v17)
    v18 = v16 == v17;
  else
    v18 = 0;
  if (!v18)
    return 0;
LABEL_11:
  v19 = *v8;
  v20 = *(_DWORD *)(*v8 + 4248);
  if ((v20 & 0x100) != 0)
  {
    if (a2)
      *a2 = *(_QWORD *)(v19 + 4240);
    if (a5)
    {
      v21 = *(_QWORD *)(v19 + 4232);
LABEL_21:
      *a5 = v21;
    }
  }
  else
  {
    if (a2)
      *a2 = 0x405E000000000000;
    v21 = 0;
    if (a5)
      goto LABEL_21;
  }
  if ((v20 & 0x200) != 0)
  {
    if (a3)
      *a3 = *(float *)(v19 + 4256);
    if (a4)
      *a4 = *(unsigned int *)(v19 + 4260);
    if (a6)
      *a6 = *(unsigned int *)(v19 + 4252);
    if (!a7)
      return 1;
    v23 = *(_QWORD *)(v19 + 4264);
    result = 1;
LABEL_39:
    *a7 = v23;
    return result;
  }
  if (a3)
    *a3 = 4.0;
  if (a4)
    *a4 = 4;
  result = (v20 >> 8) & 1;
  if (a6)
    *a6 = 0;
  v23 = 0;
  if (a7)
    goto LABEL_39;
  return result;
}

uint64_t ___ZNK24AUOOPRenderingServerUser19updateHostCallbacksEm_block_invoke_2(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  pthread_t v12;
  _opaque_pthread_t *v13;
  BOOL v14;
  _QWORD *v15;
  int v16;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6)
    v7 = *(_BYTE *)(v5 + 80) == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  v12 = pthread_self();
  v13 = *(_opaque_pthread_t **)(v5 + 72);
  if (v12)
  {
    if (v13)
      v14 = v12 == v13;
    else
      v14 = 0;
    if (!v14)
      return 0;
  }
  else if (v13)
  {
    return 0;
  }
  v15 = *(_QWORD **)v6;
  v16 = *(_DWORD *)(*(_QWORD *)v6 + 4248);
  if ((v16 & 0x400) == 0)
    return 0;
  if (a2)
    *a2 = v16 & 0xF;
  if (a3)
    *a3 = v15[534];
  if (a4)
    *a4 = v15[535];
  if (a5)
    *a5 = v15[536];
  return 1;
}

void caulk::mach::throw_if_mach_error(caulk::mach *this, const char *a2)
{
  const char *v2;
  std::runtime_error *exception;
  std::runtime_error *v4;
  std::runtime_error v5[2];
  _BYTE v6[24];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v6 = &off_1E290B4A8;
  MEMORY[0x193FFE0DC](v5, 4, v6, "Constructing a thread with real time priority requires that the computation (quantum) is less than or equal to the constraint");
  std::error_category::~error_category((std::error_category *)v6);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v2 = std::runtime_error::what(v5);
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)&v6[4] = v2;
    _os_log_error_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Throwing: %s", v6, 0xCu);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
  v4 = std::runtime_error::runtime_error(exception, v5);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
  v4[1] = v5[1];
}

void sub_18F03B0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, std::error_category a12)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t caulk::thread_proxy<std::tuple<caulk::thread::attributes,AUOOPRenderingServer::AUOOPRenderingServer(int,int,int,std::vector<AudioStreamBasicDescription> const&,unsigned int,unsigned int,applesauce::xpc::dict const&,std::shared_ptr<auoop::WorkgroupMirror>)::$_0,std::tuple<>>>(caulk::thread::attributes *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned int *v4;
  unint64_t v5;
  unsigned __int8 v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  void *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  caulk::mach::details *v17;
  caulk::mach::details *v18;
  __int128 v19;
  __int128 v20;
  NSObject *v21;
  id v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  AURenderEvent **v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  _DWORD *v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  BOOL v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned __int8 v54;
  unsigned int v55;
  unint64_t v56;
  unsigned __int8 v57;
  NSObject *v58;
  uint64_t v60;
  audioipc::priority_propagator_impl *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  AURenderEvent *v65;
  audioipc::SharedAudioBuffers *v66;
  caulk::thread::attributes *v67;
  _BYTE v68[32];
  unsigned int *v69;
  char v70;
  uint64_t v71;
  AURenderEvent *v72[2];
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[72];
  char v76;
  uint64_t v77;
  caulk::mach::details *v78[7];
  char v79[8];
  caulk::mach::details *v80;
  __int128 v81;
  _BYTE v82[25];
  _OWORD buf[6];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v67 = a1;
  caulk::thread::attributes::apply_to_this_thread(a1);
  v1 = *((_QWORD *)v67 + 8);
  v75[0] = 0;
  v76 = 0;
  v2 = MEMORY[0x1E0DDB760];
  v77 = MEMORY[0x1E0DDB760] + 16;
  memset(v78, 0, 49);
  audioipc::eventlink_primitive::activate();
  v3 = atomic_load((unsigned __int8 *)(v1 + 113));
  v4 = *(unsigned int **)(v1 + 88);
  if ((v3 & 1) == 0)
  {
    atomic_store(0, v4);
    v5 = audioipc::eventlink_primitive::wait_or_error(*(audioipc::eventlink_primitive **)(v1 + 120));
    v6 = atomic_load((unsigned __int8 *)(v1 + 113));
    if ((v6 & 1) == 0)
    {
      v7 = v5;
      v8 = HIDWORD(v5);
      v61 = (audioipc::priority_propagator_impl *)(v1 + 224);
      v62 = (uint64_t *)(v1 + 208);
      v63 = v1 + 144;
      v66 = (audioipc::SharedAudioBuffers *)(v1 + 168);
      v60 = v2 + 16;
      while (1)
      {
        v9 = atomic_load(*(unsigned int **)(v1 + 96));
        if (v9 == 2)
          goto LABEL_104;
        if (!(_BYTE)v8)
        {
          CADefaultLog();
          v58 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf[0]) = 136315394;
            *(_QWORD *)((char *)buf + 4) = "rt_receiver::receive_loop";
            WORD6(buf[0]) = 1024;
            *(_DWORD *)((char *)buf + 14) = v7;
            _os_log_error_impl(&dword_18EE07000, v58, OS_LOG_TYPE_ERROR, "%s failed: %d", (uint8_t *)buf, 0x12u);
          }

          goto LABEL_104;
        }
        atomic_store(1u, *(unsigned int **)(v1 + 88));
        v10 = *(_QWORD *)(v1 + 104);
        v11 = (unsigned __int8 *)(v10 + 4104);
        v12 = *(unsigned __int8 *)(v10 + 4104);
        if ((v12 - 1) < 2)
          break;
        if (v12 == 4)
        {
          AUOOPRenderingServer::prepareRealtimeMessages(v1, 1);
        }
        else
        {
          if (v12 == 5)
            break;
          if (!kInterAppAudioScope)
          {
            v21 = MEMORY[0x1E0C81028];
            v22 = MEMORY[0x1E0C81028];
LABEL_27:
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              v23 = *v11;
              LODWORD(buf[0]) = 136315650;
              *(_QWORD *)((char *)buf + 4) = "AUOOPRenderingServer.mm";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + 14) = 495;
              WORD1(buf[1]) = 1024;
              DWORD1(buf[1]) = v23;
              _os_log_impl(&dword_18EE07000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown message: %d", (uint8_t *)buf, 0x18u);
            }

            goto LABEL_95;
          }
          v21 = *(id *)kInterAppAudioScope;
          if (v21)
            goto LABEL_27;
        }
LABEL_95:
        v11[1] = 101;
        v54 = atomic_load((unsigned __int8 *)(v1 + 113));
        if ((v54 & 1) == 0)
        {
          v55 = atomic_load(*(unsigned int **)(v1 + 96));
          if (v55 != 2)
          {
            atomic_store(0, *(unsigned int **)(v1 + 88));
            v56 = audioipc::eventlink_primitive::wait_signal_or_error(*(audioipc::eventlink_primitive **)(v1 + 120));
            LOBYTE(v8) = HIDWORD(v56) != 0;
            if (!HIDWORD(v56))
              v7 = v56;
            v57 = atomic_load((unsigned __int8 *)(v1 + 113));
            if ((v57 & 1) == 0)
              continue;
          }
        }
        goto LABEL_104;
      }
      LODWORD(buf[0]) = *(_DWORD *)(v10 + 4108);
      v68[0] = 0;
      v70 = 0;
      v71 = 0;
      if (*MEMORY[0x1E0DDEC68])
      {
        std::optional<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::scoped_lookup>::emplace[abi:ne180100]<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>&,unsigned int const&,void>((uint64_t)v68, *MEMORY[0x1E0DDEC68], (int *)buf);
        if (v68[24])
        {
          v14 = BaseOpaqueObject::checkRTTI();
          v71 = v14;
          if (v14)
            goto LABEL_12;
        }
        else
        {
          v14 = v71;
          if (v71)
          {
LABEL_12:
            v64 = v10;
            v15 = *v11;
            if (v15 != 5)
            {
              v16 = *(_QWORD *)(v10 + 4112);
              if (v16 > 0x61)
              {
                if (*(_DWORD *)(v1 + 240) != 97)
                {
                  buf[0] = *(_OWORD *)v61;
                  LODWORD(buf[1]) = 1;
                  caulk::mach::this_thread::set_priority();
                  *(_DWORD *)(v1 + 240) = 97;
                }
                auoop::WorkgroupMirror::lookup((auoop::WorkgroupMirror *)v79, *(_QWORD *)(v1 + 24), v16);
                if (v80 != v78[0] || v82[24] != LOBYTE(v78[6]))
                {
                  if (v80)
                  {
                    std::optional<audioipc::os_workgroup_joiner>::emplace[abi:ne180100]<caulk::mach::os_workgroup_managed &,void>((audioipc::os_workgroup_joiner *)v75, (uint64_t)v79);
                  }
                  else if (v76)
                  {
                    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)v75);
                    v76 = 0;
                  }
                  caulk::mach::details::holder::operator=(v78, &v80);
                  *(_OWORD *)&v78[1] = v81;
                  *(_OWORD *)&v78[3] = *(_OWORD *)v82;
                  *(_OWORD *)((char *)&v78[4] + 1) = *(_OWORD *)&v82[9];
                }
                caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)v79);
              }
              else
              {
                v17 = v78[0];
                if (v78[0])
                {
                  if (v76)
                  {
                    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)v75);
                    v76 = 0;
                    v17 = v78[0];
                  }
                  memset(&buf[1], 0, 48);
                  v78[0] = 0;
                  *(_QWORD *)&buf[0] = v60;
                  *((_QWORD *)&buf[0] + 1) = v17;
                  caulk::mach::details::release_os_object(0, v13);
                  v18 = v78[5];
                  v20 = *(_OWORD *)&v78[1];
                  v19 = *(_OWORD *)&v78[3];
                  *(_OWORD *)&v78[1] = buf[1];
                  *(_OWORD *)&v78[3] = buf[2];
                  v78[5] = *(caulk::mach::details **)&buf[3];
                  buf[1] = v20;
                  buf[2] = v19;
                  *(_QWORD *)&buf[3] = v18;
                  LOBYTE(v18) = v78[6];
                  LOBYTE(v78[6]) = 0;
                  BYTE8(buf[3]) = (_BYTE)v18;
                  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)buf);
                }
                if (v16)
                  audioipc::priority_propagator_impl::apply_priority((uint64_t)v61, v16);
              }
            }
            AUOOPRenderingServer::prepareRealtimeMessages(v1, 0);
            v24 = *v62;
            v25 = *(unsigned __int8 *)(v14 + 41);
            v26 = AUEventSchedule::preRender(*(AUEventSchedule **)(v14 + 56), (uint64_t)*(double *)(*(_QWORD *)v63 + 4168), *(_DWORD *)(*(_QWORD *)v63 + 4312), 0);
            v73 = v26;
            v74 = v24;
            buf[0] = 0uLL;
            v72[0] = 0;
            v72[1] = 0;
            if (v24)
            {
LABEL_41:
              if (v26)
              {
                v27 = &v73;
                if (*(_QWORD *)(v24 + 8) <= *(_QWORD *)(v26 + 8))
                  v27 = &v74;
                v26 = *v27;
              }
              else
              {
                v27 = &v74;
                v26 = v24;
              }
              goto LABEL_48;
            }
            while (v26)
            {
              v27 = &v73;
LABEL_48:
              if (*(_BYTE *)(v26 + 16) != 1 || v25 || !*(_DWORD *)(v26 + 36))
                goto LABEL_55;
              v28 = *(_QWORD *)(v26 + 8);
              if (v28 >> 28 == 0xFFFFFFFE0)
                *(_QWORD *)(v26 + 8) = v28 + 0x100000000;
              if ((*(_BYTE *)(v26 + 19) & 2) != 0)
LABEL_55:
                v29 = (AURenderEvent **)buf;
              else
                v29 = v72;
              v30 = *(_QWORD *)v26;
              if (*v29)
              {
                v32 = (uint64_t *)v29[1];
                v31 = (uint64_t *)(v29 + 1);
                *v32 = v26;
              }
              else
              {
                *v29 = (AURenderEvent *)v26;
                v31 = (uint64_t *)(v29 + 1);
              }
              *v31 = v26;
              *(_QWORD *)v26 = 0;
              *v27 = v30;
              v26 = v73;
              v24 = v74;
              if (v74)
                goto LABEL_41;
            }
            v65 = *(AURenderEvent **)&buf[0];
            if (v72[0])
              AUEventSchedule::dispatchV2SetParamEvents(*(AUEventSchedule **)(v14 + 56), v72[0], v15 == 5);
            *(_QWORD *)(v14 + 64) = v63;
            *(_QWORD *)(v14 + 72) = pthread_self();
            *(_BYTE *)(v14 + 80) = 1;
            if (*v11 == 2)
            {
              v33 = v64;
              if (!*(_QWORD *)(v14 + 32))
              {
                v38 = -4;
LABEL_89:
                *(_DWORD *)(v33 + 4124) = v38;
                if (*(_BYTE *)(v14 + 80))
                  *(_BYTE *)(v14 + 80) = 0;
                AUEventSchedule::postRender(*(AUEventSchedule **)(v14 + 56), v65);
                *v62 = 0;
                *(_QWORD *)(v1 + 216) = 0;
                goto LABEL_92;
              }
              v34 = *(_QWORD *)(v1 + 144);
              v35 = *(_DWORD *)(v34 + 4312);
              v36 = *(_DWORD *)(v1 + 16) + *(_DWORD *)(v64 + 4120);
              *(_DWORD *)(v34 + 4316 + 4 * v36) = 0;
              audioipc::SharedAudioBuffers::mutableBufferList(v66, v36, v35);
              *(_QWORD *)&buf[0] = MEMORY[0x1E0C809B0];
              *((_QWORD *)&buf[0] + 1) = 3221225472;
              *(_QWORD *)&buf[1] = ___ZN20AUOOPRenderingServer8AURenderER24AUOOPRenderingServerUserjP13AURenderEvent_block_invoke;
              *((_QWORD *)&buf[1] + 1) = &__block_descriptor_48_e106_i44__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28__AudioBufferList_I_1_AudioBuffer_II_v___36l;
              *(_QWORD *)&buf[2] = v1;
              *((_QWORD *)&buf[2] + 1) = v34 + 4316;
              v37 = _Block_copy(buf);
              v38 = (*(uint64_t (**)(void))(*(_QWORD *)(v14 + 32) + 16))();

            }
            else
            {
              v39 = *(_QWORD *)(v1 + 144);
              v40 = *(_DWORD *)(v39 + 4312);
              *(_DWORD *)(*(_QWORD *)(v1 + 152) + 4) = 0;
              *(_DWORD *)(*(_QWORD *)(v1 + 160) + 4) = 0;
              if (v15 == 5)
              {
                objc_msgSend(*(id *)(v14 + 16), "deliverV2Parameters:", v65);
              }
              else if (*(int *)(v1 + 20) >= 1)
              {
                v41 = 0;
                v38 = 0;
                do
                {
                  v42 = v41;
                  if (!*(_BYTE *)(v14 + 40))
                    v42 = *(_DWORD *)(v1 + 16) + v41;
                  v43 = *(_DWORD **)audioipc::SharedAudioBuffers::mutableBufferList(v66, v42, v40);
                  v44 = *(_QWORD *)(v14 + 32);
                  *(_QWORD *)&buf[0] = MEMORY[0x1E0C809B0];
                  *((_QWORD *)&buf[0] + 1) = 3221225472;
                  *(_QWORD *)&buf[1] = ___ZN20AUOOPRenderingServer9AUProcessER24AUOOPRenderingServerUserRbP13AURenderEventb_block_invoke;
                  *((_QWORD *)&buf[1] + 1) = &__block_descriptor_48_e106_i44__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28__AudioBufferList_I_1_AudioBuffer_II_v___36l;
                  *(_QWORD *)&buf[2] = v1;
                  *((_QWORD *)&buf[2] + 1) = v39 + 4168;
                  v45 = (*(uint64_t (**)(void))(v44 + 16))();
                  v11[2] = 0;
                  v46 = audioipc::SharedAudioBuffers::mutableBufferList(v66, v41, v40);
                  v47 = *(_QWORD *)v46;
                  v48 = **(unsigned int **)v46;
                  if ((_DWORD)v48 == *v43)
                  {
                    v11[2] = 1;
                    if ((_DWORD)v48)
                    {
                      v49 = (_QWORD *)(v47 + 16);
                      v50 = v43 + 4;
                      while (*v50 == *v49)
                      {
                        v49 += 2;
                        v50 += 2;
                        if (!--v48)
                          goto LABEL_78;
                      }
                      v11[2] = 0;
                    }
                  }
LABEL_78:
                  if (v38)
                    v51 = 1;
                  else
                    v51 = v45 == 0;
                  if (!v51)
                    v38 = v45;
                  ++v41;
                }
                while (v41 < *(int *)(v1 + 20));
                goto LABEL_88;
              }
              v38 = 0;
            }
LABEL_88:
            v33 = v64;
            goto LABEL_89;
          }
        }
      }
      *(_DWORD *)(v10 + 4124) = -1;
LABEL_92:
      if (v70)
      {
        v52 = v69;
        if (v69)
        {
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
        }
      }
      goto LABEL_95;
    }
LABEL_104:
    v4 = *(unsigned int **)(v1 + 88);
  }
  atomic_store(2u, v4);
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v77);
  if (v76)
    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)v75);
  std::unique_ptr<std::tuple<caulk::thread::attributes,AUOOPRenderingServer::AUOOPRenderingServer(int,int,int,std::vector<AudioStreamBasicDescription> const&,unsigned int,unsigned int,applesauce::xpc::dict const&,std::shared_ptr<auoop::WorkgroupMirror>)::$_0,std::tuple<>>>::~unique_ptr[abi:ne180100]((uint64_t *)&v67);
  return 0;
}

void sub_18F03B9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,__int16 buf)
{
  NSObject *v38;
  NSObject *v39;

  if (a2)
  {
    AUOOPRenderingServer::renderThread(void)::WorkgroupJoiner::~WorkgroupJoiner(&buf);
    __cxa_begin_catch(exception_object);
    v38 = *(NSObject **)kInterAppAudioScope;
    applesauce::dispatch::v1::source::operator*(*(id *)kInterAppAudioScope);
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
    {
      buf = 0;
      _os_log_fault_impl(&dword_18EE07000, v38, OS_LOG_TYPE_FAULT, "Render thread exiting with uncaught exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x18F03B934);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<std::tuple<caulk::thread::attributes,AUOOPRenderingServer::AUOOPRenderingServer(int,int,int,std::vector<AudioStreamBasicDescription> const&,unsigned int,unsigned int,applesauce::xpc::dict const&,std::shared_ptr<auoop::WorkgroupMirror>)::$_0,std::tuple<>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 24) && *(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x193FFE460](v2, 0x1032C4060C540BCLL);
  }
  return a1;
}

uint64_t AUOOPRenderingServer::prepareRealtimeMessages(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const AURenderEvent *v9;
  XAtomicPoolAllocator *v10;
  _QWORD *v11;
  _QWORD *v12;
  XAtomicPoolAllocator *v13;
  _BYTE *v14;
  size_t v15;
  char v16;
  XAtomicPoolAllocator *v17;

  v2 = *(_QWORD *)(this + 144);
  v3 = *(unsigned int *)(v2 + 4);
  if ((_DWORD)v3)
  {
    v5 = this;
    v6 = v2 + 8;
    v7 = v2 + 8 + v3;
    v8 = CADeprecated::TSingleton<AURenderEventAllocator>::instance();
    v10 = (XAtomicPoolAllocator *)v8;
    v11 = (_QWORD *)(v5 + 208);
    if (*(_QWORD *)(v5 + 216))
      v12 = *(_QWORD **)(v5 + 216);
    else
      v12 = (_QWORD *)(v5 + 208);
    v17 = (XAtomicPoolAllocator *)(v8 + 224);
    v13 = (XAtomicPoolAllocator *)(v8 + 112);
    do
    {
      if (a2)
      {
        v14 = 0;
        switch(*(_BYTE *)(v6 + 16))
        {
          case 1:
          case 2:
            v14 = XAtomicPoolAllocator::alloc(v10);
            v14[17] = 0;
            v15 = 48;
            goto LABEL_13;
          case 8:
            v14 = XAtomicPoolAllocator::alloc(v13);
            v14[17] = 0;
            v15 = 24;
            goto LABEL_13;
          case 9:
            v14 = AURenderEventAllocator::allocMIDISysEx((AURenderEventAllocator *)v10, *(unsigned __int16 *)(v6 + 18));
            v15 = *(unsigned __int16 *)(v6 + 18) + 21;
            goto LABEL_13;
          case 0xA:
            v14 = XAtomicPoolAllocator::alloc(v17);
            v14[17] = 0;
            v15 = MIDI::EventList::size((MIDI::EventList *)(v6 + 20)) + 20;
LABEL_13:
            memcpy(v14, (const void *)v6, v15);
            v16 = 0;
            goto LABEL_14;
          default:
            goto LABEL_15;
        }
      }
      v16 = 1;
      v14 = (_BYTE *)v6;
LABEL_14:
      v14[17] = v16;
LABEL_15:
      if (!*v11)
        *v11 = v14;
      *v12 = v14;
      *(_QWORD *)v14 = 0;
      this = AURenderEventAllocator::eventSize((AURenderEventAllocator *)v6, v9);
      v6 += this;
      v12 = v14;
    }
    while (v6 < v7);
    *(_QWORD *)(v5 + 216) = v14;
  }
  return this;
}

_BYTE *AUOOPRenderingServer::renderThread(void)::WorkgroupJoiner::~WorkgroupJoiner(_BYTE *a1)
{
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)(a1 + 80));
  if (a1[72])
    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)a1);
  return a1;
}

uint64_t ___ZN20AUOOPRenderingServer8AURenderER24AUOOPRenderingServerUserjP13AURenderEvent_block_invoke(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  _BOOL4 v18;
  uint64_t result;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  unsigned int v24;

  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(v11 + 144);
  v13 = (_BYTE *)(v12 + 4104);
  *(_BYTE *)(v12 + 4105) = 102;
  v14 = (uint64_t)*(double *)a3;
  *(_DWORD *)(v12 + 4128) = a5;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = *(double *)(a3 + 16);
  v17 = *(_DWORD *)(a3 + 56) & 7;
  *(_QWORD *)(v12 + 4136) = v14;
  *(_QWORD *)(v12 + 4144) = v15;
  *(double *)(v12 + 4152) = v16;
  *(_QWORD *)(v12 + 4160) = v17;
  *(_DWORD *)(v12 + 4132) = a4;
  if (!audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::can_send(v11 + 64, v16))return 4294956420;
  v18 = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait_with_timeout(v11 + 64, 100.0);
  result = 4294956420;
  if (v18 && *v13 == 3)
  {
    *a2 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * a5);
    v20 = audioipc::SharedAudioBuffers::mutableBufferList((audioipc::SharedAudioBuffers *)(v11 + 168), a5, a4);
    v21 = **(_DWORD **)v20;
    v24 = *a6;
    v23 = a6 + 2;
    v22 = v24;
    if (v21 >= v24)
      v21 = v22;
    memcpy(v23, (const void *)(*(_QWORD *)v20 + 8), 16 * v21);
    return 0;
  }
  return result;
}

uint64_t ___ZN20AUOOPRenderingServer9AUProcessER24AUOOPRenderingServerUserRbP13AURenderEventb_block_invoke(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v6;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int v12;

  v6 = *(_QWORD *)(a1 + 32);
  if (*(int *)(v6 + 16) <= a5)
    return 4294956419;
  *a2 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * a5 + 148);
  v8 = audioipc::SharedAudioBuffers::mutableBufferList((audioipc::SharedAudioBuffers *)(v6 + 168), a5, a4);
  v9 = **(_DWORD **)v8;
  v12 = *a6;
  v11 = a6 + 2;
  v10 = v12;
  if (v9 >= v12)
    v9 = v10;
  memcpy(v11, (const void *)(*(_QWORD *)v8 + 8), 16 * v9);
  return 0;
}

void caulk::mach::error_category::~error_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x193FFE460);
}

const char *caulk::mach::error_category::name(caulk::mach::error_category *this)
{
  return "Mach";
}

void caulk::mach::error_category::message(caulk::mach::error_category *this@<X0>, mach_error_t a2@<W1>, std::string *a3@<X8>)
{
  char *v5;
  std::string *v6;
  __int128 v7;
  char *v8;
  size_t v9;
  std::string *v10;
  std::string v11;
  std::string v12;

  v5 = (char *)(*(uint64_t (**)(caulk::mach::error_category *))(*(_QWORD *)this + 16))(this);
  std::string::basic_string[abi:ne180100]<0>(&v11, v5);
  v6 = std::string::append(&v11, ": ", 2uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = mach_error_string(a2);
  v9 = strlen(v8);
  v10 = std::string::append(&v12, v8, v9);
  *a3 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_18F03BF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id applesauce::xpc::dict::object_proxy::operator*(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = **(void ***)a1;
  applesauce::dispatch::v1::source::operator*(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_get_value(v3, *(const char **)(a1 + 8));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_18F03C000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AudioBufferMemoryResource(std::pmr *a1)
{
  unsigned __int8 v1;
  char *v3;
  unint64_t v4;
  void *v5;
  void **v6;
  char v7;
  void **v8;
  void *__p[2];
  unsigned __int8 v10;

  v1 = atomic_load((unsigned __int8 *)&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm36EEEtlA36_cLc65ELc117ELc100ELc105ELc111ELc66ELc117ELc102ELc102ELc101ELc114ELc77ELc101ELc109ELc111ELc114ELc121ELc82ELc101ELc115ELc111ELc117ELc114ELc99ELc101ELc95ELc85ELc115ELc101ELc77ELc97ELc108ELc108ELc111ELc99EEEEEbvE5input);
  if ((v1 & 1) != 0)
    goto LABEL_2;
  a1 = (std::pmr *)__cxa_guard_acquire(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm36EEEtlA36_cLc65ELc117ELc100ELc105ELc111ELc66ELc117ELc102ELc102ELc101ELc114ELc77ELc101ELc109ELc111ELc114ELc121ELc82ELc101ELc115ELc111ELc117ELc114ELc99ELc101ELc95ELc85ELc115ELc101ELc77ELc97ELc108ELc108ELc111ELc99EEEEEbvE5input);
  if (!(_DWORD)a1)
    goto LABEL_2;
  v3 = getenv("AudioBufferMemoryResource_UseMalloc");
  if (!v3)
    goto LABEL_17;
  std::string::basic_string[abi:ne180100]<0>(__p, v3);
  v4 = v10;
  if ((v10 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v4 == 2)
  {
    v5 = __p[0];
    v8 = __p;
    if ((v10 & 0x80u) != 0)
      v8 = (void **)__p[0];
    if (*(_WORD *)v8 == 20302)
      goto LABEL_15;
LABEL_21:
    if ((char)v10 < 0)
      operator delete(__p[0]);
    v7 = 1;
    goto LABEL_24;
  }
  if (v4 != 1)
    goto LABEL_21;
  v5 = __p[0];
  v6 = __p;
  if ((v10 & 0x80u) != 0)
    v6 = (void **)__p[0];
  if (*(_BYTE *)v6 != 48)
    goto LABEL_21;
LABEL_15:
  if ((char)v10 < 0)
    operator delete(v5);
LABEL_17:
  v7 = 0;
LABEL_24:
  _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm36EEEtlA36_cLc65ELc117ELc100ELc105ELc111ELc66ELc117ELc102ELc102ELc101ELc114ELc77ELc101ELc109ELc111ELc114ELc121ELc82ELc101ELc115ELc111ELc117ELc114ELc99ELc101ELc95ELc85ELc115ELc101ELc77ELc97ELc108ELc108ELc111ELc99EEEEEbvE5input = v7;
  __cxa_guard_release(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm36EEEtlA36_cLc65ELc117ELc100ELc105ELc111ELc66ELc117ELc102ELc102ELc101ELc114ELc77ELc101ELc109ELc111ELc114ELc121ELc82ELc101ELc115ELc111ELc117ELc114ELc99ELc101ELc95ELc85ELc115ELc101ELc77ELc97ELc108ELc108ELc111ELc99EEEEEbvE5input);
LABEL_2:
  if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm36EEEtlA36_cLc65ELc117ELc100ELc105ELc111ELc66ELc117ELc102ELc102ELc101ELc114ELc77ELc101ELc109ELc111ELc114ELc121ELc82ELc101ELc115ELc111ELc117ELc114ELc99ELc101ELc95ELc85ELc115ELc101ELc77ELc97ELc108ELc108ELc111ELc99EEEEEbvE5input)
    return std::pmr::get_default_resource(a1);
  else
    return caulk::audio_buffer_resource(a1);
}

void sub_18F03C118(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm36EEEtlA36_cLc65ELc117ELc100ELc105ELc111ELc66ELc117ELc102ELc102ELc101ELc114ELc77ELc101ELc109ELc111ELc114ELc121ELc82ELc101ELc115ELc111ELc117ELc114ELc99ELc101ELc95ELc85ELc115ELc101ELc77ELc97ELc108ELc108ELc111ELc99EEEEEbvE5input);
  _Unwind_Resume(a1);
}

uint64_t ExtendedAudioBufferList_PrepareWithNumberOfBuffers(int *a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  caulk::concurrent::message *v14;
  uint64_t v15;
  int v16;
  caulk::concurrent::messenger *v17;
  caulk::concurrent::message *v18;
  uint64_t v19;
  caulk::concurrent::message *v20;
  uint64_t v21;

  if (a1[2] != 1094863915)
    std::terminate();
  if (a3)
    v5 = 1;
  else
    v5 = a2;
  if (a3)
    v6 = a2;
  else
    v6 = 1;
  if (v5 > *a1)
  {
    v13 = _os_log_pack_size();
    result = caulk::deferred_logger::create_message((caulk::deferred_logger *)gCADefaultDeferredLog, v13 + 88, 16);
    if (!result)
      return result;
    v14 = (caulk::concurrent::message *)result;
    v15 = _os_log_pack_fill();
    v16 = *a1;
    *(_DWORD *)v15 = 67109376;
    *(_DWORD *)(v15 + 4) = v5;
    *(_WORD *)(v15 + 8) = 1024;
    *(_DWORD *)(v15 + 10) = v16;
    v17 = *(caulk::concurrent::messenger **)(gCADefaultDeferredLog + 16);
    v18 = v14;
    goto LABEL_24;
  }
  v7 = a1[5];
  v8 = v5 * (unint64_t)a4;
  if ((v8 & 0xFFFFFFFF00000000) != 0)
  {
    LODWORD(v8) = 0x7FFFFFFF;
    goto LABEL_22;
  }
  if (v8 > v7)
  {
LABEL_22:
    v19 = _os_log_pack_size();
    result = caulk::deferred_logger::create_message((caulk::deferred_logger *)gCADefaultDeferredLog, v19 + 88, 16);
    if (!result)
      return result;
    v20 = (caulk::concurrent::message *)result;
    v21 = _os_log_pack_fill();
    *(_DWORD *)v21 = 67109376;
    *(_DWORD *)(v21 + 4) = v8;
    *(_WORD *)(v21 + 8) = 1024;
    *(_DWORD *)(v21 + 10) = v7;
    v17 = *(caulk::concurrent::messenger **)(gCADefaultDeferredLog + 16);
    v18 = v20;
LABEL_24:
    caulk::concurrent::messenger::enqueue(v17, v18);
    return 0;
  }
  v9 = *((_QWORD *)a1 + 4);
  a1[12] = v5;
  result = (uint64_t)(a1 + 12);
  if ((_DWORD)v5)
  {
    v11 = a1 + 16;
    v12 = v5;
    do
    {
      *v11 = v9;
      v9 += a4;
      *((_DWORD *)v11 - 2) = v6;
      *((_DWORD *)v11 - 1) = a4;
      v11 += 2;
      --v12;
    }
    while (v12);
  }
  else
  {
    v5 = 0;
  }
  a1[4 * v5 + 14] = 1094863915;
  return result;
}

uint64_t ExtendedAudioBufferList_GetMetadataFrame(uint64_t a1)
{
  uint64_t v1;

  if (*(_DWORD *)(a1 + 8) != 1094863915)
    std::terminate();
  v1 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v1)
    return a1 + v1;
  else
    return 0;
}

uint64_t AudioMetadataFrame_GetHeader(_QWORD *a1)
{
  if (a1[1] - *a1 <= 0x2BuLL)
    return 0;
  else
    return *a1;
}

void *AudioMetadataFrame_Clear(uint64_t a1)
{
  void *result;
  int64_t v3;

  result = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8) - (_QWORD)result;
  if (v3 >= 1)
  {
    bzero(result, v3);
    result = *(void **)a1;
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t AudioMetadataFrame_AppendEvent(uint64_t *a1, char *__src)
{
  _OWORD v5[3];

  if (!*a1 || (unint64_t)(a1[1] - *a1) <= 0x2B)
  {
    memset(v5, 0, 44);
    BYTE8(v5[1]) = 1;
    *(_QWORD *)&v5[2] = 0x10000002CLL;
    AudioMetadataFrame::begin_new(a1, (unsigned int *)v5);
  }
  return AudioMetadataFrame::append((uint64_t)a1, __src);
}

uint64_t AudioBufferList_GetMetadataFrame(const AudioBufferList *a1)
{
  uint64_t mDataByteSize;

  if (a1->mBuffers[a1->mNumberBuffers].mNumberChannels != 1094863915)
    return 0;
  mDataByteSize = a1[-2].mBuffers[0].mDataByteSize;
  if ((_DWORD)mDataByteSize)
    return (uint64_t)&a1[-2] + mDataByteSize;
  else
    return 0;
}

void MP4BoxParser_SampleToChunk::~MP4BoxParser_SampleToChunk(MP4BoxParser_SampleToChunk *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_SampleToChunk::Init(MP4BoxParser **this)
{
  uint64_t v2;
  uint64_t DataSourceSize;
  NSObject *v4;
  const char *v5;
  unsigned int v6;
  uint64_t DataSourceBytes;
  unsigned int v9;
  uint64_t v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!(_DWORD)v2)
  {
    if (*((_DWORD *)this + 5) == 1937011555)
    {
      v10 = 0;
      DataSourceSize = MP4BoxParser::GetDataSourceSize(this[1], &v10);
      if ((_DWORD)DataSourceSize)
      {
        v2 = DataSourceSize;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v12 = "MP4_BoxParser_SampleToChunk.cpp";
          v13 = 1024;
          v14 = 109;
          v4 = MEMORY[0x1E0C81028];
          v5 = "%25s:%-5d  unable to determine data source size";
LABEL_10:
          _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_ERROR, v5, buf, 0x12u);
        }
      }
      else
      {
        v6 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
        DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v6, 4uLL, (char *)this + 60);
        if ((_DWORD)DataSourceBytes)
        {
          v2 = DataSourceBytes;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v12 = "MP4_BoxParser_SampleToChunk.cpp";
            v13 = 1024;
            v14 = 112;
            v4 = MEMORY[0x1E0C81028];
            v5 = "%25s:%-5d  entry count truncated";
            goto LABEL_10;
          }
        }
        else
        {
          *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
          v9 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
          if (12 * *((unsigned int *)this + 15) + v9 + 4 <= v10)
          {
            return 0;
          }
          else
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v12 = "MP4_BoxParser_SampleToChunk.cpp";
              v13 = 1024;
              v14 = 115;
              _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  entries truncated", buf, 0x12u);
            }
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return v2;
}

uint64_t MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(MP4BoxParser **this, int a2, int a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t DataSourceSize;
  MP4BoxParser *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 15))
  {
    v17 = 0;
    DataSourceSize = MP4BoxParser::GetDataSourceSize(this[1], &v17);
    if (!(_DWORD)DataSourceSize)
    {
      v11 = this[1];
      v12 = v17;
      v13 = operator new(0x28uLL);
      *v13 = &off_1E2915BE8;
      v13[1] = this;
      *((_DWORD *)v13 + 4) = a2;
      *((_DWORD *)v13 + 5) = a3;
      v13[3] = a4;
      v13[4] = a5;
      v19 = v13;
      (*(void (**)(MP4BoxParser *, _QWORD, uint64_t, _BYTE *))(*(_QWORD *)v11 + 80))(v11, 0, v12, v18);
      v14 = v19;
      if (v19 == v18)
      {
        v15 = 4;
        v14 = v18;
        goto LABEL_8;
      }
      if (v19)
      {
        v15 = 5;
LABEL_8:
        (*(void (**)(void))(*v14 + 8 * v15))();
      }
    }
  }
  else
  {
    DataSourceSize = 0;
    *a4 = 0;
    *a5 = 0;
  }
  return DataSourceSize;
}

void sub_18F03C800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0,std::allocator<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0>,void ()(void const*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

__n128 std::__function::__func<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0,std::allocator<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0>,void ()(void const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2915BE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0,std::allocator<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0>,void ()(void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2915BE8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0,std::allocator<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0>,void ()(void const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t result;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;

  v3 = *a2;
  v4 = *(_DWORD **)(a1 + 8);
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 24))(v4);
  v6 = v3 + result;
  if (v4[15] == 1)
  {
    v7 = (_DWORD *)(v6 + 8);
  }
  else
  {
    v8 = v6 + 4;
    v9 = *(unsigned int *)(a1 + 20);
    v10 = *(unsigned int **)(a1 + 32);
    v11 = 12 * v9;
    v12 = v9 - 1;
    while (1)
    {
      v13 = (v4[15] - 1);
      if (++v12 >= v13)
        break;
      v14 = v11 + 12;
      v15 = v6 + v11;
      v16 = bswap32(*(_DWORD *)(v15 + 4)) - 1;
      v17 = bswap32(*(_DWORD *)(v15 + 16)) - 1;
      *v10 = v17;
      v18 = *(_DWORD *)(a1 + 16);
      v19 = v18 < v16 || v18 >= v17;
      v11 = v14;
      if (!v19)
      {
        v20 = v8 + v14 - 12;
        goto LABEL_11;
      }
    }
    v20 = v8 + 12 * v13;
LABEL_11:
    v7 = (_DWORD *)(v20 + 4);
  }
  **(_DWORD **)(a1 + 24) = *v7;
  **(_DWORD **)(a1 + 24) = bswap32(**(_DWORD **)(a1 + 24));
  return result;
}

uint64_t CAFAudioFile::Create(CAFAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = AudioFileObject::Create(this, a2, a3);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "CAFAudioFile.cpp";
      v11 = 1024;
      v12 = 1133;
      v6 = MEMORY[0x1E0C81028];
      v7 = "%25s:%-5d  Couldn't create a new audio file object";
LABEL_7:
      _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v9, 0x12u);
    }
  }
  else
  {
    v5 = CAFAudioFile::InitializeCAFChunks(this);
    if ((_DWORD)v5 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "CAFAudioFile.cpp";
      v11 = 1024;
      v12 = 1136;
      v6 = MEMORY[0x1E0C81028];
      v7 = "%25s:%-5d  InitializeCAFChunks";
      goto LABEL_7;
    }
  }
  return v5;
}

uint64_t CAFAudioFile::InitializeDataSource(CAFAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = CAFAudioFile::InitializeCAFChunks(this);
  if ((_DWORD)v2 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "CAFAudioFile.cpp";
    v6 = 1024;
    v7 = 1158;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  InitializeCAFChunks", (uint8_t *)&v4, 0x12u);
  }
  return v2;
}

uint64_t CAFAudioFile::Optimize(CAFAudioFile *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t i;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  NSObject *v40;
  const char *v41;
  __int128 v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  __int128 v50;
  char *v51;
  int v52;
  __int128 v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  unint64_t v58;
  __int128 v59;
  char *v60;
  _DWORD *v61;
  _DWORD *exception;
  _DWORD *v63;
  _QWORD *v64;
  void *v65;
  unsigned int v66;
  uint64_t v67[2];
  uint64_t v68;
  unsigned int v69;
  _OWORD v70[2];
  _BYTE buf[24];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v66 = 0;
  v2 = *((_QWORD *)this + 18);
  v3 = *((_QWORD *)this + 19);
  v4 = (_QWORD *)((char *)this + 144);
  for (i = 8; v2 != v3; v2 += 24)
  {
    if (*(_DWORD *)v2 != 1684108385 && *(_DWORD *)v2 != 1718773093)
      i += *(_QWORD *)(v2 + 8);
  }
  CADeprecated::CAAutoFree<char>::CAAutoFree(&v65, i);
  v7 = (char *)v65;
  v69 = 8;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, void *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                          + 48))(*((_QWORD *)this + 13), 0, 0, 8, v65, &v69);
  if (v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 280;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes failed", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(4uLL);
    *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  v10 = *((_QWORD *)this + 18);
  v9 = *((_QWORD *)this + 19);
  if (v10 == v9)
  {
    v11 = 0;
LABEL_43:
    v32 = 0;
    v33 = 1;
    goto LABEL_44;
  }
  v64 = v4;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = &v7[v69];
  do
  {
    if (*(_DWORD *)v10 != 1684108385 && *(_DWORD *)v10 != 1718773093)
    {
      v69 = *(_QWORD *)(v10 + 8);
      v70[0] = *(_OWORD *)v10;
      v16 = v14 - (_BYTE *)v65;
      if ((unint64_t)v12 >= v13)
      {
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3) + 1;
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v13 - (_QWORD)v11) >> 3) > v17)
          v17 = 0x5555555555555556 * ((uint64_t)(v13 - (_QWORD)v11) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v11) >> 3) >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v17;
        if (v18)
          v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v18);
        else
          v19 = 0;
        v20 = v18 + 8 * ((v12 - v11) >> 3);
        *(_OWORD *)v20 = v70[0];
        *(_QWORD *)(v20 + 16) = v16;
        if (v12 == v11)
        {
          v23 = (char *)(v18 + 8 * ((v12 - v11) >> 3));
        }
        else
        {
          v21 = v18 + 8 * ((v12 - v11) >> 3);
          do
          {
            v22 = *(_OWORD *)(v12 - 24);
            v23 = (char *)(v21 - 24);
            *(_QWORD *)(v21 - 8) = *((_QWORD *)v12 - 1);
            *(_OWORD *)(v21 - 24) = v22;
            v12 -= 24;
            v21 -= 24;
          }
          while (v12 != v11);
        }
        v24 = v18 + 24 * v19;
        v12 = (char *)(v20 + 24);
        if (v11)
          operator delete(v11);
        v11 = v23;
        v13 = v24;
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)v10;
        *((_QWORD *)v12 + 2) = v16;
        v12 += 24;
      }
      v25 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, char *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                              + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v10 + 16), v69, v14, &v69);
      if (v25)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 296;
          _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes failed", buf, 0x12u);
        }
        v61 = __cxa_allocate_exception(4uLL);
        *v61 = v25;
        __cxa_throw(v61, MEMORY[0x1E0DE4EF0], 0);
      }
      v14 += v69;
      v9 = *((_QWORD *)this + 19);
    }
    v10 += 24;
  }
  while (v10 != v9);
  v26 = v9 - *v4;
  if (!v26)
    goto LABEL_43;
  v27 = 0;
  v28 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 3);
  v29 = 1;
  while (1)
  {
    v30 = *v4 + 24 * v27;
    if (*(_DWORD *)v30 == 1684108385)
      break;
    v27 = v29;
    if (v28 <= v29++)
      goto LABEL_43;
  }
  v35 = *(_OWORD *)v30;
  v36 = *(_QWORD *)(v30 + 16);
  v68 = v36;
  *(_OWORD *)v67 = v35;
  v37 = i;
  if (*((_BYTE *)this + 138))
  {
    v38 = *((_QWORD *)this + 24);
    if (!v38)
    {
      CAFAudioFile::CalcSoundDataAlign(this);
      v38 = *((_QWORD *)this + 24);
    }
    v39 = i + 12;
    if (v38 - 16 > (uint64_t)(i + 12))
      v39 = v38 - 16;
    v37 = v38 - 16 + ((v39 - v38 + 4111) & 0xFFFFFFFFFFFFF000);
  }
  v68 = v37;
  if (v36 <= v37)
  {
    v32 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), v67[1] + v37);
    if ((_DWORD)v32)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 373;
        v40 = MEMORY[0x1E0C81028];
        v41 = "%25s:%-5d  SetSize Failed";
LABEL_71:
        _os_log_impl(&dword_18EE07000, v40, OS_LOG_TYPE_ERROR, v41, buf, 0x12u);
        goto LABEL_72;
      }
      goto LABEL_72;
    }
  }
  if (v37 != v36)
  {
    AudioFileObject::MoveData(this, v36, v37, v67[1]);
    *((_QWORD *)this + 9) = v37 + 16;
  }
  if (v36 > v37)
  {
    v32 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), v67[1] + v37);
    if ((_DWORD)v32)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 385;
        v40 = MEMORY[0x1E0C81028];
        v41 = "%25s:%-5d  SetSize Failed";
        goto LABEL_71;
      }
LABEL_72:
      v33 = 6;
      goto LABEL_44;
    }
  }
  v32 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, size_t, void *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                          + 56))(*((_QWORD *)this + 13), 0, 0, i, v65, &v66);
  if ((_DWORD)v32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 389;
      v40 = MEMORY[0x1E0C81028];
      v41 = "%25s:%-5d  FSWrite Failed";
      goto LABEL_71;
    }
    goto LABEL_72;
  }
  if (*((_BYTE *)this + 138))
  {
    if (v66 + 12 > v37)
    {
      v43 = v12;
    }
    else
    {
      *(_DWORD *)buf = 1718773093;
      *(_QWORD *)&buf[8] = v37 - v66;
      *(_QWORD *)&buf[16] = v66;
      if ((unint64_t)v12 >= v13)
      {
        v44 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3) + 1;
        if (v44 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v13 - (_QWORD)v11) >> 3) > v44)
          v44 = 0x5555555555555556 * ((uint64_t)(v13 - (_QWORD)v11) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v11) >> 3) >= 0x555555555555555)
          v45 = 0xAAAAAAAAAAAAAAALL;
        else
          v45 = v44;
        if (v45)
          v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v45);
        else
          v46 = 0;
        v47 = v45 + 8 * ((v12 - v11) >> 3);
        v48 = *(_OWORD *)buf;
        v49 = v45 + 24 * v46;
        *(_QWORD *)(v47 + 16) = *(_QWORD *)&buf[16];
        *(_OWORD *)v47 = v48;
        v43 = (char *)(v47 + 24);
        if (v12 == v11)
        {
          v51 = (char *)(v45 + 8 * ((v12 - v11) >> 3));
        }
        else
        {
          do
          {
            v50 = *(_OWORD *)(v12 - 24);
            v51 = (char *)(v47 - 24);
            *(_QWORD *)(v47 - 8) = *((_QWORD *)v12 - 1);
            *(_OWORD *)(v47 - 24) = v50;
            v12 -= 24;
            v47 -= 24;
          }
          while (v12 != v11);
        }
        if (v11)
          operator delete(v11);
        v11 = v51;
        v13 = v49;
      }
      else
      {
        v42 = *(_OWORD *)buf;
        *((_QWORD *)v12 + 2) = *(_QWORD *)&buf[16];
        *(_OWORD *)v12 = v42;
        v43 = v12 + 24;
      }
      v69 = 0;
      v52 = (*(uint64_t (**)(CAFAudioFile *, _BYTE *, unsigned int *))(*(_QWORD *)this + 768))(this, buf, &v69);
      if (v52)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v70[0]) = 136315394;
          *(_QWORD *)((char *)v70 + 4) = "CAFAudioFile.cpp";
          WORD6(v70[0]) = 1024;
          *(_DWORD *)((char *)v70 + 14) = 429;
          _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  WriteBytes failed", (uint8_t *)v70, 0x12u);
        }
        v63 = __cxa_allocate_exception(4uLL);
        *v63 = v52;
        __cxa_throw(v63, MEMORY[0x1E0DE4EF0], 0);
      }
    }
  }
  else
  {
    v43 = v12;
  }
  if ((unint64_t)v43 >= v13)
  {
    v55 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v11) >> 3) + 1;
    if (v55 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * ((uint64_t)(v13 - (_QWORD)v11) >> 3) > v55)
      v55 = 0x5555555555555556 * ((uint64_t)(v13 - (_QWORD)v11) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v11) >> 3) >= 0x555555555555555)
      v56 = 0xAAAAAAAAAAAAAAALL;
    else
      v56 = v55;
    if (v56)
      v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v56);
    v57 = *(_OWORD *)v67;
    v58 = v56 + 8 * ((v43 - v11) >> 3);
    *(_QWORD *)(v58 + 16) = v68;
    *(_OWORD *)v58 = v57;
    v54 = (char *)(v58 + 24);
    if (v43 == v11)
    {
      v60 = (char *)(v56 + 8 * ((v43 - v11) >> 3));
    }
    else
    {
      do
      {
        v59 = *(_OWORD *)(v43 - 24);
        v60 = (char *)(v58 - 24);
        *(_QWORD *)(v58 - 8) = *((_QWORD *)v43 - 1);
        *(_OWORD *)(v58 - 24) = v59;
        v43 -= 24;
        v58 -= 24;
      }
      while (v43 != v11);
    }
    if (v11)
      operator delete(v11);
    v11 = v60;
  }
  else
  {
    v53 = *(_OWORD *)v67;
    *((_QWORD *)v43 + 2) = v68;
    *(_OWORD *)v43 = v53;
    v54 = v43 + 24;
  }
  std::vector<ChunkInfo64>::__assign_with_size[abi:ne180100]<ChunkInfo64*,ChunkInfo64*>(v64, v11, v54, 0xAAAAAAAAAAAAAAABLL * ((v54 - v11) >> 3));
  (*(void (**)(CAFAudioFile *, uint64_t *, unsigned int *))(*(_QWORD *)this + 768))(this, v67, &v66);
  v32 = 0;
  v33 = 0;
  *((_DWORD *)this + 20) = 1;
LABEL_44:
  if (v65)
    free(v65);
  if (v11)
    operator delete(v11);
  if (v33 && v33 != 6)
    return 0;
  return v32;
}

void sub_18F03D4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  if (a11)
    free(a11);
  if (v11)
    operator delete(v11);
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x18F03CE84);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::WritePackets(CAFAudioFile *this, uint64_t a2, uint64_t a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  char *v7;
  unsigned int v10;
  int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  SInt64 v23;
  SInt64 mStartOffset;
  uint64_t v25;
  int v26;
  SInt64 v27;
  unint64_t v28;
  unint64_t v29;
  const AudioStreamPacketDescription *v30;
  SInt64 v31;
  SInt64 v32;
  uint64_t v33;
  unint64_t v34;
  UInt32 *p_mVariableFramesInPacket;
  char *v36;
  char *v37;
  UInt32 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  UInt32 *p_mDataByteSize;
  UInt32 v45;
  UInt32 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  AudioStreamPacketDescription v55;
  _BYTE buf[18];
  uint64_t v57;

  v7 = a7;
  v10 = a3;
  v57 = *MEMORY[0x1E0C80C00];
  v12 = *((_DWORD *)this + 10);
  v13 = *((_DWORD *)this + 11);
  *((_BYTE *)this + 208) = 1;
  v53 = v13;
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
    return AudioFileObject::WritePackets(this, a2, a3, a4, a5, a6, a7);
  v16 = *((_QWORD *)this + 15);
  if (v16)
    v17 = *(_QWORD *)(v16 + 24);
  else
    v17 = 0;
  v54 = 0;
  v19 = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 632))(this);
  if (a5 < 0 || v17 == a5)
  {
    if (a4)
    {
      v23 = a4[*a6 - 1].mStartOffset + a4[*a6 - 1].mDataByteSize;
      if (v23 <= v10)
      {
        mStartOffset = a4->mStartOffset;
        v25 = *((_QWORD *)this + 15);
        if (!v25)
        {
          v25 = operator new();
          v26 = *((_DWORD *)this + 11);
          *(_OWORD *)v25 = 0u;
          *(_OWORD *)(v25 + 16) = 0u;
          *(_DWORD *)(v25 + 32) = v26;
          *((_QWORD *)this + 15) = v25;
        }
        v52 = a6;
        if (*(_QWORD *)(v25 + 24))
        {
          if (v17 > a5)
          {
            v20 = 1885563711;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3238;
              v21 = MEMORY[0x1E0C81028];
              v22 = "%25s:%-5d  ";
              goto LABEL_25;
            }
            return v20;
          }
          v49 = a5;
          CompressedPacketTable::operator[]((uint64_t)buf, (uint64_t *)v25, v17 - 1);
          *(_QWORD *)&v55.mVariableFramesInPacket = *(_QWORD *)&buf[8];
          v27 = *(_QWORD *)buf + *(unsigned int *)&buf[12];
          v55.mStartOffset = v27;
        }
        else
        {
          v49 = a5;
          v27 = 0;
          v55.mStartOffset = 0;
          *(_QWORD *)&v55.mVariableFramesInPacket = *(_QWORD *)&a4->mVariableFramesInPacket;
        }
        v28 = *a6;
        if ((_DWORD)v28)
        {
          v29 = 0;
          v30 = a4 + 1;
          v31 = a4->mStartOffset;
          while (v28 - 1 != v29)
          {
            v31 += v30[-1].mDataByteSize;
            v32 = v30->mStartOffset;
            ++v30;
            ++v29;
            if (v32 != v31)
            {
              if (v29 >= v28)
                break;
              v33 = 0;
              v51 = 0;
              v34 = 0;
              p_mVariableFramesInPacket = &a4->mVariableFramesInPacket;
              do
              {
                v36 = v7;
                v37 = &v7[*((_QWORD *)p_mVariableFramesInPacket - 1)];
                v38 = *p_mVariableFramesInPacket;
                v39 = p_mVariableFramesInPacket[1];
                v55.mVariableFramesInPacket = *p_mVariableFramesInPacket;
                v55.mDataByteSize = v39;
                if (v53)
                  v40 = v53;
                else
                  v40 = v38;
                if (v39 <= v19)
                  v19 = v19;
                else
                  v19 = v39;
                v50 = (*(uint64_t (**)(_QWORD, _QWORD, SInt64, uint64_t, char *, unsigned int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v27 + *((_QWORD *)this + 9), v39, v37, &v54);
                v41 = v54;
                AudioFileObject::AppendPacket(this, &v55);
                v33 += v40;
                v51 += v41;
                v27 += v39;
                v55.mStartOffset = v27;
                ++v34;
                p_mVariableFramesInPacket += 4;
                v7 = v36;
              }
              while (v34 < *v52);
              goto LABEL_54;
            }
          }
        }
        v50 = (*(uint64_t (**)(_QWORD, _QWORD, SInt64, SInt64, char *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                + 56))(*((_QWORD *)this + 13), 0, v27 + *((_QWORD *)this + 9), v23 - mStartOffset, &v7[mStartOffset], &v54);
        v51 = v54;
        v42 = *a6;
        if (*a6)
        {
          v33 = 0;
          v43 = 0;
          p_mDataByteSize = &a4->mDataByteSize;
          do
          {
            v45 = *(p_mDataByteSize - 1);
            v46 = *p_mDataByteSize;
            v55.mVariableFramesInPacket = v45;
            v55.mDataByteSize = v46;
            if (v53)
              v47 = v53;
            else
              v47 = v45;
            if (v46 <= v19)
              v19 = v19;
            else
              v19 = v46;
            AudioFileObject::AppendPacket(this, &v55);
            v33 += v47;
            v27 += v46;
            v55.mStartOffset = v27;
            ++v43;
            p_mDataByteSize += 4;
          }
          while (v43 < *v52);
          LODWORD(v34) = v42;
        }
        else
        {
          LODWORD(v34) = 0;
          v33 = 0;
        }
LABEL_54:
        (*(void (**)(CAFAudioFile *, uint64_t))(*(_QWORD *)this + 248))(this, v49 + v34);
        (*(void (**)(CAFAudioFile *, uint64_t))(*(_QWORD *)this + 648))(this, v19);
        *((_QWORD *)this + 22) = (*((_QWORD *)this + 22) & ~(*((uint64_t *)this + 22) >> 63)) + v33;
        *((_BYTE *)this + 136) = 1;
        *v52 = v34;
        v48 = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 224))(this);
        (*(void (**)(CAFAudioFile *, uint64_t))(*(_QWORD *)this + 232))(this, v48 + v51);
        return v50;
      }
      v20 = 1885563711;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3225;
        v21 = MEMORY[0x1E0C81028];
        v22 = "%25s:%-5d  Packet Descriptions are out of bounds";
        goto LABEL_25;
      }
    }
    else
    {
      v20 = 1885563711;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3216;
        v21 = MEMORY[0x1E0C81028];
        v22 = "%25s:%-5d  Packet Descriptions were not provided";
        goto LABEL_25;
      }
    }
  }
  else
  {
    v20 = 1885563711;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3215;
      v21 = MEMORY[0x1E0C81028];
      v22 = "%25s:%-5d  ";
LABEL_25:
      _os_log_impl(&dword_18EE07000, v21, OS_LOG_TYPE_ERROR, v22, buf, 0x12u);
    }
  }
  return v20;
}

uint64_t CAFAudioFile::SetProperty(CAFAudioFile *this, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  double v14;
  double v15;

  if (a2 == 1751217000)
  {
    if ((_DWORD)a3 == 20)
      return (*(uint64_t (**)(CAFAudioFile *, uint64_t, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)this + 592))(this, 1751217000, 0, 20, a4);
    return 561211770;
  }
  if (a2 != 1920168566)
  {
    if (a2 != 1886283375)
      return AudioFileObject::SetProperty(this, a2, a3, a4);
    if (a3 >= 8)
    {
      v6 = *a4 + *((int *)a4 + 2) + *((int *)a4 + 3);
      v7 = *((_QWORD *)this + 22);
      if (v7 < 0 && (v8 = *((unsigned int *)this + 11), (_DWORD)v8))
      {
        v9 = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 240))(this);
        v10 = *((int *)this + 46);
        v11 = *((int *)this + 47);
        v7 = v9 * v8 - (v10 + v11);
      }
      else
      {
        v10 = *((int *)this + 46);
        v11 = *((int *)this + 47);
      }
      if (v7 + v10 + v11 != v6)
        return 4294967246;
      result = 0;
      *((_QWORD *)this + 22) = *a4;
      *((_QWORD *)this + 23) = a4[1];
      *((_BYTE *)this + 136) = 1;
      return result;
    }
    return 561211770;
  }
  result = 1869627199;
  if ((*((_BYTE *)this + 100) & 2) == 0)
    return result;
  v13 = *((_QWORD *)this + 15);
  if (v13)
  {
    if (*(_QWORD *)(v13 + 24))
      return result;
  }
  if (a3 < 8)
    return 561211770;
  v14 = *((double *)this + 25);
  v15 = *(double *)a4;
  *((_QWORD *)this + 25) = *a4;
  if (v15 != v14)
  {
    CAFAudioFile::CalcSoundDataAlign(this);
    (*(void (**)(CAFAudioFile *))(*(_QWORD *)this + 64))(this);
  }
  return 0;
}

uint64_t CAFAudioFile::UpdateDataFormat(CAFAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t result;
  unint64_t v5;
  AudioFormatFlags mFormatFlags;
  AudioFormatID mFormatID;
  uint64_t v8;
  int8x8_t v9;
  __int32 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v18;
  int8x16_t v19;
  int8x8_t v20;

  result = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 176))(this);
  if ((_DWORD)result)
    return result;
  v5 = *(_QWORD *)&a2->mSampleRate;
  mFormatID = a2->mFormatID;
  mFormatFlags = a2->mFormatFlags;
  v8 = *(_QWORD *)&a2->mBytesPerPacket;
  v9 = *(int8x8_t *)&a2->mChannelsPerFrame;
  v19.i64[0] = mFormatID;
  if (mFormatID != 1819304813)
  {
    v10 = mFormatFlags;
    goto LABEL_9;
  }
  if ((mFormatFlags & 2) != 0)
  {
    v10 = 1;
    if ((mFormatFlags & 1) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  v19.i32[1] = 2;
  v10 = 3;
  if ((mFormatFlags & 1) != 0)
LABEL_9:
    v19.i32[1] = v10;
LABEL_10:
  result = 1685348671;
  v19.i64[1] = v8;
  v18 = bswap64(v5);
  v19 = vrev32q_s8(v19);
  v20 = vrev32_s8(v9);
  v11 = *((_QWORD *)this + 18);
  v12 = *((_QWORD *)this + 19);
  v13 = v12 - v11;
  if (v12 != v11)
  {
    v14 = 0;
    v15 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
    v16 = 1;
    while (*(_DWORD *)(v11 + 24 * v14) != 1684370275)
    {
      v14 = v16;
      if (v15 <= v16++)
        return result;
    }
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unint64_t *, _QWORD))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v11 + 24 * v14 + 16) + 12, 32, &v18, 0);
  }
  return result;
}

uint64_t CAFAudioFile::GetFormatListInfo(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;

  v8 = 0;
  if ((*(unsigned int (**)(CAFAudioFile *, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)this + 560))(this, 1818522467, 0, &v8))
  {
    v5 = 0;
    v6 = 48;
LABEL_5:
    result = 0;
    *a2 = v6;
    *a3 = v5;
    return result;
  }
  if (!(v8 % 0x24))
  {
    v6 = 48 * (v8 / 0x24);
    v5 = 1;
    goto LABEL_5;
  }
  return 1667787583;
}

uint64_t CAFAudioFile::GetFormatList(CAFAudioFile *this, unsigned int *a2, AudioFormatListItem *a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  CAFAudioFormatListItem *v11;
  uint64_t v12;
  CAFAudioFormatListItem *v14;
  unsigned int v15;

  v15 = 0;
  if ((*(unsigned int (**)(CAFAudioFile *, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)this + 560))(this, 1818522467, 0, &v15))
  {
    AudioFileObject::GetFormatList(this, a2, a3);
    return v6;
  }
  else
  {
    v8 = *a2;
    if (v8 >= 0x30)
    {
      LODWORD(v9) = v15 / 0x24;
      if (v15 % 0x24)
      {
        return 1667787583;
      }
      else
      {
        bzero(a3, v8);
        CADeprecated::CAAutoFree<CAFAudioFormatListItem>::CAAutoFree(&v14, v9);
        v15 = 36 * v9;
        v7 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, _QWORD, unsigned int *, CAFAudioFormatListItem *))(*(_QWORD *)this + 576))(this, 1818522467, 0, &v15, v14);
        if (!(_DWORD)v7)
        {
          v10 = *a2 / 0x30;
          if (v9 >= v10)
            v9 = v10;
          else
            v9 = v9;
          if ((_DWORD)v9)
          {
            v11 = v14;
            v12 = v9;
            do
            {
              *(_QWORD *)&v11->mFormat.mSampleRate = bswap64(*(_QWORD *)&v11->mFormat.mSampleRate);
              *(int8x16_t *)&v11->mFormat.mFormatID = vrev32q_s8(*(int8x16_t *)&v11->mFormat.mFormatID);
              *(int8x8_t *)&v11->mFormat.mChannelsPerFrame = vrev32_s8(*(int8x8_t *)&v11->mFormat.mChannelsPerFrame);
              v11->mChannelLayoutTag = bswap32(v11->mChannelLayoutTag);
              CAFtoAF_FormatListItem((uint64_t)v11++, a3++);
              --v12;
            }
            while (v12);
          }
          v7 = 0;
          *a2 = 48 * v9;
        }
        if (v14)
          free(v14);
      }
    }
    else
    {
      return 561211770;
    }
  }
  return v7;
}

void sub_18F03E004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9)
    free(a9);
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::SetFormatList(CAFAudioFile *this, unsigned int a2, const AudioFormatListItem *a3)
{
  unsigned int v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  UInt32 *p_mChannelsPerFrame;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  void *v21;

  v6 = a2 / 0x30;
  CADeprecated::CAAutoFree<CAFAudioFormatListItem>::CAAutoFree(&v21, a2 / 0x30uLL);
  v7 = (char *)v21;
  if (a2 >= 0x30)
  {
    v8 = 0;
    if (v6 <= 1)
      v9 = 1;
    else
      v9 = v6;
    p_mChannelsPerFrame = &a3->mASBD.mChannelsPerFrame;
    v11 = 36 * v9;
    do
    {
      v12 = *(p_mChannelsPerFrame - 5);
      v13 = *(p_mChannelsPerFrame - 4);
      if (v12 == 1819304813)
      {
        v14 = *(p_mChannelsPerFrame - 4) & 2;
        if ((v13 & 1) != 0)
          v13 = v14 ^ 3;
        else
          v13 = v14 ^ 2;
      }
      v15 = *(_QWORD *)(p_mChannelsPerFrame - 7);
      v16 = *(_OWORD *)(p_mChannelsPerFrame - 3);
      v17 = &v7[v8];
      *((_QWORD *)&v16 + 1) = *(_QWORD *)p_mChannelsPerFrame;
      *((_DWORD *)v17 + 2) = v12;
      *((_DWORD *)v17 + 3) = v13;
      *((_OWORD *)v17 + 1) = v16;
      v18 = p_mChannelsPerFrame[3];
      *(_QWORD *)v17 = bswap64(v15);
      *(int8x16_t *)(v17 + 8) = vrev32q_s8(*(int8x16_t *)&v7[v8 + 8]);
      *((int8x8_t *)v17 + 3) = vrev32_s8(*(int8x8_t *)((char *)&v16 + 8));
      *((_DWORD *)v17 + 8) = bswap32(v18);
      v8 += 36;
      p_mChannelsPerFrame += 12;
    }
    while (v11 != v8);
  }
  v19 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)this + 592))(this, 1818522467, 0, 36 * v6, v7);
  if (v21)
    free(v21);
  return v19;
}

void sub_18F03E158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::UpdateSize(CAFAudioFile *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  NSObject *v31;
  const char *v32;
  _DWORD *exception;
  uint64_t v34;
  int v35;
  int v36;
  void *v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 18);
  v2 = *((_QWORD *)this + 19);
  v3 = v2 - v1;
  if (v2 == v1)
    return 0;
  v5 = 0;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
  v35 = 0;
  v34 = 0;
  v7 = 2;
  while (1)
  {
    v8 = (_DWORD *)(v1 + 24 * v5);
    if (*v8 == 1684108385)
      break;
    v5 = v7++ - 1;
    if (v6 <= v5)
      return 0;
  }
  v10 = v1 + 24 * v5;
  v12 = *(_QWORD *)(v10 + 8);
  v11 = (_QWORD *)(v10 + 8);
  v13 = v12 - 16;
  if ((*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 224))(this) >= v12 - 16)
    v14 = 0;
  else
    v14 = v13 - (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 224))(this);
  *v11 = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 224))(this) + 16;
  result = (*(uint64_t (**)(CAFAudioFile *, _DWORD *, int *))(*(_QWORD *)this + 768))(this, v8, &v35);
  if (!(_DWORD)result)
  {
    if (v14 >= 1)
    {
      v15 = *((_QWORD *)this + 18);
      if (v15)
      {
        v16 = v7 - 1;
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 19) - v15) >> 3) > v16)
        {
          while (1)
          {
            v17 = v15 + 24 * v16;
            v19 = *(_QWORD *)(v17 + 8);
            v18 = (_QWORD *)(v17 + 8);
            CADeprecated::CAAutoFree<char>::CAAutoFree(&v37, v19);
            v36 = 0;
            v20 = v15 + 24 * v16;
            v22 = *(_QWORD *)(v20 + 16);
            v21 = (_QWORD *)(v20 + 16);
            v23 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, void *, int *))(**((_QWORD **)this + 13)
                                                                                            + 48))(*((_QWORD *)this + 13), 0, v22, *(unsigned int *)v18, v37, &v36);
            if (v23)
              break;
            if (*v18 != v36)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                v39 = "CAFAudioFile.cpp";
                v40 = 1024;
                v41 = 317;
                _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  chunk size is wrong", buf, 0x12u);
              }
              exception = __cxa_allocate_exception(4uLL);
              *exception = 2003334207;
              goto LABEL_40;
            }
            *v21 -= v14;
            v23 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0);
            if (v23)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                v39 = "CAFAudioFile.cpp";
                v40 = 1024;
                v41 = 323;
                v31 = MEMORY[0x1E0C81028];
                v32 = "%25s:%-5d  MoveUpTrailingChunks write failed";
                goto LABEL_38;
              }
              goto LABEL_39;
            }
            if (v37)
              free(v37);
            v15 = *((_QWORD *)this + 18);
            if (v15)
            {
              v16 = v7++;
              if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 19) - v15) >> 3) > v16)
                continue;
            }
            goto LABEL_21;
          }
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v39 = "CAFAudioFile.cpp";
            v40 = 1024;
            v41 = 316;
            v31 = MEMORY[0x1E0C81028];
            v32 = "%25s:%-5d  MoveUpTrailingChunks read failed";
LABEL_38:
            _os_log_impl(&dword_18EE07000, v31, OS_LOG_TYPE_ERROR, v32, buf, 0x12u);
          }
LABEL_39:
          exception = __cxa_allocate_exception(4uLL);
          *exception = v23;
LABEL_40:
          __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
        }
      }
LABEL_21:
      result = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v34);
      if ((_DWORD)result)
        return result;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), v34 - v14);
    }
    if (*((_BYTE *)this + 208))
    {
      *(_DWORD *)buf = bswap32(*((_DWORD *)this + 42) + 1);
      v24 = *((_QWORD *)this + 18);
      v25 = *((_QWORD *)this + 19);
      v26 = v25 - v24;
      if (v25 != v24)
      {
        v27 = 0;
        v28 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 3);
        v29 = 1;
        while (*(_DWORD *)(v24 + 24 * v27) != 1684108385)
        {
          v27 = v29;
          if (v28 <= v29++)
            goto LABEL_30;
        }
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint8_t *, _QWORD))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v24 + 24 * v27 + 16) + 12, 4, buf, 0);
      }
    }
LABEL_30:
    CAFAudioFile::UpdatePacketTableChunk(this);
    return 0;
  }
  return result;
}

void sub_18F03E5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::PacketToRollDistance(CAFAudioFile *this, AudioPacketRollDistanceTranslation *a2)
{
  double v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  SInt64 mPacket;
  uint64_t v11;
  SInt64 i;
  SInt64 v13;
  int v14;
  char *v15;
  _QWORD v17[2];
  void *__p[3];
  void *v19[3];
  unsigned int v20;
  uint64_t v21;

  if ((*(unsigned int (**)(CAFAudioFile *))(*(_QWORD *)this + 272))(this))
  {
    v4 = *((double *)this + 3);
    v5 = *((unsigned int *)this + 10);
    if ((_DWORD)v5)
      v6 = *((_DWORD *)this + 11) == 0;
    else
      v6 = 1;
    v7 = !v6 || *((_QWORD *)this + 15) == 0;
    v8 = 0;
    v9 = -1;
    v21 = -1;
    v20 = 0;
    memset(v19, 0, sizeof(v19));
    memset(__p, 0, sizeof(__p));
    mPacket = a2->mPacket;
    v11 = (uint64_t)(v4 + v4);
    for (i = 16 * a2->mPacket; ; i -= 16)
    {
      v17[0] = 0;
      v17[1] = 0;
      if (mPacket < v9 || mPacket >= v9 + v20)
      {
        v20 = 0;
        if (CAFAudioFile::LoadPacketsForScanning((uint64_t)this, mPacket, -1, v11, &v21, &v20, v19, __p) == 1885563711
          || !v20)
        {
          break;
        }
        v9 = v21;
      }
      if (v7)
      {
        v13 = (mPacket - v9) * v5;
        v14 = v5;
      }
      else
      {
        v15 = (char *)__p[0] + i + -16 * v9;
        v14 = *((_DWORD *)v15 + 3);
        v13 = *(_QWORD *)v15;
      }
      CAFAudioFile::GetPacketDependencyInfoForPacket((uint64_t)this, (char *)v19[0] + v13, v14, v17);
      if (!LODWORD(v17[0]) && v8 >= HIDWORD(v17[0]))
        break;
      --mPacket;
      ++v8;
    }
    a2->mRollDistance = v8;
    if (__p[0])
      operator delete(__p[0]);
    if (v19[0])
      operator delete(v19[0]);
  }
  else
  {
    AudioFileObject::PacketToRollDistance(this, a2);
  }
  return 0;
}

void sub_18F03E7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::ScanForIndependentPacket(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  void *__p[3];
  void *v23[3];
  unsigned int v24;
  uint64_t v25;
  _BYTE buf[18];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
    return AudioFileObject::ScanForIndependentPacket(a1, a2, a3);
  v6 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v6)
    v7 = *(_DWORD *)(a1 + 44) == 0;
  else
    v7 = 1;
  if (v7)
    v9 = *(_QWORD *)(a1 + 120);
  else
    v9 = 0;
  v10 = *(double *)(a1 + 24);
  if (a2 == 1)
    v11 = 1;
  else
    v11 = -1;
  v25 = -1;
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  memset(__p, 0, sizeof(__p));
  v12 = *a3;
  v21 = 1885563711;
  if (v12 >= (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2987;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid packet number", buf, 0x12u);
    }
    v19 = -1;
  }
  else
  {
    v20 = a3;
    v13 = v11 + *a3;
    v14 = 16 * v13;
    v15 = -1;
    while (1)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      if (v13 < v15 || v13 >= v15 + v24)
      {
        v24 = 0;
        if (CAFAudioFile::LoadPacketsForScanning(a1, v13, a2, (uint64_t)(v10 + v10), &v25, &v24, v23, __p) == 1885563711
          || !v24)
        {
          v21 = 0;
          v19 = -1;
          a3 = v20;
          goto LABEL_31;
        }
        v15 = v25;
      }
      if (v9)
      {
        v16 = (char *)__p[0] + v14 + -16 * v15;
        v17 = *((_DWORD *)v16 + 3);
        v18 = *(_QWORD *)v16;
      }
      else
      {
        v18 = (v13 - v15) * v6;
        v17 = v6;
      }
      CAFAudioFile::GetPacketDependencyInfoForPacket(a1, (char *)v23[0] + v18, v17, buf);
      if (!*(_DWORD *)buf)
        break;
      v13 += v11;
      v14 += 16 * v11;
    }
    v21 = 0;
    a3 = v20;
    if (v13 == *v20)
      v19 = -1;
    else
      v19 = v13;
  }
LABEL_31:
  a3[1] = v19;
  if (__p[0])
    operator delete(__p[0]);
  if (v23[0])
    operator delete(v23[0]);
  return v21;
}

void sub_18F03EA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::PacketToDependencyInfo(CAFAudioFile *this, AudioPacketDependencyInfoTranslation *a2)
{
  unsigned int v4;
  SInt64 mPacket;
  UInt32 *p_mIsIndependentlyDecodable;
  UInt32 *p_mNumberPrerollPackets;
  char *begin;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t *v12;
  std::vector<char> v14;
  int v15;
  unsigned int v16;
  _QWORD v17[2];
  uint8_t buf[4];
  const char *v19;
  _DWORD v20[3];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(CAFAudioFile *))(*(_QWORD *)this + 272))(this))
  {
    AudioFileObject::PacketToDependencyInfo(this, a2);
    return 0;
  }
  v17[0] = 0;
  v17[1] = 0;
  v4 = *((_DWORD *)this + 10);
  v15 = 1;
  v16 = v4;
  memset(&v14, 0, sizeof(v14));
  mPacket = a2->mPacket;
  if (mPacket >= (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 240))(this))
  {
    v9 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v9;
    *(_DWORD *)buf = 136315394;
    v19 = "CAFAudioFile.cpp";
    LOWORD(v20[0]) = 1024;
    *(_DWORD *)((char *)v20 + 2) = 3047;
    v10 = MEMORY[0x1E0C81028];
    v11 = "%25s:%-5d  invalid packet number";
LABEL_12:
    _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
    return v9;
  }
  if (v4)
  {
    a2->mIsIndependentlyDecodable = 0;
    p_mIsIndependentlyDecodable = &a2->mIsIndependentlyDecodable;
    a2->mNumberPrerollPackets = 0;
    p_mNumberPrerollPackets = &a2->mNumberPrerollPackets;
    goto LABEL_5;
  }
  v12 = (uint64_t *)*((_QWORD *)this + 15);
  if (!v12)
  {
    v9 = 1685348671;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v9;
    *(_DWORD *)buf = 136315394;
    v19 = "CAFAudioFile.cpp";
    LOWORD(v20[0]) = 1024;
    *(_DWORD *)((char *)v20 + 2) = 3052;
    v10 = MEMORY[0x1E0C81028];
    v11 = "%25s:%-5d  no packet table for variable-sized packets";
    goto LABEL_12;
  }
  if (a2->mPacket >= v12[3])
  {
    v9 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v9;
    *(_DWORD *)buf = 136315394;
    v19 = "CAFAudioFile.cpp";
    LOWORD(v20[0]) = 1024;
    *(_DWORD *)((char *)v20 + 2) = 3053;
    v10 = MEMORY[0x1E0C81028];
    v11 = "%25s:%-5d  packet table unexpectedly truncated";
    goto LABEL_12;
  }
  CompressedPacketTable::operator[]((uint64_t)buf, v12, a2->mPacket);
  v4 = v20[0];
  v16 = v20[0];
  a2->mIsIndependentlyDecodable = 0;
  p_mIsIndependentlyDecodable = &a2->mIsIndependentlyDecodable;
  a2->mNumberPrerollPackets = 0;
  p_mNumberPrerollPackets = &a2->mNumberPrerollPackets;
  if (!v4)
  {
    begin = 0;
    goto LABEL_6;
  }
LABEL_5:
  std::vector<unsigned char>::__append(&v14, v4);
  begin = v14.__begin_;
LABEL_6:
  v9 = (*(uint64_t (**)(CAFAudioFile *, _QWORD, unsigned int *, _QWORD, SInt64, int *, char *))(*(_QWORD *)this + 88))(this, 0, &v16, 0, a2->mPacket, &v15, begin);
  if ((_DWORD)v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v19 = "CAFAudioFile.cpp";
      LOWORD(v20[0]) = 1024;
      *(_DWORD *)((char *)v20 + 2) = 3063;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadPackets failed", buf, 0x12u);
    }
  }
  else
  {
    CAFAudioFile::GetPacketDependencyInfoForPacket((uint64_t)this, begin, v16, v17);
    v9 = 0;
    *p_mIsIndependentlyDecodable = LODWORD(v17[0]) != 1;
    *p_mNumberPrerollPackets = HIDWORD(v17[0]);
  }
  if (begin)
  {
    v14.__end_ = begin;
    operator delete(begin);
  }
  return v9;
}

void sub_18F03EDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::GetMagicCookieData(CAFAudioFile *this, unsigned int *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t result;
  unsigned int v12;

  v4 = *((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 19);
  v6 = v5 - v4;
  if (v5 == v4)
  {
LABEL_5:
    *a2 = 0;
    return 1667787583;
  }
  else
  {
    v7 = 0;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 1;
    while (*(_DWORD *)(v4 + 24 * v7) != 1802857321)
    {
      v7 = v9;
      if (v8 <= v9++)
        goto LABEL_5;
    }
    v12 = *(_DWORD *)(v4 + 24 * v7 + 8) - 12;
    if (*a2 >= v12)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v4 + 24 * v7 + 16) + 12);
      *a2 = v12;
    }
    else
    {
      return 561211770;
    }
  }
  return result;
}

uint64_t CAFAudioFile::SetMagicCookieData(CAFAudioFile *this, UInt32 a2, const void *a3)
{
  uint64_t v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  UInt32 v11;
  char *v12;
  char *v13;
  UInt32 v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  std::bad_alloc *exception;
  std::bad_alloc *v20;
  _OWORD v21[2];
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  UInt32 ioPropertyDataSize;
  __int128 outPropertyData;
  __int128 v27;
  uint64_t v28;

  v6 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, _QWORD, const void *))(*(_QWORD *)this + 760))(this, 1802857321, a2, a3);
  if (!(_DWORD)v6)
  {
    v7 = *(_OWORD *)((char *)this + 40);
    outPropertyData = *(_OWORD *)((char *)this + 24);
    v27 = v7;
    v28 = *((_QWORD *)this + 7);
    v8 = DWORD1(v7);
    ioPropertyDataSize = 40;
    if (AudioFormatGetProperty(0x666D7469u, a2, a3, &ioPropertyDataSize, &outPropertyData))
    {
      v9 = *((_QWORD *)this + 32);
      *((_QWORD *)this + 32) = 0;
      if (v9)
        MEMORY[0x193FFE460](v9, 0x1000C403E1C8BA9);
    }
    else
    {
      if (DWORD2(outPropertyData) == 1700998451 || DWORD2(outPropertyData) == 1700997939)
        DWORD1(v27) = v8;
      (*(void (**)(CAFAudioFile *, __int128 *))(*(_QWORD *)this + 184))(this, &outPropertyData);
    }
    v10 = *(_OWORD *)((char *)this + 40);
    outPropertyData = *(_OWORD *)((char *)this + 24);
    v27 = v10;
    v28 = *((_QWORD *)this + 7);
    v22 = 0;
    memset(v21, 0, sizeof(v21));
    DWORD2(v21[0]) = DWORD2(outPropertyData);
    v23 = a3;
    v24 = a2;
    ioPropertyDataSize = 0;
    v6 = 0;
    if (!AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, v21, &ioPropertyDataSize))
    {
      v6 = 2003334207;
      if (ioPropertyDataSize >= 0x30)
      {
        v11 = ioPropertyDataSize;
        v12 = (char *)malloc_type_malloc(48 * (ioPropertyDataSize / 0x30uLL), 0x2C8E6D5CuLL);
        if (!v12)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v20 = std::bad_alloc::bad_alloc(exception);
        }
        v13 = v12;
        bzero(v12, 48 * (v11 / 0x30uLL));
        if (AudioFormatGetProperty(0x666C7374u, 0x38u, v21, &ioPropertyDataSize, v13))
          goto LABEL_17;
        if (ioPropertyDataSize >= 0x30)
        {
          v14 = ioPropertyDataSize / 0x30;
          if (ioPropertyDataSize >= 0x60)
            (*(void (**)(CAFAudioFile *))(*(_QWORD *)this + 208))(this);
          v15 = &v13[48 * v14 - 48];
          v16 = *(_OWORD *)v15;
          v17 = *((_OWORD *)v15 + 1);
          *((_QWORD *)this + 31) = *((_QWORD *)v15 + 4);
          *(_OWORD *)((char *)this + 232) = v17;
          *(_OWORD *)((char *)this + 216) = v16;
LABEL_17:
          free(v13);
          return 0;
        }
      }
    }
  }
  return v6;
}

uint64_t CAFAudioFile::GetMarkerListSize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t result;
  int v12;
  unsigned int v13;

  if (a3)
    *a3 = 1;
  if (!a2)
    return 0;
  v4 = *((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 19);
  v6 = v5 - v4;
  if (v5 == v4)
  {
LABEL_8:
    result = 0;
    *a2 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 1;
    while (*(_DWORD *)(v4 + 24 * v7) != 1835102827)
    {
      v7 = v9;
      if (v8 <= v9++)
        goto LABEL_8;
    }
    v12 = 4;
    v13 = 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(**((_QWORD **)this + 13)
                                                                                               + 48))(*((_QWORD *)this + 13), 0, (*(_DWORD *)(v4 + 24 * v7 + 16) + 16), 4, &v13, &v12);
    if (!(_DWORD)result)
      *a2 = 40 * bswap32(v13) + 8;
  }
  return result;
}

uint64_t CAFAudioFile::GetMarkerList(CAFAudioFile *this, unsigned int *a2, AudioFileMarkerList *a3)
{
  return (*(uint64_t (**)(CAFAudioFile *, unsigned int *, AudioFileMarkerList *, uint64_t))(*(_QWORD *)this + 792))(this, a2, a3, 1);
}

uint64_t CAFAudioFile::SetMarkerList(CAFAudioFile *this, unsigned int a2, const AudioFileMarkerList *a3)
{
  UInt32 mNumberMarkers;
  uint64_t v7;
  CFStringRef *p_mName;
  uint64_t v9;
  unsigned int Length;
  CFIndex v11;
  uint64_t v12;
  UInt32 mSMPTE_TimeType;
  char *v14;
  uint64_t v15;
  char *v16;
  int8x8_t *v17;
  uint64_t v18;
  char *v20[3];
  char *buffer;

  memset(v20, 0, sizeof(v20));
  CAFAudioFile::GetStringTable(this, (CAFStringsWrapper *)v20);
  mNumberMarkers = a3->mNumberMarkers;
  if (mNumberMarkers >= a2 / 0x28)
    v7 = a2 / 0x28;
  else
    v7 = mNumberMarkers;
  if ((_DWORD)v7)
  {
    p_mName = &a3->mMarkers[0].mName;
    v9 = v7;
    do
    {
      if (*p_mName)
      {
        Length = CFStringGetLength(*p_mName);
        v11 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
        CADeprecated::CAAutoFree<char>::CAAutoFree(&buffer, v11);
        if (CFStringGetCString(*p_mName, buffer, v11, 0x8000100u))
          CAFStringsWrapper::Put((CAFStringsWrapper *)v20, *((_DWORD *)p_mName + 2), buffer);
        if (buffer)
          free(buffer);
      }
      p_mName += 5;
      --v9;
    }
    while (v9);
  }
  v12 = CAFAudioFile::SetStringTable(this, (CAFStringsWrapper *)v20);
  if (!(_DWORD)v12)
  {
    buffer = 0;
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&buffer, (28 * v7 + 8), 0);
    mSMPTE_TimeType = a3->mSMPTE_TimeType;
    v14 = buffer;
    *(_DWORD *)buffer = a3->mSMPTE_TimeType;
    *((_DWORD *)v14 + 1) = v7;
    if ((_DWORD)v7)
    {
      v15 = 0;
      v16 = v14 + 20;
      do
      {
        *((_QWORD *)v16 - 1) = *(_QWORD *)&a3->mMarkers[v15].mFramePosition;
        *(_DWORD *)v16 = a3->mMarkers[v15].mMarkerID;
        *(AudioFile_SMPTE_Time *)(v16 + 4) = a3->mMarkers[v15].mSMPTETime;
        *((_DWORD *)v16 - 3) = a3->mMarkers[v15].mType;
        *((_DWORD *)v16 + 3) = a3->mMarkers[v15++].mChannel;
        v16 += 28;
      }
      while (v7 != v15);
      v17 = (int8x8_t *)(v14 + 20);
      v18 = v7;
      do
      {
        v17[-2].i32[1] = bswap32(v17[-2].u32[1]);
        v17[-1] = (int8x8_t)bswap64(*(_QWORD *)&v17[-1]);
        v17->i32[0] = bswap32(v17->i32[0]);
        v17[1] = vrev32_s8(v17[1]);
        v17 = (int8x8_t *)((char *)v17 + 28);
        --v18;
      }
      while (v18);
    }
    *(_DWORD *)v14 = bswap32(mSMPTE_TimeType);
    *((_DWORD *)v14 + 1) = bswap32(v7);
    v12 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, _QWORD, char *))(*(_QWORD *)this + 760))(this, 1835102827, (28 * v7 + 8), v14);
    free(v14);
  }
  buffer = (char *)v20;
  std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100]((void ***)&buffer);
  return v12;
}

void sub_18F03F43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  if (a12)
    free(a12);
  a12 = &a9;
  std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::GetRegionListSize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  CAFRegionChunk *v16;
  uint64_t v17;
  char v18;
  UInt32 mNumberRegions;
  CAFRegion *mRegions;
  unsigned int v21;
  UInt32 mNumberMarkers;
  CAFRegionChunk *v24;
  unint64_t v25;

  if (a3)
    *a3 = 1;
  if (!a2)
    return 0;
  *a2 = 0;
  v5 = *((_QWORD *)this + 18);
  v6 = *((_QWORD *)this + 19);
  v7 = v6 - v5;
  if (v6 == v5)
    return 0;
  v8 = 0;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
  v10 = 1;
  while (*(_DWORD *)(v5 + 24 * v8) != 1919248238)
  {
    v8 = v10;
    if (v9 <= v10++)
      return 0;
  }
  v12 = v5 + 24 * v8;
  v13 = *(_QWORD *)(v12 + 16);
  LODWORD(v12) = *(_DWORD *)(v12 + 8);
  v14 = (v12 - 12);
  LODWORD(v25) = v12 - 12;
  v24 = 0;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v24, v14, 1);
  v15 = *((_QWORD *)this + 13);
  v16 = v24;
  v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, size_t, CAFRegionChunk *, unint64_t *))(*(_QWORD *)v15 + 48))(v15, 0, v13 + 12, v14, v24, &v25);
  if ((_DWORD)v17)
  {
    v18 = 0;
  }
  else if (CAFRegionChunk_BtoN(v16, v25))
  {
    v18 = 0;
    v17 = 2003334207;
  }
  else
  {
    mNumberRegions = v16->mNumberRegions;
    if (mNumberRegions)
    {
      mRegions = v16->mRegions;
      v21 = 8;
      do
      {
        mNumberMarkers = mRegions->mNumberMarkers;
        v21 += 40 * mNumberMarkers + 24;
        mRegions = (CAFRegion *)((char *)mRegions + 28 * mNumberMarkers + 12);
        --mNumberRegions;
      }
      while (mNumberRegions);
    }
    else
    {
      v21 = 8;
    }
    *a2 = v21;
    v18 = 1;
  }
  if (v16)
    free(v16);
  if ((v18 & 1) != 0)
    return 0;
  return v17;
}

void sub_18F03F5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  void *v9;

  if (v9)
    free(v9);
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::GetRegionList(CAFAudioFile *this, unsigned int *a2, AudioFileRegionList *a3)
{
  return (*(uint64_t (**)(CAFAudioFile *, unsigned int *, AudioFileRegionList *, uint64_t))(*(_QWORD *)this + 800))(this, a2, a3, 1);
}

uint64_t CAFAudioFile::SetRegionList(CAFAudioFile *this, unsigned int a2, const AudioFileRegionList *a3)
{
  CAFAudioFile *v4;
  UInt32 mNumberRegions;
  AudioFileRegion *mRegions;
  int v7;
  int v8;
  AudioFileRegion *v9;
  UInt32 mNumberMarkers;
  const __CFString *mName;
  unsigned int Length;
  CFIndex v13;
  UInt32 v14;
  unint64_t v15;
  CFStringRef *p_mName;
  unsigned int v17;
  CFIndex v18;
  int v19;
  uint64_t v20;
  UInt32 mSMPTE_TimeType;
  unsigned int *v22;
  unsigned int v23;
  UInt32 *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  int8x8_t *v29;
  unsigned int v30;
  int8x8_t *v31;
  uint64_t v32;
  const AudioFileRegionList *v34;
  CAFAudioFile *v35;
  char *v36[3];
  char *buffer;

  v4 = this;
  memset(v36, 0, sizeof(v36));
  CAFAudioFile::GetStringTable(this, (CAFStringsWrapper *)v36);
  mNumberRegions = a3->mNumberRegions;
  mRegions = a3->mRegions;
  if (mNumberRegions)
  {
    v34 = a3;
    v35 = v4;
    v7 = 0;
    v8 = 0;
    v9 = a3->mRegions;
    do
    {
      mNumberMarkers = v9->mNumberMarkers;
      mName = v9->mName;
      if (mName)
      {
        Length = CFStringGetLength(mName);
        v13 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
        CADeprecated::CAAutoFree<char>::CAAutoFree(&buffer, v13);
        if (CFStringGetCString(v9->mName, buffer, v13, 0x8000100u))
          CAFStringsWrapper::Put((CAFStringsWrapper *)v36, v9->mRegionID, buffer);
        if (buffer)
          free(buffer);
        v14 = v9->mNumberMarkers;
        if (v14)
        {
          v15 = 0;
          p_mName = &v9->mMarkers[0].mName;
          do
          {
            if (*p_mName)
            {
              v17 = CFStringGetLength(*p_mName);
              v18 = CFStringGetMaximumSizeForEncoding(v17, 0x8000100u) + 1;
              CADeprecated::CAAutoFree<char>::CAAutoFree(&buffer, v18);
              if (CFStringGetCString(*p_mName, buffer, v18, 0x8000100u))
                CAFStringsWrapper::Put((CAFStringsWrapper *)v36, *((_DWORD *)p_mName + 2), buffer);
              if (buffer)
                free(buffer);
              v14 = v9->mNumberMarkers;
            }
            ++v15;
            p_mName += 5;
          }
          while (v15 < v14);
        }
      }
      else
      {
        v14 = v9->mNumberMarkers;
      }
      v8 += mNumberMarkers;
      v9 = (AudioFileRegion *)((char *)v9 + 40 * v14 + 24);
      ++v7;
    }
    while (v7 != mNumberRegions);
    v19 = 28 * v8;
    a3 = v34;
    v4 = v35;
  }
  else
  {
    v19 = 0;
  }
  v20 = CAFAudioFile::SetStringTable(v4, (CAFStringsWrapper *)v36);
  if (!(_DWORD)v20)
  {
    buffer = 0;
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&buffer, v19 + 12 * mNumberRegions + 8, 0);
    mSMPTE_TimeType = a3->mSMPTE_TimeType;
    v22 = (unsigned int *)buffer;
    *(_DWORD *)buffer = mSMPTE_TimeType;
    v22[1] = mNumberRegions;
    v23 = 0;
    if (mNumberRegions)
    {
      v24 = v22 + 2;
      do
      {
        *v24 = mRegions->mRegionID;
        v25 = mRegions->mNumberMarkers;
        v24[2] = v25;
        v24[1] = mRegions->mFlags;
        v26 = 0;
        if ((_DWORD)v25)
        {
          v27 = v24 + 6;
          do
          {
            *((_QWORD *)v27 - 1) = *(_QWORD *)((char *)&mRegions->mMarkers[0].mFramePosition + v26);
            *v27 = *(SInt32 *)((char *)&mRegions->mMarkers[0].mMarkerID + v26);
            *(AudioFile_SMPTE_Time *)(v27 + 1) = *(AudioFile_SMPTE_Time *)((char *)&mRegions->mMarkers[0].mSMPTETime
                                                                         + v26);
            *(v27 - 3) = *(UInt32 *)((char *)&mRegions->mMarkers[0].mType + v26);
            v27[3] = *(unsigned __int16 *)((char *)&mRegions->mMarkers[0].mChannel + v26);
            v26 += 40;
            v27 += 7;
          }
          while (40 * v25 != v26);
          LODWORD(v26) = mRegions->mNumberMarkers;
        }
        mRegions = (AudioFileRegion *)((char *)mRegions + 40 * v26 + 24);
        v24 += 7 * v25 + 3;
        ++v23;
      }
      while (v23 != mNumberRegions);
      v23 = v22[1];
      if (v23)
      {
        v28 = 0;
        v29 = (int8x8_t *)(v22 + 2);
        do
        {
          v30 = v29[1].u32[0];
          if (v30)
          {
            v31 = v29 + 2;
            v32 = v29[1].u32[0];
            do
            {
              v31[-1].i32[1] = bswap32(v31[-1].u32[1]);
              *v31 = (int8x8_t)bswap64((unint64_t)*v31);
              v31[1].i32[0] = bswap32(v31[1].u32[0]);
              v31[2] = vrev32_s8(v31[2]);
              v31 = (int8x8_t *)((char *)v31 + 28);
              --v32;
            }
            while (v32);
          }
          *v29 = vrev32_s8(*v29);
          v29[1].i32[0] = bswap32(v30);
          v29 = (int8x8_t *)((char *)v29 + 28 * v30 + 12);
          ++v28;
        }
        while (v28 != v23);
        v23 = v22[1];
      }
    }
    *v22 = bswap32(*v22);
    v22[1] = bswap32(v23);
    v20 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)v4 + 760))(v4, 1919248238, v19 + 12 * mNumberRegions + 8, v22);
    free(v22);
  }
  buffer = (char *)v36;
  std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100]((void ***)&buffer);
  return v20;
}

void sub_18F03F980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  void *v14;

  free(v14);
  a14 = &a11;
  std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::GetChannelLayoutSize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t result;
  int v11;

  if (a3)
    *a3 = 1;
  v3 = *((_QWORD *)this + 18);
  v4 = *((_QWORD *)this + 19) - v3;
  if (v4)
  {
    v5 = 0;
    v6 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    v7 = 1;
    while (1)
    {
      v8 = (_DWORD *)(v3 + 24 * v5);
      if (*v8 == 1667785070)
        break;
      v5 = v7;
      if (v6 <= v7++)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v8 = 0;
  }
  if (!a2)
    return 0;
  if (v8)
  {
    result = 0;
    v11 = v8[2] - 12;
  }
  else
  {
    v11 = 0;
    result = 1667787583;
  }
  *a2 = v11;
  return result;
}

uint64_t CAFAudioFile::GetChannelLayout(CAFAudioFile *this, unsigned int *a2, AudioChannelLayout *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t result;
  unsigned int v13;

  v4 = *((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 19);
  v6 = v5 - v4;
  if (v5 == v4)
  {
LABEL_5:
    *a2 = 0;
    return 1667787583;
  }
  else
  {
    v8 = 0;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v10 = 1;
    while (*(_DWORD *)(v4 + 24 * v8) != 1667785070)
    {
      v8 = v10;
      if (v9 <= v10++)
        goto LABEL_5;
    }
    v13 = *(_DWORD *)(v4 + 24 * v8 + 8) - 12;
    if (*a2 >= v13)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v4 + 24 * v8 + 16) + 12);
      if (!(_DWORD)result)
      {
        AudioChannelLayout_BtoN(a3, v13);
        result = 0;
        *a2 = v13;
      }
    }
    else
    {
      return 561211770;
    }
  }
  return result;
}

uint64_t CAFAudioFile::SetChannelLayout(CAFAudioFile *this, UInt32 a2, const AudioChannelLayout *a3)
{
  uint64_t Property;
  int8x8_t *v7;
  uint64_t v8;
  unsigned int *v9;
  void *__dst;
  UInt32 ioPropertyDataSize;
  int outPropertyData;

  ioPropertyDataSize = 4;
  outPropertyData = 0;
  Property = AudioFormatGetProperty(0x6E63686Du, a2, a3, &ioPropertyDataSize, &outPropertyData);
  if (!(_DWORD)Property)
  {
    if (outPropertyData == *((_DWORD *)this + 13))
    {
      __dst = 0;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes(&__dst, a2, 1);
      v7 = (int8x8_t *)__dst;
      memcpy(__dst, a3, a2);
      v8 = v7[1].u32[0];
      *v7 = vrev32_s8(*v7);
      v7[1].i32[0] = bswap32(v8);
      if ((_DWORD)v8)
      {
        v9 = (unsigned int *)&v7[3] + 1;
        do
        {
          *((int8x16_t *)v9 - 1) = vrev32q_s8(*((int8x16_t *)v9 - 1));
          *v9 = bswap32(*v9);
          v9 += 5;
          --v8;
        }
        while (v8);
      }
      Property = (*(uint64_t (**)(CAFAudioFile *, uint64_t, _QWORD, int8x8_t *))(*(_QWORD *)this + 760))(this, 1667785070, a2, v7);
      free(v7);
    }
    else
    {
      return 4294967246;
    }
  }
  return Property;
}

void sub_18F03FC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9)
    free(a9);
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::GetInfoDictionarySize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a2)
    *a2 = 8;
  if (a3)
    *a3 = 1;
  return 0;
}

uint64_t CAFAudioFile::GetInfoDictionary(CAFAudioFile *this, CACFDictionary *a2)
{
  AudioFileObject *v4;
  unsigned __int8 *v6;
  size_t size;

  LODWORD(size) = 0;
  if (!(*(unsigned int (**)(CAFAudioFile *, uint64_t, _QWORD, size_t *))(*(_QWORD *)this + 728))(this, 1768842863, 0, &size))
  {
    CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v6, size, 1);
    if (!(*(unsigned int (**)(CAFAudioFile *, uint64_t, _QWORD, _QWORD, size_t *, unsigned __int8 *))(*(_QWORD *)this + 744))(this, 1768842863, 0, 0, &size, v6))parseInfoStringsChunk(v6, size, a2);
    if (v6)
      free(v6);
  }
  v6 = 0;
  v4 = (AudioFileObject *)(*(uint64_t (**)(CAFAudioFile *, unsigned __int8 **))(*(_QWORD *)this + 544))(this, &v6);
  if (!(_DWORD)v4)
    AudioFileObject::AddDurationToInfoDictionary(v4, a2, (double *)&v6);
  return 0;
}

void sub_18F03FD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9)
    free(a9);
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::SetInfoDictionary(CAFAudioFile *this, CACFDictionary *a2)
{
  unsigned int v4;
  size_t v5;
  const void **v6;
  const void **v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  CACFString **v11;
  uint64_t v12;
  int StringByteLength;
  int v14;
  int v15;
  __CFString *v16;
  const __CFString *v17;
  CACFString **v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v27;
  std::bad_alloc *exception;
  std::bad_alloc *v30;
  __CFString *v31;
  __CFString *v32;
  char v33[4];

  v4 = CACFDictionary::Size(a2);
  v5 = 8 * v4;
  v6 = (const void **)malloc_type_malloc(v5, 0x2C8E6D5CuLL);
  v7 = v6;
  if (v4 && !v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v30 = std::bad_alloc::bad_alloc(exception);
  }
  *(_DWORD *)v33 = 0;
  bzero(v6, v5);
  CACFDictionary::GetKeys(a2, v7);
  v8 = 0;
  v9 = v4;
  if (v4)
  {
    LODWORD(v10) = 4;
    v11 = (CACFString **)v7;
    v12 = v9;
    do
    {
      StringByteLength = CACFString::GetStringByteLength(*v11, (const __CFString *)0x8000100);
      v14 = StringByteLength + 1;
      if (StringByteLength + 1 > v8)
        v8 = StringByteLength + 1;
      v32 = 0;
      CACFDictionary::GetString(a2, (const __CFString *)*v11, (const __CFString **)&v32);
      v15 = CACFString::GetStringByteLength((CACFString *)v32, (const __CFString *)0x8000100);
      *(_DWORD *)v33 = v15 + 1;
      if (v15 + 1 > v8)
        v8 = v15 + 1;
      v10 = (v14 + v10 + v15 + 1);
      ++v11;
      --v12;
    }
    while (v12);
  }
  else
  {
    v10 = 4;
  }
  CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v32, v10, 1);
  v16 = v32;
  LODWORD(v32->isa) = bswap32(v9);
  if ((_DWORD)v9)
  {
    v17 = (const __CFString *)((char *)&v16->isa + 4);
    v18 = (CACFString **)v7;
    do
    {
      *(_DWORD *)v33 = v8;
      CACFString::GetCString(*v18, v17, v33, (unsigned int *)0x8000100);
      v19 = *(unsigned int *)v33;
      v31 = 0;
      CACFDictionary::GetString(a2, (const __CFString *)*v18, (const __CFString **)&v31);
      v20 = (const __CFString *)((char *)v17 + v19);
      *(_DWORD *)v33 = v8;
      CACFString::GetCString((CACFString *)v31, v20, v33, (unsigned int *)0x8000100);
      v17 = (const __CFString *)((char *)v20 + *(unsigned int *)v33);
      ++v18;
      --v9;
    }
    while (v9);
  }
  v21 = *((_QWORD *)this + 18);
  v22 = *((_QWORD *)this + 19) - v21;
  if (v22)
  {
    v23 = 0;
    v24 = 0xAAAAAAAAAAAAAAABLL * (v22 >> 3);
    v25 = 1;
    while (*(_DWORD *)(v21 + 24 * v23) != 1768842863)
    {
      v23 = v25;
      if (v24 <= v25++)
        goto LABEL_21;
    }
    (*(void (**)(CAFAudioFile *, uint64_t, _QWORD))(*(_QWORD *)this + 600))(this, 1768842863, 0);
  }
LABEL_21:
  v27 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, __CFString *))(*(_QWORD *)this + 752))(this, 1768842863, v10, v32);
  if (v32)
    free(v32);
  if (v7)
    free(v7);
  return v27;
}

void sub_18F040024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  if (a11)
    free(a11);
  if (v11)
    free(v11);
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::GetSoundCheckDictionarySize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(CAFAudioFile *, unsigned int *, unsigned int *))(*(_QWORD *)this + 424))(this, a2, a3);
}

uint64_t CAFAudioFile::GetSoundCheckDictionary(CAFAudioFile *this, CACFDictionary *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  const __CFString *v7;
  __CFString *v9;
  CFMutableDictionaryRef Mutable;
  __int16 v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = 257;
  v4 = (*(uint64_t (**)(CAFAudioFile *, CFMutableDictionaryRef *))(*(_QWORD *)this + 432))(this, &Mutable);
  if (!(_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    v12[0] = CFSTR("sc ave perceived power coeff");
    v12[1] = CFSTR("sc max perceived power coeff");
    v12[2] = CFSTR("sc max perceived power msec");
    v12[3] = CFSTR("sc peak amplitude");
    v12[4] = CFSTR("sc peak amplitude msec");
    v12[5] = CFSTR("aa version");
    v12[6] = CFSTR("aa bit depth pcm master");
    v12[7] = CFSTR("aa itu loudness");
    v12[8] = CFSTR("aa ebu loudness range");
    v12[9] = CFSTR("aa ebu top of loudness range");
    v12[10] = CFSTR("aa itu true peak");
    v12[11] = CFSTR("aa ebu max momentary loudness");
    v12[12] = CFSTR("aa ebu max short-term loudness");
    v12[13] = CFSTR("aa headroom master");
    v12[14] = CFSTR("aa noise floor master");
    v12[15] = CFSTR("aa source bandwidth master");
    v9 = 0;
    do
    {
      v7 = (const __CFString *)v12[v5];
      if (CACFDictionary::GetString((CACFDictionary *)&Mutable, v7, (const __CFString **)&v9))
      {
        CACFDictionary::AddString(a2, v7, v9);
        ++v6;
      }
      ++v5;
    }
    while (v5 != 16);
    if (v6)
      v4 = 0;
    else
      v4 = 1667787583;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v4;
}

void sub_18F040224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::SetSoundCheckDictionary(CAFAudioFile *this, CACFDictionary *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[3];
  void **v9[3];
  CFMutableDictionaryRef Mutable;
  __int16 v11;

  if (!a2 || !CACFDictionary::Size(a2))
    return 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = 257;
  (*(void (**)(CAFAudioFile *, CFMutableDictionaryRef *))(*(_QWORD *)this + 432))(this, &Mutable);
  v4 = CACFDictionary::Size(a2);
  std::vector<__CFString const*>::vector(v9, v4);
  std::vector<__CFString const*>::vector(__p, v4);
  CACFDictionary::GetKeysAndValues(a2, (const void **)v9[0], (const void **)__p[0]);
  if (v4)
  {
    v5 = 0;
    while ((CACFDictionary::AddString((CACFDictionary *)&Mutable, (const __CFString *)v9[0][v5], *(const __CFString **)((char *)__p[0] + v5 * 8)) & 1) != 0)
    {
      if (v4 == ++v5)
        goto LABEL_7;
    }
    v6 = 2003334207;
  }
  else
  {
LABEL_7:
    v6 = (*(uint64_t (**)(CAFAudioFile *, CFMutableDictionaryRef *))(*(_QWORD *)this + 440))(this, &Mutable);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v6;
}

void sub_18F04037C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a15);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::GetLoudnessInfo(CAFAudioFile *this, CACFDictionary *a2)
{
  uint64_t v4;
  const __CFDictionary *v5;
  CFTypeID v6;
  CFDictionaryRef theDict;
  char v9;
  CFDataRef v10;
  char v11;
  UInt8 *bytes;
  unsigned int v13;

  v13 = 0;
  v4 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)this + 728))(this, 1819243876, 0, &v13);
  if (!(_DWORD)v4)
  {
    CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&bytes, v13, 1);
    v4 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, _QWORD, _QWORD, unsigned int *, UInt8 *))(*(_QWORD *)this + 744))(this, 1819243876, 0, 0, &v13, bytes);
    if (!(_DWORD)v4)
    {
      v11 = 1;
      v10 = CFDataCreate(0, bytes, v13);
      v5 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10, 0, 0, 0);
      v4 = 1667787583;
      if (v5)
      {
        theDict = v5;
        v9 = 1;
        v6 = CFGetTypeID(v5);
        if (v6 == CFDictionaryGetTypeID())
        {
          CACFDictionary::SetCFMutableDictionaryFromCopy(a2, theDict, 1);
          v4 = 0;
        }
        CACFObject<void const*>::~CACFObject((uint64_t)&theDict);
      }
      CACFData::~CACFData((CACFData *)&v10);
    }
    if (bytes)
      free(bytes);
  }
  return v4;
}

void sub_18F040500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13)
{
  CACFData::~CACFData((CACFData *)&a11);
  if (a13)
    free(a13);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::SetLoudnessInfo(CAFAudioFile *this, CFPropertyListRef *a2)
{
  const __CFData *Data;
  unsigned int Length;
  const UInt8 *BytePtr;
  uint64_t v6;
  CFDataRef theData;
  char v9;

  Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *a2, kCFPropertyListXMLFormat_v1_0, 0, 0);
  theData = Data;
  v9 = 1;
  if (Data)
  {
    Length = CFDataGetLength(Data);
    BytePtr = CFDataGetBytePtr(theData);
    v6 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, _QWORD, const UInt8 *))(*(_QWORD *)this + 760))(this, 1819243876, Length, BytePtr);
  }
  else
  {
    v6 = 1667787583;
  }
  CACFData::~CACFData((CACFData *)&theData);
  return v6;
}

void sub_18F0405E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFData::~CACFData((CACFData *)&a9);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::GetLoudnessInfoSize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  *a2 = 8;
  *a3 = 1;
  return 0;
}

uint64_t CAFAudioFile::CountUserData(CAFAudioFile *this, int a2, unsigned int *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  int v9;

  v4 = (char *)*((_QWORD *)this + 18);
  v3 = (char *)*((_QWORD *)this + 19);
  v5 = v3 - v4;
  if (v3 == v4)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    v8 = 1;
    do
    {
      v9 = *(_DWORD *)v4;
      v4 += 24;
      if (v9 == a2)
        ++v6;
    }
    while (v7 > v8++);
  }
  *a3 = v6;
  return 0;
}

uint64_t CAFAudioFile::GetUserDataSize(CAFAudioFile *this, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  return (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)this + 728))(this, a2, a3, a4);
}

uint64_t CAFAudioFile::GetUserDataSize64(CAFAudioFile *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, unint64_t *))(*(_QWORD *)this + 736))(this, a2, a3, a4);
}

uint64_t CAFAudioFile::GetUserData(CAFAudioFile *this, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5)
{
  return (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, _QWORD, unsigned int *, void *))(*(_QWORD *)this + 744))(this, a2, a3, 0, a4, a5);
}

uint64_t CAFAudioFile::GetUserDataAtOffset(CAFAudioFile *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void *a6)
{
  return (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, uint64_t, unsigned int *, void *))(*(_QWORD *)this + 744))(this, a2, a3, a4, a5, a6);
}

uint64_t CAFAudioFile::SetUserData(CAFAudioFile *this, uint64_t a2, int a3, uint64_t a4, const void *a5)
{
  uint64_t result;

  result = CAFAudioFile::ReplaceChunk(this, a2, a3, a4, a5);
  if ((_DWORD)result == -1)
    return (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, const void *))(*(_QWORD *)this + 752))(this, a2, a4, a5);
  return result;
}

uint64_t CAFAudioFile::RemoveUserData(CAFAudioFile *this, int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  BOOL v13;
  BOOL v14;

  result = 1667787583;
  v5 = *((_QWORD *)this + 18);
  v6 = *((_QWORD *)this + 19);
  v7 = v6 - v5;
  if (v6 != v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
    v11 = 1;
    do
    {
      v12 = (_DWORD *)(v5 + 24 * v8);
      if (*v12 == a2)
      {
        if (v9 == a3)
        {
          *v12 = 1718773093;
          CAFAudioFile::ConsolidateFillerChunks(this);
          return 0;
        }
        ++v9;
      }
      v8 = v11;
      v13 = v10 >= v11;
      v14 = v10 == v11++;
    }
    while (!v14 && v13);
  }
  return result;
}

uint64_t CAFAudioFile::IsValidFilePosition(CAFAudioFile *this, uint64_t a2)
{
  if (a2 < 0)
    return 4294967246;
  else
    return 0;
}

uint64_t CAFAudioFile::GetSourceBitDepth(CAFAudioFile *this, int *a2)
{
  int SourceBitDepthFromASBD;
  __CFString **v6;
  CFMutableDictionaryRef Mutable;
  __int16 v8;

  SourceBitDepthFromASBD = GetSourceBitDepthFromASBD((const AudioStreamBasicDescription *)*((unsigned int *)this + 8), *((_DWORD *)this + 9));
  *a2 = SourceBitDepthFromASBD;
  if (!SourceBitDepthFromASBD)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = 257;
    if (!(*(unsigned int (**)(CAFAudioFile *, CFMutableDictionaryRef *))(*(_QWORD *)this + 432))(this, &Mutable))
    {
      v6 = 0;
      if (CACFDictionary::GetString((CACFDictionary *)&Mutable, CFSTR("source bit depth"), (const __CFString **)&v6))*a2 = BitDepthFromCFString((const __CFString *)v6);
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  return 0;
}

void sub_18F040858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::SetSourceBitDepth(CAFAudioFile *this, int a2)
{
  const __CFString *CFStringFromBitDepth;
  char v5;
  uint64_t v6;
  CFMutableDictionaryRef Mutable;
  __int16 v9;

  if (!a2)
    return 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = 257;
  (*(void (**)(CAFAudioFile *, CFMutableDictionaryRef *))(*(_QWORD *)this + 432))(this, &Mutable);
  CFStringFromBitDepth = CreateCFStringFromBitDepth(a2);
  if (CFStringFromBitDepth)
  {
    v5 = CACFDictionary::AddString((CACFDictionary *)&Mutable, CFSTR("source bit depth"), CFStringFromBitDepth);
    CFRelease(CFStringFromBitDepth);
    if ((v5 & 1) != 0)
      v6 = (*(uint64_t (**)(CAFAudioFile *, CFMutableDictionaryRef *))(*(_QWORD *)this + 440))(this, &Mutable);
    else
      v6 = 2003334207;
  }
  else
  {
    v6 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v6;
}

void sub_18F040954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::GetUserChunkSize64(CAFAudioFile *this, int a2, int a3, unint64_t *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;

  result = 1667787583;
  v8 = (char *)this + 144;
  v6 = *((_QWORD *)this + 18);
  v7 = *((_QWORD *)v8 + 1);
  v9 = v7 - v6;
  if (v7 != v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    v13 = 1;
    do
    {
      if (*(_DWORD *)(v6 + 24 * v10) == a2)
      {
        if (v11 == a3)
        {
          result = 0;
          *a4 = *(_QWORD *)(v6 + 24 * v10 + 8) - 12;
          return result;
        }
        ++v11;
      }
      v10 = v13;
    }
    while (v12 > v13++);
  }
  return result;
}

uint64_t CAFAudioFile::GetUserChunk(CAFAudioFile *this, int a2, int a3, uint64_t a4, unsigned int *a5, void *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  if (a4 < 0)
    return 4294967256;
  v6 = 1667787583;
  v7 = *((_QWORD *)this + 18);
  v8 = *((_QWORD *)this + 19);
  v9 = v8 - v7;
  if (v8 == v7)
    return v6;
  v11 = 0;
  v12 = 0;
  v13 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  v14 = 1;
  while (*(_DWORD *)(v7 + 24 * v11) != a2)
  {
LABEL_7:
    v11 = v14;
    v15 = v13 > v14++;
    if (!v15)
      return v6;
  }
  if (v12 != a3)
  {
    ++v12;
    goto LABEL_7;
  }
  v17 = *a5;
  if (!(_DWORD)v17)
    return 561211770;
  v18 = v7 + 24 * v11;
  v19 = *(_QWORD *)(v18 + 8) - 12;
  v15 = v19 <= a4;
  v20 = v19 - a4;
  if (v15)
    return 4294967256;
  v21 = *(_QWORD *)(v18 + 16);
  if (v20 <= v17)
    v17 = v20;
  else
    v17 = v17;
  v22 = v17;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, void *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, a4 + v21 + 12, v17, a6, &v22);
  v6 = 0;
  *a5 = v22;
  return v6;
}

uint64_t CAFAudioFile::AddUserChunk(CAFAudioFile *this, int a2, unsigned int a3, const void *a4)
{
  uint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  char *v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  uint64_t v43;

  v41 = 0;
  LODWORD(v42) = a2;
  v6 = a3 + 12;
  *((_QWORD *)&v42 + 1) = v6;
  v7 = *((_QWORD *)this + 18);
  v8 = (char **)((char *)this + 144);
  v9 = *((_QWORD *)this + 19) - v7;
  if (!v9)
    goto LABEL_18;
  LODWORD(v10) = 0;
  v11 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  v12 = (_QWORD *)(v7 + 8);
  v13 = 0x7FFFFFFF;
  v14 = -1;
  do
  {
    if (*((_DWORD *)v12 - 2) == 1718773093)
    {
      v15 = *v12 - v6;
      v16 = *v12 != v6 && v15 <= 12;
      v17 = !v16;
      if (v17 && v15 < v13)
      {
        v13 = *(_DWORD *)v12 - v6;
        v14 = v10;
      }
    }
    v10 = (v10 + 1);
    v12 += 3;
  }
  while (v11 > v10);
  if (v14 == -1)
  {
LABEL_18:
    v40 = 0;
    result = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v40);
    if (!(_DWORD)result)
    {
      v43 = v40;
      v23 = *((_QWORD *)this + 19);
      v22 = *((_QWORD *)this + 20);
      if (v23 >= v22)
      {
        v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)*v8) >> 3);
        v30 = v29 + 1;
        if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)*v8) >> 3);
        if (2 * v31 > v30)
          v30 = 2 * v31;
        if (v31 >= 0x555555555555555)
          v32 = 0xAAAAAAAAAAAAAAALL;
        else
          v32 = v30;
        if (v32)
          v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v32);
        else
          v33 = 0;
        v34 = v32 + 24 * v29;
        v35 = v32 + 24 * v33;
        v36 = v42;
        *(_QWORD *)(v34 + 16) = v43;
        *(_OWORD *)v34 = v36;
        v25 = v34 + 24;
        v38 = (char *)*((_QWORD *)this + 18);
        v37 = (char *)*((_QWORD *)this + 19);
        if (v37 != v38)
        {
          do
          {
            v39 = *(_OWORD *)(v37 - 24);
            *(_QWORD *)(v34 - 8) = *((_QWORD *)v37 - 1);
            *(_OWORD *)(v34 - 24) = v39;
            v34 -= 24;
            v37 -= 24;
          }
          while (v37 != v38);
          v37 = *v8;
        }
        *((_QWORD *)this + 18) = v34;
        *((_QWORD *)this + 19) = v25;
        *((_QWORD *)this + 20) = v35;
        if (v37)
          operator delete(v37);
      }
      else
      {
        v24 = v42;
        *(_QWORD *)(v23 + 16) = v43;
        *(_OWORD *)v23 = v24;
        v25 = v23 + 24;
      }
      *((_QWORD *)this + 19) = v25;
      result = (*(uint64_t (**)(CAFAudioFile *, __int128 *, int *))(*(_QWORD *)this + 768))(this, &v42, &v41);
      if (!(_DWORD)result)
      {
        result = (*(uint64_t (**)(CAFAudioFile *, __int128 *, const void *, int *))(*(_QWORD *)this + 776))(this, &v42, a4, &v41);
        if (!(_DWORD)result)
        {
          if ((*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 224))(this))
            *((_DWORD *)this + 20) = 0;
          else
            (*(void (**)(CAFAudioFile *))(*(_QWORD *)this + 64))(this);
          return 0;
        }
      }
    }
  }
  else
  {
    v18 = v7 + 24 * v14;
    v19 = *(_QWORD *)(v18 + 8);
    v20 = v19 - v6;
    if (v19 == v6)
    {
      *(_DWORD *)v18 = a2;
      result = (*(uint64_t (**)(CAFAudioFile *, uint64_t, int *))(*(_QWORD *)this + 768))(this, v7 + 24 * v14, &v41);
      if (!(_DWORD)result)
      {
        result = (*(uint64_t (**)(CAFAudioFile *, uint64_t, const void *, int *))(*(_QWORD *)this + 776))(this, v18, a4, &v41);
        if (!(_DWORD)result)
          return 0;
      }
    }
    else
    {
      v26 = v14;
      v27 = v7 + 24 * v14;
      v43 = *(_QWORD *)(v27 + 16);
      v28 = v43;
      *(_QWORD *)(v18 + 8) = v20;
      *(_QWORD *)(v27 + 16) = v28 + v6;
      result = (*(uint64_t (**)(CAFAudioFile *, uint64_t, int *))(*(_QWORD *)this + 768))(this, v18, &v41);
      if (!(_DWORD)result)
      {
        result = (*(uint64_t (**)(CAFAudioFile *, __int128 *, int *))(*(_QWORD *)this + 768))(this, &v42, &v41);
        if (!(_DWORD)result)
        {
          result = (*(uint64_t (**)(CAFAudioFile *, __int128 *, const void *, int *))(*(_QWORD *)this + 776))(this, &v42, a4, &v41);
          if (!(_DWORD)result)
          {
            std::vector<Chunk64Info>::insert((uint64_t)v8, &(*v8)[24 * v26], (unint64_t)&v42);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CAFAudioFile::AddUniqueChunk(CAFAudioFile *this, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result;

  result = CAFAudioFile::ReplaceChunk(this, a2, 0, a3, a4);
  if ((_DWORD)result == -1)
    return (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, const void *))(*(_QWORD *)this + 752))(this, a2, a3, a4);
  return result;
}

uint64_t CAFAudioFile::WriteChunkHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  unsigned int v7;
  unint64_t v8;

  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if (v5 >= 0)
    v5 -= 12;
  v7 = bswap32(*(_DWORD *)a2);
  v8 = bswap64(v5);
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, uint64_t))(**(_QWORD **)(a1 + 104)
                                                                                              + 56))(*(_QWORD *)(a1 + 104), 0, v4, 12, &v7, a3);
}

uint64_t CAFAudioFile::WriteChunkData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 56))(*(_QWORD *)(a1 + 104), 0, *(_QWORD *)(a2 + 16) + 12, (*(_DWORD *)(a2 + 8) - 12), a3, a4);
}

uint64_t CAFAudioFile::GetMarkerList(CAFAudioFile *this, unsigned int *a2, AudioFileMarkerList *a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unsigned int *v21;
  CAFStringsWrapper *v22;
  UInt32 v23;
  unsigned int v24;
  uint64_t v25;
  int8x8_t *v26;
  uint64_t v27;
  AudioFileMarker *v28;
  unsigned int v29;
  unint64_t v30;
  _QWORD v32[3];
  unsigned int *v33;
  unsigned int v34;
  void **v35;

  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)this + 18);
  v6 = *((_QWORD *)this + 19);
  v7 = v6 - v5;
  if (v6 == v5)
    return 0;
  v12 = 0;
  v13 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
  v14 = 1;
  while (*(_DWORD *)(v5 + 24 * v12) != 1835102827)
  {
    v12 = v14;
    if (v13 <= v14++)
      return 0;
  }
  v17 = v5 + 24 * v12;
  v18 = *(_QWORD *)(v17 + 16);
  LODWORD(v17) = *(_DWORD *)(v17 + 8);
  v19 = (v17 - 12);
  v34 = v17 - 12;
  v33 = 0;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v33, v19, 1);
  v20 = v18 + 12;
  v21 = v33;
  v16 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, size_t, unsigned int *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v20, v19, v33, &v34);
  if ((_DWORD)v16)
  {
    if (!v21)
      return v16;
  }
  else
  {
    v23 = bswap32(*v21);
    v24 = bswap32(v21[1]);
    if (v34 >= 8)
      LODWORD(v25) = ((unint64_t)v34 - 8) / 0x1C;
    else
      LODWORD(v25) = 0;
    if (v25 >= v24)
      v25 = v24;
    else
      v25 = v25;
    *v21 = v23;
    v21[1] = v25;
    if ((_DWORD)v25)
    {
      v26 = (int8x8_t *)(v21 + 5);
      v27 = v25;
      do
      {
        v26[-2].i32[1] = bswap32(v26[-2].u32[1]);
        v26[-1] = (int8x8_t)bswap64(*(_QWORD *)&v26[-1]);
        v26->i32[0] = bswap32(v26->i32[0]);
        v26[1] = vrev32_s8(v26[1]);
        v26 = (int8x8_t *)((char *)v26 + 28);
        --v27;
      }
      while (v27);
    }
    v28 = 0;
    v29 = (v4 - 8) / 0x28;
    if (v4 < 8)
      v29 = 0;
    if (v29 >= v25)
      v30 = v25;
    else
      v30 = v29;
    a3->mSMPTE_TimeType = v23;
    a3->mNumberMarkers = v30;
    memset(v32, 0, sizeof(v32));
    if (a4)
    {
      if (CAFAudioFile::GetStringTable(this, (CAFStringsWrapper *)v32))
        v28 = 0;
      else
        v28 = (AudioFileMarker *)v32;
    }
    CAFAudioFile::ConvertMarkers((CAFAudioFile *)v30, (uint64_t)(v21 + 2), (CAFMarker *)a3->mMarkers, v28, v22);
    *a2 = 40 * v30 + 8;
    v35 = (void **)v32;
    std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100](&v35);
  }
  free(v21);
  return v16;
}

void sub_18F041160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  void *v14;

  a14 = (void **)&a9;
  std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100](&a14);
  free(v14);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::GetRegionList(CAFAudioFile *this, unsigned int *a2, AudioFileRegionList *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  CAFRegionChunk *v19;
  CAFStringsWrapper *v20;
  UInt32 mNumberRegions;
  _BOOL4 v22;
  AudioFileRegion *mRegions;
  CAFRegion *v24;
  const __CFAllocator *v25;
  int mRegionID;
  char *v27;
  AudioFileMarker *v28;
  int v30;
  CAFStringsWrapper *v31;
  uint64_t v32;
  uint64_t v33;
  CAFRegionChunk *v34;
  _DWORD v35[3];

  *a2 = 0;
  v4 = *((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 19);
  v6 = v5 - v4;
  if (v5 == v4)
    return 0;
  v11 = 0;
  v12 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  v13 = 1;
  while (*(_DWORD *)(v4 + 24 * v11) != 1919248238)
  {
    v11 = v13;
    if (v12 <= v13++)
      return 0;
  }
  v16 = v4 + 24 * v11;
  v17 = *(_QWORD *)(v16 + 16);
  LODWORD(v16) = *(_DWORD *)(v16 + 8);
  v18 = (v16 - 12);
  v35[0] = v16 - 12;
  v34 = 0;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v34, v18, 1);
  v19 = v34;
  v15 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, size_t, CAFRegionChunk *, _DWORD *))(**((_QWORD **)this + 13)
                                                                                               + 48))(*((_QWORD *)this + 13), 0, v17 + 12, v18, v34, v35);
  if (!(_DWORD)v15)
  {
    CAFRegionChunk_BtoN(v19, v35[0]);
    mNumberRegions = v19->mNumberRegions;
    a3->mNumberRegions = mNumberRegions;
    a3->mSMPTE_TimeType = v19->mSMPTE_TimeType;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    if (a4)
      v22 = CAFAudioFile::GetStringTable(this, (CAFStringsWrapper *)&v31) == 0;
    else
      v22 = 0;
    mRegions = a3->mRegions;
    if (mNumberRegions)
    {
      v30 = (int)a3;
      v24 = v19->mRegions;
      v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        mRegionID = v24->mRegionID;
        mRegions->mRegionID = v24->mRegionID;
        *(_QWORD *)&mRegions->mFlags = *(_QWORD *)&v24->mFlags;
        if (v22)
        {
          v27 = CAFStringsWrapper::Get(v31, v32, mRegionID);
          if (v27)
            mRegions->mName = CFStringCreateWithCString(v25, v27, 0x8000100u);
          v28 = (AudioFileMarker *)&v31;
        }
        else
        {
          v28 = 0;
        }
        CAFAudioFile::ConvertMarkers((CAFAudioFile *)v24->mNumberMarkers, (uint64_t)v24->mMarkers, (CAFMarker *)mRegions->mMarkers, v28, v20);
        mRegions = (AudioFileRegion *)((char *)mRegions + 40 * mRegions->mNumberMarkers + 24);
        v24 = (CAFRegion *)((char *)v24 + 28 * v24->mNumberMarkers + 12);
        --mNumberRegions;
      }
      while (mNumberRegions);
      v19 = v34;
      LODWORD(a3) = v30;
    }
    *a2 = (_DWORD)mRegions - (_DWORD)a3;
    *(_QWORD *)&v35[1] = &v31;
    std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35[1]);
    v15 = 0;
  }
  if (v19)
    free(v19);
  return v15;
}

void sub_18F0413AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, char *a16)
{
  a16 = &a11;
  std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a14)
    free(a14);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::GetStringTable(CAFAudioFile *this, CAFStringsWrapper *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v10;
  int v11;
  size_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  unsigned int *v27;
  unsigned int v28;
  int v29;
  std::string __p;

  v2 = *((_QWORD *)this + 18);
  v3 = *((_QWORD *)this + 19) - v2;
  if (v3)
  {
    v6 = 0;
    v7 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
    v8 = 1;
    while (*(_DWORD *)(v2 + 24 * v6) != 1937011303)
    {
      v6 = v8;
      if (v7 <= v8++)
        return 0;
    }
    v11 = *(_DWORD *)(v2 + 24 * v6 + 8);
    v12 = (v11 - 12);
    v28 = v11 - 12;
    v27 = 0;
    CADeprecated::CAAutoFree<CAFStrings>::allocBytes((void **)&v27, v12);
    v13 = *((_QWORD *)this + 13);
    v14 = v27;
    v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, size_t, unsigned int *, unsigned int *))(*(_QWORD *)v13 + 48))(v13, 0, *(_QWORD *)(v2 + 24 * v6 + 16) + 12, v12, v27, &v28);
    if ((_DWORD)v10)
    {
      if (!v14)
        return v10;
      goto LABEL_35;
    }
    if (v28 < 4)
    {
      v10 = 2003334207;
      if (!v14)
        return v10;
      goto LABEL_35;
    }
    v15 = bswap32(*v14);
    v16 = ((unint64_t)v28 - 4) / 0xC;
    if (v15 >= v16)
      v17 = v16;
    else
      v17 = v15;
    *v14 = v17;
    if ((_DWORD)v17)
    {
      v18 = (unint64_t *)(v14 + 2);
      v19 = v17;
      do
      {
        *((_DWORD *)v18 - 1) = bswap32(*((_DWORD *)v18 - 1));
        *v18 = bswap64(*v18);
        v18 = (unint64_t *)((char *)v18 + 12);
        --v19;
      }
      while (v19);
    }
    v20 = *(_QWORD *)a2;
    v21 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 == v21)
    {
      if (!(_DWORD)v17)
      {
LABEL_34:
        v10 = 0;
LABEL_35:
        free(v14);
        return v10;
      }
    }
    else
    {
      while (v21 != v20)
      {
        if (*(char *)(v21 - 1) < 0)
          operator delete(*(void **)(v21 - 24));
        v21 -= 32;
      }
      *((_QWORD *)a2 + 1) = v20;
      if (!*v14)
        goto LABEL_34;
    }
    v22 = 0;
    v23 = v14 + 2;
    do
    {
      memset(&__p, 0, sizeof(__p));
      v29 = *((_DWORD *)v23 - 1);
      std::string::__assign_external(&__p, (const std::string::value_type *)v14 + (12 * v17 + 4) + *v23);
      v24 = *((_QWORD *)a2 + 1);
      if (v24 >= *((_QWORD *)a2 + 2))
      {
        v25 = std::vector<CAFStringsWrapper::CAFStringWrapper>::__push_back_slow_path<CAFStringsWrapper::CAFStringWrapper const&>((unint64_t *)a2, (uint64_t)&v29);
      }
      else
      {
        std::vector<CAFStringsWrapper::CAFStringWrapper>::__construct_one_at_end[abi:ne180100]<CAFStringsWrapper::CAFStringWrapper const&>((uint64_t)a2, (uint64_t)&v29);
        v25 = (char *)(v24 + 32);
      }
      *((_QWORD *)a2 + 1) = v25;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v23 = (_QWORD *)((char *)v23 + 12);
      ++v22;
    }
    while (v22 < *v14);
    goto LABEL_34;
  }
  return 0;
}

void sub_18F0416A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (v17)
    free(v17);
  _Unwind_Resume(exception_object);
}

double CAFAudioFile::ConvertMarkers(CAFAudioFile *this, uint64_t a2, CAFMarker *a3, AudioFileMarker *a4, CAFStringsWrapper *a5)
{
  uint64_t v7;
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  double result;

  if ((_DWORD)this)
  {
    v7 = 0;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = 40 * this;
    v10 = a2 + 12;
    do
    {
      v11 = (char *)a3 + v7;
      *(Float64 *)((char *)&a3->mFramePosition + v7 + 4) = 0.0;
      if (a4)
      {
        v12 = CAFStringsWrapper::Get(*(CAFStringsWrapper **)&a4->mFramePosition, (uint64_t)a4->mName, *(_DWORD *)v10);
        if (v12)
          *((_QWORD *)v11 + 1) = CFStringCreateWithCString(v8, v12, 0x8000100u);
      }
      *((_DWORD *)v11 + 4) = *(_DWORD *)v10;
      result = *(double *)(v10 - 8);
      *(double *)v11 = result;
      *(_QWORD *)(v11 + 20) = *(_QWORD *)(v10 + 4);
      *((_DWORD *)v11 + 7) = *(_DWORD *)(v10 - 12);
      *((_WORD *)v11 + 17) = *(_DWORD *)(v10 + 12);
      v7 += 40;
      v10 += 28;
    }
    while (v9 != v7);
  }
  return result;
}

uint64_t CAFAudioFile::ParsePacketTableChunk(CAFAudioFile *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int8x8_t *v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x8_t v18;
  uint64_t v19;
  int8x8_t *v20;
  unint64_t v21;
  uint64_t v22;
  SInt64 v23;
  uint64_t v24;
  UInt32 v25;
  char v26;
  UInt32 v27;
  UInt32 v28;
  uint64_t v29;
  char *v30;
  char v31;
  _DWORD *exception;
  uint64_t v33;
  unsigned int v34;
  int8x8_t *v35;
  AudioStreamPacketDescription v36;

  v1 = *((_QWORD *)this + 18);
  v2 = *((_QWORD *)this + 19) - v1;
  if (!v2)
    return 0;
  v4 = 0;
  v5 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
  v6 = 1;
  while (*(_DWORD *)(v1 + 24 * v4) != 1885432692)
  {
    v4 = v6;
    if (v5 <= v6++)
      return 0;
  }
  v8 = 1667787583;
  v10 = *(_QWORD *)(v1 + 24 * v4 + 8);
  if ((unint64_t)(v10 - 12) >= 0x18)
  {
    v11 = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 224))(this);
    v36.mStartOffset = 0;
    *(_QWORD *)&v36.mVariableFramesInPacket = 0;
    AudioFileObject::DeletePacketTable(this);
    if (*((_QWORD *)this + 15))
    {
      v12 = *((_DWORD *)this + 11);
    }
    else
    {
      v13 = operator new();
      v12 = *((_DWORD *)this + 11);
      *(_OWORD *)v13 = 0u;
      *(_OWORD *)(v13 + 16) = 0u;
      *(_DWORD *)(v13 + 32) = v12;
      *((_QWORD *)this + 15) = v13;
    }
    v35 = 0;
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v35, v10 - 12, 0);
    v14 = v35;
    v15 = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 632))(this);
    v34 = 0;
    v16 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, int8x8_t *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                  + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v1 + 24 * v4 + 16) + 12, v10 - 12, v14, &v34);
    if ((_DWORD)v16)
      goto LABEL_44;
    if (v34 < 0x18)
      goto LABEL_13;
    v17 = vrev64q_s8(*(int8x16_t *)v14->i8);
    *(int8x16_t *)v14->i8 = v17;
    v18 = vrev32_s8(v14[2]);
    v14[2] = v18;
    *((_QWORD *)this + 22) = v17.i64[1];
    *((int8x8_t *)this + 23) = v18;
    if (!*((_DWORD *)this + 10) || !*((_DWORD *)this + 11))
    {
      if (v17.i64[0] > v10 - 36)
      {
LABEL_13:
        v16 = 1667787583;
        if (!v14)
          return v16;
        goto LABEL_45;
      }
      (*(void (**)(CAFAudioFile *))(*(_QWORD *)this + 248))(this);
      if ((v11 & 0x8000000000000000) == 0)
      {
        v20 = v14 + 3;
        v21 = (unint64_t)&v14[-1] + v10 - 4;
        if ((unint64_t)&v14[3] < v21)
        {
          v22 = 0;
          v23 = 0;
          do
          {
            if (v22 >= *(_QWORD *)v14)
              break;
            v24 = 0;
            v25 = 0;
            v36.mStartOffset = v23;
            do
            {
              if ((unint64_t)v20 + v24 >= v21)
              {
LABEL_47:
                exception = __cxa_allocate_exception(4uLL);
                *exception = 1667787583;
                __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
              }
              if ((_DWORD)v24 == 5)
              {
LABEL_43:
                v16 = 1885563711;
                goto LABEL_44;
              }
              v26 = v20->i8[v24];
              v27 = v26 & 0x7F | (v25 << 7);
              ++v24;
              v25 = v27;
            }
            while (v26 < 0);
            v36.mDataByteSize = v27;
            v15 = v27 <= v15 ? v15 : v27;
            if (v12)
            {
              v33 = v22;
              v28 = 0;
              v20 = (int8x8_t *)((char *)v20 + v24);
            }
            else
            {
              v29 = 0;
              v28 = 0;
              v30 = (char *)v20 + v24;
              do
              {
                if ((unint64_t)&v30[v29] >= v21)
                  goto LABEL_47;
                if ((_DWORD)v29 == 5)
                  goto LABEL_43;
                v31 = v30[v29];
                v28 = v31 & 0x7F | (v28 << 7);
                ++v29;
              }
              while (v31 < 0);
              v33 = v22;
              v20 = (int8x8_t *)((char *)v20 + v24 + v29);
            }
            v36.mVariableFramesInPacket = v28;
            AudioFileObject::AppendPacket(this, &v36);
            v23 += v27;
            if (v23 > v11)
              break;
            v22 = v33 + 1;
          }
          while ((unint64_t)v20 < v21);
        }
      }
    }
    v19 = *((_QWORD *)this + 15);
    if (v19)
      v19 = *(_QWORD *)(v19 + 24);
    v16 = 1667787583;
    if (*v14 != v19)
    {
LABEL_44:
      if (!v14)
        return v16;
    }
    else
    {
      (*(void (**)(CAFAudioFile *, uint64_t))(*(_QWORD *)this + 648))(this, v15);
      v16 = 0;
    }
LABEL_45:
    free(v14);
    return v16;
  }
  return v8;
}

void sub_18F041B00(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!a12)
    JUMPOUT(0x18F041AD8);
  JUMPOUT(0x18F041AD0);
}

void sub_18F041B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12)
    free(a12);
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::ReplaceChunk(CAFAudioFile *this, uint64_t a2, int a3, uint64_t a4, const void *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t result;
  int v19;

  v5 = *((_QWORD *)this + 18);
  v6 = *((_QWORD *)this + 19);
  v7 = v6 - v5;
  if (v6 == v5)
    return 0xFFFFFFFFLL;
  v12 = 0;
  v13 = 0;
  v14 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
  v19 = 0;
  v15 = 1;
  while (1)
  {
    v16 = (_DWORD *)(v5 + 24 * v12);
    if (*v16 == (_DWORD)a2)
      break;
LABEL_6:
    v12 = v15;
    if (v14 <= v15++)
      return 0xFFFFFFFFLL;
  }
  if (v13 != a3)
  {
    ++v13;
    goto LABEL_6;
  }
  if (a4 + 12 == *(_QWORD *)(v5 + 24 * v12 + 8))
  {
    result = (*(uint64_t (**)(CAFAudioFile *, _DWORD *, int *))(*(_QWORD *)this + 768))(this, v16, &v19);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(CAFAudioFile *, _DWORD *, const void *, int *))(*(_QWORD *)this + 776))(this, v16, a5, &v19);
  }
  else
  {
    *v16 = 1718773093;
    CAFAudioFile::ConsolidateFillerChunks(this);
    return (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, const void *))(*(_QWORD *)this + 752))(this, a2, a4, a5);
  }
  return result;
}

void CAFAudioFile::ConsolidateFillerChunks(CAFAudioFile *this)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  _QWORD *v23;
  int v24;
  __int128 v25;
  uint64_t v26;

  v1 = *((_QWORD *)this + 18);
  v23 = (_QWORD *)((char *)this + 144);
  v2 = *((_QWORD *)this + 19) - v1;
  if (v2)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    LODWORD(v8) = 0;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
    do
    {
      v10 = (v8 + 1);
      v11 = (__int128 *)(v1 + 24 * v7);
      v12 = *((_QWORD *)v11 + 2);
      v25 = *v11;
      v26 = v12;
      if ((_DWORD)v25 == 1718773093)
      {
        if (v9 <= v10)
        {
          LODWORD(v8) = v8 + 1;
        }
        else
        {
          v13 = *((_QWORD *)&v25 + 1);
          LODWORD(v8) = v8 + 1;
          do
          {
            if (*(_DWORD *)(v1 + 24 * v10) != 1718773093)
              break;
            v8 = (v8 + 1);
            v13 += *(_QWORD *)(v1 + 24 * v10 + 8);
            *((_QWORD *)&v25 + 1) = v13;
            v10 = v8;
          }
          while (v9 > v8);
        }
        v24 = 0;
        (*(void (**)(CAFAudioFile *, __int128 *, int *))(*(_QWORD *)this + 768))(this, &v25, &v24);
      }
      else
      {
        LODWORD(v8) = v8 + 1;
      }
      if ((unint64_t)v5 >= v6)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) + 1;
        if (v15 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v4) >> 3) > v15)
          v15 = 0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v4) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v4) >> 3) >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v15;
        if (v16)
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v16);
        else
          v17 = 0;
        v18 = v25;
        v19 = v16 + 8 * ((v5 - v4) >> 3);
        *(_QWORD *)(v19 + 16) = v26;
        *(_OWORD *)v19 = v18;
        if (v5 == v4)
        {
          v22 = (char *)(v16 + 8 * ((v5 - v4) >> 3));
        }
        else
        {
          v20 = v16 + 8 * ((v5 - v4) >> 3);
          do
          {
            v21 = *(_OWORD *)(v5 - 24);
            v22 = (char *)(v20 - 24);
            *(_QWORD *)(v20 - 8) = *((_QWORD *)v5 - 1);
            *(_OWORD *)(v20 - 24) = v21;
            v5 -= 24;
            v20 -= 24;
          }
          while (v5 != v4);
        }
        v6 = v16 + 24 * v17;
        v5 = (char *)(v19 + 24);
        if (v4)
          operator delete(v4);
        v4 = v22;
      }
      else
      {
        v14 = v25;
        *((_QWORD *)v5 + 2) = v26;
        *(_OWORD *)v5 = v14;
        v5 += 24;
      }
      v7 = v8;
      v1 = *((_QWORD *)this + 18);
      v9 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 19) - v1) >> 3);
    }
    while (v9 > v8);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  std::vector<ChunkInfo64>::__assign_with_size[abi:ne180100]<ChunkInfo64*,ChunkInfo64*>(v23, v4, v5, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3));
  if (v4)
    operator delete(v4);
}

void sub_18F041ED0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::vector<Chunk64Info>::insert(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  _BYTE *v34;
  uint64_t v35;
  char *v36;

  v3 = a3;
  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v12 = *(char **)a1;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v14 = __src - v12;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((__src - v12) >> 3);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v12) >> 3);
    if (2 * v16 > v13)
      v13 = 2 * v16;
    if (v16 >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v13;
    if (v17)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v17);
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
    v22 = &v19[24 * v15];
    v23 = &v19[24 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src)
          v25 = 1;
        else
          v25 = 2 * v15;
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v25);
        v22 = &v26[24 * (v25 >> 2)];
        v23 = &v26[24 * v27];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v24 = v15 + 2;
        if (v15 >= -1)
          v24 = v15 + 1;
        v22 -= 24 * (v24 >> 1);
      }
    }
    v28 = *(_OWORD *)v3;
    *((_QWORD *)v22 + 2) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v22 = v28;
    v29 = *(char **)a1;
    v30 = v22;
    if (*(char **)a1 != __src)
    {
      v31 = __src;
      v32 = v22;
      do
      {
        v33 = *(_OWORD *)(v31 - 24);
        v30 = v32 - 24;
        *((_QWORD *)v32 - 1) = *((_QWORD *)v31 - 1);
        *(_OWORD *)(v32 - 24) = v33;
        v31 -= 24;
        v32 -= 24;
      }
      while (v31 != v29);
    }
    v34 = *(_BYTE **)(a1 + 8);
    v35 = v34 - __src;
    if (v34 != __src)
      memmove(v22 + 24, __src, v34 - __src);
    v36 = *(char **)a1;
    *(_QWORD *)a1 = v30;
    *(_QWORD *)(a1 + 8) = &v22[v35 + 24];
    *(_QWORD *)(a1 + 16) = v23;
    if (v36)
      operator delete(v36);
  }
  else if (__src == v6)
  {
    v21 = *(_OWORD *)a3;
    *((_QWORD *)__src + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__src = v21;
    *(_QWORD *)(a1 + 8) = __src + 24;
  }
  else
  {
    v8 = __src + 24;
    v9 = v6 - 24;
    v10 = *(_QWORD *)(a1 + 8);
    while (v9 < v6)
    {
      v11 = *(_OWORD *)v9;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v10 = v11;
      v10 += 24;
      v9 += 24;
    }
    *(_QWORD *)(a1 + 8) = v10;
    if (v6 != v8)
      memmove(__src + 24, __src, v6 - v8);
    if ((unint64_t)__src <= v3)
      v3 += 24 * (*(_QWORD *)(a1 + 8) > v3);
    v20 = *(_OWORD *)v3;
    *((_QWORD *)__src + 2) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)__src = v20;
  }
}

void sub_18F042168(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<__CFString const*>::vector(_QWORD *a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v4 = 8 * a2;
    v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    v6 = &v5[8 * a2];
    a1[2] = v6;
    bzero(v5, v4);
    a1[1] = v6;
  }
  return a1;
}

uint64_t CAFAudioFile::SetStringTable(CAFAudioFile *this, CAFStringsWrapper *a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  size_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  uint64_t v24;
  size_t v25;
  BOOL v26;
  size_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  _DWORD *v32;

  v4 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
  v5 = 12 * (v4 >> 5) + 4;
  if ((v4 >> 5))
  {
    v6 = (v4 >> 5);
    v7 = *(_QWORD *)a2 + 16;
    v8 = v5;
    do
    {
      if (*(char *)(v7 + 15) < 0)
        v9 = *(_QWORD *)v7;
      else
        LODWORD(v9) = *(unsigned __int8 *)(v7 + 15);
      v8 += v9 + 1;
      v7 += 32;
      --v6;
    }
    while (v6);
  }
  else
  {
    v8 = 12 * (v4 >> 5) + 4;
  }
  v32 = 0;
  v10 = v8;
  CADeprecated::CAAutoFree<CAFStrings>::allocBytes((void **)&v32, v8);
  v11 = v32;
  v12 = *(_QWORD *)a2;
  v13 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
  v14 = v13 >> 5;
  *v32 = v13 >> 5;
  if ((v13 & 0x1FFFFFFFE0) != 0)
  {
    v15 = 0;
    v16 = 0;
    v17 = v10 - v5;
    v18 = v11 + 2;
    v19 = 16;
    v20 = (char *)v11 + v5;
    do
    {
      v21 = v12 + v19;
      *((_DWORD *)v18 - 1) = *(_DWORD *)(v21 - 16);
      v22 = v16;
      *v18 = v16;
      v23 = (const char *)(v21 - 8);
      if (*(char *)(v21 + 15) < 0)
        v23 = *(const char **)v23;
      strlcpy(&v20[v16], v23, v17);
      v12 = *(_QWORD *)a2;
      if (*(char *)(*(_QWORD *)a2 + v19 + 15) < 0)
        v24 = *(_QWORD *)(v12 + v19);
      else
        v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v19 + 15);
      v25 = v24 + 1;
      v16 = v24 + 1 + v22;
      v26 = v17 >= v25;
      v27 = v17 - v25;
      if (v26)
        v17 = v27;
      else
        v17 = 0;
      ++v15;
      v19 += 32;
      v18 = (_QWORD *)((char *)v18 + 12);
    }
    while (v15 < ((unint64_t)(*((_QWORD *)a2 + 1) - v12) >> 5));
    v11 = v32;
    LODWORD(v14) = *v32;
  }
  if ((_DWORD)v14)
  {
    v28 = v14;
    v29 = (unint64_t *)(v11 + 2);
    do
    {
      *((_DWORD *)v29 - 1) = bswap32(*((_DWORD *)v29 - 1));
      *v29 = bswap64(*v29);
      v29 = (unint64_t *)((char *)v29 + 12);
      --v28;
    }
    while (v28);
  }
  *v11 = bswap32(v14);
  v30 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)this + 760))(this, 1937011303, v10, v11);
  free(v11);
  return v30;
}

void sub_18F0423AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  void *v10;

  free(v10);
  _Unwind_Resume(a1);
}

_DWORD *CAFAudioFile::GetPacketDependencyInfoForPacket(uint64_t a1, char *a2, int a3, _QWORD *a4)
{
  _DWORD *result;
  BOOL v9;
  unsigned __int8 *v10;
  std::vector<char>::pointer begin;
  PacketDependencyParser *v13;
  uint64_t v14;
  int v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  std::vector<char> v19;
  uint64_t v20;
  std::vector<char>::size_type __n;

  *a4 = 0;
  result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  if ((_DWORD)result)
  {
    result = *(_DWORD **)(a1 + 256);
    if (result)
      goto LABEL_17;
    LODWORD(__n) = 0;
    memset(&v19, 0, sizeof(v19));
    if ((*(unsigned int (**)(uint64_t, std::vector<char>::size_type *, _QWORD))(*(_QWORD *)a1 + 328))(a1, &__n, 0))
    {
      v9 = 1;
    }
    else
    {
      v9 = (_DWORD)__n == 0;
    }
    if (v9)
    {
      begin = 0;
      v10 = 0;
    }
    else
    {
      std::vector<unsigned char>::__append(&v19, __n);
      begin = v19.__begin_;
      if ((*(unsigned int (**)(uint64_t, std::vector<char>::size_type *, std::vector<char>::pointer))(*(_QWORD *)a1 + 336))(a1, &__n, v19.__begin_))
      {
        v10 = 0;
        LODWORD(__n) = 0;
      }
      else
      {
        v10 = (unsigned __int8 *)begin;
      }
    }
    v13 = (PacketDependencyParser *)operator new();
    PacketDependencyParser::PacketDependencyParser(v13, (const AudioStreamBasicDescription *)(a1 + 24), v10, __n);
    v14 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v13;
    if (v14)
      MEMORY[0x193FFE460](v14, 0x1000C403E1C8BA9);
    if (begin)
      operator delete(begin);
    result = *(_DWORD **)(a1 + 256);
    if (result)
    {
LABEL_17:
      v19.__begin_ = a2;
      v19.__end_ = a2;
      v19.__end_cap_.__value_ = &a2[a3];
      v20 = 0;
      if ((a2 & 3) != 0)
      {
        v15 = 0;
        v16 = a2 + 1;
        v17 = (unsigned __int8 *)a2;
        do
        {
          if (v17 >= (unsigned __int8 *)&a2[a3])
            v18 = 255;
          else
            v18 = *v17;
          v15 = v18 | (v15 << 8);
          ++v17;
          v9 = (v16++ & 3) == 0;
        }
        while (!v9);
        v19.__begin_ = &a2[((a2 ^ 3) & 3) + 1];
        LODWORD(v20) = v15 << ((8 * ((a2 ^ 3) & 3)) ^ 0x18);
        HIDWORD(v20) = 8 * ((a2 ^ 3) & 3) + 8;
      }
      return PacketDependencyParser::PacketDependencyInfo(result, (uint64_t)&v19, (uint64_t)a4);
    }
  }
  return result;
}

void sub_18F04259C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x193FFE460](v2, 0x1000C403E1C8BA9);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::LoadPacketsForScanning(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, unsigned int *a6, _QWORD *a7, _QWORD *a8)
{
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  char *end;
  uint64_t v35;
  uint64_t v36;
  char *begin;
  char *v38;
  size_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  void **v45;
  char *v46;
  char *v47;
  char *v48;
  size_t v49;
  unint64_t v50;
  char *v51;
  void *v52;
  char *v53;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned int *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  std::vector<char> v64;
  unsigned int v65;
  uint8_t buf[4];
  const char *v67;
  _DWORD v68[3];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v16 = *(_DWORD *)(a1 + 40);
  v15 = *(_DWORD *)(a1 + 44);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  v18 = a3;
  v65 = 0;
  if (a3 == 1)
    v19 = 1;
  else
    v19 = -1;
  memset(&v64, 0, sizeof(v64));
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v60 = a6;
  *a6 = 0;
  if (a2 < 0 || (v20 = v17, v17 <= a2))
  {
    v25 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v25;
    *(_DWORD *)buf = 136315394;
    v67 = "CAFAudioFile.cpp";
    LOWORD(v68[0]) = 1024;
    *(_DWORD *)((char *)v68 + 2) = 2852;
    v26 = MEMORY[0x1E0C81028];
    v27 = "%25s:%-5d  invalid packet number";
LABEL_13:
    _os_log_impl(&dword_18EE07000, v26, OS_LOG_TYPE_ERROR, v27, buf, 0x12u);
    return v25;
  }
  if (*(_DWORD *)(a1 + 40))
  {
    v21 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v21)
    {
      LODWORD(v21) = vcvtps_u32_f32((float)a4 / (float)v15);
      v22 = a6;
      *a6 = v21;
      v23 = v16 * v21;
      v65 = v23;
      if (v18 == 1)
      {
        if ((uint64_t)(v21 + a2) > v17)
        {
          v24 = 0;
          LODWORD(v21) = v17 - a2;
          *a6 = v17 - a2;
LABEL_21:
          v29 = a7;
          goto LABEL_34;
        }
      }
      else if (v21 > a2)
      {
        v24 = 0;
        *a6 = a2;
        LODWORD(v21) = a2;
        goto LABEL_21;
      }
      v24 = 0;
      goto LABEL_21;
    }
  }
  v58 = a8;
  v28 = *(uint64_t **)(a1 + 120);
  if (!v28)
  {
    v25 = 1685348671;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v25;
    *(_DWORD *)buf = 136315394;
    v67 = "CAFAudioFile.cpp";
    LOWORD(v68[0]) = 1024;
    *(_DWORD *)((char *)v68 + 2) = 2872;
    v26 = MEMORY[0x1E0C81028];
    v27 = "%25s:%-5d  no packet table for variable-sized packets";
    goto LABEL_13;
  }
  if (v17 < v28[3])
  {
    v25 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v25;
    *(_DWORD *)buf = 136315394;
    v67 = "CAFAudioFile.cpp";
    LOWORD(v68[0]) = 1024;
    *(_DWORD *)((char *)v68 + 2) = 2873;
    v26 = MEMORY[0x1E0C81028];
    v27 = "%25s:%-5d  packet table unexpectedly truncated";
    goto LABEL_13;
  }
  v56 = a5;
  v57 = a2;
  v55 = v18;
  v23 = 0;
  v30 = a2;
  if (a4 >= 1)
  {
    v31 = 0;
    do
    {
      v32 = v15;
      if (!v15)
      {
        CompressedPacketTable::operator[]((uint64_t)buf, v28, v30);
        v32 = HIDWORD(v67);
      }
      CompressedPacketTable::operator[]((uint64_t)buf, v28, v30);
      v23 += v68[0];
      v65 = v23;
      v30 += v19;
      if (v30 < 0)
        break;
      if (v30 >= v20)
        break;
      v31 += v32;
    }
    while (v31 < a4);
  }
  a2 = v57;
  v33 = v30 - v57;
  if (v30 - v57 < 0)
    v33 = v57 - v30;
  v22 = v60;
  *v60 = v33;
  std::vector<AudioStreamPacketDescription>::resize(&v61, v33);
  v24 = v61;
  LODWORD(v21) = *v60;
  a8 = v58;
  v29 = a7;
  a5 = v56;
  v18 = v55;
LABEL_34:
  end = 0;
  if ((_DWORD)v21 && v23)
  {
    v35 = a2 - v21;
    if (v18 == -1)
      v36 = v35 + 1;
    else
      v36 = a2;
    std::vector<unsigned char>::__append(&v64, v23);
    begin = v64.__begin_;
    v25 = (*(uint64_t (**)(uint64_t, _QWORD, unsigned int *, char *, uint64_t, unsigned int *, std::vector<char>::pointer))(*(_QWORD *)a1 + 88))(a1, 0, &v65, v24, v36, v22, v64.__begin_);
    if ((_DWORD)v25)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v67 = "CAFAudioFile.cpp";
        LOWORD(v68[0]) = 1024;
        *(_DWORD *)((char *)v68 + 2) = 2892;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadPackets failed", buf, 0x12u);
      }
      goto LABEL_63;
    }
    end = v64.__end_;
  }
  else
  {
    v36 = a2;
    begin = 0;
  }
  *a5 = v36;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v29, begin, end, end - begin);
  v38 = v62;
  v39 = v62 - v24;
  v40 = (v62 - v24) >> 4;
  v41 = a8[2];
  v42 = (char *)*a8;
  if (v40 <= (v41 - *a8) >> 4)
  {
    v48 = (char *)a8[1];
    v45 = (void **)(a8 + 1);
    v47 = v48;
    v49 = v48 - v42;
    v50 = (v48 - v42) >> 4;
    if (v50 < v40)
    {
      v51 = &v24[16 * v50];
      if (v47 != v42)
      {
        memmove(v42, v24, v49);
        v42 = (char *)*v45;
      }
      v39 = v38 - v51;
      if (v38 == v51)
        goto LABEL_62;
      v52 = v42;
      v53 = v51;
      goto LABEL_61;
    }
  }
  else
  {
    if (v42)
    {
      a8[1] = v42;
      operator delete(v42);
      v41 = 0;
      *a8 = 0;
      a8[1] = 0;
      a8[2] = 0;
    }
    if ((v39 & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v43 = v41 >> 3;
    if (v41 >> 3 <= v40)
      v43 = v40;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v43;
    std::vector<std::shared_ptr<APComponent>>::__vallocate[abi:ne180100](a8, v44);
    v46 = (char *)a8[1];
    v45 = (void **)(a8 + 1);
    v42 = v46;
  }
  if (v38 != v24)
  {
    v52 = v42;
    v53 = v24;
LABEL_61:
    memmove(v52, v53, v39);
  }
LABEL_62:
  v25 = 0;
  *v45 = &v42[v39];
LABEL_63:
  if (v24)
  {
    v62 = v24;
    operator delete(v24);
    begin = v64.__begin_;
  }
  if (begin)
  {
    v64.__end_ = begin;
    operator delete(begin);
  }
  return v25;
}

void sub_18F042B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void CAFAudioFile::UpdatePacketTableChunk(CAFAudioFile *this)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  char v7;
  size_t v8;
  int v9;
  int v10;
  int8x16_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int8x8_t *v33;
  _DWORD v34[3];
  unsigned int v35;
  int8x16_t *v36;

  v2 = *((_DWORD *)this + 10);
  v3 = *((_DWORD *)this + 11);
  if (!v2 || *((_DWORD *)this + 46) || *((_DWORD *)this + 47))
  {
    if (v3)
      v4 = v2 == 0;
    else
      v4 = 1;
    v5 = *((_QWORD *)this + 15);
    if (v4 && v5 == 0)
    {
      v5 = operator new();
      v9 = *((_DWORD *)this + 11);
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_DWORD *)(v5 + 32) = v9;
      *((_QWORD *)this + 15) = v5;
      v36 = 0;
    }
    else
    {
      v36 = 0;
      if (!v5)
      {
        v7 = 1;
        v8 = 24;
        goto LABEL_18;
      }
    }
    v7 = 0;
    if (v3)
      v10 = 5;
    else
      v10 = 10;
    v8 = (*(_DWORD *)(v5 + 24) * v10 + 24);
LABEL_18:
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v36, v8, 0);
    v11 = v36;
    v36->i64[0] = 0;
    v12 = *((_QWORD *)this + 22);
    if (v12 < 0 && (v13 = *((unsigned int *)this + 11), (_DWORD)v13))
    {
      v14 = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 240))(this);
      v15 = *((int *)this + 46);
      v16 = *((int *)this + 47);
      v12 = v14 * v13 - (v15 + v16);
    }
    else
    {
      LODWORD(v15) = *((_DWORD *)this + 46);
      LODWORD(v16) = *((_DWORD *)this + 47);
    }
    v11->i64[1] = v12;
    v11[1].i32[0] = v15;
    v11[1].i32[1] = v16;
    if ((v7 & 1) != 0)
    {
      v17 = 24;
LABEL_59:
      v33 = (int8x8_t *)v36;
      *v36 = vrev64q_s8(*v36);
      v33[2] = vrev32_s8(v33[2]);
      (*(void (**)(CAFAudioFile *, uint64_t, uint64_t, int8x8_t *))(*(_QWORD *)this + 760))(this, 1885432692, v17, v33);
      free(v33);
      return;
    }
    v11->i64[0] = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 240))(this);
    v19 = (*(uint64_t (**)(CAFAudioFile *))(*(_QWORD *)this + 632))(this);
    if (*(uint64_t *)(v5 + 24) < 1)
    {
      v17 = 24;
LABEL_58:
      (*(void (**)(CAFAudioFile *, uint64_t, uint64_t))(*(_QWORD *)this + 648))(this, v19, v18);
      goto LABEL_59;
    }
    v18 = 0;
    v20 = &v11[1].i8[8];
    v21 = 1;
    v17 = 24;
    while (1)
    {
      CompressedPacketTable::operator[]((uint64_t)v34, (uint64_t *)v5, v18);
      v22 = v34[2];
      v23 = v35;
      v19 = v35 <= v19 ? v19 : v35;
      if (v35 >> 28)
        break;
      if ((v35 & 0xFE00000) != 0)
      {
        v24 = 1;
LABEL_33:
        *v20++ = (v23 >> 21) | 0x80;
LABEL_34:
        *v20++ = (v23 >> 14) | 0x80;
        v25 = v24 + 1;
LABEL_35:
        *v20++ = (v23 >> 7) | 0x80;
        v26 = v25 + 1;
        goto LABEL_36;
      }
      if ((v35 & 0x1FC000) != 0)
      {
        v24 = 0;
        goto LABEL_34;
      }
      v25 = 0;
      v26 = 0;
      if ((v35 & 0x3F80) != 0)
        goto LABEL_35;
LABEL_36:
      *v20 = v23 & 0x7F;
      v27 = v20 + 1;
      if (!v3)
      {
        if (v22 >> 28)
        {
          v27 = v20 + 2;
          v20[1] = (v22 >> 28) | 0x80;
          v29 = 2;
LABEL_44:
          *v27++ = (v22 >> 21) | 0x80;
LABEL_45:
          *v27++ = (v22 >> 14) | 0x80;
          v30 = v29 + 1;
        }
        else
        {
          if ((v22 & 0xFE00000) != 0)
          {
            v29 = 1;
            goto LABEL_44;
          }
          if ((v22 & 0x1FC000) != 0)
          {
            v29 = 0;
            goto LABEL_45;
          }
          v30 = 0;
          v31 = 0;
          if ((v22 & 0x3F80) == 0)
          {
LABEL_47:
            *v27++ = v22 & 0x7F;
            v28 = v31 + 1;
            goto LABEL_48;
          }
        }
        *v27++ = (v22 >> 7) | 0x80;
        v31 = v30 + 1;
        goto LABEL_47;
      }
      v28 = 0;
LABEL_48:
      v17 += v26 + 1 + v28;
      v18 = v21;
      v32 = *(_QWORD *)(v5 + 24) <= (uint64_t)v21++;
      v20 = v27;
      if (v32)
        goto LABEL_58;
    }
    *v20++ = (v35 >> 28) | 0x80;
    v24 = 2;
    goto LABEL_33;
  }
}

void sub_18F042E78(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F042E18);
}

void sub_18F042EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12)
    JUMPOUT(0x18F042E8CLL);
  JUMPOUT(0x18F042E84);
}

_QWORD *CADeprecated::CAAutoFree<CAFAudioFormatListItem>::CAAutoFree(_QWORD *a1, uint64_t a2)
{
  size_t v4;
  void *v5;
  void *v6;
  std::bad_alloc *exception;
  std::bad_alloc *v9;

  *a1 = 0;
  v4 = 36 * a2;
  v5 = malloc_type_malloc(36 * a2, 0x2C8E6D5CuLL);
  v6 = v5;
  if (a2 && !v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v5, v4);
  *a1 = v6;
  return a1;
}

uint64_t CAFAudioFile::CalcSoundDataAlign(CAFAudioFile *this)
{
  __int128 v2;
  uint64_t result;
  unsigned int v4;
  unint64_t v5;
  __int128 v6;
  double v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  UInt32 ioPropertyDataSize;
  __int128 outPropertyData;
  __int128 v24;
  uint64_t v25;

  v2 = *(_OWORD *)((char *)this + 40);
  outPropertyData = *(_OWORD *)((char *)this + 24);
  v24 = v2;
  v25 = *((_QWORD *)this + 7);
  ioPropertyDataSize = 40;
  result = AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, &outPropertyData);
  if ((_DWORD)result == 1718449215 && *((_DWORD *)this + 11) && !*((_DWORD *)this + 10))
  {
    v6 = *(_OWORD *)((char *)this + 40);
    outPropertyData = *(_OWORD *)((char *)this + 24);
    v24 = v6;
    v25 = *((_QWORD *)this + 7);
    v4 = DWORD1(v6);
  }
  else if ((_DWORD)result || (_DWORD)v24 || (v4 = DWORD1(v24)) == 0)
  {
    v5 = 4096;
    goto LABEL_21;
  }
  v7 = 2.0;
  if (DWORD2(outPropertyData) == 1634492771)
    v7 = 3.0;
  v8 = vcvtpd_s64_f64(*((double *)this + 25) * (*(double *)&outPropertyData / (double)v4 * v7));
  v20 = 0;
  v21 = 0;
  v9 = *((_QWORD *)this + 18);
  v10 = *((_QWORD *)this + 19) - v9;
  if (v10)
  {
    v11 = 0;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
    v13 = 1;
    do
    {
      v14 = (int *)(v9 + 24 * v11);
      v15 = *v14;
      v16 = v14[2];
      if (v15 == 1718773093)
      {
        v17 = &v21;
      }
      else
      {
        if (v15 == 1684108385)
          break;
        v17 = &v20;
      }
      *v17 += v16;
      v11 = v13;
    }
    while (v12 > v13++);
    v19 = v20;
  }
  else
  {
    v19 = 0;
  }
  v5 = (v8 + v19 + 4120) & 0xFFFFFFFFFFFFF000;
LABEL_21:
  *((_QWORD *)this + 24) = v5;
  return result;
}

uint64_t CAFAudioFile::InitializeCAFChunks(CAFAudioFile *this)
{
  unint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  char **v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint8_t *v24;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  char *v43;
  __int128 v44;
  int8x8_t v45;
  uint64_t v46;
  _BYTE v47[24];
  unsigned int v48;
  uint64_t v49;
  int v50;
  const char *v51;
  __int16 v52;
  int v53;
  _BYTE buf[24];
  int8x8_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v48 = 0;
  v2 = *((_QWORD *)this + 3);
  v4 = *((_DWORD *)this + 8);
  v3 = *((_DWORD *)this + 9);
  v46 = *((_QWORD *)this + 5);
  v45 = *(int8x8_t *)((char *)this + 52);
  v49 = 0x10066666163;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                             + 56))(*((_QWORD *)this + 13), 0, 0, 8, &v49, &v48);
  if ((_DWORD)v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1052;
      v6 = MEMORY[0x1E0C81028];
      v7 = "%25s:%-5d  FSWrite Failed";
LABEL_23:
      v24 = buf;
LABEL_24:
      _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_ERROR, v7, v24, 0x12u);
      return v5;
    }
    return v5;
  }
  *(_DWORD *)v47 = 1684370275;
  *(_OWORD *)&v47[8] = xmmword_18F1173C0;
  v8 = (char **)((char *)this + 144);
  v10 = *((_QWORD *)this + 19);
  v9 = *((_QWORD *)this + 20);
  if (v10 >= v9)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*v8) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)*v8) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v14;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v16);
    else
      v17 = 0;
    v18 = v16 + 24 * v13;
    v19 = v16 + 24 * v17;
    v20 = *(_OWORD *)v47;
    *(_QWORD *)(v18 + 16) = *(_QWORD *)&v47[16];
    *(_OWORD *)v18 = v20;
    v12 = v18 + 24;
    v22 = (char *)*((_QWORD *)this + 18);
    v21 = (char *)*((_QWORD *)this + 19);
    if (v21 != v22)
    {
      do
      {
        v23 = *(_OWORD *)(v21 - 24);
        *(_QWORD *)(v18 - 8) = *((_QWORD *)v21 - 1);
        *(_OWORD *)(v18 - 24) = v23;
        v18 -= 24;
        v21 -= 24;
      }
      while (v21 != v22);
      v21 = *v8;
    }
    *((_QWORD *)this + 18) = v18;
    *((_QWORD *)this + 19) = v12;
    *((_QWORD *)this + 20) = v19;
    if (v21)
      operator delete(v21);
  }
  else
  {
    v11 = *(_OWORD *)v47;
    *(_QWORD *)(v10 + 16) = *(_QWORD *)&v47[16];
    *(_OWORD *)v10 = v11;
    v12 = v10 + 24;
  }
  *((_QWORD *)this + 19) = v12;
  v5 = (*(uint64_t (**)(CAFAudioFile *, _BYTE *, unsigned int *))(*(_QWORD *)this + 768))(this, v47, &v48);
  if (!(_DWORD)v5)
  {
    *(_DWORD *)&buf[12] = 0;
    *(_DWORD *)&buf[8] = v4;
    if (v4 == 1819304813)
    {
      if ((v3 & 2) != 0)
      {
        v26 = 1;
      }
      else
      {
        *(_DWORD *)&buf[12] = 2;
        v26 = 3;
      }
      if ((v3 & 1) == 0)
      {
LABEL_33:
        *(_QWORD *)&buf[16] = v46;
        *(_QWORD *)buf = bswap64(v2);
        *(int8x16_t *)&buf[8] = vrev32q_s8(*(int8x16_t *)&buf[8]);
        v55 = vrev32_s8(v45);
        v5 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _BYTE *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                  + 56))(*((_QWORD *)this + 13), 0, 20, 32, buf, &v48);
        if ((_DWORD)v5)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return v5;
          v50 = 136315394;
          v51 = "CAFAudioFile.cpp";
          v52 = 1024;
          v53 = 1072;
          v6 = MEMORY[0x1E0C81028];
          v7 = "%25s:%-5d  FSWrite Failed";
          goto LABEL_36;
        }
        v27 = v48 + 20;
        if (*((_BYTE *)this + 138))
        {
          v28 = *((_QWORD *)this + 24);
          if (!v28)
          {
            CAFAudioFile::CalcSoundDataAlign(this);
            v28 = *((_QWORD *)this + 24);
          }
          *(_DWORD *)v47 = 1718773093;
          v29 = (v28 - 80) + 12;
          *(_QWORD *)&v47[8] = v29;
          *(_QWORD *)&v47[16] = v27;
          v31 = *((_QWORD *)this + 19);
          v30 = *((_QWORD *)this + 20);
          if (v31 >= v30)
          {
            v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)*v8) >> 3);
            v35 = v34 + 1;
            if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)*v8) >> 3);
            if (2 * v36 > v35)
              v35 = 2 * v36;
            if (v36 >= 0x555555555555555)
              v37 = 0xAAAAAAAAAAAAAAALL;
            else
              v37 = v35;
            if (v37)
              v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v37);
            else
              v38 = 0;
            v39 = v37 + 24 * v34;
            v40 = v37 + 24 * v38;
            v41 = *(_OWORD *)v47;
            *(_QWORD *)(v39 + 16) = *(_QWORD *)&v47[16];
            *(_OWORD *)v39 = v41;
            v33 = v39 + 24;
            v43 = (char *)*((_QWORD *)this + 18);
            v42 = (char *)*((_QWORD *)this + 19);
            if (v42 != v43)
            {
              do
              {
                v44 = *(_OWORD *)(v42 - 24);
                *(_QWORD *)(v39 - 8) = *((_QWORD *)v42 - 1);
                *(_OWORD *)(v39 - 24) = v44;
                v39 -= 24;
                v42 -= 24;
              }
              while (v42 != v43);
              v42 = *v8;
            }
            *((_QWORD *)this + 18) = v39;
            *((_QWORD *)this + 19) = v33;
            *((_QWORD *)this + 20) = v40;
            if (v42)
              operator delete(v42);
          }
          else
          {
            v32 = *(_OWORD *)v47;
            *(_QWORD *)(v31 + 16) = *(_QWORD *)&v47[16];
            *(_OWORD *)v31 = v32;
            v33 = v31 + 24;
          }
          *((_QWORD *)this + 19) = v33;
          v5 = (*(uint64_t (**)(CAFAudioFile *, _BYTE *, unsigned int *))(*(_QWORD *)this + 768))(this, v47, &v48);
          if ((_DWORD)v5)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              return v5;
            v50 = 136315394;
            v51 = "CAFAudioFile.cpp";
            v52 = 1024;
            v53 = 1089;
            v6 = MEMORY[0x1E0C81028];
            v7 = "%25s:%-5d  WriteChunkHeader Failed";
            goto LABEL_36;
          }
          v27 += v29;
        }
        *(_DWORD *)v47 = 1684108385;
        *(_QWORD *)&v47[8] = -1;
        *(_QWORD *)&v47[16] = v27;
        v5 = (*(uint64_t (**)(CAFAudioFile *, _BYTE *, unsigned int *))(*(_QWORD *)this + 768))(this, v47, &v48);
        if ((_DWORD)v5)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return v5;
          v50 = 136315394;
          v51 = "CAFAudioFile.cpp";
          v52 = 1024;
          v53 = 1100;
          v6 = MEMORY[0x1E0C81028];
          v7 = "%25s:%-5d  WriteChunkHeader Failed";
        }
        else
        {
          *(_QWORD *)&v47[8] = 16;
          std::vector<ChunkInfo64>::push_back[abi:ne180100]((void **)this + 18, (__int128 *)v47);
          *((_DWORD *)this + 42) = 0;
          v48 = 4;
          v5 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *, unsigned int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v27 + 12, 4, (char *)this + 168, &v48);
          if (!(_DWORD)v5)
          {
            *((_QWORD *)this + 9) = v27 + 12 + v48;
            *((_DWORD *)this + 20) = 1;
            (*(void (**)(CAFAudioFile *, _QWORD))(*(_QWORD *)this + 232))(this, 0);
            (*(void (**)(CAFAudioFile *, _QWORD))(*(_QWORD *)this + 248))(this, 0);
            (*(void (**)(CAFAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, v46);
            return 0;
          }
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return v5;
          v50 = 136315394;
          v51 = "CAFAudioFile.cpp";
          v52 = 1024;
          v53 = 1110;
          v6 = MEMORY[0x1E0C81028];
          v7 = "%25s:%-5d  FSWrite Failed";
        }
LABEL_36:
        v24 = (uint8_t *)&v50;
        goto LABEL_24;
      }
    }
    else
    {
      v26 = v3;
    }
    *(_DWORD *)&buf[12] = v26;
    goto LABEL_33;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "CAFAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1064;
    v6 = MEMORY[0x1E0C81028];
    v7 = "%25s:%-5d  WriteChunkHeader Failed";
    goto LABEL_23;
  }
  return v5;
}

void CAFAudioFormat::~CAFAudioFormat(CAFAudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

const __CFArray *CAFAudioFormat::GetExtensions(CAFAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("caf");
  values[1] = CFSTR("caff");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *CAFAudioFormat::GetUTIs(CAFAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("com.apple.coreaudio-format");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *CAFAudioFormat::GetMIMETypes(CAFAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("audio/x-caf");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void CAFAudioFormat::GetFileTypeName(CAFAudioFormat *this, CFTypeRef *a2)
{
  char v3;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v3);
  *a2 = CFRetain(CFSTR("CAF"));
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v3);
}

void sub_18F04398C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFormat::GetAvailableFormatIDs(CAFAudioFormat *this, unsigned int *a2, _DWORD *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD **v14;
  BOOL v15;
  UInt32 ioPropertyDataSize;
  void *outPropertyData;
  UInt32 outPropertyDataSize;
  _QWORD **v20;
  _QWORD *v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  v20 = &v21;
  outPropertyDataSize = 0;
  if (!AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize))
  {
    outPropertyData = 0;
    CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(&outPropertyData, outPropertyDataSize);
    v5 = (char *)outPropertyData;
    if (AudioFormatGetProperty(0x61636966u, 0, 0, &outPropertyDataSize, outPropertyData) || outPropertyDataSize < 4)
    {
      if (!v5)
        goto LABEL_9;
    }
    else
    {
      v6 = 0;
      v7 = outPropertyDataSize & 0xFFFFFFFC;
      do
      {
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v20, *(_DWORD *)&v5[v6], *(_DWORD *)&v5[v6]);
        v6 += 4;
      }
      while (v7 != v6);
    }
    free(v5);
  }
LABEL_9:
  ioPropertyDataSize = 0;
  if (!AudioFormatGetPropertyInfo(0x61636F66u, 0, 0, &ioPropertyDataSize))
  {
    outPropertyData = 0;
    CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(&outPropertyData, ioPropertyDataSize);
    v8 = (char *)outPropertyData;
    if (AudioFormatGetProperty(0x61636F66u, 0, 0, &ioPropertyDataSize, outPropertyData) || ioPropertyDataSize < 4)
    {
      if (!v8)
        goto LABEL_17;
    }
    else
    {
      v9 = 0;
      v10 = ioPropertyDataSize & 0xFFFFFFFC;
      do
      {
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v20, *(_DWORD *)&v8[v9], *(_DWORD *)&v8[v9]);
        v9 += 4;
      }
      while (v10 != v9);
    }
    free(v8);
  }
LABEL_17:
  *a2 = 4 * v22;
  if (a3)
  {
    v11 = (uint64_t)v20;
    if (v20 != &v21)
    {
      v12 = 0;
      do
      {
        a3[v12] = *(_DWORD *)(v11 + 28);
        v13 = *(_QWORD **)(v11 + 8);
        if (v13)
        {
          do
          {
            v14 = (_QWORD **)v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = *(_QWORD ***)(v11 + 16);
            v15 = *v14 == (_QWORD *)v11;
            v11 = (uint64_t)v14;
          }
          while (!v15);
        }
        ++v12;
        v11 = (uint64_t)v14;
      }
      while (v14 != &v21);
    }
  }
  return 0;
}

void sub_18F043B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  if (a10)
    free(a10);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFormat::GetAvailableStreamDescriptions(CAFAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  uint64_t v11;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  unsigned int v21;
  __int128 __src;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[9];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (a2 == 1819304813)
  {
    v6 = 0;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    memset(v36, 0, sizeof(v36));
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    __src = 0u;
    v7 = (_DWORD *)v36 + 2;
    v41 = 0;
    do
    {
      v8 = v6 + 8;
      *((_QWORD *)v7 - 28) = 0xE6C70636DLL;
      *(v7 - 50) = v6 + 8;
      *(v7 - 53) = 1;
      if (v6)
      {
        *((_QWORD *)v7 - 3) = 0xC6C70636DLL;
        *v7 = v8;
        *(v7 - 3) = 1;
      }
      v7 += 10;
      v6 += 8;
    }
    while (v8 != 32);
    *((_QWORD *)&v32 + 1) = 0xB6C70636DLL;
    LODWORD(v34) = 32;
    DWORD1(v33) = 1;
    *(_QWORD *)&v35 = 0xB6C70636DLL;
    DWORD2(v36[0]) = 64;
    HIDWORD(v35) = 1;
    *(_QWORD *)&v37 = 0x96C70636DLL;
    DWORD2(v38) = 32;
    HIDWORD(v37) = 1;
    *((_QWORD *)&v39 + 1) = 0x96C70636DLL;
    LODWORD(v41) = 64;
    v9 = 11;
    DWORD1(v40) = 1;
LABEL_7:
    if (*a3 / 0x28 < v9)
      v9 = *a3 / 0x28;
    v10 = 40 * v9;
    *a3 = v10;
    if (__dst)
      memcpy(__dst, &__src, v10);
    return 0;
  }
  v21 = 0;
  v11 = (*(uint64_t (**)(CAFAudioFormat *, unsigned int *, _QWORD))(*(_QWORD *)this + 96))(this, &v21, 0);
  if ((_DWORD)v11)
    return v11;
  v15 = v21;
  v16 = (unint64_t)v21 >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&v20, v16, 1);
  v11 = (*(uint64_t (**)(CAFAudioFormat *, unsigned int *, void *))(*(_QWORD *)this + 96))(this, &v21, v20);
  if ((_DWORD)v11)
  {
    if (v20)
      free(v20);
  }
  else
  {
    if (v15 >= 4)
    {
      v17 = 0;
      if (v16 <= 1)
        v18 = 1;
      else
        v18 = v16;
      v19 = 4 * v18;
      while (*(_DWORD *)((char *)v20 + v17) != a2)
      {
        v17 += 4;
        if (v19 == v17)
          goto LABEL_26;
      }
      free(v20);
      *(_QWORD *)&v24 = 0;
      __src = 0u;
      v23 = 0u;
      DWORD2(__src) = a2;
      v9 = 1;
      goto LABEL_7;
    }
    if (v20)
LABEL_26:
      free(v20);
    *a3 = 0;
    return 1718449215;
  }
  return v11;
}

void sub_18F043E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9)
    free(a9);
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFormat::GetHFSCodes(CAFAudioFormat *this, unsigned int *a2, void *a3)
{
  *a2 = 0;
  return 0;
}

double CAFAudioFormat::NewStream(CAFAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = -1;
  *(_QWORD *)(v1 + 96) = -1;
  *(_QWORD *)(v1 + 104) = -1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_OWORD *)(v1 + 240) = xmmword_18F116F80;
  *(_DWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 300) = 0;
  *(_QWORD *)(v1 + 284) = 0;
  *(_QWORD *)(v1 + 292) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)(v1 + 328) = 0;
  *(_QWORD *)v1 = &off_1E29042C0;
  *(_QWORD *)(v1 + 392) = 0;
  *(_DWORD *)(v1 + 400) = 0;
  *(_QWORD *)(v1 + 448) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_DWORD *)(v1 + 440) = 0;
  return result;
}

void AAAnalyzer::~AAAnalyzer(AAAnalyzer *this)
{
  AAAnalyzer::~AAAnalyzer(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  const void *v3;
  OpaqueAudioConverter *v4;
  OpaqueAudioFileID *v5;
  OpaqueAudioFileStreamID *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  *(_QWORD *)this = &off_1E2900E00;
  v2 = *((_QWORD *)this + 13);
  if (v2)
    MEMORY[0x193FFE43C](v2, 0x1000C80451B5BE8);
  v3 = (const void *)*((_QWORD *)this + 31);
  if (v3)
    CFRelease(v3);
  v4 = (OpaqueAudioConverter *)*((_QWORD *)this + 15);
  if (v4)
    AudioConverterDispose(v4);
  v5 = (OpaqueAudioFileID *)*((_QWORD *)this + 11);
  if (v5)
    AudioFileClose(v5);
  v6 = (OpaqueAudioFileStreamID *)*((_QWORD *)this + 14);
  if (v6)
    AudioFileStreamClose(v6);
  v8 = *((_QWORD *)this + 16);
  v7 = *((_QWORD *)this + 17);
  if (v7 != v8)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      v11 = *(_QWORD *)(v8 + 8 * v9);
      if (v11)
      {
        MEMORY[0x193FFE43C](v11, 0x1000C8077774924);
        v8 = *((_QWORD *)this + 16);
        v7 = *((_QWORD *)this + 17);
      }
      v9 = v10++;
    }
    while (v9 < (v7 - v8) >> 3);
  }
  (*(void (**)(AAAnalyzer *))(*(_QWORD *)this + 96))(this);
  v12 = (void *)*((_QWORD *)this + 21);
  if (v12)
  {
    free(v12);
    *((_QWORD *)this + 21) = 0;
  }
  v13 = (void *)*((_QWORD *)this + 19);
  if (v13)
  {
    free(v13);
    *((_QWORD *)this + 19) = 0;
  }
  v14 = (void *)*((_QWORD *)this + 16);
  if (v14)
  {
    *((_QWORD *)this + 17) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 8);
  if (v15)
  {
    *((_QWORD *)this + 9) = v15;
    operator delete(v15);
  }
  MEMORY[0x193FFDAD0]((char *)this + 56);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

uint64_t AAAnalyzer::Prepare(AAAnalyzer *this, const AudioStreamBasicDescription *a2, const AudioChannelLayout *a3, const void *a4, int a5, uint64_t a6)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  OpaqueAudioConverter *v13;
  UInt32 v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  size_t v38;
  void *v39;
  void *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  AudioStreamBasicDescription v47;
  AudioStreamBasicDescription v48;
  _QWORD v49[3];
  uint64_t (*v50[3])(uint64_t, uint64_t);
  const void *v51;
  int v52;
  int v53;

  v10 = *(_OWORD *)&a2->mSampleRate;
  v11 = *(_OWORD *)&a2->mBytesPerPacket;
  *((_QWORD *)this + 6) = *(_QWORD *)&a2->mBitsPerChannel;
  *((_OWORD *)this + 1) = v10;
  *((_OWORD *)this + 2) = v11;
  CAAudioChannelLayout::operator=();
  v12 = *((_OWORD *)this + 2);
  *(_OWORD *)&v48.mSampleRate = *((_OWORD *)this + 1);
  *(_OWORD *)&v48.mBytesPerPacket = v12;
  *(_QWORD *)&v48.mBitsPerChannel = *((_QWORD *)this + 6);
  LODWORD(v47.mSampleRate) = 0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(&v48, (int *)&v47)
    && LODWORD(v47.mSampleRate) == 1
    && (v48.mFormatFlags & 0x20) != 0)
  {
LABEL_45:
    *((_QWORD *)this + 24) = a6;
    result = (*(uint64_t (**)(AAAnalyzer *))(*(_QWORD *)this + 88))(this);
    if (!(_DWORD)result)
      *((_BYTE *)this + 256) = 1;
    return result;
  }
  v13 = (OpaqueAudioConverter *)*((_QWORD *)this + 15);
  v14 = *((_DWORD *)this + 11);
  v47.mSampleRate = *((Float64 *)this + 2);
  *(_OWORD *)&v47.mFormatID = xmmword_18F116FC0;
  v47.mBytesPerFrame = 4;
  v47.mChannelsPerFrame = v14;
  *(_QWORD *)&v47.mBitsPerChannel = 32;
  if (v13)
    AudioConverterDispose(v13);
  result = AudioConverterNewWithOptions(&v48, &v47, 0, (_QWORD *)this + 15);
  if (!(_DWORD)result)
  {
    if (!a5)
      goto LABEL_9;
    v16 = *((_QWORD *)this + 15);
    v52 = a5;
    v53 = 1684891491;
    v51 = a4;
    v49[0] = &v53;
    v49[1] = &v52;
    v49[2] = &v51;
    v50[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
    v50[1] = (uint64_t (*)(uint64_t, uint64_t))v49;
    result = with_resolved(v16, v50);
    if (!(_DWORD)result)
    {
LABEL_9:
      v17 = (char *)*((_QWORD *)this + 16);
      v18 = (char *)*((_QWORD *)this + 17);
      if (v18 == v17)
      {
        v22 = 0;
        v17 = (char *)*((_QWORD *)this + 17);
      }
      else
      {
        v19 = 0;
        v20 = 1;
        do
        {
          v21 = *(_QWORD *)&v17[8 * v19];
          if (v21)
          {
            MEMORY[0x193FFE43C](v21, 0x1000C8077774924);
            v17 = (char *)*((_QWORD *)this + 16);
            v18 = (char *)*((_QWORD *)this + 17);
          }
          v19 = v20;
          v22 = (v18 - v17) >> 3;
        }
        while (v22 > v20++);
      }
      v24 = *((unsigned int *)this + 11);
      v25 = v24 - v22;
      if (v24 <= v22)
      {
        if (v24 >= v22)
        {
LABEL_32:
          if (v18 != *((char **)this + 16))
          {
            v36 = 0;
            v37 = 1;
            do
            {
              *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v36) = operator new[]();
              v36 = v37++;
            }
            while (v36 < (uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3);
          }
          if ((v48.mFormatFlags & 0x20) != 0)
            v38 = (16 * v48.mChannelsPerFrame) | 8;
          else
            v38 = 24;
          *((_DWORD *)this + 44) = v38;
          v39 = malloc_type_calloc(v38, 1uLL, 0x3E4B753BuLL);
          v40 = (void *)*((_QWORD *)this + 21);
          if (v40 != v39)
          {
            free(v40);
            *((_QWORD *)this + 21) = v39;
          }
          v41 = malloc_type_calloc(16 * (*((_DWORD *)this + 11) - 1) + 24, 1uLL, 0xF371BD99uLL);
          v42 = (_DWORD *)*((_QWORD *)this + 19);
          if (v42 != v41)
          {
            free(v42);
            *((_QWORD *)this + 19) = v41;
          }
          v43 = *((unsigned int *)this + 11);
          *v41 = v43;
          if ((_DWORD)v43)
          {
            v44 = (uint64_t *)*((_QWORD *)this + 16);
            v45 = v41 + 4;
            do
            {
              *(v45 - 1) = 0x200000000001;
              v46 = *v44++;
              *v45 = v46;
              v45 += 2;
              --v43;
            }
            while (v43);
          }
          goto LABEL_45;
        }
        v18 = &v17[8 * v24];
      }
      else
      {
        v26 = *((_QWORD *)this + 18);
        if (v25 > (v26 - (uint64_t)v18) >> 3)
        {
          v27 = v26 - (_QWORD)v17;
          if (v27 >> 2 > v24)
            v24 = v27 >> 2;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v24;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v28);
          v30 = &v29[8 * v22];
          v32 = &v29[8 * v31];
          bzero(v30, 8 * v25);
          v18 = &v30[8 * v25];
          v34 = (char *)*((_QWORD *)this + 16);
          v33 = (char *)*((_QWORD *)this + 17);
          if (v33 != v34)
          {
            do
            {
              v35 = *((_QWORD *)v33 - 1);
              v33 -= 8;
              *((_QWORD *)v30 - 1) = v35;
              v30 -= 8;
            }
            while (v33 != v34);
            v33 = (char *)*((_QWORD *)this + 16);
          }
          *((_QWORD *)this + 16) = v30;
          *((_QWORD *)this + 17) = v18;
          *((_QWORD *)this + 18) = v32;
          if (v33)
          {
            operator delete(v33);
            v18 = (char *)*((_QWORD *)this + 17);
          }
          goto LABEL_32;
        }
        bzero(v18, 8 * v25);
        v18 += 8 * v25;
      }
      *((_QWORD *)this + 17) = v18;
      goto LABEL_32;
    }
  }
  return result;
}

uint64_t AAAnalyzer::PrepareWithFileStream(AAAnalyzer *this, AudioFileTypeID inFileTypeHint)
{
  OpaqueAudioFileStreamID *v4;
  AudioFileStreamID *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  const char *v13;
  int inPropertyData;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  AAAnalyzer *v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  CFRange v25;
  CFRange v26;
  CFRange v27;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = (AudioFileStreamID *)((char *)this + 112);
  v4 = (OpaqueAudioFileStreamID *)*((_QWORD *)this + 14);
  *((_BYTE *)v5 - 100) = 1;
  if (v4)
    AudioFileStreamClose(v4);
  v6 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) != v6)
    *((_QWORD *)this + 9) = v6;
  v7 = AudioFileStreamOpen(this, (AudioFileStream_PropertyListenerProc)AAAnalyzer::StreamPropertyListenerProc, (AudioFileStream_PacketsProc)AAAnalyzer::StreamPacketsProc, inFileTypeHint, v5);
  if ((_DWORD)v7)
  {
    v8 = v7;
    if (kAASubsystem)
    {
      v9 = *(NSObject **)kAASubsystem;
      if (!*(_QWORD *)kAASubsystem)
        return v8;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v17 = "AAAnalyzer.cpp";
      v18 = 1024;
      v19 = 159;
      v20 = 2048;
      v21 = this;
      v22 = 1024;
      v23 = v8;
      v13 = "%25s:%-5d AAAnalyzer::PrepareWithFileStream (%p): AudioFileStreamOpen failed (err = %d)\n";
LABEL_22:
      _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, v13, buf, 0x22u);
    }
  }
  else
  {
    v10 = (const __CFArray *)*((_QWORD *)this + 31);
    v25.length = CFArrayGetCount(v10);
    v25.location = 0;
    if (!CFArrayContainsValue(v10, v25, CFSTR("sound check info")))
    {
      v11 = (const __CFArray *)*((_QWORD *)this + 31);
      v26.length = CFArrayGetCount(v11);
      v26.location = 0;
      if (!CFArrayContainsValue(v11, v26, CFSTR("main loudness parameters")))
      {
        v12 = (const __CFArray *)*((_QWORD *)this + 31);
        v27.length = CFArrayGetCount(v12);
        v27.location = 0;
        if (!CFArrayContainsValue(v12, v27, CFSTR("additional loudness parameters")))
          return 0;
      }
    }
    inPropertyData = 1819243876;
    v8 = AudioFileStreamSetProperty(*v5, 0x6F707470u, 4u, &inPropertyData);
    if ((_DWORD)v8)
    {
      if (kAASubsystem)
      {
        v9 = *(NSObject **)kAASubsystem;
        if (!*(_QWORD *)kAASubsystem)
          return v8;
      }
      else
      {
        v9 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v17 = "AAAnalyzer.cpp";
        v18 = 1024;
        v19 = 171;
        v20 = 2048;
        v21 = this;
        v22 = 1024;
        v23 = v8;
        v13 = "%25s:%-5d AAAnalyzer::PrepareWithFileStream (%p): AudioFileStreamSetProperty kAudioFileStreamProperty_Opti"
              "onalProperties failed (err = %d)\n";
        goto LABEL_22;
      }
    }
  }
  return v8;
}

uint64_t AAAnalyzer::PrepareWithFile(AudioFileID *outAudioFile, CFURLRef inFileRef, AudioFileTypeID inFileTypeHint)
{
  OpaqueAudioFileID *v6;
  AudioFileID *v7;
  uint64_t v8;
  uint64_t Property;
  NSObject *v10;
  OpaqueAudioFileID *v11;
  AudioFileID v12;
  char *v13;
  const char *v14;
  const __CFArray *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  __int128 *v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  AudioChannelLayout *v23;
  NSObject *v24;
  unsigned int v25;
  AudioFileID v26;
  unsigned int v27;
  void *v28;
  const void *Value;
  const void *v30;
  const __CFDictionary *outPropertyData;
  UInt32 ioDataSize;
  uint8_t buf[4];
  _BYTE v34[14];
  __int16 v35;
  AudioFileID *v36;
  __int16 v37;
  int v38;
  uint64_t v39;
  CFRange v40;
  CFRange v41;
  CFRange v42;

  v39 = *MEMORY[0x1E0C80C00];
  v7 = outAudioFile + 11;
  v6 = outAudioFile[11];
  if (v6)
    AudioFileClose(v6);
  ioDataSize = 0;
  v8 = AudioFileOpenURL(inFileRef, kAudioFileReadPermission, inFileTypeHint, v7);
  if ((_DWORD)v8)
  {
    Property = v8;
    if (kAASubsystem)
    {
      v10 = *(NSObject **)kAASubsystem;
      if (!*(_QWORD *)kAASubsystem)
        return Property;
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)v34 = "AAAnalyzer.cpp";
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = 192;
      v35 = 2048;
      v36 = outAudioFile;
      v37 = 1024;
      v38 = Property;
      v14 = "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileOpenURL failed (err = %d)\n";
LABEL_19:
      _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, v14, buf, 0x22u);
      return Property;
    }
    return Property;
  }
  outPropertyData = 0;
  ioDataSize = 8;
  if (!AudioFileGetProperty(*v7, 0x6C6F7564u, &ioDataSize, &outPropertyData))
  {
    *(_DWORD *)buf = 1;
    LODWORD(v30) = 0;
    if (CFDictionaryContainsKey(outPropertyData, CFSTR("sound check info")))
    {
      v16 = outAudioFile[31];
      v40.length = CFArrayGetCount(v16);
      v40.location = 0;
      if (CFArrayContainsValue(v16, v40, CFSTR("sound check info")))
      {
        v28 = (void *)8;
        Value = CFDictionaryGetValue(outPropertyData, CFSTR("sound check info"));
        *(_QWORD *)&v34[4] = &v28;
        LODWORD(v30) = 1;
        AAAnalyzer::CallResultsCallback((uint64_t)outAudioFile, (uint64_t)CFSTR("sound check info"), (uint64_t)buf, (uint64_t)&v30);
        if ((v30 & 2) != 0)
          RemoveKeyFromList(outAudioFile[31], CFSTR("sound check info"));
      }
    }
    if (CFDictionaryContainsKey(outPropertyData, CFSTR("main loudness parameters")))
    {
      v17 = outAudioFile[31];
      v41.length = CFArrayGetCount(v17);
      v41.location = 0;
      if (CFArrayContainsValue(v17, v41, CFSTR("main loudness parameters")))
      {
        Value = 0;
        v28 = (void *)8;
        Value = CFDictionaryGetValue(outPropertyData, CFSTR("main loudness parameters"));
        *(_QWORD *)&v34[4] = &v28;
        LODWORD(v30) = 1;
        AAAnalyzer::CallResultsCallback((uint64_t)outAudioFile, (uint64_t)CFSTR("main loudness parameters"), (uint64_t)buf, (uint64_t)&v30);
        if ((v30 & 2) != 0)
          RemoveKeyFromList(outAudioFile[31], CFSTR("main loudness parameters"));
      }
    }
    if (CFDictionaryContainsKey(outPropertyData, CFSTR("additional loudness parameters")))
    {
      v18 = outAudioFile[31];
      v42.length = CFArrayGetCount(v18);
      v42.location = 0;
      if (CFArrayContainsValue(v18, v42, CFSTR("additional loudness parameters")))
      {
        Value = 0;
        v28 = (void *)8;
        Value = CFDictionaryGetValue(outPropertyData, CFSTR("additional loudness parameters"));
        *(_QWORD *)&v34[4] = &v28;
        LODWORD(v30) = 1;
        AAAnalyzer::CallResultsCallback((uint64_t)outAudioFile, (uint64_t)CFSTR("additional loudness parameters"), (uint64_t)buf, (uint64_t)&v30);
        if ((v30 & 2) != 0)
          RemoveKeyFromList(outAudioFile[31], CFSTR("additional loudness parameters"));
      }
    }
  }
  if (outPropertyData)
    CFRelease(outPropertyData);
  v11 = outAudioFile[8];
  if (outAudioFile[9] != v11)
    outAudioFile[9] = v11;
  if (!AudioFileGetPropertyInfo(*v7, 0x6D676963u, &ioDataSize, 0) && ioDataSize)
  {
    v12 = outAudioFile[8];
    v13 = (char *)(outAudioFile[9] - v12);
    if (ioDataSize <= (unint64_t)v13)
    {
      if (ioDataSize < (unint64_t)v13)
        outAudioFile[9] = (AudioFileID)((char *)v12 + ioDataSize);
    }
    else
    {
      std::vector<unsigned char>::__append((std::vector<char> *)(outAudioFile + 8), ioDataSize - (_QWORD)v13);
      v12 = outAudioFile[8];
    }
    Property = AudioFileGetProperty(*v7, 0x6D676963u, &ioDataSize, v12);
    if ((_DWORD)Property)
    {
      if (kAASubsystem)
      {
        v10 = *(NSObject **)kAASubsystem;
        if (!*(_QWORD *)kAASubsystem)
          return Property;
      }
      else
      {
        v10 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)v34 = "AAAnalyzer.cpp";
        *(_WORD *)&v34[8] = 1024;
        *(_DWORD *)&v34[10] = 251;
        v35 = 2048;
        v36 = outAudioFile;
        v37 = 1024;
        v38 = Property;
        v14 = "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileGetProperty kAudioFilePropertyMagicCookieData failed (err = %d)\n";
        goto LABEL_19;
      }
      return Property;
    }
  }
  if (!AudioFileGetPropertyInfo(*v7, 0x666C7374u, &ioDataSize, 0) && ioDataSize)
  {
    v28 = 0;
    CADeprecated::CAAutoFree<AudioFormatListItem>::alloc(&v28, ioDataSize);
    v19 = (__int128 *)v28;
    Property = AudioFileGetProperty(*v7, 0x666C7374u, &ioDataSize, v28);
    if ((_DWORD)Property)
    {
      if (kAASubsystem)
      {
        v20 = *(NSObject **)kAASubsystem;
        if (!*(_QWORD *)kAASubsystem)
        {
LABEL_68:
          if (v19)
            free(v19);
          return Property;
        }
      }
      else
      {
        v20 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)v34 = "AAAnalyzer.cpp";
        *(_WORD *)&v34[8] = 1024;
        *(_DWORD *)&v34[10] = 263;
        v35 = 2048;
        v36 = outAudioFile;
        v37 = 1024;
        v38 = Property;
        _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileGetProperty kAudioFilePropertyFormatList failed (err = %d)\n", buf, 0x22u);
      }
      goto LABEL_68;
    }
    v21 = *v19;
    v22 = v19[1];
    outAudioFile[6] = (AudioFileID)*((_QWORD *)v19 + 4);
    *((_OWORD *)outAudioFile + 1) = v21;
    *((_OWORD *)outAudioFile + 2) = v22;
    free(v19);
  }
  if (!AudioFileGetPropertyInfo(*v7, 0x636D6170u, &ioDataSize, 0))
  {
    v28 = 0;
    CADeprecated::CAAutoFree<AudioChannelLayout>::alloc(&v28, ioDataSize);
    v23 = (AudioChannelLayout *)v28;
    Property = AudioFileGetProperty(*v7, 0x636D6170u, &ioDataSize, v28);
    if (!(_DWORD)Property)
    {
      CAAudioChannelLayout::Set((CAAudioChannelLayout *)(outAudioFile + 7), v23);
      goto LABEL_80;
    }
    if (kAASubsystem)
    {
      v24 = *(NSObject **)kAASubsystem;
      if (!*(_QWORD *)kAASubsystem)
        goto LABEL_80;
    }
    else
    {
      v24 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)v34 = "AAAnalyzer.cpp";
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = 276;
      v35 = 2048;
      v36 = outAudioFile;
      v37 = 1024;
      v38 = Property;
      _os_log_impl(&dword_18EE07000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileGetProperty kAudioFilePropertyChannelLayout failed (err = %d)\n", buf, 0x22u);
    }
LABEL_80:
    if (v23)
      free(v23);
    if ((_DWORD)Property)
      return Property;
  }
  v30 = 0;
  ioDataSize = 8;
  Property = AudioFileGetProperty(*v7, 0x70636E74u, &ioDataSize, &v30);
  if ((_DWORD)Property)
  {
    if (kAASubsystem)
    {
      v10 = *(NSObject **)kAASubsystem;
      if (!*(_QWORD *)kAASubsystem)
        return Property;
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)v34 = "AAAnalyzer.cpp";
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = 287;
      v35 = 2048;
      v36 = outAudioFile;
      v37 = 1024;
      v38 = Property;
      v14 = "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileGetProperty kAudioFilePropertyAudioDataPacketCount failed (err = %d)\n";
      goto LABEL_19;
    }
  }
  else
  {
    Value = v30;
    ioDataSize = 24;
    Property = AudioFileGetProperty(*v7, 0x706B6672u, &ioDataSize, &v28);
    if ((_DWORD)Property)
    {
      if (kAASubsystem)
      {
        v10 = *(NSObject **)kAASubsystem;
        if (!*(_QWORD *)kAASubsystem)
          return Property;
      }
      else
      {
        v10 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)v34 = "AAAnalyzer.cpp";
        *(_WORD *)&v34[8] = 1024;
        *(_DWORD *)&v34[10] = 297;
        v35 = 2048;
        v36 = outAudioFile;
        v37 = 1024;
        v38 = Property;
        v14 = "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileGetProperty kAudioFilePropertyPacketToFrame failed (err = %d)\n";
        goto LABEL_19;
      }
    }
    else
    {
      outAudioFile[24] = (AudioFileID)v28;
      v27 = 0;
      v25 = *((_DWORD *)outAudioFile + 8);
      if (v25)
      {
        v27 = *((_DWORD *)outAudioFile + 8);
        *((_DWORD *)outAudioFile + 24) = 0x8000 / v25;
      }
      else
      {
        ioDataSize = 4;
        Property = AudioFileGetProperty(*v7, 0x70737A65u, &ioDataSize, &v27);
        if ((_DWORD)Property)
        {
          if (kAASubsystem)
          {
            v10 = *(NSObject **)kAASubsystem;
            if (!*(_QWORD *)kAASubsystem)
              return Property;
          }
          else
          {
            v10 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)v34 = "AAAnalyzer.cpp";
            *(_WORD *)&v34[8] = 1024;
            *(_DWORD *)&v34[10] = 309;
            v35 = 2048;
            v36 = outAudioFile;
            v37 = 1024;
            v38 = Property;
            v14 = "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileGetProperty kAudioFilePropertyMaximumPacketSize f"
                  "ailed (err = %d)\n";
            goto LABEL_19;
          }
          return Property;
        }
        *((_DWORD *)outAudioFile + 24) = 0x8000 / v27;
        v26 = outAudioFile[13];
        if (v26)
          MEMORY[0x193FFE43C](v26, 0x1000C80451B5BE8);
        outAudioFile[13] = (AudioFileID)operator new[]();
      }
      Property = (*((uint64_t (**)(AudioFileID *, AudioFileID *, char *, AudioFileID, _QWORD))*outAudioFile + 4))(outAudioFile, outAudioFile + 2, (char *)outAudioFile[7] + 16, outAudioFile[8], *((_DWORD *)outAudioFile + 18) - outAudioFile[8]);
      if ((_DWORD)Property)
      {
        if (kAASubsystem)
        {
          v10 = *(NSObject **)kAASubsystem;
          if (!*(_QWORD *)kAASubsystem)
            return Property;
        }
        else
        {
          v10 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)v34 = "AAAnalyzer.cpp";
          *(_WORD *)&v34[8] = 1024;
          *(_DWORD *)&v34[10] = 324;
          v35 = 2048;
          v36 = outAudioFile;
          v37 = 1024;
          v38 = Property;
          v14 = "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): Prepare failed (err = %d)\n";
          goto LABEL_19;
        }
      }
    }
  }
  return Property;
}

void sub_18F044EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11)
    free(a11);
  _Unwind_Resume(exception_object);
}

uint64_t AAAnalyzer::PushAudio(AAAnalyzer *this, unsigned int a2, const AudioBufferList *a3, const AudioStreamPacketDescription *a4)
{
  if (!*((_BYTE *)this + 256))
    return 4294963436;
  CrashIfClientProvidedBogusAudioBufferList();
  return 0;
}

uint64_t AAAnalyzer::PushFileStreamData(AudioFileStreamID *this, UInt32 a2, const void *a3)
{
  return AudioFileStreamParseBytes(this[14], a2, a3, 0);
}

uint64_t AAAnalyzer::CompleteAnalysis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  *(_QWORD *)(a1 + 224) = a2;
  *(_QWORD *)(a1 + 232) = a3;
  *(_QWORD *)(a1 + 240) = a4;
  result = AAAnalyzer::CallProgressCallback((AAAnalyzer *)a1, 100.0);
  if (!(_DWORD)result)
    *(_BYTE *)(a1 + 256) = 0;
  return result;
}

uint64_t AAAnalyzer::PrepareAnalyzers(AAAnalyzer *this)
{
  return 0;
}

_QWORD *AAAnalyzer::Cleanup(_QWORD *this)
{
  this[28] = 0;
  this[29] = 0;
  this[30] = 0;
  return this;
}

uint64_t AAAnalyzer::CallProgressCallback(AAAnalyzer *this, float a2)
{
  uint64_t (*v4)(_QWORD, _QWORD, float);
  uint64_t result;
  uint64_t v6;

  v4 = (uint64_t (*)(_QWORD, _QWORD, float))*((_QWORD *)this + 28);
  if (v4)
    result = v4(*((unsigned int *)this + 2), *((_QWORD *)this + 29), a2);
  else
    result = 0;
  v6 = *((_QWORD *)this + 30);
  if (v6)
    return (*(uint64_t (**)(_QWORD, _QWORD, float))(v6 + 16))(*((_QWORD *)this + 30), *((unsigned int *)this + 2), a2);
  return result;
}

uint64_t AAAnalyzer::CallResultsCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v8)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t result;

  v8 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t))(a1 + 200);
  if (v8)
    v8(*(unsigned int *)(a1 + 8), a2, a3, *(_QWORD *)(a1 + 208), a4);
  result = *(_QWORD *)(a1 + 216);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(result + 16))(result, *(unsigned int *)(a1 + 8), a2, a3, a4);
  return result;
}

void *CADeprecated::CAAutoFree<AudioFormatListItem>::alloc(void **a1, uint64_t a2)
{
  void *v4;
  void *result;
  std::bad_alloc *exception;
  std::bad_alloc *v7;

  v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  result = malloc_type_malloc(48 * a2, 0x7C51E058uLL);
  if (!result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v7 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

void AAAnalyzer::StreamPropertyListenerProc(AAAnalyzer *this, AudioFileStreamID inAudioFileStream, OpaqueAudioFileStreamID *a3, unsigned int a4, unsigned int *a5)
{
  int v5;
  NSObject *v8;
  char *v9;
  unint64_t v10;
  AudioChannelLayout *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  const __CFArray *v15;
  const __CFArray *v16;
  const __CFArray *v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  const void *Value;
  int v23;
  const __CFDictionary *outPropertyData;
  UInt32 outPropertyDataSize;
  _BYTE buf[18];
  __int16 v27;
  AAAnalyzer *v28;
  __int16 v29;
  int v30;
  uint64_t v31;
  CFRange v32;
  CFRange v33;
  CFRange v34;

  v5 = (int)a3;
  v31 = *MEMORY[0x1E0C80C00];
  if (kAASubsystem)
  {
    v8 = *(NSObject **)kAASubsystem;
    if (!*(_QWORD *)kAASubsystem)
      goto LABEL_7;
  }
  else
  {
    v8 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AAAnalyzer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 426;
    v27 = 2048;
    v28 = this;
    v29 = 1024;
    v30 = v5;
    _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d AAAnalyzer::StreamPropertyListenerProc (%p), inPropertyID = %d", buf, 0x22u);
  }
LABEL_7:
  outPropertyDataSize = 0;
  if (v5 > 1819243875)
  {
    if (v5 > 1885564531)
    {
      if (v5 == 1885564532)
      {
        v21 = 0;
        outPropertyDataSize = 8;
        if (!AudioFileStreamGetProperty(inAudioFileStream, 0x70636E74u, &outPropertyDataSize, &v21))
        {
          *(_QWORD *)&buf[8] = v21;
          outPropertyDataSize = 24;
          if (!AudioFileStreamGetProperty(inAudioFileStream, 0x706B6672u, &outPropertyDataSize, buf))
            *((_QWORD *)this + 24) = *(_QWORD *)buf;
        }
      }
      else if (v5 == 1919247481
             && !(*(unsigned int (**)(AAAnalyzer *, char *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, (char *)this + 16, *((_QWORD *)this + 7) + 16, *((_QWORD *)this + 8), *((_DWORD *)this + 18) - *((_QWORD *)this + 8), *((_QWORD *)this + 24)))
      {
        *((_BYTE *)this + 256) = 1;
      }
    }
    else if (v5 == 1819243876)
    {
      outPropertyData = 0;
      outPropertyDataSize = 8;
      if (!AudioFileStreamGetProperty(inAudioFileStream, 0x6C6F7564u, &outPropertyDataSize, &outPropertyData))
      {
        *(_DWORD *)buf = 1;
        v23 = 0;
        if (CFDictionaryContainsKey(outPropertyData, CFSTR("sound check info")))
        {
          v15 = (const __CFArray *)*((_QWORD *)this + 31);
          v32.length = CFArrayGetCount(v15);
          v32.location = 0;
          if (CFArrayContainsValue(v15, v32, CFSTR("sound check info")))
          {
            v21 = 8;
            Value = CFDictionaryGetValue(outPropertyData, CFSTR("sound check info"));
            *(_QWORD *)&buf[8] = &v21;
            v23 = 1;
            AAAnalyzer::CallResultsCallback((uint64_t)this, (uint64_t)CFSTR("sound check info"), (uint64_t)buf, (uint64_t)&v23);
            if ((v23 & 2) != 0)
              RemoveKeyFromList(*((CFArrayRef *)this + 31), CFSTR("sound check info"));
          }
        }
        if (CFDictionaryContainsKey(outPropertyData, CFSTR("main loudness parameters")))
        {
          v16 = (const __CFArray *)*((_QWORD *)this + 31);
          v33.length = CFArrayGetCount(v16);
          v33.location = 0;
          if (CFArrayContainsValue(v16, v33, CFSTR("main loudness parameters")))
          {
            v21 = 8;
            Value = CFDictionaryGetValue(outPropertyData, CFSTR("main loudness parameters"));
            *(_QWORD *)&buf[8] = &v21;
            v23 = 1;
            AAAnalyzer::CallResultsCallback((uint64_t)this, (uint64_t)CFSTR("main loudness parameters"), (uint64_t)buf, (uint64_t)&v23);
            if ((v23 & 2) != 0)
              RemoveKeyFromList(*((CFArrayRef *)this + 31), CFSTR("main loudness parameters"));
          }
        }
        if (CFDictionaryContainsKey(outPropertyData, CFSTR("additional loudness parameters")))
        {
          v17 = (const __CFArray *)*((_QWORD *)this + 31);
          v34.length = CFArrayGetCount(v17);
          v34.location = 0;
          if (CFArrayContainsValue(v17, v34, CFSTR("additional loudness parameters")))
          {
            v21 = 8;
            Value = CFDictionaryGetValue(outPropertyData, CFSTR("additional loudness parameters"));
            *(_QWORD *)&buf[8] = &v21;
            v23 = 1;
            AAAnalyzer::CallResultsCallback((uint64_t)this, (uint64_t)CFSTR("additional loudness parameters"), (uint64_t)buf, (uint64_t)&v23);
            if ((v23 & 2) != 0)
              RemoveKeyFromList(*((CFArrayRef *)this + 31), CFSTR("additional loudness parameters"));
          }
        }
      }
      if (outPropertyData)
        CFRelease(outPropertyData);
    }
    else if (v5 == 1835493731
           && !AudioFileStreamGetPropertyInfo(inAudioFileStream, 0x6D676963u, &outPropertyDataSize, 0)
           && outPropertyDataSize)
    {
      v9 = (char *)*((_QWORD *)this + 8);
      v10 = *((_QWORD *)this + 9) - (_QWORD)v9;
      if (outPropertyDataSize <= v10)
      {
        if (outPropertyDataSize < v10)
          *((_QWORD *)this + 9) = &v9[outPropertyDataSize];
      }
      else
      {
        std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 64), outPropertyDataSize - v10);
        v9 = (char *)*((_QWORD *)this + 8);
      }
      if (AudioFileStreamGetProperty(inAudioFileStream, 0x6D676963u, &outPropertyDataSize, v9))
      {
        v18 = *((_QWORD *)this + 8);
        if (*((_QWORD *)this + 9) != v18)
          *((_QWORD *)this + 9) = v18;
      }
    }
    return;
  }
  if (v5 == 1668112752)
  {
    if (AudioFileStreamGetPropertyInfo(inAudioFileStream, 0x636D6170u, &outPropertyDataSize, 0))
      return;
    *(_QWORD *)buf = 0;
    CADeprecated::CAAutoFree<AudioChannelLayout>::alloc((void **)buf, outPropertyDataSize);
    v11 = *(AudioChannelLayout **)buf;
    if (!AudioFileStreamGetProperty(inAudioFileStream, 0x636D6170u, &outPropertyDataSize, *(void **)buf))
      CAAudioChannelLayout::Set((AAAnalyzer *)((char *)this + 56), v11);
    goto LABEL_32;
  }
  if (v5 != 1684434292)
  {
    if (v5 != 1718383476
      || AudioFileStreamGetPropertyInfo(inAudioFileStream, 0x666C7374u, &outPropertyDataSize, 0)
      || !outPropertyDataSize)
    {
      return;
    }
    *(_QWORD *)buf = 0;
    CADeprecated::CAAutoFree<AudioFormatListItem>::alloc((void **)buf, outPropertyDataSize);
    v11 = *(AudioChannelLayout **)buf;
    if (!AudioFileStreamGetProperty(inAudioFileStream, 0x666C7374u, &outPropertyDataSize, *(void **)buf))
    {
      v12 = *(_OWORD *)&v11->mChannelLayoutTag;
      v13 = *(_OWORD *)&v11->mChannelDescriptions[0].mChannelFlags;
      *((_QWORD *)this + 6) = *(_QWORD *)&v11[1].mChannelLayoutTag;
      *((_OWORD *)this + 1) = v12;
      *((_OWORD *)this + 2) = v13;
LABEL_33:
      free(v11);
      return;
    }
LABEL_32:
    if (!v11)
      return;
    goto LABEL_33;
  }
  outPropertyDataSize = 40;
  if (!AudioFileStreamGetProperty(inAudioFileStream, 0x64666D74u, &outPropertyDataSize, v19))
  {
    v14 = v19[1];
    *((_OWORD *)this + 1) = v19[0];
    *((_OWORD *)this + 2) = v14;
    *((_QWORD *)this + 6) = v20;
  }
}

void sub_18F045664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a19)
    free(a19);
  _Unwind_Resume(exception_object);
}

uint64_t AAAnalyzer::StreamPacketsProc(AAAnalyzer *this, void *a2, uint64_t a3, uint64_t a4, const void *a5, AudioStreamPacketDescription *a6)
{
  int v9;
  NSObject *v11;
  int v12;
  int v14;
  const char *v15;
  __int128 v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v9 = (int)a2;
  v21 = *MEMORY[0x1E0C80C00];
  if (kAASubsystem)
  {
    if ((*(_BYTE *)(kAASubsystem + 8) & 1) != 0)
    {
      v11 = *(NSObject **)kAASubsystem;
      if (*(_QWORD *)kAASubsystem)
      {
        if (os_log_type_enabled(*(os_log_t *)kAASubsystem, OS_LOG_TYPE_DEBUG))
        {
          v14 = 136316162;
          v15 = "AAAnalyzer.cpp";
          LOWORD(v16) = 1024;
          *(_DWORD *)((char *)&v16 + 2) = 570;
          WORD3(v16) = 2048;
          *((_QWORD *)&v16 + 1) = this;
          v17 = 1024;
          v18 = v9;
          v19 = 1024;
          v20 = a3;
          _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d AAAnalyzer::StreamPacketsProc (%p), inNumberBytes = %d, inNumberPackets = %d\n", (uint8_t *)&v14, 0x28u);
        }
      }
    }
  }
  v12 = *((_DWORD *)this + 11);
  v14 = 1;
  HIDWORD(v15) = v12;
  LODWORD(v16) = v9;
  *(_QWORD *)((char *)&v16 + 4) = a4;
  return (*(uint64_t (**)(AAAnalyzer *, uint64_t, int *, const void *, const void *, AudioStreamPacketDescription *))(*(_QWORD *)this + 56))(this, a3, &v14, a5, a5, a6);
}

os_log_t ___ZN10AAAnalyzerC2EPK9__CFArrayPFvP19OpaqueAudioAnalyzerPK10__CFStringPK22AudioAnalysisFrameListPvP25AudioAnalyzerResultsFlagsESB_U13block_pointerFvS4_S7_SA_SD_E_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "aasc");
  *v0 = result;
  kAASubsystem = (uint64_t)v0;
  return result;
}

uint64_t AAAnalyzer::ACInputProc(AAAnalyzer *this, OpaqueAudioConverter *a2, unsigned int *__dst, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  int v6;
  uint64_t result;

  v6 = *((_DWORD *)a5 + 41);
  if (!v6)
    return 5;
  *(_DWORD *)a2 = v6;
  memcpy(__dst, a5[21], *((unsigned int *)a5 + 44));
  if (a4)
    *(_QWORD *)&a4->mNumberBuffers = a5[23];
  result = 0;
  *((_DWORD *)a5 + 41) = 0;
  return result;
}

void OggAudioStream::~OggAudioStream(OggAudioStream *this)
{
  OggAudioStream::~OggAudioStream(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  void *v3;
  const void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *(_QWORD *)this = &off_1E29048C0;
  v2 = *((_QWORD *)this + 220);
  *((_QWORD *)this + 220) = 0;
  if (v2)
    MEMORY[0x193FFE460](v2, 0x1000C40BD41A4CDLL);
  v3 = (void *)*((_QWORD *)this + 212);
  if (v3)
  {
    *((_QWORD *)this + 213) = v3;
    operator delete(v3);
  }
  v10 = (void **)((char *)this + 1664);
  std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v4 = (const void *)*((_QWORD *)this + 207);
  if (v4)
    CFRelease(v4);
  v5 = (void *)*((_QWORD *)this + 204);
  if (v5)
  {
    *((_QWORD *)this + 205) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 201);
  if (v6)
  {
    *((_QWORD *)this + 202) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 198);
  if (v7)
  {
    *((_QWORD *)this + 199) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 190);
  if (v8)
  {
    *((_QWORD *)this + 191) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 44);
  if (v9)
  {
    *((_QWORD *)this + 45) = v9;
    operator delete(v9);
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

uint64_t OggAudioStream::GetPropertyInfo(OggAudioStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  if (a2 != 1919316848)
    return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
  if (a3)
    *a3 = 16;
  if (a4)
    *a4 = 0;
  return 0;
}

uint64_t OggAudioStream::GetProperty(OggAudioStream *this, int a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t result;
  unsigned int v6;

  if (a2 != 1919316848)
  {
    if (a2 != 1886547302)
      return AudioFileStreamObject::GetProperty(this, a2, a3, a4);
    if (!*(_BYTE *)(*((_QWORD *)this + 1) + 107))
      return 1836020325;
    if (*a3 < 4)
      return 561211770;
    result = 0;
    *a4 = *((_DWORD *)this + 371) + *((_DWORD *)this + 430);
    v6 = 4;
    goto LABEL_14;
  }
  result = 1836020325;
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 107))
  {
    if ((*((_QWORD *)this + 188) & 0x8000000000000000) == 0)
    {
      result = 561211770;
      if (a3)
      {
        if (*a3 >= 0x10)
        {
          result = 0;
          *(_OWORD *)a4 = *((_OWORD *)this + 94);
          v6 = 16;
LABEL_14:
          *a3 = v6;
        }
      }
    }
  }
  return result;
}

uint64_t OggAudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  OggAudioStream::ParseOggPages(a1, a2, (unint64_t)OggAudioStream::ParseHeaderPackets, 0);
  return 0;
}

uint64_t OggAudioStream::GeneratePackets(uint64_t a1, uint64_t a2)
{
  OggAudioStream::ParseOggPages(a1, a2, (unint64_t)OggAudioStream::ProvideAudioPackets, 0);
  return 0;
}

uint64_t OggAudioStream::HandleDiscontinuity(OggAudioStream *this)
{
  _DWORD *v2;

  *((_DWORD *)this + 59) = 0;
  *((_BYTE *)this + 1482) = 1;
  *((_QWORD *)this + 191) = *((_QWORD *)this + 190);
  *(_QWORD *)((char *)this + 388) = 0;
  *(_OWORD *)((char *)this + 396) = 0u;
  *(_DWORD *)((char *)this + 411) = 0;
  bzero((char *)this + 416, 0x414uLL);
  *(_OWORD *)((char *)this + 1464) = 0u;
  *((_QWORD *)this + 186) = -1;
  *((_QWORD *)this + 188) = -1;
  *((_DWORD *)this + 378) = 0;
  v2 = (_DWORD *)*((_QWORD *)this + 220);
  if (v2 && *v2 == 1987015266)
    v2[9] = 0;
  return 0;
}

uint64_t OggAudioStream::ProvideAudioPackets(OggAudioStream *this, unsigned int a2, unint64_t a3, const unsigned __int8 *a4, UInt32 a5, AudioStreamPacketDescription *a6)
{
  uint64_t v11;
  void (*v12)(_QWORD, _QWORD, uint64_t, int *);
  void (*v13)(_QWORD, _QWORD, uint64_t, int *);
  int v15;
  int v16;

  if (*((_QWORD *)this + 13) == -1)
  {
    *((_QWORD *)this + 13) = *((_QWORD *)this + 37);
    v11 = *((_QWORD *)this + 1);
    v15 = 1;
    v12 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v11 + 24);
    if (v12)
    {
      v12(*(_QWORD *)(v11 + 40), *(unsigned int *)(v11 + 8), 1685022310, &v15);
      v11 = *((_QWORD *)this + 1);
    }
    v16 = 1;
    if (!*(_DWORD *)(v11 + 112))
    {
      *(_DWORD *)(v11 + 112) = 1;
      v13 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v11 + 24);
      if (v13)
        v13(*(_QWORD *)(v11 + 40), *(unsigned int *)(v11 + 8), 1919247481, &v16);
    }
  }
  AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), a5, a2, a4, a6, 1);
  *((_QWORD *)this + 23) += a2;
  return 1;
}

void OggAudioStream::ParseOggPages(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  const void *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  BOOL v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v46;
  size_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  _BOOL4 v54;
  unsigned int v55;
  char *v56;
  uint64_t v57;
  int v58;
  char *v59;
  size_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BOOL4 v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  int v82;
  const void *v83;
  size_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v90;
  size_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v95;
  _BYTE *v96;
  unsigned int v97;
  PacketDurationParser *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(_QWORD, _QWORD, uint64_t, unsigned int *);
  _QWORD *v104;
  char v105;
  uint64_t v106;
  size_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BOOL4 v113;
  unsigned int v114;
  char *v115;
  int v116;
  char *v117;
  size_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v124;
  size_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  PacketDurationParser *v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(_QWORD, _QWORD, uint64_t, unsigned int *);
  BOOL v147;
  int v148;
  uint64_t v149;
  _QWORD *v150;
  int v151;
  uint64_t v152;
  size_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _BOOL4 v158;
  unsigned int v159;
  char *v160;
  int v161;
  char *v162;
  char *v163;
  size_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v170;
  size_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v176;
  void *v177;
  size_t v178;
  void *v179;
  size_t v180;
  void *v181;
  uint64_t v182;
  void (*v183)(_QWORD, _QWORD, uint64_t, int *);
  void (*v184)(_QWORD, _QWORD, uint64_t, int *);
  uint64_t v185;
  const void *v186;
  PacketDurationParser *v187;
  uint64_t v188;
  unint64_t v189;
  BOOL v190;
  int v191;
  void (*v192)(_QWORD, _QWORD, uint64_t, int *);
  void (*v193)(_QWORD, _QWORD, uint64_t, int *);
  void (*v194)(_QWORD, _QWORD, uint64_t, int *);
  __int32 *v195;
  __int32 *v196;
  __int32 *v197;
  __int32 *v198;
  __int32 v199;
  unint64_t v200;
  _DWORD *v201;
  __int32 *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  __int32 *v209;
  unint64_t v210;
  int v211;
  BOOL v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  BOOL v219;
  int v220;
  int v221;
  int v222;
  int v223;
  unsigned int v224;
  uint64_t v225;
  int *v226;
  int v227;
  uint64_t v228;
  void (*v229)(_QWORD, _QWORD, uint64_t, unsigned int *);
  uint64_t v230;
  int v231;
  uint64_t v232;
  void (*v233)(uint64_t, uint64_t, uint64_t, unsigned int *);
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v244;
  uint64_t v245;
  BOOL v246;
  int v247;
  void *v248;
  void *v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254[2];
  uint64_t v255;
  uint64_t v256;
  int v257;

  v8 = a1 + 394;
  v9 = *(_DWORD *)(a1 + 236);
  if (v9 > 209)
  {
    if (v9 <= 259)
    {
      if (v9 == 210)
      {
        v10 = *(_QWORD *)(a1 + 8);
        LODWORD(v18) = *(_DWORD *)(v10 + 116);
        goto LABEL_111;
      }
      if (v9 == 220)
        goto LABEL_456;
    }
    else
    {
      switch(v9)
      {
        case 260:
          v12 = *(_QWORD *)(a1 + 8);
          LODWORD(v15) = *(_DWORD *)(v12 + 116);
          goto LABEL_162;
        case 318:
          v16 = *(_QWORD *)(a1 + 8);
          LODWORD(v17) = *(_DWORD *)(v16 + 116);
          goto LABEL_225;
        case 466:
          v12 = *(_QWORD *)(a1 + 8);
          LODWORD(v13) = *(_DWORD *)(v12 + 116);
          goto LABEL_313;
      }
    }
    goto LABEL_423;
  }
  if (v9 <= 196)
  {
    if (v9 == -1)
      return;
    if (!v9)
    {
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96);
      goto LABEL_22;
    }
    goto LABEL_423;
  }
  if (v9 == 197)
    goto LABEL_22;
  if (v9 == 199)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v14 = *(_DWORD *)(v10 + 116);
    goto LABEL_38;
  }
  if (v9 != 202)
  {
LABEL_423:
    v223 = -1;
LABEL_424:
    *(_DWORD *)(a1 + 236) = v223;
    return;
  }
  v10 = *(_QWORD *)(a1 + 8);
  LODWORD(v11) = *(_DWORD *)(v10 + 116);
LABEL_69:
  v41 = *(_DWORD *)(a1 + 256) - v11;
  v42 = *(_QWORD *)(v10 + 88);
  v43 = *(_QWORD *)(v10 + 96);
  v44 = v42 + *(unsigned int *)(v10 + 80);
  if (v44 <= v43 || v43 < v42)
    v46 = 0;
  else
    v46 = v44 - v43;
  if (v41 <= v46)
    v41 = v46;
  v254[0] = v41;
  v47 = v41 + v11;
  if (*(_DWORD *)(v10 + 120) < v47)
  {
    *(_DWORD *)(v10 + 120) = v47;
    CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v47);
    v10 = *(_QWORD *)(a1 + 8);
  }
  StreamBuffer::Copy((_QWORD *)(v10 + 72), v254, (unsigned __int8 *)(*(_QWORD *)(v10 + 128) + *(unsigned int *)(v10 + 116)));
  v10 = *(_QWORD *)(a1 + 8);
  v36 = *(_DWORD *)(v10 + 116) + v254[0];
  *(_DWORD *)(v10 + 116) = v36;
  if (v36 < *(_DWORD *)(a1 + 256))
  {
    v223 = 202;
    goto LABEL_424;
  }
  v20 = *(_QWORD *)(a1 + 272);
  v19 = *(_QWORD *)(v10 + 128);
  *(_QWORD *)(v10 + 88) = v20;
  *(_QWORD *)(v10 + 96) = v20;
  *(_QWORD *)(v10 + 72) = v19;
  *(_DWORD *)(v10 + 80) = v36;
  v35 = v20 + v36;
  LODWORD(v19) = v36;
  v21 = v20;
  while (1)
  {
    v48 = 0;
    if (v20 >= v21 && v20 < v35 && v36)
      v48 = *(_QWORD *)(v10 + 72) + (v20 - v21);
    v49 = *(_DWORD *)v48;
    *(_DWORD *)(a1 + 388) = bswap32(*(_DWORD *)v48);
    if (v49 != 1399285583)
      goto LABEL_101;
    *(_BYTE *)(a1 + 392) = *(_BYTE *)(v48 + 4);
    *(_BYTE *)(a1 + 393) = *(_BYTE *)(v48 + 5);
    *(_QWORD *)v8 = *(_QWORD *)(v48 + 6);
    *(_DWORD *)(v8 + 8) = *(_DWORD *)(v48 + 14);
    *(_DWORD *)(v8 + 12) = *(_DWORD *)(v48 + 18);
    *(_DWORD *)(v8 + 16) = *(_DWORD *)(v48 + 22);
    v50 = *(unsigned __int8 *)(v48 + 26);
    *(_BYTE *)(a1 + 414) = v50;
    if (!v50)
    {
LABEL_101:
      v57 = *(_QWORD *)(a1 + 296) + 4;
      *(_QWORD *)(a1 + 296) = v57;
      *(_QWORD *)(v10 + 96) = v57;
      goto LABEL_472;
    }
    ++*(_QWORD *)(a1 + 336);
    v51 = v50 + 27;
    *(_DWORD *)(a1 + 256) = v50 + 27;
    v52 = v21 + v19;
    v54 = v20 < v21 || v52 <= v20;
    v55 = v52 - v20;
    if (v54)
      v18 = 0;
    else
      v18 = v55;
    if (v18 < v51)
    {
      *(_QWORD *)(a1 + 272) = v20;
      v56 = *(char **)(v10 + 72);
      if (v56 == *(char **)(v10 + 128))
      {
        if (v55)
          v58 = v54;
        else
          v58 = 1;
        if (v58)
          v59 = 0;
        else
          v59 = &v56[(v20 - v21)];
        memmove(v56, v59, v18);
        v60 = *(unsigned __int8 *)(a1 + 414) + 27;
        v10 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v10 + 120) < v60)
        {
          *(_DWORD *)(v10 + 120) = v60;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v60);
          v10 = *(_QWORD *)(a1 + 8);
        }
        *(_DWORD *)(v10 + 116) = v18;
        *(_QWORD *)(v10 + 96) = *(_QWORD *)(v10 + 88) + *(unsigned int *)(v10 + 80);
      }
      else
      {
        if (*(_DWORD *)(v10 + 120) < v51)
        {
          *(_DWORD *)(v10 + 120) = v51;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v51);
          v10 = *(_QWORD *)(a1 + 8);
        }
        LODWORD(v18) = 0;
        *(_DWORD *)(v10 + 116) = 0;
      }
LABEL_111:
      v61 = *(_DWORD *)(a1 + 256) - v18;
      v62 = *(_QWORD *)(v10 + 88);
      v63 = *(_QWORD *)(v10 + 96);
      v64 = v62 + *(unsigned int *)(v10 + 80);
      if (v64 <= v63 || v63 < v62)
        v66 = 0;
      else
        v66 = v64 - v63;
      if (v61 <= v66)
        v61 = v66;
      v254[0] = v61;
      v67 = v61 + v18;
      if (*(_DWORD *)(v10 + 120) < v67)
      {
        *(_DWORD *)(v10 + 120) = v67;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v67);
        v10 = *(_QWORD *)(a1 + 8);
      }
      StreamBuffer::Copy((_QWORD *)(v10 + 72), v254, (unsigned __int8 *)(*(_QWORD *)(v10 + 128) + *(unsigned int *)(v10 + 116)));
      v10 = *(_QWORD *)(a1 + 8);
      v55 = *(_DWORD *)(v10 + 116) + v254[0];
      *(_DWORD *)(v10 + 116) = v55;
      if (v55 < *(_DWORD *)(a1 + 256))
      {
        v223 = 210;
        goto LABEL_424;
      }
      v20 = *(_QWORD *)(a1 + 272);
      v68 = *(_QWORD *)(v10 + 128);
      *(_QWORD *)(v10 + 88) = v20;
      *(_QWORD *)(v10 + 96) = v20;
      *(_QWORD *)(v10 + 72) = v68;
      *(_DWORD *)(v10 + 80) = v55;
      v52 = v20 + v55;
      v21 = v20;
    }
    v69 = 0;
    if (v20 >= v21 && v20 < v52 && v55)
      v69 = *(_QWORD *)(v10 + 72) + (v20 - v21);
    Ogg::PagePacketInfo::Deserialize((Ogg::PagePacketInfo *)(a1 + 416), (const unsigned __int8 *)(v69 + 27), *(unsigned __int8 *)(a1 + 414));
    v70 = *(unsigned __int8 *)(a1 + 414) + *(_QWORD *)(a1 + 296) + 27;
    *(_QWORD *)(a1 + 296) = v70;
    v12 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(v12 + 96) = v70;
    if (*(_BYTE *)(a1 + 1480) && *(_DWORD *)(v8 + 8) != *(_DWORD *)(a1 + 344))
    {
      v80 = *(_DWORD *)(a1 + 420);
      while (1)
      {
        *(_DWORD *)(a1 + 256) = v80;
        if (!v80)
        {
          *(_QWORD *)(a1 + 296) += *(unsigned int *)(a1 + 420);
          goto LABEL_472;
        }
LABEL_456:
        v237 = *(_QWORD *)(a1 + 8);
        v239 = *(_QWORD *)(v237 + 88);
        v238 = *(_QWORD *)(v237 + 96);
        v240 = v239 + *(unsigned int *)(v237 + 80);
        v241 = v240 - v238;
        v242 = v238 < v239 || v240 <= v238;
        if (v242 || (_DWORD)v240 == (_DWORD)v238)
          break;
        v244 = *(unsigned int *)(a1 + 256);
        v245 = v238 + v244;
        v246 = v244 >= v241;
        v247 = v244 - v241;
        if (v246)
          v245 = v240;
        if (v246)
          v80 = v247;
        else
          v80 = 0;
        *(_QWORD *)(v237 + 96) = v245;
      }
      v223 = 220;
      goto LABEL_424;
    }
    *(_BYTE *)(a1 + 1481) = *(_BYTE *)(a1 + 1752);
    v71 = *(_DWORD *)(a1 + 1452);
    *(_DWORD *)(a1 + 1456) = v71;
    v72 = *(_BYTE *)(a1 + 393);
    if ((v72 & 4) != 0 && !*(_QWORD *)(a1 + 1496))
    {
      v73 = *(_QWORD *)(a1 + 1488);
      if (v73 != -1)
        *(_QWORD *)(a1 + 1496) = *(_QWORD *)v8 - v73;
    }
    *(_DWORD *)(a1 + 1476) = 0;
    if (*(_QWORD *)(a1 + 1528) == *(_QWORD *)(a1 + 1520))
    {
      v81 = 0;
    }
    else
    {
      if ((v72 & 1) == 0)
        goto LABEL_422;
      if (*(_DWORD *)(a1 + 424))
      {
        v71 = Ogg::PagePacketInfo::operator[](a1 + 416, 0);
        v12 = *(_QWORD *)(a1 + 8);
        v70 = *(_QWORD *)(v12 + 96);
      }
      *(_DWORD *)(a1 + 1472) = v71;
      *(_DWORD *)(a1 + 256) = v71;
      v74 = *(_QWORD *)(v12 + 88);
      v75 = v74 + *(unsigned int *)(v12 + 80);
      v77 = v70 < v74 || v75 <= v70;
      v78 = v75 - v70;
      if (v77)
        v15 = 0;
      else
        v15 = v78;
      if (v15 < v71)
      {
        *(_QWORD *)(a1 + 272) = v70;
        v79 = *(_QWORD *)(v12 + 72);
        if (v79 == *(_QWORD *)(v12 + 128))
        {
          if (v78)
            v82 = v77;
          else
            v82 = 1;
          if (v82)
            v83 = 0;
          else
            v83 = (const void *)(v79 + (v70 - v74));
          memmove(*(void **)(v12 + 72), v83, v15);
          v84 = *(unsigned int *)(a1 + 1472);
          v12 = *(_QWORD *)(a1 + 8);
          if (*(_DWORD *)(v12 + 120) < v84)
          {
            *(_DWORD *)(v12 + 120) = v84;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v84);
            v12 = *(_QWORD *)(a1 + 8);
          }
          *(_DWORD *)(v12 + 116) = v15;
          *(_QWORD *)(v12 + 96) = *(_QWORD *)(v12 + 88) + *(unsigned int *)(v12 + 80);
        }
        else
        {
          if (*(_DWORD *)(v12 + 120) < v71)
          {
            *(_DWORD *)(v12 + 120) = v71;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v71);
            v12 = *(_QWORD *)(a1 + 8);
          }
          LODWORD(v15) = 0;
          *(_DWORD *)(v12 + 116) = 0;
        }
LABEL_162:
        v85 = *(_DWORD *)(a1 + 256) - v15;
        v86 = *(_QWORD *)(v12 + 88);
        v87 = *(_QWORD *)(v12 + 96);
        v88 = v86 + *(unsigned int *)(v12 + 80);
        if (v88 <= v87 || v87 < v86)
          v90 = 0;
        else
          v90 = v88 - v87;
        if (v85 <= v90)
          v85 = v90;
        v254[0] = v85;
        v91 = v85 + v15;
        if (*(_DWORD *)(v12 + 120) < v91)
        {
          *(_DWORD *)(v12 + 120) = v91;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v91);
          v12 = *(_QWORD *)(a1 + 8);
        }
        StreamBuffer::Copy((_QWORD *)(v12 + 72), v254, (unsigned __int8 *)(*(_QWORD *)(v12 + 128) + *(unsigned int *)(v12 + 116)));
        v12 = *(_QWORD *)(a1 + 8);
        v78 = *(_DWORD *)(v12 + 116) + v254[0];
        *(_DWORD *)(v12 + 116) = v78;
        if (v78 < *(_DWORD *)(a1 + 256))
        {
          v223 = 260;
          goto LABEL_424;
        }
        v70 = *(_QWORD *)(a1 + 272);
        v92 = *(_QWORD *)(v12 + 128);
        *(_QWORD *)(v12 + 88) = v70;
        *(_QWORD *)(v12 + 96) = v70;
        *(_QWORD *)(v12 + 72) = v92;
        *(_DWORD *)(v12 + 80) = v78;
        v75 = v70 + v78;
        v74 = v70;
      }
      v93 = 0;
      if (v70 >= v74 && v70 < v75 && v78 != 0)
        v93 = (char *)(*(_QWORD *)(v12 + 72) + (v70 - v74));
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1 + 1520, *(char **)(a1 + 1528), v93, &v93[*(unsigned int *)(a1 + 1472)], *(unsigned int *)(a1 + 1472));
      if (*(_DWORD *)(a1 + 424))
      {
        if (!*(_DWORD *)(a1 + 200))
        {
          *(_DWORD *)(a1 + 200) = 1;
          CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), 1);
        }
        v95 = *(_QWORD *)(a1 + 192);
        *(_QWORD *)v95 = 0;
        v96 = *(_BYTE **)(a1 + 1520);
        v97 = *(_DWORD *)(a1 + 1528) - (_DWORD)v96;
        *(_DWORD *)(v95 + 12) = v97;
        v98 = *(PacketDurationParser **)(a1 + 1760);
        if (v98)
        {
          v99 = PacketDurationParser::FramesInPacket(v98, v96, v97);
          *(_DWORD *)(*(_QWORD *)(a1 + 192) + 8) = v99;
        }
        else
        {
          *(_DWORD *)(v95 + 8) = 0;
          v99 = *(_DWORD *)(a1 + 44);
        }
        v100 = *(_QWORD *)(a1 + 1464) + v99;
        *(_QWORD *)(a1 + 1464) = v100;
        if ((*(_BYTE *)(a1 + 393) & 4) != 0)
        {
          v101 = *(_QWORD *)(a1 + 1496);
          if (v101 >= 1 && *(_QWORD *)(a1 + 1504) == -1 && v100 > v101)
          {
            *(_QWORD *)(a1 + 1504) = *(_QWORD *)(a1 + 184);
            *(_DWORD *)(a1 + 1512) = v101;
            v102 = *(_QWORD *)(a1 + 8);
            v254[0] = 0;
            v103 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v102 + 24);
            if (v103)
              v103(*(_QWORD *)(v102 + 40), *(unsigned int *)(v102 + 8), 1919316848, v254);
          }
        }
        v104 = (_QWORD *)(a1 + (a4 >> 1));
        if ((a4 & 1) != 0)
          v105 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*v104 + a3))(v104, 1, *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 1520), *(_DWORD *)(a1 + 1528) - *(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 192));
        else
          v105 = ((uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))a3)(v104, 1, *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 1520), *(_DWORD *)(a1 + 1528) - *(_QWORD *)(a1 + 1520), *(_QWORD *)(a1 + 192));
        if ((v105 & 1) == 0)
        {
LABEL_421:
          if (!*(_BYTE *)(a1 + 1481))
            goto LABEL_423;
LABEL_422:
          *(_BYTE *)(a1 + 177) = 1;
          goto LABEL_423;
        }
        v81 = *(_DWORD *)(a1 + 1476) + 1;
        *(_DWORD *)(a1 + 1476) = v81;
        *(_QWORD *)(a1 + 1528) = *(_QWORD *)(a1 + 1520);
        ++*(_QWORD *)(a1 + 376);
      }
      else
      {
        *(_DWORD *)(a1 + 1456) = 0;
        v81 = *(_DWORD *)(a1 + 1476);
      }
      v106 = *(_QWORD *)(a1 + 296) + *(unsigned int *)(a1 + 1472);
      *(_QWORD *)(a1 + 296) = v106;
      v12 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(v12 + 96) = v106;
      *(_DWORD *)(a1 + 1472) = 0;
    }
    if (v81 < *(_DWORD *)(a1 + 424))
    {
      *(_DWORD *)(a1 + 1472) = 0;
      do
      {
        v107 = *(_DWORD *)(a1 + 1472) + Ogg::PagePacketInfo::operator[](a1 + 416, v81);
        *(_DWORD *)(a1 + 1472) = v107;
        ++v81;
      }
      while (v81 < *(_DWORD *)(a1 + 424));
      v16 = *(_QWORD *)(a1 + 8);
      v109 = *(_QWORD *)(v16 + 88);
      v108 = *(_QWORD *)(v16 + 96);
      v110 = *(unsigned int *)(v16 + 80);
      *(_DWORD *)(a1 + 256) = v107;
      v111 = v109 + v110;
      v113 = v108 < v109 || v111 <= v108;
      v114 = v111 - v108;
      if (v113)
        v17 = 0;
      else
        v17 = v114;
      if (v17 < v107)
      {
        *(_QWORD *)(a1 + 272) = v108;
        v115 = *(char **)(v16 + 72);
        if (v115 == *(char **)(v16 + 128))
        {
          if (v114)
            v116 = v113;
          else
            v116 = 1;
          if (v116)
            v117 = 0;
          else
            v117 = &v115[(v108 - v109)];
          memmove(v115, v117, v17);
          v118 = *(unsigned int *)(a1 + 1472);
          v16 = *(_QWORD *)(a1 + 8);
          if (*(_DWORD *)(v16 + 120) < v118)
          {
            *(_DWORD *)(v16 + 120) = v118;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v16 + 128), v118);
            v16 = *(_QWORD *)(a1 + 8);
          }
          *(_DWORD *)(v16 + 116) = v17;
          *(_QWORD *)(v16 + 96) = *(_QWORD *)(v16 + 88) + *(unsigned int *)(v16 + 80);
        }
        else
        {
          if (*(_DWORD *)(v16 + 120) < v107)
          {
            *(_DWORD *)(v16 + 120) = v107;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v16 + 128), v107);
            v16 = *(_QWORD *)(a1 + 8);
          }
          LODWORD(v17) = 0;
          *(_DWORD *)(v16 + 116) = 0;
        }
LABEL_225:
        v119 = *(_DWORD *)(a1 + 256) - v17;
        v120 = *(_QWORD *)(v16 + 88);
        v121 = *(_QWORD *)(v16 + 96);
        v122 = v120 + *(unsigned int *)(v16 + 80);
        if (v122 <= v121 || v121 < v120)
          v124 = 0;
        else
          v124 = v122 - v121;
        if (v119 <= v124)
          v119 = v124;
        v254[0] = v119;
        v125 = v119 + v17;
        if (*(_DWORD *)(v16 + 120) < v125)
        {
          *(_DWORD *)(v16 + 120) = v125;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v16 + 128), v125);
          v16 = *(_QWORD *)(a1 + 8);
        }
        StreamBuffer::Copy((_QWORD *)(v16 + 72), v254, (unsigned __int8 *)(*(_QWORD *)(v16 + 128) + *(unsigned int *)(v16 + 116)));
        v16 = *(_QWORD *)(a1 + 8);
        v114 = *(_DWORD *)(v16 + 116) + v254[0];
        *(_DWORD *)(v16 + 116) = v114;
        if (v114 < *(_DWORD *)(a1 + 256))
        {
          v223 = 318;
          goto LABEL_424;
        }
        v108 = *(_QWORD *)(a1 + 272);
        v126 = *(_QWORD *)(v16 + 128);
        *(_QWORD *)(v16 + 88) = v108;
        *(_QWORD *)(v16 + 96) = v108;
        *(_QWORD *)(v16 + 72) = v126;
        *(_DWORD *)(v16 + 80) = v114;
        v111 = v108 + v114;
        v109 = v108;
      }
      v127 = 0;
      v128 = v108 >= v109 && v108 < v111;
      v129 = !v128;
      if (v128 && v114)
        v127 = *(_QWORD *)(v16 + 72) + (v108 - v109);
      if (v129)
        v130 = 0;
      else
        v130 = v114;
      if (v130 < *(_DWORD *)(a1 + 1472))
        goto LABEL_423;
      v131 = *(_DWORD *)(a1 + 424);
      v132 = *(_DWORD *)(a1 + 1476);
      if (*(_DWORD *)(a1 + 200) < v131 - v132)
      {
        v133 = (1 << -__clz(v131 - v132 - 1));
        *(_DWORD *)(a1 + 200) = v133;
        CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), v133);
        v132 = *(_DWORD *)(a1 + 1476);
        v131 = *(_DWORD *)(a1 + 424);
      }
      v134 = 0;
      if (v132 < v131)
      {
        LODWORD(v134) = 0;
        do
        {
          v135 = *(_QWORD **)(a1 + 192);
          if ((_DWORD)v134)
          {
            v136 = v134;
            v135[2 * v134] = v135[2 * (v134 - 1)]
                                         + HIDWORD(v135[2 * (v134 - 1) + 1]);
          }
          else
          {
            v136 = 0;
            *v135 = 0;
          }
          v137 = Ogg::PagePacketInfo::operator[](a1 + 416, v132);
          v138 = *(_QWORD *)(a1 + 192);
          *(_DWORD *)(v138 + 16 * v136 + 12) = v137;
          if (*(_BYTE *)(a1 + 1481))
          {
            v139 = v137;
            v140 = *(PacketDurationParser **)(a1 + 1760);
            if (v140)
            {
              LODWORD(v140) = PacketDurationParser::FramesInPacket(v140, (_BYTE *)(v127 + *(_QWORD *)(v138 + 16 * v136)), v139);
              v138 = *(_QWORD *)(a1 + 192);
              v141 = v140;
            }
            else
            {
              v141 = *(_DWORD *)(a1 + 44);
            }
            *(_DWORD *)(v138 + 16 * v136 + 8) = (_DWORD)v140;
            v142 = *(_QWORD *)(a1 + 1464);
            v143 = v142 + v141;
            *(_QWORD *)(a1 + 1464) = v143;
            if ((*(_BYTE *)(a1 + 393) & 4) != 0)
            {
              v144 = *(_QWORD *)(a1 + 1496);
              if (v144 >= 1 && *(_QWORD *)(a1 + 1504) == -1 && v143 > v144)
              {
                *(_QWORD *)(a1 + 1504) = *(_QWORD *)(a1 + 184) + v136;
                *(_DWORD *)(a1 + 1512) = v144 - v142;
                v145 = *(_QWORD *)(a1 + 8);
                v254[0] = 0;
                v146 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v145 + 24);
                if (v146)
                  v146(*(_QWORD *)(v145 + 40), *(unsigned int *)(v145 + 8), 1919316848, v254);
              }
            }
          }
          v134 = (v134 + 1);
          v132 = *(_DWORD *)(a1 + 1476) + 1;
          *(_DWORD *)(a1 + 1476) = v132;
        }
        while (v132 < *(_DWORD *)(a1 + 424));
      }
      if (a4)
        v147 = (a4 & 1 | a3) == 0;
      else
        v147 = 1;
      v148 = v147;
      if ((uint64_t (*)(OggAudioStream *, unsigned int, unint64_t, const unsigned __int8 *, UInt32, AudioStreamPacketDescription *))a3 != OggAudioStream::ProvideAudioPackets
        || !v148
        || *(_QWORD *)(a1 + 184)
        || (v149 = *(_QWORD *)(a1 + 8), *(_BYTE *)(v149 + 107))
        || *(_BYTE *)(v149 + 106))
      {
LABEL_280:
        v150 = (_QWORD *)(a1 + (a4 >> 1));
        if ((a4 & 1) != 0)
          v151 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*v150 + a3))(v150, v134, *(_QWORD *)(a1 + 376), v127, *(unsigned int *)(a1 + 1472), *(_QWORD *)(a1 + 192));
        else
          v151 = ((uint64_t (*)(_QWORD *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))a3)(v150, v134, *(_QWORD *)(a1 + 376), v127, *(unsigned int *)(a1 + 1472), *(_QWORD *)(a1 + 192));
        if (!v151)
          goto LABEL_421;
        if (!*(_BYTE *)(a1 + 1480))
        {
          if (!*(_DWORD *)(a1 + 384))
          {
            v195 = *(__int32 **)(a1 + 360);
            v196 = wmemchr(*(__int32 **)(a1 + 352), *(_DWORD *)(v8 + 8), ((uint64_t)v195 - *(_QWORD *)(a1 + 352)) >> 2);
            if (v196)
              v197 = v196;
            else
              v197 = v195;
            v198 = *(__int32 **)(a1 + 360);
            if (v197 != v198)
              goto LABEL_422;
            v199 = *(_DWORD *)(v8 + 8);
            v200 = *(_QWORD *)(a1 + 368);
            if ((unint64_t)v197 >= v200)
            {
              v202 = *(__int32 **)(a1 + 352);
              v203 = v198 - v202;
              v204 = v203 + 1;
              v205 = (unint64_t)(v203 + 1) >> 62;
              if (v205)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v206 = 0;
              v207 = v200 - (_QWORD)v202;
              if (v207 >> 1 > v204)
                v204 = v207 >> 1;
              v246 = (unint64_t)v207 >= 0x7FFFFFFFFFFFFFFCLL;
              v208 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v246)
                v208 = v204;
              if (v208)
              {
                v205 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v208);
                v202 = *(__int32 **)(a1 + 352);
                v197 = *(__int32 **)(a1 + 360);
              }
              v209 = (__int32 *)(v205 + 4 * v203);
              v210 = v205 + 4 * v206;
              *v209 = v199;
              v201 = v209 + 1;
              while (v197 != v202)
              {
                v211 = *--v197;
                *--v209 = v211;
              }
              *(_QWORD *)(a1 + 352) = v209;
              *(_QWORD *)(a1 + 360) = v201;
              *(_QWORD *)(a1 + 368) = v210;
              if (v202)
                operator delete(v202);
            }
            else
            {
              *v197 = v199;
              v201 = v197 + 1;
            }
            *(_QWORD *)(a1 + 360) = v201;
            goto LABEL_288;
          }
          *(_BYTE *)(a1 + 1480) = 1;
          *(_DWORD *)(a1 + 344) = *(_DWORD *)(v8 + 8);
        }
        *(_QWORD *)(a1 + 376) += v134;
LABEL_288:
        v152 = *(_QWORD *)(a1 + 296) + *(unsigned int *)(a1 + 1472);
        *(_QWORD *)(a1 + 296) = v152;
        v12 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(v12 + 96) = v152;
        *(_DWORD *)(a1 + 1472) = 0;
        goto LABEL_289;
      }
      if (*(_DWORD *)(a1 + 32) == 1987015266 && v134 >= 2)
      {
        v224 = *(_DWORD *)(a1 + 44);
        if (v224)
        {
          v224 *= (_DWORD)v134 - 1;
        }
        else
        {
          v225 = v134 - 1;
          v226 = (int *)(*(_QWORD *)(a1 + 192) + 24);
          do
          {
            v227 = *v226;
            v226 += 4;
            v224 += v227;
            --v225;
          }
          while (v225);
        }
        if (*(_QWORD *)v8 < (uint64_t)v224)
          *(_DWORD *)(a1 + 1484) = v224 - *(_QWORD *)v8;
      }
      if ((*(_QWORD *)(a1 + 1744) & 0x8000000000000000) == 0)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
        v228 = *(_QWORD *)(a1 + 8);
        v254[0] = 1;
        v229 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v228 + 24);
        if (v229)
          v229(*(_QWORD *)(v228 + 40), *(unsigned int *)(v228 + 8), 1885564532, v254);
      }
      v230 = *(_QWORD *)(a1 + 1728);
      if (v230 < 0)
      {
        v232 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        v231 = *(_DWORD *)(a1 + 1736);
        v232 = *(_QWORD *)(a1 + 8);
        if ((v231 & 0x80000000) == 0)
        {
          *(_QWORD *)(a1 + 160) = v230;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(a1 + 1720);
          *(_DWORD *)(a1 + 172) = v231;
          v254[0] = 1;
          if (*(_BYTE *)(v232 + 106))
            goto LABEL_280;
          *(_BYTE *)(v232 + 106) = 1;
          v233 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(v232 + 24);
          if (!v233)
            goto LABEL_280;
          v234 = *(_QWORD *)(v232 + 40);
          v235 = *(unsigned int *)(v232 + 8);
          v236 = 1886283375;
          goto LABEL_454;
        }
      }
      v254[0] = 1;
      if (*(_BYTE *)(v232 + 107))
        goto LABEL_280;
      *(_BYTE *)(v232 + 107) = 1;
      v233 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(v232 + 24);
      if (!v233)
        goto LABEL_280;
      v234 = *(_QWORD *)(v232 + 40);
      v235 = *(unsigned int *)(v232 + 8);
      v236 = 1886547302;
LABEL_454:
      v233(v234, v235, v236, v254);
      goto LABEL_280;
    }
LABEL_289:
    v153 = *(unsigned int *)(a1 + 1456);
    if ((_DWORD)v153)
    {
      *(_DWORD *)(a1 + 256) = v153;
      v155 = *(_QWORD *)(v12 + 88);
      v154 = *(_QWORD *)(v12 + 96);
      v156 = v155 + *(unsigned int *)(v12 + 80);
      v158 = v154 < v155 || v156 <= v154;
      v159 = v156 - v154;
      if (v158)
        v13 = 0;
      else
        v13 = v159;
      if (v13 < v153)
      {
        *(_QWORD *)(a1 + 272) = v154;
        v160 = *(char **)(v12 + 72);
        if (v160 == *(char **)(v12 + 128))
        {
          if (v159)
            v161 = v158;
          else
            v161 = 1;
          v162 = &v160[(v154 - v155)];
          if (v161)
            v163 = 0;
          else
            v163 = v162;
          memmove(v160, v163, v13);
          v164 = *(unsigned int *)(a1 + 1456);
          v12 = *(_QWORD *)(a1 + 8);
          if (*(_DWORD *)(v12 + 120) < v164)
          {
            *(_DWORD *)(v12 + 120) = v164;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v164);
            v12 = *(_QWORD *)(a1 + 8);
          }
          *(_DWORD *)(v12 + 116) = v13;
          *(_QWORD *)(v12 + 96) = *(_QWORD *)(v12 + 88) + *(unsigned int *)(v12 + 80);
        }
        else
        {
          if (*(_DWORD *)(v12 + 120) < v153)
          {
            *(_DWORD *)(v12 + 120) = v153;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v153);
            v12 = *(_QWORD *)(a1 + 8);
          }
          LODWORD(v13) = 0;
          *(_DWORD *)(v12 + 116) = 0;
        }
LABEL_313:
        v165 = *(_DWORD *)(a1 + 256) - v13;
        v166 = *(_QWORD *)(v12 + 88);
        v167 = *(_QWORD *)(v12 + 96);
        v168 = v166 + *(unsigned int *)(v12 + 80);
        if (v168 <= v167 || v167 < v166)
          v170 = 0;
        else
          v170 = v168 - v167;
        if (v165 <= v170)
          v165 = v170;
        v254[0] = v165;
        v171 = v165 + v13;
        if (*(_DWORD *)(v12 + 120) < v171)
        {
          *(_DWORD *)(v12 + 120) = v171;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v171);
          v12 = *(_QWORD *)(a1 + 8);
        }
        StreamBuffer::Copy((_QWORD *)(v12 + 72), v254, (unsigned __int8 *)(*(_QWORD *)(v12 + 128) + *(unsigned int *)(v12 + 116)));
        v12 = *(_QWORD *)(a1 + 8);
        v159 = *(_DWORD *)(v12 + 116) + v254[0];
        *(_DWORD *)(v12 + 116) = v159;
        if (v159 < *(_DWORD *)(a1 + 256))
        {
          v223 = 466;
          goto LABEL_424;
        }
        v154 = *(_QWORD *)(a1 + 272);
        v172 = *(_QWORD *)(v12 + 128);
        *(_QWORD *)(v12 + 88) = v154;
        *(_QWORD *)(v12 + 96) = v154;
        *(_QWORD *)(v12 + 72) = v172;
        *(_DWORD *)(v12 + 80) = v159;
        v156 = v154 + v159;
        v155 = v154;
      }
      v173 = 0;
      if (v154 >= v155 && v154 < v156 && v159 != 0)
        v173 = (char *)(*(_QWORD *)(v12 + 72) + (v154 - v155));
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1 + 1520, *(char **)(a1 + 1528), v173, &v173[*(unsigned int *)(a1 + 1456)], *(unsigned int *)(a1 + 1456));
      v176 = *(_QWORD *)(a1 + 296) + *(unsigned int *)(a1 + 1456);
      *(_QWORD *)(a1 + 296) = v176;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) = v176;
    }
    if (*(_BYTE *)(a1 + 1752))
    {
      if (!*(_BYTE *)(a1 + 1481))
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a1 + 1544);
        *(_QWORD *)v254 = 0;
        v255 = 0;
        v256 = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v254, *(const void **)(a1 + 1608), *(_QWORD *)(a1 + 1616), *(_QWORD *)(a1 + 1616) - *(_QWORD *)(a1 + 1608));
        v177 = *(void **)v254;
        v178 = v255 - *(_QWORD *)v254;
        CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 120), v255 - *(_QWORD *)v254, 0);
        memcpy(*(void **)(a1 + 120), v177, v178);
        *(_DWORD *)(a1 + 128) = v178;
        v251 = 0;
        v252 = 0;
        v253 = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v251, *(const void **)(a1 + 1632), *(_QWORD *)(a1 + 1640), *(_QWORD *)(a1 + 1640) - *(_QWORD *)(a1 + 1632));
        v179 = v251;
        v180 = v252 - (_QWORD)v251;
        CADeprecated::CAAutoFree<AudioChannelLayout>::alloc((void **)(a1 + 136), v252 - (_QWORD)v251);
        memcpy(*(void **)(a1 + 136), v179, v180);
        *(_DWORD *)(a1 + 144) = v180;
        v248 = 0;
        v249 = 0;
        v250 = 0;
        std::vector<AudioFormatListItem>::__init_with_size[abi:ne180100]<AudioFormatListItem*,AudioFormatListItem*>(&v248, *(const void **)(a1 + 1584), *(_QWORD *)(a1 + 1592), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 1592) - *(_QWORD *)(a1 + 1584)) >> 4));
        v181 = v248;
        if (v249 != v248)
          (*(void (**)(uint64_t, _QWORD, void *))(*(_QWORD *)a1 + 64))(a1, ((_DWORD)v249 - (_DWORD)v248) & 0xFFFFFFF0, v248);
        v182 = *(_QWORD *)(a1 + 8);
        if (!*(_BYTE *)(v182 + 104))
        {
          v257 = 1;
          *(_BYTE *)(v182 + 104) = 1;
          v183 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v182 + 24);
          if (v183)
          {
            v183(*(_QWORD *)(v182 + 40), *(unsigned int *)(v182 + 8), 1717988724, &v257);
            v182 = *(_QWORD *)(a1 + 8);
          }
        }
        if (!*(_BYTE *)(v182 + 105))
        {
          v257 = 1;
          *(_BYTE *)(v182 + 105) = 1;
          v184 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v182 + 24);
          if (v184)
          {
            v184(*(_QWORD *)(v182 + 40), *(unsigned int *)(v182 + 8), 1684434292, &v257);
            v182 = *(_QWORD *)(a1 + 8);
          }
        }
        if (!*(_BYTE *)(v182 + 108) && *(_DWORD *)(a1 + 128))
        {
          v257 = 1;
          *(_BYTE *)(v182 + 108) = 1;
          v192 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v182 + 24);
          if (v192)
          {
            v192(*(_QWORD *)(v182 + 40), *(unsigned int *)(v182 + 8), 1835493731, &v257);
            v182 = *(_QWORD *)(a1 + 8);
            v193 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v182 + 24);
            v257 = 1;
            *(_BYTE *)(v182 + 108) = 1;
            if (v193)
            {
              v193(*(_QWORD *)(v182 + 40), *(unsigned int *)(v182 + 8), 1718383476, &v257);
              v182 = *(_QWORD *)(a1 + 8);
            }
          }
          else
          {
            v257 = 1;
            *(_BYTE *)(v182 + 108) = 1;
          }
        }
        if (!*(_BYTE *)(v182 + 109))
        {
          if (*(_DWORD *)(a1 + 144))
          {
            v257 = 1;
            *(_BYTE *)(v182 + 109) = 1;
            v194 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v182 + 24);
            if (v194)
              v194(*(_QWORD *)(v182 + 40), *(unsigned int *)(v182 + 8), 1668112752, &v257);
          }
        }
        if (!*(_DWORD *)(a1 + 44))
        {
          v185 = a2;
          v186 = *(const void **)(a1 + 120);
          v187 = (PacketDurationParser *)operator new();
          PacketDurationParser::PacketDurationParser(v187, (const AudioStreamBasicDescription *)(a1 + 24), v186, *(_DWORD *)(a1 + 128));
          v188 = *(_QWORD *)(a1 + 1760);
          *(_QWORD *)(a1 + 1760) = v187;
          a2 = v185;
          if (v188)
          {
            MEMORY[0x193FFE460](v188, 0x1000C40BD41A4CDLL);
            v187 = *(PacketDurationParser **)(a1 + 1760);
          }
          if (!*((_BYTE *)v187 + 40))
          {
            *(_QWORD *)(a1 + 1760) = 0;
            MEMORY[0x193FFE460](v187, 0x1000C40BD41A4CDLL);
          }
        }
        if (v181)
          operator delete(v181);
        if (v179)
          operator delete(v179);
        if (v177)
          operator delete(v177);
      }
      v189 = a4 & 1 | a3;
      if (a4)
        v190 = v189 == 0;
      else
        v190 = 1;
      v191 = v190;
      if ((uint64_t (*)(const AudioStreamPacketDescription *, unsigned int, unint64_t, const unsigned __int8 *, unsigned int, AudioStreamPacketDescription *, unsigned int *))a3 == OggAudioStream::ParseHeaderPackets
        && v191
        && *(_QWORD *)(a1 + 376) >= (unint64_t)*(unsigned int *)(a1 + 384))
      {
        goto LABEL_399;
      }
    }
    else if (*(_QWORD *)(a1 + 376) > 2uLL)
    {
      goto LABEL_423;
    }
    if ((*(_BYTE *)(a1 + 393) & 4) != 0)
      break;
    if (*(_DWORD *)(a1 + 424) && (*(_QWORD *)v8 & 0x8000000000000000) == 0)
      *(_QWORD *)(a1 + 1488) = *(_QWORD *)v8;
LABEL_472:
    *(_DWORD *)(a1 + 411) = 0;
    *(_QWORD *)(a1 + 404) = 0;
    *(_OWORD *)(a1 + 388) = 0u;
    bzero((void *)(a1 + 416), 0x414uLL);
    *(_OWORD *)(a1 + 1464) = 0u;
    while (1)
    {
LABEL_22:
      v10 = *(_QWORD *)(a1 + 8);
      v19 = *(unsigned int *)(v10 + 80);
      v21 = *(_QWORD *)(v10 + 88);
      v20 = *(_QWORD *)(v10 + 96);
      v22 = v21 + v19;
      v23 = v20 < v21 || v22 <= v20;
      if (v23 || (v14 = v22 - v20, (_DWORD)v22 == (_DWORD)v20))
      {
        v223 = 197;
        goto LABEL_424;
      }
      *(_DWORD *)(a1 + 256) = 4;
      if (v14 <= 3)
      {
        *(_QWORD *)(a1 + 272) = v20;
        v24 = *(_QWORD *)(v10 + 72);
        if (v24 == *(_QWORD *)(v10 + 128))
        {
          if ((_DWORD)v22 == (_DWORD)v20)
            v25 = 0;
          else
            v25 = (const void *)(v24 + (v20 - v21));
          memmove(*(void **)(v10 + 72), v25, (v22 - v20));
          v10 = *(_QWORD *)(a1 + 8);
          if (*(_DWORD *)(v10 + 120) <= 3u)
          {
            *(_DWORD *)(v10 + 120) = 4;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), 4uLL);
            v10 = *(_QWORD *)(a1 + 8);
          }
          *(_DWORD *)(v10 + 116) = v14;
          *(_QWORD *)(v10 + 96) = *(_QWORD *)(v10 + 88) + *(unsigned int *)(v10 + 80);
        }
        else
        {
          if (*(_DWORD *)(v10 + 120) <= 3u)
          {
            *(_DWORD *)(v10 + 120) = 4;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), 4uLL);
            v10 = *(_QWORD *)(a1 + 8);
          }
          v14 = 0;
          *(_DWORD *)(v10 + 116) = 0;
        }
LABEL_38:
        v26 = *(_DWORD *)(a1 + 256) - v14;
        v27 = *(_QWORD *)(v10 + 88);
        v28 = *(_QWORD *)(v10 + 96);
        v29 = v27 + *(unsigned int *)(v10 + 80);
        if (v29 <= v28 || v28 < v27)
          v31 = 0;
        else
          v31 = v29 - v28;
        if (v26 <= v31)
          v26 = v31;
        v254[0] = v26;
        v32 = v26 + v14;
        if (*(_DWORD *)(v10 + 120) < v32)
        {
          *(_DWORD *)(v10 + 120) = v32;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v32);
          v10 = *(_QWORD *)(a1 + 8);
        }
        StreamBuffer::Copy((_QWORD *)(v10 + 72), v254, (unsigned __int8 *)(*(_QWORD *)(v10 + 128) + *(unsigned int *)(v10 + 116)));
        v10 = *(_QWORD *)(a1 + 8);
        LODWORD(v19) = *(_DWORD *)(v10 + 116) + v254[0];
        *(_DWORD *)(v10 + 116) = v19;
        if (v19 < *(_DWORD *)(a1 + 256))
        {
          v223 = 199;
          goto LABEL_424;
        }
        v20 = *(_QWORD *)(a1 + 272);
        v33 = *(_QWORD *)(v10 + 128);
        *(_QWORD *)(v10 + 88) = v20;
        *(_QWORD *)(v10 + 96) = v20;
        *(_QWORD *)(v10 + 72) = v33;
        *(_DWORD *)(v10 + 80) = v19;
        v21 = v20;
      }
      v34 = (v20 - v21);
      if (*(_DWORD *)(*(_QWORD *)(v10 + 72) + v34) == 1399285583)
        break;
      v38 = *(_QWORD *)(a1 + 296) + 1;
      *(_QWORD *)(a1 + 296) = v38;
      *(_QWORD *)(v10 + 96) = v38;
    }
    *(_DWORD *)(a1 + 256) = 27;
    v35 = v21 + v19;
    v36 = v35 - v20;
    if (v35 > v20)
      v11 = v36;
    else
      v11 = 0;
    if (v11 <= 0x1A)
    {
      *(_QWORD *)(a1 + 272) = v20;
      v37 = *(char **)(v10 + 72);
      if (v37 == *(char **)(v10 + 128))
      {
        if (v36)
          v39 = v35 <= v20;
        else
          v39 = 1;
        if (v39)
          v40 = 0;
        else
          v40 = &v37[v34];
        memmove(v37, v40, v11);
        v10 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v10 + 120) <= 0x1Au)
        {
          *(_DWORD *)(v10 + 120) = 27;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), 0x1BuLL);
          v10 = *(_QWORD *)(a1 + 8);
        }
        *(_DWORD *)(v10 + 116) = v11;
        *(_QWORD *)(v10 + 96) = *(_QWORD *)(v10 + 88) + *(unsigned int *)(v10 + 80);
      }
      else
      {
        if (*(_DWORD *)(v10 + 120) <= 0x1Au)
        {
          *(_DWORD *)(v10 + 120) = 27;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), 0x1BuLL);
          v10 = *(_QWORD *)(a1 + 8);
        }
        LODWORD(v11) = 0;
        *(_DWORD *)(v10 + 116) = 0;
      }
      goto LABEL_69;
    }
  }
  v189 = a4 & 1 | a3;
LABEL_399:
  *(_DWORD *)(a1 + 411) = 0;
  *(_QWORD *)(a1 + 404) = 0;
  *(_OWORD *)(a1 + 388) = 0u;
  bzero((void *)(a1 + 416), 0x414uLL);
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_QWORD *)(a1 + 1528) = *(_QWORD *)(a1 + 1520);
  if (a4)
    v212 = v189 == 0;
  else
    v212 = 1;
  v213 = v212;
  if ((uint64_t (*)(const AudioStreamPacketDescription *, unsigned int, unint64_t, const unsigned __int8 *, unsigned int, AudioStreamPacketDescription *, unsigned int *))a3 != OggAudioStream::ParseHeaderPackets
    || !v213
    || !*(_BYTE *)(a1 + 1752))
  {
    goto LABEL_423;
  }
  v214 = 0;
  *(_QWORD *)a2 = a1;
  *(_OWORD *)(a2 + 8) = xmmword_18F116F70;
  v215 = *(_QWORD *)(a1 + 8);
  v216 = *(_QWORD *)(v215 + 88);
  v217 = *(_QWORD *)(v215 + 96);
  v218 = v216 + *(unsigned int *)(v215 + 80);
  v219 = v217 < v216 || v218 <= v217;
  v220 = v219;
  v221 = v218 - v217;
  if (!v219 && v221)
    v214 = *(_QWORD *)(v215 + 72) + (v217 - v216);
  *(_QWORD *)(a2 + 32) = v214;
  if (v220)
    v222 = 0;
  else
    v222 = v221;
  *(_DWORD *)(a2 + 24) = v222;
}

